
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000256e0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e0  20000000  000376e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005324  200002e0  000379c0  000302e0  2**4
                  ALLOC
  3 .stack        00002004  20005604  0003cce4  000302e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
  6 .debug_info   000f8078  00000000  00000000  00030361  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f31c  00000000  00000000  001283d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001154b  00000000  00000000  001376f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002ff8  00000000  00000000  00148c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ca0  00000000  00000000  0014bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027869  00000000  00000000  0014e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0004e088  00000000  00000000  00176141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b84ef  00000000  00000000  001c41c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000b3b8  00000000  00000000  0027c6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	08 76 00 20 1d 8b 02 00 15 8c 02 00 15 8c 02 00     .v. ............
	...
   1202c:	b5 7c 01 00 00 00 00 00 00 00 00 00 d1 7d 01 00     .|...........}..
   1203c:	19 7e 01 00 15 8c 02 00 15 8c 02 00 15 8c 02 00     .~..............
   1204c:	6d 4c 02 00 99 41 02 00 15 8c 02 00 71 24 01 00     mL...A......q$..
   1205c:	15 8c 02 00 b5 25 01 00 11 53 02 00 29 53 02 00     .....%...S..)S..
   1206c:	41 53 02 00 59 53 02 00 71 53 02 00 89 53 02 00     AS..YS..qS...S..
   1207c:	65 8a 02 00 79 8a 02 00 8d 8a 02 00 a1 59 01 00     e...y........Y..
   1208c:	b5 59 01 00 c9 59 01 00 00 00 00 00 00 00 00 00     .Y...Y..........
   1209c:	f9 22 01 00 15 8c 02 00 35 24 01 00 15 8c 02 00     ."......5$......
   120ac:	15 8c 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002e0 	.word	0x200002e0
   120d4:	00000000 	.word	0x00000000
   120d8:	000376e0 	.word	0x000376e0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002e4 	.word	0x200002e4
   12108:	000376e0 	.word	0x000376e0
   1210c:	000376e0 	.word	0x000376e0
   12110:	00000000 	.word	0x00000000

00012114 <vAdcSpiTask>:
 * Created: 4/19/2024 6:55:12 PM
 *  Author: vishn
 */ 

void vAdcSpiTask(void *pvParameters)
{
   12114:	b580      	push	{r7, lr}
   12116:	b082      	sub	sp, #8
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	
   1211c:	46c0      	nop			; (mov r8, r8)
   1211e:	46bd      	mov	sp, r7
   12120:	b002      	add	sp, #8
   12122:	bd80      	pop	{r7, pc}

00012124 <adc_is_syncing>:
   12124:	b580      	push	{r7, lr}
   12126:	b084      	sub	sp, #16
   12128:	af00      	add	r7, sp, #0
   1212a:	6078      	str	r0, [r7, #4]
   1212c:	687b      	ldr	r3, [r7, #4]
   1212e:	681b      	ldr	r3, [r3, #0]
   12130:	60fb      	str	r3, [r7, #12]
   12132:	68fb      	ldr	r3, [r7, #12]
   12134:	7e5b      	ldrb	r3, [r3, #25]
   12136:	b2db      	uxtb	r3, r3
   12138:	b25b      	sxtb	r3, r3
   1213a:	2b00      	cmp	r3, #0
   1213c:	da01      	bge.n	12142 <adc_is_syncing+0x1e>
   1213e:	2301      	movs	r3, #1
   12140:	e000      	b.n	12144 <adc_is_syncing+0x20>
   12142:	2300      	movs	r3, #0
   12144:	0018      	movs	r0, r3
   12146:	46bd      	mov	sp, r7
   12148:	b004      	add	sp, #16
   1214a:	bd80      	pop	{r7, pc}

0001214c <adc_start_conversion>:
   1214c:	b580      	push	{r7, lr}
   1214e:	b084      	sub	sp, #16
   12150:	af00      	add	r7, sp, #0
   12152:	6078      	str	r0, [r7, #4]
   12154:	687b      	ldr	r3, [r7, #4]
   12156:	681b      	ldr	r3, [r3, #0]
   12158:	60fb      	str	r3, [r7, #12]
   1215a:	46c0      	nop			; (mov r8, r8)
   1215c:	687b      	ldr	r3, [r7, #4]
   1215e:	0018      	movs	r0, r3
   12160:	4b0b      	ldr	r3, [pc, #44]	; (12190 <adc_start_conversion+0x44>)
   12162:	4798      	blx	r3
   12164:	1e03      	subs	r3, r0, #0
   12166:	d1f9      	bne.n	1215c <adc_start_conversion+0x10>
   12168:	68fb      	ldr	r3, [r7, #12]
   1216a:	7b1b      	ldrb	r3, [r3, #12]
   1216c:	b2db      	uxtb	r3, r3
   1216e:	2202      	movs	r2, #2
   12170:	4313      	orrs	r3, r2
   12172:	b2da      	uxtb	r2, r3
   12174:	68fb      	ldr	r3, [r7, #12]
   12176:	731a      	strb	r2, [r3, #12]
   12178:	46c0      	nop			; (mov r8, r8)
   1217a:	687b      	ldr	r3, [r7, #4]
   1217c:	0018      	movs	r0, r3
   1217e:	4b04      	ldr	r3, [pc, #16]	; (12190 <adc_start_conversion+0x44>)
   12180:	4798      	blx	r3
   12182:	1e03      	subs	r3, r0, #0
   12184:	d1f9      	bne.n	1217a <adc_start_conversion+0x2e>
   12186:	46c0      	nop			; (mov r8, r8)
   12188:	46bd      	mov	sp, r7
   1218a:	b004      	add	sp, #16
   1218c:	bd80      	pop	{r7, pc}
   1218e:	46c0      	nop			; (mov r8, r8)
   12190:	00012125 	.word	0x00012125

00012194 <adc_disable_interrupt>:
   12194:	b580      	push	{r7, lr}
   12196:	b084      	sub	sp, #16
   12198:	af00      	add	r7, sp, #0
   1219a:	6078      	str	r0, [r7, #4]
   1219c:	000a      	movs	r2, r1
   1219e:	1cfb      	adds	r3, r7, #3
   121a0:	701a      	strb	r2, [r3, #0]
   121a2:	687b      	ldr	r3, [r7, #4]
   121a4:	681b      	ldr	r3, [r3, #0]
   121a6:	60fb      	str	r3, [r7, #12]
   121a8:	68fb      	ldr	r3, [r7, #12]
   121aa:	1cfa      	adds	r2, r7, #3
   121ac:	7812      	ldrb	r2, [r2, #0]
   121ae:	759a      	strb	r2, [r3, #22]
   121b0:	46c0      	nop			; (mov r8, r8)
   121b2:	46bd      	mov	sp, r7
   121b4:	b004      	add	sp, #16
   121b6:	bd80      	pop	{r7, pc}

000121b8 <_adc_interrupt_handler>:
   121b8:	b580      	push	{r7, lr}
   121ba:	b084      	sub	sp, #16
   121bc:	af00      	add	r7, sp, #0
   121be:	0002      	movs	r2, r0
   121c0:	1dfb      	adds	r3, r7, #7
   121c2:	701a      	strb	r2, [r3, #0]
   121c4:	1dfb      	adds	r3, r7, #7
   121c6:	781a      	ldrb	r2, [r3, #0]
   121c8:	4b47      	ldr	r3, [pc, #284]	; (122e8 <_adc_interrupt_handler+0x130>)
   121ca:	0092      	lsls	r2, r2, #2
   121cc:	58d3      	ldr	r3, [r2, r3]
   121ce:	60fb      	str	r3, [r7, #12]
   121d0:	68fb      	ldr	r3, [r7, #12]
   121d2:	681b      	ldr	r3, [r3, #0]
   121d4:	7e1b      	ldrb	r3, [r3, #24]
   121d6:	b2da      	uxtb	r2, r3
   121d8:	68fb      	ldr	r3, [r7, #12]
   121da:	681b      	ldr	r3, [r3, #0]
   121dc:	7ddb      	ldrb	r3, [r3, #23]
   121de:	b2db      	uxtb	r3, r3
   121e0:	4013      	ands	r3, r2
   121e2:	b2db      	uxtb	r3, r3
   121e4:	60bb      	str	r3, [r7, #8]
   121e6:	68bb      	ldr	r3, [r7, #8]
   121e8:	2201      	movs	r2, #1
   121ea:	4013      	ands	r3, r2
   121ec:	d045      	beq.n	1227a <_adc_interrupt_handler+0xc2>
   121ee:	68fb      	ldr	r3, [r7, #12]
   121f0:	681b      	ldr	r3, [r3, #0]
   121f2:	2201      	movs	r2, #1
   121f4:	761a      	strb	r2, [r3, #24]
   121f6:	46c0      	nop			; (mov r8, r8)
   121f8:	68fb      	ldr	r3, [r7, #12]
   121fa:	0018      	movs	r0, r3
   121fc:	4b3b      	ldr	r3, [pc, #236]	; (122ec <_adc_interrupt_handler+0x134>)
   121fe:	4798      	blx	r3
   12200:	1e03      	subs	r3, r0, #0
   12202:	d1f9      	bne.n	121f8 <_adc_interrupt_handler+0x40>
   12204:	68fb      	ldr	r3, [r7, #12]
   12206:	695b      	ldr	r3, [r3, #20]
   12208:	1c99      	adds	r1, r3, #2
   1220a:	68fa      	ldr	r2, [r7, #12]
   1220c:	6151      	str	r1, [r2, #20]
   1220e:	68fa      	ldr	r2, [r7, #12]
   12210:	6812      	ldr	r2, [r2, #0]
   12212:	8b52      	ldrh	r2, [r2, #26]
   12214:	b292      	uxth	r2, r2
   12216:	801a      	strh	r2, [r3, #0]
   12218:	68fb      	ldr	r3, [r7, #12]
   1221a:	8b1b      	ldrh	r3, [r3, #24]
   1221c:	b29b      	uxth	r3, r3
   1221e:	3b01      	subs	r3, #1
   12220:	b29b      	uxth	r3, r3
   12222:	68fa      	ldr	r2, [r7, #12]
   12224:	1c19      	adds	r1, r3, #0
   12226:	8311      	strh	r1, [r2, #24]
   12228:	2b00      	cmp	r3, #0
   1222a:	d008      	beq.n	1223e <_adc_interrupt_handler+0x86>
   1222c:	68fb      	ldr	r3, [r7, #12]
   1222e:	7f5b      	ldrb	r3, [r3, #29]
   12230:	2b00      	cmp	r3, #0
   12232:	d022      	beq.n	1227a <_adc_interrupt_handler+0xc2>
   12234:	68fb      	ldr	r3, [r7, #12]
   12236:	0018      	movs	r0, r3
   12238:	4b2d      	ldr	r3, [pc, #180]	; (122f0 <_adc_interrupt_handler+0x138>)
   1223a:	4798      	blx	r3
   1223c:	e01d      	b.n	1227a <_adc_interrupt_handler+0xc2>
   1223e:	68fb      	ldr	r3, [r7, #12]
   12240:	2101      	movs	r1, #1
   12242:	0018      	movs	r0, r3
   12244:	4b2b      	ldr	r3, [pc, #172]	; (122f4 <_adc_interrupt_handler+0x13c>)
   12246:	4798      	blx	r3
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7f1b      	ldrb	r3, [r3, #28]
   1224c:	b2db      	uxtb	r3, r3
   1224e:	2b05      	cmp	r3, #5
   12250:	d113      	bne.n	1227a <_adc_interrupt_handler+0xc2>
   12252:	68fb      	ldr	r3, [r7, #12]
   12254:	2200      	movs	r2, #0
   12256:	771a      	strb	r2, [r3, #28]
   12258:	68fb      	ldr	r3, [r7, #12]
   1225a:	7edb      	ldrb	r3, [r3, #27]
   1225c:	001a      	movs	r2, r3
   1225e:	2301      	movs	r3, #1
   12260:	4013      	ands	r3, r2
   12262:	d00a      	beq.n	1227a <_adc_interrupt_handler+0xc2>
   12264:	68fb      	ldr	r3, [r7, #12]
   12266:	7e9b      	ldrb	r3, [r3, #26]
   12268:	001a      	movs	r2, r3
   1226a:	2301      	movs	r3, #1
   1226c:	4013      	ands	r3, r2
   1226e:	d004      	beq.n	1227a <_adc_interrupt_handler+0xc2>
   12270:	68fb      	ldr	r3, [r7, #12]
   12272:	689b      	ldr	r3, [r3, #8]
   12274:	68fa      	ldr	r2, [r7, #12]
   12276:	0010      	movs	r0, r2
   12278:	4798      	blx	r3
   1227a:	68bb      	ldr	r3, [r7, #8]
   1227c:	2204      	movs	r2, #4
   1227e:	4013      	ands	r3, r2
   12280:	d014      	beq.n	122ac <_adc_interrupt_handler+0xf4>
   12282:	68fb      	ldr	r3, [r7, #12]
   12284:	681b      	ldr	r3, [r3, #0]
   12286:	2204      	movs	r2, #4
   12288:	761a      	strb	r2, [r3, #24]
   1228a:	68fb      	ldr	r3, [r7, #12]
   1228c:	7edb      	ldrb	r3, [r3, #27]
   1228e:	001a      	movs	r2, r3
   12290:	2302      	movs	r3, #2
   12292:	4013      	ands	r3, r2
   12294:	d00a      	beq.n	122ac <_adc_interrupt_handler+0xf4>
   12296:	68fb      	ldr	r3, [r7, #12]
   12298:	7e9b      	ldrb	r3, [r3, #26]
   1229a:	001a      	movs	r2, r3
   1229c:	2302      	movs	r3, #2
   1229e:	4013      	ands	r3, r2
   122a0:	d004      	beq.n	122ac <_adc_interrupt_handler+0xf4>
   122a2:	68fb      	ldr	r3, [r7, #12]
   122a4:	68db      	ldr	r3, [r3, #12]
   122a6:	68fa      	ldr	r2, [r7, #12]
   122a8:	0010      	movs	r0, r2
   122aa:	4798      	blx	r3
   122ac:	68bb      	ldr	r3, [r7, #8]
   122ae:	2202      	movs	r2, #2
   122b0:	4013      	ands	r3, r2
   122b2:	d014      	beq.n	122de <_adc_interrupt_handler+0x126>
   122b4:	68fb      	ldr	r3, [r7, #12]
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	2202      	movs	r2, #2
   122ba:	761a      	strb	r2, [r3, #24]
   122bc:	68fb      	ldr	r3, [r7, #12]
   122be:	7edb      	ldrb	r3, [r3, #27]
   122c0:	001a      	movs	r2, r3
   122c2:	2304      	movs	r3, #4
   122c4:	4013      	ands	r3, r2
   122c6:	d00a      	beq.n	122de <_adc_interrupt_handler+0x126>
   122c8:	68fb      	ldr	r3, [r7, #12]
   122ca:	7e9b      	ldrb	r3, [r3, #26]
   122cc:	001a      	movs	r2, r3
   122ce:	2304      	movs	r3, #4
   122d0:	4013      	ands	r3, r2
   122d2:	d004      	beq.n	122de <_adc_interrupt_handler+0x126>
   122d4:	68fb      	ldr	r3, [r7, #12]
   122d6:	691b      	ldr	r3, [r3, #16]
   122d8:	68fa      	ldr	r2, [r7, #12]
   122da:	0010      	movs	r0, r2
   122dc:	4798      	blx	r3
   122de:	46c0      	nop			; (mov r8, r8)
   122e0:	46bd      	mov	sp, r7
   122e2:	b004      	add	sp, #16
   122e4:	bd80      	pop	{r7, pc}
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	20004184 	.word	0x20004184
   122ec:	00012125 	.word	0x00012125
   122f0:	0001214d 	.word	0x0001214d
   122f4:	00012195 	.word	0x00012195

000122f8 <ADC_Handler>:
   122f8:	b580      	push	{r7, lr}
   122fa:	af00      	add	r7, sp, #0
   122fc:	2000      	movs	r0, #0
   122fe:	4b02      	ldr	r3, [pc, #8]	; (12308 <ADC_Handler+0x10>)
   12300:	4798      	blx	r3
   12302:	46c0      	nop			; (mov r8, r8)
   12304:	46bd      	mov	sp, r7
   12306:	bd80      	pop	{r7, pc}
   12308:	000121b9 	.word	0x000121b9

0001230c <system_interrupt_disable>:
   1230c:	b580      	push	{r7, lr}
   1230e:	b082      	sub	sp, #8
   12310:	af00      	add	r7, sp, #0
   12312:	0002      	movs	r2, r0
   12314:	1dfb      	adds	r3, r7, #7
   12316:	701a      	strb	r2, [r3, #0]
   12318:	4a07      	ldr	r2, [pc, #28]	; (12338 <system_interrupt_disable+0x2c>)
   1231a:	1dfb      	adds	r3, r7, #7
   1231c:	781b      	ldrb	r3, [r3, #0]
   1231e:	0019      	movs	r1, r3
   12320:	231f      	movs	r3, #31
   12322:	400b      	ands	r3, r1
   12324:	2101      	movs	r1, #1
   12326:	4099      	lsls	r1, r3
   12328:	000b      	movs	r3, r1
   1232a:	0019      	movs	r1, r3
   1232c:	2380      	movs	r3, #128	; 0x80
   1232e:	50d1      	str	r1, [r2, r3]
   12330:	46c0      	nop			; (mov r8, r8)
   12332:	46bd      	mov	sp, r7
   12334:	b002      	add	sp, #8
   12336:	bd80      	pop	{r7, pc}
   12338:	e000e100 	.word	0xe000e100

0001233c <_dac_interrupt_handler>:
   1233c:	b580      	push	{r7, lr}
   1233e:	b084      	sub	sp, #16
   12340:	af00      	add	r7, sp, #0
   12342:	0002      	movs	r2, r0
   12344:	1dfb      	adds	r3, r7, #7
   12346:	701a      	strb	r2, [r3, #0]
   12348:	1dfb      	adds	r3, r7, #7
   1234a:	781a      	ldrb	r2, [r3, #0]
   1234c:	4b37      	ldr	r3, [pc, #220]	; (1242c <_dac_interrupt_handler+0xf0>)
   1234e:	0092      	lsls	r2, r2, #2
   12350:	58d3      	ldr	r3, [r2, r3]
   12352:	60fb      	str	r3, [r7, #12]
   12354:	68fb      	ldr	r3, [r7, #12]
   12356:	681b      	ldr	r3, [r3, #0]
   12358:	60bb      	str	r3, [r7, #8]
   1235a:	68bb      	ldr	r3, [r7, #8]
   1235c:	799b      	ldrb	r3, [r3, #6]
   1235e:	b2db      	uxtb	r3, r3
   12360:	001a      	movs	r2, r3
   12362:	2301      	movs	r3, #1
   12364:	4013      	ands	r3, r2
   12366:	d00e      	beq.n	12386 <_dac_interrupt_handler+0x4a>
   12368:	68bb      	ldr	r3, [r7, #8]
   1236a:	2201      	movs	r2, #1
   1236c:	719a      	strb	r2, [r3, #6]
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	3314      	adds	r3, #20
   12372:	2b00      	cmp	r3, #0
   12374:	d007      	beq.n	12386 <_dac_interrupt_handler+0x4a>
   12376:	68fb      	ldr	r3, [r7, #12]
   12378:	7c5b      	ldrb	r3, [r3, #17]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d003      	beq.n	12386 <_dac_interrupt_handler+0x4a>
   1237e:	68fb      	ldr	r3, [r7, #12]
   12380:	699b      	ldr	r3, [r3, #24]
   12382:	2000      	movs	r0, #0
   12384:	4798      	blx	r3
   12386:	68bb      	ldr	r3, [r7, #8]
   12388:	799b      	ldrb	r3, [r3, #6]
   1238a:	b2db      	uxtb	r3, r3
   1238c:	001a      	movs	r2, r3
   1238e:	2302      	movs	r3, #2
   12390:	4013      	ands	r3, r2
   12392:	d047      	beq.n	12424 <_dac_interrupt_handler+0xe8>
   12394:	68bb      	ldr	r3, [r7, #8]
   12396:	2202      	movs	r2, #2
   12398:	719a      	strb	r2, [r3, #6]
   1239a:	68fb      	ldr	r3, [r7, #12]
   1239c:	899b      	ldrh	r3, [r3, #12]
   1239e:	b29b      	uxth	r3, r3
   123a0:	2b00      	cmp	r3, #0
   123a2:	d033      	beq.n	1240c <_dac_interrupt_handler+0xd0>
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	689a      	ldr	r2, [r3, #8]
   123a8:	68fb      	ldr	r3, [r7, #12]
   123aa:	89db      	ldrh	r3, [r3, #14]
   123ac:	b29b      	uxth	r3, r3
   123ae:	1c59      	adds	r1, r3, #1
   123b0:	b288      	uxth	r0, r1
   123b2:	68f9      	ldr	r1, [r7, #12]
   123b4:	81c8      	strh	r0, [r1, #14]
   123b6:	005b      	lsls	r3, r3, #1
   123b8:	18d3      	adds	r3, r2, r3
   123ba:	881b      	ldrh	r3, [r3, #0]
   123bc:	b29a      	uxth	r2, r3
   123be:	68bb      	ldr	r3, [r7, #8]
   123c0:	819a      	strh	r2, [r3, #12]
   123c2:	68fb      	ldr	r3, [r7, #12]
   123c4:	899b      	ldrh	r3, [r3, #12]
   123c6:	b29b      	uxth	r3, r3
   123c8:	3b01      	subs	r3, #1
   123ca:	b29a      	uxth	r2, r3
   123cc:	68fb      	ldr	r3, [r7, #12]
   123ce:	819a      	strh	r2, [r3, #12]
   123d0:	68fb      	ldr	r3, [r7, #12]
   123d2:	899b      	ldrh	r3, [r3, #12]
   123d4:	b29b      	uxth	r3, r3
   123d6:	2b00      	cmp	r3, #0
   123d8:	d118      	bne.n	1240c <_dac_interrupt_handler+0xd0>
   123da:	68fb      	ldr	r3, [r7, #12]
   123dc:	2220      	movs	r2, #32
   123de:	2100      	movs	r1, #0
   123e0:	5499      	strb	r1, [r3, r2]
   123e2:	68bb      	ldr	r3, [r7, #8]
   123e4:	2202      	movs	r2, #2
   123e6:	711a      	strb	r2, [r3, #4]
   123e8:	68bb      	ldr	r3, [r7, #8]
   123ea:	2202      	movs	r2, #2
   123ec:	719a      	strb	r2, [r3, #6]
   123ee:	2019      	movs	r0, #25
   123f0:	4b0f      	ldr	r3, [pc, #60]	; (12430 <_dac_interrupt_handler+0xf4>)
   123f2:	4798      	blx	r3
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	3314      	adds	r3, #20
   123f8:	2b00      	cmp	r3, #0
   123fa:	d007      	beq.n	1240c <_dac_interrupt_handler+0xd0>
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	7c9b      	ldrb	r3, [r3, #18]
   12400:	2b00      	cmp	r3, #0
   12402:	d003      	beq.n	1240c <_dac_interrupt_handler+0xd0>
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	69db      	ldr	r3, [r3, #28]
   12408:	2000      	movs	r0, #0
   1240a:	4798      	blx	r3
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	3314      	adds	r3, #20
   12410:	2b00      	cmp	r3, #0
   12412:	d007      	beq.n	12424 <_dac_interrupt_handler+0xe8>
   12414:	68fb      	ldr	r3, [r7, #12]
   12416:	7c1b      	ldrb	r3, [r3, #16]
   12418:	2b00      	cmp	r3, #0
   1241a:	d003      	beq.n	12424 <_dac_interrupt_handler+0xe8>
   1241c:	68fb      	ldr	r3, [r7, #12]
   1241e:	695b      	ldr	r3, [r3, #20]
   12420:	2000      	movs	r0, #0
   12422:	4798      	blx	r3
   12424:	46c0      	nop			; (mov r8, r8)
   12426:	46bd      	mov	sp, r7
   12428:	b004      	add	sp, #16
   1242a:	bd80      	pop	{r7, pc}
   1242c:	20004188 	.word	0x20004188
   12430:	0001230d 	.word	0x0001230d

00012434 <DAC_Handler>:
   12434:	b580      	push	{r7, lr}
   12436:	af00      	add	r7, sp, #0
   12438:	2000      	movs	r0, #0
   1243a:	4b02      	ldr	r3, [pc, #8]	; (12444 <DAC_Handler+0x10>)
   1243c:	4798      	blx	r3
   1243e:	46c0      	nop			; (mov r8, r8)
   12440:	46bd      	mov	sp, r7
   12442:	bd80      	pop	{r7, pc}
   12444:	0001233d 	.word	0x0001233d

00012448 <system_interrupt_enter_critical_section>:
   12448:	b580      	push	{r7, lr}
   1244a:	af00      	add	r7, sp, #0
   1244c:	4b02      	ldr	r3, [pc, #8]	; (12458 <system_interrupt_enter_critical_section+0x10>)
   1244e:	4798      	blx	r3
   12450:	46c0      	nop			; (mov r8, r8)
   12452:	46bd      	mov	sp, r7
   12454:	bd80      	pop	{r7, pc}
   12456:	46c0      	nop			; (mov r8, r8)
   12458:	00023df9 	.word	0x00023df9

0001245c <system_interrupt_leave_critical_section>:
   1245c:	b580      	push	{r7, lr}
   1245e:	af00      	add	r7, sp, #0
   12460:	4b02      	ldr	r3, [pc, #8]	; (1246c <system_interrupt_leave_critical_section+0x10>)
   12462:	4798      	blx	r3
   12464:	46c0      	nop			; (mov r8, r8)
   12466:	46bd      	mov	sp, r7
   12468:	bd80      	pop	{r7, pc}
   1246a:	46c0      	nop			; (mov r8, r8)
   1246c:	00023e4d 	.word	0x00023e4d

00012470 <DMAC_Handler>:
   12470:	b580      	push	{r7, lr}
   12472:	b086      	sub	sp, #24
   12474:	af00      	add	r7, sp, #0
   12476:	4b49      	ldr	r3, [pc, #292]	; (1259c <DMAC_Handler+0x12c>)
   12478:	4798      	blx	r3
   1247a:	4b49      	ldr	r3, [pc, #292]	; (125a0 <DMAC_Handler+0x130>)
   1247c:	8c1b      	ldrh	r3, [r3, #32]
   1247e:	b29b      	uxth	r3, r3
   12480:	b2da      	uxtb	r2, r3
   12482:	2317      	movs	r3, #23
   12484:	18fb      	adds	r3, r7, r3
   12486:	210f      	movs	r1, #15
   12488:	400a      	ands	r2, r1
   1248a:	701a      	strb	r2, [r3, #0]
   1248c:	2317      	movs	r3, #23
   1248e:	18fb      	adds	r3, r7, r3
   12490:	781a      	ldrb	r2, [r3, #0]
   12492:	4b44      	ldr	r3, [pc, #272]	; (125a4 <DMAC_Handler+0x134>)
   12494:	0092      	lsls	r2, r2, #2
   12496:	58d3      	ldr	r3, [r2, r3]
   12498:	613b      	str	r3, [r7, #16]
   1249a:	4a41      	ldr	r2, [pc, #260]	; (125a0 <DMAC_Handler+0x130>)
   1249c:	693b      	ldr	r3, [r7, #16]
   1249e:	781b      	ldrb	r3, [r3, #0]
   124a0:	210f      	movs	r1, #15
   124a2:	400b      	ands	r3, r1
   124a4:	b2d9      	uxtb	r1, r3
   124a6:	233f      	movs	r3, #63	; 0x3f
   124a8:	54d1      	strb	r1, [r2, r3]
   124aa:	493d      	ldr	r1, [pc, #244]	; (125a0 <DMAC_Handler+0x130>)
   124ac:	230f      	movs	r3, #15
   124ae:	18fb      	adds	r3, r7, r3
   124b0:	224e      	movs	r2, #78	; 0x4e
   124b2:	5c8a      	ldrb	r2, [r1, r2]
   124b4:	701a      	strb	r2, [r3, #0]
   124b6:	693b      	ldr	r3, [r7, #16]
   124b8:	781b      	ldrb	r3, [r3, #0]
   124ba:	4a3b      	ldr	r2, [pc, #236]	; (125a8 <DMAC_Handler+0x138>)
   124bc:	011b      	lsls	r3, r3, #4
   124be:	18d3      	adds	r3, r2, r3
   124c0:	3302      	adds	r3, #2
   124c2:	881b      	ldrh	r3, [r3, #0]
   124c4:	b29b      	uxth	r3, r3
   124c6:	60bb      	str	r3, [r7, #8]
   124c8:	693b      	ldr	r3, [r7, #16]
   124ca:	781b      	ldrb	r3, [r3, #0]
   124cc:	4a37      	ldr	r2, [pc, #220]	; (125ac <DMAC_Handler+0x13c>)
   124ce:	011b      	lsls	r3, r3, #4
   124d0:	18d3      	adds	r3, r2, r3
   124d2:	3302      	adds	r3, #2
   124d4:	881b      	ldrh	r3, [r3, #0]
   124d6:	b29b      	uxth	r3, r3
   124d8:	607b      	str	r3, [r7, #4]
   124da:	68ba      	ldr	r2, [r7, #8]
   124dc:	687b      	ldr	r3, [r7, #4]
   124de:	1ad2      	subs	r2, r2, r3
   124e0:	693b      	ldr	r3, [r7, #16]
   124e2:	615a      	str	r2, [r3, #20]
   124e4:	230f      	movs	r3, #15
   124e6:	18fb      	adds	r3, r7, r3
   124e8:	781b      	ldrb	r3, [r3, #0]
   124ea:	2201      	movs	r2, #1
   124ec:	4013      	ands	r3, r2
   124ee:	d016      	beq.n	1251e <DMAC_Handler+0xae>
   124f0:	4a2b      	ldr	r2, [pc, #172]	; (125a0 <DMAC_Handler+0x130>)
   124f2:	234e      	movs	r3, #78	; 0x4e
   124f4:	2101      	movs	r1, #1
   124f6:	54d1      	strb	r1, [r2, r3]
   124f8:	693b      	ldr	r3, [r7, #16]
   124fa:	2210      	movs	r2, #16
   124fc:	745a      	strb	r2, [r3, #17]
   124fe:	693b      	ldr	r3, [r7, #16]
   12500:	7c1b      	ldrb	r3, [r3, #16]
   12502:	001a      	movs	r2, r3
   12504:	2301      	movs	r3, #1
   12506:	4013      	ands	r3, r2
   12508:	d042      	beq.n	12590 <DMAC_Handler+0x120>
   1250a:	693b      	ldr	r3, [r7, #16]
   1250c:	685b      	ldr	r3, [r3, #4]
   1250e:	2b00      	cmp	r3, #0
   12510:	d03e      	beq.n	12590 <DMAC_Handler+0x120>
   12512:	693b      	ldr	r3, [r7, #16]
   12514:	685b      	ldr	r3, [r3, #4]
   12516:	693a      	ldr	r2, [r7, #16]
   12518:	0010      	movs	r0, r2
   1251a:	4798      	blx	r3
   1251c:	e038      	b.n	12590 <DMAC_Handler+0x120>
   1251e:	230f      	movs	r3, #15
   12520:	18fb      	adds	r3, r7, r3
   12522:	781b      	ldrb	r3, [r3, #0]
   12524:	2202      	movs	r2, #2
   12526:	4013      	ands	r3, r2
   12528:	d016      	beq.n	12558 <DMAC_Handler+0xe8>
   1252a:	4a1d      	ldr	r2, [pc, #116]	; (125a0 <DMAC_Handler+0x130>)
   1252c:	234e      	movs	r3, #78	; 0x4e
   1252e:	2102      	movs	r1, #2
   12530:	54d1      	strb	r1, [r2, r3]
   12532:	693b      	ldr	r3, [r7, #16]
   12534:	2200      	movs	r2, #0
   12536:	745a      	strb	r2, [r3, #17]
   12538:	693b      	ldr	r3, [r7, #16]
   1253a:	7c1b      	ldrb	r3, [r3, #16]
   1253c:	001a      	movs	r2, r3
   1253e:	2302      	movs	r3, #2
   12540:	4013      	ands	r3, r2
   12542:	d025      	beq.n	12590 <DMAC_Handler+0x120>
   12544:	693b      	ldr	r3, [r7, #16]
   12546:	689b      	ldr	r3, [r3, #8]
   12548:	2b00      	cmp	r3, #0
   1254a:	d021      	beq.n	12590 <DMAC_Handler+0x120>
   1254c:	693b      	ldr	r3, [r7, #16]
   1254e:	689b      	ldr	r3, [r3, #8]
   12550:	693a      	ldr	r2, [r7, #16]
   12552:	0010      	movs	r0, r2
   12554:	4798      	blx	r3
   12556:	e01b      	b.n	12590 <DMAC_Handler+0x120>
   12558:	230f      	movs	r3, #15
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	2204      	movs	r2, #4
   12560:	4013      	ands	r3, r2
   12562:	d015      	beq.n	12590 <DMAC_Handler+0x120>
   12564:	4a0e      	ldr	r2, [pc, #56]	; (125a0 <DMAC_Handler+0x130>)
   12566:	234e      	movs	r3, #78	; 0x4e
   12568:	2104      	movs	r1, #4
   1256a:	54d1      	strb	r1, [r2, r3]
   1256c:	693b      	ldr	r3, [r7, #16]
   1256e:	2206      	movs	r2, #6
   12570:	745a      	strb	r2, [r3, #17]
   12572:	693b      	ldr	r3, [r7, #16]
   12574:	7c1b      	ldrb	r3, [r3, #16]
   12576:	001a      	movs	r2, r3
   12578:	2304      	movs	r3, #4
   1257a:	4013      	ands	r3, r2
   1257c:	d008      	beq.n	12590 <DMAC_Handler+0x120>
   1257e:	693b      	ldr	r3, [r7, #16]
   12580:	68db      	ldr	r3, [r3, #12]
   12582:	2b00      	cmp	r3, #0
   12584:	d004      	beq.n	12590 <DMAC_Handler+0x120>
   12586:	693b      	ldr	r3, [r7, #16]
   12588:	68db      	ldr	r3, [r3, #12]
   1258a:	693a      	ldr	r2, [r7, #16]
   1258c:	0010      	movs	r0, r2
   1258e:	4798      	blx	r3
   12590:	4b07      	ldr	r3, [pc, #28]	; (125b0 <DMAC_Handler+0x140>)
   12592:	4798      	blx	r3
   12594:	46c0      	nop			; (mov r8, r8)
   12596:	46bd      	mov	sp, r7
   12598:	b006      	add	sp, #24
   1259a:	bd80      	pop	{r7, pc}
   1259c:	00012449 	.word	0x00012449
   125a0:	41004800 	.word	0x41004800
   125a4:	20000350 	.word	0x20000350
   125a8:	20004190 	.word	0x20004190
   125ac:	20000300 	.word	0x20000300
   125b0:	0001245d 	.word	0x0001245d

000125b4 <EVSYS_Handler>:
   125b4:	b580      	push	{r7, lr}
   125b6:	b082      	sub	sp, #8
   125b8:	af00      	add	r7, sp, #0
   125ba:	4b15      	ldr	r3, [pc, #84]	; (12610 <EVSYS_Handler+0x5c>)
   125bc:	691b      	ldr	r3, [r3, #16]
   125be:	607b      	str	r3, [r7, #4]
   125c0:	4b14      	ldr	r3, [pc, #80]	; (12614 <EVSYS_Handler+0x60>)
   125c2:	699b      	ldr	r3, [r3, #24]
   125c4:	603b      	str	r3, [r7, #0]
   125c6:	4b12      	ldr	r3, [pc, #72]	; (12610 <EVSYS_Handler+0x5c>)
   125c8:	689a      	ldr	r2, [r3, #8]
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	431a      	orrs	r2, r3
   125ce:	4b10      	ldr	r3, [pc, #64]	; (12610 <EVSYS_Handler+0x5c>)
   125d0:	609a      	str	r2, [r3, #8]
   125d2:	4b10      	ldr	r3, [pc, #64]	; (12614 <EVSYS_Handler+0x60>)
   125d4:	4a10      	ldr	r2, [pc, #64]	; (12618 <EVSYS_Handler+0x64>)
   125d6:	619a      	str	r2, [r3, #24]
   125d8:	e008      	b.n	125ec <EVSYS_Handler+0x38>
   125da:	687b      	ldr	r3, [r7, #4]
   125dc:	685a      	ldr	r2, [r3, #4]
   125de:	687b      	ldr	r3, [r7, #4]
   125e0:	681b      	ldr	r3, [r3, #0]
   125e2:	0018      	movs	r0, r3
   125e4:	4790      	blx	r2
   125e6:	687b      	ldr	r3, [r7, #4]
   125e8:	689b      	ldr	r3, [r3, #8]
   125ea:	607b      	str	r3, [r7, #4]
   125ec:	687b      	ldr	r3, [r7, #4]
   125ee:	2b00      	cmp	r3, #0
   125f0:	d1f3      	bne.n	125da <EVSYS_Handler+0x26>
   125f2:	4b07      	ldr	r3, [pc, #28]	; (12610 <EVSYS_Handler+0x5c>)
   125f4:	68db      	ldr	r3, [r3, #12]
   125f6:	603b      	str	r3, [r7, #0]
   125f8:	4b05      	ldr	r3, [pc, #20]	; (12610 <EVSYS_Handler+0x5c>)
   125fa:	689b      	ldr	r3, [r3, #8]
   125fc:	683a      	ldr	r2, [r7, #0]
   125fe:	43d2      	mvns	r2, r2
   12600:	401a      	ands	r2, r3
   12602:	4b03      	ldr	r3, [pc, #12]	; (12610 <EVSYS_Handler+0x5c>)
   12604:	609a      	str	r2, [r3, #8]
   12606:	46c0      	nop			; (mov r8, r8)
   12608:	46bd      	mov	sp, r7
   1260a:	b002      	add	sp, #8
   1260c:	bd80      	pop	{r7, pc}
   1260e:	46c0      	nop			; (mov r8, r8)
   12610:	20000000 	.word	0x20000000
   12614:	42000400 	.word	0x42000400
   12618:	0f0fffff 	.word	0x0f0fffff

0001261c <system_apb_clock_set_mask>:
   1261c:	b580      	push	{r7, lr}
   1261e:	b082      	sub	sp, #8
   12620:	af00      	add	r7, sp, #0
   12622:	0002      	movs	r2, r0
   12624:	6039      	str	r1, [r7, #0]
   12626:	1dfb      	adds	r3, r7, #7
   12628:	701a      	strb	r2, [r3, #0]
   1262a:	1dfb      	adds	r3, r7, #7
   1262c:	781b      	ldrb	r3, [r3, #0]
   1262e:	2b01      	cmp	r3, #1
   12630:	d00a      	beq.n	12648 <system_apb_clock_set_mask+0x2c>
   12632:	2b02      	cmp	r3, #2
   12634:	d00f      	beq.n	12656 <system_apb_clock_set_mask+0x3a>
   12636:	2b00      	cmp	r3, #0
   12638:	d114      	bne.n	12664 <system_apb_clock_set_mask+0x48>
   1263a:	4b0e      	ldr	r3, [pc, #56]	; (12674 <system_apb_clock_set_mask+0x58>)
   1263c:	4a0d      	ldr	r2, [pc, #52]	; (12674 <system_apb_clock_set_mask+0x58>)
   1263e:	6991      	ldr	r1, [r2, #24]
   12640:	683a      	ldr	r2, [r7, #0]
   12642:	430a      	orrs	r2, r1
   12644:	619a      	str	r2, [r3, #24]
   12646:	e00f      	b.n	12668 <system_apb_clock_set_mask+0x4c>
   12648:	4b0a      	ldr	r3, [pc, #40]	; (12674 <system_apb_clock_set_mask+0x58>)
   1264a:	4a0a      	ldr	r2, [pc, #40]	; (12674 <system_apb_clock_set_mask+0x58>)
   1264c:	69d1      	ldr	r1, [r2, #28]
   1264e:	683a      	ldr	r2, [r7, #0]
   12650:	430a      	orrs	r2, r1
   12652:	61da      	str	r2, [r3, #28]
   12654:	e008      	b.n	12668 <system_apb_clock_set_mask+0x4c>
   12656:	4b07      	ldr	r3, [pc, #28]	; (12674 <system_apb_clock_set_mask+0x58>)
   12658:	4a06      	ldr	r2, [pc, #24]	; (12674 <system_apb_clock_set_mask+0x58>)
   1265a:	6a11      	ldr	r1, [r2, #32]
   1265c:	683a      	ldr	r2, [r7, #0]
   1265e:	430a      	orrs	r2, r1
   12660:	621a      	str	r2, [r3, #32]
   12662:	e001      	b.n	12668 <system_apb_clock_set_mask+0x4c>
   12664:	2317      	movs	r3, #23
   12666:	e000      	b.n	1266a <system_apb_clock_set_mask+0x4e>
   12668:	2300      	movs	r3, #0
   1266a:	0018      	movs	r0, r3
   1266c:	46bd      	mov	sp, r7
   1266e:	b002      	add	sp, #8
   12670:	bd80      	pop	{r7, pc}
   12672:	46c0      	nop			; (mov r8, r8)
   12674:	40000400 	.word	0x40000400

00012678 <_system_events_init>:
   12678:	b580      	push	{r7, lr}
   1267a:	af00      	add	r7, sp, #0
   1267c:	2102      	movs	r1, #2
   1267e:	2002      	movs	r0, #2
   12680:	4b07      	ldr	r3, [pc, #28]	; (126a0 <_system_events_init+0x28>)
   12682:	4798      	blx	r3
   12684:	4b07      	ldr	r3, [pc, #28]	; (126a4 <_system_events_init+0x2c>)
   12686:	2201      	movs	r2, #1
   12688:	701a      	strb	r2, [r3, #0]
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	4b05      	ldr	r3, [pc, #20]	; (126a4 <_system_events_init+0x2c>)
   1268e:	781b      	ldrb	r3, [r3, #0]
   12690:	b2db      	uxtb	r3, r3
   12692:	001a      	movs	r2, r3
   12694:	2301      	movs	r3, #1
   12696:	4013      	ands	r3, r2
   12698:	d1f8      	bne.n	1268c <_system_events_init+0x14>
   1269a:	46c0      	nop			; (mov r8, r8)
   1269c:	46bd      	mov	sp, r7
   1269e:	bd80      	pop	{r7, pc}
   126a0:	0001261d 	.word	0x0001261d
   126a4:	42000400 	.word	0x42000400

000126a8 <i2c_master_is_syncing>:
   126a8:	b580      	push	{r7, lr}
   126aa:	b084      	sub	sp, #16
   126ac:	af00      	add	r7, sp, #0
   126ae:	6078      	str	r0, [r7, #4]
   126b0:	687b      	ldr	r3, [r7, #4]
   126b2:	681b      	ldr	r3, [r3, #0]
   126b4:	60fb      	str	r3, [r7, #12]
   126b6:	68fb      	ldr	r3, [r7, #12]
   126b8:	69db      	ldr	r3, [r3, #28]
   126ba:	2207      	movs	r2, #7
   126bc:	4013      	ands	r3, r2
   126be:	1e5a      	subs	r2, r3, #1
   126c0:	4193      	sbcs	r3, r2
   126c2:	b2db      	uxtb	r3, r3
   126c4:	0018      	movs	r0, r3
   126c6:	46bd      	mov	sp, r7
   126c8:	b004      	add	sp, #16
   126ca:	bd80      	pop	{r7, pc}

000126cc <_i2c_master_wait_for_sync>:
   126cc:	b580      	push	{r7, lr}
   126ce:	b082      	sub	sp, #8
   126d0:	af00      	add	r7, sp, #0
   126d2:	6078      	str	r0, [r7, #4]
   126d4:	46c0      	nop			; (mov r8, r8)
   126d6:	687b      	ldr	r3, [r7, #4]
   126d8:	0018      	movs	r0, r3
   126da:	4b04      	ldr	r3, [pc, #16]	; (126ec <_i2c_master_wait_for_sync+0x20>)
   126dc:	4798      	blx	r3
   126de:	1e03      	subs	r3, r0, #0
   126e0:	d1f9      	bne.n	126d6 <_i2c_master_wait_for_sync+0xa>
   126e2:	46c0      	nop			; (mov r8, r8)
   126e4:	46bd      	mov	sp, r7
   126e6:	b002      	add	sp, #8
   126e8:	bd80      	pop	{r7, pc}
   126ea:	46c0      	nop			; (mov r8, r8)
   126ec:	000126a9 	.word	0x000126a9

000126f0 <_i2c_master_read>:
   126f0:	b580      	push	{r7, lr}
   126f2:	b084      	sub	sp, #16
   126f4:	af00      	add	r7, sp, #0
   126f6:	6078      	str	r0, [r7, #4]
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	681b      	ldr	r3, [r3, #0]
   126fc:	60fb      	str	r3, [r7, #12]
   126fe:	68fb      	ldr	r3, [r7, #12]
   12700:	681b      	ldr	r3, [r3, #0]
   12702:	011b      	lsls	r3, r3, #4
   12704:	0fdb      	lsrs	r3, r3, #31
   12706:	b2db      	uxtb	r3, r3
   12708:	001a      	movs	r2, r3
   1270a:	230b      	movs	r3, #11
   1270c:	18fb      	adds	r3, r7, r3
   1270e:	1e51      	subs	r1, r2, #1
   12710:	418a      	sbcs	r2, r1
   12712:	701a      	strb	r2, [r3, #0]
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	687a      	ldr	r2, [r7, #4]
   1271a:	8b52      	ldrh	r2, [r2, #26]
   1271c:	801a      	strh	r2, [r3, #0]
   1271e:	687b      	ldr	r3, [r7, #4]
   12720:	8b9b      	ldrh	r3, [r3, #28]
   12722:	b29a      	uxth	r2, r3
   12724:	2308      	movs	r3, #8
   12726:	18fb      	adds	r3, r7, r3
   12728:	2108      	movs	r1, #8
   1272a:	1879      	adds	r1, r7, r1
   1272c:	8809      	ldrh	r1, [r1, #0]
   1272e:	1a8a      	subs	r2, r1, r2
   12730:	801a      	strh	r2, [r3, #0]
   12732:	687b      	ldr	r3, [r7, #4]
   12734:	8b9b      	ldrh	r3, [r3, #28]
   12736:	b29b      	uxth	r3, r3
   12738:	3b01      	subs	r3, #1
   1273a:	b29a      	uxth	r2, r3
   1273c:	687b      	ldr	r3, [r7, #4]
   1273e:	839a      	strh	r2, [r3, #28]
   12740:	230b      	movs	r3, #11
   12742:	18fb      	adds	r3, r7, r3
   12744:	781b      	ldrb	r3, [r3, #0]
   12746:	2b00      	cmp	r3, #0
   12748:	d010      	beq.n	1276c <_i2c_master_read+0x7c>
   1274a:	687b      	ldr	r3, [r7, #4]
   1274c:	7adb      	ldrb	r3, [r3, #11]
   1274e:	2b00      	cmp	r3, #0
   12750:	d01c      	beq.n	1278c <_i2c_master_read+0x9c>
   12752:	687b      	ldr	r3, [r7, #4]
   12754:	8b9b      	ldrh	r3, [r3, #28]
   12756:	b29b      	uxth	r3, r3
   12758:	2b01      	cmp	r3, #1
   1275a:	d117      	bne.n	1278c <_i2c_master_read+0x9c>
   1275c:	68fb      	ldr	r3, [r7, #12]
   1275e:	685b      	ldr	r3, [r3, #4]
   12760:	2280      	movs	r2, #128	; 0x80
   12762:	02d2      	lsls	r2, r2, #11
   12764:	431a      	orrs	r2, r3
   12766:	68fb      	ldr	r3, [r7, #12]
   12768:	605a      	str	r2, [r3, #4]
   1276a:	e00f      	b.n	1278c <_i2c_master_read+0x9c>
   1276c:	687b      	ldr	r3, [r7, #4]
   1276e:	7adb      	ldrb	r3, [r3, #11]
   12770:	2b00      	cmp	r3, #0
   12772:	d00b      	beq.n	1278c <_i2c_master_read+0x9c>
   12774:	687b      	ldr	r3, [r7, #4]
   12776:	8b9b      	ldrh	r3, [r3, #28]
   12778:	b29b      	uxth	r3, r3
   1277a:	2b00      	cmp	r3, #0
   1277c:	d106      	bne.n	1278c <_i2c_master_read+0x9c>
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	685b      	ldr	r3, [r3, #4]
   12782:	2280      	movs	r2, #128	; 0x80
   12784:	02d2      	lsls	r2, r2, #11
   12786:	431a      	orrs	r2, r3
   12788:	68fb      	ldr	r3, [r7, #12]
   1278a:	605a      	str	r2, [r3, #4]
   1278c:	687b      	ldr	r3, [r7, #4]
   1278e:	8b9b      	ldrh	r3, [r3, #28]
   12790:	b29b      	uxth	r3, r3
   12792:	2b00      	cmp	r3, #0
   12794:	d10e      	bne.n	127b4 <_i2c_master_read+0xc4>
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a9b      	ldrb	r3, [r3, #10]
   1279a:	2b00      	cmp	r3, #0
   1279c:	d00a      	beq.n	127b4 <_i2c_master_read+0xc4>
   1279e:	687b      	ldr	r3, [r7, #4]
   127a0:	0018      	movs	r0, r3
   127a2:	4b0e      	ldr	r3, [pc, #56]	; (127dc <_i2c_master_read+0xec>)
   127a4:	4798      	blx	r3
   127a6:	68fb      	ldr	r3, [r7, #12]
   127a8:	685b      	ldr	r3, [r3, #4]
   127aa:	22c0      	movs	r2, #192	; 0xc0
   127ac:	0292      	lsls	r2, r2, #10
   127ae:	431a      	orrs	r2, r3
   127b0:	68fb      	ldr	r3, [r7, #12]
   127b2:	605a      	str	r2, [r3, #4]
   127b4:	687b      	ldr	r3, [r7, #4]
   127b6:	0018      	movs	r0, r3
   127b8:	4b08      	ldr	r3, [pc, #32]	; (127dc <_i2c_master_read+0xec>)
   127ba:	4798      	blx	r3
   127bc:	687b      	ldr	r3, [r7, #4]
   127be:	6a1a      	ldr	r2, [r3, #32]
   127c0:	2308      	movs	r3, #8
   127c2:	18fb      	adds	r3, r7, r3
   127c4:	881b      	ldrh	r3, [r3, #0]
   127c6:	18d3      	adds	r3, r2, r3
   127c8:	68fa      	ldr	r2, [r7, #12]
   127ca:	2128      	movs	r1, #40	; 0x28
   127cc:	5c52      	ldrb	r2, [r2, r1]
   127ce:	b2d2      	uxtb	r2, r2
   127d0:	701a      	strb	r2, [r3, #0]
   127d2:	46c0      	nop			; (mov r8, r8)
   127d4:	46bd      	mov	sp, r7
   127d6:	b004      	add	sp, #16
   127d8:	bd80      	pop	{r7, pc}
   127da:	46c0      	nop			; (mov r8, r8)
   127dc:	000126cd 	.word	0x000126cd

000127e0 <_i2c_master_write>:
   127e0:	b580      	push	{r7, lr}
   127e2:	b084      	sub	sp, #16
   127e4:	af00      	add	r7, sp, #0
   127e6:	6078      	str	r0, [r7, #4]
   127e8:	687b      	ldr	r3, [r7, #4]
   127ea:	681b      	ldr	r3, [r3, #0]
   127ec:	60fb      	str	r3, [r7, #12]
   127ee:	68fb      	ldr	r3, [r7, #12]
   127f0:	8b5b      	ldrh	r3, [r3, #26]
   127f2:	b29b      	uxth	r3, r3
   127f4:	001a      	movs	r2, r3
   127f6:	2304      	movs	r3, #4
   127f8:	4013      	ands	r3, r2
   127fa:	d004      	beq.n	12806 <_i2c_master_write+0x26>
   127fc:	687b      	ldr	r3, [r7, #4]
   127fe:	2225      	movs	r2, #37	; 0x25
   12800:	211e      	movs	r1, #30
   12802:	5499      	strb	r1, [r3, r2]
   12804:	e024      	b.n	12850 <_i2c_master_write+0x70>
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	687a      	ldr	r2, [r7, #4]
   1280c:	8b52      	ldrh	r2, [r2, #26]
   1280e:	801a      	strh	r2, [r3, #0]
   12810:	687b      	ldr	r3, [r7, #4]
   12812:	8b9b      	ldrh	r3, [r3, #28]
   12814:	b29a      	uxth	r2, r3
   12816:	230a      	movs	r3, #10
   12818:	18fb      	adds	r3, r7, r3
   1281a:	210a      	movs	r1, #10
   1281c:	1879      	adds	r1, r7, r1
   1281e:	8809      	ldrh	r1, [r1, #0]
   12820:	1a8a      	subs	r2, r1, r2
   12822:	801a      	strh	r2, [r3, #0]
   12824:	687b      	ldr	r3, [r7, #4]
   12826:	8b9b      	ldrh	r3, [r3, #28]
   12828:	b29b      	uxth	r3, r3
   1282a:	3b01      	subs	r3, #1
   1282c:	b29a      	uxth	r2, r3
   1282e:	687b      	ldr	r3, [r7, #4]
   12830:	839a      	strh	r2, [r3, #28]
   12832:	687b      	ldr	r3, [r7, #4]
   12834:	0018      	movs	r0, r3
   12836:	4b08      	ldr	r3, [pc, #32]	; (12858 <_i2c_master_write+0x78>)
   12838:	4798      	blx	r3
   1283a:	687b      	ldr	r3, [r7, #4]
   1283c:	6a1a      	ldr	r2, [r3, #32]
   1283e:	230a      	movs	r3, #10
   12840:	18fb      	adds	r3, r7, r3
   12842:	881b      	ldrh	r3, [r3, #0]
   12844:	18d3      	adds	r3, r2, r3
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	b2d9      	uxtb	r1, r3
   1284a:	68fb      	ldr	r3, [r7, #12]
   1284c:	2228      	movs	r2, #40	; 0x28
   1284e:	5499      	strb	r1, [r3, r2]
   12850:	46bd      	mov	sp, r7
   12852:	b004      	add	sp, #16
   12854:	bd80      	pop	{r7, pc}
   12856:	46c0      	nop			; (mov r8, r8)
   12858:	000126cd 	.word	0x000126cd

0001285c <_i2c_master_async_address_response>:
   1285c:	b580      	push	{r7, lr}
   1285e:	b084      	sub	sp, #16
   12860:	af00      	add	r7, sp, #0
   12862:	6078      	str	r0, [r7, #4]
   12864:	687b      	ldr	r3, [r7, #4]
   12866:	681b      	ldr	r3, [r3, #0]
   12868:	60fb      	str	r3, [r7, #12]
   1286a:	68fb      	ldr	r3, [r7, #12]
   1286c:	7e1b      	ldrb	r3, [r3, #24]
   1286e:	b2db      	uxtb	r3, r3
   12870:	001a      	movs	r2, r3
   12872:	2301      	movs	r3, #1
   12874:	4013      	ands	r3, r2
   12876:	d02b      	beq.n	128d0 <_i2c_master_async_address_response+0x74>
   12878:	68fb      	ldr	r3, [r7, #12]
   1287a:	2201      	movs	r2, #1
   1287c:	761a      	strb	r2, [r3, #24]
   1287e:	68fb      	ldr	r3, [r7, #12]
   12880:	8b5b      	ldrh	r3, [r3, #26]
   12882:	b29b      	uxth	r3, r3
   12884:	001a      	movs	r2, r3
   12886:	2302      	movs	r3, #2
   12888:	4013      	ands	r3, r2
   1288a:	d004      	beq.n	12896 <_i2c_master_async_address_response+0x3a>
   1288c:	687b      	ldr	r3, [r7, #4]
   1288e:	2225      	movs	r2, #37	; 0x25
   12890:	2141      	movs	r1, #65	; 0x41
   12892:	5499      	strb	r1, [r3, r2]
   12894:	e01c      	b.n	128d0 <_i2c_master_async_address_response+0x74>
   12896:	68fb      	ldr	r3, [r7, #12]
   12898:	8b5b      	ldrh	r3, [r3, #26]
   1289a:	b29b      	uxth	r3, r3
   1289c:	001a      	movs	r2, r3
   1289e:	2304      	movs	r3, #4
   128a0:	4013      	ands	r3, r2
   128a2:	d015      	beq.n	128d0 <_i2c_master_async_address_response+0x74>
   128a4:	687b      	ldr	r3, [r7, #4]
   128a6:	2225      	movs	r2, #37	; 0x25
   128a8:	2118      	movs	r1, #24
   128aa:	5499      	strb	r1, [r3, r2]
   128ac:	687b      	ldr	r3, [r7, #4]
   128ae:	2200      	movs	r2, #0
   128b0:	839a      	strh	r2, [r3, #28]
   128b2:	687b      	ldr	r3, [r7, #4]
   128b4:	7a9b      	ldrb	r3, [r3, #10]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d00a      	beq.n	128d0 <_i2c_master_async_address_response+0x74>
   128ba:	687b      	ldr	r3, [r7, #4]
   128bc:	0018      	movs	r0, r3
   128be:	4b13      	ldr	r3, [pc, #76]	; (1290c <_i2c_master_async_address_response+0xb0>)
   128c0:	4798      	blx	r3
   128c2:	68fb      	ldr	r3, [r7, #12]
   128c4:	685b      	ldr	r3, [r3, #4]
   128c6:	22c0      	movs	r2, #192	; 0xc0
   128c8:	0292      	lsls	r2, r2, #10
   128ca:	431a      	orrs	r2, r3
   128cc:	68fb      	ldr	r3, [r7, #12]
   128ce:	605a      	str	r2, [r3, #4]
   128d0:	687b      	ldr	r3, [r7, #4]
   128d2:	8b9b      	ldrh	r3, [r3, #28]
   128d4:	b29a      	uxth	r2, r3
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	835a      	strh	r2, [r3, #26]
   128da:	687b      	ldr	r3, [r7, #4]
   128dc:	2225      	movs	r2, #37	; 0x25
   128de:	5c9b      	ldrb	r3, [r3, r2]
   128e0:	b2db      	uxtb	r3, r3
   128e2:	2b05      	cmp	r3, #5
   128e4:	d10e      	bne.n	12904 <_i2c_master_async_address_response+0xa8>
   128e6:	687b      	ldr	r3, [r7, #4]
   128e8:	2224      	movs	r2, #36	; 0x24
   128ea:	5c9b      	ldrb	r3, [r3, r2]
   128ec:	b2db      	uxtb	r3, r3
   128ee:	2b00      	cmp	r3, #0
   128f0:	d104      	bne.n	128fc <_i2c_master_async_address_response+0xa0>
   128f2:	687b      	ldr	r3, [r7, #4]
   128f4:	0018      	movs	r0, r3
   128f6:	4b06      	ldr	r3, [pc, #24]	; (12910 <_i2c_master_async_address_response+0xb4>)
   128f8:	4798      	blx	r3
   128fa:	e003      	b.n	12904 <_i2c_master_async_address_response+0xa8>
   128fc:	687b      	ldr	r3, [r7, #4]
   128fe:	0018      	movs	r0, r3
   12900:	4b04      	ldr	r3, [pc, #16]	; (12914 <_i2c_master_async_address_response+0xb8>)
   12902:	4798      	blx	r3
   12904:	46c0      	nop			; (mov r8, r8)
   12906:	46bd      	mov	sp, r7
   12908:	b004      	add	sp, #16
   1290a:	bd80      	pop	{r7, pc}
   1290c:	000126cd 	.word	0x000126cd
   12910:	000127e1 	.word	0x000127e1
   12914:	000126f1 	.word	0x000126f1

00012918 <i2c_master_register_callback>:
   12918:	b580      	push	{r7, lr}
   1291a:	b084      	sub	sp, #16
   1291c:	af00      	add	r7, sp, #0
   1291e:	60f8      	str	r0, [r7, #12]
   12920:	60b9      	str	r1, [r7, #8]
   12922:	1dfb      	adds	r3, r7, #7
   12924:	701a      	strb	r2, [r3, #0]
   12926:	1dfb      	adds	r3, r7, #7
   12928:	781b      	ldrb	r3, [r3, #0]
   1292a:	68fa      	ldr	r2, [r7, #12]
   1292c:	3302      	adds	r3, #2
   1292e:	009b      	lsls	r3, r3, #2
   12930:	18d3      	adds	r3, r2, r3
   12932:	3304      	adds	r3, #4
   12934:	68ba      	ldr	r2, [r7, #8]
   12936:	601a      	str	r2, [r3, #0]
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	7e1b      	ldrb	r3, [r3, #24]
   1293c:	b2db      	uxtb	r3, r3
   1293e:	b25a      	sxtb	r2, r3
   12940:	1dfb      	adds	r3, r7, #7
   12942:	781b      	ldrb	r3, [r3, #0]
   12944:	2101      	movs	r1, #1
   12946:	4099      	lsls	r1, r3
   12948:	000b      	movs	r3, r1
   1294a:	b25b      	sxtb	r3, r3
   1294c:	4313      	orrs	r3, r2
   1294e:	b25b      	sxtb	r3, r3
   12950:	b2da      	uxtb	r2, r3
   12952:	68fb      	ldr	r3, [r7, #12]
   12954:	761a      	strb	r2, [r3, #24]
   12956:	46c0      	nop			; (mov r8, r8)
   12958:	46bd      	mov	sp, r7
   1295a:	b004      	add	sp, #16
   1295c:	bd80      	pop	{r7, pc}
	...

00012960 <_i2c_master_write_packet>:
   12960:	b580      	push	{r7, lr}
   12962:	b084      	sub	sp, #16
   12964:	af00      	add	r7, sp, #0
   12966:	6078      	str	r0, [r7, #4]
   12968:	6039      	str	r1, [r7, #0]
   1296a:	687b      	ldr	r3, [r7, #4]
   1296c:	681b      	ldr	r3, [r3, #0]
   1296e:	60fb      	str	r3, [r7, #12]
   12970:	683b      	ldr	r3, [r7, #0]
   12972:	7a5b      	ldrb	r3, [r3, #9]
   12974:	2b00      	cmp	r3, #0
   12976:	d006      	beq.n	12986 <_i2c_master_write_packet+0x26>
   12978:	683b      	ldr	r3, [r7, #0]
   1297a:	7a9a      	ldrb	r2, [r3, #10]
   1297c:	687b      	ldr	r3, [r7, #4]
   1297e:	0011      	movs	r1, r2
   12980:	0018      	movs	r0, r3
   12982:	4b1e      	ldr	r3, [pc, #120]	; (129fc <_i2c_master_write_packet+0x9c>)
   12984:	4798      	blx	r3
   12986:	68fb      	ldr	r3, [r7, #12]
   12988:	685b      	ldr	r3, [r3, #4]
   1298a:	4a1d      	ldr	r2, [pc, #116]	; (12a00 <_i2c_master_write_packet+0xa0>)
   1298c:	401a      	ands	r2, r3
   1298e:	68fb      	ldr	r3, [r7, #12]
   12990:	605a      	str	r2, [r3, #4]
   12992:	683b      	ldr	r3, [r7, #0]
   12994:	685a      	ldr	r2, [r3, #4]
   12996:	687b      	ldr	r3, [r7, #4]
   12998:	621a      	str	r2, [r3, #32]
   1299a:	683b      	ldr	r3, [r7, #0]
   1299c:	885a      	ldrh	r2, [r3, #2]
   1299e:	687b      	ldr	r3, [r7, #4]
   129a0:	839a      	strh	r2, [r3, #28]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	2224      	movs	r2, #36	; 0x24
   129a6:	2100      	movs	r1, #0
   129a8:	5499      	strb	r1, [r3, r2]
   129aa:	687b      	ldr	r3, [r7, #4]
   129ac:	2225      	movs	r2, #37	; 0x25
   129ae:	2105      	movs	r1, #5
   129b0:	5499      	strb	r1, [r3, r2]
   129b2:	68fb      	ldr	r3, [r7, #12]
   129b4:	2203      	movs	r2, #3
   129b6:	759a      	strb	r2, [r3, #22]
   129b8:	683b      	ldr	r3, [r7, #0]
   129ba:	7a1b      	ldrb	r3, [r3, #8]
   129bc:	2b00      	cmp	r3, #0
   129be:	d00d      	beq.n	129dc <_i2c_master_write_packet+0x7c>
   129c0:	683b      	ldr	r3, [r7, #0]
   129c2:	881b      	ldrh	r3, [r3, #0]
   129c4:	005a      	lsls	r2, r3, #1
   129c6:	683b      	ldr	r3, [r7, #0]
   129c8:	7a5b      	ldrb	r3, [r3, #9]
   129ca:	039b      	lsls	r3, r3, #14
   129cc:	4313      	orrs	r3, r2
   129ce:	001a      	movs	r2, r3
   129d0:	2380      	movs	r3, #128	; 0x80
   129d2:	021b      	lsls	r3, r3, #8
   129d4:	431a      	orrs	r2, r3
   129d6:	68fb      	ldr	r3, [r7, #12]
   129d8:	625a      	str	r2, [r3, #36]	; 0x24
   129da:	e009      	b.n	129f0 <_i2c_master_write_packet+0x90>
   129dc:	683b      	ldr	r3, [r7, #0]
   129de:	881b      	ldrh	r3, [r3, #0]
   129e0:	005a      	lsls	r2, r3, #1
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	7a5b      	ldrb	r3, [r3, #9]
   129e6:	039b      	lsls	r3, r3, #14
   129e8:	4313      	orrs	r3, r2
   129ea:	001a      	movs	r2, r3
   129ec:	68fb      	ldr	r3, [r7, #12]
   129ee:	625a      	str	r2, [r3, #36]	; 0x24
   129f0:	2300      	movs	r3, #0
   129f2:	0018      	movs	r0, r3
   129f4:	46bd      	mov	sp, r7
   129f6:	b004      	add	sp, #16
   129f8:	bd80      	pop	{r7, pc}
   129fa:	46c0      	nop			; (mov r8, r8)
   129fc:	0001594d 	.word	0x0001594d
   12a00:	fffbffff 	.word	0xfffbffff

00012a04 <i2c_master_write_packet_job>:
   12a04:	b580      	push	{r7, lr}
   12a06:	b082      	sub	sp, #8
   12a08:	af00      	add	r7, sp, #0
   12a0a:	6078      	str	r0, [r7, #4]
   12a0c:	6039      	str	r1, [r7, #0]
   12a0e:	687b      	ldr	r3, [r7, #4]
   12a10:	8b9b      	ldrh	r3, [r3, #28]
   12a12:	b29b      	uxth	r3, r3
   12a14:	2b00      	cmp	r3, #0
   12a16:	d001      	beq.n	12a1c <i2c_master_write_packet_job+0x18>
   12a18:	2305      	movs	r3, #5
   12a1a:	e00c      	b.n	12a36 <i2c_master_write_packet_job+0x32>
   12a1c:	687b      	ldr	r3, [r7, #4]
   12a1e:	2201      	movs	r2, #1
   12a20:	729a      	strb	r2, [r3, #10]
   12a22:	687b      	ldr	r3, [r7, #4]
   12a24:	2201      	movs	r2, #1
   12a26:	72da      	strb	r2, [r3, #11]
   12a28:	683a      	ldr	r2, [r7, #0]
   12a2a:	687b      	ldr	r3, [r7, #4]
   12a2c:	0011      	movs	r1, r2
   12a2e:	0018      	movs	r0, r3
   12a30:	4b03      	ldr	r3, [pc, #12]	; (12a40 <i2c_master_write_packet_job+0x3c>)
   12a32:	4798      	blx	r3
   12a34:	0003      	movs	r3, r0
   12a36:	0018      	movs	r0, r3
   12a38:	46bd      	mov	sp, r7
   12a3a:	b002      	add	sp, #8
   12a3c:	bd80      	pop	{r7, pc}
   12a3e:	46c0      	nop			; (mov r8, r8)
   12a40:	00012961 	.word	0x00012961

00012a44 <_i2c_master_interrupt_handler>:
   12a44:	b580      	push	{r7, lr}
   12a46:	b086      	sub	sp, #24
   12a48:	af00      	add	r7, sp, #0
   12a4a:	0002      	movs	r2, r0
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	701a      	strb	r2, [r3, #0]
   12a50:	1dfb      	adds	r3, r7, #7
   12a52:	781a      	ldrb	r2, [r3, #0]
   12a54:	4b93      	ldr	r3, [pc, #588]	; (12ca4 <_i2c_master_interrupt_handler+0x260>)
   12a56:	0092      	lsls	r2, r2, #2
   12a58:	58d3      	ldr	r3, [r2, r3]
   12a5a:	617b      	str	r3, [r7, #20]
   12a5c:	697b      	ldr	r3, [r7, #20]
   12a5e:	681b      	ldr	r3, [r3, #0]
   12a60:	613b      	str	r3, [r7, #16]
   12a62:	693b      	ldr	r3, [r7, #16]
   12a64:	681b      	ldr	r3, [r3, #0]
   12a66:	011b      	lsls	r3, r3, #4
   12a68:	0fdb      	lsrs	r3, r3, #31
   12a6a:	b2db      	uxtb	r3, r3
   12a6c:	001a      	movs	r2, r3
   12a6e:	230f      	movs	r3, #15
   12a70:	18fb      	adds	r3, r7, r3
   12a72:	1e51      	subs	r1, r2, #1
   12a74:	418a      	sbcs	r2, r1
   12a76:	701a      	strb	r2, [r3, #0]
   12a78:	230e      	movs	r3, #14
   12a7a:	18fb      	adds	r3, r7, r3
   12a7c:	697a      	ldr	r2, [r7, #20]
   12a7e:	7e52      	ldrb	r2, [r2, #25]
   12a80:	701a      	strb	r2, [r3, #0]
   12a82:	697b      	ldr	r3, [r7, #20]
   12a84:	7e1b      	ldrb	r3, [r3, #24]
   12a86:	b2da      	uxtb	r2, r3
   12a88:	230e      	movs	r3, #14
   12a8a:	18fb      	adds	r3, r7, r3
   12a8c:	210e      	movs	r1, #14
   12a8e:	1879      	adds	r1, r7, r1
   12a90:	7809      	ldrb	r1, [r1, #0]
   12a92:	400a      	ands	r2, r1
   12a94:	701a      	strb	r2, [r3, #0]
   12a96:	697b      	ldr	r3, [r7, #20]
   12a98:	8b5b      	ldrh	r3, [r3, #26]
   12a9a:	b29b      	uxth	r3, r3
   12a9c:	2b00      	cmp	r3, #0
   12a9e:	d109      	bne.n	12ab4 <_i2c_master_interrupt_handler+0x70>
   12aa0:	697b      	ldr	r3, [r7, #20]
   12aa2:	8b9b      	ldrh	r3, [r3, #28]
   12aa4:	b29b      	uxth	r3, r3
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d004      	beq.n	12ab4 <_i2c_master_interrupt_handler+0x70>
   12aaa:	697b      	ldr	r3, [r7, #20]
   12aac:	0018      	movs	r0, r3
   12aae:	4b7e      	ldr	r3, [pc, #504]	; (12ca8 <_i2c_master_interrupt_handler+0x264>)
   12ab0:	4798      	blx	r3
   12ab2:	e070      	b.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12ab4:	697b      	ldr	r3, [r7, #20]
   12ab6:	8b5b      	ldrh	r3, [r3, #26]
   12ab8:	b29b      	uxth	r3, r3
   12aba:	2b00      	cmp	r3, #0
   12abc:	d039      	beq.n	12b32 <_i2c_master_interrupt_handler+0xee>
   12abe:	697b      	ldr	r3, [r7, #20]
   12ac0:	8b9b      	ldrh	r3, [r3, #28]
   12ac2:	b29b      	uxth	r3, r3
   12ac4:	2b00      	cmp	r3, #0
   12ac6:	d134      	bne.n	12b32 <_i2c_master_interrupt_handler+0xee>
   12ac8:	697b      	ldr	r3, [r7, #20]
   12aca:	2225      	movs	r2, #37	; 0x25
   12acc:	5c9b      	ldrb	r3, [r3, r2]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	2b05      	cmp	r3, #5
   12ad2:	d12e      	bne.n	12b32 <_i2c_master_interrupt_handler+0xee>
   12ad4:	697b      	ldr	r3, [r7, #20]
   12ad6:	2224      	movs	r2, #36	; 0x24
   12ad8:	5c9b      	ldrb	r3, [r3, r2]
   12ada:	b2db      	uxtb	r3, r3
   12adc:	2b00      	cmp	r3, #0
   12ade:	d128      	bne.n	12b32 <_i2c_master_interrupt_handler+0xee>
   12ae0:	693b      	ldr	r3, [r7, #16]
   12ae2:	2203      	movs	r2, #3
   12ae4:	751a      	strb	r2, [r3, #20]
   12ae6:	697b      	ldr	r3, [r7, #20]
   12ae8:	2200      	movs	r2, #0
   12aea:	835a      	strh	r2, [r3, #26]
   12aec:	697b      	ldr	r3, [r7, #20]
   12aee:	2225      	movs	r2, #37	; 0x25
   12af0:	2100      	movs	r1, #0
   12af2:	5499      	strb	r1, [r3, r2]
   12af4:	697b      	ldr	r3, [r7, #20]
   12af6:	7a9b      	ldrb	r3, [r3, #10]
   12af8:	2b00      	cmp	r3, #0
   12afa:	d00b      	beq.n	12b14 <_i2c_master_interrupt_handler+0xd0>
   12afc:	697b      	ldr	r3, [r7, #20]
   12afe:	0018      	movs	r0, r3
   12b00:	4b6a      	ldr	r3, [pc, #424]	; (12cac <_i2c_master_interrupt_handler+0x268>)
   12b02:	4798      	blx	r3
   12b04:	693b      	ldr	r3, [r7, #16]
   12b06:	685b      	ldr	r3, [r3, #4]
   12b08:	22c0      	movs	r2, #192	; 0xc0
   12b0a:	0292      	lsls	r2, r2, #10
   12b0c:	431a      	orrs	r2, r3
   12b0e:	693b      	ldr	r3, [r7, #16]
   12b10:	605a      	str	r2, [r3, #4]
   12b12:	e002      	b.n	12b1a <_i2c_master_interrupt_handler+0xd6>
   12b14:	693b      	ldr	r3, [r7, #16]
   12b16:	2201      	movs	r2, #1
   12b18:	761a      	strb	r2, [r3, #24]
   12b1a:	230e      	movs	r3, #14
   12b1c:	18fb      	adds	r3, r7, r3
   12b1e:	781b      	ldrb	r3, [r3, #0]
   12b20:	2201      	movs	r2, #1
   12b22:	4013      	ands	r3, r2
   12b24:	d037      	beq.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b26:	697b      	ldr	r3, [r7, #20]
   12b28:	68db      	ldr	r3, [r3, #12]
   12b2a:	697a      	ldr	r2, [r7, #20]
   12b2c:	0010      	movs	r0, r2
   12b2e:	4798      	blx	r3
   12b30:	e031      	b.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b32:	697b      	ldr	r3, [r7, #20]
   12b34:	8b5b      	ldrh	r3, [r3, #26]
   12b36:	b29b      	uxth	r3, r3
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d02c      	beq.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b3c:	697b      	ldr	r3, [r7, #20]
   12b3e:	8b9b      	ldrh	r3, [r3, #28]
   12b40:	b29b      	uxth	r3, r3
   12b42:	2b00      	cmp	r3, #0
   12b44:	d027      	beq.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b46:	693b      	ldr	r3, [r7, #16]
   12b48:	8b5b      	ldrh	r3, [r3, #26]
   12b4a:	b29b      	uxth	r3, r3
   12b4c:	001a      	movs	r2, r3
   12b4e:	2320      	movs	r3, #32
   12b50:	4013      	ands	r3, r2
   12b52:	d111      	bne.n	12b78 <_i2c_master_interrupt_handler+0x134>
   12b54:	230f      	movs	r3, #15
   12b56:	18fb      	adds	r3, r7, r3
   12b58:	781b      	ldrb	r3, [r3, #0]
   12b5a:	2201      	movs	r2, #1
   12b5c:	4053      	eors	r3, r2
   12b5e:	b2db      	uxtb	r3, r3
   12b60:	2b00      	cmp	r3, #0
   12b62:	d104      	bne.n	12b6e <_i2c_master_interrupt_handler+0x12a>
   12b64:	697b      	ldr	r3, [r7, #20]
   12b66:	8b9b      	ldrh	r3, [r3, #28]
   12b68:	b29b      	uxth	r3, r3
   12b6a:	2b01      	cmp	r3, #1
   12b6c:	d004      	beq.n	12b78 <_i2c_master_interrupt_handler+0x134>
   12b6e:	697b      	ldr	r3, [r7, #20]
   12b70:	2225      	movs	r2, #37	; 0x25
   12b72:	2141      	movs	r1, #65	; 0x41
   12b74:	5499      	strb	r1, [r3, r2]
   12b76:	e00e      	b.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b78:	697b      	ldr	r3, [r7, #20]
   12b7a:	2224      	movs	r2, #36	; 0x24
   12b7c:	5c9b      	ldrb	r3, [r3, r2]
   12b7e:	b2db      	uxtb	r3, r3
   12b80:	2b00      	cmp	r3, #0
   12b82:	d104      	bne.n	12b8e <_i2c_master_interrupt_handler+0x14a>
   12b84:	697b      	ldr	r3, [r7, #20]
   12b86:	0018      	movs	r0, r3
   12b88:	4b49      	ldr	r3, [pc, #292]	; (12cb0 <_i2c_master_interrupt_handler+0x26c>)
   12b8a:	4798      	blx	r3
   12b8c:	e003      	b.n	12b96 <_i2c_master_interrupt_handler+0x152>
   12b8e:	697b      	ldr	r3, [r7, #20]
   12b90:	0018      	movs	r0, r3
   12b92:	4b48      	ldr	r3, [pc, #288]	; (12cb4 <_i2c_master_interrupt_handler+0x270>)
   12b94:	4798      	blx	r3
   12b96:	697b      	ldr	r3, [r7, #20]
   12b98:	8b5b      	ldrh	r3, [r3, #26]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d047      	beq.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12ba0:	697b      	ldr	r3, [r7, #20]
   12ba2:	8b9b      	ldrh	r3, [r3, #28]
   12ba4:	b29b      	uxth	r3, r3
   12ba6:	2b00      	cmp	r3, #0
   12ba8:	d142      	bne.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12baa:	697b      	ldr	r3, [r7, #20]
   12bac:	2225      	movs	r2, #37	; 0x25
   12bae:	5c9b      	ldrb	r3, [r3, r2]
   12bb0:	b2db      	uxtb	r3, r3
   12bb2:	2b05      	cmp	r3, #5
   12bb4:	d13c      	bne.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12bb6:	697b      	ldr	r3, [r7, #20]
   12bb8:	2224      	movs	r2, #36	; 0x24
   12bba:	5c9b      	ldrb	r3, [r3, r2]
   12bbc:	b2db      	uxtb	r3, r3
   12bbe:	2b01      	cmp	r3, #1
   12bc0:	d136      	bne.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12bc2:	693b      	ldr	r3, [r7, #16]
   12bc4:	7e1b      	ldrb	r3, [r3, #24]
   12bc6:	b2db      	uxtb	r3, r3
   12bc8:	001a      	movs	r2, r3
   12bca:	2302      	movs	r3, #2
   12bcc:	4013      	ands	r3, r2
   12bce:	d002      	beq.n	12bd6 <_i2c_master_interrupt_handler+0x192>
   12bd0:	693b      	ldr	r3, [r7, #16]
   12bd2:	2202      	movs	r2, #2
   12bd4:	761a      	strb	r2, [r3, #24]
   12bd6:	693b      	ldr	r3, [r7, #16]
   12bd8:	2203      	movs	r2, #3
   12bda:	751a      	strb	r2, [r3, #20]
   12bdc:	697b      	ldr	r3, [r7, #20]
   12bde:	2200      	movs	r2, #0
   12be0:	835a      	strh	r2, [r3, #26]
   12be2:	697b      	ldr	r3, [r7, #20]
   12be4:	2225      	movs	r2, #37	; 0x25
   12be6:	2100      	movs	r1, #0
   12be8:	5499      	strb	r1, [r3, r2]
   12bea:	230e      	movs	r3, #14
   12bec:	18fb      	adds	r3, r7, r3
   12bee:	781b      	ldrb	r3, [r3, #0]
   12bf0:	2202      	movs	r2, #2
   12bf2:	4013      	ands	r3, r2
   12bf4:	d00b      	beq.n	12c0e <_i2c_master_interrupt_handler+0x1ca>
   12bf6:	697b      	ldr	r3, [r7, #20]
   12bf8:	2224      	movs	r2, #36	; 0x24
   12bfa:	5c9b      	ldrb	r3, [r3, r2]
   12bfc:	b2db      	uxtb	r3, r3
   12bfe:	2b01      	cmp	r3, #1
   12c00:	d105      	bne.n	12c0e <_i2c_master_interrupt_handler+0x1ca>
   12c02:	697b      	ldr	r3, [r7, #20]
   12c04:	691b      	ldr	r3, [r3, #16]
   12c06:	697a      	ldr	r2, [r7, #20]
   12c08:	0010      	movs	r0, r2
   12c0a:	4798      	blx	r3
   12c0c:	e010      	b.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12c0e:	230e      	movs	r3, #14
   12c10:	18fb      	adds	r3, r7, r3
   12c12:	781b      	ldrb	r3, [r3, #0]
   12c14:	2201      	movs	r2, #1
   12c16:	4013      	ands	r3, r2
   12c18:	d00a      	beq.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12c1a:	697b      	ldr	r3, [r7, #20]
   12c1c:	2224      	movs	r2, #36	; 0x24
   12c1e:	5c9b      	ldrb	r3, [r3, r2]
   12c20:	b2db      	uxtb	r3, r3
   12c22:	2b00      	cmp	r3, #0
   12c24:	d104      	bne.n	12c30 <_i2c_master_interrupt_handler+0x1ec>
   12c26:	697b      	ldr	r3, [r7, #20]
   12c28:	68db      	ldr	r3, [r3, #12]
   12c2a:	697a      	ldr	r2, [r7, #20]
   12c2c:	0010      	movs	r0, r2
   12c2e:	4798      	blx	r3
   12c30:	697b      	ldr	r3, [r7, #20]
   12c32:	2225      	movs	r2, #37	; 0x25
   12c34:	5c9b      	ldrb	r3, [r3, r2]
   12c36:	b2db      	uxtb	r3, r3
   12c38:	2b05      	cmp	r3, #5
   12c3a:	d02e      	beq.n	12c9a <_i2c_master_interrupt_handler+0x256>
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	2225      	movs	r2, #37	; 0x25
   12c40:	5c9b      	ldrb	r3, [r3, r2]
   12c42:	b2db      	uxtb	r3, r3
   12c44:	2b00      	cmp	r3, #0
   12c46:	d028      	beq.n	12c9a <_i2c_master_interrupt_handler+0x256>
   12c48:	693b      	ldr	r3, [r7, #16]
   12c4a:	2203      	movs	r2, #3
   12c4c:	751a      	strb	r2, [r3, #20]
   12c4e:	697b      	ldr	r3, [r7, #20]
   12c50:	2200      	movs	r2, #0
   12c52:	835a      	strh	r2, [r3, #26]
   12c54:	697b      	ldr	r3, [r7, #20]
   12c56:	2200      	movs	r2, #0
   12c58:	839a      	strh	r2, [r3, #28]
   12c5a:	697b      	ldr	r3, [r7, #20]
   12c5c:	2225      	movs	r2, #37	; 0x25
   12c5e:	5c9b      	ldrb	r3, [r3, r2]
   12c60:	b2db      	uxtb	r3, r3
   12c62:	2b41      	cmp	r3, #65	; 0x41
   12c64:	d00e      	beq.n	12c84 <_i2c_master_interrupt_handler+0x240>
   12c66:	697b      	ldr	r3, [r7, #20]
   12c68:	7a9b      	ldrb	r3, [r3, #10]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d00a      	beq.n	12c84 <_i2c_master_interrupt_handler+0x240>
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	0018      	movs	r0, r3
   12c72:	4b0e      	ldr	r3, [pc, #56]	; (12cac <_i2c_master_interrupt_handler+0x268>)
   12c74:	4798      	blx	r3
   12c76:	693b      	ldr	r3, [r7, #16]
   12c78:	685b      	ldr	r3, [r3, #4]
   12c7a:	22e0      	movs	r2, #224	; 0xe0
   12c7c:	02d2      	lsls	r2, r2, #11
   12c7e:	431a      	orrs	r2, r3
   12c80:	693b      	ldr	r3, [r7, #16]
   12c82:	605a      	str	r2, [r3, #4]
   12c84:	230e      	movs	r3, #14
   12c86:	18fb      	adds	r3, r7, r3
   12c88:	781b      	ldrb	r3, [r3, #0]
   12c8a:	2204      	movs	r2, #4
   12c8c:	4013      	ands	r3, r2
   12c8e:	d004      	beq.n	12c9a <_i2c_master_interrupt_handler+0x256>
   12c90:	697b      	ldr	r3, [r7, #20]
   12c92:	695b      	ldr	r3, [r3, #20]
   12c94:	697a      	ldr	r2, [r7, #20]
   12c96:	0010      	movs	r0, r2
   12c98:	4798      	blx	r3
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	b006      	add	sp, #24
   12ca0:	bd80      	pop	{r7, pc}
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	20005578 	.word	0x20005578
   12ca8:	0001285d 	.word	0x0001285d
   12cac:	000126cd 	.word	0x000126cd
   12cb0:	000127e1 	.word	0x000127e1
   12cb4:	000126f1 	.word	0x000126f1

00012cb8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12cb8:	b580      	push	{r7, lr}
   12cba:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12cbc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12cc0:	4b02      	ldr	r3, [pc, #8]	; (12ccc <NVIC_SystemReset+0x14>)
   12cc2:	4a03      	ldr	r2, [pc, #12]	; (12cd0 <NVIC_SystemReset+0x18>)
   12cc4:	60da      	str	r2, [r3, #12]
   12cc6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12cca:	e7fe      	b.n	12cca <NVIC_SystemReset+0x12>
   12ccc:	e000ed00 	.word	0xe000ed00
   12cd0:	05fa0004 	.word	0x05fa0004

00012cd4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12cd8:	4b02      	ldr	r3, [pc, #8]	; (12ce4 <system_reset+0x10>)
   12cda:	4798      	blx	r3
}
   12cdc:	46c0      	nop			; (mov r8, r8)
   12cde:	46bd      	mov	sp, r7
   12ce0:	bd80      	pop	{r7, pc}
   12ce2:	46c0      	nop			; (mov r8, r8)
   12ce4:	00012cb9 	.word	0x00012cb9

00012ce8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12ce8:	b580      	push	{r7, lr}
   12cea:	b086      	sub	sp, #24
   12cec:	af00      	add	r7, sp, #0
   12cee:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12cf0:	4b98      	ldr	r3, [pc, #608]	; (12f54 <vCommandConsoleTask+0x26c>)
   12cf2:	0018      	movs	r0, r3
   12cf4:	4b98      	ldr	r3, [pc, #608]	; (12f58 <vCommandConsoleTask+0x270>)
   12cf6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12cf8:	4b98      	ldr	r3, [pc, #608]	; (12f5c <vCommandConsoleTask+0x274>)
   12cfa:	0018      	movs	r0, r3
   12cfc:	4b96      	ldr	r3, [pc, #600]	; (12f58 <vCommandConsoleTask+0x270>)
   12cfe:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12d00:	4b97      	ldr	r3, [pc, #604]	; (12f60 <vCommandConsoleTask+0x278>)
   12d02:	0018      	movs	r0, r3
   12d04:	4b94      	ldr	r3, [pc, #592]	; (12f58 <vCommandConsoleTask+0x270>)
   12d06:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12d08:	4b96      	ldr	r3, [pc, #600]	; (12f64 <vCommandConsoleTask+0x27c>)
   12d0a:	0018      	movs	r0, r3
   12d0c:	4b92      	ldr	r3, [pc, #584]	; (12f58 <vCommandConsoleTask+0x270>)
   12d0e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xVersion);
   12d10:	4b95      	ldr	r3, [pc, #596]	; (12f68 <vCommandConsoleTask+0x280>)
   12d12:	0018      	movs	r0, r3
   12d14:	4b90      	ldr	r3, [pc, #576]	; (12f58 <vCommandConsoleTask+0x270>)
   12d16:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicks);
   12d18:	4b94      	ldr	r3, [pc, #592]	; (12f6c <vCommandConsoleTask+0x284>)
   12d1a:	0018      	movs	r0, r3
   12d1c:	4b8e      	ldr	r3, [pc, #568]	; (12f58 <vCommandConsoleTask+0x270>)
   12d1e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12d20:	2317      	movs	r3, #23
   12d22:	18fb      	adds	r3, r7, r3
   12d24:	2200      	movs	r2, #0
   12d26:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12d28:	4b91      	ldr	r3, [pc, #580]	; (12f70 <vCommandConsoleTask+0x288>)
   12d2a:	0018      	movs	r0, r3
   12d2c:	4b91      	ldr	r3, [pc, #580]	; (12f74 <vCommandConsoleTask+0x28c>)
   12d2e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12d30:	2203      	movs	r2, #3
   12d32:	2100      	movs	r1, #0
   12d34:	2001      	movs	r0, #1
   12d36:	4b90      	ldr	r3, [pc, #576]	; (12f78 <vCommandConsoleTask+0x290>)
   12d38:	4798      	blx	r3
   12d3a:	0002      	movs	r2, r0
   12d3c:	4b8f      	ldr	r3, [pc, #572]	; (12f7c <vCommandConsoleTask+0x294>)
   12d3e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12d40:	4b8e      	ldr	r3, [pc, #568]	; (12f7c <vCommandConsoleTask+0x294>)
   12d42:	681b      	ldr	r3, [r3, #0]
   12d44:	2b00      	cmp	r3, #0
   12d46:	d107      	bne.n	12d58 <vCommandConsoleTask+0x70>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12d48:	4b8d      	ldr	r3, [pc, #564]	; (12f80 <vCommandConsoleTask+0x298>)
   12d4a:	0019      	movs	r1, r3
   12d4c:	2003      	movs	r0, #3
   12d4e:	4b8d      	ldr	r3, [pc, #564]	; (12f84 <vCommandConsoleTask+0x29c>)
   12d50:	4798      	blx	r3
        vTaskSuspend(NULL);
   12d52:	2000      	movs	r0, #0
   12d54:	4b8c      	ldr	r3, [pc, #560]	; (12f88 <vCommandConsoleTask+0x2a0>)
   12d56:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12d58:	230c      	movs	r3, #12
   12d5a:	18fb      	adds	r3, r7, r3
   12d5c:	0018      	movs	r0, r3
   12d5e:	4b8b      	ldr	r3, [pc, #556]	; (12f8c <vCommandConsoleTask+0x2a4>)
   12d60:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12d62:	230c      	movs	r3, #12
   12d64:	18fb      	adds	r3, r7, r3
   12d66:	781b      	ldrb	r3, [r3, #0]
   12d68:	2b0a      	cmp	r3, #10
   12d6a:	d004      	beq.n	12d76 <vCommandConsoleTask+0x8e>
   12d6c:	230c      	movs	r3, #12
   12d6e:	18fb      	adds	r3, r7, r3
   12d70:	781b      	ldrb	r3, [r3, #0]
   12d72:	2b0d      	cmp	r3, #13
   12d74:	d137      	bne.n	12de6 <vCommandConsoleTask+0xfe>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12d76:	4b86      	ldr	r3, [pc, #536]	; (12f90 <vCommandConsoleTask+0x2a8>)
   12d78:	0018      	movs	r0, r3
   12d7a:	4b7e      	ldr	r3, [pc, #504]	; (12f74 <vCommandConsoleTask+0x28c>)
   12d7c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12d7e:	4b85      	ldr	r3, [pc, #532]	; (12f94 <vCommandConsoleTask+0x2ac>)
   12d80:	2200      	movs	r2, #0
   12d82:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12d84:	4b84      	ldr	r3, [pc, #528]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12d86:	2200      	movs	r2, #0
   12d88:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12d8a:	4984      	ldr	r1, [pc, #528]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12d8c:	4b84      	ldr	r3, [pc, #528]	; (12fa0 <vCommandConsoleTask+0x2b8>)
   12d8e:	2231      	movs	r2, #49	; 0x31
   12d90:	0018      	movs	r0, r3
   12d92:	4b84      	ldr	r3, [pc, #528]	; (12fa4 <vCommandConsoleTask+0x2bc>)
   12d94:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12d96:	4b82      	ldr	r3, [pc, #520]	; (12fa0 <vCommandConsoleTask+0x2b8>)
   12d98:	2231      	movs	r2, #49	; 0x31
   12d9a:	2100      	movs	r1, #0
   12d9c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12d9e:	4982      	ldr	r1, [pc, #520]	; (12fa8 <vCommandConsoleTask+0x2c0>)
   12da0:	4b7e      	ldr	r3, [pc, #504]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12da2:	2264      	movs	r2, #100	; 0x64
   12da4:	0018      	movs	r0, r3
   12da6:	4b81      	ldr	r3, [pc, #516]	; (12fac <vCommandConsoleTask+0x2c4>)
   12da8:	4798      	blx	r3
   12daa:	0003      	movs	r3, r0
   12dac:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12dae:	4b7e      	ldr	r3, [pc, #504]	; (12fa8 <vCommandConsoleTask+0x2c0>)
   12db0:	2263      	movs	r2, #99	; 0x63
   12db2:	2100      	movs	r1, #0
   12db4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12db6:	4b7c      	ldr	r3, [pc, #496]	; (12fa8 <vCommandConsoleTask+0x2c0>)
   12db8:	0018      	movs	r0, r3
   12dba:	4b6e      	ldr	r3, [pc, #440]	; (12f74 <vCommandConsoleTask+0x28c>)
   12dbc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12dbe:	693b      	ldr	r3, [r7, #16]
   12dc0:	2b00      	cmp	r3, #0
   12dc2:	d1ec      	bne.n	12d9e <vCommandConsoleTask+0xb6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12dc4:	2317      	movs	r3, #23
   12dc6:	18fb      	adds	r3, r7, r3
   12dc8:	2200      	movs	r2, #0
   12dca:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12dcc:	4b73      	ldr	r3, [pc, #460]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12dce:	2232      	movs	r2, #50	; 0x32
   12dd0:	2100      	movs	r1, #0
   12dd2:	0018      	movs	r0, r3
   12dd4:	4b76      	ldr	r3, [pc, #472]	; (12fb0 <vCommandConsoleTask+0x2c8>)
   12dd6:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12dd8:	4b73      	ldr	r3, [pc, #460]	; (12fa8 <vCommandConsoleTask+0x2c0>)
   12dda:	2264      	movs	r2, #100	; 0x64
   12ddc:	2100      	movs	r1, #0
   12dde:	0018      	movs	r0, r3
   12de0:	4b73      	ldr	r3, [pc, #460]	; (12fb0 <vCommandConsoleTask+0x2c8>)
   12de2:	4798      	blx	r3
   12de4:	e0b5      	b.n	12f52 <vCommandConsoleTask+0x26a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12de6:	4b6b      	ldr	r3, [pc, #428]	; (12f94 <vCommandConsoleTask+0x2ac>)
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d059      	beq.n	12ea2 <vCommandConsoleTask+0x1ba>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12dee:	4b6a      	ldr	r3, [pc, #424]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12df0:	781b      	ldrb	r3, [r3, #0]
   12df2:	2b03      	cmp	r3, #3
   12df4:	d80c      	bhi.n	12e10 <vCommandConsoleTask+0x128>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12df6:	4b68      	ldr	r3, [pc, #416]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12df8:	781b      	ldrb	r3, [r3, #0]
   12dfa:	1c5a      	adds	r2, r3, #1
   12dfc:	b2d1      	uxtb	r1, r2
   12dfe:	4a66      	ldr	r2, [pc, #408]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12e00:	7011      	strb	r1, [r2, #0]
   12e02:	001a      	movs	r2, r3
   12e04:	230c      	movs	r3, #12
   12e06:	18fb      	adds	r3, r7, r3
   12e08:	7819      	ldrb	r1, [r3, #0]
   12e0a:	4b6a      	ldr	r3, [pc, #424]	; (12fb4 <vCommandConsoleTask+0x2cc>)
   12e0c:	5499      	strb	r1, [r3, r2]
   12e0e:	e005      	b.n	12e1c <vCommandConsoleTask+0x134>
                } else {
                    isEscapeCode = false;
   12e10:	4b60      	ldr	r3, [pc, #384]	; (12f94 <vCommandConsoleTask+0x2ac>)
   12e12:	2200      	movs	r2, #0
   12e14:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12e16:	4b60      	ldr	r3, [pc, #384]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12e18:	2200      	movs	r2, #0
   12e1a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12e1c:	4b5e      	ldr	r3, [pc, #376]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12e1e:	781b      	ldrb	r3, [r3, #0]
   12e20:	2b01      	cmp	r3, #1
   12e22:	d999      	bls.n	12d58 <vCommandConsoleTask+0x70>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12e24:	4a64      	ldr	r2, [pc, #400]	; (12fb8 <vCommandConsoleTask+0x2d0>)
   12e26:	4b63      	ldr	r3, [pc, #396]	; (12fb4 <vCommandConsoleTask+0x2cc>)
   12e28:	0011      	movs	r1, r2
   12e2a:	0018      	movs	r0, r3
   12e2c:	4b63      	ldr	r3, [pc, #396]	; (12fbc <vCommandConsoleTask+0x2d4>)
   12e2e:	4798      	blx	r3
   12e30:	1e03      	subs	r3, r0, #0
   12e32:	d02f      	beq.n	12e94 <vCommandConsoleTask+0x1ac>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12e34:	4962      	ldr	r1, [pc, #392]	; (12fc0 <vCommandConsoleTask+0x2d8>)
   12e36:	4b59      	ldr	r3, [pc, #356]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e38:	221b      	movs	r2, #27
   12e3a:	0018      	movs	r0, r3
   12e3c:	4b61      	ldr	r3, [pc, #388]	; (12fc4 <vCommandConsoleTask+0x2dc>)
   12e3e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12e40:	4b56      	ldr	r3, [pc, #344]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e42:	0018      	movs	r0, r3
   12e44:	4b4b      	ldr	r3, [pc, #300]	; (12f74 <vCommandConsoleTask+0x28c>)
   12e46:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12e48:	2317      	movs	r3, #23
   12e4a:	18fb      	adds	r3, r7, r3
   12e4c:	2200      	movs	r2, #0
   12e4e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12e50:	4b52      	ldr	r3, [pc, #328]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e52:	2232      	movs	r2, #50	; 0x32
   12e54:	2100      	movs	r1, #0
   12e56:	0018      	movs	r0, r3
   12e58:	4b55      	ldr	r3, [pc, #340]	; (12fb0 <vCommandConsoleTask+0x2c8>)
   12e5a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12e5c:	4950      	ldr	r1, [pc, #320]	; (12fa0 <vCommandConsoleTask+0x2b8>)
   12e5e:	4b4f      	ldr	r3, [pc, #316]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e60:	2231      	movs	r2, #49	; 0x31
   12e62:	0018      	movs	r0, r3
   12e64:	4b4f      	ldr	r3, [pc, #316]	; (12fa4 <vCommandConsoleTask+0x2bc>)
   12e66:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12e68:	4b4c      	ldr	r3, [pc, #304]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b56      	ldr	r3, [pc, #344]	; (12fc8 <vCommandConsoleTask+0x2e0>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	2b30      	cmp	r3, #48	; 0x30
   12e74:	d806      	bhi.n	12e84 <vCommandConsoleTask+0x19c>
   12e76:	4b4a      	ldr	r3, [pc, #296]	; (12fa0 <vCommandConsoleTask+0x2b8>)
   12e78:	0018      	movs	r0, r3
   12e7a:	4b53      	ldr	r3, [pc, #332]	; (12fc8 <vCommandConsoleTask+0x2e0>)
   12e7c:	4798      	blx	r3
   12e7e:	0003      	movs	r3, r0
   12e80:	b2da      	uxtb	r2, r3
   12e82:	e000      	b.n	12e86 <vCommandConsoleTask+0x19e>
   12e84:	2231      	movs	r2, #49	; 0x31
   12e86:	2317      	movs	r3, #23
   12e88:	18fb      	adds	r3, r7, r3
   12e8a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   12e8c:	4b43      	ldr	r3, [pc, #268]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12e8e:	0018      	movs	r0, r3
   12e90:	4b38      	ldr	r3, [pc, #224]	; (12f74 <vCommandConsoleTask+0x28c>)
   12e92:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   12e94:	4b3f      	ldr	r3, [pc, #252]	; (12f94 <vCommandConsoleTask+0x2ac>)
   12e96:	2200      	movs	r2, #0
   12e98:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12e9a:	4b3f      	ldr	r3, [pc, #252]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12e9c:	2200      	movs	r2, #0
   12e9e:	701a      	strb	r2, [r3, #0]
   12ea0:	e75a      	b.n	12d58 <vCommandConsoleTask+0x70>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   12ea2:	230c      	movs	r3, #12
   12ea4:	18fb      	adds	r3, r7, r3
   12ea6:	781b      	ldrb	r3, [r3, #0]
   12ea8:	2b0d      	cmp	r3, #13
   12eaa:	d100      	bne.n	12eae <vCommandConsoleTask+0x1c6>
   12eac:	e754      	b.n	12d58 <vCommandConsoleTask+0x70>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12eae:	230c      	movs	r3, #12
   12eb0:	18fb      	adds	r3, r7, r3
   12eb2:	781b      	ldrb	r3, [r3, #0]
   12eb4:	2b08      	cmp	r3, #8
   12eb6:	d004      	beq.n	12ec2 <vCommandConsoleTask+0x1da>
   12eb8:	230c      	movs	r3, #12
   12eba:	18fb      	adds	r3, r7, r3
   12ebc:	781b      	ldrb	r3, [r3, #0]
   12ebe:	2b7f      	cmp	r3, #127	; 0x7f
   12ec0:	d11c      	bne.n	12efc <vCommandConsoleTask+0x214>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12ec2:	2308      	movs	r3, #8
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	4a41      	ldr	r2, [pc, #260]	; (12fcc <vCommandConsoleTask+0x2e4>)
   12ec8:	6812      	ldr	r2, [r2, #0]
   12eca:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   12ecc:	2308      	movs	r3, #8
   12ece:	18fb      	adds	r3, r7, r3
   12ed0:	0018      	movs	r0, r3
   12ed2:	4b28      	ldr	r3, [pc, #160]	; (12f74 <vCommandConsoleTask+0x28c>)
   12ed4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   12ed6:	2317      	movs	r3, #23
   12ed8:	18fb      	adds	r3, r7, r3
   12eda:	781b      	ldrb	r3, [r3, #0]
   12edc:	2b00      	cmp	r3, #0
   12ede:	d037      	beq.n	12f50 <vCommandConsoleTask+0x268>
                    cInputIndex--;
   12ee0:	2317      	movs	r3, #23
   12ee2:	18fb      	adds	r3, r7, r3
   12ee4:	781a      	ldrb	r2, [r3, #0]
   12ee6:	2317      	movs	r3, #23
   12ee8:	18fb      	adds	r3, r7, r3
   12eea:	3a01      	subs	r2, #1
   12eec:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   12eee:	2317      	movs	r3, #23
   12ef0:	18fb      	adds	r3, r7, r3
   12ef2:	781b      	ldrb	r3, [r3, #0]
   12ef4:	4a29      	ldr	r2, [pc, #164]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12ef6:	2100      	movs	r1, #0
   12ef8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12efa:	e029      	b.n	12f50 <vCommandConsoleTask+0x268>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   12efc:	230c      	movs	r3, #12
   12efe:	18fb      	adds	r3, r7, r3
   12f00:	781b      	ldrb	r3, [r3, #0]
   12f02:	2b1b      	cmp	r3, #27
   12f04:	d106      	bne.n	12f14 <vCommandConsoleTask+0x22c>
                isEscapeCode = true;  // Next characters will be code arguments
   12f06:	4b23      	ldr	r3, [pc, #140]	; (12f94 <vCommandConsoleTask+0x2ac>)
   12f08:	2201      	movs	r2, #1
   12f0a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   12f0c:	4b22      	ldr	r3, [pc, #136]	; (12f98 <vCommandConsoleTask+0x2b0>)
   12f0e:	2200      	movs	r2, #0
   12f10:	701a      	strb	r2, [r3, #0]
   12f12:	e721      	b.n	12d58 <vCommandConsoleTask+0x70>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   12f14:	2317      	movs	r3, #23
   12f16:	18fb      	adds	r3, r7, r3
   12f18:	781b      	ldrb	r3, [r3, #0]
   12f1a:	2b31      	cmp	r3, #49	; 0x31
   12f1c:	d80e      	bhi.n	12f3c <vCommandConsoleTask+0x254>
                    pcInputString[cInputIndex] = cRxedChar[0];
   12f1e:	2317      	movs	r3, #23
   12f20:	18fb      	adds	r3, r7, r3
   12f22:	781b      	ldrb	r3, [r3, #0]
   12f24:	220c      	movs	r2, #12
   12f26:	18ba      	adds	r2, r7, r2
   12f28:	7811      	ldrb	r1, [r2, #0]
   12f2a:	4a1c      	ldr	r2, [pc, #112]	; (12f9c <vCommandConsoleTask+0x2b4>)
   12f2c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   12f2e:	2317      	movs	r3, #23
   12f30:	18fb      	adds	r3, r7, r3
   12f32:	781a      	ldrb	r2, [r3, #0]
   12f34:	2317      	movs	r3, #23
   12f36:	18fb      	adds	r3, r7, r3
   12f38:	3201      	adds	r2, #1
   12f3a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   12f3c:	230c      	movs	r3, #12
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	2200      	movs	r2, #0
   12f42:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   12f44:	230c      	movs	r3, #12
   12f46:	18fb      	adds	r3, r7, r3
   12f48:	0018      	movs	r0, r3
   12f4a:	4b0a      	ldr	r3, [pc, #40]	; (12f74 <vCommandConsoleTask+0x28c>)
   12f4c:	4798      	blx	r3
   12f4e:	e703      	b.n	12d58 <vCommandConsoleTask+0x70>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12f50:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   12f52:	e701      	b.n	12d58 <vCommandConsoleTask+0x70>
   12f54:	0003380c 	.word	0x0003380c
   12f58:	00015a95 	.word	0x00015a95
   12f5c:	0003385c 	.word	0x0003385c
   12f60:	0003381c 	.word	0x0003381c
   12f64:	0003382c 	.word	0x0003382c
   12f68:	0003383c 	.word	0x0003383c
   12f6c:	0003384c 	.word	0x0003384c
   12f70:	000335e0 	.word	0x000335e0
   12f74:	0001b9b9 	.word	0x0001b9b9
   12f78:	00018059 	.word	0x00018059
   12f7c:	200041e0 	.word	0x200041e0
   12f80:	0003373c 	.word	0x0003373c
   12f84:	0001baa5 	.word	0x0001baa5
   12f88:	00019e45 	.word	0x00019e45
   12f8c:	00012fd1 	.word	0x00012fd1
   12f90:	0003375c 	.word	0x0003375c
   12f94:	20000374 	.word	0x20000374
   12f98:	20000375 	.word	0x20000375
   12f9c:	200003ac 	.word	0x200003ac
   12fa0:	20000378 	.word	0x20000378
   12fa4:	000325eb 	.word	0x000325eb
   12fa8:	200003e0 	.word	0x200003e0
   12fac:	00015b05 	.word	0x00015b05
   12fb0:	00032203 	.word	0x00032203
   12fb4:	20000444 	.word	0x20000444
   12fb8:	00033760 	.word	0x00033760
   12fbc:	00032505 	.word	0x00032505
   12fc0:	00033764 	.word	0x00033764
   12fc4:	000324c1 	.word	0x000324c1
   12fc8:	000325bb 	.word	0x000325bb
   12fcc:	0003376c 	.word	0x0003376c

00012fd0 <FreeRTOS_read>:
* @details		STUDENTS TO COMPLETE.
* @note
*****************************************************************************/
extern cbuf_handle_t cbufRx;   ///< Circular buffer handler for receiving characters from the Serial Interface
static void FreeRTOS_read(char *character)
{
   12fd0:	b580      	push	{r7, lr}
   12fd2:	b082      	sub	sp, #8
   12fd4:	af00      	add	r7, sp, #0
   12fd6:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY) == pdTRUE)
   12fd8:	4b09      	ldr	r3, [pc, #36]	; (13000 <FreeRTOS_read+0x30>)
   12fda:	681a      	ldr	r2, [r3, #0]
   12fdc:	2301      	movs	r3, #1
   12fde:	425b      	negs	r3, r3
   12fe0:	0019      	movs	r1, r3
   12fe2:	0010      	movs	r0, r2
   12fe4:	4b07      	ldr	r3, [pc, #28]	; (13004 <FreeRTOS_read+0x34>)
   12fe6:	4798      	blx	r3
   12fe8:	0003      	movs	r3, r0
   12fea:	2b01      	cmp	r3, #1
   12fec:	d103      	bne.n	12ff6 <FreeRTOS_read+0x26>
		SerialConsoleReadCharacter(character);
   12fee:	687b      	ldr	r3, [r7, #4]
   12ff0:	0018      	movs	r0, r3
   12ff2:	4b05      	ldr	r3, [pc, #20]	; (13008 <FreeRTOS_read+0x38>)
   12ff4:	4798      	blx	r3
}
   12ff6:	46c0      	nop			; (mov r8, r8)
   12ff8:	46bd      	mov	sp, r7
   12ffa:	b002      	add	sp, #8
   12ffc:	bd80      	pop	{r7, pc}
   12ffe:	46c0      	nop			; (mov r8, r8)
   13000:	200041e0 	.word	0x200041e0
   13004:	00019011 	.word	0x00019011
   13008:	0001ba55 	.word	0x0001ba55

0001300c <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   1300c:	b580      	push	{r7, lr}
   1300e:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13010:	4b0a      	ldr	r3, [pc, #40]	; (1303c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13012:	2200      	movs	r2, #0
   13014:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13016:	4b0a      	ldr	r3, [pc, #40]	; (13040 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13018:	681b      	ldr	r3, [r3, #0]
   1301a:	4a08      	ldr	r2, [pc, #32]	; (1303c <CliCharReadySemaphoreGiveFromISR+0x30>)
   1301c:	0011      	movs	r1, r2
   1301e:	0018      	movs	r0, r3
   13020:	4b08      	ldr	r3, [pc, #32]	; (13044 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13022:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13026:	681b      	ldr	r3, [r3, #0]
   13028:	2b00      	cmp	r3, #0
   1302a:	d003      	beq.n	13034 <CliCharReadySemaphoreGiveFromISR+0x28>
   1302c:	4b06      	ldr	r3, [pc, #24]	; (13048 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   1302e:	2280      	movs	r2, #128	; 0x80
   13030:	0552      	lsls	r2, r2, #21
   13032:	601a      	str	r2, [r3, #0]
}
   13034:	46c0      	nop			; (mov r8, r8)
   13036:	46bd      	mov	sp, r7
   13038:	bd80      	pop	{r7, pc}
   1303a:	46c0      	nop			; (mov r8, r8)
   1303c:	20000448 	.word	0x20000448
   13040:	200041e0 	.word	0x200041e0
   13044:	00018989 	.word	0x00018989
   13048:	e000ed04 	.word	0xe000ed04

0001304c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1304c:	b590      	push	{r4, r7, lr}
   1304e:	b087      	sub	sp, #28
   13050:	af00      	add	r7, sp, #0
   13052:	60f8      	str	r0, [r7, #12]
   13054:	60b9      	str	r1, [r7, #8]
   13056:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13058:	2317      	movs	r3, #23
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	221b      	movs	r2, #27
   1305e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13060:	2317      	movs	r3, #23
   13062:	18fb      	adds	r3, r7, r3
   13064:	781b      	ldrb	r3, [r3, #0]
   13066:	4a08      	ldr	r2, [pc, #32]	; (13088 <xCliClearTerminalScreen+0x3c>)
   13068:	4808      	ldr	r0, [pc, #32]	; (1308c <xCliClearTerminalScreen+0x40>)
   1306a:	210f      	movs	r1, #15
   1306c:	4c08      	ldr	r4, [pc, #32]	; (13090 <xCliClearTerminalScreen+0x44>)
   1306e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13070:	4a06      	ldr	r2, [pc, #24]	; (1308c <xCliClearTerminalScreen+0x40>)
   13072:	68b9      	ldr	r1, [r7, #8]
   13074:	68fb      	ldr	r3, [r7, #12]
   13076:	0018      	movs	r0, r3
   13078:	4b05      	ldr	r3, [pc, #20]	; (13090 <xCliClearTerminalScreen+0x44>)
   1307a:	4798      	blx	r3
    return pdFALSE;
   1307c:	2300      	movs	r3, #0
}
   1307e:	0018      	movs	r0, r3
   13080:	46bd      	mov	sp, r7
   13082:	b007      	add	sp, #28
   13084:	bd90      	pop	{r4, r7, pc}
   13086:	46c0      	nop			; (mov r8, r8)
   13088:	00033770 	.word	0x00033770
   1308c:	20000364 	.word	0x20000364
   13090:	0003245d 	.word	0x0003245d

00013094 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13094:	b580      	push	{r7, lr}
   13096:	b084      	sub	sp, #16
   13098:	af00      	add	r7, sp, #0
   1309a:	60f8      	str	r0, [r7, #12]
   1309c:	60b9      	str	r1, [r7, #8]
   1309e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   130a0:	2002      	movs	r0, #2
   130a2:	4b07      	ldr	r3, [pc, #28]	; (130c0 <CLI_OTAU+0x2c>)
   130a4:	4798      	blx	r3

    vTaskDelay(8000);
   130a6:	23fa      	movs	r3, #250	; 0xfa
   130a8:	015b      	lsls	r3, r3, #5
   130aa:	0018      	movs	r0, r3
   130ac:	4b05      	ldr	r3, [pc, #20]	; (130c4 <CLI_OTAU+0x30>)
   130ae:	4798      	blx	r3
    system_reset();
   130b0:	4b05      	ldr	r3, [pc, #20]	; (130c8 <CLI_OTAU+0x34>)
   130b2:	4798      	blx	r3

    return pdFALSE;
   130b4:	2300      	movs	r3, #0
}
   130b6:	0018      	movs	r0, r3
   130b8:	46bd      	mov	sp, r7
   130ba:	b004      	add	sp, #16
   130bc:	bd80      	pop	{r7, pc}
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	00015159 	.word	0x00015159
   130c4:	00019d65 	.word	0x00019d65
   130c8:	00012cd5 	.word	0x00012cd5

000130cc <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   130cc:	b580      	push	{r7, lr}
   130ce:	b084      	sub	sp, #16
   130d0:	af00      	add	r7, sp, #0
   130d2:	60f8      	str	r0, [r7, #12]
   130d4:	60b9      	str	r1, [r7, #8]
   130d6:	607a      	str	r2, [r7, #4]
    system_reset();
   130d8:	4b03      	ldr	r3, [pc, #12]	; (130e8 <CLI_ResetDevice+0x1c>)
   130da:	4798      	blx	r3
    return pdFALSE;
   130dc:	2300      	movs	r3, #0
}
   130de:	0018      	movs	r0, r3
   130e0:	46bd      	mov	sp, r7
   130e2:	b004      	add	sp, #16
   130e4:	bd80      	pop	{r7, pc}
   130e6:	46c0      	nop			; (mov r8, r8)
   130e8:	00012cd5 	.word	0x00012cd5

000130ec <CLI_version>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   130ec:	b580      	push	{r7, lr}
   130ee:	b084      	sub	sp, #16
   130f0:	af00      	add	r7, sp, #0
   130f2:	60f8      	str	r0, [r7, #12]
   130f4:	60b9      	str	r1, [r7, #8]
   130f6:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("\r\nVersion Number: ");
   130f8:	4b08      	ldr	r3, [pc, #32]	; (1311c <CLI_version+0x30>)
   130fa:	0018      	movs	r0, r3
   130fc:	4b08      	ldr	r3, [pc, #32]	; (13120 <CLI_version+0x34>)
   130fe:	4798      	blx	r3
	SerialConsoleWriteString(VERSION_NUMBER);
   13100:	4b08      	ldr	r3, [pc, #32]	; (13124 <CLI_version+0x38>)
   13102:	0018      	movs	r0, r3
   13104:	4b06      	ldr	r3, [pc, #24]	; (13120 <CLI_version+0x34>)
   13106:	4798      	blx	r3
	SerialConsoleWriteString("\r\n\r\n");
   13108:	4b07      	ldr	r3, [pc, #28]	; (13128 <CLI_version+0x3c>)
   1310a:	0018      	movs	r0, r3
   1310c:	4b04      	ldr	r3, [pc, #16]	; (13120 <CLI_version+0x34>)
   1310e:	4798      	blx	r3
	return pdFALSE;
   13110:	2300      	movs	r3, #0
}
   13112:	0018      	movs	r0, r3
   13114:	46bd      	mov	sp, r7
   13116:	b004      	add	sp, #16
   13118:	bd80      	pop	{r7, pc}
   1311a:	46c0      	nop			; (mov r8, r8)
   1311c:	00033778 	.word	0x00033778
   13120:	0001b9b9 	.word	0x0001b9b9
   13124:	0003378c 	.word	0x0003378c
   13128:	00033798 	.word	0x00033798

0001312c <CLI_ticks>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1312c:	b580      	push	{r7, lr}
   1312e:	b086      	sub	sp, #24
   13130:	af00      	add	r7, sp, #0
   13132:	60f8      	str	r0, [r7, #12]
   13134:	60b9      	str	r1, [r7, #8]
   13136:	607a      	str	r2, [r7, #4]
	TickType_t ticks;
	ticks = xTaskGetTickCount();
   13138:	4b0b      	ldr	r3, [pc, #44]	; (13168 <CLI_ticks+0x3c>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	617b      	str	r3, [r7, #20]
	SerialConsoleWriteString("\r\nTicks since start of scheduler: ");
   13140:	4b0a      	ldr	r3, [pc, #40]	; (1316c <CLI_ticks+0x40>)
   13142:	0018      	movs	r0, r3
   13144:	4b0a      	ldr	r3, [pc, #40]	; (13170 <CLI_ticks+0x44>)
   13146:	4798      	blx	r3
	sprintf(bufCli, "%lu\r\n", ticks);
   13148:	697a      	ldr	r2, [r7, #20]
   1314a:	490a      	ldr	r1, [pc, #40]	; (13174 <CLI_ticks+0x48>)
   1314c:	4b0a      	ldr	r3, [pc, #40]	; (13178 <CLI_ticks+0x4c>)
   1314e:	0018      	movs	r0, r3
   13150:	4b0a      	ldr	r3, [pc, #40]	; (1317c <CLI_ticks+0x50>)
   13152:	4798      	blx	r3
	SerialConsoleWriteString(bufCli);
   13154:	4b08      	ldr	r3, [pc, #32]	; (13178 <CLI_ticks+0x4c>)
   13156:	0018      	movs	r0, r3
   13158:	4b05      	ldr	r3, [pc, #20]	; (13170 <CLI_ticks+0x44>)
   1315a:	4798      	blx	r3
	return pdFALSE;
   1315c:	2300      	movs	r3, #0
}
   1315e:	0018      	movs	r0, r3
   13160:	46bd      	mov	sp, r7
   13162:	b006      	add	sp, #24
   13164:	bd80      	pop	{r7, pc}
   13166:	46c0      	nop			; (mov r8, r8)
   13168:	0001a1ad 	.word	0x0001a1ad
   1316c:	000337a0 	.word	0x000337a0
   13170:	0001b9b9 	.word	0x0001b9b9
   13174:	000337c4 	.word	0x000337c4
   13178:	20000364 	.word	0x20000364
   1317c:	000324c1 	.word	0x000324c1

00013180 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13180:	b590      	push	{r4, r7, lr}
   13182:	b08f      	sub	sp, #60	; 0x3c
   13184:	af00      	add	r7, sp, #0
   13186:	60f8      	str	r0, [r7, #12]
   13188:	60b9      	str	r1, [r7, #8]
   1318a:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
   1318c:	2318      	movs	r3, #24
   1318e:	18fb      	adds	r3, r7, r3
   13190:	2200      	movs	r2, #0
   13192:	701a      	strb	r2, [r3, #0]
   13194:	2318      	movs	r3, #24
   13196:	18fb      	adds	r3, r7, r3
   13198:	2200      	movs	r2, #0
   1319a:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
   1319c:	2318      	movs	r3, #24
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	2200      	movs	r2, #0
   131a2:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
   131a4:	2318      	movs	r3, #24
   131a6:	18fb      	adds	r3, r7, r3
   131a8:	2200      	movs	r2, #0
   131aa:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
   131ac:	231c      	movs	r3, #28
   131ae:	18fb      	adds	r3, r7, r3
   131b0:	2200      	movs	r2, #0
   131b2:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
   131b4:	231c      	movs	r3, #28
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	2214      	movs	r2, #20
   131ba:	18ba      	adds	r2, r7, r2
   131bc:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
   131be:	231c      	movs	r3, #28
   131c0:	18fb      	adds	r3, r7, r3
   131c2:	2201      	movs	r2, #1
   131c4:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   131c6:	231c      	movs	r3, #28
   131c8:	18fb      	adds	r3, r7, r3
   131ca:	2218      	movs	r2, #24
   131cc:	18ba      	adds	r2, r7, r2
   131ce:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
   131d0:	231c      	movs	r3, #28
   131d2:	18fb      	adds	r3, r7, r3
   131d4:	2201      	movs	r2, #1
   131d6:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   131d8:	4b2c      	ldr	r3, [pc, #176]	; (1328c <CLI_i2cScan+0x10c>)
   131da:	0018      	movs	r0, r3
   131dc:	4b2c      	ldr	r3, [pc, #176]	; (13290 <CLI_i2cScan+0x110>)
   131de:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   131e0:	2300      	movs	r3, #0
   131e2:	637b      	str	r3, [r7, #52]	; 0x34
   131e4:	e046      	b.n	13274 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   131e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131e8:	4a2a      	ldr	r2, [pc, #168]	; (13294 <CLI_i2cScan+0x114>)
   131ea:	482b      	ldr	r0, [pc, #172]	; (13298 <CLI_i2cScan+0x118>)
   131ec:	210f      	movs	r1, #15
   131ee:	4c2b      	ldr	r4, [pc, #172]	; (1329c <CLI_i2cScan+0x11c>)
   131f0:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
   131f2:	4b29      	ldr	r3, [pc, #164]	; (13298 <CLI_i2cScan+0x118>)
   131f4:	0018      	movs	r0, r3
   131f6:	4b26      	ldr	r3, [pc, #152]	; (13290 <CLI_i2cScan+0x110>)
   131f8:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
   131fa:	2300      	movs	r3, #0
   131fc:	633b      	str	r3, [r7, #48]	; 0x30
   131fe:	e02f      	b.n	13260 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
   13200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13202:	b2da      	uxtb	r2, r3
   13204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13206:	b2db      	uxtb	r3, r3
   13208:	18d3      	adds	r3, r2, r3
   1320a:	b2db      	uxtb	r3, r3
   1320c:	18db      	adds	r3, r3, r3
   1320e:	b2da      	uxtb	r2, r3
   13210:	231c      	movs	r3, #28
   13212:	18fb      	adds	r3, r7, r3
   13214:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
   13216:	231c      	movs	r3, #28
   13218:	18fb      	adds	r3, r7, r3
   1321a:	2164      	movs	r1, #100	; 0x64
   1321c:	0018      	movs	r0, r3
   1321e:	4b20      	ldr	r3, [pc, #128]	; (132a0 <CLI_i2cScan+0x120>)
   13220:	4798      	blx	r3
   13222:	0003      	movs	r3, r0
   13224:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
   13226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13228:	2b00      	cmp	r3, #0
   1322a:	d10c      	bne.n	13246 <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
   1322c:	231c      	movs	r3, #28
   1322e:	18fb      	adds	r3, r7, r3
   13230:	781b      	ldrb	r3, [r3, #0]
   13232:	4a18      	ldr	r2, [pc, #96]	; (13294 <CLI_i2cScan+0x114>)
   13234:	4818      	ldr	r0, [pc, #96]	; (13298 <CLI_i2cScan+0x118>)
   13236:	210f      	movs	r1, #15
   13238:	4c18      	ldr	r4, [pc, #96]	; (1329c <CLI_i2cScan+0x11c>)
   1323a:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1323c:	4b16      	ldr	r3, [pc, #88]	; (13298 <CLI_i2cScan+0x118>)
   1323e:	0018      	movs	r0, r3
   13240:	4b13      	ldr	r3, [pc, #76]	; (13290 <CLI_i2cScan+0x110>)
   13242:	4798      	blx	r3
   13244:	e009      	b.n	1325a <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13246:	4b14      	ldr	r3, [pc, #80]	; (13298 <CLI_i2cScan+0x118>)
   13248:	4a16      	ldr	r2, [pc, #88]	; (132a4 <CLI_i2cScan+0x124>)
   1324a:	8811      	ldrh	r1, [r2, #0]
   1324c:	8019      	strh	r1, [r3, #0]
   1324e:	7892      	ldrb	r2, [r2, #2]
   13250:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
   13252:	4b11      	ldr	r3, [pc, #68]	; (13298 <CLI_i2cScan+0x118>)
   13254:	0018      	movs	r0, r3
   13256:	4b0e      	ldr	r3, [pc, #56]	; (13290 <CLI_i2cScan+0x110>)
   13258:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
   1325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1325c:	3301      	adds	r3, #1
   1325e:	633b      	str	r3, [r7, #48]	; 0x30
   13260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13262:	2b0f      	cmp	r3, #15
   13264:	ddcc      	ble.n	13200 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
   13266:	4b10      	ldr	r3, [pc, #64]	; (132a8 <CLI_i2cScan+0x128>)
   13268:	0018      	movs	r0, r3
   1326a:	4b09      	ldr	r3, [pc, #36]	; (13290 <CLI_i2cScan+0x110>)
   1326c:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   1326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13270:	3310      	adds	r3, #16
   13272:	637b      	str	r3, [r7, #52]	; 0x34
   13274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13276:	2b7f      	cmp	r3, #127	; 0x7f
   13278:	ddb5      	ble.n	131e6 <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
   1327a:	4b0b      	ldr	r3, [pc, #44]	; (132a8 <CLI_i2cScan+0x128>)
   1327c:	0018      	movs	r0, r3
   1327e:	4b04      	ldr	r3, [pc, #16]	; (13290 <CLI_i2cScan+0x110>)
   13280:	4798      	blx	r3
    return pdFALSE;
   13282:	2300      	movs	r3, #0
}
   13284:	0018      	movs	r0, r3
   13286:	46bd      	mov	sp, r7
   13288:	b00f      	add	sp, #60	; 0x3c
   1328a:	bd90      	pop	{r4, r7, pc}
   1328c:	000337cc 	.word	0x000337cc
   13290:	0001b9b9 	.word	0x0001b9b9
   13294:	00033800 	.word	0x00033800
   13298:	20000364 	.word	0x20000364
   1329c:	0003245d 	.word	0x0003245d
   132a0:	00013829 	.word	0x00013829
   132a4:	00033808 	.word	0x00033808
   132a8:	0003375c 	.word	0x0003375c

000132ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   132ac:	b580      	push	{r7, lr}
   132ae:	b082      	sub	sp, #8
   132b0:	af00      	add	r7, sp, #0
   132b2:	0002      	movs	r2, r0
   132b4:	1dfb      	adds	r3, r7, #7
   132b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   132b8:	4b06      	ldr	r3, [pc, #24]	; (132d4 <system_interrupt_enable+0x28>)
   132ba:	1dfa      	adds	r2, r7, #7
   132bc:	7812      	ldrb	r2, [r2, #0]
   132be:	0011      	movs	r1, r2
   132c0:	221f      	movs	r2, #31
   132c2:	400a      	ands	r2, r1
   132c4:	2101      	movs	r1, #1
   132c6:	4091      	lsls	r1, r2
   132c8:	000a      	movs	r2, r1
   132ca:	601a      	str	r2, [r3, #0]
}
   132cc:	46c0      	nop			; (mov r8, r8)
   132ce:	46bd      	mov	sp, r7
   132d0:	b002      	add	sp, #8
   132d2:	bd80      	pop	{r7, pc}
   132d4:	e000e100 	.word	0xe000e100

000132d8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   132d8:	b580      	push	{r7, lr}
   132da:	b084      	sub	sp, #16
   132dc:	af00      	add	r7, sp, #0
   132de:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   132e0:	687b      	ldr	r3, [r7, #4]
   132e2:	681b      	ldr	r3, [r3, #0]
   132e4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   132e6:	68fb      	ldr	r3, [r7, #12]
   132e8:	69db      	ldr	r3, [r3, #28]
   132ea:	2207      	movs	r2, #7
   132ec:	4013      	ands	r3, r2
   132ee:	1e5a      	subs	r2, r3, #1
   132f0:	4193      	sbcs	r3, r2
   132f2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   132f4:	0018      	movs	r0, r3
   132f6:	46bd      	mov	sp, r7
   132f8:	b004      	add	sp, #16
   132fa:	bd80      	pop	{r7, pc}

000132fc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   132fc:	b580      	push	{r7, lr}
   132fe:	b082      	sub	sp, #8
   13300:	af00      	add	r7, sp, #0
   13302:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   13304:	46c0      	nop			; (mov r8, r8)
   13306:	687b      	ldr	r3, [r7, #4]
   13308:	0018      	movs	r0, r3
   1330a:	4b04      	ldr	r3, [pc, #16]	; (1331c <_i2c_master_wait_for_sync+0x20>)
   1330c:	4798      	blx	r3
   1330e:	1e03      	subs	r3, r0, #0
   13310:	d1f9      	bne.n	13306 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   13312:	46c0      	nop			; (mov r8, r8)
   13314:	46bd      	mov	sp, r7
   13316:	b002      	add	sp, #8
   13318:	bd80      	pop	{r7, pc}
   1331a:	46c0      	nop			; (mov r8, r8)
   1331c:	000132d9 	.word	0x000132d9

00013320 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13320:	b580      	push	{r7, lr}
   13322:	b082      	sub	sp, #8
   13324:	af00      	add	r7, sp, #0
   13326:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13328:	687b      	ldr	r3, [r7, #4]
   1332a:	2264      	movs	r2, #100	; 0x64
   1332c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1332e:	687b      	ldr	r3, [r7, #4]
   13330:	4a1b      	ldr	r2, [pc, #108]	; (133a0 <i2c_master_get_config_defaults+0x80>)
   13332:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13334:	687b      	ldr	r3, [r7, #4]
   13336:	2200      	movs	r2, #0
   13338:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	2200      	movs	r2, #0
   1333e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	2200      	movs	r2, #0
   13344:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13346:	687b      	ldr	r3, [r7, #4]
   13348:	2280      	movs	r2, #128	; 0x80
   1334a:	0392      	lsls	r2, r2, #14
   1334c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1334e:	687b      	ldr	r3, [r7, #4]
   13350:	2201      	movs	r2, #1
   13352:	4252      	negs	r2, r2
   13354:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	2201      	movs	r2, #1
   1335a:	4252      	negs	r2, r2
   1335c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1335e:	687b      	ldr	r3, [r7, #4]
   13360:	2200      	movs	r2, #0
   13362:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13364:	687b      	ldr	r3, [r7, #4]
   13366:	2200      	movs	r2, #0
   13368:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1336a:	687b      	ldr	r3, [r7, #4]
   1336c:	2224      	movs	r2, #36	; 0x24
   1336e:	2100      	movs	r1, #0
   13370:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	2200      	movs	r2, #0
   13376:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13378:	687b      	ldr	r3, [r7, #4]
   1337a:	222c      	movs	r2, #44	; 0x2c
   1337c:	2100      	movs	r1, #0
   1337e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13380:	687b      	ldr	r3, [r7, #4]
   13382:	222d      	movs	r2, #45	; 0x2d
   13384:	2100      	movs	r1, #0
   13386:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13388:	687b      	ldr	r3, [r7, #4]
   1338a:	222e      	movs	r2, #46	; 0x2e
   1338c:	2100      	movs	r1, #0
   1338e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13390:	687b      	ldr	r3, [r7, #4]
   13392:	22d7      	movs	r2, #215	; 0xd7
   13394:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13396:	46c0      	nop			; (mov r8, r8)
   13398:	46bd      	mov	sp, r7
   1339a:	b002      	add	sp, #8
   1339c:	bd80      	pop	{r7, pc}
   1339e:	46c0      	nop			; (mov r8, r8)
   133a0:	00000d48 	.word	0x00000d48

000133a4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   133a4:	b580      	push	{r7, lr}
   133a6:	b084      	sub	sp, #16
   133a8:	af00      	add	r7, sp, #0
   133aa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   133ac:	687b      	ldr	r3, [r7, #4]
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   133b2:	2300      	movs	r3, #0
   133b4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   133b6:	687b      	ldr	r3, [r7, #4]
   133b8:	0018      	movs	r0, r3
   133ba:	4b14      	ldr	r3, [pc, #80]	; (1340c <i2c_master_enable+0x68>)
   133bc:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   133be:	68bb      	ldr	r3, [r7, #8]
   133c0:	681b      	ldr	r3, [r3, #0]
   133c2:	2202      	movs	r2, #2
   133c4:	431a      	orrs	r2, r3
   133c6:	68bb      	ldr	r3, [r7, #8]
   133c8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   133ca:	687b      	ldr	r3, [r7, #4]
   133cc:	681b      	ldr	r3, [r3, #0]
   133ce:	0018      	movs	r0, r3
   133d0:	4b0f      	ldr	r3, [pc, #60]	; (13410 <i2c_master_enable+0x6c>)
   133d2:	4798      	blx	r3
   133d4:	0003      	movs	r3, r0
   133d6:	0018      	movs	r0, r3
   133d8:	4b0e      	ldr	r3, [pc, #56]	; (13414 <i2c_master_enable+0x70>)
   133da:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   133dc:	e00c      	b.n	133f8 <i2c_master_enable+0x54>
		timeout_counter++;
   133de:	68fb      	ldr	r3, [r7, #12]
   133e0:	3301      	adds	r3, #1
   133e2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   133e4:	687b      	ldr	r3, [r7, #4]
   133e6:	88db      	ldrh	r3, [r3, #6]
   133e8:	001a      	movs	r2, r3
   133ea:	68fb      	ldr	r3, [r7, #12]
   133ec:	429a      	cmp	r2, r3
   133ee:	d803      	bhi.n	133f8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   133f0:	68bb      	ldr	r3, [r7, #8]
   133f2:	2210      	movs	r2, #16
   133f4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   133f6:	e006      	b.n	13406 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   133f8:	68bb      	ldr	r3, [r7, #8]
   133fa:	8b5b      	ldrh	r3, [r3, #26]
   133fc:	b29b      	uxth	r3, r3
   133fe:	001a      	movs	r2, r3
   13400:	2310      	movs	r3, #16
   13402:	4013      	ands	r3, r2
   13404:	d0eb      	beq.n	133de <i2c_master_enable+0x3a>
		}
	}
}
   13406:	46bd      	mov	sp, r7
   13408:	b004      	add	sp, #16
   1340a:	bd80      	pop	{r7, pc}
   1340c:	000132fd 	.word	0x000132fd
   13410:	000252cd 	.word	0x000252cd
   13414:	000132ad 	.word	0x000132ad

00013418 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13418:	b580      	push	{r7, lr}
   1341a:	b082      	sub	sp, #8
   1341c:	af00      	add	r7, sp, #0
   1341e:	6078      	str	r0, [r7, #4]
   13420:	000a      	movs	r2, r1
   13422:	1cfb      	adds	r3, r7, #3
   13424:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13426:	687b      	ldr	r3, [r7, #4]
   13428:	7e5b      	ldrb	r3, [r3, #25]
   1342a:	b2db      	uxtb	r3, r3
   1342c:	b25a      	sxtb	r2, r3
   1342e:	1cfb      	adds	r3, r7, #3
   13430:	781b      	ldrb	r3, [r3, #0]
   13432:	2101      	movs	r1, #1
   13434:	4099      	lsls	r1, r3
   13436:	000b      	movs	r3, r1
   13438:	b25b      	sxtb	r3, r3
   1343a:	4313      	orrs	r3, r2
   1343c:	b25b      	sxtb	r3, r3
   1343e:	b2da      	uxtb	r2, r3
   13440:	687b      	ldr	r3, [r7, #4]
   13442:	765a      	strb	r2, [r3, #25]
}
   13444:	46c0      	nop			; (mov r8, r8)
   13446:	46bd      	mov	sp, r7
   13448:	b002      	add	sp, #8
   1344a:	bd80      	pop	{r7, pc}

0001344c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1344c:	b590      	push	{r4, r7, lr}
   1344e:	b091      	sub	sp, #68	; 0x44
   13450:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13452:	2300      	movs	r3, #0
   13454:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13456:	233a      	movs	r3, #58	; 0x3a
   13458:	18fb      	adds	r3, r7, r3
   1345a:	2200      	movs	r2, #0
   1345c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1345e:	1d3b      	adds	r3, r7, #4
   13460:	0018      	movs	r0, r3
   13462:	4b21      	ldr	r3, [pc, #132]	; (134e8 <I2cDriverConfigureSensorBus+0x9c>)
   13464:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13466:	1d3b      	adds	r3, r7, #4
   13468:	4a20      	ldr	r2, [pc, #128]	; (134ec <I2cDriverConfigureSensorBus+0xa0>)
   1346a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1346c:	1d3b      	adds	r3, r7, #4
   1346e:	4a20      	ldr	r2, [pc, #128]	; (134f0 <I2cDriverConfigureSensorBus+0xa4>)
   13470:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13472:	1d3b      	adds	r3, r7, #4
   13474:	22fa      	movs	r2, #250	; 0xfa
   13476:	0092      	lsls	r2, r2, #2
   13478:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1347a:	233b      	movs	r3, #59	; 0x3b
   1347c:	18fb      	adds	r3, r7, r3
   1347e:	2203      	movs	r2, #3
   13480:	701a      	strb	r2, [r3, #0]
   13482:	e01e      	b.n	134c2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13484:	233a      	movs	r3, #58	; 0x3a
   13486:	18fc      	adds	r4, r7, r3
   13488:	1d3a      	adds	r2, r7, #4
   1348a:	491a      	ldr	r1, [pc, #104]	; (134f4 <I2cDriverConfigureSensorBus+0xa8>)
   1348c:	4b1a      	ldr	r3, [pc, #104]	; (134f8 <I2cDriverConfigureSensorBus+0xac>)
   1348e:	0018      	movs	r0, r3
   13490:	4b1a      	ldr	r3, [pc, #104]	; (134fc <I2cDriverConfigureSensorBus+0xb0>)
   13492:	4798      	blx	r3
   13494:	0003      	movs	r3, r0
   13496:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13498:	233a      	movs	r3, #58	; 0x3a
   1349a:	18fb      	adds	r3, r7, r3
   1349c:	781b      	ldrb	r3, [r3, #0]
   1349e:	2b00      	cmp	r3, #0
   134a0:	d104      	bne.n	134ac <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   134a2:	233a      	movs	r3, #58	; 0x3a
   134a4:	18fb      	adds	r3, r7, r3
   134a6:	781b      	ldrb	r3, [r3, #0]
   134a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   134aa:	e00f      	b.n	134cc <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   134ac:	4b12      	ldr	r3, [pc, #72]	; (134f8 <I2cDriverConfigureSensorBus+0xac>)
   134ae:	0018      	movs	r0, r3
   134b0:	4b13      	ldr	r3, [pc, #76]	; (13500 <I2cDriverConfigureSensorBus+0xb4>)
   134b2:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   134b4:	233b      	movs	r3, #59	; 0x3b
   134b6:	18fb      	adds	r3, r7, r3
   134b8:	781a      	ldrb	r2, [r3, #0]
   134ba:	233b      	movs	r3, #59	; 0x3b
   134bc:	18fb      	adds	r3, r7, r3
   134be:	3a01      	subs	r2, #1
   134c0:	701a      	strb	r2, [r3, #0]
   134c2:	233b      	movs	r3, #59	; 0x3b
   134c4:	18fb      	adds	r3, r7, r3
   134c6:	781b      	ldrb	r3, [r3, #0]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d1db      	bne.n	13484 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   134cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134ce:	2b00      	cmp	r3, #0
   134d0:	d104      	bne.n	134dc <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   134d2:	4b09      	ldr	r3, [pc, #36]	; (134f8 <I2cDriverConfigureSensorBus+0xac>)
   134d4:	0018      	movs	r0, r3
   134d6:	4b0b      	ldr	r3, [pc, #44]	; (13504 <I2cDriverConfigureSensorBus+0xb8>)
   134d8:	4798      	blx	r3
   134da:	e000      	b.n	134de <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   134dc:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   134de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   134e0:	0018      	movs	r0, r3
   134e2:	46bd      	mov	sp, r7
   134e4:	b011      	add	sp, #68	; 0x44
   134e6:	bd90      	pop	{r4, r7, pc}
   134e8:	00013321 	.word	0x00013321
   134ec:	00080002 	.word	0x00080002
   134f0:	00090002 	.word	0x00090002
   134f4:	42000800 	.word	0x42000800
   134f8:	200041e8 	.word	0x200041e8
   134fc:	00015751 	.word	0x00015751
   13500:	00015885 	.word	0x00015885
   13504:	000133a5 	.word	0x000133a5

00013508 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13508:	b580      	push	{r7, lr}
   1350a:	b084      	sub	sp, #16
   1350c:	af00      	add	r7, sp, #0
   1350e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13510:	4b0e      	ldr	r3, [pc, #56]	; (1354c <I2cSensorsTxComplete+0x44>)
   13512:	2200      	movs	r2, #0
   13514:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13516:	4b0d      	ldr	r3, [pc, #52]	; (1354c <I2cSensorsTxComplete+0x44>)
   13518:	2201      	movs	r2, #1
   1351a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1351c:	2300      	movs	r3, #0
   1351e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13520:	4b0b      	ldr	r3, [pc, #44]	; (13550 <I2cSensorsTxComplete+0x48>)
   13522:	681b      	ldr	r3, [r3, #0]
   13524:	220c      	movs	r2, #12
   13526:	18ba      	adds	r2, r7, r2
   13528:	0011      	movs	r1, r2
   1352a:	0018      	movs	r0, r3
   1352c:	4b09      	ldr	r3, [pc, #36]	; (13554 <I2cSensorsTxComplete+0x4c>)
   1352e:	4798      	blx	r3
    sensorTransmitError = false;
   13530:	4b09      	ldr	r3, [pc, #36]	; (13558 <I2cSensorsTxComplete+0x50>)
   13532:	2200      	movs	r2, #0
   13534:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13536:	68fb      	ldr	r3, [r7, #12]
   13538:	2b00      	cmp	r3, #0
   1353a:	d003      	beq.n	13544 <I2cSensorsTxComplete+0x3c>
   1353c:	4b07      	ldr	r3, [pc, #28]	; (1355c <I2cSensorsTxComplete+0x54>)
   1353e:	2280      	movs	r2, #128	; 0x80
   13540:	0552      	lsls	r2, r2, #21
   13542:	601a      	str	r2, [r3, #0]
}
   13544:	46c0      	nop			; (mov r8, r8)
   13546:	46bd      	mov	sp, r7
   13548:	b004      	add	sp, #16
   1354a:	bd80      	pop	{r7, pc}
   1354c:	20000450 	.word	0x20000450
   13550:	20004210 	.word	0x20004210
   13554:	00018989 	.word	0x00018989
   13558:	2000044c 	.word	0x2000044c
   1355c:	e000ed04 	.word	0xe000ed04

00013560 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13568:	4b0e      	ldr	r3, [pc, #56]	; (135a4 <I2cSensorsRxComplete+0x44>)
   1356a:	2200      	movs	r2, #0
   1356c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1356e:	4b0d      	ldr	r3, [pc, #52]	; (135a4 <I2cSensorsRxComplete+0x44>)
   13570:	2201      	movs	r2, #1
   13572:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13574:	2300      	movs	r3, #0
   13576:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13578:	4b0b      	ldr	r3, [pc, #44]	; (135a8 <I2cSensorsRxComplete+0x48>)
   1357a:	681b      	ldr	r3, [r3, #0]
   1357c:	220c      	movs	r2, #12
   1357e:	18ba      	adds	r2, r7, r2
   13580:	0011      	movs	r1, r2
   13582:	0018      	movs	r0, r3
   13584:	4b09      	ldr	r3, [pc, #36]	; (135ac <I2cSensorsRxComplete+0x4c>)
   13586:	4798      	blx	r3
    sensorTransmitError = false;
   13588:	4b09      	ldr	r3, [pc, #36]	; (135b0 <I2cSensorsRxComplete+0x50>)
   1358a:	2200      	movs	r2, #0
   1358c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1358e:	68fb      	ldr	r3, [r7, #12]
   13590:	2b00      	cmp	r3, #0
   13592:	d003      	beq.n	1359c <I2cSensorsRxComplete+0x3c>
   13594:	4b07      	ldr	r3, [pc, #28]	; (135b4 <I2cSensorsRxComplete+0x54>)
   13596:	2280      	movs	r2, #128	; 0x80
   13598:	0552      	lsls	r2, r2, #21
   1359a:	601a      	str	r2, [r3, #0]
}
   1359c:	46c0      	nop			; (mov r8, r8)
   1359e:	46bd      	mov	sp, r7
   135a0:	b004      	add	sp, #16
   135a2:	bd80      	pop	{r7, pc}
   135a4:	20000450 	.word	0x20000450
   135a8:	20004210 	.word	0x20004210
   135ac:	00018989 	.word	0x00018989
   135b0:	2000044c 	.word	0x2000044c
   135b4:	e000ed04 	.word	0xe000ed04

000135b8 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   135b8:	b580      	push	{r7, lr}
   135ba:	b084      	sub	sp, #16
   135bc:	af00      	add	r7, sp, #0
   135be:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   135c0:	4b0e      	ldr	r3, [pc, #56]	; (135fc <I2cSensorsError+0x44>)
   135c2:	2200      	movs	r2, #0
   135c4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   135c6:	4b0d      	ldr	r3, [pc, #52]	; (135fc <I2cSensorsError+0x44>)
   135c8:	2201      	movs	r2, #1
   135ca:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   135cc:	2300      	movs	r3, #0
   135ce:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   135d0:	4b0b      	ldr	r3, [pc, #44]	; (13600 <I2cSensorsError+0x48>)
   135d2:	681b      	ldr	r3, [r3, #0]
   135d4:	220c      	movs	r2, #12
   135d6:	18ba      	adds	r2, r7, r2
   135d8:	0011      	movs	r1, r2
   135da:	0018      	movs	r0, r3
   135dc:	4b09      	ldr	r3, [pc, #36]	; (13604 <I2cSensorsError+0x4c>)
   135de:	4798      	blx	r3
    sensorTransmitError = true;
   135e0:	4b09      	ldr	r3, [pc, #36]	; (13608 <I2cSensorsError+0x50>)
   135e2:	2201      	movs	r2, #1
   135e4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   135e6:	68fb      	ldr	r3, [r7, #12]
   135e8:	2b00      	cmp	r3, #0
   135ea:	d003      	beq.n	135f4 <I2cSensorsError+0x3c>
   135ec:	4b07      	ldr	r3, [pc, #28]	; (1360c <I2cSensorsError+0x54>)
   135ee:	2280      	movs	r2, #128	; 0x80
   135f0:	0552      	lsls	r2, r2, #21
   135f2:	601a      	str	r2, [r3, #0]
}
   135f4:	46c0      	nop			; (mov r8, r8)
   135f6:	46bd      	mov	sp, r7
   135f8:	b004      	add	sp, #16
   135fa:	bd80      	pop	{r7, pc}
   135fc:	20000450 	.word	0x20000450
   13600:	20004210 	.word	0x20004210
   13604:	00018989 	.word	0x00018989
   13608:	2000044c 	.word	0x2000044c
   1360c:	e000ed04 	.word	0xe000ed04

00013610 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13610:	b580      	push	{r7, lr}
   13612:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13614:	4911      	ldr	r1, [pc, #68]	; (1365c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13616:	4b12      	ldr	r3, [pc, #72]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13618:	2200      	movs	r2, #0
   1361a:	0018      	movs	r0, r3
   1361c:	4b11      	ldr	r3, [pc, #68]	; (13664 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1361e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13620:	4b0f      	ldr	r3, [pc, #60]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13622:	2100      	movs	r1, #0
   13624:	0018      	movs	r0, r3
   13626:	4b10      	ldr	r3, [pc, #64]	; (13668 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13628:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1362a:	4910      	ldr	r1, [pc, #64]	; (1366c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1362c:	4b0c      	ldr	r3, [pc, #48]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1362e:	2201      	movs	r2, #1
   13630:	0018      	movs	r0, r3
   13632:	4b0c      	ldr	r3, [pc, #48]	; (13664 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13634:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13636:	4b0a      	ldr	r3, [pc, #40]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13638:	2101      	movs	r1, #1
   1363a:	0018      	movs	r0, r3
   1363c:	4b0a      	ldr	r3, [pc, #40]	; (13668 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1363e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13640:	490b      	ldr	r1, [pc, #44]	; (13670 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13642:	4b07      	ldr	r3, [pc, #28]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13644:	2202      	movs	r2, #2
   13646:	0018      	movs	r0, r3
   13648:	4b06      	ldr	r3, [pc, #24]	; (13664 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1364a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1364c:	4b04      	ldr	r3, [pc, #16]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1364e:	2102      	movs	r1, #2
   13650:	0018      	movs	r0, r3
   13652:	4b05      	ldr	r3, [pc, #20]	; (13668 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13654:	4798      	blx	r3
}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	46bd      	mov	sp, r7
   1365a:	bd80      	pop	{r7, pc}
   1365c:	00013509 	.word	0x00013509
   13660:	200041e8 	.word	0x200041e8
   13664:	00012919 	.word	0x00012919
   13668:	00013419 	.word	0x00013419
   1366c:	00013561 	.word	0x00013561
   13670:	000135b9 	.word	0x000135b9

00013674 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13674:	b580      	push	{r7, lr}
   13676:	b082      	sub	sp, #8
   13678:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1367a:	2300      	movs	r3, #0
   1367c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1367e:	4b14      	ldr	r3, [pc, #80]	; (136d0 <I2cInitializeDriver+0x5c>)
   13680:	4798      	blx	r3
   13682:	0003      	movs	r3, r0
   13684:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13686:	687b      	ldr	r3, [r7, #4]
   13688:	2b00      	cmp	r3, #0
   1368a:	d11a      	bne.n	136c2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   1368c:	4b11      	ldr	r3, [pc, #68]	; (136d4 <I2cInitializeDriver+0x60>)
   1368e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13690:	2001      	movs	r0, #1
   13692:	4b11      	ldr	r3, [pc, #68]	; (136d8 <I2cInitializeDriver+0x64>)
   13694:	4798      	blx	r3
   13696:	0002      	movs	r2, r0
   13698:	4b10      	ldr	r3, [pc, #64]	; (136dc <I2cInitializeDriver+0x68>)
   1369a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1369c:	2203      	movs	r2, #3
   1369e:	2100      	movs	r1, #0
   136a0:	2001      	movs	r0, #1
   136a2:	4b0f      	ldr	r3, [pc, #60]	; (136e0 <I2cInitializeDriver+0x6c>)
   136a4:	4798      	blx	r3
   136a6:	0002      	movs	r2, r0
   136a8:	4b0e      	ldr	r3, [pc, #56]	; (136e4 <I2cInitializeDriver+0x70>)
   136aa:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   136ac:	4b0b      	ldr	r3, [pc, #44]	; (136dc <I2cInitializeDriver+0x68>)
   136ae:	681b      	ldr	r3, [r3, #0]
   136b0:	2b00      	cmp	r3, #0
   136b2:	d003      	beq.n	136bc <I2cInitializeDriver+0x48>
   136b4:	4b0b      	ldr	r3, [pc, #44]	; (136e4 <I2cInitializeDriver+0x70>)
   136b6:	681b      	ldr	r3, [r3, #0]
   136b8:	2b00      	cmp	r3, #0
   136ba:	d103      	bne.n	136c4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   136bc:	2306      	movs	r3, #6
   136be:	607b      	str	r3, [r7, #4]
        goto exit;
   136c0:	e000      	b.n	136c4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   136c2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   136c4:	687b      	ldr	r3, [r7, #4]
}
   136c6:	0018      	movs	r0, r3
   136c8:	46bd      	mov	sp, r7
   136ca:	b002      	add	sp, #8
   136cc:	bd80      	pop	{r7, pc}
   136ce:	46c0      	nop			; (mov r8, r8)
   136d0:	0001344d 	.word	0x0001344d
   136d4:	00013611 	.word	0x00013611
   136d8:	000182c1 	.word	0x000182c1
   136dc:	200041e4 	.word	0x200041e4
   136e0:	00018059 	.word	0x00018059
   136e4:	20004210 	.word	0x20004210

000136e8 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   136e8:	b590      	push	{r4, r7, lr}
   136ea:	b085      	sub	sp, #20
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   136f0:	2300      	movs	r3, #0
   136f2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	2b00      	cmp	r3, #0
   136f8:	d003      	beq.n	13702 <I2cWriteData+0x1a>
   136fa:	687b      	ldr	r3, [r7, #4]
   136fc:	685b      	ldr	r3, [r3, #4]
   136fe:	2b00      	cmp	r3, #0
   13700:	d103      	bne.n	1370a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13702:	2308      	movs	r3, #8
   13704:	425b      	negs	r3, r3
   13706:	60fb      	str	r3, [r7, #12]
        goto exit;
   13708:	e01f      	b.n	1374a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1370a:	687b      	ldr	r3, [r7, #4]
   1370c:	781b      	ldrb	r3, [r3, #0]
   1370e:	b29a      	uxth	r2, r3
   13710:	4b10      	ldr	r3, [pc, #64]	; (13754 <I2cWriteData+0x6c>)
   13712:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13714:	687b      	ldr	r3, [r7, #4]
   13716:	685a      	ldr	r2, [r3, #4]
   13718:	4b0e      	ldr	r3, [pc, #56]	; (13754 <I2cWriteData+0x6c>)
   1371a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1371c:	687b      	ldr	r3, [r7, #4]
   1371e:	89da      	ldrh	r2, [r3, #14]
   13720:	4b0c      	ldr	r3, [pc, #48]	; (13754 <I2cWriteData+0x6c>)
   13722:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13724:	230b      	movs	r3, #11
   13726:	18fc      	adds	r4, r7, r3
   13728:	4a0a      	ldr	r2, [pc, #40]	; (13754 <I2cWriteData+0x6c>)
   1372a:	4b0b      	ldr	r3, [pc, #44]	; (13758 <I2cWriteData+0x70>)
   1372c:	0011      	movs	r1, r2
   1372e:	0018      	movs	r0, r3
   13730:	4b0a      	ldr	r3, [pc, #40]	; (1375c <I2cWriteData+0x74>)
   13732:	4798      	blx	r3
   13734:	0003      	movs	r3, r0
   13736:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13738:	230b      	movs	r3, #11
   1373a:	18fb      	adds	r3, r7, r3
   1373c:	781b      	ldrb	r3, [r3, #0]
   1373e:	2b00      	cmp	r3, #0
   13740:	d003      	beq.n	1374a <I2cWriteData+0x62>
        error = ERROR_IO;
   13742:	2306      	movs	r3, #6
   13744:	425b      	negs	r3, r3
   13746:	60fb      	str	r3, [r7, #12]
        goto exit;
   13748:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1374a:	68fb      	ldr	r3, [r7, #12]
}
   1374c:	0018      	movs	r0, r3
   1374e:	46bd      	mov	sp, r7
   13750:	b005      	add	sp, #20
   13752:	bd90      	pop	{r4, r7, pc}
   13754:	20004214 	.word	0x20004214
   13758:	200041e8 	.word	0x200041e8
   1375c:	00012a05 	.word	0x00012a05

00013760 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13760:	b590      	push	{r4, r7, lr}
   13762:	b083      	sub	sp, #12
   13764:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13766:	2300      	movs	r3, #0
   13768:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1376a:	4b09      	ldr	r3, [pc, #36]	; (13790 <I2cFreeMutex+0x30>)
   1376c:	6818      	ldr	r0, [r3, #0]
   1376e:	2300      	movs	r3, #0
   13770:	2200      	movs	r2, #0
   13772:	2100      	movs	r1, #0
   13774:	4c07      	ldr	r4, [pc, #28]	; (13794 <I2cFreeMutex+0x34>)
   13776:	47a0      	blx	r4
   13778:	0003      	movs	r3, r0
   1377a:	2b01      	cmp	r3, #1
   1377c:	d002      	beq.n	13784 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1377e:	2314      	movs	r3, #20
   13780:	425b      	negs	r3, r3
   13782:	607b      	str	r3, [r7, #4]
    }
    return error;
   13784:	687b      	ldr	r3, [r7, #4]
}
   13786:	0018      	movs	r0, r3
   13788:	46bd      	mov	sp, r7
   1378a:	b003      	add	sp, #12
   1378c:	bd90      	pop	{r4, r7, pc}
   1378e:	46c0      	nop			; (mov r8, r8)
   13790:	200041e4 	.word	0x200041e4
   13794:	00018301 	.word	0x00018301

00013798 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13798:	b580      	push	{r7, lr}
   1379a:	b084      	sub	sp, #16
   1379c:	af00      	add	r7, sp, #0
   1379e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   137a0:	2300      	movs	r3, #0
   137a2:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   137a4:	4b08      	ldr	r3, [pc, #32]	; (137c8 <I2cGetMutex+0x30>)
   137a6:	681b      	ldr	r3, [r3, #0]
   137a8:	687a      	ldr	r2, [r7, #4]
   137aa:	0011      	movs	r1, r2
   137ac:	0018      	movs	r0, r3
   137ae:	4b07      	ldr	r3, [pc, #28]	; (137cc <I2cGetMutex+0x34>)
   137b0:	4798      	blx	r3
   137b2:	0003      	movs	r3, r0
   137b4:	2b01      	cmp	r3, #1
   137b6:	d002      	beq.n	137be <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   137b8:	231d      	movs	r3, #29
   137ba:	425b      	negs	r3, r3
   137bc:	60fb      	str	r3, [r7, #12]
    }
    return error;
   137be:	68fb      	ldr	r3, [r7, #12]
}
   137c0:	0018      	movs	r0, r3
   137c2:	46bd      	mov	sp, r7
   137c4:	b004      	add	sp, #16
   137c6:	bd80      	pop	{r7, pc}
   137c8:	200041e4 	.word	0x200041e4
   137cc:	00019011 	.word	0x00019011

000137d0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   137d0:	b580      	push	{r7, lr}
   137d2:	b084      	sub	sp, #16
   137d4:	af00      	add	r7, sp, #0
   137d6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   137d8:	2300      	movs	r3, #0
   137da:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   137dc:	4b04      	ldr	r3, [pc, #16]	; (137f0 <I2cGetSemaphoreHandle+0x20>)
   137de:	681a      	ldr	r2, [r3, #0]
   137e0:	687b      	ldr	r3, [r7, #4]
   137e2:	601a      	str	r2, [r3, #0]
    return error;
   137e4:	68fb      	ldr	r3, [r7, #12]
}
   137e6:	0018      	movs	r0, r3
   137e8:	46bd      	mov	sp, r7
   137ea:	b004      	add	sp, #16
   137ec:	bd80      	pop	{r7, pc}
   137ee:	46c0      	nop			; (mov r8, r8)
   137f0:	20004210 	.word	0x20004210

000137f4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   137f4:	b580      	push	{r7, lr}
   137f6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   137f8:	4b02      	ldr	r3, [pc, #8]	; (13804 <I2cGetTaskErrorStatus+0x10>)
   137fa:	781b      	ldrb	r3, [r3, #0]
}
   137fc:	0018      	movs	r0, r3
   137fe:	46bd      	mov	sp, r7
   13800:	bd80      	pop	{r7, pc}
   13802:	46c0      	nop			; (mov r8, r8)
   13804:	2000044c 	.word	0x2000044c

00013808 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b082      	sub	sp, #8
   1380c:	af00      	add	r7, sp, #0
   1380e:	0002      	movs	r2, r0
   13810:	1dfb      	adds	r3, r7, #7
   13812:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13814:	4b03      	ldr	r3, [pc, #12]	; (13824 <I2cSetTaskErrorStatus+0x1c>)
   13816:	1dfa      	adds	r2, r7, #7
   13818:	7812      	ldrb	r2, [r2, #0]
   1381a:	701a      	strb	r2, [r3, #0]
}
   1381c:	46c0      	nop			; (mov r8, r8)
   1381e:	46bd      	mov	sp, r7
   13820:	b002      	add	sp, #8
   13822:	bd80      	pop	{r7, pc}
   13824:	2000044c 	.word	0x2000044c

00013828 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13828:	b580      	push	{r7, lr}
   1382a:	b084      	sub	sp, #16
   1382c:	af00      	add	r7, sp, #0
   1382e:	6078      	str	r0, [r7, #4]
   13830:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13832:	2300      	movs	r3, #0
   13834:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13836:	2300      	movs	r3, #0
   13838:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1383a:	2396      	movs	r3, #150	; 0x96
   1383c:	005b      	lsls	r3, r3, #1
   1383e:	0018      	movs	r0, r3
   13840:	4b28      	ldr	r3, [pc, #160]	; (138e4 <I2cWriteDataWait+0xbc>)
   13842:	4798      	blx	r3
   13844:	0003      	movs	r3, r0
   13846:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13848:	68fb      	ldr	r3, [r7, #12]
   1384a:	2b00      	cmp	r3, #0
   1384c:	d138      	bne.n	138c0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1384e:	2308      	movs	r3, #8
   13850:	18fb      	adds	r3, r7, r3
   13852:	0018      	movs	r0, r3
   13854:	4b24      	ldr	r3, [pc, #144]	; (138e8 <I2cWriteDataWait+0xc0>)
   13856:	4798      	blx	r3
   13858:	0003      	movs	r3, r0
   1385a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   1385c:	68fb      	ldr	r3, [r7, #12]
   1385e:	2b00      	cmp	r3, #0
   13860:	d130      	bne.n	138c4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13862:	687b      	ldr	r3, [r7, #4]
   13864:	0018      	movs	r0, r3
   13866:	4b21      	ldr	r3, [pc, #132]	; (138ec <I2cWriteDataWait+0xc4>)
   13868:	4798      	blx	r3
   1386a:	0003      	movs	r3, r0
   1386c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1386e:	68fb      	ldr	r3, [r7, #12]
   13870:	2b00      	cmp	r3, #0
   13872:	d12a      	bne.n	138ca <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13874:	68bb      	ldr	r3, [r7, #8]
   13876:	683a      	ldr	r2, [r7, #0]
   13878:	0011      	movs	r1, r2
   1387a:	0018      	movs	r0, r3
   1387c:	4b1c      	ldr	r3, [pc, #112]	; (138f0 <I2cWriteDataWait+0xc8>)
   1387e:	4798      	blx	r3
   13880:	0003      	movs	r3, r0
   13882:	2b01      	cmp	r3, #1
   13884:	d111      	bne.n	138aa <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13886:	4b1b      	ldr	r3, [pc, #108]	; (138f4 <I2cWriteDataWait+0xcc>)
   13888:	4798      	blx	r3
   1388a:	1e03      	subs	r3, r0, #0
   1388c:	d011      	beq.n	138b2 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1388e:	2000      	movs	r0, #0
   13890:	4b19      	ldr	r3, [pc, #100]	; (138f8 <I2cWriteDataWait+0xd0>)
   13892:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13894:	68fb      	ldr	r3, [r7, #12]
   13896:	2b00      	cmp	r3, #0
   13898:	d003      	beq.n	138a2 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   1389a:	2321      	movs	r3, #33	; 0x21
   1389c:	425b      	negs	r3, r3
   1389e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   138a0:	e014      	b.n	138cc <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   138a2:	2303      	movs	r3, #3
   138a4:	425b      	negs	r3, r3
   138a6:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   138a8:	e010      	b.n	138cc <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   138aa:	2303      	movs	r3, #3
   138ac:	425b      	negs	r3, r3
   138ae:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   138b0:	e00c      	b.n	138cc <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   138b2:	4b12      	ldr	r3, [pc, #72]	; (138fc <I2cWriteDataWait+0xd4>)
   138b4:	4798      	blx	r3
   138b6:	0002      	movs	r2, r0
   138b8:	68fb      	ldr	r3, [r7, #12]
   138ba:	4313      	orrs	r3, r2
   138bc:	60fb      	str	r3, [r7, #12]
   138be:	e002      	b.n	138c6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   138c0:	46c0      	nop			; (mov r8, r8)
   138c2:	e000      	b.n	138c6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   138c4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   138c6:	68fb      	ldr	r3, [r7, #12]
   138c8:	e007      	b.n	138da <I2cWriteDataWait+0xb2>
        goto exitError0;
   138ca:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   138cc:	4b0b      	ldr	r3, [pc, #44]	; (138fc <I2cWriteDataWait+0xd4>)
   138ce:	4798      	blx	r3
   138d0:	0002      	movs	r2, r0
   138d2:	68fb      	ldr	r3, [r7, #12]
   138d4:	4313      	orrs	r3, r2
   138d6:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   138d8:	68fb      	ldr	r3, [r7, #12]
}
   138da:	0018      	movs	r0, r3
   138dc:	46bd      	mov	sp, r7
   138de:	b004      	add	sp, #16
   138e0:	bd80      	pop	{r7, pc}
   138e2:	46c0      	nop			; (mov r8, r8)
   138e4:	00013799 	.word	0x00013799
   138e8:	000137d1 	.word	0x000137d1
   138ec:	000136e9 	.word	0x000136e9
   138f0:	00019011 	.word	0x00019011
   138f4:	000137f5 	.word	0x000137f5
   138f8:	00013809 	.word	0x00013809
   138fc:	00013761 	.word	0x00013761

00013900 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13900:	b580      	push	{r7, lr}
   13902:	b084      	sub	sp, #16
   13904:	af00      	add	r7, sp, #0
   13906:	0002      	movs	r2, r0
   13908:	1dfb      	adds	r3, r7, #7
   1390a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1390c:	230f      	movs	r3, #15
   1390e:	18fb      	adds	r3, r7, r3
   13910:	1dfa      	adds	r2, r7, #7
   13912:	7812      	ldrb	r2, [r2, #0]
   13914:	09d2      	lsrs	r2, r2, #7
   13916:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13918:	230e      	movs	r3, #14
   1391a:	18fb      	adds	r3, r7, r3
   1391c:	1dfa      	adds	r2, r7, #7
   1391e:	7812      	ldrb	r2, [r2, #0]
   13920:	0952      	lsrs	r2, r2, #5
   13922:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13924:	4b0d      	ldr	r3, [pc, #52]	; (1395c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13926:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   13928:	230f      	movs	r3, #15
   1392a:	18fb      	adds	r3, r7, r3
   1392c:	781b      	ldrb	r3, [r3, #0]
   1392e:	2b00      	cmp	r3, #0
   13930:	d10f      	bne.n	13952 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13932:	230f      	movs	r3, #15
   13934:	18fb      	adds	r3, r7, r3
   13936:	781b      	ldrb	r3, [r3, #0]
   13938:	009b      	lsls	r3, r3, #2
   1393a:	2210      	movs	r2, #16
   1393c:	4694      	mov	ip, r2
   1393e:	44bc      	add	ip, r7
   13940:	4463      	add	r3, ip
   13942:	3b08      	subs	r3, #8
   13944:	681a      	ldr	r2, [r3, #0]
   13946:	230e      	movs	r3, #14
   13948:	18fb      	adds	r3, r7, r3
   1394a:	781b      	ldrb	r3, [r3, #0]
   1394c:	01db      	lsls	r3, r3, #7
   1394e:	18d3      	adds	r3, r2, r3
   13950:	e000      	b.n	13954 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   13952:	2300      	movs	r3, #0
	}
}
   13954:	0018      	movs	r0, r3
   13956:	46bd      	mov	sp, r7
   13958:	b004      	add	sp, #16
   1395a:	bd80      	pop	{r7, pc}
   1395c:	41004400 	.word	0x41004400

00013960 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13960:	b580      	push	{r7, lr}
   13962:	b082      	sub	sp, #8
   13964:	af00      	add	r7, sp, #0
   13966:	0002      	movs	r2, r0
   13968:	1dfb      	adds	r3, r7, #7
   1396a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1396c:	1dfb      	adds	r3, r7, #7
   1396e:	781b      	ldrb	r3, [r3, #0]
   13970:	0018      	movs	r0, r3
   13972:	4b03      	ldr	r3, [pc, #12]	; (13980 <port_get_group_from_gpio_pin+0x20>)
   13974:	4798      	blx	r3
   13976:	0003      	movs	r3, r0
}
   13978:	0018      	movs	r0, r3
   1397a:	46bd      	mov	sp, r7
   1397c:	b002      	add	sp, #8
   1397e:	bd80      	pop	{r7, pc}
   13980:	00013901 	.word	0x00013901

00013984 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   13984:	b580      	push	{r7, lr}
   13986:	b084      	sub	sp, #16
   13988:	af00      	add	r7, sp, #0
   1398a:	0002      	movs	r2, r0
   1398c:	1dfb      	adds	r3, r7, #7
   1398e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13990:	1dfb      	adds	r3, r7, #7
   13992:	781b      	ldrb	r3, [r3, #0]
   13994:	0018      	movs	r0, r3
   13996:	4b0b      	ldr	r3, [pc, #44]	; (139c4 <port_pin_get_input_level+0x40>)
   13998:	4798      	blx	r3
   1399a:	0003      	movs	r3, r0
   1399c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1399e:	1dfb      	adds	r3, r7, #7
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	221f      	movs	r2, #31
   139a4:	4013      	ands	r3, r2
   139a6:	2201      	movs	r2, #1
   139a8:	409a      	lsls	r2, r3
   139aa:	0013      	movs	r3, r2
   139ac:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   139ae:	68fb      	ldr	r3, [r7, #12]
   139b0:	6a1b      	ldr	r3, [r3, #32]
   139b2:	68ba      	ldr	r2, [r7, #8]
   139b4:	4013      	ands	r3, r2
   139b6:	1e5a      	subs	r2, r3, #1
   139b8:	4193      	sbcs	r3, r2
   139ba:	b2db      	uxtb	r3, r3
}
   139bc:	0018      	movs	r0, r3
   139be:	46bd      	mov	sp, r7
   139c0:	b004      	add	sp, #16
   139c2:	bd80      	pop	{r7, pc}
   139c4:	00013961 	.word	0x00013961

000139c8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   139c8:	b580      	push	{r7, lr}
   139ca:	b084      	sub	sp, #16
   139cc:	af00      	add	r7, sp, #0
   139ce:	0002      	movs	r2, r0
   139d0:	1dfb      	adds	r3, r7, #7
   139d2:	701a      	strb	r2, [r3, #0]
   139d4:	1dbb      	adds	r3, r7, #6
   139d6:	1c0a      	adds	r2, r1, #0
   139d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   139da:	1dfb      	adds	r3, r7, #7
   139dc:	781b      	ldrb	r3, [r3, #0]
   139de:	0018      	movs	r0, r3
   139e0:	4b0d      	ldr	r3, [pc, #52]	; (13a18 <port_pin_set_output_level+0x50>)
   139e2:	4798      	blx	r3
   139e4:	0003      	movs	r3, r0
   139e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139e8:	1dfb      	adds	r3, r7, #7
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	221f      	movs	r2, #31
   139ee:	4013      	ands	r3, r2
   139f0:	2201      	movs	r2, #1
   139f2:	409a      	lsls	r2, r3
   139f4:	0013      	movs	r3, r2
   139f6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   139f8:	1dbb      	adds	r3, r7, #6
   139fa:	781b      	ldrb	r3, [r3, #0]
   139fc:	2b00      	cmp	r3, #0
   139fe:	d003      	beq.n	13a08 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13a00:	68fb      	ldr	r3, [r7, #12]
   13a02:	68ba      	ldr	r2, [r7, #8]
   13a04:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   13a06:	e002      	b.n	13a0e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13a08:	68fb      	ldr	r3, [r7, #12]
   13a0a:	68ba      	ldr	r2, [r7, #8]
   13a0c:	615a      	str	r2, [r3, #20]
}
   13a0e:	46c0      	nop			; (mov r8, r8)
   13a10:	46bd      	mov	sp, r7
   13a12:	b004      	add	sp, #16
   13a14:	bd80      	pop	{r7, pc}
   13a16:	46c0      	nop			; (mov r8, r8)
   13a18:	00013961 	.word	0x00013961

00013a1c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
   13a1c:	b580      	push	{r7, lr}
   13a1e:	b084      	sub	sp, #16
   13a20:	af00      	add	r7, sp, #0
   13a22:	0002      	movs	r2, r0
   13a24:	1dfb      	adds	r3, r7, #7
   13a26:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13a28:	1dfb      	adds	r3, r7, #7
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	0018      	movs	r0, r3
   13a2e:	4b09      	ldr	r3, [pc, #36]	; (13a54 <port_pin_toggle_output_level+0x38>)
   13a30:	4798      	blx	r3
   13a32:	0003      	movs	r3, r0
   13a34:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13a36:	1dfb      	adds	r3, r7, #7
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	221f      	movs	r2, #31
   13a3c:	4013      	ands	r3, r2
   13a3e:	2201      	movs	r2, #1
   13a40:	409a      	lsls	r2, r3
   13a42:	0013      	movs	r3, r2
   13a44:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   13a46:	68fb      	ldr	r3, [r7, #12]
   13a48:	68ba      	ldr	r2, [r7, #8]
   13a4a:	61da      	str	r2, [r3, #28]
}
   13a4c:	46c0      	nop			; (mov r8, r8)
   13a4e:	46bd      	mov	sp, r7
   13a50:	b004      	add	sp, #16
   13a52:	bd80      	pop	{r7, pc}
   13a54:	00013961 	.word	0x00013961

00013a58 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   13a58:	b580      	push	{r7, lr}
   13a5a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   13a5c:	4b02      	ldr	r3, [pc, #8]	; (13a68 <init_state+0x10>)
   13a5e:	2200      	movs	r2, #0
   13a60:	701a      	strb	r2, [r3, #0]
}
   13a62:	46c0      	nop			; (mov r8, r8)
   13a64:	46bd      	mov	sp, r7
   13a66:	bd80      	pop	{r7, pc}
   13a68:	20000479 	.word	0x20000479

00013a6c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   13a6c:	b580      	push	{r7, lr}
   13a6e:	b082      	sub	sp, #8
   13a70:	af00      	add	r7, sp, #0
   13a72:	0002      	movs	r2, r0
   13a74:	1dfb      	adds	r3, r7, #7
   13a76:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   13a78:	1dfb      	adds	r3, r7, #7
   13a7a:	781b      	ldrb	r3, [r3, #0]
   13a7c:	b25b      	sxtb	r3, r3
   13a7e:	43db      	mvns	r3, r3
   13a80:	b25b      	sxtb	r3, r3
   13a82:	4a06      	ldr	r2, [pc, #24]	; (13a9c <clear_state+0x30>)
   13a84:	7812      	ldrb	r2, [r2, #0]
   13a86:	b252      	sxtb	r2, r2
   13a88:	4013      	ands	r3, r2
   13a8a:	b25b      	sxtb	r3, r3
   13a8c:	b2da      	uxtb	r2, r3
   13a8e:	4b03      	ldr	r3, [pc, #12]	; (13a9c <clear_state+0x30>)
   13a90:	701a      	strb	r2, [r3, #0]
}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	46bd      	mov	sp, r7
   13a96:	b002      	add	sp, #8
   13a98:	bd80      	pop	{r7, pc}
   13a9a:	46c0      	nop			; (mov r8, r8)
   13a9c:	20000479 	.word	0x20000479

00013aa0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   13aa0:	b580      	push	{r7, lr}
   13aa2:	b082      	sub	sp, #8
   13aa4:	af00      	add	r7, sp, #0
   13aa6:	0002      	movs	r2, r0
   13aa8:	1dfb      	adds	r3, r7, #7
   13aaa:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   13aac:	4b05      	ldr	r3, [pc, #20]	; (13ac4 <add_state+0x24>)
   13aae:	781a      	ldrb	r2, [r3, #0]
   13ab0:	1dfb      	adds	r3, r7, #7
   13ab2:	781b      	ldrb	r3, [r3, #0]
   13ab4:	4313      	orrs	r3, r2
   13ab6:	b2da      	uxtb	r2, r3
   13ab8:	4b02      	ldr	r3, [pc, #8]	; (13ac4 <add_state+0x24>)
   13aba:	701a      	strb	r2, [r3, #0]
}
   13abc:	46c0      	nop			; (mov r8, r8)
   13abe:	46bd      	mov	sp, r7
   13ac0:	b002      	add	sp, #8
   13ac2:	bd80      	pop	{r7, pc}
   13ac4:	20000479 	.word	0x20000479

00013ac8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   13ac8:	b580      	push	{r7, lr}
   13aca:	b082      	sub	sp, #8
   13acc:	af00      	add	r7, sp, #0
   13ace:	0002      	movs	r2, r0
   13ad0:	1dfb      	adds	r3, r7, #7
   13ad2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   13ad4:	4b06      	ldr	r3, [pc, #24]	; (13af0 <is_state_set+0x28>)
   13ad6:	781b      	ldrb	r3, [r3, #0]
   13ad8:	1dfa      	adds	r2, r7, #7
   13ada:	7812      	ldrb	r2, [r2, #0]
   13adc:	4013      	ands	r3, r2
   13ade:	b2db      	uxtb	r3, r3
   13ae0:	1e5a      	subs	r2, r3, #1
   13ae2:	4193      	sbcs	r3, r2
   13ae4:	b2db      	uxtb	r3, r3
}
   13ae6:	0018      	movs	r0, r3
   13ae8:	46bd      	mov	sp, r7
   13aea:	b002      	add	sp, #8
   13aec:	bd80      	pop	{r7, pc}
   13aee:	46c0      	nop			; (mov r8, r8)
   13af0:	20000479 	.word	0x20000479

00013af4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   13af4:	b590      	push	{r4, r7, lr}
   13af6:	b085      	sub	sp, #20
   13af8:	af00      	add	r7, sp, #0
   13afa:	6078      	str	r0, [r7, #4]
   13afc:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   13afe:	687b      	ldr	r3, [r7, #4]
   13b00:	2b00      	cmp	r3, #0
   13b02:	d002      	beq.n	13b0a <is_exist_file+0x16>
   13b04:	683b      	ldr	r3, [r7, #0]
   13b06:	2b00      	cmp	r3, #0
   13b08:	d101      	bne.n	13b0e <is_exist_file+0x1a>
        return false;
   13b0a:	2300      	movs	r3, #0
   13b0c:	e013      	b.n	13b36 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   13b0e:	230f      	movs	r3, #15
   13b10:	18fc      	adds	r4, r7, r3
   13b12:	6839      	ldr	r1, [r7, #0]
   13b14:	4b0a      	ldr	r3, [pc, #40]	; (13b40 <is_exist_file+0x4c>)
   13b16:	2200      	movs	r2, #0
   13b18:	0018      	movs	r0, r3
   13b1a:	4b0a      	ldr	r3, [pc, #40]	; (13b44 <is_exist_file+0x50>)
   13b1c:	4798      	blx	r3
   13b1e:	0003      	movs	r3, r0
   13b20:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   13b22:	4b07      	ldr	r3, [pc, #28]	; (13b40 <is_exist_file+0x4c>)
   13b24:	0018      	movs	r0, r3
   13b26:	4b08      	ldr	r3, [pc, #32]	; (13b48 <is_exist_file+0x54>)
   13b28:	4798      	blx	r3
    return (ret == FR_OK);
   13b2a:	230f      	movs	r3, #15
   13b2c:	18fb      	adds	r3, r7, r3
   13b2e:	781b      	ldrb	r3, [r3, #0]
   13b30:	425a      	negs	r2, r3
   13b32:	4153      	adcs	r3, r2
   13b34:	b2db      	uxtb	r3, r3
}
   13b36:	0018      	movs	r0, r3
   13b38:	46bd      	mov	sp, r7
   13b3a:	b005      	add	sp, #20
   13b3c:	bd90      	pop	{r4, r7, pc}
   13b3e:	46c0      	nop			; (mov r8, r8)
   13b40:	200006ac 	.word	0x200006ac
   13b44:	0002b551 	.word	0x0002b551
   13b48:	0002bf51 	.word	0x0002bf51

00013b4c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   13b4c:	b580      	push	{r7, lr}
   13b4e:	b09e      	sub	sp, #120	; 0x78
   13b50:	af00      	add	r7, sp, #0
   13b52:	60f8      	str	r0, [r7, #12]
   13b54:	60b9      	str	r1, [r7, #8]
   13b56:	1dfb      	adds	r3, r7, #7
   13b58:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   13b5a:	2376      	movs	r3, #118	; 0x76
   13b5c:	18fb      	adds	r3, r7, r3
   13b5e:	2201      	movs	r2, #1
   13b60:	801a      	strh	r2, [r3, #0]
   13b62:	2374      	movs	r3, #116	; 0x74
   13b64:	18fb      	adds	r3, r7, r3
   13b66:	2200      	movs	r2, #0
   13b68:	801a      	strh	r2, [r3, #0]
   13b6a:	236e      	movs	r3, #110	; 0x6e
   13b6c:	18fb      	adds	r3, r7, r3
   13b6e:	2200      	movs	r2, #0
   13b70:	801a      	strh	r2, [r3, #0]
   13b72:	2372      	movs	r3, #114	; 0x72
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	2200      	movs	r2, #0
   13b78:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   13b7a:	2324      	movs	r3, #36	; 0x24
   13b7c:	18fb      	adds	r3, r7, r3
   13b7e:	0018      	movs	r0, r3
   13b80:	2341      	movs	r3, #65	; 0x41
   13b82:	001a      	movs	r2, r3
   13b84:	2100      	movs	r1, #0
   13b86:	4b92      	ldr	r3, [pc, #584]	; (13dd0 <rename_to_unique+0x284>)
   13b88:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   13b8a:	2318      	movs	r3, #24
   13b8c:	18fb      	adds	r3, r7, r3
   13b8e:	0018      	movs	r0, r3
   13b90:	2309      	movs	r3, #9
   13b92:	001a      	movs	r2, r3
   13b94:	2100      	movs	r1, #0
   13b96:	4b8e      	ldr	r3, [pc, #568]	; (13dd0 <rename_to_unique+0x284>)
   13b98:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   13b9a:	2314      	movs	r3, #20
   13b9c:	18fb      	adds	r3, r7, r3
   13b9e:	2200      	movs	r2, #0
   13ba0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   13ba2:	2300      	movs	r3, #0
   13ba4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   13ba6:	2371      	movs	r3, #113	; 0x71
   13ba8:	18fb      	adds	r3, r7, r3
   13baa:	2200      	movs	r2, #0
   13bac:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   13bae:	68bb      	ldr	r3, [r7, #8]
   13bb0:	2b00      	cmp	r3, #0
   13bb2:	d101      	bne.n	13bb8 <rename_to_unique+0x6c>
        return false;
   13bb4:	2300      	movs	r3, #0
   13bb6:	e106      	b.n	13dc6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   13bb8:	68ba      	ldr	r2, [r7, #8]
   13bba:	68fb      	ldr	r3, [r7, #12]
   13bbc:	0011      	movs	r1, r2
   13bbe:	0018      	movs	r0, r3
   13bc0:	4b84      	ldr	r3, [pc, #528]	; (13dd4 <rename_to_unique+0x288>)
   13bc2:	4798      	blx	r3
   13bc4:	0003      	movs	r3, r0
   13bc6:	001a      	movs	r2, r3
   13bc8:	2301      	movs	r3, #1
   13bca:	4053      	eors	r3, r2
   13bcc:	b2db      	uxtb	r3, r3
   13bce:	2b00      	cmp	r3, #0
   13bd0:	d001      	beq.n	13bd6 <rename_to_unique+0x8a>
        return true;
   13bd2:	2301      	movs	r3, #1
   13bd4:	e0f7      	b.n	13dc6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   13bd6:	68bb      	ldr	r3, [r7, #8]
   13bd8:	0018      	movs	r0, r3
   13bda:	4b7f      	ldr	r3, [pc, #508]	; (13dd8 <rename_to_unique+0x28c>)
   13bdc:	4798      	blx	r3
   13bde:	0003      	movs	r3, r0
   13be0:	2b40      	cmp	r3, #64	; 0x40
   13be2:	d901      	bls.n	13be8 <rename_to_unique+0x9c>
        return false;
   13be4:	2300      	movs	r3, #0
   13be6:	e0ee      	b.n	13dc6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   13be8:	68bb      	ldr	r3, [r7, #8]
   13bea:	212e      	movs	r1, #46	; 0x2e
   13bec:	0018      	movs	r0, r3
   13bee:	4b7b      	ldr	r3, [pc, #492]	; (13ddc <rename_to_unique+0x290>)
   13bf0:	4798      	blx	r3
   13bf2:	0003      	movs	r3, r0
   13bf4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   13bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13bf8:	2b00      	cmp	r3, #0
   13bfa:	d052      	beq.n	13ca2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   13bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13bfe:	0018      	movs	r0, r3
   13c00:	4b75      	ldr	r3, [pc, #468]	; (13dd8 <rename_to_unique+0x28c>)
   13c02:	4798      	blx	r3
   13c04:	0002      	movs	r2, r0
   13c06:	236e      	movs	r3, #110	; 0x6e
   13c08:	18fb      	adds	r3, r7, r3
   13c0a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   13c0c:	236e      	movs	r3, #110	; 0x6e
   13c0e:	18fb      	adds	r3, r7, r3
   13c10:	881b      	ldrh	r3, [r3, #0]
   13c12:	2b07      	cmp	r3, #7
   13c14:	d837      	bhi.n	13c86 <rename_to_unique+0x13a>
            valid_ext = true;
   13c16:	2371      	movs	r3, #113	; 0x71
   13c18:	18fb      	adds	r3, r7, r3
   13c1a:	2201      	movs	r2, #1
   13c1c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   13c1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   13c20:	2318      	movs	r3, #24
   13c22:	18fb      	adds	r3, r7, r3
   13c24:	0011      	movs	r1, r2
   13c26:	0018      	movs	r0, r3
   13c28:	4b6d      	ldr	r3, [pc, #436]	; (13de0 <rename_to_unique+0x294>)
   13c2a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   13c2c:	68bb      	ldr	r3, [r7, #8]
   13c2e:	0018      	movs	r0, r3
   13c30:	4b69      	ldr	r3, [pc, #420]	; (13dd8 <rename_to_unique+0x28c>)
   13c32:	4798      	blx	r3
   13c34:	0002      	movs	r2, r0
   13c36:	236e      	movs	r3, #110	; 0x6e
   13c38:	18fb      	adds	r3, r7, r3
   13c3a:	881b      	ldrh	r3, [r3, #0]
   13c3c:	1ad3      	subs	r3, r2, r3
   13c3e:	2b3c      	cmp	r3, #60	; 0x3c
   13c40:	d911      	bls.n	13c66 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   13c42:	2374      	movs	r3, #116	; 0x74
   13c44:	18fb      	adds	r3, r7, r3
   13c46:	226e      	movs	r2, #110	; 0x6e
   13c48:	18ba      	adds	r2, r7, r2
   13c4a:	8812      	ldrh	r2, [r2, #0]
   13c4c:	213c      	movs	r1, #60	; 0x3c
   13c4e:	1a8a      	subs	r2, r1, r2
   13c50:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   13c52:	2374      	movs	r3, #116	; 0x74
   13c54:	18fb      	adds	r3, r7, r3
   13c56:	881a      	ldrh	r2, [r3, #0]
   13c58:	68b9      	ldr	r1, [r7, #8]
   13c5a:	2324      	movs	r3, #36	; 0x24
   13c5c:	18fb      	adds	r3, r7, r3
   13c5e:	0018      	movs	r0, r3
   13c60:	4b60      	ldr	r3, [pc, #384]	; (13de4 <rename_to_unique+0x298>)
   13c62:	4798      	blx	r3
   13c64:	e02a      	b.n	13cbc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   13c66:	6eba      	ldr	r2, [r7, #104]	; 0x68
   13c68:	68bb      	ldr	r3, [r7, #8]
   13c6a:	1ad2      	subs	r2, r2, r3
   13c6c:	2374      	movs	r3, #116	; 0x74
   13c6e:	18fb      	adds	r3, r7, r3
   13c70:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   13c72:	2374      	movs	r3, #116	; 0x74
   13c74:	18fb      	adds	r3, r7, r3
   13c76:	881a      	ldrh	r2, [r3, #0]
   13c78:	68b9      	ldr	r1, [r7, #8]
   13c7a:	2324      	movs	r3, #36	; 0x24
   13c7c:	18fb      	adds	r3, r7, r3
   13c7e:	0018      	movs	r0, r3
   13c80:	4b58      	ldr	r3, [pc, #352]	; (13de4 <rename_to_unique+0x298>)
   13c82:	4798      	blx	r3
   13c84:	e01a      	b.n	13cbc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   13c86:	2374      	movs	r3, #116	; 0x74
   13c88:	18fb      	adds	r3, r7, r3
   13c8a:	223c      	movs	r2, #60	; 0x3c
   13c8c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   13c8e:	2374      	movs	r3, #116	; 0x74
   13c90:	18fb      	adds	r3, r7, r3
   13c92:	881a      	ldrh	r2, [r3, #0]
   13c94:	68b9      	ldr	r1, [r7, #8]
   13c96:	2324      	movs	r3, #36	; 0x24
   13c98:	18fb      	adds	r3, r7, r3
   13c9a:	0018      	movs	r0, r3
   13c9c:	4b51      	ldr	r3, [pc, #324]	; (13de4 <rename_to_unique+0x298>)
   13c9e:	4798      	blx	r3
   13ca0:	e00c      	b.n	13cbc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   13ca2:	2374      	movs	r3, #116	; 0x74
   13ca4:	18fb      	adds	r3, r7, r3
   13ca6:	223c      	movs	r2, #60	; 0x3c
   13ca8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   13caa:	2374      	movs	r3, #116	; 0x74
   13cac:	18fb      	adds	r3, r7, r3
   13cae:	881a      	ldrh	r2, [r3, #0]
   13cb0:	68b9      	ldr	r1, [r7, #8]
   13cb2:	2324      	movs	r3, #36	; 0x24
   13cb4:	18fb      	adds	r3, r7, r3
   13cb6:	0018      	movs	r0, r3
   13cb8:	4b4a      	ldr	r3, [pc, #296]	; (13de4 <rename_to_unique+0x298>)
   13cba:	4798      	blx	r3
    }

    name[name_len++] = '-';
   13cbc:	2374      	movs	r3, #116	; 0x74
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	881b      	ldrh	r3, [r3, #0]
   13cc2:	2274      	movs	r2, #116	; 0x74
   13cc4:	18ba      	adds	r2, r7, r2
   13cc6:	1c59      	adds	r1, r3, #1
   13cc8:	8011      	strh	r1, [r2, #0]
   13cca:	001a      	movs	r2, r3
   13ccc:	2324      	movs	r3, #36	; 0x24
   13cce:	18fb      	adds	r3, r7, r3
   13cd0:	212d      	movs	r1, #45	; 0x2d
   13cd2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   13cd4:	2376      	movs	r3, #118	; 0x76
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	2200      	movs	r2, #0
   13cda:	801a      	strh	r2, [r3, #0]
   13cdc:	2372      	movs	r3, #114	; 0x72
   13cde:	18fb      	adds	r3, r7, r3
   13ce0:	2201      	movs	r2, #1
   13ce2:	801a      	strh	r2, [r3, #0]
   13ce4:	e010      	b.n	13d08 <rename_to_unique+0x1bc>
        count *= 10;
   13ce6:	2372      	movs	r3, #114	; 0x72
   13ce8:	18fa      	adds	r2, r7, r3
   13cea:	2372      	movs	r3, #114	; 0x72
   13cec:	18fb      	adds	r3, r7, r3
   13cee:	881b      	ldrh	r3, [r3, #0]
   13cf0:	1c19      	adds	r1, r3, #0
   13cf2:	0089      	lsls	r1, r1, #2
   13cf4:	18cb      	adds	r3, r1, r3
   13cf6:	18db      	adds	r3, r3, r3
   13cf8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   13cfa:	2376      	movs	r3, #118	; 0x76
   13cfc:	18fb      	adds	r3, r7, r3
   13cfe:	881a      	ldrh	r2, [r3, #0]
   13d00:	2376      	movs	r3, #118	; 0x76
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	3201      	adds	r2, #1
   13d06:	801a      	strh	r2, [r3, #0]
   13d08:	2376      	movs	r3, #118	; 0x76
   13d0a:	18fb      	adds	r3, r7, r3
   13d0c:	881b      	ldrh	r3, [r3, #0]
   13d0e:	2b02      	cmp	r3, #2
   13d10:	d9e9      	bls.n	13ce6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   13d12:	2376      	movs	r3, #118	; 0x76
   13d14:	18fb      	adds	r3, r7, r3
   13d16:	2201      	movs	r2, #1
   13d18:	801a      	strh	r2, [r3, #0]
   13d1a:	e04b      	b.n	13db4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   13d1c:	2376      	movs	r3, #118	; 0x76
   13d1e:	18fb      	adds	r3, r7, r3
   13d20:	881a      	ldrh	r2, [r3, #0]
   13d22:	4931      	ldr	r1, [pc, #196]	; (13de8 <rename_to_unique+0x29c>)
   13d24:	2314      	movs	r3, #20
   13d26:	18fb      	adds	r3, r7, r3
   13d28:	0018      	movs	r0, r3
   13d2a:	4b30      	ldr	r3, [pc, #192]	; (13dec <rename_to_unique+0x2a0>)
   13d2c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   13d2e:	2374      	movs	r3, #116	; 0x74
   13d30:	18fb      	adds	r3, r7, r3
   13d32:	881b      	ldrh	r3, [r3, #0]
   13d34:	2224      	movs	r2, #36	; 0x24
   13d36:	18ba      	adds	r2, r7, r2
   13d38:	18d3      	adds	r3, r2, r3
   13d3a:	2214      	movs	r2, #20
   13d3c:	18b9      	adds	r1, r7, r2
   13d3e:	2203      	movs	r2, #3
   13d40:	0018      	movs	r0, r3
   13d42:	4b28      	ldr	r3, [pc, #160]	; (13de4 <rename_to_unique+0x298>)
   13d44:	4798      	blx	r3
        if (valid_ext) {
   13d46:	2371      	movs	r3, #113	; 0x71
   13d48:	18fb      	adds	r3, r7, r3
   13d4a:	781b      	ldrb	r3, [r3, #0]
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d00c      	beq.n	13d6a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   13d50:	2374      	movs	r3, #116	; 0x74
   13d52:	18fb      	adds	r3, r7, r3
   13d54:	881b      	ldrh	r3, [r3, #0]
   13d56:	3303      	adds	r3, #3
   13d58:	2224      	movs	r2, #36	; 0x24
   13d5a:	18ba      	adds	r2, r7, r2
   13d5c:	18d3      	adds	r3, r2, r3
   13d5e:	2218      	movs	r2, #24
   13d60:	18ba      	adds	r2, r7, r2
   13d62:	0011      	movs	r1, r2
   13d64:	0018      	movs	r0, r3
   13d66:	4b1e      	ldr	r3, [pc, #120]	; (13de0 <rename_to_unique+0x294>)
   13d68:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   13d6a:	2324      	movs	r3, #36	; 0x24
   13d6c:	18fa      	adds	r2, r7, r3
   13d6e:	68fb      	ldr	r3, [r7, #12]
   13d70:	0011      	movs	r1, r2
   13d72:	0018      	movs	r0, r3
   13d74:	4b17      	ldr	r3, [pc, #92]	; (13dd4 <rename_to_unique+0x288>)
   13d76:	4798      	blx	r3
   13d78:	0003      	movs	r3, r0
   13d7a:	001a      	movs	r2, r3
   13d7c:	2301      	movs	r3, #1
   13d7e:	4053      	eors	r3, r2
   13d80:	b2db      	uxtb	r3, r3
   13d82:	2b00      	cmp	r3, #0
   13d84:	d00f      	beq.n	13da6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   13d86:	1dfb      	adds	r3, r7, #7
   13d88:	781a      	ldrb	r2, [r3, #0]
   13d8a:	68bb      	ldr	r3, [r7, #8]
   13d8c:	2100      	movs	r1, #0
   13d8e:	0018      	movs	r0, r3
   13d90:	4b0f      	ldr	r3, [pc, #60]	; (13dd0 <rename_to_unique+0x284>)
   13d92:	4798      	blx	r3
            strcpy(file_path_name, name);
   13d94:	2324      	movs	r3, #36	; 0x24
   13d96:	18fa      	adds	r2, r7, r3
   13d98:	68bb      	ldr	r3, [r7, #8]
   13d9a:	0011      	movs	r1, r2
   13d9c:	0018      	movs	r0, r3
   13d9e:	4b10      	ldr	r3, [pc, #64]	; (13de0 <rename_to_unique+0x294>)
   13da0:	4798      	blx	r3
            return true;
   13da2:	2301      	movs	r3, #1
   13da4:	e00f      	b.n	13dc6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   13da6:	2376      	movs	r3, #118	; 0x76
   13da8:	18fb      	adds	r3, r7, r3
   13daa:	881a      	ldrh	r2, [r3, #0]
   13dac:	2376      	movs	r3, #118	; 0x76
   13dae:	18fb      	adds	r3, r7, r3
   13db0:	3201      	adds	r2, #1
   13db2:	801a      	strh	r2, [r3, #0]
   13db4:	2376      	movs	r3, #118	; 0x76
   13db6:	18fa      	adds	r2, r7, r3
   13db8:	2372      	movs	r3, #114	; 0x72
   13dba:	18fb      	adds	r3, r7, r3
   13dbc:	8812      	ldrh	r2, [r2, #0]
   13dbe:	881b      	ldrh	r3, [r3, #0]
   13dc0:	429a      	cmp	r2, r3
   13dc2:	d3ab      	bcc.n	13d1c <rename_to_unique+0x1d0>
        }
    }
    return false;
   13dc4:	2300      	movs	r3, #0
}
   13dc6:	0018      	movs	r0, r3
   13dc8:	46bd      	mov	sp, r7
   13dca:	b01e      	add	sp, #120	; 0x78
   13dcc:	bd80      	pop	{r7, pc}
   13dce:	46c0      	nop			; (mov r8, r8)
   13dd0:	00032203 	.word	0x00032203
   13dd4:	00013af5 	.word	0x00013af5
   13dd8:	000325bb 	.word	0x000325bb
   13ddc:	00032615 	.word	0x00032615
   13de0:	0003256f 	.word	0x0003256f
   13de4:	000325eb 	.word	0x000325eb
   13de8:	0003387c 	.word	0x0003387c
   13dec:	000324c1 	.word	0x000324c1

00013df0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   13df0:	b590      	push	{r4, r7, lr}
   13df2:	b085      	sub	sp, #20
   13df4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   13df6:	2001      	movs	r0, #1
   13df8:	4b23      	ldr	r3, [pc, #140]	; (13e88 <start_download+0x98>)
   13dfa:	4798      	blx	r3
   13dfc:	0003      	movs	r3, r0
   13dfe:	001a      	movs	r2, r3
   13e00:	2301      	movs	r3, #1
   13e02:	4053      	eors	r3, r2
   13e04:	b2db      	uxtb	r3, r3
   13e06:	2b00      	cmp	r3, #0
   13e08:	d005      	beq.n	13e16 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   13e0a:	4b20      	ldr	r3, [pc, #128]	; (13e8c <start_download+0x9c>)
   13e0c:	0019      	movs	r1, r3
   13e0e:	2001      	movs	r0, #1
   13e10:	4b1f      	ldr	r3, [pc, #124]	; (13e90 <start_download+0xa0>)
   13e12:	4798      	blx	r3
        return;
   13e14:	e034      	b.n	13e80 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   13e16:	2002      	movs	r0, #2
   13e18:	4b1b      	ldr	r3, [pc, #108]	; (13e88 <start_download+0x98>)
   13e1a:	4798      	blx	r3
   13e1c:	0003      	movs	r3, r0
   13e1e:	001a      	movs	r2, r3
   13e20:	2301      	movs	r3, #1
   13e22:	4053      	eors	r3, r2
   13e24:	b2db      	uxtb	r3, r3
   13e26:	2b00      	cmp	r3, #0
   13e28:	d005      	beq.n	13e36 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   13e2a:	4b1a      	ldr	r3, [pc, #104]	; (13e94 <start_download+0xa4>)
   13e2c:	0019      	movs	r1, r3
   13e2e:	2001      	movs	r0, #1
   13e30:	4b17      	ldr	r3, [pc, #92]	; (13e90 <start_download+0xa0>)
   13e32:	4798      	blx	r3
        return;
   13e34:	e024      	b.n	13e80 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
   13e36:	2004      	movs	r0, #4
   13e38:	4b13      	ldr	r3, [pc, #76]	; (13e88 <start_download+0x98>)
   13e3a:	4798      	blx	r3
   13e3c:	1e03      	subs	r3, r0, #0
   13e3e:	d005      	beq.n	13e4c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   13e40:	4b15      	ldr	r3, [pc, #84]	; (13e98 <start_download+0xa8>)
   13e42:	0019      	movs	r1, r3
   13e44:	2001      	movs	r0, #1
   13e46:	4b12      	ldr	r3, [pc, #72]	; (13e90 <start_download+0xa0>)
   13e48:	4798      	blx	r3
        return;
   13e4a:	e019      	b.n	13e80 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
   13e4c:	2008      	movs	r0, #8
   13e4e:	4b0e      	ldr	r3, [pc, #56]	; (13e88 <start_download+0x98>)
   13e50:	4798      	blx	r3
   13e52:	1e03      	subs	r3, r0, #0
   13e54:	d005      	beq.n	13e62 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   13e56:	4b11      	ldr	r3, [pc, #68]	; (13e9c <start_download+0xac>)
   13e58:	0019      	movs	r1, r3
   13e5a:	2001      	movs	r0, #1
   13e5c:	4b0c      	ldr	r3, [pc, #48]	; (13e90 <start_download+0xa0>)
   13e5e:	4798      	blx	r3
        return;
   13e60:	e00e      	b.n	13e80 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   13e62:	4b0f      	ldr	r3, [pc, #60]	; (13ea0 <start_download+0xb0>)
   13e64:	0019      	movs	r1, r3
   13e66:	2001      	movs	r0, #1
   13e68:	4b09      	ldr	r3, [pc, #36]	; (13e90 <start_download+0xa0>)
   13e6a:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   13e6c:	490d      	ldr	r1, [pc, #52]	; (13ea4 <start_download+0xb4>)
   13e6e:	480e      	ldr	r0, [pc, #56]	; (13ea8 <start_download+0xb8>)
   13e70:	2300      	movs	r3, #0
   13e72:	9300      	str	r3, [sp, #0]
   13e74:	2300      	movs	r3, #0
   13e76:	2201      	movs	r2, #1
   13e78:	4c0c      	ldr	r4, [pc, #48]	; (13eac <start_download+0xbc>)
   13e7a:	47a0      	blx	r4
   13e7c:	0003      	movs	r3, r0
   13e7e:	607b      	str	r3, [r7, #4]
}
   13e80:	46bd      	mov	sp, r7
   13e82:	b003      	add	sp, #12
   13e84:	bd90      	pop	{r4, r7, pc}
   13e86:	46c0      	nop			; (mov r8, r8)
   13e88:	00013ac9 	.word	0x00013ac9
   13e8c:	00033884 	.word	0x00033884
   13e90:	0001baa5 	.word	0x0001baa5
   13e94:	000338b0 	.word	0x000338b0
   13e98:	000338dc 	.word	0x000338dc
   13e9c:	00033908 	.word	0x00033908
   13ea0:	00033934 	.word	0x00033934
   13ea4:	00033960 	.word	0x00033960
   13ea8:	20004278 	.word	0x20004278
   13eac:	0002eba5 	.word	0x0002eba5

00013eb0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   13eb0:	b5b0      	push	{r4, r5, r7, lr}
   13eb2:	b086      	sub	sp, #24
   13eb4:	af00      	add	r7, sp, #0
   13eb6:	6078      	str	r0, [r7, #4]
   13eb8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   13eba:	687b      	ldr	r3, [r7, #4]
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	d002      	beq.n	13ec6 <store_file_packet+0x16>
   13ec0:	683b      	ldr	r3, [r7, #0]
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d105      	bne.n	13ed2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   13ec6:	4b58      	ldr	r3, [pc, #352]	; (14028 <store_file_packet+0x178>)
   13ec8:	0019      	movs	r1, r3
   13eca:	2001      	movs	r0, #1
   13ecc:	4b57      	ldr	r3, [pc, #348]	; (1402c <store_file_packet+0x17c>)
   13ece:	4798      	blx	r3
        return;
   13ed0:	e0a6      	b.n	14020 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   13ed2:	2008      	movs	r0, #8
   13ed4:	4b56      	ldr	r3, [pc, #344]	; (14030 <store_file_packet+0x180>)
   13ed6:	4798      	blx	r3
   13ed8:	0003      	movs	r3, r0
   13eda:	001a      	movs	r2, r3
   13edc:	2301      	movs	r3, #1
   13ede:	4053      	eors	r3, r2
   13ee0:	b2db      	uxtb	r3, r3
   13ee2:	2b00      	cmp	r3, #0
   13ee4:	d055      	beq.n	13f92 <store_file_packet+0xe2>
        char *cp = NULL;
   13ee6:	2300      	movs	r3, #0
   13ee8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   13eea:	4b52      	ldr	r3, [pc, #328]	; (14034 <store_file_packet+0x184>)
   13eec:	2230      	movs	r2, #48	; 0x30
   13eee:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   13ef0:	4b50      	ldr	r3, [pc, #320]	; (14034 <store_file_packet+0x184>)
   13ef2:	223a      	movs	r2, #58	; 0x3a
   13ef4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   13ef6:	4b50      	ldr	r3, [pc, #320]	; (14038 <store_file_packet+0x188>)
   13ef8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   13efa:	e002      	b.n	13f02 <store_file_packet+0x52>
            cp--;
   13efc:	697b      	ldr	r3, [r7, #20]
   13efe:	3b01      	subs	r3, #1
   13f00:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   13f02:	697b      	ldr	r3, [r7, #20]
   13f04:	781b      	ldrb	r3, [r3, #0]
   13f06:	2b2f      	cmp	r3, #47	; 0x2f
   13f08:	d1f8      	bne.n	13efc <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   13f0a:	697b      	ldr	r3, [r7, #20]
   13f0c:	0018      	movs	r0, r3
   13f0e:	4b4b      	ldr	r3, [pc, #300]	; (1403c <store_file_packet+0x18c>)
   13f10:	4798      	blx	r3
   13f12:	0003      	movs	r3, r0
   13f14:	2b01      	cmp	r3, #1
   13f16:	d924      	bls.n	13f62 <store_file_packet+0xb2>
            cp++;
   13f18:	697b      	ldr	r3, [r7, #20]
   13f1a:	3301      	adds	r3, #1
   13f1c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   13f1e:	697a      	ldr	r2, [r7, #20]
   13f20:	4b47      	ldr	r3, [pc, #284]	; (14040 <store_file_packet+0x190>)
   13f22:	0011      	movs	r1, r2
   13f24:	0018      	movs	r0, r3
   13f26:	4b47      	ldr	r3, [pc, #284]	; (14044 <store_file_packet+0x194>)
   13f28:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   13f2a:	4942      	ldr	r1, [pc, #264]	; (14034 <store_file_packet+0x184>)
   13f2c:	4b46      	ldr	r3, [pc, #280]	; (14048 <store_file_packet+0x198>)
   13f2e:	2240      	movs	r2, #64	; 0x40
   13f30:	0018      	movs	r0, r3
   13f32:	4b46      	ldr	r3, [pc, #280]	; (1404c <store_file_packet+0x19c>)
   13f34:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   13f36:	4a3f      	ldr	r2, [pc, #252]	; (14034 <store_file_packet+0x184>)
   13f38:	4b45      	ldr	r3, [pc, #276]	; (14050 <store_file_packet+0x1a0>)
   13f3a:	0019      	movs	r1, r3
   13f3c:	2001      	movs	r0, #1
   13f3e:	4b3b      	ldr	r3, [pc, #236]	; (1402c <store_file_packet+0x17c>)
   13f40:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   13f42:	2313      	movs	r3, #19
   13f44:	18fc      	adds	r4, r7, r3
   13f46:	493b      	ldr	r1, [pc, #236]	; (14034 <store_file_packet+0x184>)
   13f48:	4b3f      	ldr	r3, [pc, #252]	; (14048 <store_file_packet+0x198>)
   13f4a:	220a      	movs	r2, #10
   13f4c:	0018      	movs	r0, r3
   13f4e:	4b41      	ldr	r3, [pc, #260]	; (14054 <store_file_packet+0x1a4>)
   13f50:	4798      	blx	r3
   13f52:	0003      	movs	r3, r0
   13f54:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   13f56:	2313      	movs	r3, #19
   13f58:	18fb      	adds	r3, r7, r3
   13f5a:	781b      	ldrb	r3, [r3, #0]
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d012      	beq.n	13f86 <store_file_packet+0xd6>
   13f60:	e008      	b.n	13f74 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   13f62:	4b3d      	ldr	r3, [pc, #244]	; (14058 <store_file_packet+0x1a8>)
   13f64:	0019      	movs	r1, r3
   13f66:	2001      	movs	r0, #1
   13f68:	4b30      	ldr	r3, [pc, #192]	; (1402c <store_file_packet+0x17c>)
   13f6a:	4798      	blx	r3
            add_state(CANCELED);
   13f6c:	2020      	movs	r0, #32
   13f6e:	4b3b      	ldr	r3, [pc, #236]	; (1405c <store_file_packet+0x1ac>)
   13f70:	4798      	blx	r3
            return;
   13f72:	e055      	b.n	14020 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   13f74:	2313      	movs	r3, #19
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	781a      	ldrb	r2, [r3, #0]
   13f7a:	4b39      	ldr	r3, [pc, #228]	; (14060 <store_file_packet+0x1b0>)
   13f7c:	0019      	movs	r1, r3
   13f7e:	2001      	movs	r0, #1
   13f80:	4b2a      	ldr	r3, [pc, #168]	; (1402c <store_file_packet+0x17c>)
   13f82:	4798      	blx	r3
            return;
   13f84:	e04c      	b.n	14020 <store_file_packet+0x170>
        }

        received_file_size = 0;
   13f86:	4b37      	ldr	r3, [pc, #220]	; (14064 <store_file_packet+0x1b4>)
   13f88:	2200      	movs	r2, #0
   13f8a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   13f8c:	2008      	movs	r0, #8
   13f8e:	4b33      	ldr	r3, [pc, #204]	; (1405c <store_file_packet+0x1ac>)
   13f90:	4798      	blx	r3
    }

    if (data != NULL) {
   13f92:	687b      	ldr	r3, [r7, #4]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d043      	beq.n	14020 <store_file_packet+0x170>
        UINT wsize = 0;
   13f98:	2300      	movs	r3, #0
   13f9a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   13f9c:	2313      	movs	r3, #19
   13f9e:	18fc      	adds	r4, r7, r3
   13fa0:	230c      	movs	r3, #12
   13fa2:	18fb      	adds	r3, r7, r3
   13fa4:	683a      	ldr	r2, [r7, #0]
   13fa6:	6879      	ldr	r1, [r7, #4]
   13fa8:	4827      	ldr	r0, [pc, #156]	; (14048 <store_file_packet+0x198>)
   13faa:	4d2f      	ldr	r5, [pc, #188]	; (14068 <store_file_packet+0x1b8>)
   13fac:	47a8      	blx	r5
   13fae:	0003      	movs	r3, r0
   13fb0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   13fb2:	2313      	movs	r3, #19
   13fb4:	18fb      	adds	r3, r7, r3
   13fb6:	781b      	ldrb	r3, [r3, #0]
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d00c      	beq.n	13fd6 <store_file_packet+0x126>
            f_close(&file_object);
   13fbc:	4b22      	ldr	r3, [pc, #136]	; (14048 <store_file_packet+0x198>)
   13fbe:	0018      	movs	r0, r3
   13fc0:	4b2a      	ldr	r3, [pc, #168]	; (1406c <store_file_packet+0x1bc>)
   13fc2:	4798      	blx	r3
            add_state(CANCELED);
   13fc4:	2020      	movs	r0, #32
   13fc6:	4b25      	ldr	r3, [pc, #148]	; (1405c <store_file_packet+0x1ac>)
   13fc8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   13fca:	4b29      	ldr	r3, [pc, #164]	; (14070 <store_file_packet+0x1c0>)
   13fcc:	0019      	movs	r1, r3
   13fce:	2001      	movs	r0, #1
   13fd0:	4b16      	ldr	r3, [pc, #88]	; (1402c <store_file_packet+0x17c>)
   13fd2:	4798      	blx	r3
            return;
   13fd4:	e024      	b.n	14020 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   13fd6:	4b23      	ldr	r3, [pc, #140]	; (14064 <store_file_packet+0x1b4>)
   13fd8:	681a      	ldr	r2, [r3, #0]
   13fda:	68fb      	ldr	r3, [r7, #12]
   13fdc:	18d2      	adds	r2, r2, r3
   13fde:	4b21      	ldr	r3, [pc, #132]	; (14064 <store_file_packet+0x1b4>)
   13fe0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   13fe2:	4b20      	ldr	r3, [pc, #128]	; (14064 <store_file_packet+0x1b4>)
   13fe4:	681a      	ldr	r2, [r3, #0]
   13fe6:	4b23      	ldr	r3, [pc, #140]	; (14074 <store_file_packet+0x1c4>)
   13fe8:	681b      	ldr	r3, [r3, #0]
   13fea:	4923      	ldr	r1, [pc, #140]	; (14078 <store_file_packet+0x1c8>)
   13fec:	2001      	movs	r0, #1
   13fee:	4c0f      	ldr	r4, [pc, #60]	; (1402c <store_file_packet+0x17c>)
   13ff0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   13ff2:	4b1c      	ldr	r3, [pc, #112]	; (14064 <store_file_packet+0x1b4>)
   13ff4:	681a      	ldr	r2, [r3, #0]
   13ff6:	4b1f      	ldr	r3, [pc, #124]	; (14074 <store_file_packet+0x1c4>)
   13ff8:	681b      	ldr	r3, [r3, #0]
   13ffa:	429a      	cmp	r2, r3
   13ffc:	d310      	bcc.n	14020 <store_file_packet+0x170>
            f_close(&file_object);
   13ffe:	4b12      	ldr	r3, [pc, #72]	; (14048 <store_file_packet+0x198>)
   14000:	0018      	movs	r0, r3
   14002:	4b1a      	ldr	r3, [pc, #104]	; (1406c <store_file_packet+0x1bc>)
   14004:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   14006:	4b1d      	ldr	r3, [pc, #116]	; (1407c <store_file_packet+0x1cc>)
   14008:	0019      	movs	r1, r3
   1400a:	2001      	movs	r0, #1
   1400c:	4b07      	ldr	r3, [pc, #28]	; (1402c <store_file_packet+0x17c>)
   1400e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   14010:	2100      	movs	r1, #0
   14012:	2017      	movs	r0, #23
   14014:	4b1a      	ldr	r3, [pc, #104]	; (14080 <store_file_packet+0x1d0>)
   14016:	4798      	blx	r3
            add_state(COMPLETED);
   14018:	2010      	movs	r0, #16
   1401a:	4b10      	ldr	r3, [pc, #64]	; (1405c <store_file_packet+0x1ac>)
   1401c:	4798      	blx	r3
            return;
   1401e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   14020:	46bd      	mov	sp, r7
   14022:	b006      	add	sp, #24
   14024:	bdb0      	pop	{r4, r5, r7, pc}
   14026:	46c0      	nop			; (mov r8, r8)
   14028:	00033980 	.word	0x00033980
   1402c:	0001baa5 	.word	0x0001baa5
   14030:	00013ac9 	.word	0x00013ac9
   14034:	20000094 	.word	0x20000094
   14038:	0003397e 	.word	0x0003397e
   1403c:	000325bb 	.word	0x000325bb
   14040:	20000096 	.word	0x20000096
   14044:	0003256f 	.word	0x0003256f
   14048:	200006ac 	.word	0x200006ac
   1404c:	00013b4d 	.word	0x00013b4d
   14050:	000339e4 	.word	0x000339e4
   14054:	0002b551 	.word	0x0002b551
   14058:	000339a4 	.word	0x000339a4
   1405c:	00013aa1 	.word	0x00013aa1
   14060:	00033a0c 	.word	0x00033a0c
   14064:	200006d4 	.word	0x200006d4
   14068:	0002ba81 	.word	0x0002ba81
   1406c:	0002bf51 	.word	0x0002bf51
   14070:	00033a40 	.word	0x00033a40
   14074:	200006d0 	.word	0x200006d0
   14078:	00033a7c 	.word	0x00033a7c
   1407c:	00033ab0 	.word	0x00033ab0
   14080:	000139c9 	.word	0x000139c9

00014084 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14084:	b590      	push	{r4, r7, lr}
   14086:	b085      	sub	sp, #20
   14088:	af00      	add	r7, sp, #0
   1408a:	60f8      	str	r0, [r7, #12]
   1408c:	60b9      	str	r1, [r7, #8]
   1408e:	607a      	str	r2, [r7, #4]
    switch (type) {
   14090:	68bb      	ldr	r3, [r7, #8]
   14092:	2b04      	cmp	r3, #4
   14094:	d900      	bls.n	14098 <http_client_callback+0x14>
   14096:	e077      	b.n	14188 <http_client_callback+0x104>
   14098:	68bb      	ldr	r3, [r7, #8]
   1409a:	009a      	lsls	r2, r3, #2
   1409c:	4b3c      	ldr	r3, [pc, #240]	; (14190 <http_client_callback+0x10c>)
   1409e:	18d3      	adds	r3, r2, r3
   140a0:	681b      	ldr	r3, [r3, #0]
   140a2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   140a4:	4b3b      	ldr	r3, [pc, #236]	; (14194 <http_client_callback+0x110>)
   140a6:	0019      	movs	r1, r3
   140a8:	2001      	movs	r0, #1
   140aa:	4b3b      	ldr	r3, [pc, #236]	; (14198 <http_client_callback+0x114>)
   140ac:	4798      	blx	r3
            break;
   140ae:	e06b      	b.n	14188 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   140b0:	4b3a      	ldr	r3, [pc, #232]	; (1419c <http_client_callback+0x118>)
   140b2:	0019      	movs	r1, r3
   140b4:	2001      	movs	r0, #1
   140b6:	4b38      	ldr	r3, [pc, #224]	; (14198 <http_client_callback+0x114>)
   140b8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   140ba:	2004      	movs	r0, #4
   140bc:	4b38      	ldr	r3, [pc, #224]	; (141a0 <http_client_callback+0x11c>)
   140be:	4798      	blx	r3
            break;
   140c0:	e062      	b.n	14188 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   140c2:	687b      	ldr	r3, [r7, #4]
   140c4:	881b      	ldrh	r3, [r3, #0]
   140c6:	001a      	movs	r2, r3
   140c8:	687b      	ldr	r3, [r7, #4]
   140ca:	685b      	ldr	r3, [r3, #4]
   140cc:	4935      	ldr	r1, [pc, #212]	; (141a4 <http_client_callback+0x120>)
   140ce:	2001      	movs	r0, #1
   140d0:	4c31      	ldr	r4, [pc, #196]	; (14198 <http_client_callback+0x114>)
   140d2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   140d4:	687b      	ldr	r3, [r7, #4]
   140d6:	881b      	ldrh	r3, [r3, #0]
   140d8:	2bc8      	cmp	r3, #200	; 0xc8
   140da:	d10d      	bne.n	140f8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   140dc:	687b      	ldr	r3, [r7, #4]
   140de:	685a      	ldr	r2, [r3, #4]
   140e0:	4b31      	ldr	r3, [pc, #196]	; (141a8 <http_client_callback+0x124>)
   140e2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   140e4:	4b31      	ldr	r3, [pc, #196]	; (141ac <http_client_callback+0x128>)
   140e6:	2200      	movs	r2, #0
   140e8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   140ea:	687b      	ldr	r3, [r7, #4]
   140ec:	685a      	ldr	r2, [r3, #4]
   140ee:	2380      	movs	r3, #128	; 0x80
   140f0:	009b      	lsls	r3, r3, #2
   140f2:	429a      	cmp	r2, r3
   140f4:	d843      	bhi.n	1417e <http_client_callback+0xfa>
   140f6:	e003      	b.n	14100 <http_client_callback+0x7c>
                add_state(CANCELED);
   140f8:	2020      	movs	r0, #32
   140fa:	4b29      	ldr	r3, [pc, #164]	; (141a0 <http_client_callback+0x11c>)
   140fc:	4798      	blx	r3
                return;
   140fe:	e043      	b.n	14188 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14100:	687b      	ldr	r3, [r7, #4]
   14102:	689a      	ldr	r2, [r3, #8]
   14104:	687b      	ldr	r3, [r7, #4]
   14106:	685b      	ldr	r3, [r3, #4]
   14108:	0019      	movs	r1, r3
   1410a:	0010      	movs	r0, r2
   1410c:	4b28      	ldr	r3, [pc, #160]	; (141b0 <http_client_callback+0x12c>)
   1410e:	4798      	blx	r3
                add_state(COMPLETED);
   14110:	2010      	movs	r0, #16
   14112:	4b23      	ldr	r3, [pc, #140]	; (141a0 <http_client_callback+0x11c>)
   14114:	4798      	blx	r3
            }
            break;
   14116:	e032      	b.n	1417e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14118:	687b      	ldr	r3, [r7, #4]
   1411a:	685a      	ldr	r2, [r3, #4]
   1411c:	687b      	ldr	r3, [r7, #4]
   1411e:	681b      	ldr	r3, [r3, #0]
   14120:	0019      	movs	r1, r3
   14122:	0010      	movs	r0, r2
   14124:	4b22      	ldr	r3, [pc, #136]	; (141b0 <http_client_callback+0x12c>)
   14126:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   14128:	687b      	ldr	r3, [r7, #4]
   1412a:	7a1b      	ldrb	r3, [r3, #8]
   1412c:	2b00      	cmp	r3, #0
   1412e:	d028      	beq.n	14182 <http_client_callback+0xfe>
                add_state(COMPLETED);
   14130:	2010      	movs	r0, #16
   14132:	4b1b      	ldr	r3, [pc, #108]	; (141a0 <http_client_callback+0x11c>)
   14134:	4798      	blx	r3
            }

            break;
   14136:	e024      	b.n	14182 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14138:	687b      	ldr	r3, [r7, #4]
   1413a:	681a      	ldr	r2, [r3, #0]
   1413c:	4b1d      	ldr	r3, [pc, #116]	; (141b4 <http_client_callback+0x130>)
   1413e:	0019      	movs	r1, r3
   14140:	2001      	movs	r0, #1
   14142:	4b15      	ldr	r3, [pc, #84]	; (14198 <http_client_callback+0x114>)
   14144:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   14146:	687b      	ldr	r3, [r7, #4]
   14148:	681b      	ldr	r3, [r3, #0]
   1414a:	330b      	adds	r3, #11
   1414c:	d11b      	bne.n	14186 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1414e:	2008      	movs	r0, #8
   14150:	4b19      	ldr	r3, [pc, #100]	; (141b8 <http_client_callback+0x134>)
   14152:	4798      	blx	r3
   14154:	1e03      	subs	r3, r0, #0
   14156:	d006      	beq.n	14166 <http_client_callback+0xe2>
                    f_close(&file_object);
   14158:	4b18      	ldr	r3, [pc, #96]	; (141bc <http_client_callback+0x138>)
   1415a:	0018      	movs	r0, r3
   1415c:	4b18      	ldr	r3, [pc, #96]	; (141c0 <http_client_callback+0x13c>)
   1415e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   14160:	2008      	movs	r0, #8
   14162:	4b18      	ldr	r3, [pc, #96]	; (141c4 <http_client_callback+0x140>)
   14164:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   14166:	2004      	movs	r0, #4
   14168:	4b13      	ldr	r3, [pc, #76]	; (141b8 <http_client_callback+0x134>)
   1416a:	4798      	blx	r3
   1416c:	1e03      	subs	r3, r0, #0
   1416e:	d002      	beq.n	14176 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   14170:	2004      	movs	r0, #4
   14172:	4b14      	ldr	r3, [pc, #80]	; (141c4 <http_client_callback+0x140>)
   14174:	4798      	blx	r3
                }

                start_download();
   14176:	4b14      	ldr	r3, [pc, #80]	; (141c8 <http_client_callback+0x144>)
   14178:	4798      	blx	r3
            }

            break;
   1417a:	46c0      	nop			; (mov r8, r8)
   1417c:	e003      	b.n	14186 <http_client_callback+0x102>
            break;
   1417e:	46c0      	nop			; (mov r8, r8)
   14180:	e002      	b.n	14188 <http_client_callback+0x104>
            break;
   14182:	46c0      	nop			; (mov r8, r8)
   14184:	e000      	b.n	14188 <http_client_callback+0x104>
            break;
   14186:	46c0      	nop			; (mov r8, r8)
    }
}
   14188:	46bd      	mov	sp, r7
   1418a:	b005      	add	sp, #20
   1418c:	bd90      	pop	{r4, r7, pc}
   1418e:	46c0      	nop			; (mov r8, r8)
   14190:	00034208 	.word	0x00034208
   14194:	00033ae4 	.word	0x00033ae4
   14198:	0001baa5 	.word	0x0001baa5
   1419c:	00033b1c 	.word	0x00033b1c
   141a0:	00013aa1 	.word	0x00013aa1
   141a4:	00033b48 	.word	0x00033b48
   141a8:	200006d0 	.word	0x200006d0
   141ac:	200006d4 	.word	0x200006d4
   141b0:	00013eb1 	.word	0x00013eb1
   141b4:	00033b84 	.word	0x00033b84
   141b8:	00013ac9 	.word	0x00013ac9
   141bc:	200006ac 	.word	0x200006ac
   141c0:	0002bf51 	.word	0x0002bf51
   141c4:	00013a6d 	.word	0x00013a6d
   141c8:	00013df1 	.word	0x00013df1

000141cc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   141cc:	b580      	push	{r7, lr}
   141ce:	b082      	sub	sp, #8
   141d0:	af00      	add	r7, sp, #0
   141d2:	603a      	str	r2, [r7, #0]
   141d4:	1dfb      	adds	r3, r7, #7
   141d6:	1c02      	adds	r2, r0, #0
   141d8:	701a      	strb	r2, [r3, #0]
   141da:	1dbb      	adds	r3, r7, #6
   141dc:	1c0a      	adds	r2, r1, #0
   141de:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   141e0:	683a      	ldr	r2, [r7, #0]
   141e2:	1dbb      	adds	r3, r7, #6
   141e4:	7819      	ldrb	r1, [r3, #0]
   141e6:	1dfb      	adds	r3, r7, #7
   141e8:	781b      	ldrb	r3, [r3, #0]
   141ea:	b25b      	sxtb	r3, r3
   141ec:	0018      	movs	r0, r3
   141ee:	4b03      	ldr	r3, [pc, #12]	; (141fc <socket_cb+0x30>)
   141f0:	4798      	blx	r3
}
   141f2:	46c0      	nop			; (mov r8, r8)
   141f4:	46bd      	mov	sp, r7
   141f6:	b002      	add	sp, #8
   141f8:	bd80      	pop	{r7, pc}
   141fa:	46c0      	nop			; (mov r8, r8)
   141fc:	0002e8b5 	.word	0x0002e8b5

00014200 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   14200:	b5b0      	push	{r4, r5, r7, lr}
   14202:	b086      	sub	sp, #24
   14204:	af04      	add	r7, sp, #16
   14206:	6078      	str	r0, [r7, #4]
   14208:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1420a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1420c:	22ff      	movs	r2, #255	; 0xff
   1420e:	4013      	ands	r3, r2
   14210:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   14212:	683b      	ldr	r3, [r7, #0]
   14214:	0a1b      	lsrs	r3, r3, #8
   14216:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   14218:	23ff      	movs	r3, #255	; 0xff
   1421a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1421c:	683a      	ldr	r2, [r7, #0]
   1421e:	0c12      	lsrs	r2, r2, #16
   14220:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   14222:	22ff      	movs	r2, #255	; 0xff
   14224:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   14226:	6839      	ldr	r1, [r7, #0]
   14228:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1422a:	000d      	movs	r5, r1
   1422c:	6878      	ldr	r0, [r7, #4]
   1422e:	4909      	ldr	r1, [pc, #36]	; (14254 <resolve_cb+0x54>)
   14230:	9502      	str	r5, [sp, #8]
   14232:	9201      	str	r2, [sp, #4]
   14234:	9300      	str	r3, [sp, #0]
   14236:	0023      	movs	r3, r4
   14238:	0002      	movs	r2, r0
   1423a:	2001      	movs	r0, #1
   1423c:	4c06      	ldr	r4, [pc, #24]	; (14258 <resolve_cb+0x58>)
   1423e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   14240:	683a      	ldr	r2, [r7, #0]
   14242:	687b      	ldr	r3, [r7, #4]
   14244:	0011      	movs	r1, r2
   14246:	0018      	movs	r0, r3
   14248:	4b04      	ldr	r3, [pc, #16]	; (1425c <resolve_cb+0x5c>)
   1424a:	4798      	blx	r3
}
   1424c:	46c0      	nop			; (mov r8, r8)
   1424e:	46bd      	mov	sp, r7
   14250:	b002      	add	sp, #8
   14252:	bdb0      	pop	{r4, r5, r7, pc}
   14254:	00033bb4 	.word	0x00033bb4
   14258:	0001baa5 	.word	0x0001baa5
   1425c:	0002ea19 	.word	0x0002ea19

00014260 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   14260:	b590      	push	{r4, r7, lr}
   14262:	b087      	sub	sp, #28
   14264:	af02      	add	r7, sp, #8
   14266:	0002      	movs	r2, r0
   14268:	6039      	str	r1, [r7, #0]
   1426a:	1dfb      	adds	r3, r7, #7
   1426c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1426e:	1dfb      	adds	r3, r7, #7
   14270:	781b      	ldrb	r3, [r3, #0]
   14272:	2b2c      	cmp	r3, #44	; 0x2c
   14274:	d002      	beq.n	1427c <wifi_cb+0x1c>
   14276:	2b32      	cmp	r3, #50	; 0x32
   14278:	d03d      	beq.n	142f6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1427a:	e06f      	b.n	1435c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1427c:	683b      	ldr	r3, [r7, #0]
   1427e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   14280:	68fb      	ldr	r3, [r7, #12]
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	2b01      	cmp	r3, #1
   14286:	d107      	bne.n	14298 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14288:	4b36      	ldr	r3, [pc, #216]	; (14364 <wifi_cb+0x104>)
   1428a:	0019      	movs	r1, r3
   1428c:	2001      	movs	r0, #1
   1428e:	4b36      	ldr	r3, [pc, #216]	; (14368 <wifi_cb+0x108>)
   14290:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   14292:	4b36      	ldr	r3, [pc, #216]	; (1436c <wifi_cb+0x10c>)
   14294:	4798      	blx	r3
            break;
   14296:	e05e      	b.n	14356 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   14298:	68fb      	ldr	r3, [r7, #12]
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	2b00      	cmp	r3, #0
   1429e:	d15a      	bne.n	14356 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   142a0:	4b33      	ldr	r3, [pc, #204]	; (14370 <wifi_cb+0x110>)
   142a2:	0019      	movs	r1, r3
   142a4:	2001      	movs	r0, #1
   142a6:	4b30      	ldr	r3, [pc, #192]	; (14368 <wifi_cb+0x108>)
   142a8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   142aa:	2002      	movs	r0, #2
   142ac:	4b31      	ldr	r3, [pc, #196]	; (14374 <wifi_cb+0x114>)
   142ae:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   142b0:	2008      	movs	r0, #8
   142b2:	4b31      	ldr	r3, [pc, #196]	; (14378 <wifi_cb+0x118>)
   142b4:	4798      	blx	r3
   142b6:	1e03      	subs	r3, r0, #0
   142b8:	d006      	beq.n	142c8 <wifi_cb+0x68>
                    f_close(&file_object);
   142ba:	4b30      	ldr	r3, [pc, #192]	; (1437c <wifi_cb+0x11c>)
   142bc:	0018      	movs	r0, r3
   142be:	4b30      	ldr	r3, [pc, #192]	; (14380 <wifi_cb+0x120>)
   142c0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   142c2:	2008      	movs	r0, #8
   142c4:	4b2b      	ldr	r3, [pc, #172]	; (14374 <wifi_cb+0x114>)
   142c6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   142c8:	2004      	movs	r0, #4
   142ca:	4b2b      	ldr	r3, [pc, #172]	; (14378 <wifi_cb+0x118>)
   142cc:	4798      	blx	r3
   142ce:	1e03      	subs	r3, r0, #0
   142d0:	d002      	beq.n	142d8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   142d2:	2004      	movs	r0, #4
   142d4:	4b27      	ldr	r3, [pc, #156]	; (14374 <wifi_cb+0x114>)
   142d6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   142d8:	4b2a      	ldr	r3, [pc, #168]	; (14384 <wifi_cb+0x124>)
   142da:	2101      	movs	r1, #1
   142dc:	0018      	movs	r0, r3
   142de:	4b2a      	ldr	r3, [pc, #168]	; (14388 <wifi_cb+0x128>)
   142e0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   142e2:	4a2a      	ldr	r2, [pc, #168]	; (1438c <wifi_cb+0x12c>)
   142e4:	482a      	ldr	r0, [pc, #168]	; (14390 <wifi_cb+0x130>)
   142e6:	23ff      	movs	r3, #255	; 0xff
   142e8:	9300      	str	r3, [sp, #0]
   142ea:	0013      	movs	r3, r2
   142ec:	2202      	movs	r2, #2
   142ee:	2112      	movs	r1, #18
   142f0:	4c28      	ldr	r4, [pc, #160]	; (14394 <wifi_cb+0x134>)
   142f2:	47a0      	blx	r4
            break;
   142f4:	e02f      	b.n	14356 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   142f6:	683b      	ldr	r3, [r7, #0]
   142f8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   142fa:	68bb      	ldr	r3, [r7, #8]
   142fc:	781b      	ldrb	r3, [r3, #0]
   142fe:	0018      	movs	r0, r3
   14300:	68bb      	ldr	r3, [r7, #8]
   14302:	3301      	adds	r3, #1
   14304:	781b      	ldrb	r3, [r3, #0]
   14306:	001c      	movs	r4, r3
   14308:	68bb      	ldr	r3, [r7, #8]
   1430a:	3302      	adds	r3, #2
   1430c:	781b      	ldrb	r3, [r3, #0]
   1430e:	001a      	movs	r2, r3
   14310:	68bb      	ldr	r3, [r7, #8]
   14312:	3303      	adds	r3, #3
   14314:	781b      	ldrb	r3, [r3, #0]
   14316:	4920      	ldr	r1, [pc, #128]	; (14398 <wifi_cb+0x138>)
   14318:	9301      	str	r3, [sp, #4]
   1431a:	9200      	str	r2, [sp, #0]
   1431c:	0023      	movs	r3, r4
   1431e:	0002      	movs	r2, r0
   14320:	2001      	movs	r0, #1
   14322:	4c11      	ldr	r4, [pc, #68]	; (14368 <wifi_cb+0x108>)
   14324:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   14326:	2002      	movs	r0, #2
   14328:	4b1c      	ldr	r3, [pc, #112]	; (1439c <wifi_cb+0x13c>)
   1432a:	4798      	blx	r3
            if (do_download_flag == 1) {
   1432c:	4b1c      	ldr	r3, [pc, #112]	; (143a0 <wifi_cb+0x140>)
   1432e:	781b      	ldrb	r3, [r3, #0]
   14330:	2b01      	cmp	r3, #1
   14332:	d102      	bne.n	1433a <wifi_cb+0xda>
                start_download();
   14334:	4b1b      	ldr	r3, [pc, #108]	; (143a4 <wifi_cb+0x144>)
   14336:	4798      	blx	r3
        } break;
   14338:	e00f      	b.n	1435a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1433a:	4a1b      	ldr	r2, [pc, #108]	; (143a8 <wifi_cb+0x148>)
   1433c:	4b11      	ldr	r3, [pc, #68]	; (14384 <wifi_cb+0x124>)
   1433e:	0011      	movs	r1, r2
   14340:	0018      	movs	r0, r3
   14342:	4b1a      	ldr	r3, [pc, #104]	; (143ac <wifi_cb+0x14c>)
   14344:	4798      	blx	r3
   14346:	1e03      	subs	r3, r0, #0
   14348:	d007      	beq.n	1435a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1434a:	4b19      	ldr	r3, [pc, #100]	; (143b0 <wifi_cb+0x150>)
   1434c:	0019      	movs	r1, r3
   1434e:	2001      	movs	r0, #1
   14350:	4b05      	ldr	r3, [pc, #20]	; (14368 <wifi_cb+0x108>)
   14352:	4798      	blx	r3
        } break;
   14354:	e001      	b.n	1435a <wifi_cb+0xfa>
            break;
   14356:	46c0      	nop			; (mov r8, r8)
   14358:	e000      	b.n	1435c <wifi_cb+0xfc>
        } break;
   1435a:	46c0      	nop			; (mov r8, r8)
    }
}
   1435c:	46c0      	nop			; (mov r8, r8)
   1435e:	46bd      	mov	sp, r7
   14360:	b005      	add	sp, #20
   14362:	bd90      	pop	{r4, r7, pc}
   14364:	00033be4 	.word	0x00033be4
   14368:	0001baa5 	.word	0x0001baa5
   1436c:	00020085 	.word	0x00020085
   14370:	00033c04 	.word	0x00033c04
   14374:	00013a6d 	.word	0x00013a6d
   14378:	00013ac9 	.word	0x00013ac9
   1437c:	200006ac 	.word	0x200006ac
   14380:	0002bf51 	.word	0x0002bf51
   14384:	200006d8 	.word	0x200006d8
   14388:	0002d561 	.word	0x0002d561
   1438c:	00033c28 	.word	0x00033c28
   14390:	00033c38 	.word	0x00033c38
   14394:	0001fbb1 	.word	0x0001fbb1
   14398:	00033c4c 	.word	0x00033c4c
   1439c:	00013aa1 	.word	0x00013aa1
   143a0:	20000478 	.word	0x20000478
   143a4:	00013df1 	.word	0x00013df1
   143a8:	0003386c 	.word	0x0003386c
   143ac:	0002d42d 	.word	0x0002d42d
   143b0:	00033c74 	.word	0x00033c74

000143b4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   143b4:	b590      	push	{r4, r7, lr}
   143b6:	b083      	sub	sp, #12
   143b8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   143ba:	4b29      	ldr	r3, [pc, #164]	; (14460 <init_storage+0xac>)
   143bc:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   143be:	4b29      	ldr	r3, [pc, #164]	; (14464 <init_storage+0xb0>)
   143c0:	0019      	movs	r1, r3
   143c2:	2001      	movs	r0, #1
   143c4:	4b28      	ldr	r3, [pc, #160]	; (14468 <init_storage+0xb4>)
   143c6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   143c8:	1dfc      	adds	r4, r7, #7
   143ca:	2000      	movs	r0, #0
   143cc:	4b27      	ldr	r3, [pc, #156]	; (1446c <init_storage+0xb8>)
   143ce:	4798      	blx	r3
   143d0:	0003      	movs	r3, r0
   143d2:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   143d4:	1dfb      	adds	r3, r7, #7
   143d6:	781b      	ldrb	r3, [r3, #0]
   143d8:	2b01      	cmp	r3, #1
   143da:	d110      	bne.n	143fe <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   143dc:	4b24      	ldr	r3, [pc, #144]	; (14470 <init_storage+0xbc>)
   143de:	0019      	movs	r1, r3
   143e0:	2001      	movs	r0, #1
   143e2:	4b21      	ldr	r3, [pc, #132]	; (14468 <init_storage+0xb4>)
   143e4:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   143e6:	4b23      	ldr	r3, [pc, #140]	; (14474 <init_storage+0xc0>)
   143e8:	0019      	movs	r1, r3
   143ea:	2001      	movs	r0, #1
   143ec:	4b1e      	ldr	r3, [pc, #120]	; (14468 <init_storage+0xb4>)
   143ee:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   143f0:	46c0      	nop			; (mov r8, r8)
   143f2:	2000      	movs	r0, #0
   143f4:	4b20      	ldr	r3, [pc, #128]	; (14478 <init_storage+0xc4>)
   143f6:	4798      	blx	r3
   143f8:	0003      	movs	r3, r0
   143fa:	2b02      	cmp	r3, #2
   143fc:	d1f9      	bne.n	143f2 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   143fe:	1dfb      	adds	r3, r7, #7
   14400:	781b      	ldrb	r3, [r3, #0]
   14402:	2b00      	cmp	r3, #0
   14404:	d1e0      	bne.n	143c8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   14406:	4b1d      	ldr	r3, [pc, #116]	; (1447c <init_storage+0xc8>)
   14408:	0019      	movs	r1, r3
   1440a:	2001      	movs	r0, #1
   1440c:	4b16      	ldr	r3, [pc, #88]	; (14468 <init_storage+0xb4>)
   1440e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   14410:	238c      	movs	r3, #140	; 0x8c
   14412:	009a      	lsls	r2, r3, #2
   14414:	4b1a      	ldr	r3, [pc, #104]	; (14480 <init_storage+0xcc>)
   14416:	2100      	movs	r1, #0
   14418:	0018      	movs	r0, r3
   1441a:	4b1a      	ldr	r3, [pc, #104]	; (14484 <init_storage+0xd0>)
   1441c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1441e:	1dbc      	adds	r4, r7, #6
   14420:	4b17      	ldr	r3, [pc, #92]	; (14480 <init_storage+0xcc>)
   14422:	0019      	movs	r1, r3
   14424:	2000      	movs	r0, #0
   14426:	4b18      	ldr	r3, [pc, #96]	; (14488 <init_storage+0xd4>)
   14428:	4798      	blx	r3
   1442a:	0003      	movs	r3, r0
   1442c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1442e:	1dbb      	adds	r3, r7, #6
   14430:	781b      	ldrb	r3, [r3, #0]
   14432:	2b0b      	cmp	r3, #11
   14434:	d107      	bne.n	14446 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   14436:	1dbb      	adds	r3, r7, #6
   14438:	781a      	ldrb	r2, [r3, #0]
   1443a:	4b14      	ldr	r3, [pc, #80]	; (1448c <init_storage+0xd8>)
   1443c:	0019      	movs	r1, r3
   1443e:	2001      	movs	r0, #1
   14440:	4b09      	ldr	r3, [pc, #36]	; (14468 <init_storage+0xb4>)
   14442:	4798      	blx	r3
            return;
   14444:	e008      	b.n	14458 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   14446:	4b12      	ldr	r3, [pc, #72]	; (14490 <init_storage+0xdc>)
   14448:	0019      	movs	r1, r3
   1444a:	2001      	movs	r0, #1
   1444c:	4b06      	ldr	r3, [pc, #24]	; (14468 <init_storage+0xb4>)
   1444e:	4798      	blx	r3
        add_state(STORAGE_READY);
   14450:	2001      	movs	r0, #1
   14452:	4b10      	ldr	r3, [pc, #64]	; (14494 <init_storage+0xe0>)
   14454:	4798      	blx	r3
        return;
   14456:	46c0      	nop			; (mov r8, r8)
    }
}
   14458:	46bd      	mov	sp, r7
   1445a:	b003      	add	sp, #12
   1445c:	bd90      	pop	{r4, r7, pc}
   1445e:	46c0      	nop			; (mov r8, r8)
   14460:	0001c8bd 	.word	0x0001c8bd
   14464:	00033c98 	.word	0x00033c98
   14468:	0001baa5 	.word	0x0001baa5
   1446c:	0001cd99 	.word	0x0001cd99
   14470:	00033cd0 	.word	0x00033cd0
   14474:	00033cf8 	.word	0x00033cf8
   14478:	0001c90d 	.word	0x0001c90d
   1447c:	00033d2c 	.word	0x00033d2c
   14480:	2000047c 	.word	0x2000047c
   14484:	00032203 	.word	0x00032203
   14488:	0002b4f9 	.word	0x0002b4f9
   1448c:	00033d50 	.word	0x00033d50
   14490:	00033d80 	.word	0x00033d80
   14494:	00013aa1 	.word	0x00013aa1

00014498 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b082      	sub	sp, #8
   1449c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1449e:	1d3b      	adds	r3, r7, #4
   144a0:	0018      	movs	r0, r3
   144a2:	4b08      	ldr	r3, [pc, #32]	; (144c4 <configure_timer+0x2c>)
   144a4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   144a6:	1d3a      	adds	r2, r7, #4
   144a8:	4b07      	ldr	r3, [pc, #28]	; (144c8 <configure_timer+0x30>)
   144aa:	0011      	movs	r1, r2
   144ac:	0018      	movs	r0, r3
   144ae:	4b07      	ldr	r3, [pc, #28]	; (144cc <configure_timer+0x34>)
   144b0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   144b2:	4b05      	ldr	r3, [pc, #20]	; (144c8 <configure_timer+0x30>)
   144b4:	0018      	movs	r0, r3
   144b6:	4b06      	ldr	r3, [pc, #24]	; (144d0 <configure_timer+0x38>)
   144b8:	4798      	blx	r3
}
   144ba:	46c0      	nop			; (mov r8, r8)
   144bc:	46bd      	mov	sp, r7
   144be:	b002      	add	sp, #8
   144c0:	bd80      	pop	{r7, pc}
   144c2:	46c0      	nop			; (mov r8, r8)
   144c4:	00030049 	.word	0x00030049
   144c8:	20004220 	.word	0x20004220
   144cc:	0003006d 	.word	0x0003006d
   144d0:	00030159 	.word	0x00030159

000144d4 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   144d4:	b580      	push	{r7, lr}
   144d6:	b088      	sub	sp, #32
   144d8:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   144da:	003b      	movs	r3, r7
   144dc:	0018      	movs	r0, r3
   144de:	4b15      	ldr	r3, [pc, #84]	; (14534 <configure_http_client+0x60>)
   144e0:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   144e2:	003b      	movs	r3, r7
   144e4:	2280      	movs	r2, #128	; 0x80
   144e6:	0092      	lsls	r2, r2, #2
   144e8:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   144ea:	003b      	movs	r3, r7
   144ec:	4a12      	ldr	r2, [pc, #72]	; (14538 <configure_http_client+0x64>)
   144ee:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 80;
   144f0:	003b      	movs	r3, r7
   144f2:	2250      	movs	r2, #80	; 0x50
   144f4:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 0;
   144f6:	003b      	movs	r3, r7
   144f8:	2200      	movs	r2, #0
   144fa:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   144fc:	003a      	movs	r2, r7
   144fe:	4b0f      	ldr	r3, [pc, #60]	; (1453c <configure_http_client+0x68>)
   14500:	0011      	movs	r1, r2
   14502:	0018      	movs	r0, r3
   14504:	4b0e      	ldr	r3, [pc, #56]	; (14540 <configure_http_client+0x6c>)
   14506:	4798      	blx	r3
   14508:	0003      	movs	r3, r0
   1450a:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1450c:	69fb      	ldr	r3, [r7, #28]
   1450e:	2b00      	cmp	r3, #0
   14510:	da06      	bge.n	14520 <configure_http_client+0x4c>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   14512:	69fa      	ldr	r2, [r7, #28]
   14514:	4b0b      	ldr	r3, [pc, #44]	; (14544 <configure_http_client+0x70>)
   14516:	0019      	movs	r1, r3
   14518:	2001      	movs	r0, #1
   1451a:	4b0b      	ldr	r3, [pc, #44]	; (14548 <configure_http_client+0x74>)
   1451c:	4798      	blx	r3
        while (1) {
   1451e:	e7fe      	b.n	1451e <configure_http_client+0x4a>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   14520:	4a0a      	ldr	r2, [pc, #40]	; (1454c <configure_http_client+0x78>)
   14522:	4b06      	ldr	r3, [pc, #24]	; (1453c <configure_http_client+0x68>)
   14524:	0011      	movs	r1, r2
   14526:	0018      	movs	r0, r3
   14528:	4b09      	ldr	r3, [pc, #36]	; (14550 <configure_http_client+0x7c>)
   1452a:	4798      	blx	r3
}
   1452c:	46c0      	nop			; (mov r8, r8)
   1452e:	46bd      	mov	sp, r7
   14530:	b008      	add	sp, #32
   14532:	bd80      	pop	{r7, pc}
   14534:	0002e6dd 	.word	0x0002e6dd
   14538:	20004220 	.word	0x20004220
   1453c:	20004278 	.word	0x20004278
   14540:	0002e729 	.word	0x0002e729
   14544:	00033da4 	.word	0x00033da4
   14548:	0001baa5 	.word	0x0001baa5
   1454c:	00014085 	.word	0x00014085
   14550:	0002e815 	.word	0x0002e815

00014554 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   14554:	b580      	push	{r7, lr}
   14556:	b082      	sub	sp, #8
   14558:	af00      	add	r7, sp, #0
   1455a:	603a      	str	r2, [r7, #0]
   1455c:	1dfb      	adds	r3, r7, #7
   1455e:	1c02      	adds	r2, r0, #0
   14560:	701a      	strb	r2, [r3, #0]
   14562:	1dbb      	adds	r3, r7, #6
   14564:	1c0a      	adds	r2, r1, #0
   14566:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   14568:	683a      	ldr	r2, [r7, #0]
   1456a:	1dbb      	adds	r3, r7, #6
   1456c:	7819      	ldrb	r1, [r3, #0]
   1456e:	1dfb      	adds	r3, r7, #7
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	b25b      	sxtb	r3, r3
   14574:	0018      	movs	r0, r3
   14576:	4b03      	ldr	r3, [pc, #12]	; (14584 <socket_event_handler+0x30>)
   14578:	4798      	blx	r3
}
   1457a:	46c0      	nop			; (mov r8, r8)
   1457c:	46bd      	mov	sp, r7
   1457e:	b002      	add	sp, #8
   14580:	bd80      	pop	{r7, pc}
   14582:	46c0      	nop			; (mov r8, r8)
   14584:	0002d3d5 	.word	0x0002d3d5

00014588 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   14588:	b580      	push	{r7, lr}
   1458a:	b082      	sub	sp, #8
   1458c:	af00      	add	r7, sp, #0
   1458e:	6078      	str	r0, [r7, #4]
   14590:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   14592:	683a      	ldr	r2, [r7, #0]
   14594:	687b      	ldr	r3, [r7, #4]
   14596:	0011      	movs	r1, r2
   14598:	0018      	movs	r0, r3
   1459a:	4b03      	ldr	r3, [pc, #12]	; (145a8 <socket_resolve_handler+0x20>)
   1459c:	4798      	blx	r3
}
   1459e:	46c0      	nop			; (mov r8, r8)
   145a0:	46bd      	mov	sp, r7
   145a2:	b002      	add	sp, #8
   145a4:	bd80      	pop	{r7, pc}
   145a6:	46c0      	nop			; (mov r8, r8)
   145a8:	0002d409 	.word	0x0002d409

000145ac <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   145ac:	b590      	push	{r4, r7, lr}
   145ae:	b089      	sub	sp, #36	; 0x24
   145b0:	af02      	add	r7, sp, #8
   145b2:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   145b4:	2310      	movs	r3, #16
   145b6:	18fb      	adds	r3, r7, r3
   145b8:	2200      	movs	r2, #0
   145ba:	701a      	strb	r2, [r3, #0]
   145bc:	2310      	movs	r3, #16
   145be:	18fb      	adds	r3, r7, r3
   145c0:	2200      	movs	r2, #0
   145c2:	705a      	strb	r2, [r3, #1]
   145c4:	2310      	movs	r3, #16
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	2200      	movs	r2, #0
   145ca:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   145cc:	687b      	ldr	r3, [r7, #4]
   145ce:	685b      	ldr	r3, [r3, #4]
   145d0:	685a      	ldr	r2, [r3, #4]
   145d2:	687b      	ldr	r3, [r7, #4]
   145d4:	685b      	ldr	r3, [r3, #4]
   145d6:	689b      	ldr	r3, [r3, #8]
   145d8:	4924      	ldr	r1, [pc, #144]	; (1466c <SubscribeHandlerLedTopic+0xc0>)
   145da:	2001      	movs	r0, #1
   145dc:	4c24      	ldr	r4, [pc, #144]	; (14670 <SubscribeHandlerLedTopic+0xc4>)
   145de:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   145e0:	687b      	ldr	r3, [r7, #4]
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	689b      	ldr	r3, [r3, #8]
   145e6:	4923      	ldr	r1, [pc, #140]	; (14674 <SubscribeHandlerLedTopic+0xc8>)
   145e8:	2204      	movs	r2, #4
   145ea:	0018      	movs	r0, r3
   145ec:	4b22      	ldr	r3, [pc, #136]	; (14678 <SubscribeHandlerLedTopic+0xcc>)
   145ee:	4798      	blx	r3
   145f0:	1e03      	subs	r3, r0, #0
   145f2:	d137      	bne.n	14664 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
   145f4:	687b      	ldr	r3, [r7, #4]
   145f6:	681b      	ldr	r3, [r3, #0]
   145f8:	689b      	ldr	r3, [r3, #8]
   145fa:	3304      	adds	r3, #4
   145fc:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   145fe:	2300      	movs	r3, #0
   14600:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   14602:	e015      	b.n	14630 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   14604:	697c      	ldr	r4, [r7, #20]
   14606:	1c63      	adds	r3, r4, #1
   14608:	617b      	str	r3, [r7, #20]
   1460a:	68fb      	ldr	r3, [r7, #12]
   1460c:	220c      	movs	r2, #12
   1460e:	18b9      	adds	r1, r7, r2
   14610:	220a      	movs	r2, #10
   14612:	0018      	movs	r0, r3
   14614:	4b19      	ldr	r3, [pc, #100]	; (1467c <SubscribeHandlerLedTopic+0xd0>)
   14616:	4798      	blx	r3
   14618:	0003      	movs	r3, r0
   1461a:	b2da      	uxtb	r2, r3
   1461c:	2310      	movs	r3, #16
   1461e:	18fb      	adds	r3, r7, r3
   14620:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   14622:	68fb      	ldr	r3, [r7, #12]
   14624:	781b      	ldrb	r3, [r3, #0]
   14626:	2b2c      	cmp	r3, #44	; 0x2c
   14628:	d10a      	bne.n	14640 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1462a:	68fb      	ldr	r3, [r7, #12]
   1462c:	3301      	adds	r3, #1
   1462e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   14630:	697b      	ldr	r3, [r7, #20]
   14632:	2b02      	cmp	r3, #2
   14634:	dc05      	bgt.n	14642 <SubscribeHandlerLedTopic+0x96>
   14636:	68fb      	ldr	r3, [r7, #12]
   14638:	781b      	ldrb	r3, [r3, #0]
   1463a:	2b00      	cmp	r3, #0
   1463c:	d1e2      	bne.n	14604 <SubscribeHandlerLedTopic+0x58>
   1463e:	e000      	b.n	14642 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   14640:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   14642:	2310      	movs	r3, #16
   14644:	18fb      	adds	r3, r7, r3
   14646:	781b      	ldrb	r3, [r3, #0]
   14648:	001a      	movs	r2, r3
   1464a:	2310      	movs	r3, #16
   1464c:	18fb      	adds	r3, r7, r3
   1464e:	785b      	ldrb	r3, [r3, #1]
   14650:	0018      	movs	r0, r3
   14652:	2310      	movs	r3, #16
   14654:	18fb      	adds	r3, r7, r3
   14656:	789b      	ldrb	r3, [r3, #2]
   14658:	4909      	ldr	r1, [pc, #36]	; (14680 <SubscribeHandlerLedTopic+0xd4>)
   1465a:	9300      	str	r3, [sp, #0]
   1465c:	0003      	movs	r3, r0
   1465e:	2001      	movs	r0, #1
   14660:	4c03      	ldr	r4, [pc, #12]	; (14670 <SubscribeHandlerLedTopic+0xc4>)
   14662:	47a0      	blx	r4
    }
}
   14664:	46c0      	nop			; (mov r8, r8)
   14666:	46bd      	mov	sp, r7
   14668:	b007      	add	sp, #28
   1466a:	bd90      	pop	{r4, r7, pc}
   1466c:	00033dec 	.word	0x00033dec
   14670:	0001baa5 	.word	0x0001baa5
   14674:	00033df4 	.word	0x00033df4
   14678:	000325c9 	.word	0x000325c9
   1467c:	00032775 	.word	0x00032775
   14680:	00033dfc 	.word	0x00033dfc

00014684 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   14684:	b590      	push	{r4, r7, lr}
   14686:	b08b      	sub	sp, #44	; 0x2c
   14688:	af00      	add	r7, sp, #0
   1468a:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   1468c:	230c      	movs	r3, #12
   1468e:	18fb      	adds	r3, r7, r3
   14690:	2214      	movs	r2, #20
   14692:	21ff      	movs	r1, #255	; 0xff
   14694:	0018      	movs	r0, r3
   14696:	4b41      	ldr	r3, [pc, #260]	; (1479c <SubscribeHandlerGameTopic+0x118>)
   14698:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   1469a:	687b      	ldr	r3, [r7, #4]
   1469c:	681b      	ldr	r3, [r3, #0]
   1469e:	689b      	ldr	r3, [r3, #8]
   146a0:	493f      	ldr	r1, [pc, #252]	; (147a0 <SubscribeHandlerGameTopic+0x11c>)
   146a2:	2209      	movs	r2, #9
   146a4:	0018      	movs	r0, r3
   146a6:	4b3f      	ldr	r3, [pc, #252]	; (147a4 <SubscribeHandlerGameTopic+0x120>)
   146a8:	4798      	blx	r3
   146aa:	1e03      	subs	r3, r0, #0
   146ac:	d159      	bne.n	14762 <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   146ae:	4b3e      	ldr	r3, [pc, #248]	; (147a8 <SubscribeHandlerGameTopic+0x124>)
   146b0:	0019      	movs	r1, r3
   146b2:	2001      	movs	r0, #1
   146b4:	4b3d      	ldr	r3, [pc, #244]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   146b6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   146b8:	687b      	ldr	r3, [r7, #4]
   146ba:	685b      	ldr	r3, [r3, #4]
   146bc:	685a      	ldr	r2, [r3, #4]
   146be:	687b      	ldr	r3, [r7, #4]
   146c0:	685b      	ldr	r3, [r3, #4]
   146c2:	689b      	ldr	r3, [r3, #8]
   146c4:	493a      	ldr	r1, [pc, #232]	; (147b0 <SubscribeHandlerGameTopic+0x12c>)
   146c6:	2001      	movs	r0, #1
   146c8:	4c38      	ldr	r4, [pc, #224]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   146ca:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   146cc:	687b      	ldr	r3, [r7, #4]
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	68da      	ldr	r2, [r3, #12]
   146d2:	687b      	ldr	r3, [r7, #4]
   146d4:	681b      	ldr	r3, [r3, #0]
   146d6:	689b      	ldr	r3, [r3, #8]
   146d8:	4936      	ldr	r1, [pc, #216]	; (147b4 <SubscribeHandlerGameTopic+0x130>)
   146da:	2001      	movs	r0, #1
   146dc:	4c33      	ldr	r4, [pc, #204]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   146de:	47a0      	blx	r4

        int nb = 0;
   146e0:	2300      	movs	r3, #0
   146e2:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   146e4:	687b      	ldr	r3, [r7, #4]
   146e6:	681b      	ldr	r3, [r3, #0]
   146e8:	689b      	ldr	r3, [r3, #8]
   146ea:	3309      	adds	r3, #9
   146ec:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   146ee:	e015      	b.n	1471c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   146f0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   146f2:	1c63      	adds	r3, r4, #1
   146f4:	627b      	str	r3, [r7, #36]	; 0x24
   146f6:	68bb      	ldr	r3, [r7, #8]
   146f8:	2208      	movs	r2, #8
   146fa:	18b9      	adds	r1, r7, r2
   146fc:	220a      	movs	r2, #10
   146fe:	0018      	movs	r0, r3
   14700:	4b2d      	ldr	r3, [pc, #180]	; (147b8 <SubscribeHandlerGameTopic+0x134>)
   14702:	4798      	blx	r3
   14704:	0003      	movs	r3, r0
   14706:	b2da      	uxtb	r2, r3
   14708:	230c      	movs	r3, #12
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1470e:	68bb      	ldr	r3, [r7, #8]
   14710:	781b      	ldrb	r3, [r3, #0]
   14712:	2b2c      	cmp	r3, #44	; 0x2c
   14714:	d10a      	bne.n	1472c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   14716:	68bb      	ldr	r3, [r7, #8]
   14718:	3301      	adds	r3, #1
   1471a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1471e:	2b13      	cmp	r3, #19
   14720:	dc05      	bgt.n	1472e <SubscribeHandlerGameTopic+0xaa>
   14722:	68bb      	ldr	r3, [r7, #8]
   14724:	781b      	ldrb	r3, [r3, #0]
   14726:	2b00      	cmp	r3, #0
   14728:	d1e2      	bne.n	146f0 <SubscribeHandlerGameTopic+0x6c>
   1472a:	e000      	b.n	1472e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1472c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1472e:	4b23      	ldr	r3, [pc, #140]	; (147bc <SubscribeHandlerGameTopic+0x138>)
   14730:	0019      	movs	r1, r3
   14732:	2001      	movs	r0, #1
   14734:	4b1d      	ldr	r3, [pc, #116]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   14736:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   14738:	2300      	movs	r3, #0
   1473a:	623b      	str	r3, [r7, #32]
   1473c:	e00d      	b.n	1475a <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1473e:	230c      	movs	r3, #12
   14740:	18fa      	adds	r2, r7, r3
   14742:	6a3b      	ldr	r3, [r7, #32]
   14744:	18d3      	adds	r3, r2, r3
   14746:	781b      	ldrb	r3, [r3, #0]
   14748:	001a      	movs	r2, r3
   1474a:	4b1d      	ldr	r3, [pc, #116]	; (147c0 <SubscribeHandlerGameTopic+0x13c>)
   1474c:	0019      	movs	r1, r3
   1474e:	2001      	movs	r0, #1
   14750:	4b16      	ldr	r3, [pc, #88]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   14752:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   14754:	6a3b      	ldr	r3, [r7, #32]
   14756:	3301      	adds	r3, #1
   14758:	623b      	str	r3, [r7, #32]
   1475a:	6a3b      	ldr	r3, [r7, #32]
   1475c:	2b13      	cmp	r3, #19
   1475e:	ddee      	ble.n	1473e <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   14760:	e018      	b.n	14794 <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   14762:	4b18      	ldr	r3, [pc, #96]	; (147c4 <SubscribeHandlerGameTopic+0x140>)
   14764:	0019      	movs	r1, r3
   14766:	2001      	movs	r0, #1
   14768:	4b10      	ldr	r3, [pc, #64]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   1476a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1476c:	687b      	ldr	r3, [r7, #4]
   1476e:	685b      	ldr	r3, [r3, #4]
   14770:	685a      	ldr	r2, [r3, #4]
   14772:	687b      	ldr	r3, [r7, #4]
   14774:	685b      	ldr	r3, [r3, #4]
   14776:	689b      	ldr	r3, [r3, #8]
   14778:	490d      	ldr	r1, [pc, #52]	; (147b0 <SubscribeHandlerGameTopic+0x12c>)
   1477a:	2001      	movs	r0, #1
   1477c:	4c0b      	ldr	r4, [pc, #44]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   1477e:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   14780:	687b      	ldr	r3, [r7, #4]
   14782:	681b      	ldr	r3, [r3, #0]
   14784:	68da      	ldr	r2, [r3, #12]
   14786:	687b      	ldr	r3, [r7, #4]
   14788:	681b      	ldr	r3, [r3, #0]
   1478a:	689b      	ldr	r3, [r3, #8]
   1478c:	4909      	ldr	r1, [pc, #36]	; (147b4 <SubscribeHandlerGameTopic+0x130>)
   1478e:	2001      	movs	r0, #1
   14790:	4c06      	ldr	r4, [pc, #24]	; (147ac <SubscribeHandlerGameTopic+0x128>)
   14792:	47a0      	blx	r4
}
   14794:	46c0      	nop			; (mov r8, r8)
   14796:	46bd      	mov	sp, r7
   14798:	b00b      	add	sp, #44	; 0x2c
   1479a:	bd90      	pop	{r4, r7, pc}
   1479c:	00032203 	.word	0x00032203
   147a0:	00033e10 	.word	0x00033e10
   147a4:	000325c9 	.word	0x000325c9
   147a8:	00033e1c 	.word	0x00033e1c
   147ac:	0001baa5 	.word	0x0001baa5
   147b0:	00033dec 	.word	0x00033dec
   147b4:	00033e38 	.word	0x00033e38
   147b8:	00032775 	.word	0x00032775
   147bc:	00033e40 	.word	0x00033e40
   147c0:	00033e54 	.word	0x00033e54
   147c4:	00033e58 	.word	0x00033e58

000147c8 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   147c8:	b590      	push	{r4, r7, lr}
   147ca:	b083      	sub	sp, #12
   147cc:	af00      	add	r7, sp, #0
   147ce:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   147d0:	4b09      	ldr	r3, [pc, #36]	; (147f8 <SubscribeHandlerImuTopic+0x30>)
   147d2:	0019      	movs	r1, r3
   147d4:	2001      	movs	r0, #1
   147d6:	4b09      	ldr	r3, [pc, #36]	; (147fc <SubscribeHandlerImuTopic+0x34>)
   147d8:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   147da:	687b      	ldr	r3, [r7, #4]
   147dc:	685b      	ldr	r3, [r3, #4]
   147de:	685a      	ldr	r2, [r3, #4]
   147e0:	687b      	ldr	r3, [r7, #4]
   147e2:	685b      	ldr	r3, [r3, #4]
   147e4:	689b      	ldr	r3, [r3, #8]
   147e6:	4906      	ldr	r1, [pc, #24]	; (14800 <SubscribeHandlerImuTopic+0x38>)
   147e8:	2001      	movs	r0, #1
   147ea:	4c04      	ldr	r4, [pc, #16]	; (147fc <SubscribeHandlerImuTopic+0x34>)
   147ec:	47a0      	blx	r4
}
   147ee:	46c0      	nop			; (mov r8, r8)
   147f0:	46bd      	mov	sp, r7
   147f2:	b003      	add	sp, #12
   147f4:	bd90      	pop	{r4, r7, pc}
   147f6:	46c0      	nop			; (mov r8, r8)
   147f8:	00033e88 	.word	0x00033e88
   147fc:	0001baa5 	.word	0x0001baa5
   14800:	00033dec 	.word	0x00033dec

00014804 <SubscribeHandlerDebug1Topic>:
        }
    }
}

void SubscribeHandlerDebug1Topic(MessageData *msgData)
{
   14804:	b580      	push	{r7, lr}
   14806:	b082      	sub	sp, #8
   14808:	af00      	add	r7, sp, #0
   1480a:	6078      	str	r0, [r7, #4]
    port_pin_toggle_output_level(LED_0_PIN);
   1480c:	2017      	movs	r0, #23
   1480e:	4b03      	ldr	r3, [pc, #12]	; (1481c <SubscribeHandlerDebug1Topic+0x18>)
   14810:	4798      	blx	r3
}
   14812:	46c0      	nop			; (mov r8, r8)
   14814:	46bd      	mov	sp, r7
   14816:	b002      	add	sp, #8
   14818:	bd80      	pop	{r7, pc}
   1481a:	46c0      	nop			; (mov r8, r8)
   1481c:	00013a1d 	.word	0x00013a1d

00014820 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   14820:	b590      	push	{r4, r7, lr}
   14822:	b08b      	sub	sp, #44	; 0x2c
   14824:	af06      	add	r7, sp, #24
   14826:	60f8      	str	r0, [r7, #12]
   14828:	60b9      	str	r1, [r7, #8]
   1482a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1482c:	68bb      	ldr	r3, [r7, #8]
   1482e:	2b01      	cmp	r3, #1
   14830:	d03b      	beq.n	148aa <mqtt_callback+0x8a>
   14832:	2b05      	cmp	r3, #5
   14834:	d064      	beq.n	14900 <mqtt_callback+0xe0>
   14836:	2b00      	cmp	r3, #0
   14838:	d000      	beq.n	1483c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1483a:	e067      	b.n	1490c <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	681b      	ldr	r3, [r3, #0]
   14840:	2b00      	cmp	r3, #0
   14842:	db25      	blt.n	14890 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   14844:	4b33      	ldr	r3, [pc, #204]	; (14914 <mqtt_callback+0xf4>)
   14846:	0019      	movs	r1, r3
   14848:	2001      	movs	r0, #1
   1484a:	4b33      	ldr	r3, [pc, #204]	; (14918 <mqtt_callback+0xf8>)
   1484c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1484e:	4933      	ldr	r1, [pc, #204]	; (1491c <mqtt_callback+0xfc>)
   14850:	4a33      	ldr	r2, [pc, #204]	; (14920 <mqtt_callback+0x100>)
   14852:	68f8      	ldr	r0, [r7, #12]
   14854:	2300      	movs	r3, #0
   14856:	9305      	str	r3, [sp, #20]
   14858:	2300      	movs	r3, #0
   1485a:	9304      	str	r3, [sp, #16]
   1485c:	2300      	movs	r3, #0
   1485e:	9303      	str	r3, [sp, #12]
   14860:	2300      	movs	r3, #0
   14862:	9302      	str	r3, [sp, #8]
   14864:	2300      	movs	r3, #0
   14866:	9301      	str	r3, [sp, #4]
   14868:	4b2d      	ldr	r3, [pc, #180]	; (14920 <mqtt_callback+0x100>)
   1486a:	9300      	str	r3, [sp, #0]
   1486c:	000b      	movs	r3, r1
   1486e:	2101      	movs	r1, #1
   14870:	4c2c      	ldr	r4, [pc, #176]	; (14924 <mqtt_callback+0x104>)
   14872:	47a0      	blx	r4
   14874:	1e03      	subs	r3, r0, #0
   14876:	d005      	beq.n	14884 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   14878:	4b2b      	ldr	r3, [pc, #172]	; (14928 <mqtt_callback+0x108>)
   1487a:	0019      	movs	r1, r3
   1487c:	2001      	movs	r0, #1
   1487e:	4b26      	ldr	r3, [pc, #152]	; (14918 <mqtt_callback+0xf8>)
   14880:	4798      	blx	r3
        } break;
   14882:	e043      	b.n	1490c <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   14884:	4b29      	ldr	r3, [pc, #164]	; (1492c <mqtt_callback+0x10c>)
   14886:	0019      	movs	r1, r3
   14888:	2001      	movs	r0, #1
   1488a:	4b23      	ldr	r3, [pc, #140]	; (14918 <mqtt_callback+0xf8>)
   1488c:	4798      	blx	r3
        } break;
   1488e:	e03d      	b.n	1490c <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   14890:	4a27      	ldr	r2, [pc, #156]	; (14930 <mqtt_callback+0x110>)
   14892:	4b28      	ldr	r3, [pc, #160]	; (14934 <mqtt_callback+0x114>)
   14894:	0019      	movs	r1, r3
   14896:	2001      	movs	r0, #1
   14898:	4b1f      	ldr	r3, [pc, #124]	; (14918 <mqtt_callback+0xf8>)
   1489a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1489c:	4a24      	ldr	r2, [pc, #144]	; (14930 <mqtt_callback+0x110>)
   1489e:	68fb      	ldr	r3, [r7, #12]
   148a0:	0011      	movs	r1, r2
   148a2:	0018      	movs	r0, r3
   148a4:	4b24      	ldr	r3, [pc, #144]	; (14938 <mqtt_callback+0x118>)
   148a6:	4798      	blx	r3
        } break;
   148a8:	e030      	b.n	1490c <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   148aa:	687b      	ldr	r3, [r7, #4]
   148ac:	781b      	ldrb	r3, [r3, #0]
   148ae:	2b00      	cmp	r3, #0
   148b0:	d11d      	bne.n	148ee <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   148b2:	4b22      	ldr	r3, [pc, #136]	; (1493c <mqtt_callback+0x11c>)
   148b4:	4922      	ldr	r1, [pc, #136]	; (14940 <mqtt_callback+0x120>)
   148b6:	68f8      	ldr	r0, [r7, #12]
   148b8:	2202      	movs	r2, #2
   148ba:	4c22      	ldr	r4, [pc, #136]	; (14944 <mqtt_callback+0x124>)
   148bc:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   148be:	4b22      	ldr	r3, [pc, #136]	; (14948 <mqtt_callback+0x128>)
   148c0:	4922      	ldr	r1, [pc, #136]	; (1494c <mqtt_callback+0x12c>)
   148c2:	68f8      	ldr	r0, [r7, #12]
   148c4:	2202      	movs	r2, #2
   148c6:	4c1f      	ldr	r4, [pc, #124]	; (14944 <mqtt_callback+0x124>)
   148c8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   148ca:	4b21      	ldr	r3, [pc, #132]	; (14950 <mqtt_callback+0x130>)
   148cc:	4921      	ldr	r1, [pc, #132]	; (14954 <mqtt_callback+0x134>)
   148ce:	68f8      	ldr	r0, [r7, #12]
   148d0:	2202      	movs	r2, #2
   148d2:	4c1c      	ldr	r4, [pc, #112]	; (14944 <mqtt_callback+0x124>)
   148d4:	47a0      	blx	r4
                mqtt_subscribe(module_inst, DEBUG_TOPIC_1, 2, SubscribeHandlerDebug1Topic);
   148d6:	4b20      	ldr	r3, [pc, #128]	; (14958 <mqtt_callback+0x138>)
   148d8:	4920      	ldr	r1, [pc, #128]	; (1495c <mqtt_callback+0x13c>)
   148da:	68f8      	ldr	r0, [r7, #12]
   148dc:	2202      	movs	r2, #2
   148de:	4c19      	ldr	r4, [pc, #100]	; (14944 <mqtt_callback+0x124>)
   148e0:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   148e2:	4b1f      	ldr	r3, [pc, #124]	; (14960 <mqtt_callback+0x140>)
   148e4:	0019      	movs	r1, r3
   148e6:	2001      	movs	r0, #1
   148e8:	4b0b      	ldr	r3, [pc, #44]	; (14918 <mqtt_callback+0xf8>)
   148ea:	4798      	blx	r3
            break;
   148ec:	e00e      	b.n	1490c <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   148ee:	687b      	ldr	r3, [r7, #4]
   148f0:	781b      	ldrb	r3, [r3, #0]
   148f2:	001a      	movs	r2, r3
   148f4:	4b1b      	ldr	r3, [pc, #108]	; (14964 <mqtt_callback+0x144>)
   148f6:	0019      	movs	r1, r3
   148f8:	2001      	movs	r0, #1
   148fa:	4b07      	ldr	r3, [pc, #28]	; (14918 <mqtt_callback+0xf8>)
   148fc:	4798      	blx	r3
            break;
   148fe:	e005      	b.n	1490c <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   14900:	4b19      	ldr	r3, [pc, #100]	; (14968 <mqtt_callback+0x148>)
   14902:	0019      	movs	r1, r3
   14904:	2001      	movs	r0, #1
   14906:	4b04      	ldr	r3, [pc, #16]	; (14918 <mqtt_callback+0xf8>)
   14908:	4798      	blx	r3
            break;
   1490a:	46c0      	nop			; (mov r8, r8)
}
   1490c:	46c0      	nop			; (mov r8, r8)
   1490e:	46bd      	mov	sp, r7
   14910:	b005      	add	sp, #20
   14912:	bd90      	pop	{r4, r7, pc}
   14914:	00033eec 	.word	0x00033eec
   14918:	0001baa5 	.word	0x0001baa5
   1491c:	00033f08 	.word	0x00033f08
   14920:	00033f18 	.word	0x00033f18
   14924:	0002d475 	.word	0x0002d475
   14928:	00033f24 	.word	0x00033f24
   1492c:	00033f4c 	.word	0x00033f4c
   14930:	0003386c 	.word	0x0003386c
   14934:	00033f68 	.word	0x00033f68
   14938:	0002d42d 	.word	0x0002d42d
   1493c:	00014685 	.word	0x00014685
   14940:	00033fa0 	.word	0x00033fa0
   14944:	0002d615 	.word	0x0002d615
   14948:	000145ad 	.word	0x000145ad
   1494c:	00033ec8 	.word	0x00033ec8
   14950:	000147c9 	.word	0x000147c9
   14954:	00033fb4 	.word	0x00033fb4
   14958:	00014805 	.word	0x00014805
   1495c:	00033fc8 	.word	0x00033fc8
   14960:	00033fd4 	.word	0x00033fd4
   14964:	00033fe8 	.word	0x00033fe8
   14968:	0003401c 	.word	0x0003401c

0001496c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   1496c:	b580      	push	{r7, lr}
   1496e:	b088      	sub	sp, #32
   14970:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   14972:	1d3b      	adds	r3, r7, #4
   14974:	0018      	movs	r0, r3
   14976:	4b1f      	ldr	r3, [pc, #124]	; (149f4 <configure_mqtt+0x88>)
   14978:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1497a:	1d3b      	adds	r3, r7, #4
   1497c:	4a1e      	ldr	r2, [pc, #120]	; (149f8 <configure_mqtt+0x8c>)
   1497e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   14980:	1d3b      	adds	r3, r7, #4
   14982:	2280      	movs	r2, #128	; 0x80
   14984:	0092      	lsls	r2, r2, #2
   14986:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   14988:	1d3b      	adds	r3, r7, #4
   1498a:	4a1c      	ldr	r2, [pc, #112]	; (149fc <configure_mqtt+0x90>)
   1498c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1498e:	1d3b      	adds	r3, r7, #4
   14990:	2280      	movs	r2, #128	; 0x80
   14992:	0092      	lsls	r2, r2, #2
   14994:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   14996:	1d3b      	adds	r3, r7, #4
   14998:	4a19      	ldr	r2, [pc, #100]	; (14a00 <configure_mqtt+0x94>)
   1499a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1499c:	1d3b      	adds	r3, r7, #4
   1499e:	4a19      	ldr	r2, [pc, #100]	; (14a04 <configure_mqtt+0x98>)
   149a0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   149a2:	1d3a      	adds	r2, r7, #4
   149a4:	4b18      	ldr	r3, [pc, #96]	; (14a08 <configure_mqtt+0x9c>)
   149a6:	0011      	movs	r1, r2
   149a8:	0018      	movs	r0, r3
   149aa:	4b18      	ldr	r3, [pc, #96]	; (14a0c <configure_mqtt+0xa0>)
   149ac:	4798      	blx	r3
   149ae:	0003      	movs	r3, r0
   149b0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   149b2:	69fb      	ldr	r3, [r7, #28]
   149b4:	2b00      	cmp	r3, #0
   149b6:	da06      	bge.n	149c6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   149b8:	69fa      	ldr	r2, [r7, #28]
   149ba:	4b15      	ldr	r3, [pc, #84]	; (14a10 <configure_mqtt+0xa4>)
   149bc:	0019      	movs	r1, r3
   149be:	2001      	movs	r0, #1
   149c0:	4b14      	ldr	r3, [pc, #80]	; (14a14 <configure_mqtt+0xa8>)
   149c2:	4798      	blx	r3
        while (1) {
   149c4:	e7fe      	b.n	149c4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   149c6:	4a14      	ldr	r2, [pc, #80]	; (14a18 <configure_mqtt+0xac>)
   149c8:	4b0f      	ldr	r3, [pc, #60]	; (14a08 <configure_mqtt+0x9c>)
   149ca:	0011      	movs	r1, r2
   149cc:	0018      	movs	r0, r3
   149ce:	4b13      	ldr	r3, [pc, #76]	; (14a1c <configure_mqtt+0xb0>)
   149d0:	4798      	blx	r3
   149d2:	0003      	movs	r3, r0
   149d4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   149d6:	69fb      	ldr	r3, [r7, #28]
   149d8:	2b00      	cmp	r3, #0
   149da:	da06      	bge.n	149ea <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   149dc:	69fa      	ldr	r2, [r7, #28]
   149de:	4b10      	ldr	r3, [pc, #64]	; (14a20 <configure_mqtt+0xb4>)
   149e0:	0019      	movs	r1, r3
   149e2:	2001      	movs	r0, #1
   149e4:	4b0b      	ldr	r3, [pc, #44]	; (14a14 <configure_mqtt+0xa8>)
   149e6:	4798      	blx	r3
        while (1) {
   149e8:	e7fe      	b.n	149e8 <configure_mqtt+0x7c>
        }
    }
}
   149ea:	46c0      	nop			; (mov r8, r8)
   149ec:	46bd      	mov	sp, r7
   149ee:	b008      	add	sp, #32
   149f0:	bd80      	pop	{r7, pc}
   149f2:	46c0      	nop			; (mov r8, r8)
   149f4:	0002d36d 	.word	0x0002d36d
   149f8:	20000710 	.word	0x20000710
   149fc:	20000910 	.word	0x20000910
   14a00:	0000075b 	.word	0x0000075b
   14a04:	00001770 	.word	0x00001770
   14a08:	200006d8 	.word	0x200006d8
   14a0c:	0002d2bd 	.word	0x0002d2bd
   14a10:	00034030 	.word	0x00034030
   14a14:	0001baa5 	.word	0x0001baa5
   14a18:	00014821 	.word	0x00014821
   14a1c:	0002d3ad 	.word	0x0002d3ad
   14a20:	00034064 	.word	0x00034064

00014a24 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   14a24:	b580      	push	{r7, lr}
   14a26:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   14a28:	4a15      	ldr	r2, [pc, #84]	; (14a80 <HTTP_DownloadFileInit+0x5c>)
   14a2a:	4b16      	ldr	r3, [pc, #88]	; (14a84 <HTTP_DownloadFileInit+0x60>)
   14a2c:	0011      	movs	r1, r2
   14a2e:	0018      	movs	r0, r3
   14a30:	4b15      	ldr	r3, [pc, #84]	; (14a88 <HTTP_DownloadFileInit+0x64>)
   14a32:	4798      	blx	r3
   14a34:	1e03      	subs	r3, r0, #0
   14a36:	d008      	beq.n	14a4a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   14a38:	4b14      	ldr	r3, [pc, #80]	; (14a8c <HTTP_DownloadFileInit+0x68>)
   14a3a:	0019      	movs	r1, r3
   14a3c:	2001      	movs	r0, #1
   14a3e:	4b14      	ldr	r3, [pc, #80]	; (14a90 <HTTP_DownloadFileInit+0x6c>)
   14a40:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   14a42:	e002      	b.n	14a4a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   14a44:	2000      	movs	r0, #0
   14a46:	4b13      	ldr	r3, [pc, #76]	; (14a94 <HTTP_DownloadFileInit+0x70>)
   14a48:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   14a4a:	4b0e      	ldr	r3, [pc, #56]	; (14a84 <HTTP_DownloadFileInit+0x60>)
   14a4c:	2234      	movs	r2, #52	; 0x34
   14a4e:	5c9b      	ldrb	r3, [r3, r2]
   14a50:	2b00      	cmp	r3, #0
   14a52:	d1f7      	bne.n	14a44 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   14a54:	4b10      	ldr	r3, [pc, #64]	; (14a98 <HTTP_DownloadFileInit+0x74>)
   14a56:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   14a58:	4b10      	ldr	r3, [pc, #64]	; (14a9c <HTTP_DownloadFileInit+0x78>)
   14a5a:	2201      	movs	r2, #1
   14a5c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   14a5e:	4a10      	ldr	r2, [pc, #64]	; (14aa0 <HTTP_DownloadFileInit+0x7c>)
   14a60:	4b10      	ldr	r3, [pc, #64]	; (14aa4 <HTTP_DownloadFileInit+0x80>)
   14a62:	0011      	movs	r1, r2
   14a64:	0018      	movs	r0, r3
   14a66:	4b10      	ldr	r3, [pc, #64]	; (14aa8 <HTTP_DownloadFileInit+0x84>)
   14a68:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   14a6a:	4b10      	ldr	r3, [pc, #64]	; (14aac <HTTP_DownloadFileInit+0x88>)
   14a6c:	4798      	blx	r3

    start_download();
   14a6e:	4b10      	ldr	r3, [pc, #64]	; (14ab0 <HTTP_DownloadFileInit+0x8c>)
   14a70:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   14a72:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <HTTP_DownloadFileInit+0x90>)
   14a74:	2203      	movs	r2, #3
   14a76:	701a      	strb	r2, [r3, #0]
}
   14a78:	46c0      	nop			; (mov r8, r8)
   14a7a:	46bd      	mov	sp, r7
   14a7c:	bd80      	pop	{r7, pc}
   14a7e:	46c0      	nop			; (mov r8, r8)
   14a80:	0003386c 	.word	0x0003386c
   14a84:	200006d8 	.word	0x200006d8
   14a88:	0002d561 	.word	0x0002d561
   14a8c:	00033c74 	.word	0x00033c74
   14a90:	0001baa5 	.word	0x0001baa5
   14a94:	0001fb95 	.word	0x0001fb95
   14a98:	00023151 	.word	0x00023151
   14a9c:	20000478 	.word	0x20000478
   14aa0:	00014201 	.word	0x00014201
   14aa4:	000141cd 	.word	0x000141cd
   14aa8:	00023199 	.word	0x00023199
   14aac:	00023101 	.word	0x00023101
   14ab0:	00013df1 	.word	0x00013df1
   14ab4:	20000464 	.word	0x20000464

00014ab8 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   14ab8:	b590      	push	{r4, r7, lr}
   14aba:	b085      	sub	sp, #20
   14abc:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14abe:	e009      	b.n	14ad4 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   14ac0:	2000      	movs	r0, #0
   14ac2:	4b2a      	ldr	r3, [pc, #168]	; (14b6c <HTTP_DownloadFileTransaction+0xb4>)
   14ac4:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   14ac6:	4b2a      	ldr	r3, [pc, #168]	; (14b70 <HTTP_DownloadFileTransaction+0xb8>)
   14ac8:	0018      	movs	r0, r3
   14aca:	4b2a      	ldr	r3, [pc, #168]	; (14b74 <HTTP_DownloadFileTransaction+0xbc>)
   14acc:	4798      	blx	r3
        vTaskDelay(5);
   14ace:	2005      	movs	r0, #5
   14ad0:	4b29      	ldr	r3, [pc, #164]	; (14b78 <HTTP_DownloadFileTransaction+0xc0>)
   14ad2:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14ad4:	2010      	movs	r0, #16
   14ad6:	4b29      	ldr	r3, [pc, #164]	; (14b7c <HTTP_DownloadFileTransaction+0xc4>)
   14ad8:	4798      	blx	r3
   14ada:	0003      	movs	r3, r0
   14adc:	001a      	movs	r2, r3
   14ade:	2301      	movs	r3, #1
   14ae0:	4053      	eors	r3, r2
   14ae2:	b2db      	uxtb	r3, r3
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d009      	beq.n	14afc <HTTP_DownloadFileTransaction+0x44>
   14ae8:	2020      	movs	r0, #32
   14aea:	4b24      	ldr	r3, [pc, #144]	; (14b7c <HTTP_DownloadFileTransaction+0xc4>)
   14aec:	4798      	blx	r3
   14aee:	0003      	movs	r3, r0
   14af0:	001a      	movs	r2, r3
   14af2:	2301      	movs	r3, #1
   14af4:	4053      	eors	r3, r2
   14af6:	b2db      	uxtb	r3, r3
   14af8:	2b00      	cmp	r3, #0
   14afa:	d1e1      	bne.n	14ac0 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   14afc:	4b20      	ldr	r3, [pc, #128]	; (14b80 <HTTP_DownloadFileTransaction+0xc8>)
   14afe:	4798      	blx	r3
    vTaskDelay(1000);
   14b00:	23fa      	movs	r3, #250	; 0xfa
   14b02:	009b      	lsls	r3, r3, #2
   14b04:	0018      	movs	r0, r3
   14b06:	4b1c      	ldr	r3, [pc, #112]	; (14b78 <HTTP_DownloadFileTransaction+0xc0>)
   14b08:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   14b0a:	4b1e      	ldr	r3, [pc, #120]	; (14b84 <HTTP_DownloadFileTransaction+0xcc>)
   14b0c:	2200      	movs	r2, #0
   14b0e:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   14b10:	003b      	movs	r3, r7
   14b12:	4a1d      	ldr	r2, [pc, #116]	; (14b88 <HTTP_DownloadFileTransaction+0xd0>)
   14b14:	ca13      	ldmia	r2!, {r0, r1, r4}
   14b16:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14b18:	003b      	movs	r3, r7
   14b1a:	2230      	movs	r2, #48	; 0x30
   14b1c:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14b1e:	230f      	movs	r3, #15
   14b20:	18fc      	adds	r4, r7, r3
   14b22:	0039      	movs	r1, r7
   14b24:	4b19      	ldr	r3, [pc, #100]	; (14b8c <HTTP_DownloadFileTransaction+0xd4>)
   14b26:	220a      	movs	r2, #10
   14b28:	0018      	movs	r0, r3
   14b2a:	4b19      	ldr	r3, [pc, #100]	; (14b90 <HTTP_DownloadFileTransaction+0xd8>)
   14b2c:	4798      	blx	r3
   14b2e:	0003      	movs	r3, r0
   14b30:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   14b32:	230f      	movs	r3, #15
   14b34:	18fb      	adds	r3, r7, r3
   14b36:	781b      	ldrb	r3, [r3, #0]
   14b38:	2b00      	cmp	r3, #0
   14b3a:	d008      	beq.n	14b4e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   14b3c:	230f      	movs	r3, #15
   14b3e:	18fb      	adds	r3, r7, r3
   14b40:	781a      	ldrb	r2, [r3, #0]
   14b42:	4b14      	ldr	r3, [pc, #80]	; (14b94 <HTTP_DownloadFileTransaction+0xdc>)
   14b44:	0019      	movs	r1, r3
   14b46:	2000      	movs	r0, #0
   14b48:	4b13      	ldr	r3, [pc, #76]	; (14b98 <HTTP_DownloadFileTransaction+0xe0>)
   14b4a:	4798      	blx	r3
   14b4c:	e003      	b.n	14b56 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   14b4e:	4b13      	ldr	r3, [pc, #76]	; (14b9c <HTTP_DownloadFileTransaction+0xe4>)
   14b50:	0018      	movs	r0, r3
   14b52:	4b13      	ldr	r3, [pc, #76]	; (14ba0 <HTTP_DownloadFileTransaction+0xe8>)
   14b54:	4798      	blx	r3
    }

    f_close(&file_object);
   14b56:	4b0d      	ldr	r3, [pc, #52]	; (14b8c <HTTP_DownloadFileTransaction+0xd4>)
   14b58:	0018      	movs	r0, r3
   14b5a:	4b12      	ldr	r3, [pc, #72]	; (14ba4 <HTTP_DownloadFileTransaction+0xec>)
   14b5c:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   14b5e:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <HTTP_DownloadFileTransaction+0xf0>)
   14b60:	2200      	movs	r2, #0
   14b62:	701a      	strb	r2, [r3, #0]
}
   14b64:	46c0      	nop			; (mov r8, r8)
   14b66:	46bd      	mov	sp, r7
   14b68:	b005      	add	sp, #20
   14b6a:	bd90      	pop	{r4, r7, pc}
   14b6c:	0001fb95 	.word	0x0001fb95
   14b70:	20004220 	.word	0x20004220
   14b74:	00030289 	.word	0x00030289
   14b78:	00019d65 	.word	0x00019d65
   14b7c:	00013ac9 	.word	0x00013ac9
   14b80:	00023151 	.word	0x00023151
   14b84:	20000478 	.word	0x20000478
   14b88:	000340d0 	.word	0x000340d0
   14b8c:	200006ac 	.word	0x200006ac
   14b90:	0002b551 	.word	0x0002b551
   14b94:	000340ac 	.word	0x000340ac
   14b98:	0001baa5 	.word	0x0001baa5
   14b9c:	000340bc 	.word	0x000340bc
   14ba0:	0001b9b9 	.word	0x0001b9b9
   14ba4:	0002bf51 	.word	0x0002bf51
   14ba8:	20000464 	.word	0x20000464

00014bac <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   14bac:	b580      	push	{r7, lr}
   14bae:	af00      	add	r7, sp, #0
    socketDeinit();
   14bb0:	4b18      	ldr	r3, [pc, #96]	; (14c14 <MQTT_InitRoutine+0x68>)
   14bb2:	4798      	blx	r3
    configure_mqtt();
   14bb4:	4b18      	ldr	r3, [pc, #96]	; (14c18 <MQTT_InitRoutine+0x6c>)
   14bb6:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14bb8:	4a18      	ldr	r2, [pc, #96]	; (14c1c <MQTT_InitRoutine+0x70>)
   14bba:	4b19      	ldr	r3, [pc, #100]	; (14c20 <MQTT_InitRoutine+0x74>)
   14bbc:	0011      	movs	r1, r2
   14bbe:	0018      	movs	r0, r3
   14bc0:	4b18      	ldr	r3, [pc, #96]	; (14c24 <MQTT_InitRoutine+0x78>)
   14bc2:	4798      	blx	r3
    socketInit();
   14bc4:	4b18      	ldr	r3, [pc, #96]	; (14c28 <MQTT_InitRoutine+0x7c>)
   14bc6:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   14bc8:	4b18      	ldr	r3, [pc, #96]	; (14c2c <MQTT_InitRoutine+0x80>)
   14bca:	2234      	movs	r2, #52	; 0x34
   14bcc:	5c9b      	ldrb	r3, [r3, r2]
   14bce:	2201      	movs	r2, #1
   14bd0:	4053      	eors	r3, r2
   14bd2:	b2db      	uxtb	r3, r3
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	d00c      	beq.n	14bf2 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   14bd8:	4a15      	ldr	r2, [pc, #84]	; (14c30 <MQTT_InitRoutine+0x84>)
   14bda:	4b14      	ldr	r3, [pc, #80]	; (14c2c <MQTT_InitRoutine+0x80>)
   14bdc:	0011      	movs	r1, r2
   14bde:	0018      	movs	r0, r3
   14be0:	4b14      	ldr	r3, [pc, #80]	; (14c34 <MQTT_InitRoutine+0x88>)
   14be2:	4798      	blx	r3
   14be4:	1e03      	subs	r3, r0, #0
   14be6:	d004      	beq.n	14bf2 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   14be8:	4b13      	ldr	r3, [pc, #76]	; (14c38 <MQTT_InitRoutine+0x8c>)
   14bea:	0019      	movs	r1, r3
   14bec:	2001      	movs	r0, #1
   14bee:	4b13      	ldr	r3, [pc, #76]	; (14c3c <MQTT_InitRoutine+0x90>)
   14bf0:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   14bf2:	4b0e      	ldr	r3, [pc, #56]	; (14c2c <MQTT_InitRoutine+0x80>)
   14bf4:	2234      	movs	r2, #52	; 0x34
   14bf6:	5c9b      	ldrb	r3, [r3, r2]
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	d004      	beq.n	14c06 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   14bfc:	4b10      	ldr	r3, [pc, #64]	; (14c40 <MQTT_InitRoutine+0x94>)
   14bfe:	0019      	movs	r1, r3
   14c00:	2001      	movs	r0, #1
   14c02:	4b0e      	ldr	r3, [pc, #56]	; (14c3c <MQTT_InitRoutine+0x90>)
   14c04:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   14c06:	4b0f      	ldr	r3, [pc, #60]	; (14c44 <MQTT_InitRoutine+0x98>)
   14c08:	2201      	movs	r2, #1
   14c0a:	701a      	strb	r2, [r3, #0]
}
   14c0c:	46c0      	nop			; (mov r8, r8)
   14c0e:	46bd      	mov	sp, r7
   14c10:	bd80      	pop	{r7, pc}
   14c12:	46c0      	nop			; (mov r8, r8)
   14c14:	00023151 	.word	0x00023151
   14c18:	0001496d 	.word	0x0001496d
   14c1c:	00014589 	.word	0x00014589
   14c20:	00014555 	.word	0x00014555
   14c24:	00023199 	.word	0x00023199
   14c28:	00023101 	.word	0x00023101
   14c2c:	200006d8 	.word	0x200006d8
   14c30:	0003386c 	.word	0x0003386c
   14c34:	0002d42d 	.word	0x0002d42d
   14c38:	00033c74 	.word	0x00033c74
   14c3c:	0001baa5 	.word	0x0001baa5
   14c40:	000340dc 	.word	0x000340dc
   14c44:	20000464 	.word	0x20000464

00014c48 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   14c48:	b580      	push	{r7, lr}
   14c4a:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   14c4c:	2000      	movs	r0, #0
   14c4e:	4b0c      	ldr	r3, [pc, #48]	; (14c80 <MQTT_HandleTransactions+0x38>)
   14c50:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   14c52:	4b0c      	ldr	r3, [pc, #48]	; (14c84 <MQTT_HandleTransactions+0x3c>)
   14c54:	0018      	movs	r0, r3
   14c56:	4b0c      	ldr	r3, [pc, #48]	; (14c88 <MQTT_HandleTransactions+0x40>)
   14c58:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   14c5a:	4b0c      	ldr	r3, [pc, #48]	; (14c8c <MQTT_HandleTransactions+0x44>)
   14c5c:	4798      	blx	r3
    MQTT_HandleImuMessages();
   14c5e:	4b0c      	ldr	r3, [pc, #48]	; (14c90 <MQTT_HandleTransactions+0x48>)
   14c60:	4798      	blx	r3
	
	MQTT_HandleDebugMessages();
   14c62:	4b0c      	ldr	r3, [pc, #48]	; (14c94 <MQTT_HandleTransactions+0x4c>)
   14c64:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   14c66:	4b0c      	ldr	r3, [pc, #48]	; (14c98 <MQTT_HandleTransactions+0x50>)
   14c68:	2234      	movs	r2, #52	; 0x34
   14c6a:	5c9b      	ldrb	r3, [r3, r2]
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d004      	beq.n	14c7a <MQTT_HandleTransactions+0x32>
   14c70:	4b09      	ldr	r3, [pc, #36]	; (14c98 <MQTT_HandleTransactions+0x50>)
   14c72:	2164      	movs	r1, #100	; 0x64
   14c74:	0018      	movs	r0, r3
   14c76:	4b09      	ldr	r3, [pc, #36]	; (14c9c <MQTT_HandleTransactions+0x54>)
   14c78:	4798      	blx	r3
}
   14c7a:	46c0      	nop			; (mov r8, r8)
   14c7c:	46bd      	mov	sp, r7
   14c7e:	bd80      	pop	{r7, pc}
   14c80:	0001fb95 	.word	0x0001fb95
   14c84:	20004220 	.word	0x20004220
   14c88:	00030289 	.word	0x00030289
   14c8c:	00014d2d 	.word	0x00014d2d
   14c90:	00014ca1 	.word	0x00014ca1
   14c94:	00014e55 	.word	0x00014e55
   14c98:	200006d8 	.word	0x200006d8
   14c9c:	0002d65d 	.word	0x0002d65d

00014ca0 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   14ca0:	b590      	push	{r4, r7, lr}
   14ca2:	b085      	sub	sp, #20
   14ca4:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   14ca6:	4b18      	ldr	r3, [pc, #96]	; (14d08 <MQTT_HandleImuMessages+0x68>)
   14ca8:	681b      	ldr	r3, [r3, #0]
   14caa:	0039      	movs	r1, r7
   14cac:	2200      	movs	r2, #0
   14cae:	0018      	movs	r0, r3
   14cb0:	4b16      	ldr	r3, [pc, #88]	; (14d0c <MQTT_HandleImuMessages+0x6c>)
   14cb2:	4798      	blx	r3
   14cb4:	0003      	movs	r3, r0
   14cb6:	2b01      	cmp	r3, #1
   14cb8:	d121      	bne.n	14cfe <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   14cba:	003b      	movs	r3, r7
   14cbc:	2200      	movs	r2, #0
   14cbe:	5e9b      	ldrsh	r3, [r3, r2]
   14cc0:	001c      	movs	r4, r3
   14cc2:	003b      	movs	r3, r7
   14cc4:	2202      	movs	r2, #2
   14cc6:	5e9b      	ldrsh	r3, [r3, r2]
   14cc8:	0019      	movs	r1, r3
   14cca:	003b      	movs	r3, r7
   14ccc:	2204      	movs	r2, #4
   14cce:	5e9b      	ldrsh	r3, [r3, r2]
   14cd0:	4a0f      	ldr	r2, [pc, #60]	; (14d10 <MQTT_HandleImuMessages+0x70>)
   14cd2:	4810      	ldr	r0, [pc, #64]	; (14d14 <MQTT_HandleImuMessages+0x74>)
   14cd4:	9301      	str	r3, [sp, #4]
   14cd6:	9100      	str	r1, [sp, #0]
   14cd8:	0023      	movs	r3, r4
   14cda:	213f      	movs	r1, #63	; 0x3f
   14cdc:	4c0e      	ldr	r4, [pc, #56]	; (14d18 <MQTT_HandleImuMessages+0x78>)
   14cde:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14ce0:	4b0c      	ldr	r3, [pc, #48]	; (14d14 <MQTT_HandleImuMessages+0x74>)
   14ce2:	0018      	movs	r0, r3
   14ce4:	4b0d      	ldr	r3, [pc, #52]	; (14d1c <MQTT_HandleImuMessages+0x7c>)
   14ce6:	4798      	blx	r3
   14ce8:	0004      	movs	r4, r0
   14cea:	4a0a      	ldr	r2, [pc, #40]	; (14d14 <MQTT_HandleImuMessages+0x74>)
   14cec:	490c      	ldr	r1, [pc, #48]	; (14d20 <MQTT_HandleImuMessages+0x80>)
   14cee:	480d      	ldr	r0, [pc, #52]	; (14d24 <MQTT_HandleImuMessages+0x84>)
   14cf0:	2300      	movs	r3, #0
   14cf2:	9301      	str	r3, [sp, #4]
   14cf4:	2301      	movs	r3, #1
   14cf6:	9300      	str	r3, [sp, #0]
   14cf8:	0023      	movs	r3, r4
   14cfa:	4c0b      	ldr	r4, [pc, #44]	; (14d28 <MQTT_HandleImuMessages+0x88>)
   14cfc:	47a0      	blx	r4
    }
}
   14cfe:	46c0      	nop			; (mov r8, r8)
   14d00:	46bd      	mov	sp, r7
   14d02:	b003      	add	sp, #12
   14d04:	bd90      	pop	{r4, r7, pc}
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	20000470 	.word	0x20000470
   14d0c:	00018bb9 	.word	0x00018bb9
   14d10:	000340f8 	.word	0x000340f8
   14d14:	20000014 	.word	0x20000014
   14d18:	0003245d 	.word	0x0003245d
   14d1c:	000325bb 	.word	0x000325bb
   14d20:	00033fb4 	.word	0x00033fb4
   14d24:	200006d8 	.word	0x200006d8
   14d28:	0002d5a9 	.word	0x0002d5a9

00014d2c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   14d2c:	b590      	push	{r4, r7, lr}
   14d2e:	b08b      	sub	sp, #44	; 0x2c
   14d30:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   14d32:	4b39      	ldr	r3, [pc, #228]	; (14e18 <MQTT_HandleGameMessages+0xec>)
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	2208      	movs	r2, #8
   14d38:	18b9      	adds	r1, r7, r2
   14d3a:	2200      	movs	r2, #0
   14d3c:	0018      	movs	r0, r3
   14d3e:	4b37      	ldr	r3, [pc, #220]	; (14e1c <MQTT_HandleGameMessages+0xf0>)
   14d40:	4798      	blx	r3
   14d42:	0003      	movs	r3, r0
   14d44:	2b01      	cmp	r3, #1
   14d46:	d163      	bne.n	14e10 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   14d48:	4b35      	ldr	r3, [pc, #212]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14d4a:	4a36      	ldr	r2, [pc, #216]	; (14e24 <MQTT_HandleGameMessages+0xf8>)
   14d4c:	ca03      	ldmia	r2!, {r0, r1}
   14d4e:	c303      	stmia	r3!, {r0, r1}
   14d50:	8812      	ldrh	r2, [r2, #0]
   14d52:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   14d54:	2300      	movs	r3, #0
   14d56:	61fb      	str	r3, [r7, #28]
   14d58:	e02d      	b.n	14db6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   14d5a:	2308      	movs	r3, #8
   14d5c:	18fa      	adds	r2, r7, r3
   14d5e:	69fb      	ldr	r3, [r7, #28]
   14d60:	18d3      	adds	r3, r2, r3
   14d62:	781b      	ldrb	r3, [r3, #0]
   14d64:	2bff      	cmp	r3, #255	; 0xff
   14d66:	d02a      	beq.n	14dbe <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14d68:	2308      	movs	r3, #8
   14d6a:	18fa      	adds	r2, r7, r3
   14d6c:	69fb      	ldr	r3, [r7, #28]
   14d6e:	18d3      	adds	r3, r2, r3
   14d70:	781b      	ldrb	r3, [r3, #0]
   14d72:	4a2d      	ldr	r2, [pc, #180]	; (14e28 <MQTT_HandleGameMessages+0xfc>)
   14d74:	0038      	movs	r0, r7
   14d76:	2103      	movs	r1, #3
   14d78:	4c2c      	ldr	r4, [pc, #176]	; (14e2c <MQTT_HandleGameMessages+0x100>)
   14d7a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   14d7c:	003a      	movs	r2, r7
   14d7e:	4b28      	ldr	r3, [pc, #160]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14d80:	0011      	movs	r1, r2
   14d82:	0018      	movs	r0, r3
   14d84:	4b2a      	ldr	r3, [pc, #168]	; (14e30 <MQTT_HandleGameMessages+0x104>)
   14d86:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   14d88:	69fb      	ldr	r3, [r7, #28]
   14d8a:	3301      	adds	r3, #1
   14d8c:	2208      	movs	r2, #8
   14d8e:	18ba      	adds	r2, r7, r2
   14d90:	5cd3      	ldrb	r3, [r2, r3]
   14d92:	2bff      	cmp	r3, #255	; 0xff
   14d94:	d00c      	beq.n	14db0 <MQTT_HandleGameMessages+0x84>
   14d96:	69fb      	ldr	r3, [r7, #28]
   14d98:	3301      	adds	r3, #1
   14d9a:	2b13      	cmp	r3, #19
   14d9c:	dc08      	bgt.n	14db0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   14d9e:	003b      	movs	r3, r7
   14da0:	222c      	movs	r2, #44	; 0x2c
   14da2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   14da4:	003a      	movs	r2, r7
   14da6:	4b1e      	ldr	r3, [pc, #120]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14da8:	0011      	movs	r1, r2
   14daa:	0018      	movs	r0, r3
   14dac:	4b20      	ldr	r3, [pc, #128]	; (14e30 <MQTT_HandleGameMessages+0x104>)
   14dae:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   14db0:	69fb      	ldr	r3, [r7, #28]
   14db2:	3301      	adds	r3, #1
   14db4:	61fb      	str	r3, [r7, #28]
   14db6:	69fb      	ldr	r3, [r7, #28]
   14db8:	2b13      	cmp	r3, #19
   14dba:	ddce      	ble.n	14d5a <MQTT_HandleGameMessages+0x2e>
   14dbc:	e000      	b.n	14dc0 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   14dbe:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   14dc0:	4b17      	ldr	r3, [pc, #92]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14dc2:	0018      	movs	r0, r3
   14dc4:	4b1b      	ldr	r3, [pc, #108]	; (14e34 <MQTT_HandleGameMessages+0x108>)
   14dc6:	4798      	blx	r3
   14dc8:	0003      	movs	r3, r0
   14dca:	001a      	movs	r2, r3
   14dcc:	4b14      	ldr	r3, [pc, #80]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14dce:	18d2      	adds	r2, r2, r3
   14dd0:	4b19      	ldr	r3, [pc, #100]	; (14e38 <MQTT_HandleGameMessages+0x10c>)
   14dd2:	0010      	movs	r0, r2
   14dd4:	0019      	movs	r1, r3
   14dd6:	2303      	movs	r3, #3
   14dd8:	001a      	movs	r2, r3
   14dda:	4b18      	ldr	r3, [pc, #96]	; (14e3c <MQTT_HandleGameMessages+0x110>)
   14ddc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   14dde:	4b10      	ldr	r3, [pc, #64]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14de0:	0019      	movs	r1, r3
   14de2:	2001      	movs	r0, #1
   14de4:	4b16      	ldr	r3, [pc, #88]	; (14e40 <MQTT_HandleGameMessages+0x114>)
   14de6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   14de8:	4b16      	ldr	r3, [pc, #88]	; (14e44 <MQTT_HandleGameMessages+0x118>)
   14dea:	0019      	movs	r1, r3
   14dec:	2001      	movs	r0, #1
   14dee:	4b14      	ldr	r3, [pc, #80]	; (14e40 <MQTT_HandleGameMessages+0x114>)
   14df0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14df2:	4b0b      	ldr	r3, [pc, #44]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14df4:	0018      	movs	r0, r3
   14df6:	4b0f      	ldr	r3, [pc, #60]	; (14e34 <MQTT_HandleGameMessages+0x108>)
   14df8:	4798      	blx	r3
   14dfa:	0004      	movs	r4, r0
   14dfc:	4a08      	ldr	r2, [pc, #32]	; (14e20 <MQTT_HandleGameMessages+0xf4>)
   14dfe:	4912      	ldr	r1, [pc, #72]	; (14e48 <MQTT_HandleGameMessages+0x11c>)
   14e00:	4812      	ldr	r0, [pc, #72]	; (14e4c <MQTT_HandleGameMessages+0x120>)
   14e02:	2300      	movs	r3, #0
   14e04:	9301      	str	r3, [sp, #4]
   14e06:	2301      	movs	r3, #1
   14e08:	9300      	str	r3, [sp, #0]
   14e0a:	0023      	movs	r3, r4
   14e0c:	4c10      	ldr	r4, [pc, #64]	; (14e50 <MQTT_HandleGameMessages+0x124>)
   14e0e:	47a0      	blx	r4
    }
}
   14e10:	46c0      	nop			; (mov r8, r8)
   14e12:	46bd      	mov	sp, r7
   14e14:	b009      	add	sp, #36	; 0x24
   14e16:	bd90      	pop	{r4, r7, pc}
   14e18:	2000046c 	.word	0x2000046c
   14e1c:	00018bb9 	.word	0x00018bb9
   14e20:	20000014 	.word	0x20000014
   14e24:	00033e10 	.word	0x00033e10
   14e28:	0003411c 	.word	0x0003411c
   14e2c:	0003245d 	.word	0x0003245d
   14e30:	00032541 	.word	0x00032541
   14e34:	000325bb 	.word	0x000325bb
   14e38:	00034120 	.word	0x00034120
   14e3c:	000321cd 	.word	0x000321cd
   14e40:	0001baa5 	.word	0x0001baa5
   14e44:	00034124 	.word	0x00034124
   14e48:	00034128 	.word	0x00034128
   14e4c:	200006d8 	.word	0x200006d8
   14e50:	0002d5a9 	.word	0x0002d5a9

00014e54 <MQTT_HandleDebugMessages>:

void MQTT_HandleDebugMessages()
{
   14e54:	b590      	push	{r4, r7, lr}
   14e56:	b085      	sub	sp, #20
   14e58:	af02      	add	r7, sp, #8
	bool led = port_pin_get_input_level(BUTTON_0_PIN);
   14e5a:	1dfc      	adds	r4, r7, #7
   14e5c:	2037      	movs	r0, #55	; 0x37
   14e5e:	4b11      	ldr	r3, [pc, #68]	; (14ea4 <MQTT_HandleDebugMessages+0x50>)
   14e60:	4798      	blx	r3
   14e62:	0003      	movs	r3, r0
   14e64:	7023      	strb	r3, [r4, #0]
	if(led == true)
   14e66:	1dfb      	adds	r3, r7, #7
   14e68:	781b      	ldrb	r3, [r3, #0]
   14e6a:	2b00      	cmp	r3, #0
   14e6c:	d003      	beq.n	14e76 <MQTT_HandleDebugMessages+0x22>
	{
		sprintf(mqtt_msg, "1");
   14e6e:	4b0e      	ldr	r3, [pc, #56]	; (14ea8 <MQTT_HandleDebugMessages+0x54>)
   14e70:	2231      	movs	r2, #49	; 0x31
   14e72:	801a      	strh	r2, [r3, #0]
   14e74:	e002      	b.n	14e7c <MQTT_HandleDebugMessages+0x28>
	}
	else
	{
		sprintf(mqtt_msg, "0");
   14e76:	4b0c      	ldr	r3, [pc, #48]	; (14ea8 <MQTT_HandleDebugMessages+0x54>)
   14e78:	2230      	movs	r2, #48	; 0x30
   14e7a:	801a      	strh	r2, [r3, #0]
	}
	mqtt_publish(&mqtt_inst, DEBUG_TOPIC_0, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14e7c:	4b0a      	ldr	r3, [pc, #40]	; (14ea8 <MQTT_HandleDebugMessages+0x54>)
   14e7e:	0018      	movs	r0, r3
   14e80:	4b0a      	ldr	r3, [pc, #40]	; (14eac <MQTT_HandleDebugMessages+0x58>)
   14e82:	4798      	blx	r3
   14e84:	0004      	movs	r4, r0
   14e86:	4a08      	ldr	r2, [pc, #32]	; (14ea8 <MQTT_HandleDebugMessages+0x54>)
   14e88:	4909      	ldr	r1, [pc, #36]	; (14eb0 <MQTT_HandleDebugMessages+0x5c>)
   14e8a:	480a      	ldr	r0, [pc, #40]	; (14eb4 <MQTT_HandleDebugMessages+0x60>)
   14e8c:	2300      	movs	r3, #0
   14e8e:	9301      	str	r3, [sp, #4]
   14e90:	2301      	movs	r3, #1
   14e92:	9300      	str	r3, [sp, #0]
   14e94:	0023      	movs	r3, r4
   14e96:	4c08      	ldr	r4, [pc, #32]	; (14eb8 <MQTT_HandleDebugMessages+0x64>)
   14e98:	47a0      	blx	r4
}
   14e9a:	46c0      	nop			; (mov r8, r8)
   14e9c:	46bd      	mov	sp, r7
   14e9e:	b003      	add	sp, #12
   14ea0:	bd90      	pop	{r4, r7, pc}
   14ea2:	46c0      	nop			; (mov r8, r8)
   14ea4:	00013985 	.word	0x00013985
   14ea8:	20000014 	.word	0x20000014
   14eac:	000325bb 	.word	0x000325bb
   14eb0:	0003413c 	.word	0x0003413c
   14eb4:	200006d8 	.word	0x200006d8
   14eb8:	0002d5a9 	.word	0x0002d5a9

00014ebc <vWifiTask>:
 *
 * \return program return value.
 */

void vWifiTask(void *pvParameters)
{
   14ebc:	b590      	push	{r4, r7, lr}
   14ebe:	b08d      	sub	sp, #52	; 0x34
   14ec0:	af02      	add	r7, sp, #8
   14ec2:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   14ec4:	2064      	movs	r0, #100	; 0x64
   14ec6:	4b77      	ldr	r3, [pc, #476]	; (150a4 <vWifiTask+0x1e8>)
   14ec8:	4798      	blx	r3
    init_state();
   14eca:	4b77      	ldr	r3, [pc, #476]	; (150a8 <vWifiTask+0x1ec>)
   14ecc:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   14ece:	2200      	movs	r2, #0
   14ed0:	2104      	movs	r1, #4
   14ed2:	2005      	movs	r0, #5
   14ed4:	4b75      	ldr	r3, [pc, #468]	; (150ac <vWifiTask+0x1f0>)
   14ed6:	4798      	blx	r3
   14ed8:	0002      	movs	r2, r0
   14eda:	4b75      	ldr	r3, [pc, #468]	; (150b0 <vWifiTask+0x1f4>)
   14edc:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   14ede:	2200      	movs	r2, #0
   14ee0:	2106      	movs	r1, #6
   14ee2:	2005      	movs	r0, #5
   14ee4:	4b71      	ldr	r3, [pc, #452]	; (150ac <vWifiTask+0x1f0>)
   14ee6:	4798      	blx	r3
   14ee8:	0002      	movs	r2, r0
   14eea:	4b72      	ldr	r3, [pc, #456]	; (150b4 <vWifiTask+0x1f8>)
   14eec:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   14eee:	2200      	movs	r2, #0
   14ef0:	2114      	movs	r1, #20
   14ef2:	2002      	movs	r0, #2
   14ef4:	4b6d      	ldr	r3, [pc, #436]	; (150ac <vWifiTask+0x1f0>)
   14ef6:	4798      	blx	r3
   14ef8:	0002      	movs	r2, r0
   14efa:	4b6f      	ldr	r3, [pc, #444]	; (150b8 <vWifiTask+0x1fc>)
   14efc:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   14efe:	2200      	movs	r2, #0
   14f00:	2102      	movs	r1, #2
   14f02:	2005      	movs	r0, #5
   14f04:	4b69      	ldr	r3, [pc, #420]	; (150ac <vWifiTask+0x1f0>)
   14f06:	4798      	blx	r3
   14f08:	0002      	movs	r2, r0
   14f0a:	4b6c      	ldr	r3, [pc, #432]	; (150bc <vWifiTask+0x200>)
   14f0c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   14f0e:	4b68      	ldr	r3, [pc, #416]	; (150b0 <vWifiTask+0x1f4>)
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	2b00      	cmp	r3, #0
   14f14:	d00b      	beq.n	14f2e <vWifiTask+0x72>
   14f16:	4b67      	ldr	r3, [pc, #412]	; (150b4 <vWifiTask+0x1f8>)
   14f18:	681b      	ldr	r3, [r3, #0]
   14f1a:	2b00      	cmp	r3, #0
   14f1c:	d007      	beq.n	14f2e <vWifiTask+0x72>
   14f1e:	4b66      	ldr	r3, [pc, #408]	; (150b8 <vWifiTask+0x1fc>)
   14f20:	681b      	ldr	r3, [r3, #0]
   14f22:	2b00      	cmp	r3, #0
   14f24:	d003      	beq.n	14f2e <vWifiTask+0x72>
   14f26:	4b65      	ldr	r3, [pc, #404]	; (150bc <vWifiTask+0x200>)
   14f28:	681b      	ldr	r3, [r3, #0]
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d103      	bne.n	14f36 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   14f2e:	4b64      	ldr	r3, [pc, #400]	; (150c0 <vWifiTask+0x204>)
   14f30:	0018      	movs	r0, r3
   14f32:	4b64      	ldr	r3, [pc, #400]	; (150c4 <vWifiTask+0x208>)
   14f34:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   14f36:	4b64      	ldr	r3, [pc, #400]	; (150c8 <vWifiTask+0x20c>)
   14f38:	0018      	movs	r0, r3
   14f3a:	4b62      	ldr	r3, [pc, #392]	; (150c4 <vWifiTask+0x208>)
   14f3c:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   14f3e:	4b63      	ldr	r3, [pc, #396]	; (150cc <vWifiTask+0x210>)
   14f40:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   14f42:	4b63      	ldr	r3, [pc, #396]	; (150d0 <vWifiTask+0x214>)
   14f44:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   14f46:	4b63      	ldr	r3, [pc, #396]	; (150d4 <vWifiTask+0x218>)
   14f48:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   14f4a:	4b63      	ldr	r3, [pc, #396]	; (150d8 <vWifiTask+0x21c>)
   14f4c:	4798      	blx	r3
    /*Initialize BUTTON 0 as an external interrupt*/
    // configure_extint_channel();
    // configure_extint_callbacks();

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   14f4e:	230c      	movs	r3, #12
   14f50:	18fb      	adds	r3, r7, r3
   14f52:	2218      	movs	r2, #24
   14f54:	2100      	movs	r1, #0
   14f56:	0018      	movs	r0, r3
   14f58:	4b60      	ldr	r3, [pc, #384]	; (150dc <vWifiTask+0x220>)
   14f5a:	4798      	blx	r3

    nm_bsp_init();
   14f5c:	4b60      	ldr	r3, [pc, #384]	; (150e0 <vWifiTask+0x224>)
   14f5e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   14f60:	230c      	movs	r3, #12
   14f62:	18fb      	adds	r3, r7, r3
   14f64:	4a5f      	ldr	r2, [pc, #380]	; (150e4 <vWifiTask+0x228>)
   14f66:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   14f68:	2327      	movs	r3, #39	; 0x27
   14f6a:	18fc      	adds	r4, r7, r3
   14f6c:	230c      	movs	r3, #12
   14f6e:	18fb      	adds	r3, r7, r3
   14f70:	0018      	movs	r0, r3
   14f72:	4b5d      	ldr	r3, [pc, #372]	; (150e8 <vWifiTask+0x22c>)
   14f74:	4798      	blx	r3
   14f76:	0003      	movs	r3, r0
   14f78:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   14f7a:	2327      	movs	r3, #39	; 0x27
   14f7c:	18fb      	adds	r3, r7, r3
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	b25b      	sxtb	r3, r3
   14f82:	2b00      	cmp	r3, #0
   14f84:	d009      	beq.n	14f9a <vWifiTask+0xde>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   14f86:	2327      	movs	r3, #39	; 0x27
   14f88:	18fb      	adds	r3, r7, r3
   14f8a:	2200      	movs	r2, #0
   14f8c:	569a      	ldrsb	r2, [r3, r2]
   14f8e:	4b57      	ldr	r3, [pc, #348]	; (150ec <vWifiTask+0x230>)
   14f90:	0019      	movs	r1, r3
   14f92:	2001      	movs	r0, #1
   14f94:	4b56      	ldr	r3, [pc, #344]	; (150f0 <vWifiTask+0x234>)
   14f96:	4798      	blx	r3
        while (1) {
   14f98:	e7fe      	b.n	14f98 <vWifiTask+0xdc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   14f9a:	4a56      	ldr	r2, [pc, #344]	; (150f4 <vWifiTask+0x238>)
   14f9c:	4b56      	ldr	r3, [pc, #344]	; (150f8 <vWifiTask+0x23c>)
   14f9e:	0019      	movs	r1, r3
   14fa0:	2001      	movs	r0, #1
   14fa2:	4b53      	ldr	r3, [pc, #332]	; (150f0 <vWifiTask+0x234>)
   14fa4:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   14fa6:	4b55      	ldr	r3, [pc, #340]	; (150fc <vWifiTask+0x240>)
   14fa8:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14faa:	4a55      	ldr	r2, [pc, #340]	; (15100 <vWifiTask+0x244>)
   14fac:	4b55      	ldr	r3, [pc, #340]	; (15104 <vWifiTask+0x248>)
   14fae:	0011      	movs	r1, r2
   14fb0:	0018      	movs	r0, r3
   14fb2:	4b55      	ldr	r3, [pc, #340]	; (15108 <vWifiTask+0x24c>)
   14fb4:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   14fb6:	4a55      	ldr	r2, [pc, #340]	; (1510c <vWifiTask+0x250>)
   14fb8:	484e      	ldr	r0, [pc, #312]	; (150f4 <vWifiTask+0x238>)
   14fba:	23ff      	movs	r3, #255	; 0xff
   14fbc:	9300      	str	r3, [sp, #0]
   14fbe:	0013      	movs	r3, r2
   14fc0:	2202      	movs	r2, #2
   14fc2:	2112      	movs	r1, #18
   14fc4:	4c52      	ldr	r4, [pc, #328]	; (15110 <vWifiTask+0x254>)
   14fc6:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   14fc8:	e006      	b.n	14fd8 <vWifiTask+0x11c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   14fca:	2000      	movs	r0, #0
   14fcc:	4b51      	ldr	r3, [pc, #324]	; (15114 <vWifiTask+0x258>)
   14fce:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   14fd0:	4b51      	ldr	r3, [pc, #324]	; (15118 <vWifiTask+0x25c>)
   14fd2:	0018      	movs	r0, r3
   14fd4:	4b51      	ldr	r3, [pc, #324]	; (1511c <vWifiTask+0x260>)
   14fd6:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   14fd8:	2002      	movs	r0, #2
   14fda:	4b51      	ldr	r3, [pc, #324]	; (15120 <vWifiTask+0x264>)
   14fdc:	4798      	blx	r3
   14fde:	0003      	movs	r3, r0
   14fe0:	001a      	movs	r2, r3
   14fe2:	2301      	movs	r3, #1
   14fe4:	4053      	eors	r3, r2
   14fe6:	b2db      	uxtb	r3, r3
   14fe8:	2b00      	cmp	r3, #0
   14fea:	d1ee      	bne.n	14fca <vWifiTask+0x10e>
    }

    vTaskDelay(1000);
   14fec:	23fa      	movs	r3, #250	; 0xfa
   14fee:	009b      	lsls	r3, r3, #2
   14ff0:	0018      	movs	r0, r3
   14ff2:	4b2c      	ldr	r3, [pc, #176]	; (150a4 <vWifiTask+0x1e8>)
   14ff4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   14ff6:	4b4b      	ldr	r3, [pc, #300]	; (15124 <vWifiTask+0x268>)
   14ff8:	2201      	movs	r2, #1
   14ffa:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   14ffc:	4b49      	ldr	r3, [pc, #292]	; (15124 <vWifiTask+0x268>)
   14ffe:	781b      	ldrb	r3, [r3, #0]
   15000:	b25b      	sxtb	r3, r3
   15002:	2b01      	cmp	r3, #1
   15004:	d00b      	beq.n	1501e <vWifiTask+0x162>
   15006:	dc02      	bgt.n	1500e <vWifiTask+0x152>
   15008:	2b00      	cmp	r3, #0
   1500a:	d005      	beq.n	15018 <vWifiTask+0x15c>
   1500c:	e010      	b.n	15030 <vWifiTask+0x174>
   1500e:	2b02      	cmp	r3, #2
   15010:	d008      	beq.n	15024 <vWifiTask+0x168>
   15012:	2b03      	cmp	r3, #3
   15014:	d009      	beq.n	1502a <vWifiTask+0x16e>
   15016:	e00b      	b.n	15030 <vWifiTask+0x174>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   15018:	4b43      	ldr	r3, [pc, #268]	; (15128 <vWifiTask+0x26c>)
   1501a:	4798      	blx	r3

                break;
   1501c:	e00c      	b.n	15038 <vWifiTask+0x17c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1501e:	4b43      	ldr	r3, [pc, #268]	; (1512c <vWifiTask+0x270>)
   15020:	4798      	blx	r3
                break;
   15022:	e009      	b.n	15038 <vWifiTask+0x17c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   15024:	4b42      	ldr	r3, [pc, #264]	; (15130 <vWifiTask+0x274>)
   15026:	4798      	blx	r3
                break;
   15028:	e006      	b.n	15038 <vWifiTask+0x17c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1502a:	4b42      	ldr	r3, [pc, #264]	; (15134 <vWifiTask+0x278>)
   1502c:	4798      	blx	r3
                break;
   1502e:	e003      	b.n	15038 <vWifiTask+0x17c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   15030:	4b3c      	ldr	r3, [pc, #240]	; (15124 <vWifiTask+0x268>)
   15032:	2200      	movs	r2, #0
   15034:	701a      	strb	r2, [r3, #0]
                break;
   15036:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   15038:	230b      	movs	r3, #11
   1503a:	18fb      	adds	r3, r7, r3
   1503c:	2200      	movs	r2, #0
   1503e:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   15040:	4b1b      	ldr	r3, [pc, #108]	; (150b0 <vWifiTask+0x1f4>)
   15042:	681b      	ldr	r3, [r3, #0]
   15044:	220b      	movs	r2, #11
   15046:	18b9      	adds	r1, r7, r2
   15048:	2200      	movs	r2, #0
   1504a:	0018      	movs	r0, r3
   1504c:	4b3a      	ldr	r3, [pc, #232]	; (15138 <vWifiTask+0x27c>)
   1504e:	4798      	blx	r3
   15050:	0003      	movs	r3, r0
   15052:	2b01      	cmp	r3, #1
   15054:	d105      	bne.n	15062 <vWifiTask+0x1a6>
            wifiStateMachine = DataToReceive;  // Update new state
   15056:	230b      	movs	r3, #11
   15058:	18fb      	adds	r3, r7, r3
   1505a:	781b      	ldrb	r3, [r3, #0]
   1505c:	b25a      	sxtb	r2, r3
   1505e:	4b31      	ldr	r3, [pc, #196]	; (15124 <vWifiTask+0x268>)
   15060:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
   15062:	4b36      	ldr	r3, [pc, #216]	; (1513c <vWifiTask+0x280>)
   15064:	781b      	ldrb	r3, [r3, #0]
   15066:	b2db      	uxtb	r3, r3
   15068:	2b00      	cmp	r3, #0
   1506a:	d017      	beq.n	1509c <vWifiTask+0x1e0>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1506c:	4b34      	ldr	r3, [pc, #208]	; (15140 <vWifiTask+0x284>)
   1506e:	0018      	movs	r0, r3
   15070:	4b34      	ldr	r3, [pc, #208]	; (15144 <vWifiTask+0x288>)
   15072:	4798      	blx	r3
   15074:	0004      	movs	r4, r0
   15076:	4a32      	ldr	r2, [pc, #200]	; (15140 <vWifiTask+0x284>)
   15078:	4933      	ldr	r1, [pc, #204]	; (15148 <vWifiTask+0x28c>)
   1507a:	4834      	ldr	r0, [pc, #208]	; (1514c <vWifiTask+0x290>)
   1507c:	2300      	movs	r3, #0
   1507e:	9301      	str	r3, [sp, #4]
   15080:	2301      	movs	r3, #1
   15082:	9300      	str	r3, [sp, #0]
   15084:	0023      	movs	r3, r4
   15086:	4c32      	ldr	r4, [pc, #200]	; (15150 <vWifiTask+0x294>)
   15088:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1508a:	4a2d      	ldr	r2, [pc, #180]	; (15140 <vWifiTask+0x284>)
   1508c:	4b31      	ldr	r3, [pc, #196]	; (15154 <vWifiTask+0x298>)
   1508e:	0019      	movs	r1, r3
   15090:	2001      	movs	r0, #1
   15092:	4b17      	ldr	r3, [pc, #92]	; (150f0 <vWifiTask+0x234>)
   15094:	4798      	blx	r3
            isPressed = false;
   15096:	4b29      	ldr	r3, [pc, #164]	; (1513c <vWifiTask+0x280>)
   15098:	2200      	movs	r2, #0
   1509a:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
   1509c:	2064      	movs	r0, #100	; 0x64
   1509e:	4b01      	ldr	r3, [pc, #4]	; (150a4 <vWifiTask+0x1e8>)
   150a0:	4798      	blx	r3
    while (1) {
   150a2:	e7ab      	b.n	14ffc <vWifiTask+0x140>
   150a4:	00019d65 	.word	0x00019d65
   150a8:	00013a59 	.word	0x00013a59
   150ac:	00018059 	.word	0x00018059
   150b0:	20000468 	.word	0x20000468
   150b4:	20000470 	.word	0x20000470
   150b8:	2000046c 	.word	0x2000046c
   150bc:	20000474 	.word	0x20000474
   150c0:	00034148 	.word	0x00034148
   150c4:	0001b9b9 	.word	0x0001b9b9
   150c8:	00034170 	.word	0x00034170
   150cc:	00014499 	.word	0x00014499
   150d0:	000144d5 	.word	0x000144d5
   150d4:	0001496d 	.word	0x0001496d
   150d8:	000143b5 	.word	0x000143b5
   150dc:	00032203 	.word	0x00032203
   150e0:	0001dec9 	.word	0x0001dec9
   150e4:	00014261 	.word	0x00014261
   150e8:	0001f9a1 	.word	0x0001f9a1
   150ec:	0003418c 	.word	0x0003418c
   150f0:	0001baa5 	.word	0x0001baa5
   150f4:	00033c38 	.word	0x00033c38
   150f8:	000341b8 	.word	0x000341b8
   150fc:	00023101 	.word	0x00023101
   15100:	00014589 	.word	0x00014589
   15104:	00014555 	.word	0x00014555
   15108:	00023199 	.word	0x00023199
   1510c:	00033c28 	.word	0x00033c28
   15110:	0001fbb1 	.word	0x0001fbb1
   15114:	0001fb95 	.word	0x0001fb95
   15118:	20004220 	.word	0x20004220
   1511c:	00030289 	.word	0x00030289
   15120:	00013ac9 	.word	0x00013ac9
   15124:	20000464 	.word	0x20000464
   15128:	00014bad 	.word	0x00014bad
   1512c:	00014c49 	.word	0x00014c49
   15130:	00014a25 	.word	0x00014a25
   15134:	00014ab9 	.word	0x00014ab9
   15138:	00018bb9 	.word	0x00018bb9
   1513c:	20000b10 	.word	0x20000b10
   15140:	20000054 	.word	0x20000054
   15144:	000325bb 	.word	0x000325bb
   15148:	000341dc 	.word	0x000341dc
   1514c:	200006d8 	.word	0x200006d8
   15150:	0002d5a9 	.word	0x0002d5a9
   15154:	000341f8 	.word	0x000341f8

00015158 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   15158:	b590      	push	{r4, r7, lr}
   1515a:	b083      	sub	sp, #12
   1515c:	af00      	add	r7, sp, #0
   1515e:	0002      	movs	r2, r0
   15160:	1dfb      	adds	r3, r7, #7
   15162:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   15164:	1dfb      	adds	r3, r7, #7
   15166:	781b      	ldrb	r3, [r3, #0]
   15168:	2b03      	cmp	r3, #3
   1516a:	d806      	bhi.n	1517a <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   1516c:	4b05      	ldr	r3, [pc, #20]	; (15184 <WifiHandlerSetState+0x2c>)
   1516e:	6818      	ldr	r0, [r3, #0]
   15170:	1df9      	adds	r1, r7, #7
   15172:	2300      	movs	r3, #0
   15174:	220a      	movs	r2, #10
   15176:	4c04      	ldr	r4, [pc, #16]	; (15188 <WifiHandlerSetState+0x30>)
   15178:	47a0      	blx	r4
    }
}
   1517a:	46c0      	nop			; (mov r8, r8)
   1517c:	46bd      	mov	sp, r7
   1517e:	b003      	add	sp, #12
   15180:	bd90      	pop	{r4, r7, pc}
   15182:	46c0      	nop			; (mov r8, r8)
   15184:	20000468 	.word	0x20000468
   15188:	00018301 	.word	0x00018301

0001518c <system_gclk_chan_get_config_defaults>:
   1518c:	b580      	push	{r7, lr}
   1518e:	b082      	sub	sp, #8
   15190:	af00      	add	r7, sp, #0
   15192:	6078      	str	r0, [r7, #4]
   15194:	687b      	ldr	r3, [r7, #4]
   15196:	2200      	movs	r2, #0
   15198:	701a      	strb	r2, [r3, #0]
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	46bd      	mov	sp, r7
   1519e:	b002      	add	sp, #8
   151a0:	bd80      	pop	{r7, pc}
	...

000151a4 <system_apb_clock_set_mask>:
   151a4:	b580      	push	{r7, lr}
   151a6:	b082      	sub	sp, #8
   151a8:	af00      	add	r7, sp, #0
   151aa:	0002      	movs	r2, r0
   151ac:	6039      	str	r1, [r7, #0]
   151ae:	1dfb      	adds	r3, r7, #7
   151b0:	701a      	strb	r2, [r3, #0]
   151b2:	1dfb      	adds	r3, r7, #7
   151b4:	781b      	ldrb	r3, [r3, #0]
   151b6:	2b01      	cmp	r3, #1
   151b8:	d00a      	beq.n	151d0 <system_apb_clock_set_mask+0x2c>
   151ba:	2b02      	cmp	r3, #2
   151bc:	d00f      	beq.n	151de <system_apb_clock_set_mask+0x3a>
   151be:	2b00      	cmp	r3, #0
   151c0:	d114      	bne.n	151ec <system_apb_clock_set_mask+0x48>
   151c2:	4b0e      	ldr	r3, [pc, #56]	; (151fc <system_apb_clock_set_mask+0x58>)
   151c4:	4a0d      	ldr	r2, [pc, #52]	; (151fc <system_apb_clock_set_mask+0x58>)
   151c6:	6991      	ldr	r1, [r2, #24]
   151c8:	683a      	ldr	r2, [r7, #0]
   151ca:	430a      	orrs	r2, r1
   151cc:	619a      	str	r2, [r3, #24]
   151ce:	e00f      	b.n	151f0 <system_apb_clock_set_mask+0x4c>
   151d0:	4b0a      	ldr	r3, [pc, #40]	; (151fc <system_apb_clock_set_mask+0x58>)
   151d2:	4a0a      	ldr	r2, [pc, #40]	; (151fc <system_apb_clock_set_mask+0x58>)
   151d4:	69d1      	ldr	r1, [r2, #28]
   151d6:	683a      	ldr	r2, [r7, #0]
   151d8:	430a      	orrs	r2, r1
   151da:	61da      	str	r2, [r3, #28]
   151dc:	e008      	b.n	151f0 <system_apb_clock_set_mask+0x4c>
   151de:	4b07      	ldr	r3, [pc, #28]	; (151fc <system_apb_clock_set_mask+0x58>)
   151e0:	4a06      	ldr	r2, [pc, #24]	; (151fc <system_apb_clock_set_mask+0x58>)
   151e2:	6a11      	ldr	r1, [r2, #32]
   151e4:	683a      	ldr	r2, [r7, #0]
   151e6:	430a      	orrs	r2, r1
   151e8:	621a      	str	r2, [r3, #32]
   151ea:	e001      	b.n	151f0 <system_apb_clock_set_mask+0x4c>
   151ec:	2317      	movs	r3, #23
   151ee:	e000      	b.n	151f2 <system_apb_clock_set_mask+0x4e>
   151f0:	2300      	movs	r3, #0
   151f2:	0018      	movs	r0, r3
   151f4:	46bd      	mov	sp, r7
   151f6:	b002      	add	sp, #8
   151f8:	bd80      	pop	{r7, pc}
   151fa:	46c0      	nop			; (mov r8, r8)
   151fc:	40000400 	.word	0x40000400

00015200 <system_pinmux_get_config_defaults>:
   15200:	b580      	push	{r7, lr}
   15202:	b082      	sub	sp, #8
   15204:	af00      	add	r7, sp, #0
   15206:	6078      	str	r0, [r7, #4]
   15208:	687b      	ldr	r3, [r7, #4]
   1520a:	2280      	movs	r2, #128	; 0x80
   1520c:	701a      	strb	r2, [r3, #0]
   1520e:	687b      	ldr	r3, [r7, #4]
   15210:	2200      	movs	r2, #0
   15212:	705a      	strb	r2, [r3, #1]
   15214:	687b      	ldr	r3, [r7, #4]
   15216:	2201      	movs	r2, #1
   15218:	709a      	strb	r2, [r3, #2]
   1521a:	687b      	ldr	r3, [r7, #4]
   1521c:	2200      	movs	r2, #0
   1521e:	70da      	strb	r2, [r3, #3]
   15220:	46c0      	nop			; (mov r8, r8)
   15222:	46bd      	mov	sp, r7
   15224:	b002      	add	sp, #8
   15226:	bd80      	pop	{r7, pc}

00015228 <system_is_debugger_present>:
   15228:	b580      	push	{r7, lr}
   1522a:	af00      	add	r7, sp, #0
   1522c:	4b05      	ldr	r3, [pc, #20]	; (15244 <system_is_debugger_present+0x1c>)
   1522e:	789b      	ldrb	r3, [r3, #2]
   15230:	b2db      	uxtb	r3, r3
   15232:	001a      	movs	r2, r3
   15234:	2302      	movs	r3, #2
   15236:	4013      	ands	r3, r2
   15238:	1e5a      	subs	r2, r3, #1
   1523a:	4193      	sbcs	r3, r2
   1523c:	b2db      	uxtb	r3, r3
   1523e:	0018      	movs	r0, r3
   15240:	46bd      	mov	sp, r7
   15242:	bd80      	pop	{r7, pc}
   15244:	41002000 	.word	0x41002000

00015248 <system_interrupt_enter_critical_section>:
   15248:	b580      	push	{r7, lr}
   1524a:	af00      	add	r7, sp, #0
   1524c:	4b02      	ldr	r3, [pc, #8]	; (15258 <system_interrupt_enter_critical_section+0x10>)
   1524e:	4798      	blx	r3
   15250:	46c0      	nop			; (mov r8, r8)
   15252:	46bd      	mov	sp, r7
   15254:	bd80      	pop	{r7, pc}
   15256:	46c0      	nop			; (mov r8, r8)
   15258:	00023df9 	.word	0x00023df9

0001525c <system_interrupt_leave_critical_section>:
   1525c:	b580      	push	{r7, lr}
   1525e:	af00      	add	r7, sp, #0
   15260:	4b02      	ldr	r3, [pc, #8]	; (1526c <system_interrupt_leave_critical_section+0x10>)
   15262:	4798      	blx	r3
   15264:	46c0      	nop			; (mov r8, r8)
   15266:	46bd      	mov	sp, r7
   15268:	bd80      	pop	{r7, pc}
   1526a:	46c0      	nop			; (mov r8, r8)
   1526c:	00023e4d 	.word	0x00023e4d

00015270 <system_interrupt_disable>:
   15270:	b580      	push	{r7, lr}
   15272:	b082      	sub	sp, #8
   15274:	af00      	add	r7, sp, #0
   15276:	0002      	movs	r2, r0
   15278:	1dfb      	adds	r3, r7, #7
   1527a:	701a      	strb	r2, [r3, #0]
   1527c:	4a07      	ldr	r2, [pc, #28]	; (1529c <system_interrupt_disable+0x2c>)
   1527e:	1dfb      	adds	r3, r7, #7
   15280:	781b      	ldrb	r3, [r3, #0]
   15282:	0019      	movs	r1, r3
   15284:	231f      	movs	r3, #31
   15286:	400b      	ands	r3, r1
   15288:	2101      	movs	r1, #1
   1528a:	4099      	lsls	r1, r3
   1528c:	000b      	movs	r3, r1
   1528e:	0019      	movs	r1, r3
   15290:	2380      	movs	r3, #128	; 0x80
   15292:	50d1      	str	r1, [r2, r3]
   15294:	46c0      	nop			; (mov r8, r8)
   15296:	46bd      	mov	sp, r7
   15298:	b002      	add	sp, #8
   1529a:	bd80      	pop	{r7, pc}
   1529c:	e000e100 	.word	0xe000e100

000152a0 <i2c_master_is_syncing>:
   152a0:	b580      	push	{r7, lr}
   152a2:	b084      	sub	sp, #16
   152a4:	af00      	add	r7, sp, #0
   152a6:	6078      	str	r0, [r7, #4]
   152a8:	687b      	ldr	r3, [r7, #4]
   152aa:	681b      	ldr	r3, [r3, #0]
   152ac:	60fb      	str	r3, [r7, #12]
   152ae:	68fb      	ldr	r3, [r7, #12]
   152b0:	69db      	ldr	r3, [r3, #28]
   152b2:	2207      	movs	r2, #7
   152b4:	4013      	ands	r3, r2
   152b6:	1e5a      	subs	r2, r3, #1
   152b8:	4193      	sbcs	r3, r2
   152ba:	b2db      	uxtb	r3, r3
   152bc:	0018      	movs	r0, r3
   152be:	46bd      	mov	sp, r7
   152c0:	b004      	add	sp, #16
   152c2:	bd80      	pop	{r7, pc}

000152c4 <_i2c_master_wait_for_sync>:
   152c4:	b580      	push	{r7, lr}
   152c6:	b082      	sub	sp, #8
   152c8:	af00      	add	r7, sp, #0
   152ca:	6078      	str	r0, [r7, #4]
   152cc:	46c0      	nop			; (mov r8, r8)
   152ce:	687b      	ldr	r3, [r7, #4]
   152d0:	0018      	movs	r0, r3
   152d2:	4b04      	ldr	r3, [pc, #16]	; (152e4 <_i2c_master_wait_for_sync+0x20>)
   152d4:	4798      	blx	r3
   152d6:	1e03      	subs	r3, r0, #0
   152d8:	d1f9      	bne.n	152ce <_i2c_master_wait_for_sync+0xa>
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	46bd      	mov	sp, r7
   152de:	b002      	add	sp, #8
   152e0:	bd80      	pop	{r7, pc}
   152e2:	46c0      	nop			; (mov r8, r8)
   152e4:	000152a1 	.word	0x000152a1

000152e8 <i2c_master_disable>:
   152e8:	b580      	push	{r7, lr}
   152ea:	b084      	sub	sp, #16
   152ec:	af00      	add	r7, sp, #0
   152ee:	6078      	str	r0, [r7, #4]
   152f0:	687b      	ldr	r3, [r7, #4]
   152f2:	681b      	ldr	r3, [r3, #0]
   152f4:	60fb      	str	r3, [r7, #12]
   152f6:	687b      	ldr	r3, [r7, #4]
   152f8:	681b      	ldr	r3, [r3, #0]
   152fa:	0018      	movs	r0, r3
   152fc:	4b0d      	ldr	r3, [pc, #52]	; (15334 <i2c_master_disable+0x4c>)
   152fe:	4798      	blx	r3
   15300:	0003      	movs	r3, r0
   15302:	0018      	movs	r0, r3
   15304:	4b0c      	ldr	r3, [pc, #48]	; (15338 <i2c_master_disable+0x50>)
   15306:	4798      	blx	r3
   15308:	687b      	ldr	r3, [r7, #4]
   1530a:	0018      	movs	r0, r3
   1530c:	4b0b      	ldr	r3, [pc, #44]	; (1533c <i2c_master_disable+0x54>)
   1530e:	4798      	blx	r3
   15310:	68fb      	ldr	r3, [r7, #12]
   15312:	2283      	movs	r2, #131	; 0x83
   15314:	751a      	strb	r2, [r3, #20]
   15316:	68fb      	ldr	r3, [r7, #12]
   15318:	2283      	movs	r2, #131	; 0x83
   1531a:	761a      	strb	r2, [r3, #24]
   1531c:	68fb      	ldr	r3, [r7, #12]
   1531e:	681b      	ldr	r3, [r3, #0]
   15320:	2202      	movs	r2, #2
   15322:	4393      	bics	r3, r2
   15324:	001a      	movs	r2, r3
   15326:	68fb      	ldr	r3, [r7, #12]
   15328:	601a      	str	r2, [r3, #0]
   1532a:	46c0      	nop			; (mov r8, r8)
   1532c:	46bd      	mov	sp, r7
   1532e:	b004      	add	sp, #16
   15330:	bd80      	pop	{r7, pc}
   15332:	46c0      	nop			; (mov r8, r8)
   15334:	000252cd 	.word	0x000252cd
   15338:	00015271 	.word	0x00015271
   1533c:	000152c5 	.word	0x000152c5

00015340 <_i2c_master_set_config>:
   15340:	b5f0      	push	{r4, r5, r6, r7, lr}
   15342:	b097      	sub	sp, #92	; 0x5c
   15344:	af00      	add	r7, sp, #0
   15346:	6178      	str	r0, [r7, #20]
   15348:	6139      	str	r1, [r7, #16]
   1534a:	2300      	movs	r3, #0
   1534c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1534e:	2300      	movs	r3, #0
   15350:	653b      	str	r3, [r7, #80]	; 0x50
   15352:	2300      	movs	r3, #0
   15354:	64fb      	str	r3, [r7, #76]	; 0x4c
   15356:	233b      	movs	r3, #59	; 0x3b
   15358:	2210      	movs	r2, #16
   1535a:	4694      	mov	ip, r2
   1535c:	44bc      	add	ip, r7
   1535e:	4463      	add	r3, ip
   15360:	2200      	movs	r2, #0
   15362:	701a      	strb	r2, [r3, #0]
   15364:	697b      	ldr	r3, [r7, #20]
   15366:	681b      	ldr	r3, [r3, #0]
   15368:	63bb      	str	r3, [r7, #56]	; 0x38
   1536a:	697b      	ldr	r3, [r7, #20]
   1536c:	681b      	ldr	r3, [r3, #0]
   1536e:	637b      	str	r3, [r7, #52]	; 0x34
   15370:	2323      	movs	r3, #35	; 0x23
   15372:	2210      	movs	r2, #16
   15374:	18ba      	adds	r2, r7, r2
   15376:	18d4      	adds	r4, r2, r3
   15378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1537a:	0018      	movs	r0, r3
   1537c:	4bc0      	ldr	r3, [pc, #768]	; (15680 <_i2c_master_set_config+0x340>)
   1537e:	4798      	blx	r3
   15380:	0003      	movs	r3, r0
   15382:	7023      	strb	r3, [r4, #0]
   15384:	230c      	movs	r3, #12
   15386:	2210      	movs	r2, #16
   15388:	4694      	mov	ip, r2
   1538a:	44bc      	add	ip, r7
   1538c:	4463      	add	r3, ip
   1538e:	0018      	movs	r0, r3
   15390:	4bbc      	ldr	r3, [pc, #752]	; (15684 <_i2c_master_set_config+0x344>)
   15392:	4798      	blx	r3
   15394:	693b      	ldr	r3, [r7, #16]
   15396:	69db      	ldr	r3, [r3, #28]
   15398:	647b      	str	r3, [r7, #68]	; 0x44
   1539a:	693b      	ldr	r3, [r7, #16]
   1539c:	6a1b      	ldr	r3, [r3, #32]
   1539e:	643b      	str	r3, [r7, #64]	; 0x40
   153a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153a2:	2b00      	cmp	r3, #0
   153a4:	d106      	bne.n	153b4 <_i2c_master_set_config+0x74>
   153a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153a8:	2100      	movs	r1, #0
   153aa:	0018      	movs	r0, r3
   153ac:	4bb6      	ldr	r3, [pc, #728]	; (15688 <_i2c_master_set_config+0x348>)
   153ae:	4798      	blx	r3
   153b0:	0003      	movs	r3, r0
   153b2:	647b      	str	r3, [r7, #68]	; 0x44
   153b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153b6:	b2da      	uxtb	r2, r3
   153b8:	230c      	movs	r3, #12
   153ba:	2110      	movs	r1, #16
   153bc:	468c      	mov	ip, r1
   153be:	44bc      	add	ip, r7
   153c0:	4463      	add	r3, ip
   153c2:	701a      	strb	r2, [r3, #0]
   153c4:	230c      	movs	r3, #12
   153c6:	2210      	movs	r2, #16
   153c8:	4694      	mov	ip, r2
   153ca:	44bc      	add	ip, r7
   153cc:	4463      	add	r3, ip
   153ce:	2202      	movs	r2, #2
   153d0:	705a      	strb	r2, [r3, #1]
   153d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153d4:	0c1b      	lsrs	r3, r3, #16
   153d6:	b2db      	uxtb	r3, r3
   153d8:	220c      	movs	r2, #12
   153da:	2110      	movs	r1, #16
   153dc:	468c      	mov	ip, r1
   153de:	44bc      	add	ip, r7
   153e0:	4462      	add	r2, ip
   153e2:	0011      	movs	r1, r2
   153e4:	0018      	movs	r0, r3
   153e6:	4ba9      	ldr	r3, [pc, #676]	; (1568c <_i2c_master_set_config+0x34c>)
   153e8:	4798      	blx	r3
   153ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   153ec:	2b00      	cmp	r3, #0
   153ee:	d106      	bne.n	153fe <_i2c_master_set_config+0xbe>
   153f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153f2:	2101      	movs	r1, #1
   153f4:	0018      	movs	r0, r3
   153f6:	4ba4      	ldr	r3, [pc, #656]	; (15688 <_i2c_master_set_config+0x348>)
   153f8:	4798      	blx	r3
   153fa:	0003      	movs	r3, r0
   153fc:	643b      	str	r3, [r7, #64]	; 0x40
   153fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15400:	b2da      	uxtb	r2, r3
   15402:	230c      	movs	r3, #12
   15404:	2110      	movs	r1, #16
   15406:	468c      	mov	ip, r1
   15408:	44bc      	add	ip, r7
   1540a:	4463      	add	r3, ip
   1540c:	701a      	strb	r2, [r3, #0]
   1540e:	230c      	movs	r3, #12
   15410:	2210      	movs	r2, #16
   15412:	4694      	mov	ip, r2
   15414:	44bc      	add	ip, r7
   15416:	4463      	add	r3, ip
   15418:	2202      	movs	r2, #2
   1541a:	705a      	strb	r2, [r3, #1]
   1541c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1541e:	0c1b      	lsrs	r3, r3, #16
   15420:	b2db      	uxtb	r3, r3
   15422:	220c      	movs	r2, #12
   15424:	2110      	movs	r1, #16
   15426:	468c      	mov	ip, r1
   15428:	44bc      	add	ip, r7
   1542a:	4462      	add	r2, ip
   1542c:	0011      	movs	r1, r2
   1542e:	0018      	movs	r0, r3
   15430:	4b96      	ldr	r3, [pc, #600]	; (1568c <_i2c_master_set_config+0x34c>)
   15432:	4798      	blx	r3
   15434:	693b      	ldr	r3, [r7, #16]
   15436:	8a9a      	ldrh	r2, [r3, #20]
   15438:	697b      	ldr	r3, [r7, #20]
   1543a:	80da      	strh	r2, [r3, #6]
   1543c:	693b      	ldr	r3, [r7, #16]
   1543e:	8ada      	ldrh	r2, [r3, #22]
   15440:	697b      	ldr	r3, [r7, #20]
   15442:	811a      	strh	r2, [r3, #8]
   15444:	693b      	ldr	r3, [r7, #16]
   15446:	7e1b      	ldrb	r3, [r3, #24]
   15448:	2b00      	cmp	r3, #0
   1544a:	d103      	bne.n	15454 <_i2c_master_set_config+0x114>
   1544c:	4b90      	ldr	r3, [pc, #576]	; (15690 <_i2c_master_set_config+0x350>)
   1544e:	4798      	blx	r3
   15450:	1e03      	subs	r3, r0, #0
   15452:	d002      	beq.n	1545a <_i2c_master_set_config+0x11a>
   15454:	2380      	movs	r3, #128	; 0x80
   15456:	657b      	str	r3, [r7, #84]	; 0x54
   15458:	e001      	b.n	1545e <_i2c_master_set_config+0x11e>
   1545a:	2300      	movs	r3, #0
   1545c:	657b      	str	r3, [r7, #84]	; 0x54
   1545e:	693b      	ldr	r3, [r7, #16]
   15460:	691b      	ldr	r3, [r3, #16]
   15462:	2b00      	cmp	r3, #0
   15464:	d004      	beq.n	15470 <_i2c_master_set_config+0x130>
   15466:	693b      	ldr	r3, [r7, #16]
   15468:	691b      	ldr	r3, [r3, #16]
   1546a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1546c:	4313      	orrs	r3, r2
   1546e:	657b      	str	r3, [r7, #84]	; 0x54
   15470:	693b      	ldr	r3, [r7, #16]
   15472:	689b      	ldr	r3, [r3, #8]
   15474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15476:	4313      	orrs	r3, r2
   15478:	657b      	str	r3, [r7, #84]	; 0x54
   1547a:	693b      	ldr	r3, [r7, #16]
   1547c:	2224      	movs	r2, #36	; 0x24
   1547e:	5c9b      	ldrb	r3, [r3, r2]
   15480:	2b00      	cmp	r3, #0
   15482:	d004      	beq.n	1548e <_i2c_master_set_config+0x14e>
   15484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15486:	2280      	movs	r2, #128	; 0x80
   15488:	05d2      	lsls	r2, r2, #23
   1548a:	4313      	orrs	r3, r2
   1548c:	657b      	str	r3, [r7, #84]	; 0x54
   1548e:	693b      	ldr	r3, [r7, #16]
   15490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15492:	2b00      	cmp	r3, #0
   15494:	d004      	beq.n	154a0 <_i2c_master_set_config+0x160>
   15496:	693b      	ldr	r3, [r7, #16]
   15498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1549a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1549c:	4313      	orrs	r3, r2
   1549e:	657b      	str	r3, [r7, #84]	; 0x54
   154a0:	693b      	ldr	r3, [r7, #16]
   154a2:	222c      	movs	r2, #44	; 0x2c
   154a4:	5c9b      	ldrb	r3, [r3, r2]
   154a6:	2b00      	cmp	r3, #0
   154a8:	d105      	bne.n	154b6 <_i2c_master_set_config+0x176>
   154aa:	693b      	ldr	r3, [r7, #16]
   154ac:	689a      	ldr	r2, [r3, #8]
   154ae:	2380      	movs	r3, #128	; 0x80
   154b0:	049b      	lsls	r3, r3, #18
   154b2:	429a      	cmp	r2, r3
   154b4:	d104      	bne.n	154c0 <_i2c_master_set_config+0x180>
   154b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154b8:	2280      	movs	r2, #128	; 0x80
   154ba:	0512      	lsls	r2, r2, #20
   154bc:	4313      	orrs	r3, r2
   154be:	657b      	str	r3, [r7, #84]	; 0x54
   154c0:	693b      	ldr	r3, [r7, #16]
   154c2:	222d      	movs	r2, #45	; 0x2d
   154c4:	5c9b      	ldrb	r3, [r3, r2]
   154c6:	2b00      	cmp	r3, #0
   154c8:	d004      	beq.n	154d4 <_i2c_master_set_config+0x194>
   154ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154cc:	2280      	movs	r2, #128	; 0x80
   154ce:	0412      	lsls	r2, r2, #16
   154d0:	4313      	orrs	r3, r2
   154d2:	657b      	str	r3, [r7, #84]	; 0x54
   154d4:	693b      	ldr	r3, [r7, #16]
   154d6:	222e      	movs	r2, #46	; 0x2e
   154d8:	5c9b      	ldrb	r3, [r3, r2]
   154da:	2b00      	cmp	r3, #0
   154dc:	d004      	beq.n	154e8 <_i2c_master_set_config+0x1a8>
   154de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154e0:	2280      	movs	r2, #128	; 0x80
   154e2:	03d2      	lsls	r2, r2, #15
   154e4:	4313      	orrs	r3, r2
   154e6:	657b      	str	r3, [r7, #84]	; 0x54
   154e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154ea:	681a      	ldr	r2, [r3, #0]
   154ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154ee:	431a      	orrs	r2, r3
   154f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154f2:	601a      	str	r2, [r3, #0]
   154f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154f6:	2280      	movs	r2, #128	; 0x80
   154f8:	0052      	lsls	r2, r2, #1
   154fa:	605a      	str	r2, [r3, #4]
   154fc:	2323      	movs	r3, #35	; 0x23
   154fe:	2210      	movs	r2, #16
   15500:	4694      	mov	ip, r2
   15502:	44bc      	add	ip, r7
   15504:	4463      	add	r3, ip
   15506:	781b      	ldrb	r3, [r3, #0]
   15508:	3314      	adds	r3, #20
   1550a:	b2db      	uxtb	r3, r3
   1550c:	0018      	movs	r0, r3
   1550e:	4b61      	ldr	r3, [pc, #388]	; (15694 <_i2c_master_set_config+0x354>)
   15510:	4798      	blx	r3
   15512:	0003      	movs	r3, r0
   15514:	62fb      	str	r3, [r7, #44]	; 0x2c
   15516:	693b      	ldr	r3, [r7, #16]
   15518:	681b      	ldr	r3, [r3, #0]
   1551a:	22fa      	movs	r2, #250	; 0xfa
   1551c:	0092      	lsls	r2, r2, #2
   1551e:	4353      	muls	r3, r2
   15520:	62bb      	str	r3, [r7, #40]	; 0x28
   15522:	693b      	ldr	r3, [r7, #16]
   15524:	685b      	ldr	r3, [r3, #4]
   15526:	22fa      	movs	r2, #250	; 0xfa
   15528:	0092      	lsls	r2, r2, #2
   1552a:	4353      	muls	r3, r2
   1552c:	627b      	str	r3, [r7, #36]	; 0x24
   1552e:	693b      	ldr	r3, [r7, #16]
   15530:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   15532:	623b      	str	r3, [r7, #32]
   15534:	4b58      	ldr	r3, [pc, #352]	; (15698 <_i2c_master_set_config+0x358>)
   15536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15538:	4798      	blx	r3
   1553a:	0005      	movs	r5, r0
   1553c:	000e      	movs	r6, r1
   1553e:	4b56      	ldr	r3, [pc, #344]	; (15698 <_i2c_master_set_config+0x358>)
   15540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15542:	4798      	blx	r3
   15544:	60b8      	str	r0, [r7, #8]
   15546:	60f9      	str	r1, [r7, #12]
   15548:	4b53      	ldr	r3, [pc, #332]	; (15698 <_i2c_master_set_config+0x358>)
   1554a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1554c:	4798      	blx	r3
   1554e:	4c53      	ldr	r4, [pc, #332]	; (1569c <_i2c_master_set_config+0x35c>)
   15550:	4a53      	ldr	r2, [pc, #332]	; (156a0 <_i2c_master_set_config+0x360>)
   15552:	4b54      	ldr	r3, [pc, #336]	; (156a4 <_i2c_master_set_config+0x364>)
   15554:	47a0      	blx	r4
   15556:	0003      	movs	r3, r0
   15558:	000c      	movs	r4, r1
   1555a:	603b      	str	r3, [r7, #0]
   1555c:	607c      	str	r4, [r7, #4]
   1555e:	4b4e      	ldr	r3, [pc, #312]	; (15698 <_i2c_master_set_config+0x358>)
   15560:	6a38      	ldr	r0, [r7, #32]
   15562:	4798      	blx	r3
   15564:	0002      	movs	r2, r0
   15566:	000b      	movs	r3, r1
   15568:	4c4c      	ldr	r4, [pc, #304]	; (1569c <_i2c_master_set_config+0x35c>)
   1556a:	6838      	ldr	r0, [r7, #0]
   1556c:	6879      	ldr	r1, [r7, #4]
   1556e:	47a0      	blx	r4
   15570:	0003      	movs	r3, r0
   15572:	000c      	movs	r4, r1
   15574:	0018      	movs	r0, r3
   15576:	0021      	movs	r1, r4
   15578:	4c4b      	ldr	r4, [pc, #300]	; (156a8 <_i2c_master_set_config+0x368>)
   1557a:	2200      	movs	r2, #0
   1557c:	4b4b      	ldr	r3, [pc, #300]	; (156ac <_i2c_master_set_config+0x36c>)
   1557e:	47a0      	blx	r4
   15580:	0003      	movs	r3, r0
   15582:	000c      	movs	r4, r1
   15584:	001a      	movs	r2, r3
   15586:	0023      	movs	r3, r4
   15588:	4c44      	ldr	r4, [pc, #272]	; (1569c <_i2c_master_set_config+0x35c>)
   1558a:	68b8      	ldr	r0, [r7, #8]
   1558c:	68f9      	ldr	r1, [r7, #12]
   1558e:	47a0      	blx	r4
   15590:	0003      	movs	r3, r0
   15592:	000c      	movs	r4, r1
   15594:	001a      	movs	r2, r3
   15596:	0023      	movs	r3, r4
   15598:	4c45      	ldr	r4, [pc, #276]	; (156b0 <_i2c_master_set_config+0x370>)
   1559a:	0028      	movs	r0, r5
   1559c:	0031      	movs	r1, r6
   1559e:	47a0      	blx	r4
   155a0:	0003      	movs	r3, r0
   155a2:	000c      	movs	r4, r1
   155a4:	001d      	movs	r5, r3
   155a6:	0026      	movs	r6, r4
   155a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155aa:	005a      	lsls	r2, r3, #1
   155ac:	4b3a      	ldr	r3, [pc, #232]	; (15698 <_i2c_master_set_config+0x358>)
   155ae:	0010      	movs	r0, r2
   155b0:	4798      	blx	r3
   155b2:	0002      	movs	r2, r0
   155b4:	000b      	movs	r3, r1
   155b6:	4c3c      	ldr	r4, [pc, #240]	; (156a8 <_i2c_master_set_config+0x368>)
   155b8:	0028      	movs	r0, r5
   155ba:	0031      	movs	r1, r6
   155bc:	47a0      	blx	r4
   155be:	0003      	movs	r3, r0
   155c0:	000c      	movs	r4, r1
   155c2:	0018      	movs	r0, r3
   155c4:	0021      	movs	r1, r4
   155c6:	4c3a      	ldr	r4, [pc, #232]	; (156b0 <_i2c_master_set_config+0x370>)
   155c8:	2200      	movs	r2, #0
   155ca:	4b3a      	ldr	r3, [pc, #232]	; (156b4 <_i2c_master_set_config+0x374>)
   155cc:	47a0      	blx	r4
   155ce:	0003      	movs	r3, r0
   155d0:	000c      	movs	r4, r1
   155d2:	001d      	movs	r5, r3
   155d4:	0026      	movs	r6, r4
   155d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155d8:	005a      	lsls	r2, r3, #1
   155da:	4b2f      	ldr	r3, [pc, #188]	; (15698 <_i2c_master_set_config+0x358>)
   155dc:	0010      	movs	r0, r2
   155de:	4798      	blx	r3
   155e0:	0002      	movs	r2, r0
   155e2:	000b      	movs	r3, r1
   155e4:	4c34      	ldr	r4, [pc, #208]	; (156b8 <_i2c_master_set_config+0x378>)
   155e6:	0028      	movs	r0, r5
   155e8:	0031      	movs	r1, r6
   155ea:	47a0      	blx	r4
   155ec:	0003      	movs	r3, r0
   155ee:	000c      	movs	r4, r1
   155f0:	0019      	movs	r1, r3
   155f2:	0022      	movs	r2, r4
   155f4:	4b31      	ldr	r3, [pc, #196]	; (156bc <_i2c_master_set_config+0x37c>)
   155f6:	0008      	movs	r0, r1
   155f8:	0011      	movs	r1, r2
   155fa:	4798      	blx	r3
   155fc:	0003      	movs	r3, r0
   155fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   15600:	693b      	ldr	r3, [r7, #16]
   15602:	689a      	ldr	r2, [r3, #8]
   15604:	2380      	movs	r3, #128	; 0x80
   15606:	049b      	lsls	r3, r3, #18
   15608:	429a      	cmp	r2, r3
   1560a:	d16a      	bne.n	156e2 <_i2c_master_set_config+0x3a2>
   1560c:	4b22      	ldr	r3, [pc, #136]	; (15698 <_i2c_master_set_config+0x358>)
   1560e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15610:	4798      	blx	r3
   15612:	4c25      	ldr	r4, [pc, #148]	; (156a8 <_i2c_master_set_config+0x368>)
   15614:	0002      	movs	r2, r0
   15616:	000b      	movs	r3, r1
   15618:	47a0      	blx	r4
   1561a:	0003      	movs	r3, r0
   1561c:	000c      	movs	r4, r1
   1561e:	001d      	movs	r5, r3
   15620:	0026      	movs	r6, r4
   15622:	4b1d      	ldr	r3, [pc, #116]	; (15698 <_i2c_master_set_config+0x358>)
   15624:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15626:	4798      	blx	r3
   15628:	4c1c      	ldr	r4, [pc, #112]	; (1569c <_i2c_master_set_config+0x35c>)
   1562a:	2200      	movs	r2, #0
   1562c:	4b24      	ldr	r3, [pc, #144]	; (156c0 <_i2c_master_set_config+0x380>)
   1562e:	47a0      	blx	r4
   15630:	0003      	movs	r3, r0
   15632:	000c      	movs	r4, r1
   15634:	001a      	movs	r2, r3
   15636:	0023      	movs	r3, r4
   15638:	4c1f      	ldr	r4, [pc, #124]	; (156b8 <_i2c_master_set_config+0x378>)
   1563a:	0028      	movs	r0, r5
   1563c:	0031      	movs	r1, r6
   1563e:	47a0      	blx	r4
   15640:	0003      	movs	r3, r0
   15642:	000c      	movs	r4, r1
   15644:	0018      	movs	r0, r3
   15646:	0021      	movs	r1, r4
   15648:	4c19      	ldr	r4, [pc, #100]	; (156b0 <_i2c_master_set_config+0x370>)
   1564a:	2200      	movs	r2, #0
   1564c:	4b19      	ldr	r3, [pc, #100]	; (156b4 <_i2c_master_set_config+0x374>)
   1564e:	47a0      	blx	r4
   15650:	0003      	movs	r3, r0
   15652:	000c      	movs	r4, r1
   15654:	0019      	movs	r1, r3
   15656:	0022      	movs	r2, r4
   15658:	4b18      	ldr	r3, [pc, #96]	; (156bc <_i2c_master_set_config+0x37c>)
   1565a:	0008      	movs	r0, r1
   1565c:	0011      	movs	r1, r2
   1565e:	4798      	blx	r3
   15660:	0003      	movs	r3, r0
   15662:	64fb      	str	r3, [r7, #76]	; 0x4c
   15664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15666:	2b00      	cmp	r3, #0
   15668:	d02e      	beq.n	156c8 <_i2c_master_set_config+0x388>
   1566a:	4b16      	ldr	r3, [pc, #88]	; (156c4 <_i2c_master_set_config+0x384>)
   1566c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1566e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15670:	4798      	blx	r3
   15672:	0003      	movs	r3, r0
   15674:	1e9a      	subs	r2, r3, #2
   15676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15678:	1ad3      	subs	r3, r2, r3
   1567a:	653b      	str	r3, [r7, #80]	; 0x50
   1567c:	e031      	b.n	156e2 <_i2c_master_set_config+0x3a2>
   1567e:	46c0      	nop			; (mov r8, r8)
   15680:	000251fd 	.word	0x000251fd
   15684:	00015201 	.word	0x00015201
   15688:	00025041 	.word	0x00025041
   1568c:	00027ded 	.word	0x00027ded
   15690:	00015229 	.word	0x00015229
   15694:	00027bb1 	.word	0x00027bb1
   15698:	000320a5 	.word	0x000320a5
   1569c:	00031511 	.word	0x00031511
   156a0:	e826d695 	.word	0xe826d695
   156a4:	3e112e0b 	.word	0x3e112e0b
   156a8:	00030889 	.word	0x00030889
   156ac:	40240000 	.word	0x40240000
   156b0:	00031a11 	.word	0x00031a11
   156b4:	3ff00000 	.word	0x3ff00000
   156b8:	00030ea9 	.word	0x00030ea9
   156bc:	0003203d 	.word	0x0003203d
   156c0:	40080000 	.word	0x40080000
   156c4:	00030549 	.word	0x00030549
   156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156ca:	005a      	lsls	r2, r3, #1
   156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156ce:	18d3      	adds	r3, r2, r3
   156d0:	1e5a      	subs	r2, r3, #1
   156d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156d4:	0059      	lsls	r1, r3, #1
   156d6:	4b1d      	ldr	r3, [pc, #116]	; (1574c <_i2c_master_set_config+0x40c>)
   156d8:	0010      	movs	r0, r2
   156da:	4798      	blx	r3
   156dc:	0003      	movs	r3, r0
   156de:	3b01      	subs	r3, #1
   156e0:	653b      	str	r3, [r7, #80]	; 0x50
   156e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156e4:	2bff      	cmp	r3, #255	; 0xff
   156e6:	dc08      	bgt.n	156fa <_i2c_master_set_config+0x3ba>
   156e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156ea:	2b00      	cmp	r3, #0
   156ec:	db05      	blt.n	156fa <_i2c_master_set_config+0x3ba>
   156ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   156f0:	2bff      	cmp	r3, #255	; 0xff
   156f2:	dc02      	bgt.n	156fa <_i2c_master_set_config+0x3ba>
   156f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   156f6:	2b00      	cmp	r3, #0
   156f8:	da06      	bge.n	15708 <_i2c_master_set_config+0x3c8>
   156fa:	233b      	movs	r3, #59	; 0x3b
   156fc:	2210      	movs	r2, #16
   156fe:	4694      	mov	ip, r2
   15700:	44bc      	add	ip, r7
   15702:	4463      	add	r3, ip
   15704:	2240      	movs	r2, #64	; 0x40
   15706:	701a      	strb	r2, [r3, #0]
   15708:	233b      	movs	r3, #59	; 0x3b
   1570a:	2210      	movs	r2, #16
   1570c:	4694      	mov	ip, r2
   1570e:	44bc      	add	ip, r7
   15710:	4463      	add	r3, ip
   15712:	781b      	ldrb	r3, [r3, #0]
   15714:	2b40      	cmp	r3, #64	; 0x40
   15716:	d00e      	beq.n	15736 <_i2c_master_set_config+0x3f6>
   15718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1571a:	22ff      	movs	r2, #255	; 0xff
   1571c:	401a      	ands	r2, r3
   1571e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15720:	041b      	lsls	r3, r3, #16
   15722:	0019      	movs	r1, r3
   15724:	23ff      	movs	r3, #255	; 0xff
   15726:	041b      	lsls	r3, r3, #16
   15728:	400b      	ands	r3, r1
   1572a:	4313      	orrs	r3, r2
   1572c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1572e:	0612      	lsls	r2, r2, #24
   15730:	431a      	orrs	r2, r3
   15732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15734:	60da      	str	r2, [r3, #12]
   15736:	233b      	movs	r3, #59	; 0x3b
   15738:	2210      	movs	r2, #16
   1573a:	4694      	mov	ip, r2
   1573c:	44bc      	add	ip, r7
   1573e:	4463      	add	r3, ip
   15740:	781b      	ldrb	r3, [r3, #0]
   15742:	0018      	movs	r0, r3
   15744:	46bd      	mov	sp, r7
   15746:	b017      	add	sp, #92	; 0x5c
   15748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1574a:	46c0      	nop			; (mov r8, r8)
   1574c:	00030549 	.word	0x00030549

00015750 <i2c_master_init>:
   15750:	b590      	push	{r4, r7, lr}
   15752:	b08b      	sub	sp, #44	; 0x2c
   15754:	af00      	add	r7, sp, #0
   15756:	60f8      	str	r0, [r7, #12]
   15758:	60b9      	str	r1, [r7, #8]
   1575a:	607a      	str	r2, [r7, #4]
   1575c:	68fb      	ldr	r3, [r7, #12]
   1575e:	68ba      	ldr	r2, [r7, #8]
   15760:	601a      	str	r2, [r3, #0]
   15762:	68fb      	ldr	r3, [r7, #12]
   15764:	681b      	ldr	r3, [r3, #0]
   15766:	627b      	str	r3, [r7, #36]	; 0x24
   15768:	68fb      	ldr	r3, [r7, #12]
   1576a:	681b      	ldr	r3, [r3, #0]
   1576c:	0018      	movs	r0, r3
   1576e:	4b3b      	ldr	r3, [pc, #236]	; (1585c <i2c_master_init+0x10c>)
   15770:	4798      	blx	r3
   15772:	0003      	movs	r3, r0
   15774:	623b      	str	r3, [r7, #32]
   15776:	6a3b      	ldr	r3, [r7, #32]
   15778:	3302      	adds	r3, #2
   1577a:	61fb      	str	r3, [r7, #28]
   1577c:	6a3b      	ldr	r3, [r7, #32]
   1577e:	3314      	adds	r3, #20
   15780:	61bb      	str	r3, [r7, #24]
   15782:	2201      	movs	r2, #1
   15784:	69fb      	ldr	r3, [r7, #28]
   15786:	409a      	lsls	r2, r3
   15788:	0013      	movs	r3, r2
   1578a:	0019      	movs	r1, r3
   1578c:	2002      	movs	r0, #2
   1578e:	4b34      	ldr	r3, [pc, #208]	; (15860 <i2c_master_init+0x110>)
   15790:	4798      	blx	r3
   15792:	2314      	movs	r3, #20
   15794:	18fb      	adds	r3, r7, r3
   15796:	0018      	movs	r0, r3
   15798:	4b32      	ldr	r3, [pc, #200]	; (15864 <i2c_master_init+0x114>)
   1579a:	4798      	blx	r3
   1579c:	687b      	ldr	r3, [r7, #4]
   1579e:	7b1a      	ldrb	r2, [r3, #12]
   157a0:	2314      	movs	r3, #20
   157a2:	18fb      	adds	r3, r7, r3
   157a4:	701a      	strb	r2, [r3, #0]
   157a6:	69bb      	ldr	r3, [r7, #24]
   157a8:	b2db      	uxtb	r3, r3
   157aa:	2214      	movs	r2, #20
   157ac:	18ba      	adds	r2, r7, r2
   157ae:	0011      	movs	r1, r2
   157b0:	0018      	movs	r0, r3
   157b2:	4b2d      	ldr	r3, [pc, #180]	; (15868 <i2c_master_init+0x118>)
   157b4:	4798      	blx	r3
   157b6:	69bb      	ldr	r3, [r7, #24]
   157b8:	b2db      	uxtb	r3, r3
   157ba:	0018      	movs	r0, r3
   157bc:	4b2b      	ldr	r3, [pc, #172]	; (1586c <i2c_master_init+0x11c>)
   157be:	4798      	blx	r3
   157c0:	687b      	ldr	r3, [r7, #4]
   157c2:	7b1b      	ldrb	r3, [r3, #12]
   157c4:	2100      	movs	r1, #0
   157c6:	0018      	movs	r0, r3
   157c8:	4b29      	ldr	r3, [pc, #164]	; (15870 <i2c_master_init+0x120>)
   157ca:	4798      	blx	r3
   157cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157ce:	681b      	ldr	r3, [r3, #0]
   157d0:	2202      	movs	r2, #2
   157d2:	4013      	ands	r3, r2
   157d4:	d001      	beq.n	157da <i2c_master_init+0x8a>
   157d6:	231c      	movs	r3, #28
   157d8:	e03b      	b.n	15852 <i2c_master_init+0x102>
   157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157dc:	681b      	ldr	r3, [r3, #0]
   157de:	2201      	movs	r2, #1
   157e0:	4013      	ands	r3, r2
   157e2:	d001      	beq.n	157e8 <i2c_master_init+0x98>
   157e4:	2305      	movs	r3, #5
   157e6:	e034      	b.n	15852 <i2c_master_init+0x102>
   157e8:	68fb      	ldr	r3, [r7, #12]
   157ea:	681b      	ldr	r3, [r3, #0]
   157ec:	2217      	movs	r2, #23
   157ee:	18bc      	adds	r4, r7, r2
   157f0:	0018      	movs	r0, r3
   157f2:	4b1a      	ldr	r3, [pc, #104]	; (1585c <i2c_master_init+0x10c>)
   157f4:	4798      	blx	r3
   157f6:	0003      	movs	r3, r0
   157f8:	7023      	strb	r3, [r4, #0]
   157fa:	4a1e      	ldr	r2, [pc, #120]	; (15874 <i2c_master_init+0x124>)
   157fc:	2317      	movs	r3, #23
   157fe:	18fb      	adds	r3, r7, r3
   15800:	781b      	ldrb	r3, [r3, #0]
   15802:	0011      	movs	r1, r2
   15804:	0018      	movs	r0, r3
   15806:	4b1c      	ldr	r3, [pc, #112]	; (15878 <i2c_master_init+0x128>)
   15808:	4798      	blx	r3
   1580a:	2317      	movs	r3, #23
   1580c:	18fb      	adds	r3, r7, r3
   1580e:	781a      	ldrb	r2, [r3, #0]
   15810:	4b1a      	ldr	r3, [pc, #104]	; (1587c <i2c_master_init+0x12c>)
   15812:	0092      	lsls	r2, r2, #2
   15814:	68f9      	ldr	r1, [r7, #12]
   15816:	50d1      	str	r1, [r2, r3]
   15818:	68fb      	ldr	r3, [r7, #12]
   1581a:	2200      	movs	r2, #0
   1581c:	761a      	strb	r2, [r3, #24]
   1581e:	68fb      	ldr	r3, [r7, #12]
   15820:	2200      	movs	r2, #0
   15822:	765a      	strb	r2, [r3, #25]
   15824:	68fb      	ldr	r3, [r7, #12]
   15826:	2200      	movs	r2, #0
   15828:	835a      	strh	r2, [r3, #26]
   1582a:	68fb      	ldr	r3, [r7, #12]
   1582c:	2200      	movs	r2, #0
   1582e:	839a      	strh	r2, [r3, #28]
   15830:	68fb      	ldr	r3, [r7, #12]
   15832:	2225      	movs	r2, #37	; 0x25
   15834:	2100      	movs	r1, #0
   15836:	5499      	strb	r1, [r3, r2]
   15838:	68fb      	ldr	r3, [r7, #12]
   1583a:	2200      	movs	r2, #0
   1583c:	621a      	str	r2, [r3, #32]
   1583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15840:	2214      	movs	r2, #20
   15842:	601a      	str	r2, [r3, #0]
   15844:	687a      	ldr	r2, [r7, #4]
   15846:	68fb      	ldr	r3, [r7, #12]
   15848:	0011      	movs	r1, r2
   1584a:	0018      	movs	r0, r3
   1584c:	4b0c      	ldr	r3, [pc, #48]	; (15880 <i2c_master_init+0x130>)
   1584e:	4798      	blx	r3
   15850:	0003      	movs	r3, r0
   15852:	0018      	movs	r0, r3
   15854:	46bd      	mov	sp, r7
   15856:	b00b      	add	sp, #44	; 0x2c
   15858:	bd90      	pop	{r4, r7, pc}
   1585a:	46c0      	nop			; (mov r8, r8)
   1585c:	000251fd 	.word	0x000251fd
   15860:	000151a5 	.word	0x000151a5
   15864:	0001518d 	.word	0x0001518d
   15868:	00027a8d 	.word	0x00027a8d
   1586c:	00027ad1 	.word	0x00027ad1
   15870:	00024fb5 	.word	0x00024fb5
   15874:	00012a45 	.word	0x00012a45
   15878:	00025261 	.word	0x00025261
   1587c:	20005578 	.word	0x20005578
   15880:	00015341 	.word	0x00015341

00015884 <i2c_master_reset>:
   15884:	b580      	push	{r7, lr}
   15886:	b084      	sub	sp, #16
   15888:	af00      	add	r7, sp, #0
   1588a:	6078      	str	r0, [r7, #4]
   1588c:	687b      	ldr	r3, [r7, #4]
   1588e:	681b      	ldr	r3, [r3, #0]
   15890:	60fb      	str	r3, [r7, #12]
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	0018      	movs	r0, r3
   15896:	4b0f      	ldr	r3, [pc, #60]	; (158d4 <i2c_master_reset+0x50>)
   15898:	4798      	blx	r3
   1589a:	687b      	ldr	r3, [r7, #4]
   1589c:	0018      	movs	r0, r3
   1589e:	4b0e      	ldr	r3, [pc, #56]	; (158d8 <i2c_master_reset+0x54>)
   158a0:	4798      	blx	r3
   158a2:	4b0e      	ldr	r3, [pc, #56]	; (158dc <i2c_master_reset+0x58>)
   158a4:	4798      	blx	r3
   158a6:	687b      	ldr	r3, [r7, #4]
   158a8:	681b      	ldr	r3, [r3, #0]
   158aa:	0018      	movs	r0, r3
   158ac:	4b0c      	ldr	r3, [pc, #48]	; (158e0 <i2c_master_reset+0x5c>)
   158ae:	4798      	blx	r3
   158b0:	0003      	movs	r3, r0
   158b2:	0018      	movs	r0, r3
   158b4:	4b0b      	ldr	r3, [pc, #44]	; (158e4 <i2c_master_reset+0x60>)
   158b6:	4798      	blx	r3
   158b8:	4b0b      	ldr	r3, [pc, #44]	; (158e8 <i2c_master_reset+0x64>)
   158ba:	4798      	blx	r3
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	0018      	movs	r0, r3
   158c0:	4b04      	ldr	r3, [pc, #16]	; (158d4 <i2c_master_reset+0x50>)
   158c2:	4798      	blx	r3
   158c4:	68fb      	ldr	r3, [r7, #12]
   158c6:	2201      	movs	r2, #1
   158c8:	601a      	str	r2, [r3, #0]
   158ca:	46c0      	nop			; (mov r8, r8)
   158cc:	46bd      	mov	sp, r7
   158ce:	b004      	add	sp, #16
   158d0:	bd80      	pop	{r7, pc}
   158d2:	46c0      	nop			; (mov r8, r8)
   158d4:	000152c5 	.word	0x000152c5
   158d8:	000152e9 	.word	0x000152e9
   158dc:	00015249 	.word	0x00015249
   158e0:	000252cd 	.word	0x000252cd
   158e4:	00027c09 	.word	0x00027c09
   158e8:	0001525d 	.word	0x0001525d

000158ec <_i2c_master_wait_for_bus>:
   158ec:	b580      	push	{r7, lr}
   158ee:	b084      	sub	sp, #16
   158f0:	af00      	add	r7, sp, #0
   158f2:	6078      	str	r0, [r7, #4]
   158f4:	687b      	ldr	r3, [r7, #4]
   158f6:	681b      	ldr	r3, [r3, #0]
   158f8:	60bb      	str	r3, [r7, #8]
   158fa:	230e      	movs	r3, #14
   158fc:	18fb      	adds	r3, r7, r3
   158fe:	2200      	movs	r2, #0
   15900:	801a      	strh	r2, [r3, #0]
   15902:	e00f      	b.n	15924 <_i2c_master_wait_for_bus+0x38>
   15904:	230e      	movs	r3, #14
   15906:	18fb      	adds	r3, r7, r3
   15908:	220e      	movs	r2, #14
   1590a:	18ba      	adds	r2, r7, r2
   1590c:	8812      	ldrh	r2, [r2, #0]
   1590e:	3201      	adds	r2, #1
   15910:	801a      	strh	r2, [r3, #0]
   15912:	687b      	ldr	r3, [r7, #4]
   15914:	891b      	ldrh	r3, [r3, #8]
   15916:	220e      	movs	r2, #14
   15918:	18ba      	adds	r2, r7, r2
   1591a:	8812      	ldrh	r2, [r2, #0]
   1591c:	429a      	cmp	r2, r3
   1591e:	d301      	bcc.n	15924 <_i2c_master_wait_for_bus+0x38>
   15920:	2312      	movs	r3, #18
   15922:	e00e      	b.n	15942 <_i2c_master_wait_for_bus+0x56>
   15924:	68bb      	ldr	r3, [r7, #8]
   15926:	7e1b      	ldrb	r3, [r3, #24]
   15928:	b2db      	uxtb	r3, r3
   1592a:	001a      	movs	r2, r3
   1592c:	2301      	movs	r3, #1
   1592e:	4013      	ands	r3, r2
   15930:	d106      	bne.n	15940 <_i2c_master_wait_for_bus+0x54>
   15932:	68bb      	ldr	r3, [r7, #8]
   15934:	7e1b      	ldrb	r3, [r3, #24]
   15936:	b2db      	uxtb	r3, r3
   15938:	001a      	movs	r2, r3
   1593a:	2302      	movs	r3, #2
   1593c:	4013      	ands	r3, r2
   1593e:	d0e1      	beq.n	15904 <_i2c_master_wait_for_bus+0x18>
   15940:	2300      	movs	r3, #0
   15942:	0018      	movs	r0, r3
   15944:	46bd      	mov	sp, r7
   15946:	b004      	add	sp, #16
   15948:	bd80      	pop	{r7, pc}
	...

0001594c <_i2c_master_send_hs_master_code>:
   1594c:	b590      	push	{r4, r7, lr}
   1594e:	b085      	sub	sp, #20
   15950:	af00      	add	r7, sp, #0
   15952:	6078      	str	r0, [r7, #4]
   15954:	000a      	movs	r2, r1
   15956:	1cfb      	adds	r3, r7, #3
   15958:	701a      	strb	r2, [r3, #0]
   1595a:	687b      	ldr	r3, [r7, #4]
   1595c:	681b      	ldr	r3, [r3, #0]
   1595e:	60fb      	str	r3, [r7, #12]
   15960:	68fb      	ldr	r3, [r7, #12]
   15962:	685b      	ldr	r3, [r3, #4]
   15964:	2280      	movs	r2, #128	; 0x80
   15966:	02d2      	lsls	r2, r2, #11
   15968:	431a      	orrs	r2, r3
   1596a:	68fb      	ldr	r3, [r7, #12]
   1596c:	605a      	str	r2, [r3, #4]
   1596e:	1cfb      	adds	r3, r7, #3
   15970:	781a      	ldrb	r2, [r3, #0]
   15972:	68fb      	ldr	r3, [r7, #12]
   15974:	625a      	str	r2, [r3, #36]	; 0x24
   15976:	230b      	movs	r3, #11
   15978:	18fc      	adds	r4, r7, r3
   1597a:	687b      	ldr	r3, [r7, #4]
   1597c:	0018      	movs	r0, r3
   1597e:	4b07      	ldr	r3, [pc, #28]	; (1599c <_i2c_master_send_hs_master_code+0x50>)
   15980:	4798      	blx	r3
   15982:	0003      	movs	r3, r0
   15984:	7023      	strb	r3, [r4, #0]
   15986:	68fb      	ldr	r3, [r7, #12]
   15988:	2201      	movs	r2, #1
   1598a:	761a      	strb	r2, [r3, #24]
   1598c:	230b      	movs	r3, #11
   1598e:	18fb      	adds	r3, r7, r3
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	0018      	movs	r0, r3
   15994:	46bd      	mov	sp, r7
   15996:	b005      	add	sp, #20
   15998:	bd90      	pop	{r4, r7, pc}
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	000158ed 	.word	0x000158ed

000159a0 <TC3_Handler>:
   159a0:	b580      	push	{r7, lr}
   159a2:	af00      	add	r7, sp, #0
   159a4:	2000      	movs	r0, #0
   159a6:	4b02      	ldr	r3, [pc, #8]	; (159b0 <TC3_Handler+0x10>)
   159a8:	4798      	blx	r3
   159aa:	46c0      	nop			; (mov r8, r8)
   159ac:	46bd      	mov	sp, r7
   159ae:	bd80      	pop	{r7, pc}
   159b0:	000159dd 	.word	0x000159dd

000159b4 <TC4_Handler>:
   159b4:	b580      	push	{r7, lr}
   159b6:	af00      	add	r7, sp, #0
   159b8:	2001      	movs	r0, #1
   159ba:	4b02      	ldr	r3, [pc, #8]	; (159c4 <TC4_Handler+0x10>)
   159bc:	4798      	blx	r3
   159be:	46c0      	nop			; (mov r8, r8)
   159c0:	46bd      	mov	sp, r7
   159c2:	bd80      	pop	{r7, pc}
   159c4:	000159dd 	.word	0x000159dd

000159c8 <TC5_Handler>:
   159c8:	b580      	push	{r7, lr}
   159ca:	af00      	add	r7, sp, #0
   159cc:	2002      	movs	r0, #2
   159ce:	4b02      	ldr	r3, [pc, #8]	; (159d8 <TC5_Handler+0x10>)
   159d0:	4798      	blx	r3
   159d2:	46c0      	nop			; (mov r8, r8)
   159d4:	46bd      	mov	sp, r7
   159d6:	bd80      	pop	{r7, pc}
   159d8:	000159dd 	.word	0x000159dd

000159dc <_tc_interrupt_handler>:
   159dc:	b580      	push	{r7, lr}
   159de:	b084      	sub	sp, #16
   159e0:	af00      	add	r7, sp, #0
   159e2:	0002      	movs	r2, r0
   159e4:	1dfb      	adds	r3, r7, #7
   159e6:	701a      	strb	r2, [r3, #0]
   159e8:	1dfb      	adds	r3, r7, #7
   159ea:	781a      	ldrb	r2, [r3, #0]
   159ec:	4b28      	ldr	r3, [pc, #160]	; (15a90 <_tc_interrupt_handler+0xb4>)
   159ee:	0092      	lsls	r2, r2, #2
   159f0:	58d3      	ldr	r3, [r2, r3]
   159f2:	60fb      	str	r3, [r7, #12]
   159f4:	68fb      	ldr	r3, [r7, #12]
   159f6:	681b      	ldr	r3, [r3, #0]
   159f8:	7b9b      	ldrb	r3, [r3, #14]
   159fa:	b2db      	uxtb	r3, r3
   159fc:	68fa      	ldr	r2, [r7, #12]
   159fe:	7e12      	ldrb	r2, [r2, #24]
   15a00:	4013      	ands	r3, r2
   15a02:	b2da      	uxtb	r2, r3
   15a04:	68fb      	ldr	r3, [r7, #12]
   15a06:	7e59      	ldrb	r1, [r3, #25]
   15a08:	230b      	movs	r3, #11
   15a0a:	18fb      	adds	r3, r7, r3
   15a0c:	400a      	ands	r2, r1
   15a0e:	701a      	strb	r2, [r3, #0]
   15a10:	230b      	movs	r3, #11
   15a12:	18fb      	adds	r3, r7, r3
   15a14:	781b      	ldrb	r3, [r3, #0]
   15a16:	2201      	movs	r2, #1
   15a18:	4013      	ands	r3, r2
   15a1a:	d008      	beq.n	15a2e <_tc_interrupt_handler+0x52>
   15a1c:	68fb      	ldr	r3, [r7, #12]
   15a1e:	689b      	ldr	r3, [r3, #8]
   15a20:	68fa      	ldr	r2, [r7, #12]
   15a22:	0010      	movs	r0, r2
   15a24:	4798      	blx	r3
   15a26:	68fb      	ldr	r3, [r7, #12]
   15a28:	681b      	ldr	r3, [r3, #0]
   15a2a:	2201      	movs	r2, #1
   15a2c:	739a      	strb	r2, [r3, #14]
   15a2e:	230b      	movs	r3, #11
   15a30:	18fb      	adds	r3, r7, r3
   15a32:	781b      	ldrb	r3, [r3, #0]
   15a34:	2202      	movs	r2, #2
   15a36:	4013      	ands	r3, r2
   15a38:	d008      	beq.n	15a4c <_tc_interrupt_handler+0x70>
   15a3a:	68fb      	ldr	r3, [r7, #12]
   15a3c:	68db      	ldr	r3, [r3, #12]
   15a3e:	68fa      	ldr	r2, [r7, #12]
   15a40:	0010      	movs	r0, r2
   15a42:	4798      	blx	r3
   15a44:	68fb      	ldr	r3, [r7, #12]
   15a46:	681b      	ldr	r3, [r3, #0]
   15a48:	2202      	movs	r2, #2
   15a4a:	739a      	strb	r2, [r3, #14]
   15a4c:	230b      	movs	r3, #11
   15a4e:	18fb      	adds	r3, r7, r3
   15a50:	781b      	ldrb	r3, [r3, #0]
   15a52:	2210      	movs	r2, #16
   15a54:	4013      	ands	r3, r2
   15a56:	d008      	beq.n	15a6a <_tc_interrupt_handler+0x8e>
   15a58:	68fb      	ldr	r3, [r7, #12]
   15a5a:	691b      	ldr	r3, [r3, #16]
   15a5c:	68fa      	ldr	r2, [r7, #12]
   15a5e:	0010      	movs	r0, r2
   15a60:	4798      	blx	r3
   15a62:	68fb      	ldr	r3, [r7, #12]
   15a64:	681b      	ldr	r3, [r3, #0]
   15a66:	2210      	movs	r2, #16
   15a68:	739a      	strb	r2, [r3, #14]
   15a6a:	230b      	movs	r3, #11
   15a6c:	18fb      	adds	r3, r7, r3
   15a6e:	781b      	ldrb	r3, [r3, #0]
   15a70:	2220      	movs	r2, #32
   15a72:	4013      	ands	r3, r2
   15a74:	d008      	beq.n	15a88 <_tc_interrupt_handler+0xac>
   15a76:	68fb      	ldr	r3, [r7, #12]
   15a78:	695b      	ldr	r3, [r3, #20]
   15a7a:	68fa      	ldr	r2, [r7, #12]
   15a7c:	0010      	movs	r0, r2
   15a7e:	4798      	blx	r3
   15a80:	68fb      	ldr	r3, [r7, #12]
   15a82:	681b      	ldr	r3, [r3, #0]
   15a84:	2220      	movs	r2, #32
   15a86:	739a      	strb	r2, [r3, #14]
   15a88:	46c0      	nop			; (mov r8, r8)
   15a8a:	46bd      	mov	sp, r7
   15a8c:	b004      	add	sp, #16
   15a8e:	bd80      	pop	{r7, pc}
   15a90:	20004360 	.word	0x20004360

00015a94 <FreeRTOS_CLIRegisterCommand>:
   15a94:	b580      	push	{r7, lr}
   15a96:	b084      	sub	sp, #16
   15a98:	af00      	add	r7, sp, #0
   15a9a:	6078      	str	r0, [r7, #4]
   15a9c:	2300      	movs	r3, #0
   15a9e:	60fb      	str	r3, [r7, #12]
   15aa0:	687b      	ldr	r3, [r7, #4]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d101      	bne.n	15aaa <FreeRTOS_CLIRegisterCommand+0x16>
   15aa6:	b672      	cpsid	i
   15aa8:	e7fe      	b.n	15aa8 <FreeRTOS_CLIRegisterCommand+0x14>
   15aaa:	2008      	movs	r0, #8
   15aac:	4b11      	ldr	r3, [pc, #68]	; (15af4 <FreeRTOS_CLIRegisterCommand+0x60>)
   15aae:	4798      	blx	r3
   15ab0:	0003      	movs	r3, r0
   15ab2:	60bb      	str	r3, [r7, #8]
   15ab4:	68bb      	ldr	r3, [r7, #8]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d101      	bne.n	15abe <FreeRTOS_CLIRegisterCommand+0x2a>
   15aba:	b672      	cpsid	i
   15abc:	e7fe      	b.n	15abc <FreeRTOS_CLIRegisterCommand+0x28>
   15abe:	68bb      	ldr	r3, [r7, #8]
   15ac0:	2b00      	cmp	r3, #0
   15ac2:	d012      	beq.n	15aea <FreeRTOS_CLIRegisterCommand+0x56>
   15ac4:	4b0c      	ldr	r3, [pc, #48]	; (15af8 <FreeRTOS_CLIRegisterCommand+0x64>)
   15ac6:	4798      	blx	r3
   15ac8:	68bb      	ldr	r3, [r7, #8]
   15aca:	687a      	ldr	r2, [r7, #4]
   15acc:	601a      	str	r2, [r3, #0]
   15ace:	68bb      	ldr	r3, [r7, #8]
   15ad0:	2200      	movs	r2, #0
   15ad2:	605a      	str	r2, [r3, #4]
   15ad4:	4b09      	ldr	r3, [pc, #36]	; (15afc <FreeRTOS_CLIRegisterCommand+0x68>)
   15ad6:	681b      	ldr	r3, [r3, #0]
   15ad8:	68ba      	ldr	r2, [r7, #8]
   15ada:	605a      	str	r2, [r3, #4]
   15adc:	4b07      	ldr	r3, [pc, #28]	; (15afc <FreeRTOS_CLIRegisterCommand+0x68>)
   15ade:	68ba      	ldr	r2, [r7, #8]
   15ae0:	601a      	str	r2, [r3, #0]
   15ae2:	4b07      	ldr	r3, [pc, #28]	; (15b00 <FreeRTOS_CLIRegisterCommand+0x6c>)
   15ae4:	4798      	blx	r3
   15ae6:	2301      	movs	r3, #1
   15ae8:	60fb      	str	r3, [r7, #12]
   15aea:	68fb      	ldr	r3, [r7, #12]
   15aec:	0018      	movs	r0, r3
   15aee:	46bd      	mov	sp, r7
   15af0:	b004      	add	sp, #16
   15af2:	bd80      	pop	{r7, pc}
   15af4:	00017ea1 	.word	0x00017ea1
   15af8:	00017d69 	.word	0x00017d69
   15afc:	200000e0 	.word	0x200000e0
   15b00:	00017d8d 	.word	0x00017d8d

00015b04 <FreeRTOS_CLIProcessCommand>:
   15b04:	b580      	push	{r7, lr}
   15b06:	b088      	sub	sp, #32
   15b08:	af00      	add	r7, sp, #0
   15b0a:	60f8      	str	r0, [r7, #12]
   15b0c:	60b9      	str	r1, [r7, #8]
   15b0e:	607a      	str	r2, [r7, #4]
   15b10:	2301      	movs	r3, #1
   15b12:	61fb      	str	r3, [r7, #28]
   15b14:	4b3d      	ldr	r3, [pc, #244]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b16:	681b      	ldr	r3, [r3, #0]
   15b18:	2b00      	cmp	r3, #0
   15b1a:	d144      	bne.n	15ba6 <FreeRTOS_CLIProcessCommand+0xa2>
   15b1c:	4b3b      	ldr	r3, [pc, #236]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b1e:	4a3c      	ldr	r2, [pc, #240]	; (15c10 <FreeRTOS_CLIProcessCommand+0x10c>)
   15b20:	601a      	str	r2, [r3, #0]
   15b22:	e03a      	b.n	15b9a <FreeRTOS_CLIProcessCommand+0x96>
   15b24:	4b39      	ldr	r3, [pc, #228]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b26:	681b      	ldr	r3, [r3, #0]
   15b28:	681b      	ldr	r3, [r3, #0]
   15b2a:	681b      	ldr	r3, [r3, #0]
   15b2c:	61bb      	str	r3, [r7, #24]
   15b2e:	69bb      	ldr	r3, [r7, #24]
   15b30:	0018      	movs	r0, r3
   15b32:	4b38      	ldr	r3, [pc, #224]	; (15c14 <FreeRTOS_CLIProcessCommand+0x110>)
   15b34:	4798      	blx	r3
   15b36:	0003      	movs	r3, r0
   15b38:	617b      	str	r3, [r7, #20]
   15b3a:	68fa      	ldr	r2, [r7, #12]
   15b3c:	697b      	ldr	r3, [r7, #20]
   15b3e:	18d3      	adds	r3, r2, r3
   15b40:	781b      	ldrb	r3, [r3, #0]
   15b42:	2b20      	cmp	r3, #32
   15b44:	d005      	beq.n	15b52 <FreeRTOS_CLIProcessCommand+0x4e>
   15b46:	68fa      	ldr	r2, [r7, #12]
   15b48:	697b      	ldr	r3, [r7, #20]
   15b4a:	18d3      	adds	r3, r2, r3
   15b4c:	781b      	ldrb	r3, [r3, #0]
   15b4e:	2b00      	cmp	r3, #0
   15b50:	d11e      	bne.n	15b90 <FreeRTOS_CLIProcessCommand+0x8c>
   15b52:	697a      	ldr	r2, [r7, #20]
   15b54:	69b9      	ldr	r1, [r7, #24]
   15b56:	68fb      	ldr	r3, [r7, #12]
   15b58:	0018      	movs	r0, r3
   15b5a:	4b2f      	ldr	r3, [pc, #188]	; (15c18 <FreeRTOS_CLIProcessCommand+0x114>)
   15b5c:	4798      	blx	r3
   15b5e:	1e03      	subs	r3, r0, #0
   15b60:	d116      	bne.n	15b90 <FreeRTOS_CLIProcessCommand+0x8c>
   15b62:	4b2a      	ldr	r3, [pc, #168]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b64:	681b      	ldr	r3, [r3, #0]
   15b66:	681b      	ldr	r3, [r3, #0]
   15b68:	7b1b      	ldrb	r3, [r3, #12]
   15b6a:	b25b      	sxtb	r3, r3
   15b6c:	2b00      	cmp	r3, #0
   15b6e:	db19      	blt.n	15ba4 <FreeRTOS_CLIProcessCommand+0xa0>
   15b70:	68fb      	ldr	r3, [r7, #12]
   15b72:	0018      	movs	r0, r3
   15b74:	4b29      	ldr	r3, [pc, #164]	; (15c1c <FreeRTOS_CLIProcessCommand+0x118>)
   15b76:	4798      	blx	r3
   15b78:	0003      	movs	r3, r0
   15b7a:	001a      	movs	r2, r3
   15b7c:	4b23      	ldr	r3, [pc, #140]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b7e:	681b      	ldr	r3, [r3, #0]
   15b80:	681b      	ldr	r3, [r3, #0]
   15b82:	7b1b      	ldrb	r3, [r3, #12]
   15b84:	b25b      	sxtb	r3, r3
   15b86:	429a      	cmp	r2, r3
   15b88:	d00c      	beq.n	15ba4 <FreeRTOS_CLIProcessCommand+0xa0>
   15b8a:	2300      	movs	r3, #0
   15b8c:	61fb      	str	r3, [r7, #28]
   15b8e:	e009      	b.n	15ba4 <FreeRTOS_CLIProcessCommand+0xa0>
   15b90:	4b1e      	ldr	r3, [pc, #120]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b92:	681b      	ldr	r3, [r3, #0]
   15b94:	685a      	ldr	r2, [r3, #4]
   15b96:	4b1d      	ldr	r3, [pc, #116]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b98:	601a      	str	r2, [r3, #0]
   15b9a:	4b1c      	ldr	r3, [pc, #112]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15b9c:	681b      	ldr	r3, [r3, #0]
   15b9e:	2b00      	cmp	r3, #0
   15ba0:	d1c0      	bne.n	15b24 <FreeRTOS_CLIProcessCommand+0x20>
   15ba2:	e000      	b.n	15ba6 <FreeRTOS_CLIProcessCommand+0xa2>
   15ba4:	46c0      	nop			; (mov r8, r8)
   15ba6:	4b19      	ldr	r3, [pc, #100]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15ba8:	681b      	ldr	r3, [r3, #0]
   15baa:	2b00      	cmp	r3, #0
   15bac:	d00c      	beq.n	15bc8 <FreeRTOS_CLIProcessCommand+0xc4>
   15bae:	69fb      	ldr	r3, [r7, #28]
   15bb0:	2b00      	cmp	r3, #0
   15bb2:	d109      	bne.n	15bc8 <FreeRTOS_CLIProcessCommand+0xc4>
   15bb4:	687a      	ldr	r2, [r7, #4]
   15bb6:	491a      	ldr	r1, [pc, #104]	; (15c20 <FreeRTOS_CLIProcessCommand+0x11c>)
   15bb8:	68bb      	ldr	r3, [r7, #8]
   15bba:	0018      	movs	r0, r3
   15bbc:	4b19      	ldr	r3, [pc, #100]	; (15c24 <FreeRTOS_CLIProcessCommand+0x120>)
   15bbe:	4798      	blx	r3
   15bc0:	4b12      	ldr	r3, [pc, #72]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15bc2:	2200      	movs	r2, #0
   15bc4:	601a      	str	r2, [r3, #0]
   15bc6:	e01c      	b.n	15c02 <FreeRTOS_CLIProcessCommand+0xfe>
   15bc8:	4b10      	ldr	r3, [pc, #64]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15bca:	681b      	ldr	r3, [r3, #0]
   15bcc:	2b00      	cmp	r3, #0
   15bce:	d010      	beq.n	15bf2 <FreeRTOS_CLIProcessCommand+0xee>
   15bd0:	4b0e      	ldr	r3, [pc, #56]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15bd2:	681b      	ldr	r3, [r3, #0]
   15bd4:	681b      	ldr	r3, [r3, #0]
   15bd6:	689b      	ldr	r3, [r3, #8]
   15bd8:	68fa      	ldr	r2, [r7, #12]
   15bda:	6879      	ldr	r1, [r7, #4]
   15bdc:	68b8      	ldr	r0, [r7, #8]
   15bde:	4798      	blx	r3
   15be0:	0003      	movs	r3, r0
   15be2:	61fb      	str	r3, [r7, #28]
   15be4:	69fb      	ldr	r3, [r7, #28]
   15be6:	2b00      	cmp	r3, #0
   15be8:	d10b      	bne.n	15c02 <FreeRTOS_CLIProcessCommand+0xfe>
   15bea:	4b08      	ldr	r3, [pc, #32]	; (15c0c <FreeRTOS_CLIProcessCommand+0x108>)
   15bec:	2200      	movs	r2, #0
   15bee:	601a      	str	r2, [r3, #0]
   15bf0:	e007      	b.n	15c02 <FreeRTOS_CLIProcessCommand+0xfe>
   15bf2:	687a      	ldr	r2, [r7, #4]
   15bf4:	490c      	ldr	r1, [pc, #48]	; (15c28 <FreeRTOS_CLIProcessCommand+0x124>)
   15bf6:	68bb      	ldr	r3, [r7, #8]
   15bf8:	0018      	movs	r0, r3
   15bfa:	4b0a      	ldr	r3, [pc, #40]	; (15c24 <FreeRTOS_CLIProcessCommand+0x120>)
   15bfc:	4798      	blx	r3
   15bfe:	2300      	movs	r3, #0
   15c00:	61fb      	str	r3, [r7, #28]
   15c02:	69fb      	ldr	r3, [r7, #28]
   15c04:	0018      	movs	r0, r3
   15c06:	46bd      	mov	sp, r7
   15c08:	b008      	add	sp, #32
   15c0a:	bd80      	pop	{r7, pc}
   15c0c:	20000b14 	.word	0x20000b14
   15c10:	200000d8 	.word	0x200000d8
   15c14:	000325bb 	.word	0x000325bb
   15c18:	000325c9 	.word	0x000325c9
   15c1c:	00015c8d 	.word	0x00015c8d
   15c20:	00034254 	.word	0x00034254
   15c24:	000325eb 	.word	0x000325eb
   15c28:	000342ac 	.word	0x000342ac

00015c2c <prvHelpCommand>:
   15c2c:	b580      	push	{r7, lr}
   15c2e:	b086      	sub	sp, #24
   15c30:	af00      	add	r7, sp, #0
   15c32:	60f8      	str	r0, [r7, #12]
   15c34:	60b9      	str	r1, [r7, #8]
   15c36:	607a      	str	r2, [r7, #4]
   15c38:	4b11      	ldr	r3, [pc, #68]	; (15c80 <prvHelpCommand+0x54>)
   15c3a:	681b      	ldr	r3, [r3, #0]
   15c3c:	2b00      	cmp	r3, #0
   15c3e:	d102      	bne.n	15c46 <prvHelpCommand+0x1a>
   15c40:	4b0f      	ldr	r3, [pc, #60]	; (15c80 <prvHelpCommand+0x54>)
   15c42:	4a10      	ldr	r2, [pc, #64]	; (15c84 <prvHelpCommand+0x58>)
   15c44:	601a      	str	r2, [r3, #0]
   15c46:	4b0e      	ldr	r3, [pc, #56]	; (15c80 <prvHelpCommand+0x54>)
   15c48:	681b      	ldr	r3, [r3, #0]
   15c4a:	681b      	ldr	r3, [r3, #0]
   15c4c:	6859      	ldr	r1, [r3, #4]
   15c4e:	68ba      	ldr	r2, [r7, #8]
   15c50:	68fb      	ldr	r3, [r7, #12]
   15c52:	0018      	movs	r0, r3
   15c54:	4b0c      	ldr	r3, [pc, #48]	; (15c88 <prvHelpCommand+0x5c>)
   15c56:	4798      	blx	r3
   15c58:	4b09      	ldr	r3, [pc, #36]	; (15c80 <prvHelpCommand+0x54>)
   15c5a:	681b      	ldr	r3, [r3, #0]
   15c5c:	685a      	ldr	r2, [r3, #4]
   15c5e:	4b08      	ldr	r3, [pc, #32]	; (15c80 <prvHelpCommand+0x54>)
   15c60:	601a      	str	r2, [r3, #0]
   15c62:	4b07      	ldr	r3, [pc, #28]	; (15c80 <prvHelpCommand+0x54>)
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	2b00      	cmp	r3, #0
   15c68:	d102      	bne.n	15c70 <prvHelpCommand+0x44>
   15c6a:	2300      	movs	r3, #0
   15c6c:	617b      	str	r3, [r7, #20]
   15c6e:	e001      	b.n	15c74 <prvHelpCommand+0x48>
   15c70:	2301      	movs	r3, #1
   15c72:	617b      	str	r3, [r7, #20]
   15c74:	697b      	ldr	r3, [r7, #20]
   15c76:	0018      	movs	r0, r3
   15c78:	46bd      	mov	sp, r7
   15c7a:	b006      	add	sp, #24
   15c7c:	bd80      	pop	{r7, pc}
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	20000b18 	.word	0x20000b18
   15c84:	200000d8 	.word	0x200000d8
   15c88:	000325eb 	.word	0x000325eb

00015c8c <prvGetNumberOfParameters>:
   15c8c:	b580      	push	{r7, lr}
   15c8e:	b084      	sub	sp, #16
   15c90:	af00      	add	r7, sp, #0
   15c92:	6078      	str	r0, [r7, #4]
   15c94:	230f      	movs	r3, #15
   15c96:	18fb      	adds	r3, r7, r3
   15c98:	2200      	movs	r2, #0
   15c9a:	701a      	strb	r2, [r3, #0]
   15c9c:	2300      	movs	r3, #0
   15c9e:	60bb      	str	r3, [r7, #8]
   15ca0:	e018      	b.n	15cd4 <prvGetNumberOfParameters+0x48>
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	781b      	ldrb	r3, [r3, #0]
   15ca6:	2b20      	cmp	r3, #32
   15ca8:	d10f      	bne.n	15cca <prvGetNumberOfParameters+0x3e>
   15caa:	68bb      	ldr	r3, [r7, #8]
   15cac:	2b01      	cmp	r3, #1
   15cae:	d00e      	beq.n	15cce <prvGetNumberOfParameters+0x42>
   15cb0:	230f      	movs	r3, #15
   15cb2:	18fb      	adds	r3, r7, r3
   15cb4:	781b      	ldrb	r3, [r3, #0]
   15cb6:	b25b      	sxtb	r3, r3
   15cb8:	b2db      	uxtb	r3, r3
   15cba:	3301      	adds	r3, #1
   15cbc:	b2da      	uxtb	r2, r3
   15cbe:	230f      	movs	r3, #15
   15cc0:	18fb      	adds	r3, r7, r3
   15cc2:	701a      	strb	r2, [r3, #0]
   15cc4:	2301      	movs	r3, #1
   15cc6:	60bb      	str	r3, [r7, #8]
   15cc8:	e001      	b.n	15cce <prvGetNumberOfParameters+0x42>
   15cca:	2300      	movs	r3, #0
   15ccc:	60bb      	str	r3, [r7, #8]
   15cce:	687b      	ldr	r3, [r7, #4]
   15cd0:	3301      	adds	r3, #1
   15cd2:	607b      	str	r3, [r7, #4]
   15cd4:	687b      	ldr	r3, [r7, #4]
   15cd6:	781b      	ldrb	r3, [r3, #0]
   15cd8:	2b00      	cmp	r3, #0
   15cda:	d1e2      	bne.n	15ca2 <prvGetNumberOfParameters+0x16>
   15cdc:	68bb      	ldr	r3, [r7, #8]
   15cde:	2b01      	cmp	r3, #1
   15ce0:	d109      	bne.n	15cf6 <prvGetNumberOfParameters+0x6a>
   15ce2:	230f      	movs	r3, #15
   15ce4:	18fb      	adds	r3, r7, r3
   15ce6:	781b      	ldrb	r3, [r3, #0]
   15ce8:	b25b      	sxtb	r3, r3
   15cea:	b2db      	uxtb	r3, r3
   15cec:	3b01      	subs	r3, #1
   15cee:	b2da      	uxtb	r2, r3
   15cf0:	230f      	movs	r3, #15
   15cf2:	18fb      	adds	r3, r7, r3
   15cf4:	701a      	strb	r2, [r3, #0]
   15cf6:	230f      	movs	r3, #15
   15cf8:	18fb      	adds	r3, r7, r3
   15cfa:	781b      	ldrb	r3, [r3, #0]
   15cfc:	b25b      	sxtb	r3, r3
   15cfe:	0018      	movs	r0, r3
   15d00:	46bd      	mov	sp, r7
   15d02:	b004      	add	sp, #16
   15d04:	bd80      	pop	{r7, pc}
	...

00015d08 <prvTraceGetQueueNumber>:
   15d08:	b580      	push	{r7, lr}
   15d0a:	b082      	sub	sp, #8
   15d0c:	af00      	add	r7, sp, #0
   15d0e:	6078      	str	r0, [r7, #4]
   15d10:	687b      	ldr	r3, [r7, #4]
   15d12:	0018      	movs	r0, r3
   15d14:	4b03      	ldr	r3, [pc, #12]	; (15d24 <prvTraceGetQueueNumber+0x1c>)
   15d16:	4798      	blx	r3
   15d18:	0003      	movs	r3, r0
   15d1a:	0018      	movs	r0, r3
   15d1c:	46bd      	mov	sp, r7
   15d1e:	b002      	add	sp, #8
   15d20:	bd80      	pop	{r7, pc}
   15d22:	46c0      	nop			; (mov r8, r8)
   15d24:	000194c9 	.word	0x000194c9

00015d28 <prvTraceGetQueueType>:
   15d28:	b580      	push	{r7, lr}
   15d2a:	b082      	sub	sp, #8
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	6078      	str	r0, [r7, #4]
   15d30:	687b      	ldr	r3, [r7, #4]
   15d32:	0018      	movs	r0, r3
   15d34:	4b03      	ldr	r3, [pc, #12]	; (15d44 <prvTraceGetQueueType+0x1c>)
   15d36:	4798      	blx	r3
   15d38:	0003      	movs	r3, r0
   15d3a:	0018      	movs	r0, r3
   15d3c:	46bd      	mov	sp, r7
   15d3e:	b002      	add	sp, #8
   15d40:	bd80      	pop	{r7, pc}
   15d42:	46c0      	nop			; (mov r8, r8)
   15d44:	000194f5 	.word	0x000194f5

00015d48 <prvTraceGetTaskNumberLow16>:
   15d48:	b580      	push	{r7, lr}
   15d4a:	b082      	sub	sp, #8
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	6078      	str	r0, [r7, #4]
   15d50:	687b      	ldr	r3, [r7, #4]
   15d52:	0018      	movs	r0, r3
   15d54:	4b03      	ldr	r3, [pc, #12]	; (15d64 <prvTraceGetTaskNumberLow16+0x1c>)
   15d56:	4798      	blx	r3
   15d58:	0003      	movs	r3, r0
   15d5a:	b29b      	uxth	r3, r3
   15d5c:	0018      	movs	r0, r3
   15d5e:	46bd      	mov	sp, r7
   15d60:	b002      	add	sp, #8
   15d62:	bd80      	pop	{r7, pc}
   15d64:	0001a825 	.word	0x0001a825

00015d68 <prvTraceGetTaskNumberHigh16>:
   15d68:	b580      	push	{r7, lr}
   15d6a:	b082      	sub	sp, #8
   15d6c:	af00      	add	r7, sp, #0
   15d6e:	6078      	str	r0, [r7, #4]
   15d70:	687b      	ldr	r3, [r7, #4]
   15d72:	0018      	movs	r0, r3
   15d74:	4b04      	ldr	r3, [pc, #16]	; (15d88 <prvTraceGetTaskNumberHigh16+0x20>)
   15d76:	4798      	blx	r3
   15d78:	0003      	movs	r3, r0
   15d7a:	0c1b      	lsrs	r3, r3, #16
   15d7c:	b29b      	uxth	r3, r3
   15d7e:	0018      	movs	r0, r3
   15d80:	46bd      	mov	sp, r7
   15d82:	b002      	add	sp, #8
   15d84:	bd80      	pop	{r7, pc}
   15d86:	46c0      	nop			; (mov r8, r8)
   15d88:	0001a825 	.word	0x0001a825

00015d8c <prvTraceSetTaskNumberLow16>:
   15d8c:	b580      	push	{r7, lr}
   15d8e:	b082      	sub	sp, #8
   15d90:	af00      	add	r7, sp, #0
   15d92:	6078      	str	r0, [r7, #4]
   15d94:	000a      	movs	r2, r1
   15d96:	1cbb      	adds	r3, r7, #2
   15d98:	801a      	strh	r2, [r3, #0]
   15d9a:	687b      	ldr	r3, [r7, #4]
   15d9c:	0018      	movs	r0, r3
   15d9e:	4b08      	ldr	r3, [pc, #32]	; (15dc0 <prvTraceSetTaskNumberLow16+0x34>)
   15da0:	4798      	blx	r3
   15da2:	0003      	movs	r3, r0
   15da4:	0c1b      	lsrs	r3, r3, #16
   15da6:	041a      	lsls	r2, r3, #16
   15da8:	1cbb      	adds	r3, r7, #2
   15daa:	881b      	ldrh	r3, [r3, #0]
   15dac:	431a      	orrs	r2, r3
   15dae:	687b      	ldr	r3, [r7, #4]
   15db0:	0011      	movs	r1, r2
   15db2:	0018      	movs	r0, r3
   15db4:	4b03      	ldr	r3, [pc, #12]	; (15dc4 <prvTraceSetTaskNumberLow16+0x38>)
   15db6:	4798      	blx	r3
   15db8:	46c0      	nop			; (mov r8, r8)
   15dba:	46bd      	mov	sp, r7
   15dbc:	b002      	add	sp, #8
   15dbe:	bd80      	pop	{r7, pc}
   15dc0:	0001a825 	.word	0x0001a825
   15dc4:	0001a84d 	.word	0x0001a84d

00015dc8 <prvTraceSetTaskNumberHigh16>:
   15dc8:	b580      	push	{r7, lr}
   15dca:	b082      	sub	sp, #8
   15dcc:	af00      	add	r7, sp, #0
   15dce:	6078      	str	r0, [r7, #4]
   15dd0:	000a      	movs	r2, r1
   15dd2:	1cbb      	adds	r3, r7, #2
   15dd4:	801a      	strh	r2, [r3, #0]
   15dd6:	687b      	ldr	r3, [r7, #4]
   15dd8:	0018      	movs	r0, r3
   15dda:	4b09      	ldr	r3, [pc, #36]	; (15e00 <prvTraceSetTaskNumberHigh16+0x38>)
   15ddc:	4798      	blx	r3
   15dde:	0003      	movs	r3, r0
   15de0:	041b      	lsls	r3, r3, #16
   15de2:	0c1a      	lsrs	r2, r3, #16
   15de4:	1cbb      	adds	r3, r7, #2
   15de6:	881b      	ldrh	r3, [r3, #0]
   15de8:	041b      	lsls	r3, r3, #16
   15dea:	431a      	orrs	r2, r3
   15dec:	687b      	ldr	r3, [r7, #4]
   15dee:	0011      	movs	r1, r2
   15df0:	0018      	movs	r0, r3
   15df2:	4b04      	ldr	r3, [pc, #16]	; (15e04 <prvTraceSetTaskNumberHigh16+0x3c>)
   15df4:	4798      	blx	r3
   15df6:	46c0      	nop			; (mov r8, r8)
   15df8:	46bd      	mov	sp, r7
   15dfa:	b002      	add	sp, #8
   15dfc:	bd80      	pop	{r7, pc}
   15dfe:	46c0      	nop			; (mov r8, r8)
   15e00:	0001a825 	.word	0x0001a825
   15e04:	0001a84d 	.word	0x0001a84d

00015e08 <prvTraceGetQueueNumberLow16>:
   15e08:	b580      	push	{r7, lr}
   15e0a:	b082      	sub	sp, #8
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]
   15e10:	687b      	ldr	r3, [r7, #4]
   15e12:	0018      	movs	r0, r3
   15e14:	4b03      	ldr	r3, [pc, #12]	; (15e24 <prvTraceGetQueueNumberLow16+0x1c>)
   15e16:	4798      	blx	r3
   15e18:	0003      	movs	r3, r0
   15e1a:	b29b      	uxth	r3, r3
   15e1c:	0018      	movs	r0, r3
   15e1e:	46bd      	mov	sp, r7
   15e20:	b002      	add	sp, #8
   15e22:	bd80      	pop	{r7, pc}
   15e24:	00015d09 	.word	0x00015d09

00015e28 <prvTraceGetQueueNumberHigh16>:
   15e28:	b580      	push	{r7, lr}
   15e2a:	b082      	sub	sp, #8
   15e2c:	af00      	add	r7, sp, #0
   15e2e:	6078      	str	r0, [r7, #4]
   15e30:	687b      	ldr	r3, [r7, #4]
   15e32:	0018      	movs	r0, r3
   15e34:	4b04      	ldr	r3, [pc, #16]	; (15e48 <prvTraceGetQueueNumberHigh16+0x20>)
   15e36:	4798      	blx	r3
   15e38:	0003      	movs	r3, r0
   15e3a:	0c1b      	lsrs	r3, r3, #16
   15e3c:	b29b      	uxth	r3, r3
   15e3e:	0018      	movs	r0, r3
   15e40:	46bd      	mov	sp, r7
   15e42:	b002      	add	sp, #8
   15e44:	bd80      	pop	{r7, pc}
   15e46:	46c0      	nop			; (mov r8, r8)
   15e48:	00015d09 	.word	0x00015d09

00015e4c <prvTraceSetQueueNumberLow16>:
   15e4c:	b580      	push	{r7, lr}
   15e4e:	b082      	sub	sp, #8
   15e50:	af00      	add	r7, sp, #0
   15e52:	6078      	str	r0, [r7, #4]
   15e54:	000a      	movs	r2, r1
   15e56:	1cbb      	adds	r3, r7, #2
   15e58:	801a      	strh	r2, [r3, #0]
   15e5a:	687b      	ldr	r3, [r7, #4]
   15e5c:	0018      	movs	r0, r3
   15e5e:	4b08      	ldr	r3, [pc, #32]	; (15e80 <prvTraceSetQueueNumberLow16+0x34>)
   15e60:	4798      	blx	r3
   15e62:	0003      	movs	r3, r0
   15e64:	0c1b      	lsrs	r3, r3, #16
   15e66:	041a      	lsls	r2, r3, #16
   15e68:	1cbb      	adds	r3, r7, #2
   15e6a:	881b      	ldrh	r3, [r3, #0]
   15e6c:	431a      	orrs	r2, r3
   15e6e:	687b      	ldr	r3, [r7, #4]
   15e70:	0011      	movs	r1, r2
   15e72:	0018      	movs	r0, r3
   15e74:	4b03      	ldr	r3, [pc, #12]	; (15e84 <prvTraceSetQueueNumberLow16+0x38>)
   15e76:	4798      	blx	r3
   15e78:	46c0      	nop			; (mov r8, r8)
   15e7a:	46bd      	mov	sp, r7
   15e7c:	b002      	add	sp, #8
   15e7e:	bd80      	pop	{r7, pc}
   15e80:	00015d09 	.word	0x00015d09
   15e84:	000194dd 	.word	0x000194dd

00015e88 <prvTraceSetQueueNumberHigh16>:
   15e88:	b580      	push	{r7, lr}
   15e8a:	b082      	sub	sp, #8
   15e8c:	af00      	add	r7, sp, #0
   15e8e:	6078      	str	r0, [r7, #4]
   15e90:	000a      	movs	r2, r1
   15e92:	1cbb      	adds	r3, r7, #2
   15e94:	801a      	strh	r2, [r3, #0]
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	0018      	movs	r0, r3
   15e9a:	4b09      	ldr	r3, [pc, #36]	; (15ec0 <prvTraceSetQueueNumberHigh16+0x38>)
   15e9c:	4798      	blx	r3
   15e9e:	0003      	movs	r3, r0
   15ea0:	041b      	lsls	r3, r3, #16
   15ea2:	0c1a      	lsrs	r2, r3, #16
   15ea4:	1cbb      	adds	r3, r7, #2
   15ea6:	881b      	ldrh	r3, [r3, #0]
   15ea8:	041b      	lsls	r3, r3, #16
   15eaa:	431a      	orrs	r2, r3
   15eac:	687b      	ldr	r3, [r7, #4]
   15eae:	0011      	movs	r1, r2
   15eb0:	0018      	movs	r0, r3
   15eb2:	4b04      	ldr	r3, [pc, #16]	; (15ec4 <prvTraceSetQueueNumberHigh16+0x3c>)
   15eb4:	4798      	blx	r3
   15eb6:	46c0      	nop			; (mov r8, r8)
   15eb8:	46bd      	mov	sp, r7
   15eba:	b002      	add	sp, #8
   15ebc:	bd80      	pop	{r7, pc}
   15ebe:	46c0      	nop			; (mov r8, r8)
   15ec0:	00015d09 	.word	0x00015d09
   15ec4:	000194dd 	.word	0x000194dd

00015ec8 <prvAddTaskToStackMonitor>:
   15ec8:	b580      	push	{r7, lr}
   15eca:	b084      	sub	sp, #16
   15ecc:	af00      	add	r7, sp, #0
   15ece:	6078      	str	r0, [r7, #4]
   15ed0:	2300      	movs	r3, #0
   15ed2:	60fb      	str	r3, [r7, #12]
   15ed4:	2300      	movs	r3, #0
   15ed6:	60bb      	str	r3, [r7, #8]
   15ed8:	e018      	b.n	15f0c <prvAddTaskToStackMonitor+0x44>
   15eda:	4b14      	ldr	r3, [pc, #80]	; (15f2c <prvAddTaskToStackMonitor+0x64>)
   15edc:	68ba      	ldr	r2, [r7, #8]
   15ede:	00d2      	lsls	r2, r2, #3
   15ee0:	58d3      	ldr	r3, [r2, r3]
   15ee2:	2b00      	cmp	r3, #0
   15ee4:	d10f      	bne.n	15f06 <prvAddTaskToStackMonitor+0x3e>
   15ee6:	4b11      	ldr	r3, [pc, #68]	; (15f2c <prvAddTaskToStackMonitor+0x64>)
   15ee8:	68ba      	ldr	r2, [r7, #8]
   15eea:	00d2      	lsls	r2, r2, #3
   15eec:	6879      	ldr	r1, [r7, #4]
   15eee:	50d1      	str	r1, [r2, r3]
   15ef0:	4a0e      	ldr	r2, [pc, #56]	; (15f2c <prvAddTaskToStackMonitor+0x64>)
   15ef2:	68bb      	ldr	r3, [r7, #8]
   15ef4:	00db      	lsls	r3, r3, #3
   15ef6:	18d3      	adds	r3, r2, r3
   15ef8:	3304      	adds	r3, #4
   15efa:	2201      	movs	r2, #1
   15efc:	4252      	negs	r2, r2
   15efe:	601a      	str	r2, [r3, #0]
   15f00:	2301      	movs	r3, #1
   15f02:	60fb      	str	r3, [r7, #12]
   15f04:	e005      	b.n	15f12 <prvAddTaskToStackMonitor+0x4a>
   15f06:	68bb      	ldr	r3, [r7, #8]
   15f08:	3301      	adds	r3, #1
   15f0a:	60bb      	str	r3, [r7, #8]
   15f0c:	68bb      	ldr	r3, [r7, #8]
   15f0e:	2b09      	cmp	r3, #9
   15f10:	dde3      	ble.n	15eda <prvAddTaskToStackMonitor+0x12>
   15f12:	68fb      	ldr	r3, [r7, #12]
   15f14:	2b00      	cmp	r3, #0
   15f16:	d104      	bne.n	15f22 <prvAddTaskToStackMonitor+0x5a>
   15f18:	4b05      	ldr	r3, [pc, #20]	; (15f30 <prvAddTaskToStackMonitor+0x68>)
   15f1a:	681b      	ldr	r3, [r3, #0]
   15f1c:	1c5a      	adds	r2, r3, #1
   15f1e:	4b04      	ldr	r3, [pc, #16]	; (15f30 <prvAddTaskToStackMonitor+0x68>)
   15f20:	601a      	str	r2, [r3, #0]
   15f22:	46c0      	nop			; (mov r8, r8)
   15f24:	46bd      	mov	sp, r7
   15f26:	b004      	add	sp, #16
   15f28:	bd80      	pop	{r7, pc}
   15f2a:	46c0      	nop			; (mov r8, r8)
   15f2c:	20000b20 	.word	0x20000b20
   15f30:	20000b70 	.word	0x20000b70

00015f34 <prvReportStackUsage>:
   15f34:	b590      	push	{r4, r7, lr}
   15f36:	b085      	sub	sp, #20
   15f38:	af00      	add	r7, sp, #0
   15f3a:	2300      	movs	r3, #0
   15f3c:	60fb      	str	r3, [r7, #12]
   15f3e:	4b2b      	ldr	r3, [pc, #172]	; (15fec <prvReportStackUsage+0xb8>)
   15f40:	681b      	ldr	r3, [r3, #0]
   15f42:	60bb      	str	r3, [r7, #8]
   15f44:	4b29      	ldr	r3, [pc, #164]	; (15fec <prvReportStackUsage+0xb8>)
   15f46:	681a      	ldr	r2, [r3, #0]
   15f48:	4b29      	ldr	r3, [pc, #164]	; (15ff0 <prvReportStackUsage+0xbc>)
   15f4a:	00d2      	lsls	r2, r2, #3
   15f4c:	58d3      	ldr	r3, [r2, r3]
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d035      	beq.n	15fbe <prvReportStackUsage+0x8a>
   15f52:	4b26      	ldr	r3, [pc, #152]	; (15fec <prvReportStackUsage+0xb8>)
   15f54:	681a      	ldr	r2, [r3, #0]
   15f56:	4b26      	ldr	r3, [pc, #152]	; (15ff0 <prvReportStackUsage+0xbc>)
   15f58:	00d2      	lsls	r2, r2, #3
   15f5a:	58d3      	ldr	r3, [r2, r3]
   15f5c:	0018      	movs	r0, r3
   15f5e:	4b25      	ldr	r3, [pc, #148]	; (15ff4 <prvReportStackUsage+0xc0>)
   15f60:	4798      	blx	r3
   15f62:	0003      	movs	r3, r0
   15f64:	607b      	str	r3, [r7, #4]
   15f66:	4b21      	ldr	r3, [pc, #132]	; (15fec <prvReportStackUsage+0xb8>)
   15f68:	681b      	ldr	r3, [r3, #0]
   15f6a:	4a21      	ldr	r2, [pc, #132]	; (15ff0 <prvReportStackUsage+0xbc>)
   15f6c:	00db      	lsls	r3, r3, #3
   15f6e:	18d3      	adds	r3, r2, r3
   15f70:	3304      	adds	r3, #4
   15f72:	681a      	ldr	r2, [r3, #0]
   15f74:	687b      	ldr	r3, [r7, #4]
   15f76:	429a      	cmp	r2, r3
   15f78:	d907      	bls.n	15f8a <prvReportStackUsage+0x56>
   15f7a:	4b1c      	ldr	r3, [pc, #112]	; (15fec <prvReportStackUsage+0xb8>)
   15f7c:	681b      	ldr	r3, [r3, #0]
   15f7e:	4a1c      	ldr	r2, [pc, #112]	; (15ff0 <prvReportStackUsage+0xbc>)
   15f80:	00db      	lsls	r3, r3, #3
   15f82:	18d3      	adds	r3, r2, r3
   15f84:	3304      	adds	r3, #4
   15f86:	687a      	ldr	r2, [r7, #4]
   15f88:	601a      	str	r2, [r3, #0]
   15f8a:	4b18      	ldr	r3, [pc, #96]	; (15fec <prvReportStackUsage+0xb8>)
   15f8c:	681a      	ldr	r2, [r3, #0]
   15f8e:	4b18      	ldr	r3, [pc, #96]	; (15ff0 <prvReportStackUsage+0xbc>)
   15f90:	00d2      	lsls	r2, r2, #3
   15f92:	58d3      	ldr	r3, [r2, r3]
   15f94:	0018      	movs	r0, r3
   15f96:	4b18      	ldr	r3, [pc, #96]	; (15ff8 <prvReportStackUsage+0xc4>)
   15f98:	4798      	blx	r3
   15f9a:	0003      	movs	r3, r0
   15f9c:	b2db      	uxtb	r3, r3
   15f9e:	0019      	movs	r1, r3
   15fa0:	4b12      	ldr	r3, [pc, #72]	; (15fec <prvReportStackUsage+0xb8>)
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	4a12      	ldr	r2, [pc, #72]	; (15ff0 <prvReportStackUsage+0xbc>)
   15fa6:	00db      	lsls	r3, r3, #3
   15fa8:	18d3      	adds	r3, r2, r3
   15faa:	3304      	adds	r3, #4
   15fac:	681b      	ldr	r3, [r3, #0]
   15fae:	000a      	movs	r2, r1
   15fb0:	2103      	movs	r1, #3
   15fb2:	20ea      	movs	r0, #234	; 0xea
   15fb4:	4c11      	ldr	r4, [pc, #68]	; (15ffc <prvReportStackUsage+0xc8>)
   15fb6:	47a0      	blx	r4
   15fb8:	68fb      	ldr	r3, [r7, #12]
   15fba:	3301      	adds	r3, #1
   15fbc:	60fb      	str	r3, [r7, #12]
   15fbe:	4b0b      	ldr	r3, [pc, #44]	; (15fec <prvReportStackUsage+0xb8>)
   15fc0:	681b      	ldr	r3, [r3, #0]
   15fc2:	1c5a      	adds	r2, r3, #1
   15fc4:	4b0e      	ldr	r3, [pc, #56]	; (16000 <prvReportStackUsage+0xcc>)
   15fc6:	210a      	movs	r1, #10
   15fc8:	0010      	movs	r0, r2
   15fca:	4798      	blx	r3
   15fcc:	000b      	movs	r3, r1
   15fce:	001a      	movs	r2, r3
   15fd0:	4b06      	ldr	r3, [pc, #24]	; (15fec <prvReportStackUsage+0xb8>)
   15fd2:	601a      	str	r2, [r3, #0]
   15fd4:	68fb      	ldr	r3, [r7, #12]
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	dc04      	bgt.n	15fe4 <prvReportStackUsage+0xb0>
   15fda:	4b04      	ldr	r3, [pc, #16]	; (15fec <prvReportStackUsage+0xb8>)
   15fdc:	681a      	ldr	r2, [r3, #0]
   15fde:	68bb      	ldr	r3, [r7, #8]
   15fe0:	429a      	cmp	r2, r3
   15fe2:	d1af      	bne.n	15f44 <prvReportStackUsage+0x10>
   15fe4:	46c0      	nop			; (mov r8, r8)
   15fe6:	46bd      	mov	sp, r7
   15fe8:	b005      	add	sp, #20
   15fea:	bd90      	pop	{r4, r7, pc}
   15fec:	20000b74 	.word	0x20000b74
   15ff0:	20000b20 	.word	0x20000b20
   15ff4:	0001a9c5 	.word	0x0001a9c5
   15ff8:	00015d49 	.word	0x00015d49
   15ffc:	00016891 	.word	0x00016891
   16000:	00030829 	.word	0x00030829

00016004 <prvTraceGetCurrentTaskHandle>:
   16004:	b580      	push	{r7, lr}
   16006:	af00      	add	r7, sp, #0
   16008:	4b02      	ldr	r3, [pc, #8]	; (16014 <prvTraceGetCurrentTaskHandle+0x10>)
   1600a:	4798      	blx	r3
   1600c:	0003      	movs	r3, r0
   1600e:	0018      	movs	r0, r3
   16010:	46bd      	mov	sp, r7
   16012:	bd80      	pop	{r7, pc}
   16014:	0001aa71 	.word	0x0001aa71

00016018 <vTraceEnable>:
   16018:	b590      	push	{r4, r7, lr}
   1601a:	b085      	sub	sp, #20
   1601c:	af02      	add	r7, sp, #8
   1601e:	6078      	str	r0, [r7, #4]
   16020:	4b14      	ldr	r3, [pc, #80]	; (16074 <vTraceEnable+0x5c>)
   16022:	4798      	blx	r3
   16024:	687b      	ldr	r3, [r7, #4]
   16026:	2b01      	cmp	r3, #1
   16028:	d102      	bne.n	16030 <vTraceEnable+0x18>
   1602a:	4b13      	ldr	r3, [pc, #76]	; (16078 <vTraceEnable+0x60>)
   1602c:	4798      	blx	r3
   1602e:	e00e      	b.n	1604e <vTraceEnable+0x36>
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	2b02      	cmp	r3, #2
   16034:	d104      	bne.n	16040 <vTraceEnable+0x28>
   16036:	4b11      	ldr	r3, [pc, #68]	; (1607c <vTraceEnable+0x64>)
   16038:	0018      	movs	r0, r3
   1603a:	4b11      	ldr	r3, [pc, #68]	; (16080 <vTraceEnable+0x68>)
   1603c:	4798      	blx	r3
   1603e:	e006      	b.n	1604e <vTraceEnable+0x36>
   16040:	687b      	ldr	r3, [r7, #4]
   16042:	2b00      	cmp	r3, #0
   16044:	d003      	beq.n	1604e <vTraceEnable+0x36>
   16046:	4b0f      	ldr	r3, [pc, #60]	; (16084 <vTraceEnable+0x6c>)
   16048:	0018      	movs	r0, r3
   1604a:	4b0d      	ldr	r3, [pc, #52]	; (16080 <vTraceEnable+0x68>)
   1604c:	4798      	blx	r3
   1604e:	4b0e      	ldr	r3, [pc, #56]	; (16088 <vTraceEnable+0x70>)
   16050:	681b      	ldr	r3, [r3, #0]
   16052:	2b00      	cmp	r3, #0
   16054:	d109      	bne.n	1606a <vTraceEnable+0x52>
   16056:	490d      	ldr	r1, [pc, #52]	; (1608c <vTraceEnable+0x74>)
   16058:	480d      	ldr	r0, [pc, #52]	; (16090 <vTraceEnable+0x78>)
   1605a:	4b0b      	ldr	r3, [pc, #44]	; (16088 <vTraceEnable+0x70>)
   1605c:	9301      	str	r3, [sp, #4]
   1605e:	2304      	movs	r3, #4
   16060:	9300      	str	r3, [sp, #0]
   16062:	2300      	movs	r3, #0
   16064:	22c8      	movs	r2, #200	; 0xc8
   16066:	4c0b      	ldr	r4, [pc, #44]	; (16094 <vTraceEnable+0x7c>)
   16068:	47a0      	blx	r4
   1606a:	46c0      	nop			; (mov r8, r8)
   1606c:	46bd      	mov	sp, r7
   1606e:	b003      	add	sp, #12
   16070:	bd90      	pop	{r4, r7, pc}
   16072:	46c0      	nop			; (mov r8, r8)
   16074:	00016f5d 	.word	0x00016f5d
   16078:	000164b5 	.word	0x000164b5
   1607c:	0003430c 	.word	0x0003430c
   16080:	00017605 	.word	0x00017605
   16084:	0003434c 	.word	0x0003434c
   16088:	20000b1c 	.word	0x20000b1c
   1608c:	00034380 	.word	0x00034380
   16090:	00016099 	.word	0x00016099
   16094:	000199c9 	.word	0x000199c9

00016098 <TzCtrl>:
   16098:	b580      	push	{r7, lr}
   1609a:	b082      	sub	sp, #8
   1609c:	af00      	add	r7, sp, #0
   1609e:	6078      	str	r0, [r7, #4]
   160a0:	4b04      	ldr	r3, [pc, #16]	; (160b4 <TzCtrl+0x1c>)
   160a2:	4798      	blx	r3
   160a4:	1e03      	subs	r3, r0, #0
   160a6:	d001      	beq.n	160ac <TzCtrl+0x14>
   160a8:	4b03      	ldr	r3, [pc, #12]	; (160b8 <TzCtrl+0x20>)
   160aa:	4798      	blx	r3
   160ac:	2004      	movs	r0, #4
   160ae:	4b03      	ldr	r3, [pc, #12]	; (160bc <TzCtrl+0x24>)
   160b0:	4798      	blx	r3
   160b2:	e7f5      	b.n	160a0 <TzCtrl+0x8>
   160b4:	000164f9 	.word	0x000164f9
   160b8:	00015f35 	.word	0x00015f35
   160bc:	00019d65 	.word	0x00019d65

000160c0 <vTraceInitObjectPropertyTable>:
   160c0:	b580      	push	{r7, lr}
   160c2:	af00      	add	r7, sp, #0
   160c4:	4b60      	ldr	r3, [pc, #384]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160c6:	681b      	ldr	r3, [r3, #0]
   160c8:	2209      	movs	r2, #9
   160ca:	65da      	str	r2, [r3, #92]	; 0x5c
   160cc:	4b5e      	ldr	r3, [pc, #376]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160ce:	681b      	ldr	r3, [r3, #0]
   160d0:	2264      	movs	r2, #100	; 0x64
   160d2:	210a      	movs	r1, #10
   160d4:	5499      	strb	r1, [r3, r2]
   160d6:	4b5c      	ldr	r3, [pc, #368]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160d8:	681b      	ldr	r3, [r3, #0]
   160da:	2265      	movs	r2, #101	; 0x65
   160dc:	210a      	movs	r1, #10
   160de:	5499      	strb	r1, [r3, r2]
   160e0:	4b59      	ldr	r3, [pc, #356]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160e2:	681b      	ldr	r3, [r3, #0]
   160e4:	2266      	movs	r2, #102	; 0x66
   160e6:	210a      	movs	r1, #10
   160e8:	5499      	strb	r1, [r3, r2]
   160ea:	4b57      	ldr	r3, [pc, #348]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160ec:	681b      	ldr	r3, [r3, #0]
   160ee:	2267      	movs	r2, #103	; 0x67
   160f0:	210f      	movs	r1, #15
   160f2:	5499      	strb	r1, [r3, r2]
   160f4:	4b54      	ldr	r3, [pc, #336]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   160f6:	681b      	ldr	r3, [r3, #0]
   160f8:	2268      	movs	r2, #104	; 0x68
   160fa:	2105      	movs	r1, #5
   160fc:	5499      	strb	r1, [r3, r2]
   160fe:	4b52      	ldr	r3, [pc, #328]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	2269      	movs	r2, #105	; 0x69
   16104:	2105      	movs	r1, #5
   16106:	5499      	strb	r1, [r3, r2]
   16108:	4b4f      	ldr	r3, [pc, #316]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1610a:	681b      	ldr	r3, [r3, #0]
   1610c:	226a      	movs	r2, #106	; 0x6a
   1610e:	2105      	movs	r1, #5
   16110:	5499      	strb	r1, [r3, r2]
   16112:	4b4d      	ldr	r3, [pc, #308]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16114:	681b      	ldr	r3, [r3, #0]
   16116:	226b      	movs	r2, #107	; 0x6b
   16118:	2105      	movs	r1, #5
   1611a:	5499      	strb	r1, [r3, r2]
   1611c:	4b4a      	ldr	r3, [pc, #296]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1611e:	681b      	ldr	r3, [r3, #0]
   16120:	226c      	movs	r2, #108	; 0x6c
   16122:	2105      	movs	r1, #5
   16124:	5499      	strb	r1, [r3, r2]
   16126:	4b48      	ldr	r3, [pc, #288]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16128:	681b      	ldr	r3, [r3, #0]
   1612a:	2270      	movs	r2, #112	; 0x70
   1612c:	210f      	movs	r1, #15
   1612e:	5499      	strb	r1, [r3, r2]
   16130:	4b45      	ldr	r3, [pc, #276]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16132:	681b      	ldr	r3, [r3, #0]
   16134:	2271      	movs	r2, #113	; 0x71
   16136:	210f      	movs	r1, #15
   16138:	5499      	strb	r1, [r3, r2]
   1613a:	4b43      	ldr	r3, [pc, #268]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1613c:	681b      	ldr	r3, [r3, #0]
   1613e:	2272      	movs	r2, #114	; 0x72
   16140:	210f      	movs	r1, #15
   16142:	5499      	strb	r1, [r3, r2]
   16144:	4b40      	ldr	r3, [pc, #256]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16146:	681b      	ldr	r3, [r3, #0]
   16148:	2273      	movs	r2, #115	; 0x73
   1614a:	210f      	movs	r1, #15
   1614c:	5499      	strb	r1, [r3, r2]
   1614e:	4b3e      	ldr	r3, [pc, #248]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	2274      	movs	r2, #116	; 0x74
   16154:	210f      	movs	r1, #15
   16156:	5499      	strb	r1, [r3, r2]
   16158:	4b3b      	ldr	r3, [pc, #236]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1615a:	681b      	ldr	r3, [r3, #0]
   1615c:	2275      	movs	r2, #117	; 0x75
   1615e:	210f      	movs	r1, #15
   16160:	5499      	strb	r1, [r3, r2]
   16162:	4b39      	ldr	r3, [pc, #228]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16164:	681b      	ldr	r3, [r3, #0]
   16166:	2276      	movs	r2, #118	; 0x76
   16168:	210f      	movs	r1, #15
   1616a:	5499      	strb	r1, [r3, r2]
   1616c:	4b36      	ldr	r3, [pc, #216]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1616e:	681b      	ldr	r3, [r3, #0]
   16170:	2277      	movs	r2, #119	; 0x77
   16172:	210f      	movs	r1, #15
   16174:	5499      	strb	r1, [r3, r2]
   16176:	4b34      	ldr	r3, [pc, #208]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16178:	681b      	ldr	r3, [r3, #0]
   1617a:	2278      	movs	r2, #120	; 0x78
   1617c:	210f      	movs	r1, #15
   1617e:	5499      	strb	r1, [r3, r2]
   16180:	4b31      	ldr	r3, [pc, #196]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16182:	681b      	ldr	r3, [r3, #0]
   16184:	227c      	movs	r2, #124	; 0x7c
   16186:	2110      	movs	r1, #16
   16188:	5499      	strb	r1, [r3, r2]
   1618a:	4b2f      	ldr	r3, [pc, #188]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1618c:	681b      	ldr	r3, [r3, #0]
   1618e:	227d      	movs	r2, #125	; 0x7d
   16190:	2110      	movs	r1, #16
   16192:	5499      	strb	r1, [r3, r2]
   16194:	4b2c      	ldr	r3, [pc, #176]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16196:	681b      	ldr	r3, [r3, #0]
   16198:	227e      	movs	r2, #126	; 0x7e
   1619a:	2110      	movs	r1, #16
   1619c:	5499      	strb	r1, [r3, r2]
   1619e:	4b2a      	ldr	r3, [pc, #168]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161a0:	681b      	ldr	r3, [r3, #0]
   161a2:	227f      	movs	r2, #127	; 0x7f
   161a4:	2113      	movs	r1, #19
   161a6:	5499      	strb	r1, [r3, r2]
   161a8:	4b27      	ldr	r3, [pc, #156]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161aa:	681b      	ldr	r3, [r3, #0]
   161ac:	2280      	movs	r2, #128	; 0x80
   161ae:	2111      	movs	r1, #17
   161b0:	5499      	strb	r1, [r3, r2]
   161b2:	4b25      	ldr	r3, [pc, #148]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161b4:	681b      	ldr	r3, [r3, #0]
   161b6:	2281      	movs	r2, #129	; 0x81
   161b8:	2110      	movs	r1, #16
   161ba:	5499      	strb	r1, [r3, r2]
   161bc:	4b22      	ldr	r3, [pc, #136]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161be:	681b      	ldr	r3, [r3, #0]
   161c0:	2282      	movs	r2, #130	; 0x82
   161c2:	2113      	movs	r1, #19
   161c4:	5499      	strb	r1, [r3, r2]
   161c6:	4b20      	ldr	r3, [pc, #128]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161c8:	681b      	ldr	r3, [r3, #0]
   161ca:	2283      	movs	r2, #131	; 0x83
   161cc:	2113      	movs	r1, #19
   161ce:	5499      	strb	r1, [r3, r2]
   161d0:	4b1d      	ldr	r3, [pc, #116]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161d2:	681b      	ldr	r3, [r3, #0]
   161d4:	2284      	movs	r2, #132	; 0x84
   161d6:	2113      	movs	r1, #19
   161d8:	5499      	strb	r1, [r3, r2]
   161da:	4b1b      	ldr	r3, [pc, #108]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161dc:	681b      	ldr	r3, [r3, #0]
   161de:	2288      	movs	r2, #136	; 0x88
   161e0:	2100      	movs	r1, #0
   161e2:	5299      	strh	r1, [r3, r2]
   161e4:	4b18      	ldr	r3, [pc, #96]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161e6:	681b      	ldr	r3, [r3, #0]
   161e8:	228a      	movs	r2, #138	; 0x8a
   161ea:	21a0      	movs	r1, #160	; 0xa0
   161ec:	5299      	strh	r1, [r3, r2]
   161ee:	4b16      	ldr	r3, [pc, #88]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161f0:	681b      	ldr	r3, [r3, #0]
   161f2:	228c      	movs	r2, #140	; 0x8c
   161f4:	21a0      	movs	r1, #160	; 0xa0
   161f6:	0049      	lsls	r1, r1, #1
   161f8:	5299      	strh	r1, [r3, r2]
   161fa:	4b13      	ldr	r3, [pc, #76]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   161fc:	681b      	ldr	r3, [r3, #0]
   161fe:	228e      	movs	r2, #142	; 0x8e
   16200:	21f0      	movs	r1, #240	; 0xf0
   16202:	0049      	lsls	r1, r1, #1
   16204:	5299      	strh	r1, [r3, r2]
   16206:	4b10      	ldr	r3, [pc, #64]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16208:	681b      	ldr	r3, [r3, #0]
   1620a:	2290      	movs	r2, #144	; 0x90
   1620c:	490f      	ldr	r1, [pc, #60]	; (1624c <vTraceInitObjectPropertyTable+0x18c>)
   1620e:	5299      	strh	r1, [r3, r2]
   16210:	4b0d      	ldr	r3, [pc, #52]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16212:	681b      	ldr	r3, [r3, #0]
   16214:	2292      	movs	r2, #146	; 0x92
   16216:	490e      	ldr	r1, [pc, #56]	; (16250 <vTraceInitObjectPropertyTable+0x190>)
   16218:	5299      	strh	r1, [r3, r2]
   1621a:	4b0b      	ldr	r3, [pc, #44]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1621c:	681b      	ldr	r3, [r3, #0]
   1621e:	2294      	movs	r2, #148	; 0x94
   16220:	490c      	ldr	r1, [pc, #48]	; (16254 <vTraceInitObjectPropertyTable+0x194>)
   16222:	5299      	strh	r1, [r3, r2]
   16224:	4b08      	ldr	r3, [pc, #32]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16226:	681b      	ldr	r3, [r3, #0]
   16228:	2296      	movs	r2, #150	; 0x96
   1622a:	490b      	ldr	r1, [pc, #44]	; (16258 <vTraceInitObjectPropertyTable+0x198>)
   1622c:	5299      	strh	r1, [r3, r2]
   1622e:	4b06      	ldr	r3, [pc, #24]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   16230:	681b      	ldr	r3, [r3, #0]
   16232:	2298      	movs	r2, #152	; 0x98
   16234:	218c      	movs	r1, #140	; 0x8c
   16236:	00c9      	lsls	r1, r1, #3
   16238:	5299      	strh	r1, [r3, r2]
   1623a:	4b03      	ldr	r3, [pc, #12]	; (16248 <vTraceInitObjectPropertyTable+0x188>)
   1623c:	681b      	ldr	r3, [r3, #0]
   1623e:	4a07      	ldr	r2, [pc, #28]	; (1625c <vTraceInitObjectPropertyTable+0x19c>)
   16240:	661a      	str	r2, [r3, #96]	; 0x60
   16242:	46c0      	nop			; (mov r8, r8)
   16244:	46bd      	mov	sp, r7
   16246:	bd80      	pop	{r7, pc}
   16248:	20000c34 	.word	0x20000c34
   1624c:	000002fd 	.word	0x000002fd
   16250:	00000352 	.word	0x00000352
   16254:	000003a2 	.word	0x000003a2
   16258:	00000401 	.word	0x00000401
   1625c:	000004bf 	.word	0x000004bf

00016260 <vTraceInitObjectHandleStack>:
   16260:	b580      	push	{r7, lr}
   16262:	af00      	add	r7, sp, #0
   16264:	4b2e      	ldr	r3, [pc, #184]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16266:	2200      	movs	r2, #0
   16268:	825a      	strh	r2, [r3, #18]
   1626a:	4b2d      	ldr	r3, [pc, #180]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1626c:	8a5a      	ldrh	r2, [r3, #18]
   1626e:	4b2c      	ldr	r3, [pc, #176]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16270:	801a      	strh	r2, [r3, #0]
   16272:	4b2b      	ldr	r3, [pc, #172]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16274:	220a      	movs	r2, #10
   16276:	829a      	strh	r2, [r3, #20]
   16278:	4b29      	ldr	r3, [pc, #164]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1627a:	8a9a      	ldrh	r2, [r3, #20]
   1627c:	4b28      	ldr	r3, [pc, #160]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1627e:	805a      	strh	r2, [r3, #2]
   16280:	4b27      	ldr	r3, [pc, #156]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16282:	2214      	movs	r2, #20
   16284:	82da      	strh	r2, [r3, #22]
   16286:	4b26      	ldr	r3, [pc, #152]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16288:	8ada      	ldrh	r2, [r3, #22]
   1628a:	4b25      	ldr	r3, [pc, #148]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1628c:	809a      	strh	r2, [r3, #4]
   1628e:	4b24      	ldr	r3, [pc, #144]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16290:	221e      	movs	r2, #30
   16292:	831a      	strh	r2, [r3, #24]
   16294:	4b22      	ldr	r3, [pc, #136]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16296:	8b1a      	ldrh	r2, [r3, #24]
   16298:	4b21      	ldr	r3, [pc, #132]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1629a:	80da      	strh	r2, [r3, #6]
   1629c:	4b20      	ldr	r3, [pc, #128]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1629e:	222d      	movs	r2, #45	; 0x2d
   162a0:	835a      	strh	r2, [r3, #26]
   162a2:	4b1f      	ldr	r3, [pc, #124]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162a4:	8b5a      	ldrh	r2, [r3, #26]
   162a6:	4b1e      	ldr	r3, [pc, #120]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162a8:	811a      	strh	r2, [r3, #8]
   162aa:	4b1d      	ldr	r3, [pc, #116]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162ac:	2232      	movs	r2, #50	; 0x32
   162ae:	839a      	strh	r2, [r3, #28]
   162b0:	4b1b      	ldr	r3, [pc, #108]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162b2:	8b9a      	ldrh	r2, [r3, #28]
   162b4:	4b1a      	ldr	r3, [pc, #104]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162b6:	815a      	strh	r2, [r3, #10]
   162b8:	4b19      	ldr	r3, [pc, #100]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162ba:	2237      	movs	r2, #55	; 0x37
   162bc:	83da      	strh	r2, [r3, #30]
   162be:	4b18      	ldr	r3, [pc, #96]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162c0:	8bda      	ldrh	r2, [r3, #30]
   162c2:	4b17      	ldr	r3, [pc, #92]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162c4:	819a      	strh	r2, [r3, #12]
   162c6:	4b16      	ldr	r3, [pc, #88]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162c8:	223c      	movs	r2, #60	; 0x3c
   162ca:	841a      	strh	r2, [r3, #32]
   162cc:	4b14      	ldr	r3, [pc, #80]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162ce:	8c1a      	ldrh	r2, [r3, #32]
   162d0:	4b13      	ldr	r3, [pc, #76]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162d2:	81da      	strh	r2, [r3, #14]
   162d4:	4b12      	ldr	r3, [pc, #72]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162d6:	2241      	movs	r2, #65	; 0x41
   162d8:	845a      	strh	r2, [r3, #34]	; 0x22
   162da:	4b11      	ldr	r3, [pc, #68]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162dc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   162de:	4b10      	ldr	r3, [pc, #64]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162e0:	821a      	strh	r2, [r3, #16]
   162e2:	4b0f      	ldr	r3, [pc, #60]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162e4:	2209      	movs	r2, #9
   162e6:	849a      	strh	r2, [r3, #36]	; 0x24
   162e8:	4b0d      	ldr	r3, [pc, #52]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162ea:	2213      	movs	r2, #19
   162ec:	84da      	strh	r2, [r3, #38]	; 0x26
   162ee:	4b0c      	ldr	r3, [pc, #48]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162f0:	221d      	movs	r2, #29
   162f2:	851a      	strh	r2, [r3, #40]	; 0x28
   162f4:	4b0a      	ldr	r3, [pc, #40]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162f6:	222c      	movs	r2, #44	; 0x2c
   162f8:	855a      	strh	r2, [r3, #42]	; 0x2a
   162fa:	4b09      	ldr	r3, [pc, #36]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   162fc:	2231      	movs	r2, #49	; 0x31
   162fe:	859a      	strh	r2, [r3, #44]	; 0x2c
   16300:	4b07      	ldr	r3, [pc, #28]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16302:	2236      	movs	r2, #54	; 0x36
   16304:	85da      	strh	r2, [r3, #46]	; 0x2e
   16306:	4b06      	ldr	r3, [pc, #24]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16308:	223b      	movs	r2, #59	; 0x3b
   1630a:	861a      	strh	r2, [r3, #48]	; 0x30
   1630c:	4b04      	ldr	r3, [pc, #16]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   1630e:	2240      	movs	r2, #64	; 0x40
   16310:	865a      	strh	r2, [r3, #50]	; 0x32
   16312:	4b03      	ldr	r3, [pc, #12]	; (16320 <vTraceInitObjectHandleStack+0xc0>)
   16314:	2245      	movs	r2, #69	; 0x45
   16316:	869a      	strh	r2, [r3, #52]	; 0x34
   16318:	46c0      	nop			; (mov r8, r8)
   1631a:	46bd      	mov	sp, r7
   1631c:	bd80      	pop	{r7, pc}
   1631e:	46c0      	nop			; (mov r8, r8)
   16320:	20000ba4 	.word	0x20000ba4

00016324 <pszTraceGetErrorNotEnoughHandles>:
   16324:	b580      	push	{r7, lr}
   16326:	b082      	sub	sp, #8
   16328:	af00      	add	r7, sp, #0
   1632a:	0002      	movs	r2, r0
   1632c:	1dfb      	adds	r3, r7, #7
   1632e:	701a      	strb	r2, [r3, #0]
   16330:	1dfb      	adds	r3, r7, #7
   16332:	781b      	ldrb	r3, [r3, #0]
   16334:	2b08      	cmp	r3, #8
   16336:	d816      	bhi.n	16366 <pszTraceGetErrorNotEnoughHandles+0x42>
   16338:	009a      	lsls	r2, r3, #2
   1633a:	4b0d      	ldr	r3, [pc, #52]	; (16370 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1633c:	18d3      	adds	r3, r2, r3
   1633e:	681b      	ldr	r3, [r3, #0]
   16340:	469f      	mov	pc, r3
   16342:	4b0c      	ldr	r3, [pc, #48]	; (16374 <pszTraceGetErrorNotEnoughHandles+0x50>)
   16344:	e010      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   16346:	4b0c      	ldr	r3, [pc, #48]	; (16378 <pszTraceGetErrorNotEnoughHandles+0x54>)
   16348:	e00e      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   1634a:	4b0c      	ldr	r3, [pc, #48]	; (1637c <pszTraceGetErrorNotEnoughHandles+0x58>)
   1634c:	e00c      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   1634e:	4b0c      	ldr	r3, [pc, #48]	; (16380 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   16350:	e00a      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   16352:	4b0c      	ldr	r3, [pc, #48]	; (16384 <pszTraceGetErrorNotEnoughHandles+0x60>)
   16354:	e008      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   16356:	4b0c      	ldr	r3, [pc, #48]	; (16388 <pszTraceGetErrorNotEnoughHandles+0x64>)
   16358:	e006      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   1635a:	4b0c      	ldr	r3, [pc, #48]	; (1638c <pszTraceGetErrorNotEnoughHandles+0x68>)
   1635c:	e004      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   1635e:	4b0c      	ldr	r3, [pc, #48]	; (16390 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   16360:	e002      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   16362:	4b0c      	ldr	r3, [pc, #48]	; (16394 <pszTraceGetErrorNotEnoughHandles+0x70>)
   16364:	e000      	b.n	16368 <pszTraceGetErrorNotEnoughHandles+0x44>
   16366:	4b0c      	ldr	r3, [pc, #48]	; (16398 <pszTraceGetErrorNotEnoughHandles+0x74>)
   16368:	0018      	movs	r0, r3
   1636a:	46bd      	mov	sp, r7
   1636c:	b002      	add	sp, #8
   1636e:	bd80      	pop	{r7, pc}
   16370:	00034688 	.word	0x00034688
   16374:	00034388 	.word	0x00034388
   16378:	000343d0 	.word	0x000343d0
   1637c:	00034418 	.word	0x00034418
   16380:	0003446c 	.word	0x0003446c
   16384:	000344b8 	.word	0x000344b8
   16388:	00034504 	.word	0x00034504
   1638c:	00034550 	.word	0x00034550
   16390:	000345a4 	.word	0x000345a4
   16394:	000345fc 	.word	0x000345fc
   16398:	00034658 	.word	0x00034658

0001639c <uiTraceStart>:
   1639c:	b590      	push	{r4, r7, lr}
   1639e:	b087      	sub	sp, #28
   163a0:	af00      	add	r7, sp, #0
   163a2:	2317      	movs	r3, #23
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	2200      	movs	r2, #0
   163a8:	701a      	strb	r2, [r3, #0]
   163aa:	4b36      	ldr	r3, [pc, #216]	; (16484 <uiTraceStart+0xe8>)
   163ac:	681b      	ldr	r3, [r3, #0]
   163ae:	2b00      	cmp	r3, #0
   163b0:	d10b      	bne.n	163ca <uiTraceStart+0x2e>
   163b2:	4b34      	ldr	r3, [pc, #208]	; (16484 <uiTraceStart+0xe8>)
   163b4:	681b      	ldr	r3, [r3, #0]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d105      	bne.n	163c6 <uiTraceStart+0x2a>
   163ba:	4b33      	ldr	r3, [pc, #204]	; (16488 <uiTraceStart+0xec>)
   163bc:	0018      	movs	r0, r3
   163be:	4b33      	ldr	r3, [pc, #204]	; (1648c <uiTraceStart+0xf0>)
   163c0:	4798      	blx	r3
   163c2:	2300      	movs	r3, #0
   163c4:	e059      	b.n	1647a <uiTraceStart+0xde>
   163c6:	2300      	movs	r3, #0
   163c8:	e057      	b.n	1647a <uiTraceStart+0xde>
   163ca:	4b2e      	ldr	r3, [pc, #184]	; (16484 <uiTraceStart+0xe8>)
   163cc:	681b      	ldr	r3, [r3, #0]
   163ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163d0:	2b01      	cmp	r3, #1
   163d2:	d101      	bne.n	163d8 <uiTraceStart+0x3c>
   163d4:	2301      	movs	r3, #1
   163d6:	e050      	b.n	1647a <uiTraceStart+0xde>
   163d8:	4b2d      	ldr	r3, [pc, #180]	; (16490 <uiTraceStart+0xf4>)
   163da:	681b      	ldr	r3, [r3, #0]
   163dc:	2b00      	cmp	r3, #0
   163de:	d149      	bne.n	16474 <uiTraceStart+0xd8>
   163e0:	f3ef 8310 	mrs	r3, PRIMASK
   163e4:	60bb      	str	r3, [r7, #8]
   163e6:	68bb      	ldr	r3, [r7, #8]
   163e8:	613b      	str	r3, [r7, #16]
   163ea:	2301      	movs	r3, #1
   163ec:	60fb      	str	r3, [r7, #12]
   163ee:	68fb      	ldr	r3, [r7, #12]
   163f0:	f383 8810 	msr	PRIMASK, r3
   163f4:	4b27      	ldr	r3, [pc, #156]	; (16494 <uiTraceStart+0xf8>)
   163f6:	681b      	ldr	r3, [r3, #0]
   163f8:	1c5a      	adds	r2, r3, #1
   163fa:	4b26      	ldr	r3, [pc, #152]	; (16494 <uiTraceStart+0xf8>)
   163fc:	601a      	str	r2, [r3, #0]
   163fe:	4b21      	ldr	r3, [pc, #132]	; (16484 <uiTraceStart+0xe8>)
   16400:	681b      	ldr	r3, [r3, #0]
   16402:	2201      	movs	r2, #1
   16404:	631a      	str	r2, [r3, #48]	; 0x30
   16406:	4b24      	ldr	r3, [pc, #144]	; (16498 <uiTraceStart+0xfc>)
   16408:	4798      	blx	r3
   1640a:	0003      	movs	r3, r0
   1640c:	0018      	movs	r0, r3
   1640e:	4b23      	ldr	r3, [pc, #140]	; (1649c <uiTraceStart+0x100>)
   16410:	4798      	blx	r3
   16412:	0003      	movs	r3, r0
   16414:	001a      	movs	r2, r3
   16416:	2317      	movs	r3, #23
   16418:	18fb      	adds	r3, r7, r3
   1641a:	701a      	strb	r2, [r3, #0]
   1641c:	2317      	movs	r3, #23
   1641e:	18fb      	adds	r3, r7, r3
   16420:	781b      	ldrb	r3, [r3, #0]
   16422:	2b00      	cmp	r3, #0
   16424:	d116      	bne.n	16454 <uiTraceStart+0xb8>
   16426:	2317      	movs	r3, #23
   16428:	18fc      	adds	r4, r7, r3
   1642a:	2003      	movs	r0, #3
   1642c:	4b1c      	ldr	r3, [pc, #112]	; (164a0 <uiTraceStart+0x104>)
   1642e:	4798      	blx	r3
   16430:	0003      	movs	r3, r0
   16432:	7023      	strb	r3, [r4, #0]
   16434:	4a1b      	ldr	r2, [pc, #108]	; (164a4 <uiTraceStart+0x108>)
   16436:	2317      	movs	r3, #23
   16438:	18fb      	adds	r3, r7, r3
   1643a:	781b      	ldrb	r3, [r3, #0]
   1643c:	0019      	movs	r1, r3
   1643e:	2003      	movs	r0, #3
   16440:	4b19      	ldr	r3, [pc, #100]	; (164a8 <uiTraceStart+0x10c>)
   16442:	4798      	blx	r3
   16444:	2317      	movs	r3, #23
   16446:	18fb      	adds	r3, r7, r3
   16448:	781b      	ldrb	r3, [r3, #0]
   1644a:	2200      	movs	r2, #0
   1644c:	0019      	movs	r1, r3
   1644e:	2003      	movs	r0, #3
   16450:	4b16      	ldr	r3, [pc, #88]	; (164ac <uiTraceStart+0x110>)
   16452:	4798      	blx	r3
   16454:	2317      	movs	r3, #23
   16456:	18fb      	adds	r3, r7, r3
   16458:	781b      	ldrb	r3, [r3, #0]
   1645a:	0018      	movs	r0, r3
   1645c:	4b14      	ldr	r3, [pc, #80]	; (164b0 <uiTraceStart+0x114>)
   1645e:	4798      	blx	r3
   16460:	4b0c      	ldr	r3, [pc, #48]	; (16494 <uiTraceStart+0xf8>)
   16462:	681b      	ldr	r3, [r3, #0]
   16464:	1e5a      	subs	r2, r3, #1
   16466:	4b0b      	ldr	r3, [pc, #44]	; (16494 <uiTraceStart+0xf8>)
   16468:	601a      	str	r2, [r3, #0]
   1646a:	693b      	ldr	r3, [r7, #16]
   1646c:	607b      	str	r3, [r7, #4]
   1646e:	687b      	ldr	r3, [r7, #4]
   16470:	f383 8810 	msr	PRIMASK, r3
   16474:	4b03      	ldr	r3, [pc, #12]	; (16484 <uiTraceStart+0xe8>)
   16476:	681b      	ldr	r3, [r3, #0]
   16478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1647a:	0018      	movs	r0, r3
   1647c:	46bd      	mov	sp, r7
   1647e:	b007      	add	sp, #28
   16480:	bd90      	pop	{r4, r7, pc}
   16482:	46c0      	nop			; (mov r8, r8)
   16484:	20000c34 	.word	0x20000c34
   16488:	000346ac 	.word	0x000346ac
   1648c:	00017605 	.word	0x00017605
   16490:	20000b94 	.word	0x20000b94
   16494:	20000b8c 	.word	0x20000b8c
   16498:	00016005 	.word	0x00016005
   1649c:	00015d49 	.word	0x00015d49
   164a0:	000172e9 	.word	0x000172e9
   164a4:	000346f0 	.word	0x000346f0
   164a8:	00017519 	.word	0x00017519
   164ac:	00016c7d 	.word	0x00016c7d
   164b0:	00016b65 	.word	0x00016b65

000164b4 <vTraceStart>:
   164b4:	b580      	push	{r7, lr}
   164b6:	af00      	add	r7, sp, #0
   164b8:	4b02      	ldr	r3, [pc, #8]	; (164c4 <vTraceStart+0x10>)
   164ba:	4798      	blx	r3
   164bc:	46c0      	nop			; (mov r8, r8)
   164be:	46bd      	mov	sp, r7
   164c0:	bd80      	pop	{r7, pc}
   164c2:	46c0      	nop			; (mov r8, r8)
   164c4:	0001639d 	.word	0x0001639d

000164c8 <vTraceStop>:
   164c8:	b580      	push	{r7, lr}
   164ca:	af00      	add	r7, sp, #0
   164cc:	4b08      	ldr	r3, [pc, #32]	; (164f0 <vTraceStop+0x28>)
   164ce:	681b      	ldr	r3, [r3, #0]
   164d0:	2b00      	cmp	r3, #0
   164d2:	d003      	beq.n	164dc <vTraceStop+0x14>
   164d4:	4b06      	ldr	r3, [pc, #24]	; (164f0 <vTraceStop+0x28>)
   164d6:	681b      	ldr	r3, [r3, #0]
   164d8:	2200      	movs	r2, #0
   164da:	631a      	str	r2, [r3, #48]	; 0x30
   164dc:	4b05      	ldr	r3, [pc, #20]	; (164f4 <vTraceStop+0x2c>)
   164de:	681b      	ldr	r3, [r3, #0]
   164e0:	2b00      	cmp	r3, #0
   164e2:	d002      	beq.n	164ea <vTraceStop+0x22>
   164e4:	4b03      	ldr	r3, [pc, #12]	; (164f4 <vTraceStop+0x2c>)
   164e6:	681b      	ldr	r3, [r3, #0]
   164e8:	4798      	blx	r3
   164ea:	46c0      	nop			; (mov r8, r8)
   164ec:	46bd      	mov	sp, r7
   164ee:	bd80      	pop	{r7, pc}
   164f0:	20000c34 	.word	0x20000c34
   164f4:	20000b9c 	.word	0x20000b9c

000164f8 <xTraceIsRecordingEnabled>:
   164f8:	b580      	push	{r7, lr}
   164fa:	af00      	add	r7, sp, #0
   164fc:	4b05      	ldr	r3, [pc, #20]	; (16514 <xTraceIsRecordingEnabled+0x1c>)
   164fe:	681b      	ldr	r3, [r3, #0]
   16500:	2b00      	cmp	r3, #0
   16502:	d003      	beq.n	1650c <xTraceIsRecordingEnabled+0x14>
   16504:	4b03      	ldr	r3, [pc, #12]	; (16514 <xTraceIsRecordingEnabled+0x1c>)
   16506:	681b      	ldr	r3, [r3, #0]
   16508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1650a:	e000      	b.n	1650e <xTraceIsRecordingEnabled+0x16>
   1650c:	2300      	movs	r3, #0
   1650e:	0018      	movs	r0, r3
   16510:	46bd      	mov	sp, r7
   16512:	bd80      	pop	{r7, pc}
   16514:	20000c34 	.word	0x20000c34

00016518 <prvTraceStoreTaskReady>:
   16518:	b590      	push	{r4, r7, lr}
   1651a:	b089      	sub	sp, #36	; 0x24
   1651c:	af00      	add	r7, sp, #0
   1651e:	0002      	movs	r2, r0
   16520:	1dfb      	adds	r3, r7, #7
   16522:	701a      	strb	r2, [r3, #0]
   16524:	1dfb      	adds	r3, r7, #7
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	2b00      	cmp	r3, #0
   1652a:	d057      	beq.n	165dc <prvTraceStoreTaskReady+0xc4>
   1652c:	4b2e      	ldr	r3, [pc, #184]	; (165e8 <prvTraceStoreTaskReady+0xd0>)
   1652e:	681b      	ldr	r3, [r3, #0]
   16530:	2b00      	cmp	r3, #0
   16532:	d055      	beq.n	165e0 <prvTraceStoreTaskReady+0xc8>
   16534:	1dfb      	adds	r3, r7, #7
   16536:	781b      	ldrb	r3, [r3, #0]
   16538:	2b0f      	cmp	r3, #15
   1653a:	d904      	bls.n	16546 <prvTraceStoreTaskReady+0x2e>
   1653c:	4b2b      	ldr	r3, [pc, #172]	; (165ec <prvTraceStoreTaskReady+0xd4>)
   1653e:	0018      	movs	r0, r3
   16540:	4b2b      	ldr	r3, [pc, #172]	; (165f0 <prvTraceStoreTaskReady+0xd8>)
   16542:	4798      	blx	r3
   16544:	e04d      	b.n	165e2 <prvTraceStoreTaskReady+0xca>
   16546:	4b2b      	ldr	r3, [pc, #172]	; (165f4 <prvTraceStoreTaskReady+0xdc>)
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	2b00      	cmp	r3, #0
   1654c:	d004      	beq.n	16558 <prvTraceStoreTaskReady+0x40>
   1654e:	4b2a      	ldr	r3, [pc, #168]	; (165f8 <prvTraceStoreTaskReady+0xe0>)
   16550:	0018      	movs	r0, r3
   16552:	4b27      	ldr	r3, [pc, #156]	; (165f0 <prvTraceStoreTaskReady+0xd8>)
   16554:	4798      	blx	r3
   16556:	e044      	b.n	165e2 <prvTraceStoreTaskReady+0xca>
   16558:	f3ef 8310 	mrs	r3, PRIMASK
   1655c:	60fb      	str	r3, [r7, #12]
   1655e:	68fb      	ldr	r3, [r7, #12]
   16560:	61fb      	str	r3, [r7, #28]
   16562:	2301      	movs	r3, #1
   16564:	613b      	str	r3, [r7, #16]
   16566:	693b      	ldr	r3, [r7, #16]
   16568:	f383 8810 	msr	PRIMASK, r3
   1656c:	4b21      	ldr	r3, [pc, #132]	; (165f4 <prvTraceStoreTaskReady+0xdc>)
   1656e:	681b      	ldr	r3, [r3, #0]
   16570:	1c5a      	adds	r2, r3, #1
   16572:	4b20      	ldr	r3, [pc, #128]	; (165f4 <prvTraceStoreTaskReady+0xdc>)
   16574:	601a      	str	r2, [r3, #0]
   16576:	4b21      	ldr	r3, [pc, #132]	; (165fc <prvTraceStoreTaskReady+0xe4>)
   16578:	681b      	ldr	r3, [r3, #0]
   1657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1657c:	2b00      	cmp	r3, #0
   1657e:	d022      	beq.n	165c6 <prvTraceStoreTaskReady+0xae>
   16580:	231a      	movs	r3, #26
   16582:	18fc      	adds	r4, r7, r3
   16584:	4b1e      	ldr	r3, [pc, #120]	; (16600 <prvTraceStoreTaskReady+0xe8>)
   16586:	0018      	movs	r0, r3
   16588:	4b1e      	ldr	r3, [pc, #120]	; (16604 <prvTraceStoreTaskReady+0xec>)
   1658a:	4798      	blx	r3
   1658c:	0003      	movs	r3, r0
   1658e:	8023      	strh	r3, [r4, #0]
   16590:	2319      	movs	r3, #25
   16592:	18fb      	adds	r3, r7, r3
   16594:	1dfa      	adds	r2, r7, #7
   16596:	7812      	ldrb	r2, [r2, #0]
   16598:	701a      	strb	r2, [r3, #0]
   1659a:	4b1b      	ldr	r3, [pc, #108]	; (16608 <prvTraceStoreTaskReady+0xf0>)
   1659c:	4798      	blx	r3
   1659e:	0003      	movs	r3, r0
   165a0:	617b      	str	r3, [r7, #20]
   165a2:	697b      	ldr	r3, [r7, #20]
   165a4:	2b00      	cmp	r3, #0
   165a6:	d00e      	beq.n	165c6 <prvTraceStoreTaskReady+0xae>
   165a8:	697b      	ldr	r3, [r7, #20]
   165aa:	2202      	movs	r2, #2
   165ac:	701a      	strb	r2, [r3, #0]
   165ae:	697b      	ldr	r3, [r7, #20]
   165b0:	221a      	movs	r2, #26
   165b2:	18ba      	adds	r2, r7, r2
   165b4:	8812      	ldrh	r2, [r2, #0]
   165b6:	805a      	strh	r2, [r3, #2]
   165b8:	697b      	ldr	r3, [r7, #20]
   165ba:	2219      	movs	r2, #25
   165bc:	18ba      	adds	r2, r7, r2
   165be:	7812      	ldrb	r2, [r2, #0]
   165c0:	705a      	strb	r2, [r3, #1]
   165c2:	4b12      	ldr	r3, [pc, #72]	; (1660c <prvTraceStoreTaskReady+0xf4>)
   165c4:	4798      	blx	r3
   165c6:	4b0b      	ldr	r3, [pc, #44]	; (165f4 <prvTraceStoreTaskReady+0xdc>)
   165c8:	681b      	ldr	r3, [r3, #0]
   165ca:	1e5a      	subs	r2, r3, #1
   165cc:	4b09      	ldr	r3, [pc, #36]	; (165f4 <prvTraceStoreTaskReady+0xdc>)
   165ce:	601a      	str	r2, [r3, #0]
   165d0:	69fb      	ldr	r3, [r7, #28]
   165d2:	60bb      	str	r3, [r7, #8]
   165d4:	68bb      	ldr	r3, [r7, #8]
   165d6:	f383 8810 	msr	PRIMASK, r3
   165da:	e002      	b.n	165e2 <prvTraceStoreTaskReady+0xca>
   165dc:	46c0      	nop			; (mov r8, r8)
   165de:	e000      	b.n	165e2 <prvTraceStoreTaskReady+0xca>
   165e0:	46c0      	nop			; (mov r8, r8)
   165e2:	46bd      	mov	sp, r7
   165e4:	b009      	add	sp, #36	; 0x24
   165e6:	bd90      	pop	{r4, r7, pc}
   165e8:	200000ec 	.word	0x200000ec
   165ec:	00034a58 	.word	0x00034a58
   165f0:	00017605 	.word	0x00017605
   165f4:	20000b8c 	.word	0x20000b8c
   165f8:	00034a98 	.word	0x00034a98
   165fc:	20000c34 	.word	0x20000c34
   16600:	0000ffff 	.word	0x0000ffff
   16604:	00017819 	.word	0x00017819
   16608:	000171bd 	.word	0x000171bd
   1660c:	000177c1 	.word	0x000177c1

00016610 <vTraceStoreMemMangEvent>:
   16610:	b580      	push	{r7, lr}
   16612:	b08e      	sub	sp, #56	; 0x38
   16614:	af00      	add	r7, sp, #0
   16616:	60f8      	str	r0, [r7, #12]
   16618:	60b9      	str	r1, [r7, #8]
   1661a:	607a      	str	r2, [r7, #4]
   1661c:	4b48      	ldr	r3, [pc, #288]	; (16740 <vTraceStoreMemMangEvent+0x130>)
   1661e:	681b      	ldr	r3, [r3, #0]
   16620:	2b00      	cmp	r3, #0
   16622:	d100      	bne.n	16626 <vTraceStoreMemMangEvent+0x16>
   16624:	e088      	b.n	16738 <vTraceStoreMemMangEvent+0x128>
   16626:	687b      	ldr	r3, [r7, #4]
   16628:	2b00      	cmp	r3, #0
   1662a:	da03      	bge.n	16634 <vTraceStoreMemMangEvent+0x24>
   1662c:	687b      	ldr	r3, [r7, #4]
   1662e:	425b      	negs	r3, r3
   16630:	637b      	str	r3, [r7, #52]	; 0x34
   16632:	e001      	b.n	16638 <vTraceStoreMemMangEvent+0x28>
   16634:	687b      	ldr	r3, [r7, #4]
   16636:	637b      	str	r3, [r7, #52]	; 0x34
   16638:	f3ef 8310 	mrs	r3, PRIMASK
   1663c:	61bb      	str	r3, [r7, #24]
   1663e:	69bb      	ldr	r3, [r7, #24]
   16640:	633b      	str	r3, [r7, #48]	; 0x30
   16642:	2301      	movs	r3, #1
   16644:	61fb      	str	r3, [r7, #28]
   16646:	69fb      	ldr	r3, [r7, #28]
   16648:	f383 8810 	msr	PRIMASK, r3
   1664c:	4b3d      	ldr	r3, [pc, #244]	; (16744 <vTraceStoreMemMangEvent+0x134>)
   1664e:	681b      	ldr	r3, [r3, #0]
   16650:	1c5a      	adds	r2, r3, #1
   16652:	4b3c      	ldr	r3, [pc, #240]	; (16744 <vTraceStoreMemMangEvent+0x134>)
   16654:	601a      	str	r2, [r3, #0]
   16656:	68bb      	ldr	r3, [r7, #8]
   16658:	2b00      	cmp	r3, #0
   1665a:	d005      	beq.n	16668 <vTraceStoreMemMangEvent+0x58>
   1665c:	4b3a      	ldr	r3, [pc, #232]	; (16748 <vTraceStoreMemMangEvent+0x138>)
   1665e:	681a      	ldr	r2, [r3, #0]
   16660:	687b      	ldr	r3, [r7, #4]
   16662:	18d2      	adds	r2, r2, r3
   16664:	4b38      	ldr	r3, [pc, #224]	; (16748 <vTraceStoreMemMangEvent+0x138>)
   16666:	601a      	str	r2, [r3, #0]
   16668:	4b35      	ldr	r3, [pc, #212]	; (16740 <vTraceStoreMemMangEvent+0x130>)
   1666a:	681b      	ldr	r3, [r3, #0]
   1666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1666e:	2b00      	cmp	r3, #0
   16670:	d057      	beq.n	16722 <vTraceStoreMemMangEvent+0x112>
   16672:	20ff      	movs	r0, #255	; 0xff
   16674:	4b35      	ldr	r3, [pc, #212]	; (1674c <vTraceStoreMemMangEvent+0x13c>)
   16676:	4798      	blx	r3
   16678:	0003      	movs	r3, r0
   1667a:	001a      	movs	r2, r3
   1667c:	232f      	movs	r3, #47	; 0x2f
   1667e:	18fb      	adds	r3, r7, r3
   16680:	701a      	strb	r2, [r3, #0]
   16682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16684:	4a32      	ldr	r2, [pc, #200]	; (16750 <vTraceStoreMemMangEvent+0x140>)
   16686:	0019      	movs	r1, r3
   16688:	0010      	movs	r0, r2
   1668a:	4b32      	ldr	r3, [pc, #200]	; (16754 <vTraceStoreMemMangEvent+0x144>)
   1668c:	4798      	blx	r3
   1668e:	0002      	movs	r2, r0
   16690:	232c      	movs	r3, #44	; 0x2c
   16692:	18fb      	adds	r3, r7, r3
   16694:	801a      	strh	r2, [r3, #0]
   16696:	4b30      	ldr	r3, [pc, #192]	; (16758 <vTraceStoreMemMangEvent+0x148>)
   16698:	4798      	blx	r3
   1669a:	0003      	movs	r3, r0
   1669c:	62bb      	str	r3, [r7, #40]	; 0x28
   1669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166a0:	2b00      	cmp	r3, #0
   166a2:	d03e      	beq.n	16722 <vTraceStoreMemMangEvent+0x112>
   166a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166a6:	222f      	movs	r2, #47	; 0x2f
   166a8:	18ba      	adds	r2, r7, r2
   166aa:	7812      	ldrb	r2, [r2, #0]
   166ac:	705a      	strb	r2, [r3, #1]
   166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166b0:	2200      	movs	r2, #0
   166b2:	701a      	strb	r2, [r3, #0]
   166b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166b6:	222c      	movs	r2, #44	; 0x2c
   166b8:	18ba      	adds	r2, r7, r2
   166ba:	8812      	ldrh	r2, [r2, #0]
   166bc:	805a      	strh	r2, [r3, #2]
   166be:	4b27      	ldr	r3, [pc, #156]	; (1675c <vTraceStoreMemMangEvent+0x14c>)
   166c0:	4798      	blx	r3
   166c2:	68bb      	ldr	r3, [r7, #8]
   166c4:	4a22      	ldr	r2, [pc, #136]	; (16750 <vTraceStoreMemMangEvent+0x140>)
   166c6:	0019      	movs	r1, r3
   166c8:	0010      	movs	r0, r2
   166ca:	4b22      	ldr	r3, [pc, #136]	; (16754 <vTraceStoreMemMangEvent+0x144>)
   166cc:	4798      	blx	r3
   166ce:	0002      	movs	r2, r0
   166d0:	2326      	movs	r3, #38	; 0x26
   166d2:	18fb      	adds	r3, r7, r3
   166d4:	801a      	strh	r2, [r3, #0]
   166d6:	2325      	movs	r3, #37	; 0x25
   166d8:	18fb      	adds	r3, r7, r3
   166da:	2200      	movs	r2, #0
   166dc:	701a      	strb	r2, [r3, #0]
   166de:	4b1e      	ldr	r3, [pc, #120]	; (16758 <vTraceStoreMemMangEvent+0x148>)
   166e0:	4798      	blx	r3
   166e2:	0003      	movs	r3, r0
   166e4:	623b      	str	r3, [r7, #32]
   166e6:	6a3b      	ldr	r3, [r7, #32]
   166e8:	2b00      	cmp	r3, #0
   166ea:	d01a      	beq.n	16722 <vTraceStoreMemMangEvent+0x112>
   166ec:	6a3b      	ldr	r3, [r7, #32]
   166ee:	2226      	movs	r2, #38	; 0x26
   166f0:	18ba      	adds	r2, r7, r2
   166f2:	8812      	ldrh	r2, [r2, #0]
   166f4:	805a      	strh	r2, [r3, #2]
   166f6:	6a3b      	ldr	r3, [r7, #32]
   166f8:	2225      	movs	r2, #37	; 0x25
   166fa:	18ba      	adds	r2, r7, r2
   166fc:	7812      	ldrb	r2, [r2, #0]
   166fe:	705a      	strb	r2, [r3, #1]
   16700:	68fb      	ldr	r3, [r7, #12]
   16702:	b2db      	uxtb	r3, r3
   16704:	3301      	adds	r3, #1
   16706:	b2da      	uxtb	r2, r3
   16708:	6a3b      	ldr	r3, [r7, #32]
   1670a:	701a      	strb	r2, [r3, #0]
   1670c:	68fb      	ldr	r3, [r7, #12]
   1670e:	b2da      	uxtb	r2, r3
   16710:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16712:	701a      	strb	r2, [r3, #0]
   16714:	4b11      	ldr	r3, [pc, #68]	; (1675c <vTraceStoreMemMangEvent+0x14c>)
   16716:	4798      	blx	r3
   16718:	4b09      	ldr	r3, [pc, #36]	; (16740 <vTraceStoreMemMangEvent+0x130>)
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	4a0a      	ldr	r2, [pc, #40]	; (16748 <vTraceStoreMemMangEvent+0x138>)
   1671e:	6812      	ldr	r2, [r2, #0]
   16720:	651a      	str	r2, [r3, #80]	; 0x50
   16722:	4b08      	ldr	r3, [pc, #32]	; (16744 <vTraceStoreMemMangEvent+0x134>)
   16724:	681b      	ldr	r3, [r3, #0]
   16726:	1e5a      	subs	r2, r3, #1
   16728:	4b06      	ldr	r3, [pc, #24]	; (16744 <vTraceStoreMemMangEvent+0x134>)
   1672a:	601a      	str	r2, [r3, #0]
   1672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1672e:	617b      	str	r3, [r7, #20]
   16730:	697b      	ldr	r3, [r7, #20]
   16732:	f383 8810 	msr	PRIMASK, r3
   16736:	e000      	b.n	1673a <vTraceStoreMemMangEvent+0x12a>
   16738:	46c0      	nop			; (mov r8, r8)
   1673a:	46bd      	mov	sp, r7
   1673c:	b00e      	add	sp, #56	; 0x38
   1673e:	bd80      	pop	{r7, pc}
   16740:	20000c34 	.word	0x20000c34
   16744:	20000b8c 	.word	0x20000b8c
   16748:	20000ba0 	.word	0x20000ba0
   1674c:	00017819 	.word	0x00017819
   16750:	0000ffff 	.word	0x0000ffff
   16754:	000169dd 	.word	0x000169dd
   16758:	000171bd 	.word	0x000171bd
   1675c:	000177c1 	.word	0x000177c1

00016760 <prvTraceStoreKernelCall>:
   16760:	b590      	push	{r4, r7, lr}
   16762:	b08b      	sub	sp, #44	; 0x2c
   16764:	af00      	add	r7, sp, #0
   16766:	60f8      	str	r0, [r7, #12]
   16768:	607a      	str	r2, [r7, #4]
   1676a:	230b      	movs	r3, #11
   1676c:	18fb      	adds	r3, r7, r3
   1676e:	1c0a      	adds	r2, r1, #0
   16770:	701a      	strb	r2, [r3, #0]
   16772:	68fb      	ldr	r3, [r7, #12]
   16774:	2bfe      	cmp	r3, #254	; 0xfe
   16776:	d904      	bls.n	16782 <prvTraceStoreKernelCall+0x22>
   16778:	4b39      	ldr	r3, [pc, #228]	; (16860 <prvTraceStoreKernelCall+0x100>)
   1677a:	0018      	movs	r0, r3
   1677c:	4b39      	ldr	r3, [pc, #228]	; (16864 <prvTraceStoreKernelCall+0x104>)
   1677e:	4798      	blx	r3
   16780:	e06b      	b.n	1685a <prvTraceStoreKernelCall+0xfa>
   16782:	230b      	movs	r3, #11
   16784:	18fb      	adds	r3, r7, r3
   16786:	781b      	ldrb	r3, [r3, #0]
   16788:	2b08      	cmp	r3, #8
   1678a:	d904      	bls.n	16796 <prvTraceStoreKernelCall+0x36>
   1678c:	4b36      	ldr	r3, [pc, #216]	; (16868 <prvTraceStoreKernelCall+0x108>)
   1678e:	0018      	movs	r0, r3
   16790:	4b34      	ldr	r3, [pc, #208]	; (16864 <prvTraceStoreKernelCall+0x104>)
   16792:	4798      	blx	r3
   16794:	e061      	b.n	1685a <prvTraceStoreKernelCall+0xfa>
   16796:	4b35      	ldr	r3, [pc, #212]	; (1686c <prvTraceStoreKernelCall+0x10c>)
   16798:	681a      	ldr	r2, [r3, #0]
   1679a:	230b      	movs	r3, #11
   1679c:	18fb      	adds	r3, r7, r3
   1679e:	781b      	ldrb	r3, [r3, #0]
   167a0:	2164      	movs	r1, #100	; 0x64
   167a2:	18d3      	adds	r3, r2, r3
   167a4:	185b      	adds	r3, r3, r1
   167a6:	781b      	ldrb	r3, [r3, #0]
   167a8:	001a      	movs	r2, r3
   167aa:	687b      	ldr	r3, [r7, #4]
   167ac:	429a      	cmp	r2, r3
   167ae:	d204      	bcs.n	167ba <prvTraceStoreKernelCall+0x5a>
   167b0:	4b2f      	ldr	r3, [pc, #188]	; (16870 <prvTraceStoreKernelCall+0x110>)
   167b2:	0018      	movs	r0, r3
   167b4:	4b2b      	ldr	r3, [pc, #172]	; (16864 <prvTraceStoreKernelCall+0x104>)
   167b6:	4798      	blx	r3
   167b8:	e04f      	b.n	1685a <prvTraceStoreKernelCall+0xfa>
   167ba:	4b2e      	ldr	r3, [pc, #184]	; (16874 <prvTraceStoreKernelCall+0x114>)
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	2b00      	cmp	r3, #0
   167c0:	d004      	beq.n	167cc <prvTraceStoreKernelCall+0x6c>
   167c2:	4b2d      	ldr	r3, [pc, #180]	; (16878 <prvTraceStoreKernelCall+0x118>)
   167c4:	0018      	movs	r0, r3
   167c6:	4b27      	ldr	r3, [pc, #156]	; (16864 <prvTraceStoreKernelCall+0x104>)
   167c8:	4798      	blx	r3
   167ca:	e046      	b.n	1685a <prvTraceStoreKernelCall+0xfa>
   167cc:	4b2b      	ldr	r3, [pc, #172]	; (1687c <prvTraceStoreKernelCall+0x11c>)
   167ce:	781b      	ldrb	r3, [r3, #0]
   167d0:	2b00      	cmp	r3, #0
   167d2:	d041      	beq.n	16858 <prvTraceStoreKernelCall+0xf8>
   167d4:	f3ef 8310 	mrs	r3, PRIMASK
   167d8:	617b      	str	r3, [r7, #20]
   167da:	697b      	ldr	r3, [r7, #20]
   167dc:	627b      	str	r3, [r7, #36]	; 0x24
   167de:	2301      	movs	r3, #1
   167e0:	61bb      	str	r3, [r7, #24]
   167e2:	69bb      	ldr	r3, [r7, #24]
   167e4:	f383 8810 	msr	PRIMASK, r3
   167e8:	4b22      	ldr	r3, [pc, #136]	; (16874 <prvTraceStoreKernelCall+0x114>)
   167ea:	681b      	ldr	r3, [r3, #0]
   167ec:	1c5a      	adds	r2, r3, #1
   167ee:	4b21      	ldr	r3, [pc, #132]	; (16874 <prvTraceStoreKernelCall+0x114>)
   167f0:	601a      	str	r2, [r3, #0]
   167f2:	4b1e      	ldr	r3, [pc, #120]	; (1686c <prvTraceStoreKernelCall+0x10c>)
   167f4:	681b      	ldr	r3, [r3, #0]
   167f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   167f8:	2b00      	cmp	r3, #0
   167fa:	d022      	beq.n	16842 <prvTraceStoreKernelCall+0xe2>
   167fc:	2322      	movs	r3, #34	; 0x22
   167fe:	18fc      	adds	r4, r7, r3
   16800:	4b1f      	ldr	r3, [pc, #124]	; (16880 <prvTraceStoreKernelCall+0x120>)
   16802:	0018      	movs	r0, r3
   16804:	4b1f      	ldr	r3, [pc, #124]	; (16884 <prvTraceStoreKernelCall+0x124>)
   16806:	4798      	blx	r3
   16808:	0003      	movs	r3, r0
   1680a:	8023      	strh	r3, [r4, #0]
   1680c:	2321      	movs	r3, #33	; 0x21
   1680e:	18fb      	adds	r3, r7, r3
   16810:	687a      	ldr	r2, [r7, #4]
   16812:	701a      	strb	r2, [r3, #0]
   16814:	4b1c      	ldr	r3, [pc, #112]	; (16888 <prvTraceStoreKernelCall+0x128>)
   16816:	4798      	blx	r3
   16818:	0003      	movs	r3, r0
   1681a:	61fb      	str	r3, [r7, #28]
   1681c:	69fb      	ldr	r3, [r7, #28]
   1681e:	2b00      	cmp	r3, #0
   16820:	d00f      	beq.n	16842 <prvTraceStoreKernelCall+0xe2>
   16822:	69fb      	ldr	r3, [r7, #28]
   16824:	2222      	movs	r2, #34	; 0x22
   16826:	18ba      	adds	r2, r7, r2
   16828:	8812      	ldrh	r2, [r2, #0]
   1682a:	805a      	strh	r2, [r3, #2]
   1682c:	68fb      	ldr	r3, [r7, #12]
   1682e:	b2da      	uxtb	r2, r3
   16830:	69fb      	ldr	r3, [r7, #28]
   16832:	701a      	strb	r2, [r3, #0]
   16834:	69fb      	ldr	r3, [r7, #28]
   16836:	2221      	movs	r2, #33	; 0x21
   16838:	18ba      	adds	r2, r7, r2
   1683a:	7812      	ldrb	r2, [r2, #0]
   1683c:	705a      	strb	r2, [r3, #1]
   1683e:	4b13      	ldr	r3, [pc, #76]	; (1688c <prvTraceStoreKernelCall+0x12c>)
   16840:	4798      	blx	r3
   16842:	4b0c      	ldr	r3, [pc, #48]	; (16874 <prvTraceStoreKernelCall+0x114>)
   16844:	681b      	ldr	r3, [r3, #0]
   16846:	1e5a      	subs	r2, r3, #1
   16848:	4b0a      	ldr	r3, [pc, #40]	; (16874 <prvTraceStoreKernelCall+0x114>)
   1684a:	601a      	str	r2, [r3, #0]
   1684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1684e:	613b      	str	r3, [r7, #16]
   16850:	693b      	ldr	r3, [r7, #16]
   16852:	f383 8810 	msr	PRIMASK, r3
   16856:	e000      	b.n	1685a <prvTraceStoreKernelCall+0xfa>
   16858:	46c0      	nop			; (mov r8, r8)
   1685a:	46bd      	mov	sp, r7
   1685c:	b00b      	add	sp, #44	; 0x2c
   1685e:	bd90      	pop	{r4, r7, pc}
   16860:	00034b08 	.word	0x00034b08
   16864:	00017605 	.word	0x00017605
   16868:	00034b40 	.word	0x00034b40
   1686c:	20000c34 	.word	0x20000c34
   16870:	00034b88 	.word	0x00034b88
   16874:	20000b8c 	.word	0x20000b8c
   16878:	00034bd0 	.word	0x00034bd0
   1687c:	20000b98 	.word	0x20000b98
   16880:	0000ffff 	.word	0x0000ffff
   16884:	00017819 	.word	0x00017819
   16888:	000171bd 	.word	0x000171bd
   1688c:	000177c1 	.word	0x000177c1

00016890 <prvTraceStoreKernelCallWithParam>:
   16890:	b580      	push	{r7, lr}
   16892:	b08a      	sub	sp, #40	; 0x28
   16894:	af00      	add	r7, sp, #0
   16896:	60f8      	str	r0, [r7, #12]
   16898:	607a      	str	r2, [r7, #4]
   1689a:	603b      	str	r3, [r7, #0]
   1689c:	230b      	movs	r3, #11
   1689e:	18fb      	adds	r3, r7, r3
   168a0:	1c0a      	adds	r2, r1, #0
   168a2:	701a      	strb	r2, [r3, #0]
   168a4:	68fb      	ldr	r3, [r7, #12]
   168a6:	2bfe      	cmp	r3, #254	; 0xfe
   168a8:	d904      	bls.n	168b4 <prvTraceStoreKernelCallWithParam+0x24>
   168aa:	4b40      	ldr	r3, [pc, #256]	; (169ac <prvTraceStoreKernelCallWithParam+0x11c>)
   168ac:	0018      	movs	r0, r3
   168ae:	4b40      	ldr	r3, [pc, #256]	; (169b0 <prvTraceStoreKernelCallWithParam+0x120>)
   168b0:	4798      	blx	r3
   168b2:	e077      	b.n	169a4 <prvTraceStoreKernelCallWithParam+0x114>
   168b4:	230b      	movs	r3, #11
   168b6:	18fb      	adds	r3, r7, r3
   168b8:	781b      	ldrb	r3, [r3, #0]
   168ba:	2b08      	cmp	r3, #8
   168bc:	d904      	bls.n	168c8 <prvTraceStoreKernelCallWithParam+0x38>
   168be:	4b3d      	ldr	r3, [pc, #244]	; (169b4 <prvTraceStoreKernelCallWithParam+0x124>)
   168c0:	0018      	movs	r0, r3
   168c2:	4b3b      	ldr	r3, [pc, #236]	; (169b0 <prvTraceStoreKernelCallWithParam+0x120>)
   168c4:	4798      	blx	r3
   168c6:	e06d      	b.n	169a4 <prvTraceStoreKernelCallWithParam+0x114>
   168c8:	4b3b      	ldr	r3, [pc, #236]	; (169b8 <prvTraceStoreKernelCallWithParam+0x128>)
   168ca:	681a      	ldr	r2, [r3, #0]
   168cc:	230b      	movs	r3, #11
   168ce:	18fb      	adds	r3, r7, r3
   168d0:	781b      	ldrb	r3, [r3, #0]
   168d2:	2164      	movs	r1, #100	; 0x64
   168d4:	18d3      	adds	r3, r2, r3
   168d6:	185b      	adds	r3, r3, r1
   168d8:	781b      	ldrb	r3, [r3, #0]
   168da:	001a      	movs	r2, r3
   168dc:	687b      	ldr	r3, [r7, #4]
   168de:	429a      	cmp	r2, r3
   168e0:	d204      	bcs.n	168ec <prvTraceStoreKernelCallWithParam+0x5c>
   168e2:	4b36      	ldr	r3, [pc, #216]	; (169bc <prvTraceStoreKernelCallWithParam+0x12c>)
   168e4:	0018      	movs	r0, r3
   168e6:	4b32      	ldr	r3, [pc, #200]	; (169b0 <prvTraceStoreKernelCallWithParam+0x120>)
   168e8:	4798      	blx	r3
   168ea:	e05b      	b.n	169a4 <prvTraceStoreKernelCallWithParam+0x114>
   168ec:	4b34      	ldr	r3, [pc, #208]	; (169c0 <prvTraceStoreKernelCallWithParam+0x130>)
   168ee:	681b      	ldr	r3, [r3, #0]
   168f0:	2b00      	cmp	r3, #0
   168f2:	d004      	beq.n	168fe <prvTraceStoreKernelCallWithParam+0x6e>
   168f4:	4b33      	ldr	r3, [pc, #204]	; (169c4 <prvTraceStoreKernelCallWithParam+0x134>)
   168f6:	0018      	movs	r0, r3
   168f8:	4b2d      	ldr	r3, [pc, #180]	; (169b0 <prvTraceStoreKernelCallWithParam+0x120>)
   168fa:	4798      	blx	r3
   168fc:	e052      	b.n	169a4 <prvTraceStoreKernelCallWithParam+0x114>
   168fe:	f3ef 8310 	mrs	r3, PRIMASK
   16902:	617b      	str	r3, [r7, #20]
   16904:	697b      	ldr	r3, [r7, #20]
   16906:	627b      	str	r3, [r7, #36]	; 0x24
   16908:	2301      	movs	r3, #1
   1690a:	61bb      	str	r3, [r7, #24]
   1690c:	69bb      	ldr	r3, [r7, #24]
   1690e:	f383 8810 	msr	PRIMASK, r3
   16912:	4b2b      	ldr	r3, [pc, #172]	; (169c0 <prvTraceStoreKernelCallWithParam+0x130>)
   16914:	681b      	ldr	r3, [r3, #0]
   16916:	1c5a      	adds	r2, r3, #1
   16918:	4b29      	ldr	r3, [pc, #164]	; (169c0 <prvTraceStoreKernelCallWithParam+0x130>)
   1691a:	601a      	str	r2, [r3, #0]
   1691c:	4b26      	ldr	r3, [pc, #152]	; (169b8 <prvTraceStoreKernelCallWithParam+0x128>)
   1691e:	681b      	ldr	r3, [r3, #0]
   16920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16922:	2b00      	cmp	r3, #0
   16924:	d034      	beq.n	16990 <prvTraceStoreKernelCallWithParam+0x100>
   16926:	4b28      	ldr	r3, [pc, #160]	; (169c8 <prvTraceStoreKernelCallWithParam+0x138>)
   16928:	781b      	ldrb	r3, [r3, #0]
   1692a:	2b00      	cmp	r3, #0
   1692c:	d030      	beq.n	16990 <prvTraceStoreKernelCallWithParam+0x100>
   1692e:	20ff      	movs	r0, #255	; 0xff
   16930:	4b26      	ldr	r3, [pc, #152]	; (169cc <prvTraceStoreKernelCallWithParam+0x13c>)
   16932:	4798      	blx	r3
   16934:	0003      	movs	r3, r0
   16936:	001a      	movs	r2, r3
   16938:	2323      	movs	r3, #35	; 0x23
   1693a:	18fb      	adds	r3, r7, r3
   1693c:	701a      	strb	r2, [r3, #0]
   1693e:	683b      	ldr	r3, [r7, #0]
   16940:	0019      	movs	r1, r3
   16942:	20ff      	movs	r0, #255	; 0xff
   16944:	4b22      	ldr	r3, [pc, #136]	; (169d0 <prvTraceStoreKernelCallWithParam+0x140>)
   16946:	4798      	blx	r3
   16948:	0002      	movs	r2, r0
   1694a:	2322      	movs	r3, #34	; 0x22
   1694c:	18fb      	adds	r3, r7, r3
   1694e:	701a      	strb	r2, [r3, #0]
   16950:	2321      	movs	r3, #33	; 0x21
   16952:	18fb      	adds	r3, r7, r3
   16954:	687a      	ldr	r2, [r7, #4]
   16956:	701a      	strb	r2, [r3, #0]
   16958:	4b1e      	ldr	r3, [pc, #120]	; (169d4 <prvTraceStoreKernelCallWithParam+0x144>)
   1695a:	4798      	blx	r3
   1695c:	0003      	movs	r3, r0
   1695e:	61fb      	str	r3, [r7, #28]
   16960:	69fb      	ldr	r3, [r7, #28]
   16962:	2b00      	cmp	r3, #0
   16964:	d014      	beq.n	16990 <prvTraceStoreKernelCallWithParam+0x100>
   16966:	69fb      	ldr	r3, [r7, #28]
   16968:	2223      	movs	r2, #35	; 0x23
   1696a:	18ba      	adds	r2, r7, r2
   1696c:	7812      	ldrb	r2, [r2, #0]
   1696e:	70da      	strb	r2, [r3, #3]
   16970:	68fb      	ldr	r3, [r7, #12]
   16972:	b2da      	uxtb	r2, r3
   16974:	69fb      	ldr	r3, [r7, #28]
   16976:	701a      	strb	r2, [r3, #0]
   16978:	69fb      	ldr	r3, [r7, #28]
   1697a:	2221      	movs	r2, #33	; 0x21
   1697c:	18ba      	adds	r2, r7, r2
   1697e:	7812      	ldrb	r2, [r2, #0]
   16980:	705a      	strb	r2, [r3, #1]
   16982:	69fb      	ldr	r3, [r7, #28]
   16984:	2222      	movs	r2, #34	; 0x22
   16986:	18ba      	adds	r2, r7, r2
   16988:	7812      	ldrb	r2, [r2, #0]
   1698a:	709a      	strb	r2, [r3, #2]
   1698c:	4b12      	ldr	r3, [pc, #72]	; (169d8 <prvTraceStoreKernelCallWithParam+0x148>)
   1698e:	4798      	blx	r3
   16990:	4b0b      	ldr	r3, [pc, #44]	; (169c0 <prvTraceStoreKernelCallWithParam+0x130>)
   16992:	681b      	ldr	r3, [r3, #0]
   16994:	1e5a      	subs	r2, r3, #1
   16996:	4b0a      	ldr	r3, [pc, #40]	; (169c0 <prvTraceStoreKernelCallWithParam+0x130>)
   16998:	601a      	str	r2, [r3, #0]
   1699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1699c:	613b      	str	r3, [r7, #16]
   1699e:	693b      	ldr	r3, [r7, #16]
   169a0:	f383 8810 	msr	PRIMASK, r3
   169a4:	46bd      	mov	sp, r7
   169a6:	b00a      	add	sp, #40	; 0x28
   169a8:	bd80      	pop	{r7, pc}
   169aa:	46c0      	nop			; (mov r8, r8)
   169ac:	00034c08 	.word	0x00034c08
   169b0:	00017605 	.word	0x00017605
   169b4:	00034c48 	.word	0x00034c48
   169b8:	20000c34 	.word	0x20000c34
   169bc:	00034c98 	.word	0x00034c98
   169c0:	20000b8c 	.word	0x20000b8c
   169c4:	00034ce8 	.word	0x00034ce8
   169c8:	20000b98 	.word	0x20000b98
   169cc:	00017819 	.word	0x00017819
   169d0:	000169dd 	.word	0x000169dd
   169d4:	000171bd 	.word	0x000171bd
   169d8:	000177c1 	.word	0x000177c1

000169dc <prvTraceGetParam>:
   169dc:	b580      	push	{r7, lr}
   169de:	b084      	sub	sp, #16
   169e0:	af00      	add	r7, sp, #0
   169e2:	6078      	str	r0, [r7, #4]
   169e4:	6039      	str	r1, [r7, #0]
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	2bff      	cmp	r3, #255	; 0xff
   169ea:	d009      	beq.n	16a00 <prvTraceGetParam+0x24>
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	4a19      	ldr	r2, [pc, #100]	; (16a54 <prvTraceGetParam+0x78>)
   169f0:	4293      	cmp	r3, r2
   169f2:	d005      	beq.n	16a00 <prvTraceGetParam+0x24>
   169f4:	4b18      	ldr	r3, [pc, #96]	; (16a58 <prvTraceGetParam+0x7c>)
   169f6:	0018      	movs	r0, r3
   169f8:	4b18      	ldr	r3, [pc, #96]	; (16a5c <prvTraceGetParam+0x80>)
   169fa:	4798      	blx	r3
   169fc:	683b      	ldr	r3, [r7, #0]
   169fe:	e024      	b.n	16a4a <prvTraceGetParam+0x6e>
   16a00:	683a      	ldr	r2, [r7, #0]
   16a02:	687b      	ldr	r3, [r7, #4]
   16a04:	429a      	cmp	r2, r3
   16a06:	d801      	bhi.n	16a0c <prvTraceGetParam+0x30>
   16a08:	683b      	ldr	r3, [r7, #0]
   16a0a:	e01e      	b.n	16a4a <prvTraceGetParam+0x6e>
   16a0c:	4b14      	ldr	r3, [pc, #80]	; (16a60 <prvTraceGetParam+0x84>)
   16a0e:	4798      	blx	r3
   16a10:	0003      	movs	r3, r0
   16a12:	60fb      	str	r3, [r7, #12]
   16a14:	68fb      	ldr	r3, [r7, #12]
   16a16:	2b00      	cmp	r3, #0
   16a18:	d014      	beq.n	16a44 <prvTraceGetParam+0x68>
   16a1a:	68fb      	ldr	r3, [r7, #12]
   16a1c:	2201      	movs	r2, #1
   16a1e:	701a      	strb	r2, [r3, #0]
   16a20:	687b      	ldr	r3, [r7, #4]
   16a22:	43db      	mvns	r3, r3
   16a24:	683a      	ldr	r2, [r7, #0]
   16a26:	4013      	ands	r3, r2
   16a28:	0a1b      	lsrs	r3, r3, #8
   16a2a:	b2da      	uxtb	r2, r3
   16a2c:	68fb      	ldr	r3, [r7, #12]
   16a2e:	705a      	strb	r2, [r3, #1]
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	43db      	mvns	r3, r3
   16a34:	683a      	ldr	r2, [r7, #0]
   16a36:	4013      	ands	r3, r2
   16a38:	0c1b      	lsrs	r3, r3, #16
   16a3a:	b29a      	uxth	r2, r3
   16a3c:	68fb      	ldr	r3, [r7, #12]
   16a3e:	805a      	strh	r2, [r3, #2]
   16a40:	4b08      	ldr	r3, [pc, #32]	; (16a64 <prvTraceGetParam+0x88>)
   16a42:	4798      	blx	r3
   16a44:	683b      	ldr	r3, [r7, #0]
   16a46:	687a      	ldr	r2, [r7, #4]
   16a48:	4013      	ands	r3, r2
   16a4a:	0018      	movs	r0, r3
   16a4c:	46bd      	mov	sp, r7
   16a4e:	b004      	add	sp, #16
   16a50:	bd80      	pop	{r7, pc}
   16a52:	46c0      	nop			; (mov r8, r8)
   16a54:	0000ffff 	.word	0x0000ffff
   16a58:	00034d20 	.word	0x00034d20
   16a5c:	00017605 	.word	0x00017605
   16a60:	000171bd 	.word	0x000171bd
   16a64:	000177c1 	.word	0x000177c1

00016a68 <prvTraceStoreKernelCallWithNumericParamOnly>:
   16a68:	b580      	push	{r7, lr}
   16a6a:	b08a      	sub	sp, #40	; 0x28
   16a6c:	af00      	add	r7, sp, #0
   16a6e:	6078      	str	r0, [r7, #4]
   16a70:	6039      	str	r1, [r7, #0]
   16a72:	2326      	movs	r3, #38	; 0x26
   16a74:	18fb      	adds	r3, r7, r3
   16a76:	2200      	movs	r2, #0
   16a78:	801a      	strh	r2, [r3, #0]
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	2bfe      	cmp	r3, #254	; 0xfe
   16a7e:	d904      	bls.n	16a8a <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   16a80:	4b2d      	ldr	r3, [pc, #180]	; (16b38 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   16a82:	0018      	movs	r0, r3
   16a84:	4b2d      	ldr	r3, [pc, #180]	; (16b3c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   16a86:	4798      	blx	r3
   16a88:	e053      	b.n	16b32 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   16a8a:	4b2d      	ldr	r3, [pc, #180]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16a8c:	681b      	ldr	r3, [r3, #0]
   16a8e:	2b00      	cmp	r3, #0
   16a90:	d004      	beq.n	16a9c <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
   16a92:	4b2c      	ldr	r3, [pc, #176]	; (16b44 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   16a94:	0018      	movs	r0, r3
   16a96:	4b29      	ldr	r3, [pc, #164]	; (16b3c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   16a98:	4798      	blx	r3
   16a9a:	e04a      	b.n	16b32 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   16a9c:	f3ef 8310 	mrs	r3, PRIMASK
   16aa0:	613b      	str	r3, [r7, #16]
   16aa2:	693b      	ldr	r3, [r7, #16]
   16aa4:	623b      	str	r3, [r7, #32]
   16aa6:	2301      	movs	r3, #1
   16aa8:	617b      	str	r3, [r7, #20]
   16aaa:	697b      	ldr	r3, [r7, #20]
   16aac:	f383 8810 	msr	PRIMASK, r3
   16ab0:	4b23      	ldr	r3, [pc, #140]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16ab2:	681b      	ldr	r3, [r3, #0]
   16ab4:	1c5a      	adds	r2, r3, #1
   16ab6:	4b22      	ldr	r3, [pc, #136]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16ab8:	601a      	str	r2, [r3, #0]
   16aba:	4b23      	ldr	r3, [pc, #140]	; (16b48 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   16abc:	681b      	ldr	r3, [r3, #0]
   16abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d02c      	beq.n	16b1e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16ac4:	4b21      	ldr	r3, [pc, #132]	; (16b4c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   16ac6:	781b      	ldrb	r3, [r3, #0]
   16ac8:	2b00      	cmp	r3, #0
   16aca:	d028      	beq.n	16b1e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16acc:	20ff      	movs	r0, #255	; 0xff
   16ace:	4b20      	ldr	r3, [pc, #128]	; (16b50 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   16ad0:	4798      	blx	r3
   16ad2:	0003      	movs	r3, r0
   16ad4:	001a      	movs	r2, r3
   16ad6:	231f      	movs	r3, #31
   16ad8:	18fb      	adds	r3, r7, r3
   16ada:	701a      	strb	r2, [r3, #0]
   16adc:	683b      	ldr	r3, [r7, #0]
   16ade:	4a1d      	ldr	r2, [pc, #116]	; (16b54 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   16ae0:	0019      	movs	r1, r3
   16ae2:	0010      	movs	r0, r2
   16ae4:	4b1c      	ldr	r3, [pc, #112]	; (16b58 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   16ae6:	4798      	blx	r3
   16ae8:	0002      	movs	r2, r0
   16aea:	2326      	movs	r3, #38	; 0x26
   16aec:	18fb      	adds	r3, r7, r3
   16aee:	801a      	strh	r2, [r3, #0]
   16af0:	4b1a      	ldr	r3, [pc, #104]	; (16b5c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   16af2:	4798      	blx	r3
   16af4:	0003      	movs	r3, r0
   16af6:	61bb      	str	r3, [r7, #24]
   16af8:	69bb      	ldr	r3, [r7, #24]
   16afa:	2b00      	cmp	r3, #0
   16afc:	d00f      	beq.n	16b1e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16afe:	69bb      	ldr	r3, [r7, #24]
   16b00:	221f      	movs	r2, #31
   16b02:	18ba      	adds	r2, r7, r2
   16b04:	7812      	ldrb	r2, [r2, #0]
   16b06:	705a      	strb	r2, [r3, #1]
   16b08:	687b      	ldr	r3, [r7, #4]
   16b0a:	b2da      	uxtb	r2, r3
   16b0c:	69bb      	ldr	r3, [r7, #24]
   16b0e:	701a      	strb	r2, [r3, #0]
   16b10:	69bb      	ldr	r3, [r7, #24]
   16b12:	2226      	movs	r2, #38	; 0x26
   16b14:	18ba      	adds	r2, r7, r2
   16b16:	8812      	ldrh	r2, [r2, #0]
   16b18:	805a      	strh	r2, [r3, #2]
   16b1a:	4b11      	ldr	r3, [pc, #68]	; (16b60 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   16b1c:	4798      	blx	r3
   16b1e:	4b08      	ldr	r3, [pc, #32]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16b20:	681b      	ldr	r3, [r3, #0]
   16b22:	1e5a      	subs	r2, r3, #1
   16b24:	4b06      	ldr	r3, [pc, #24]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16b26:	601a      	str	r2, [r3, #0]
   16b28:	6a3b      	ldr	r3, [r7, #32]
   16b2a:	60fb      	str	r3, [r7, #12]
   16b2c:	68fb      	ldr	r3, [r7, #12]
   16b2e:	f383 8810 	msr	PRIMASK, r3
   16b32:	46bd      	mov	sp, r7
   16b34:	b00a      	add	sp, #40	; 0x28
   16b36:	bd80      	pop	{r7, pc}
   16b38:	00034d5c 	.word	0x00034d5c
   16b3c:	00017605 	.word	0x00017605
   16b40:	20000b8c 	.word	0x20000b8c
   16b44:	00034db4 	.word	0x00034db4
   16b48:	20000c34 	.word	0x20000c34
   16b4c:	20000b98 	.word	0x20000b98
   16b50:	00017819 	.word	0x00017819
   16b54:	0000ffff 	.word	0x0000ffff
   16b58:	000169dd 	.word	0x000169dd
   16b5c:	000171bd 	.word	0x000171bd
   16b60:	000177c1 	.word	0x000177c1

00016b64 <prvTraceStoreTaskswitch>:
   16b64:	b590      	push	{r4, r7, lr}
   16b66:	b089      	sub	sp, #36	; 0x24
   16b68:	af00      	add	r7, sp, #0
   16b6a:	0002      	movs	r2, r0
   16b6c:	1dfb      	adds	r3, r7, #7
   16b6e:	701a      	strb	r2, [r3, #0]
   16b70:	1dfb      	adds	r3, r7, #7
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	2b0f      	cmp	r3, #15
   16b76:	d904      	bls.n	16b82 <prvTraceStoreTaskswitch+0x1e>
   16b78:	4b34      	ldr	r3, [pc, #208]	; (16c4c <prvTraceStoreTaskswitch+0xe8>)
   16b7a:	0018      	movs	r0, r3
   16b7c:	4b34      	ldr	r3, [pc, #208]	; (16c50 <prvTraceStoreTaskswitch+0xec>)
   16b7e:	4798      	blx	r3
   16b80:	e061      	b.n	16c46 <prvTraceStoreTaskswitch+0xe2>
   16b82:	f3ef 8310 	mrs	r3, PRIMASK
   16b86:	60fb      	str	r3, [r7, #12]
   16b88:	68fb      	ldr	r3, [r7, #12]
   16b8a:	61fb      	str	r3, [r7, #28]
   16b8c:	2301      	movs	r3, #1
   16b8e:	613b      	str	r3, [r7, #16]
   16b90:	693b      	ldr	r3, [r7, #16]
   16b92:	f383 8810 	msr	PRIMASK, r3
   16b96:	4b2f      	ldr	r3, [pc, #188]	; (16c54 <prvTraceStoreTaskswitch+0xf0>)
   16b98:	681b      	ldr	r3, [r3, #0]
   16b9a:	1c5a      	adds	r2, r3, #1
   16b9c:	4b2d      	ldr	r3, [pc, #180]	; (16c54 <prvTraceStoreTaskswitch+0xf0>)
   16b9e:	601a      	str	r2, [r3, #0]
   16ba0:	4b2d      	ldr	r3, [pc, #180]	; (16c58 <prvTraceStoreTaskswitch+0xf4>)
   16ba2:	781b      	ldrb	r3, [r3, #0]
   16ba4:	1dfa      	adds	r2, r7, #7
   16ba6:	7812      	ldrb	r2, [r2, #0]
   16ba8:	429a      	cmp	r2, r3
   16baa:	d042      	beq.n	16c32 <prvTraceStoreTaskswitch+0xce>
   16bac:	4b2b      	ldr	r3, [pc, #172]	; (16c5c <prvTraceStoreTaskswitch+0xf8>)
   16bae:	681b      	ldr	r3, [r3, #0]
   16bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d03d      	beq.n	16c32 <prvTraceStoreTaskswitch+0xce>
   16bb6:	4b2a      	ldr	r3, [pc, #168]	; (16c60 <prvTraceStoreTaskswitch+0xfc>)
   16bb8:	2200      	movs	r2, #0
   16bba:	601a      	str	r2, [r3, #0]
   16bbc:	231a      	movs	r3, #26
   16bbe:	18fc      	adds	r4, r7, r3
   16bc0:	4b28      	ldr	r3, [pc, #160]	; (16c64 <prvTraceStoreTaskswitch+0x100>)
   16bc2:	0018      	movs	r0, r3
   16bc4:	4b28      	ldr	r3, [pc, #160]	; (16c68 <prvTraceStoreTaskswitch+0x104>)
   16bc6:	4798      	blx	r3
   16bc8:	0003      	movs	r3, r0
   16bca:	8023      	strh	r3, [r4, #0]
   16bcc:	4b22      	ldr	r3, [pc, #136]	; (16c58 <prvTraceStoreTaskswitch+0xf4>)
   16bce:	1dfa      	adds	r2, r7, #7
   16bd0:	7812      	ldrb	r2, [r2, #0]
   16bd2:	701a      	strb	r2, [r3, #0]
   16bd4:	2319      	movs	r3, #25
   16bd6:	18fb      	adds	r3, r7, r3
   16bd8:	4a1f      	ldr	r2, [pc, #124]	; (16c58 <prvTraceStoreTaskswitch+0xf4>)
   16bda:	7812      	ldrb	r2, [r2, #0]
   16bdc:	701a      	strb	r2, [r3, #0]
   16bde:	4b23      	ldr	r3, [pc, #140]	; (16c6c <prvTraceStoreTaskswitch+0x108>)
   16be0:	4798      	blx	r3
   16be2:	0003      	movs	r3, r0
   16be4:	617b      	str	r3, [r7, #20]
   16be6:	697b      	ldr	r3, [r7, #20]
   16be8:	2b00      	cmp	r3, #0
   16bea:	d022      	beq.n	16c32 <prvTraceStoreTaskswitch+0xce>
   16bec:	4b1a      	ldr	r3, [pc, #104]	; (16c58 <prvTraceStoreTaskswitch+0xf4>)
   16bee:	781b      	ldrb	r3, [r3, #0]
   16bf0:	0019      	movs	r1, r3
   16bf2:	2003      	movs	r0, #3
   16bf4:	4b1e      	ldr	r3, [pc, #120]	; (16c70 <prvTraceStoreTaskswitch+0x10c>)
   16bf6:	4798      	blx	r3
   16bf8:	0003      	movs	r3, r0
   16bfa:	2b01      	cmp	r3, #1
   16bfc:	d103      	bne.n	16c06 <prvTraceStoreTaskswitch+0xa2>
   16bfe:	697b      	ldr	r3, [r7, #20]
   16c00:	2207      	movs	r2, #7
   16c02:	701a      	strb	r2, [r3, #0]
   16c04:	e002      	b.n	16c0c <prvTraceStoreTaskswitch+0xa8>
   16c06:	697b      	ldr	r3, [r7, #20]
   16c08:	2206      	movs	r2, #6
   16c0a:	701a      	strb	r2, [r3, #0]
   16c0c:	697b      	ldr	r3, [r7, #20]
   16c0e:	221a      	movs	r2, #26
   16c10:	18ba      	adds	r2, r7, r2
   16c12:	8812      	ldrh	r2, [r2, #0]
   16c14:	805a      	strh	r2, [r3, #2]
   16c16:	697b      	ldr	r3, [r7, #20]
   16c18:	2219      	movs	r2, #25
   16c1a:	18ba      	adds	r2, r7, r2
   16c1c:	7812      	ldrb	r2, [r2, #0]
   16c1e:	705a      	strb	r2, [r3, #1]
   16c20:	4b0d      	ldr	r3, [pc, #52]	; (16c58 <prvTraceStoreTaskswitch+0xf4>)
   16c22:	781b      	ldrb	r3, [r3, #0]
   16c24:	2201      	movs	r2, #1
   16c26:	0019      	movs	r1, r3
   16c28:	2003      	movs	r0, #3
   16c2a:	4b12      	ldr	r3, [pc, #72]	; (16c74 <prvTraceStoreTaskswitch+0x110>)
   16c2c:	4798      	blx	r3
   16c2e:	4b12      	ldr	r3, [pc, #72]	; (16c78 <prvTraceStoreTaskswitch+0x114>)
   16c30:	4798      	blx	r3
   16c32:	4b08      	ldr	r3, [pc, #32]	; (16c54 <prvTraceStoreTaskswitch+0xf0>)
   16c34:	681b      	ldr	r3, [r3, #0]
   16c36:	1e5a      	subs	r2, r3, #1
   16c38:	4b06      	ldr	r3, [pc, #24]	; (16c54 <prvTraceStoreTaskswitch+0xf0>)
   16c3a:	601a      	str	r2, [r3, #0]
   16c3c:	69fb      	ldr	r3, [r7, #28]
   16c3e:	60bb      	str	r3, [r7, #8]
   16c40:	68bb      	ldr	r3, [r7, #8]
   16c42:	f383 8810 	msr	PRIMASK, r3
   16c46:	46bd      	mov	sp, r7
   16c48:	b009      	add	sp, #36	; 0x24
   16c4a:	bd90      	pop	{r4, r7, pc}
   16c4c:	00034dec 	.word	0x00034dec
   16c50:	00017605 	.word	0x00017605
   16c54:	20000b8c 	.word	0x20000b8c
   16c58:	20000b98 	.word	0x20000b98
   16c5c:	20000c34 	.word	0x20000c34
   16c60:	20000b78 	.word	0x20000b78
   16c64:	0000ffff 	.word	0x0000ffff
   16c68:	00017819 	.word	0x00017819
   16c6c:	000171bd 	.word	0x000171bd
   16c70:	00016e61 	.word	0x00016e61
   16c74:	00016dbd 	.word	0x00016dbd
   16c78:	000177c1 	.word	0x000177c1

00016c7c <prvTraceSetPriorityProperty>:
   16c7c:	b590      	push	{r4, r7, lr}
   16c7e:	b083      	sub	sp, #12
   16c80:	af00      	add	r7, sp, #0
   16c82:	0004      	movs	r4, r0
   16c84:	0008      	movs	r0, r1
   16c86:	0011      	movs	r1, r2
   16c88:	1dfb      	adds	r3, r7, #7
   16c8a:	1c22      	adds	r2, r4, #0
   16c8c:	701a      	strb	r2, [r3, #0]
   16c8e:	1dbb      	adds	r3, r7, #6
   16c90:	1c02      	adds	r2, r0, #0
   16c92:	701a      	strb	r2, [r3, #0]
   16c94:	1d7b      	adds	r3, r7, #5
   16c96:	1c0a      	adds	r2, r1, #0
   16c98:	701a      	strb	r2, [r3, #0]
   16c9a:	1dfb      	adds	r3, r7, #7
   16c9c:	781b      	ldrb	r3, [r3, #0]
   16c9e:	2b08      	cmp	r3, #8
   16ca0:	d904      	bls.n	16cac <prvTraceSetPriorityProperty+0x30>
   16ca2:	4b1a      	ldr	r3, [pc, #104]	; (16d0c <prvTraceSetPriorityProperty+0x90>)
   16ca4:	0018      	movs	r0, r3
   16ca6:	4b1a      	ldr	r3, [pc, #104]	; (16d10 <prvTraceSetPriorityProperty+0x94>)
   16ca8:	4798      	blx	r3
   16caa:	e02c      	b.n	16d06 <prvTraceSetPriorityProperty+0x8a>
   16cac:	4b19      	ldr	r3, [pc, #100]	; (16d14 <prvTraceSetPriorityProperty+0x98>)
   16cae:	681a      	ldr	r2, [r3, #0]
   16cb0:	1dfb      	adds	r3, r7, #7
   16cb2:	781b      	ldrb	r3, [r3, #0]
   16cb4:	2164      	movs	r1, #100	; 0x64
   16cb6:	18d3      	adds	r3, r2, r3
   16cb8:	185b      	adds	r3, r3, r1
   16cba:	781b      	ldrb	r3, [r3, #0]
   16cbc:	1dba      	adds	r2, r7, #6
   16cbe:	7812      	ldrb	r2, [r2, #0]
   16cc0:	429a      	cmp	r2, r3
   16cc2:	d904      	bls.n	16cce <prvTraceSetPriorityProperty+0x52>
   16cc4:	4b14      	ldr	r3, [pc, #80]	; (16d18 <prvTraceSetPriorityProperty+0x9c>)
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b11      	ldr	r3, [pc, #68]	; (16d10 <prvTraceSetPriorityProperty+0x94>)
   16cca:	4798      	blx	r3
   16ccc:	e01b      	b.n	16d06 <prvTraceSetPriorityProperty+0x8a>
   16cce:	4b11      	ldr	r3, [pc, #68]	; (16d14 <prvTraceSetPriorityProperty+0x98>)
   16cd0:	681c      	ldr	r4, [r3, #0]
   16cd2:	1dfb      	adds	r3, r7, #7
   16cd4:	781a      	ldrb	r2, [r3, #0]
   16cd6:	1dbb      	adds	r3, r7, #6
   16cd8:	781b      	ldrb	r3, [r3, #0]
   16cda:	0011      	movs	r1, r2
   16cdc:	0018      	movs	r0, r3
   16cde:	4b0f      	ldr	r3, [pc, #60]	; (16d1c <prvTraceSetPriorityProperty+0xa0>)
   16ce0:	4798      	blx	r3
   16ce2:	0003      	movs	r3, r0
   16ce4:	0018      	movs	r0, r3
   16ce6:	4b0b      	ldr	r3, [pc, #44]	; (16d14 <prvTraceSetPriorityProperty+0x98>)
   16ce8:	681a      	ldr	r2, [r3, #0]
   16cea:	1dfb      	adds	r3, r7, #7
   16cec:	781b      	ldrb	r3, [r3, #0]
   16cee:	2170      	movs	r1, #112	; 0x70
   16cf0:	18d3      	adds	r3, r2, r3
   16cf2:	185b      	adds	r3, r3, r1
   16cf4:	781b      	ldrb	r3, [r3, #0]
   16cf6:	18c3      	adds	r3, r0, r3
   16cf8:	3301      	adds	r3, #1
   16cfa:	229c      	movs	r2, #156	; 0x9c
   16cfc:	18e3      	adds	r3, r4, r3
   16cfe:	189b      	adds	r3, r3, r2
   16d00:	1d7a      	adds	r2, r7, #5
   16d02:	7812      	ldrb	r2, [r2, #0]
   16d04:	701a      	strb	r2, [r3, #0]
   16d06:	46bd      	mov	sp, r7
   16d08:	b003      	add	sp, #12
   16d0a:	bd90      	pop	{r4, r7, pc}
   16d0c:	00034f80 	.word	0x00034f80
   16d10:	00017605 	.word	0x00017605
   16d14:	20000c34 	.word	0x20000c34
   16d18:	00034fcc 	.word	0x00034fcc
   16d1c:	00017211 	.word	0x00017211

00016d20 <prvTraceGetPriorityProperty>:
   16d20:	b590      	push	{r4, r7, lr}
   16d22:	b083      	sub	sp, #12
   16d24:	af00      	add	r7, sp, #0
   16d26:	0002      	movs	r2, r0
   16d28:	1dfb      	adds	r3, r7, #7
   16d2a:	701a      	strb	r2, [r3, #0]
   16d2c:	1dbb      	adds	r3, r7, #6
   16d2e:	1c0a      	adds	r2, r1, #0
   16d30:	701a      	strb	r2, [r3, #0]
   16d32:	1dfb      	adds	r3, r7, #7
   16d34:	781b      	ldrb	r3, [r3, #0]
   16d36:	2b08      	cmp	r3, #8
   16d38:	d905      	bls.n	16d46 <prvTraceGetPriorityProperty+0x26>
   16d3a:	4b1b      	ldr	r3, [pc, #108]	; (16da8 <prvTraceGetPriorityProperty+0x88>)
   16d3c:	0018      	movs	r0, r3
   16d3e:	4b1b      	ldr	r3, [pc, #108]	; (16dac <prvTraceGetPriorityProperty+0x8c>)
   16d40:	4798      	blx	r3
   16d42:	2300      	movs	r3, #0
   16d44:	e02b      	b.n	16d9e <prvTraceGetPriorityProperty+0x7e>
   16d46:	4b1a      	ldr	r3, [pc, #104]	; (16db0 <prvTraceGetPriorityProperty+0x90>)
   16d48:	681a      	ldr	r2, [r3, #0]
   16d4a:	1dfb      	adds	r3, r7, #7
   16d4c:	781b      	ldrb	r3, [r3, #0]
   16d4e:	2164      	movs	r1, #100	; 0x64
   16d50:	18d3      	adds	r3, r2, r3
   16d52:	185b      	adds	r3, r3, r1
   16d54:	781b      	ldrb	r3, [r3, #0]
   16d56:	1dba      	adds	r2, r7, #6
   16d58:	7812      	ldrb	r2, [r2, #0]
   16d5a:	429a      	cmp	r2, r3
   16d5c:	d905      	bls.n	16d6a <prvTraceGetPriorityProperty+0x4a>
   16d5e:	4b15      	ldr	r3, [pc, #84]	; (16db4 <prvTraceGetPriorityProperty+0x94>)
   16d60:	0018      	movs	r0, r3
   16d62:	4b12      	ldr	r3, [pc, #72]	; (16dac <prvTraceGetPriorityProperty+0x8c>)
   16d64:	4798      	blx	r3
   16d66:	2300      	movs	r3, #0
   16d68:	e019      	b.n	16d9e <prvTraceGetPriorityProperty+0x7e>
   16d6a:	4b11      	ldr	r3, [pc, #68]	; (16db0 <prvTraceGetPriorityProperty+0x90>)
   16d6c:	681c      	ldr	r4, [r3, #0]
   16d6e:	1dfb      	adds	r3, r7, #7
   16d70:	781a      	ldrb	r2, [r3, #0]
   16d72:	1dbb      	adds	r3, r7, #6
   16d74:	781b      	ldrb	r3, [r3, #0]
   16d76:	0011      	movs	r1, r2
   16d78:	0018      	movs	r0, r3
   16d7a:	4b0f      	ldr	r3, [pc, #60]	; (16db8 <prvTraceGetPriorityProperty+0x98>)
   16d7c:	4798      	blx	r3
   16d7e:	0003      	movs	r3, r0
   16d80:	0018      	movs	r0, r3
   16d82:	4b0b      	ldr	r3, [pc, #44]	; (16db0 <prvTraceGetPriorityProperty+0x90>)
   16d84:	681a      	ldr	r2, [r3, #0]
   16d86:	1dfb      	adds	r3, r7, #7
   16d88:	781b      	ldrb	r3, [r3, #0]
   16d8a:	2170      	movs	r1, #112	; 0x70
   16d8c:	18d3      	adds	r3, r2, r3
   16d8e:	185b      	adds	r3, r3, r1
   16d90:	781b      	ldrb	r3, [r3, #0]
   16d92:	18c3      	adds	r3, r0, r3
   16d94:	3301      	adds	r3, #1
   16d96:	229c      	movs	r2, #156	; 0x9c
   16d98:	18e3      	adds	r3, r4, r3
   16d9a:	189b      	adds	r3, r3, r2
   16d9c:	781b      	ldrb	r3, [r3, #0]
   16d9e:	0018      	movs	r0, r3
   16da0:	46bd      	mov	sp, r7
   16da2:	b003      	add	sp, #12
   16da4:	bd90      	pop	{r4, r7, pc}
   16da6:	46c0      	nop			; (mov r8, r8)
   16da8:	0003500c 	.word	0x0003500c
   16dac:	00017605 	.word	0x00017605
   16db0:	20000c34 	.word	0x20000c34
   16db4:	00035058 	.word	0x00035058
   16db8:	00017211 	.word	0x00017211

00016dbc <prvTraceSetObjectState>:
   16dbc:	b590      	push	{r4, r7, lr}
   16dbe:	b083      	sub	sp, #12
   16dc0:	af00      	add	r7, sp, #0
   16dc2:	0004      	movs	r4, r0
   16dc4:	0008      	movs	r0, r1
   16dc6:	0011      	movs	r1, r2
   16dc8:	1dfb      	adds	r3, r7, #7
   16dca:	1c22      	adds	r2, r4, #0
   16dcc:	701a      	strb	r2, [r3, #0]
   16dce:	1dbb      	adds	r3, r7, #6
   16dd0:	1c02      	adds	r2, r0, #0
   16dd2:	701a      	strb	r2, [r3, #0]
   16dd4:	1d7b      	adds	r3, r7, #5
   16dd6:	1c0a      	adds	r2, r1, #0
   16dd8:	701a      	strb	r2, [r3, #0]
   16dda:	1dfb      	adds	r3, r7, #7
   16ddc:	781b      	ldrb	r3, [r3, #0]
   16dde:	2b08      	cmp	r3, #8
   16de0:	d904      	bls.n	16dec <prvTraceSetObjectState+0x30>
   16de2:	4b1a      	ldr	r3, [pc, #104]	; (16e4c <prvTraceSetObjectState+0x90>)
   16de4:	0018      	movs	r0, r3
   16de6:	4b1a      	ldr	r3, [pc, #104]	; (16e50 <prvTraceSetObjectState+0x94>)
   16de8:	4798      	blx	r3
   16dea:	e02b      	b.n	16e44 <prvTraceSetObjectState+0x88>
   16dec:	4b19      	ldr	r3, [pc, #100]	; (16e54 <prvTraceSetObjectState+0x98>)
   16dee:	681a      	ldr	r2, [r3, #0]
   16df0:	1dfb      	adds	r3, r7, #7
   16df2:	781b      	ldrb	r3, [r3, #0]
   16df4:	2164      	movs	r1, #100	; 0x64
   16df6:	18d3      	adds	r3, r2, r3
   16df8:	185b      	adds	r3, r3, r1
   16dfa:	781b      	ldrb	r3, [r3, #0]
   16dfc:	1dba      	adds	r2, r7, #6
   16dfe:	7812      	ldrb	r2, [r2, #0]
   16e00:	429a      	cmp	r2, r3
   16e02:	d904      	bls.n	16e0e <prvTraceSetObjectState+0x52>
   16e04:	4b14      	ldr	r3, [pc, #80]	; (16e58 <prvTraceSetObjectState+0x9c>)
   16e06:	0018      	movs	r0, r3
   16e08:	4b11      	ldr	r3, [pc, #68]	; (16e50 <prvTraceSetObjectState+0x94>)
   16e0a:	4798      	blx	r3
   16e0c:	e01a      	b.n	16e44 <prvTraceSetObjectState+0x88>
   16e0e:	4b11      	ldr	r3, [pc, #68]	; (16e54 <prvTraceSetObjectState+0x98>)
   16e10:	681c      	ldr	r4, [r3, #0]
   16e12:	1dfb      	adds	r3, r7, #7
   16e14:	781a      	ldrb	r2, [r3, #0]
   16e16:	1dbb      	adds	r3, r7, #6
   16e18:	781b      	ldrb	r3, [r3, #0]
   16e1a:	0011      	movs	r1, r2
   16e1c:	0018      	movs	r0, r3
   16e1e:	4b0f      	ldr	r3, [pc, #60]	; (16e5c <prvTraceSetObjectState+0xa0>)
   16e20:	4798      	blx	r3
   16e22:	0003      	movs	r3, r0
   16e24:	0018      	movs	r0, r3
   16e26:	4b0b      	ldr	r3, [pc, #44]	; (16e54 <prvTraceSetObjectState+0x98>)
   16e28:	681a      	ldr	r2, [r3, #0]
   16e2a:	1dfb      	adds	r3, r7, #7
   16e2c:	781b      	ldrb	r3, [r3, #0]
   16e2e:	2170      	movs	r1, #112	; 0x70
   16e30:	18d3      	adds	r3, r2, r3
   16e32:	185b      	adds	r3, r3, r1
   16e34:	781b      	ldrb	r3, [r3, #0]
   16e36:	18c3      	adds	r3, r0, r3
   16e38:	229c      	movs	r2, #156	; 0x9c
   16e3a:	18e3      	adds	r3, r4, r3
   16e3c:	189b      	adds	r3, r3, r2
   16e3e:	1d7a      	adds	r2, r7, #5
   16e40:	7812      	ldrb	r2, [r2, #0]
   16e42:	701a      	strb	r2, [r3, #0]
   16e44:	46bd      	mov	sp, r7
   16e46:	b003      	add	sp, #12
   16e48:	bd90      	pop	{r4, r7, pc}
   16e4a:	46c0      	nop			; (mov r8, r8)
   16e4c:	00035098 	.word	0x00035098
   16e50:	00017605 	.word	0x00017605
   16e54:	20000c34 	.word	0x20000c34
   16e58:	000350dc 	.word	0x000350dc
   16e5c:	00017211 	.word	0x00017211

00016e60 <prvTraceGetObjectState>:
   16e60:	b590      	push	{r4, r7, lr}
   16e62:	b083      	sub	sp, #12
   16e64:	af00      	add	r7, sp, #0
   16e66:	0002      	movs	r2, r0
   16e68:	1dfb      	adds	r3, r7, #7
   16e6a:	701a      	strb	r2, [r3, #0]
   16e6c:	1dbb      	adds	r3, r7, #6
   16e6e:	1c0a      	adds	r2, r1, #0
   16e70:	701a      	strb	r2, [r3, #0]
   16e72:	1dfb      	adds	r3, r7, #7
   16e74:	781b      	ldrb	r3, [r3, #0]
   16e76:	2b08      	cmp	r3, #8
   16e78:	d905      	bls.n	16e86 <prvTraceGetObjectState+0x26>
   16e7a:	4b1a      	ldr	r3, [pc, #104]	; (16ee4 <prvTraceGetObjectState+0x84>)
   16e7c:	0018      	movs	r0, r3
   16e7e:	4b1a      	ldr	r3, [pc, #104]	; (16ee8 <prvTraceGetObjectState+0x88>)
   16e80:	4798      	blx	r3
   16e82:	2300      	movs	r3, #0
   16e84:	e02a      	b.n	16edc <prvTraceGetObjectState+0x7c>
   16e86:	4b19      	ldr	r3, [pc, #100]	; (16eec <prvTraceGetObjectState+0x8c>)
   16e88:	681a      	ldr	r2, [r3, #0]
   16e8a:	1dfb      	adds	r3, r7, #7
   16e8c:	781b      	ldrb	r3, [r3, #0]
   16e8e:	2164      	movs	r1, #100	; 0x64
   16e90:	18d3      	adds	r3, r2, r3
   16e92:	185b      	adds	r3, r3, r1
   16e94:	781b      	ldrb	r3, [r3, #0]
   16e96:	1dba      	adds	r2, r7, #6
   16e98:	7812      	ldrb	r2, [r2, #0]
   16e9a:	429a      	cmp	r2, r3
   16e9c:	d905      	bls.n	16eaa <prvTraceGetObjectState+0x4a>
   16e9e:	4b14      	ldr	r3, [pc, #80]	; (16ef0 <prvTraceGetObjectState+0x90>)
   16ea0:	0018      	movs	r0, r3
   16ea2:	4b11      	ldr	r3, [pc, #68]	; (16ee8 <prvTraceGetObjectState+0x88>)
   16ea4:	4798      	blx	r3
   16ea6:	2300      	movs	r3, #0
   16ea8:	e018      	b.n	16edc <prvTraceGetObjectState+0x7c>
   16eaa:	4b10      	ldr	r3, [pc, #64]	; (16eec <prvTraceGetObjectState+0x8c>)
   16eac:	681c      	ldr	r4, [r3, #0]
   16eae:	1dfb      	adds	r3, r7, #7
   16eb0:	781a      	ldrb	r2, [r3, #0]
   16eb2:	1dbb      	adds	r3, r7, #6
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	0011      	movs	r1, r2
   16eb8:	0018      	movs	r0, r3
   16eba:	4b0e      	ldr	r3, [pc, #56]	; (16ef4 <prvTraceGetObjectState+0x94>)
   16ebc:	4798      	blx	r3
   16ebe:	0003      	movs	r3, r0
   16ec0:	0018      	movs	r0, r3
   16ec2:	4b0a      	ldr	r3, [pc, #40]	; (16eec <prvTraceGetObjectState+0x8c>)
   16ec4:	681a      	ldr	r2, [r3, #0]
   16ec6:	1dfb      	adds	r3, r7, #7
   16ec8:	781b      	ldrb	r3, [r3, #0]
   16eca:	2170      	movs	r1, #112	; 0x70
   16ecc:	18d3      	adds	r3, r2, r3
   16ece:	185b      	adds	r3, r3, r1
   16ed0:	781b      	ldrb	r3, [r3, #0]
   16ed2:	18c3      	adds	r3, r0, r3
   16ed4:	229c      	movs	r2, #156	; 0x9c
   16ed6:	18e3      	adds	r3, r4, r3
   16ed8:	189b      	adds	r3, r3, r2
   16eda:	781b      	ldrb	r3, [r3, #0]
   16edc:	0018      	movs	r0, r3
   16ede:	46bd      	mov	sp, r7
   16ee0:	b003      	add	sp, #12
   16ee2:	bd90      	pop	{r4, r7, pc}
   16ee4:	00035118 	.word	0x00035118
   16ee8:	00017605 	.word	0x00017605
   16eec:	20000c34 	.word	0x20000c34
   16ef0:	0003515c 	.word	0x0003515c
   16ef4:	00017211 	.word	0x00017211

00016ef8 <prvTraceSetTaskInstanceFinished>:
   16ef8:	b590      	push	{r4, r7, lr}
   16efa:	b083      	sub	sp, #12
   16efc:	af00      	add	r7, sp, #0
   16efe:	0002      	movs	r2, r0
   16f00:	1dfb      	adds	r3, r7, #7
   16f02:	701a      	strb	r2, [r3, #0]
   16f04:	4b11      	ldr	r3, [pc, #68]	; (16f4c <prvTraceSetTaskInstanceFinished+0x54>)
   16f06:	681b      	ldr	r3, [r3, #0]
   16f08:	2267      	movs	r2, #103	; 0x67
   16f0a:	5c9b      	ldrb	r3, [r3, r2]
   16f0c:	1dfa      	adds	r2, r7, #7
   16f0e:	7812      	ldrb	r2, [r2, #0]
   16f10:	429a      	cmp	r2, r3
   16f12:	d904      	bls.n	16f1e <prvTraceSetTaskInstanceFinished+0x26>
   16f14:	4b0e      	ldr	r3, [pc, #56]	; (16f50 <prvTraceSetTaskInstanceFinished+0x58>)
   16f16:	0018      	movs	r0, r3
   16f18:	4b0e      	ldr	r3, [pc, #56]	; (16f54 <prvTraceSetTaskInstanceFinished+0x5c>)
   16f1a:	4798      	blx	r3
   16f1c:	e013      	b.n	16f46 <prvTraceSetTaskInstanceFinished+0x4e>
   16f1e:	4b0b      	ldr	r3, [pc, #44]	; (16f4c <prvTraceSetTaskInstanceFinished+0x54>)
   16f20:	681c      	ldr	r4, [r3, #0]
   16f22:	1dfb      	adds	r3, r7, #7
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	2103      	movs	r1, #3
   16f28:	0018      	movs	r0, r3
   16f2a:	4b0b      	ldr	r3, [pc, #44]	; (16f58 <prvTraceSetTaskInstanceFinished+0x60>)
   16f2c:	4798      	blx	r3
   16f2e:	0003      	movs	r3, r0
   16f30:	0019      	movs	r1, r3
   16f32:	4b06      	ldr	r3, [pc, #24]	; (16f4c <prvTraceSetTaskInstanceFinished+0x54>)
   16f34:	681b      	ldr	r3, [r3, #0]
   16f36:	2273      	movs	r2, #115	; 0x73
   16f38:	5c9b      	ldrb	r3, [r3, r2]
   16f3a:	18cb      	adds	r3, r1, r3
   16f3c:	229c      	movs	r2, #156	; 0x9c
   16f3e:	18e3      	adds	r3, r4, r3
   16f40:	189b      	adds	r3, r3, r2
   16f42:	2200      	movs	r2, #0
   16f44:	701a      	strb	r2, [r3, #0]
   16f46:	46bd      	mov	sp, r7
   16f48:	b003      	add	sp, #12
   16f4a:	bd90      	pop	{r4, r7, pc}
   16f4c:	20000c34 	.word	0x20000c34
   16f50:	00035198 	.word	0x00035198
   16f54:	00017605 	.word	0x00017605
   16f58:	00017211 	.word	0x00017211

00016f5c <prvTraceInitTraceData>:
   16f5c:	b580      	push	{r7, lr}
   16f5e:	af00      	add	r7, sp, #0
   16f60:	4b75      	ldr	r3, [pc, #468]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	2b00      	cmp	r3, #0
   16f66:	d103      	bne.n	16f70 <prvTraceInitTraceData+0x14>
   16f68:	4b73      	ldr	r3, [pc, #460]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16f6a:	4a74      	ldr	r2, [pc, #464]	; (1713c <prvTraceInitTraceData+0x1e0>)
   16f6c:	601a      	str	r2, [r3, #0]
   16f6e:	e006      	b.n	16f7e <prvTraceInitTraceData+0x22>
   16f70:	4b71      	ldr	r3, [pc, #452]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16f72:	681b      	ldr	r3, [r3, #0]
   16f74:	781b      	ldrb	r3, [r3, #0]
   16f76:	b2db      	uxtb	r3, r3
   16f78:	2b01      	cmp	r3, #1
   16f7a:	d100      	bne.n	16f7e <prvTraceInitTraceData+0x22>
   16f7c:	e0d8      	b.n	17130 <prvTraceInitTraceData+0x1d4>
   16f7e:	4b70      	ldr	r3, [pc, #448]	; (17140 <prvTraceInitTraceData+0x1e4>)
   16f80:	681a      	ldr	r2, [r3, #0]
   16f82:	4b70      	ldr	r3, [pc, #448]	; (17144 <prvTraceInitTraceData+0x1e8>)
   16f84:	601a      	str	r2, [r3, #0]
   16f86:	4b6c      	ldr	r3, [pc, #432]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16f88:	6818      	ldr	r0, [r3, #0]
   16f8a:	23bd      	movs	r3, #189	; 0xbd
   16f8c:	011b      	lsls	r3, r3, #4
   16f8e:	001a      	movs	r2, r3
   16f90:	2100      	movs	r1, #0
   16f92:	4b6d      	ldr	r3, [pc, #436]	; (17148 <prvTraceInitTraceData+0x1ec>)
   16f94:	4798      	blx	r3
   16f96:	4b68      	ldr	r3, [pc, #416]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16f98:	681b      	ldr	r3, [r3, #0]
   16f9a:	4a6c      	ldr	r2, [pc, #432]	; (1714c <prvTraceInitTraceData+0x1f0>)
   16f9c:	819a      	strh	r2, [r3, #12]
   16f9e:	4b66      	ldr	r3, [pc, #408]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fa0:	681b      	ldr	r3, [r3, #0]
   16fa2:	2205      	movs	r2, #5
   16fa4:	739a      	strb	r2, [r3, #14]
   16fa6:	4b64      	ldr	r3, [pc, #400]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fa8:	681b      	ldr	r3, [r3, #0]
   16faa:	2200      	movs	r2, #0
   16fac:	73da      	strb	r2, [r3, #15]
   16fae:	4b62      	ldr	r3, [pc, #392]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fb0:	681b      	ldr	r3, [r3, #0]
   16fb2:	22bd      	movs	r2, #189	; 0xbd
   16fb4:	0112      	lsls	r2, r2, #4
   16fb6:	611a      	str	r2, [r3, #16]
   16fb8:	4b5f      	ldr	r3, [pc, #380]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fba:	681b      	ldr	r3, [r3, #0]
   16fbc:	2296      	movs	r2, #150	; 0x96
   16fbe:	0052      	lsls	r2, r2, #1
   16fc0:	619a      	str	r2, [r3, #24]
   16fc2:	4b5d      	ldr	r3, [pc, #372]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	4a62      	ldr	r2, [pc, #392]	; (17150 <prvTraceInitTraceData+0x1f4>)
   16fc8:	655a      	str	r2, [r3, #84]	; 0x54
   16fca:	4b5b      	ldr	r3, [pc, #364]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fcc:	681b      	ldr	r3, [r3, #0]
   16fce:	2200      	movs	r2, #0
   16fd0:	659a      	str	r2, [r3, #88]	; 0x58
   16fd2:	4b59      	ldr	r3, [pc, #356]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fd4:	681b      	ldr	r3, [r3, #0]
   16fd6:	2200      	movs	r2, #0
   16fd8:	635a      	str	r2, [r3, #52]	; 0x34
   16fda:	4b5e      	ldr	r3, [pc, #376]	; (17154 <prvTraceInitTraceData+0x1f8>)
   16fdc:	4798      	blx	r3
   16fde:	4b56      	ldr	r3, [pc, #344]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fe0:	681b      	ldr	r3, [r3, #0]
   16fe2:	4a5d      	ldr	r2, [pc, #372]	; (17158 <prvTraceInitTraceData+0x1fc>)
   16fe4:	495d      	ldr	r1, [pc, #372]	; (1715c <prvTraceInitTraceData+0x200>)
   16fe6:	5099      	str	r1, [r3, r2]
   16fe8:	4b53      	ldr	r3, [pc, #332]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16fea:	681a      	ldr	r2, [r3, #0]
   16fec:	23ac      	movs	r3, #172	; 0xac
   16fee:	00db      	lsls	r3, r3, #3
   16ff0:	21c8      	movs	r1, #200	; 0xc8
   16ff2:	50d1      	str	r1, [r2, r3]
   16ff4:	4b50      	ldr	r3, [pc, #320]	; (17138 <prvTraceInitTraceData+0x1dc>)
   16ff6:	681b      	ldr	r3, [r3, #0]
   16ff8:	4a59      	ldr	r2, [pc, #356]	; (17160 <prvTraceInitTraceData+0x204>)
   16ffa:	2101      	movs	r1, #1
   16ffc:	5099      	str	r1, [r3, r2]
   16ffe:	4b4e      	ldr	r3, [pc, #312]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17000:	681a      	ldr	r2, [r3, #0]
   17002:	23d7      	movs	r3, #215	; 0xd7
   17004:	00db      	lsls	r3, r3, #3
   17006:	4957      	ldr	r1, [pc, #348]	; (17164 <prvTraceInitTraceData+0x208>)
   17008:	50d1      	str	r1, [r2, r3]
   1700a:	4b4b      	ldr	r3, [pc, #300]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1700c:	681b      	ldr	r3, [r3, #0]
   1700e:	4a56      	ldr	r2, [pc, #344]	; (17168 <prvTraceInitTraceData+0x20c>)
   17010:	4694      	mov	ip, r2
   17012:	4463      	add	r3, ip
   17014:	4955      	ldr	r1, [pc, #340]	; (1716c <prvTraceInitTraceData+0x210>)
   17016:	2250      	movs	r2, #80	; 0x50
   17018:	0018      	movs	r0, r3
   1701a:	4b55      	ldr	r3, [pc, #340]	; (17170 <prvTraceInitTraceData+0x214>)
   1701c:	4798      	blx	r3
   1701e:	4b46      	ldr	r3, [pc, #280]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17020:	681b      	ldr	r3, [r3, #0]
   17022:	4a54      	ldr	r2, [pc, #336]	; (17174 <prvTraceInitTraceData+0x218>)
   17024:	4954      	ldr	r1, [pc, #336]	; (17178 <prvTraceInitTraceData+0x21c>)
   17026:	5099      	str	r1, [r3, r2]
   17028:	4b43      	ldr	r3, [pc, #268]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1702a:	681b      	ldr	r3, [r3, #0]
   1702c:	4a53      	ldr	r2, [pc, #332]	; (1717c <prvTraceInitTraceData+0x220>)
   1702e:	210a      	movs	r1, #10
   17030:	5499      	strb	r1, [r3, r2]
   17032:	4b41      	ldr	r3, [pc, #260]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17034:	681b      	ldr	r3, [r3, #0]
   17036:	4a52      	ldr	r2, [pc, #328]	; (17180 <prvTraceInitTraceData+0x224>)
   17038:	210b      	movs	r1, #11
   1703a:	5499      	strb	r1, [r3, r2]
   1703c:	4b3e      	ldr	r3, [pc, #248]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1703e:	681b      	ldr	r3, [r3, #0]
   17040:	4a50      	ldr	r2, [pc, #320]	; (17184 <prvTraceInitTraceData+0x228>)
   17042:	210c      	movs	r1, #12
   17044:	5499      	strb	r1, [r3, r2]
   17046:	4b3c      	ldr	r3, [pc, #240]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17048:	681b      	ldr	r3, [r3, #0]
   1704a:	4a4f      	ldr	r2, [pc, #316]	; (17188 <prvTraceInitTraceData+0x22c>)
   1704c:	210d      	movs	r1, #13
   1704e:	5499      	strb	r1, [r3, r2]
   17050:	4b39      	ldr	r3, [pc, #228]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17052:	681b      	ldr	r3, [r3, #0]
   17054:	4a4d      	ldr	r2, [pc, #308]	; (1718c <prvTraceInitTraceData+0x230>)
   17056:	2171      	movs	r1, #113	; 0x71
   17058:	5499      	strb	r1, [r3, r2]
   1705a:	4b37      	ldr	r3, [pc, #220]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1705c:	681b      	ldr	r3, [r3, #0]
   1705e:	4a4c      	ldr	r2, [pc, #304]	; (17190 <prvTraceInitTraceData+0x234>)
   17060:	2172      	movs	r1, #114	; 0x72
   17062:	5499      	strb	r1, [r3, r2]
   17064:	4b34      	ldr	r3, [pc, #208]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	4a4a      	ldr	r2, [pc, #296]	; (17194 <prvTraceInitTraceData+0x238>)
   1706a:	2173      	movs	r1, #115	; 0x73
   1706c:	5499      	strb	r1, [r3, r2]
   1706e:	4b32      	ldr	r3, [pc, #200]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17070:	681b      	ldr	r3, [r3, #0]
   17072:	4a49      	ldr	r2, [pc, #292]	; (17198 <prvTraceInitTraceData+0x23c>)
   17074:	2174      	movs	r1, #116	; 0x74
   17076:	5499      	strb	r1, [r3, r2]
   17078:	4b2f      	ldr	r3, [pc, #188]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1707a:	681b      	ldr	r3, [r3, #0]
   1707c:	4a47      	ldr	r2, [pc, #284]	; (1719c <prvTraceInitTraceData+0x240>)
   1707e:	21f1      	movs	r1, #241	; 0xf1
   17080:	5499      	strb	r1, [r3, r2]
   17082:	4b2d      	ldr	r3, [pc, #180]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17084:	681b      	ldr	r3, [r3, #0]
   17086:	4a46      	ldr	r2, [pc, #280]	; (171a0 <prvTraceInitTraceData+0x244>)
   17088:	21f2      	movs	r1, #242	; 0xf2
   1708a:	5499      	strb	r1, [r3, r2]
   1708c:	4b2a      	ldr	r3, [pc, #168]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1708e:	681b      	ldr	r3, [r3, #0]
   17090:	4a44      	ldr	r2, [pc, #272]	; (171a4 <prvTraceInitTraceData+0x248>)
   17092:	21f3      	movs	r1, #243	; 0xf3
   17094:	5499      	strb	r1, [r3, r2]
   17096:	4b28      	ldr	r3, [pc, #160]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17098:	681b      	ldr	r3, [r3, #0]
   1709a:	4a43      	ldr	r2, [pc, #268]	; (171a8 <prvTraceInitTraceData+0x24c>)
   1709c:	21f4      	movs	r1, #244	; 0xf4
   1709e:	5499      	strb	r1, [r3, r2]
   170a0:	4b42      	ldr	r3, [pc, #264]	; (171ac <prvTraceInitTraceData+0x250>)
   170a2:	4798      	blx	r3
   170a4:	4b24      	ldr	r3, [pc, #144]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	22f4      	movs	r2, #244	; 0xf4
   170aa:	72da      	strb	r2, [r3, #11]
   170ac:	4b22      	ldr	r3, [pc, #136]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170ae:	681b      	ldr	r3, [r3, #0]
   170b0:	22f3      	movs	r2, #243	; 0xf3
   170b2:	729a      	strb	r2, [r3, #10]
   170b4:	4b20      	ldr	r3, [pc, #128]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170b6:	681b      	ldr	r3, [r3, #0]
   170b8:	22f2      	movs	r2, #242	; 0xf2
   170ba:	725a      	strb	r2, [r3, #9]
   170bc:	4b1e      	ldr	r3, [pc, #120]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170be:	681b      	ldr	r3, [r3, #0]
   170c0:	22f1      	movs	r2, #241	; 0xf1
   170c2:	721a      	strb	r2, [r3, #8]
   170c4:	4b1c      	ldr	r3, [pc, #112]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170c6:	681b      	ldr	r3, [r3, #0]
   170c8:	2274      	movs	r2, #116	; 0x74
   170ca:	71da      	strb	r2, [r3, #7]
   170cc:	4b1a      	ldr	r3, [pc, #104]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170ce:	681b      	ldr	r3, [r3, #0]
   170d0:	2273      	movs	r2, #115	; 0x73
   170d2:	719a      	strb	r2, [r3, #6]
   170d4:	4b18      	ldr	r3, [pc, #96]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170d6:	681b      	ldr	r3, [r3, #0]
   170d8:	2272      	movs	r2, #114	; 0x72
   170da:	715a      	strb	r2, [r3, #5]
   170dc:	4b16      	ldr	r3, [pc, #88]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170de:	681b      	ldr	r3, [r3, #0]
   170e0:	2271      	movs	r2, #113	; 0x71
   170e2:	711a      	strb	r2, [r3, #4]
   170e4:	4b14      	ldr	r3, [pc, #80]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170e6:	681b      	ldr	r3, [r3, #0]
   170e8:	2204      	movs	r2, #4
   170ea:	70da      	strb	r2, [r3, #3]
   170ec:	4b12      	ldr	r3, [pc, #72]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170ee:	681b      	ldr	r3, [r3, #0]
   170f0:	2203      	movs	r2, #3
   170f2:	709a      	strb	r2, [r3, #2]
   170f4:	4b10      	ldr	r3, [pc, #64]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170f6:	681b      	ldr	r3, [r3, #0]
   170f8:	2202      	movs	r2, #2
   170fa:	705a      	strb	r2, [r3, #1]
   170fc:	4b0e      	ldr	r3, [pc, #56]	; (17138 <prvTraceInitTraceData+0x1dc>)
   170fe:	681b      	ldr	r3, [r3, #0]
   17100:	2201      	movs	r2, #1
   17102:	701a      	strb	r2, [r3, #0]
   17104:	4b2a      	ldr	r3, [pc, #168]	; (171b0 <prvTraceInitTraceData+0x254>)
   17106:	681b      	ldr	r3, [r3, #0]
   17108:	2b00      	cmp	r3, #0
   1710a:	d012      	beq.n	17132 <prvTraceInitTraceData+0x1d6>
   1710c:	4b0a      	ldr	r3, [pc, #40]	; (17138 <prvTraceInitTraceData+0x1dc>)
   1710e:	681b      	ldr	r3, [r3, #0]
   17110:	4a15      	ldr	r2, [pc, #84]	; (17168 <prvTraceInitTraceData+0x20c>)
   17112:	1898      	adds	r0, r3, r2
   17114:	4b26      	ldr	r3, [pc, #152]	; (171b0 <prvTraceInitTraceData+0x254>)
   17116:	681b      	ldr	r3, [r3, #0]
   17118:	2250      	movs	r2, #80	; 0x50
   1711a:	0019      	movs	r1, r3
   1711c:	4b14      	ldr	r3, [pc, #80]	; (17170 <prvTraceInitTraceData+0x214>)
   1711e:	4798      	blx	r3
   17120:	4b05      	ldr	r3, [pc, #20]	; (17138 <prvTraceInitTraceData+0x1dc>)
   17122:	681b      	ldr	r3, [r3, #0]
   17124:	4a23      	ldr	r2, [pc, #140]	; (171b4 <prvTraceInitTraceData+0x258>)
   17126:	2101      	movs	r1, #1
   17128:	5099      	str	r1, [r3, r2]
   1712a:	4b23      	ldr	r3, [pc, #140]	; (171b8 <prvTraceInitTraceData+0x25c>)
   1712c:	4798      	blx	r3
   1712e:	e000      	b.n	17132 <prvTraceInitTraceData+0x1d6>
   17130:	46c0      	nop			; (mov r8, r8)
   17132:	46bd      	mov	sp, r7
   17134:	bd80      	pop	{r7, pc}
   17136:	46c0      	nop			; (mov r8, r8)
   17138:	20000c34 	.word	0x20000c34
   1713c:	2000436c 	.word	0x2000436c
   17140:	e000e018 	.word	0xe000e018
   17144:	20004f3c 	.word	0x20004f3c
   17148:	00032203 	.word	0x00032203
   1714c:	00001aa1 	.word	0x00001aa1
   17150:	f0f0f0f0 	.word	0xf0f0f0f0
   17154:	000160c1 	.word	0x000160c1
   17158:	0000055c 	.word	0x0000055c
   1715c:	f1f1f1f1 	.word	0xf1f1f1f1
   17160:	00000564 	.word	0x00000564
   17164:	f2f2f2f2 	.word	0xf2f2f2f2
   17168:	000006bc 	.word	0x000006bc
   1716c:	000351e0 	.word	0x000351e0
   17170:	000174d1 	.word	0x000174d1
   17174:	0000070c 	.word	0x0000070c
   17178:	f3f3f3f3 	.word	0xf3f3f3f3
   1717c:	00000bc4 	.word	0x00000bc4
   17180:	00000bc5 	.word	0x00000bc5
   17184:	00000bc6 	.word	0x00000bc6
   17188:	00000bc7 	.word	0x00000bc7
   1718c:	00000bc8 	.word	0x00000bc8
   17190:	00000bc9 	.word	0x00000bc9
   17194:	00000bca 	.word	0x00000bca
   17198:	00000bcb 	.word	0x00000bcb
   1719c:	00000bcc 	.word	0x00000bcc
   171a0:	00000bcd 	.word	0x00000bcd
   171a4:	00000bce 	.word	0x00000bce
   171a8:	00000bcf 	.word	0x00000bcf
   171ac:	00016261 	.word	0x00016261
   171b0:	20000b94 	.word	0x20000b94
   171b4:	000006b4 	.word	0x000006b4
   171b8:	000164c9 	.word	0x000164c9

000171bc <prvTraceNextFreeEventBufferSlot>:
   171bc:	b580      	push	{r7, lr}
   171be:	af00      	add	r7, sp, #0
   171c0:	4b10      	ldr	r3, [pc, #64]	; (17204 <prvTraceNextFreeEventBufferSlot+0x48>)
   171c2:	681b      	ldr	r3, [r3, #0]
   171c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   171c6:	2b00      	cmp	r3, #0
   171c8:	d101      	bne.n	171ce <prvTraceNextFreeEventBufferSlot+0x12>
   171ca:	2300      	movs	r3, #0
   171cc:	e017      	b.n	171fe <prvTraceNextFreeEventBufferSlot+0x42>
   171ce:	4b0d      	ldr	r3, [pc, #52]	; (17204 <prvTraceNextFreeEventBufferSlot+0x48>)
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	69da      	ldr	r2, [r3, #28]
   171d4:	232c      	movs	r3, #44	; 0x2c
   171d6:	33ff      	adds	r3, #255	; 0xff
   171d8:	429a      	cmp	r2, r3
   171da:	d905      	bls.n	171e8 <prvTraceNextFreeEventBufferSlot+0x2c>
   171dc:	4b0a      	ldr	r3, [pc, #40]	; (17208 <prvTraceNextFreeEventBufferSlot+0x4c>)
   171de:	0018      	movs	r0, r3
   171e0:	4b0a      	ldr	r3, [pc, #40]	; (1720c <prvTraceNextFreeEventBufferSlot+0x50>)
   171e2:	4798      	blx	r3
   171e4:	2300      	movs	r3, #0
   171e6:	e00a      	b.n	171fe <prvTraceNextFreeEventBufferSlot+0x42>
   171e8:	4b06      	ldr	r3, [pc, #24]	; (17204 <prvTraceNextFreeEventBufferSlot+0x48>)
   171ea:	681a      	ldr	r2, [r3, #0]
   171ec:	4b05      	ldr	r3, [pc, #20]	; (17204 <prvTraceNextFreeEventBufferSlot+0x48>)
   171ee:	681b      	ldr	r3, [r3, #0]
   171f0:	69db      	ldr	r3, [r3, #28]
   171f2:	009b      	lsls	r3, r3, #2
   171f4:	21e2      	movs	r1, #226	; 0xe2
   171f6:	00c9      	lsls	r1, r1, #3
   171f8:	468c      	mov	ip, r1
   171fa:	4463      	add	r3, ip
   171fc:	18d3      	adds	r3, r2, r3
   171fe:	0018      	movs	r0, r3
   17200:	46bd      	mov	sp, r7
   17202:	bd80      	pop	{r7, pc}
   17204:	20000c34 	.word	0x20000c34
   17208:	000351f4 	.word	0x000351f4
   1720c:	00017605 	.word	0x00017605

00017210 <uiIndexOfObject>:
   17210:	b580      	push	{r7, lr}
   17212:	b082      	sub	sp, #8
   17214:	af00      	add	r7, sp, #0
   17216:	0002      	movs	r2, r0
   17218:	1dfb      	adds	r3, r7, #7
   1721a:	701a      	strb	r2, [r3, #0]
   1721c:	1dbb      	adds	r3, r7, #6
   1721e:	1c0a      	adds	r2, r1, #0
   17220:	701a      	strb	r2, [r3, #0]
   17222:	1dbb      	adds	r3, r7, #6
   17224:	781b      	ldrb	r3, [r3, #0]
   17226:	2b08      	cmp	r3, #8
   17228:	d905      	bls.n	17236 <uiIndexOfObject+0x26>
   1722a:	4b2a      	ldr	r3, [pc, #168]	; (172d4 <uiIndexOfObject+0xc4>)
   1722c:	0018      	movs	r0, r3
   1722e:	4b2a      	ldr	r3, [pc, #168]	; (172d8 <uiIndexOfObject+0xc8>)
   17230:	4798      	blx	r3
   17232:	2300      	movs	r3, #0
   17234:	e049      	b.n	172ca <uiIndexOfObject+0xba>
   17236:	1dfb      	adds	r3, r7, #7
   17238:	781b      	ldrb	r3, [r3, #0]
   1723a:	2b00      	cmp	r3, #0
   1723c:	d00b      	beq.n	17256 <uiIndexOfObject+0x46>
   1723e:	4b27      	ldr	r3, [pc, #156]	; (172dc <uiIndexOfObject+0xcc>)
   17240:	681a      	ldr	r2, [r3, #0]
   17242:	1dbb      	adds	r3, r7, #6
   17244:	781b      	ldrb	r3, [r3, #0]
   17246:	2164      	movs	r1, #100	; 0x64
   17248:	18d3      	adds	r3, r2, r3
   1724a:	185b      	adds	r3, r3, r1
   1724c:	781b      	ldrb	r3, [r3, #0]
   1724e:	1dfa      	adds	r2, r7, #7
   17250:	7812      	ldrb	r2, [r2, #0]
   17252:	429a      	cmp	r2, r3
   17254:	d905      	bls.n	17262 <uiIndexOfObject+0x52>
   17256:	4b22      	ldr	r3, [pc, #136]	; (172e0 <uiIndexOfObject+0xd0>)
   17258:	0018      	movs	r0, r3
   1725a:	4b1f      	ldr	r3, [pc, #124]	; (172d8 <uiIndexOfObject+0xc8>)
   1725c:	4798      	blx	r3
   1725e:	2300      	movs	r3, #0
   17260:	e033      	b.n	172ca <uiIndexOfObject+0xba>
   17262:	1dbb      	adds	r3, r7, #6
   17264:	781b      	ldrb	r3, [r3, #0]
   17266:	2b08      	cmp	r3, #8
   17268:	d82a      	bhi.n	172c0 <uiIndexOfObject+0xb0>
   1726a:	1dfb      	adds	r3, r7, #7
   1726c:	781b      	ldrb	r3, [r3, #0]
   1726e:	2b00      	cmp	r3, #0
   17270:	d026      	beq.n	172c0 <uiIndexOfObject+0xb0>
   17272:	4b1a      	ldr	r3, [pc, #104]	; (172dc <uiIndexOfObject+0xcc>)
   17274:	681a      	ldr	r2, [r3, #0]
   17276:	1dbb      	adds	r3, r7, #6
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	2164      	movs	r1, #100	; 0x64
   1727c:	18d3      	adds	r3, r2, r3
   1727e:	185b      	adds	r3, r3, r1
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	1dfa      	adds	r2, r7, #7
   17284:	7812      	ldrb	r2, [r2, #0]
   17286:	429a      	cmp	r2, r3
   17288:	d81a      	bhi.n	172c0 <uiIndexOfObject+0xb0>
   1728a:	4b14      	ldr	r3, [pc, #80]	; (172dc <uiIndexOfObject+0xcc>)
   1728c:	681a      	ldr	r2, [r3, #0]
   1728e:	1dbb      	adds	r3, r7, #6
   17290:	781b      	ldrb	r3, [r3, #0]
   17292:	3340      	adds	r3, #64	; 0x40
   17294:	005b      	lsls	r3, r3, #1
   17296:	18d3      	adds	r3, r2, r3
   17298:	3308      	adds	r3, #8
   1729a:	881a      	ldrh	r2, [r3, #0]
   1729c:	4b0f      	ldr	r3, [pc, #60]	; (172dc <uiIndexOfObject+0xcc>)
   1729e:	6819      	ldr	r1, [r3, #0]
   172a0:	1dbb      	adds	r3, r7, #6
   172a2:	781b      	ldrb	r3, [r3, #0]
   172a4:	207c      	movs	r0, #124	; 0x7c
   172a6:	18cb      	adds	r3, r1, r3
   172a8:	181b      	adds	r3, r3, r0
   172aa:	781b      	ldrb	r3, [r3, #0]
   172ac:	b29b      	uxth	r3, r3
   172ae:	1df9      	adds	r1, r7, #7
   172b0:	7809      	ldrb	r1, [r1, #0]
   172b2:	3901      	subs	r1, #1
   172b4:	b289      	uxth	r1, r1
   172b6:	434b      	muls	r3, r1
   172b8:	b29b      	uxth	r3, r3
   172ba:	18d3      	adds	r3, r2, r3
   172bc:	b29b      	uxth	r3, r3
   172be:	e004      	b.n	172ca <uiIndexOfObject+0xba>
   172c0:	4b08      	ldr	r3, [pc, #32]	; (172e4 <uiIndexOfObject+0xd4>)
   172c2:	0018      	movs	r0, r3
   172c4:	4b04      	ldr	r3, [pc, #16]	; (172d8 <uiIndexOfObject+0xc8>)
   172c6:	4798      	blx	r3
   172c8:	2300      	movs	r3, #0
   172ca:	0018      	movs	r0, r3
   172cc:	46bd      	mov	sp, r7
   172ce:	b002      	add	sp, #8
   172d0:	bd80      	pop	{r7, pc}
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	0003521c 	.word	0x0003521c
   172d8:	00017605 	.word	0x00017605
   172dc:	20000c34 	.word	0x20000c34
   172e0:	0003525c 	.word	0x0003525c
   172e4:	0003529c 	.word	0x0003529c

000172e8 <prvTraceGetObjectHandle>:
   172e8:	b580      	push	{r7, lr}
   172ea:	b088      	sub	sp, #32
   172ec:	af00      	add	r7, sp, #0
   172ee:	0002      	movs	r2, r0
   172f0:	1dfb      	adds	r3, r7, #7
   172f2:	701a      	strb	r2, [r3, #0]
   172f4:	4b5a      	ldr	r3, [pc, #360]	; (17460 <prvTraceGetObjectHandle+0x178>)
   172f6:	681b      	ldr	r3, [r3, #0]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d105      	bne.n	17308 <prvTraceGetObjectHandle+0x20>
   172fc:	4b59      	ldr	r3, [pc, #356]	; (17464 <prvTraceGetObjectHandle+0x17c>)
   172fe:	0018      	movs	r0, r3
   17300:	4b59      	ldr	r3, [pc, #356]	; (17468 <prvTraceGetObjectHandle+0x180>)
   17302:	4798      	blx	r3
   17304:	2300      	movs	r3, #0
   17306:	e0a7      	b.n	17458 <prvTraceGetObjectHandle+0x170>
   17308:	1dfb      	adds	r3, r7, #7
   1730a:	781b      	ldrb	r3, [r3, #0]
   1730c:	2b08      	cmp	r3, #8
   1730e:	d905      	bls.n	1731c <prvTraceGetObjectHandle+0x34>
   17310:	4b56      	ldr	r3, [pc, #344]	; (1746c <prvTraceGetObjectHandle+0x184>)
   17312:	0018      	movs	r0, r3
   17314:	4b54      	ldr	r3, [pc, #336]	; (17468 <prvTraceGetObjectHandle+0x180>)
   17316:	4798      	blx	r3
   17318:	2300      	movs	r3, #0
   1731a:	e09d      	b.n	17458 <prvTraceGetObjectHandle+0x170>
   1731c:	f3ef 8310 	mrs	r3, PRIMASK
   17320:	60fb      	str	r3, [r7, #12]
   17322:	68fb      	ldr	r3, [r7, #12]
   17324:	61bb      	str	r3, [r7, #24]
   17326:	2301      	movs	r3, #1
   17328:	613b      	str	r3, [r7, #16]
   1732a:	693b      	ldr	r3, [r7, #16]
   1732c:	f383 8810 	msr	PRIMASK, r3
   17330:	4b4f      	ldr	r3, [pc, #316]	; (17470 <prvTraceGetObjectHandle+0x188>)
   17332:	681b      	ldr	r3, [r3, #0]
   17334:	1c5a      	adds	r2, r3, #1
   17336:	4b4e      	ldr	r3, [pc, #312]	; (17470 <prvTraceGetObjectHandle+0x188>)
   17338:	601a      	str	r2, [r3, #0]
   1733a:	1dfb      	adds	r3, r7, #7
   1733c:	781a      	ldrb	r2, [r3, #0]
   1733e:	4b4d      	ldr	r3, [pc, #308]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17340:	0052      	lsls	r2, r2, #1
   17342:	5ad3      	ldrh	r3, [r2, r3]
   17344:	001a      	movs	r2, r3
   17346:	4b4c      	ldr	r3, [pc, #304]	; (17478 <prvTraceGetObjectHandle+0x190>)
   17348:	601a      	str	r2, [r3, #0]
   1734a:	4b4b      	ldr	r3, [pc, #300]	; (17478 <prvTraceGetObjectHandle+0x190>)
   1734c:	681b      	ldr	r3, [r3, #0]
   1734e:	4a49      	ldr	r2, [pc, #292]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17350:	2148      	movs	r1, #72	; 0x48
   17352:	18d3      	adds	r3, r2, r3
   17354:	185b      	adds	r3, r3, r1
   17356:	781b      	ldrb	r3, [r3, #0]
   17358:	2b00      	cmp	r3, #0
   1735a:	d117      	bne.n	1738c <prvTraceGetObjectHandle+0xa4>
   1735c:	4b46      	ldr	r3, [pc, #280]	; (17478 <prvTraceGetObjectHandle+0x190>)
   1735e:	681a      	ldr	r2, [r3, #0]
   17360:	4b45      	ldr	r3, [pc, #276]	; (17478 <prvTraceGetObjectHandle+0x190>)
   17362:	681b      	ldr	r3, [r3, #0]
   17364:	b2d9      	uxtb	r1, r3
   17366:	1dfb      	adds	r3, r7, #7
   17368:	781b      	ldrb	r3, [r3, #0]
   1736a:	4842      	ldr	r0, [pc, #264]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   1736c:	3308      	adds	r3, #8
   1736e:	005b      	lsls	r3, r3, #1
   17370:	18c3      	adds	r3, r0, r3
   17372:	3302      	adds	r3, #2
   17374:	881b      	ldrh	r3, [r3, #0]
   17376:	b2db      	uxtb	r3, r3
   17378:	1acb      	subs	r3, r1, r3
   1737a:	b2db      	uxtb	r3, r3
   1737c:	3301      	adds	r3, #1
   1737e:	b2d8      	uxtb	r0, r3
   17380:	4b3c      	ldr	r3, [pc, #240]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17382:	2148      	movs	r1, #72	; 0x48
   17384:	189b      	adds	r3, r3, r2
   17386:	185b      	adds	r3, r3, r1
   17388:	1c02      	adds	r2, r0, #0
   1738a:	701a      	strb	r2, [r3, #0]
   1738c:	4b3a      	ldr	r3, [pc, #232]	; (17478 <prvTraceGetObjectHandle+0x190>)
   1738e:	681a      	ldr	r2, [r3, #0]
   17390:	231f      	movs	r3, #31
   17392:	18fb      	adds	r3, r7, r3
   17394:	4937      	ldr	r1, [pc, #220]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17396:	2048      	movs	r0, #72	; 0x48
   17398:	188a      	adds	r2, r1, r2
   1739a:	1812      	adds	r2, r2, r0
   1739c:	7812      	ldrb	r2, [r2, #0]
   1739e:	701a      	strb	r2, [r3, #0]
   173a0:	1dfb      	adds	r3, r7, #7
   173a2:	781a      	ldrb	r2, [r3, #0]
   173a4:	4b33      	ldr	r3, [pc, #204]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   173a6:	0052      	lsls	r2, r2, #1
   173a8:	5ad2      	ldrh	r2, [r2, r3]
   173aa:	1dfb      	adds	r3, r7, #7
   173ac:	781b      	ldrb	r3, [r3, #0]
   173ae:	4931      	ldr	r1, [pc, #196]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   173b0:	3310      	adds	r3, #16
   173b2:	005b      	lsls	r3, r3, #1
   173b4:	18cb      	adds	r3, r1, r3
   173b6:	3304      	adds	r3, #4
   173b8:	881b      	ldrh	r3, [r3, #0]
   173ba:	429a      	cmp	r2, r3
   173bc:	d90d      	bls.n	173da <prvTraceGetObjectHandle+0xf2>
   173be:	1dfb      	adds	r3, r7, #7
   173c0:	781b      	ldrb	r3, [r3, #0]
   173c2:	0018      	movs	r0, r3
   173c4:	4b2d      	ldr	r3, [pc, #180]	; (1747c <prvTraceGetObjectHandle+0x194>)
   173c6:	4798      	blx	r3
   173c8:	0003      	movs	r3, r0
   173ca:	0018      	movs	r0, r3
   173cc:	4b26      	ldr	r3, [pc, #152]	; (17468 <prvTraceGetObjectHandle+0x180>)
   173ce:	4798      	blx	r3
   173d0:	231f      	movs	r3, #31
   173d2:	18fb      	adds	r3, r7, r3
   173d4:	2200      	movs	r2, #0
   173d6:	701a      	strb	r2, [r3, #0]
   173d8:	e031      	b.n	1743e <prvTraceGetObjectHandle+0x156>
   173da:	1dfb      	adds	r3, r7, #7
   173dc:	781b      	ldrb	r3, [r3, #0]
   173de:	4a25      	ldr	r2, [pc, #148]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   173e0:	0059      	lsls	r1, r3, #1
   173e2:	5a8a      	ldrh	r2, [r1, r2]
   173e4:	3201      	adds	r2, #1
   173e6:	b291      	uxth	r1, r2
   173e8:	4a22      	ldr	r2, [pc, #136]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   173ea:	005b      	lsls	r3, r3, #1
   173ec:	5299      	strh	r1, [r3, r2]
   173ee:	1dfb      	adds	r3, r7, #7
   173f0:	781a      	ldrb	r2, [r3, #0]
   173f2:	4b20      	ldr	r3, [pc, #128]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   173f4:	0052      	lsls	r2, r2, #1
   173f6:	5ad3      	ldrh	r3, [r2, r3]
   173f8:	0019      	movs	r1, r3
   173fa:	1dfb      	adds	r3, r7, #7
   173fc:	781b      	ldrb	r3, [r3, #0]
   173fe:	4a1d      	ldr	r2, [pc, #116]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17400:	3308      	adds	r3, #8
   17402:	005b      	lsls	r3, r3, #1
   17404:	18d3      	adds	r3, r2, r3
   17406:	3302      	adds	r3, #2
   17408:	881b      	ldrh	r3, [r3, #0]
   1740a:	1acb      	subs	r3, r1, r3
   1740c:	617b      	str	r3, [r7, #20]
   1740e:	1dfb      	adds	r3, r7, #7
   17410:	781b      	ldrb	r3, [r3, #0]
   17412:	4a18      	ldr	r2, [pc, #96]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17414:	3318      	adds	r3, #24
   17416:	005b      	lsls	r3, r3, #1
   17418:	18d3      	adds	r3, r2, r3
   1741a:	3306      	adds	r3, #6
   1741c:	881b      	ldrh	r3, [r3, #0]
   1741e:	001a      	movs	r2, r3
   17420:	697b      	ldr	r3, [r7, #20]
   17422:	429a      	cmp	r2, r3
   17424:	da0b      	bge.n	1743e <prvTraceGetObjectHandle+0x156>
   17426:	1dfb      	adds	r3, r7, #7
   17428:	781b      	ldrb	r3, [r3, #0]
   1742a:	697a      	ldr	r2, [r7, #20]
   1742c:	b2d2      	uxtb	r2, r2
   1742e:	b291      	uxth	r1, r2
   17430:	4a10      	ldr	r2, [pc, #64]	; (17474 <prvTraceGetObjectHandle+0x18c>)
   17432:	3318      	adds	r3, #24
   17434:	005b      	lsls	r3, r3, #1
   17436:	18d3      	adds	r3, r2, r3
   17438:	3306      	adds	r3, #6
   1743a:	1c0a      	adds	r2, r1, #0
   1743c:	801a      	strh	r2, [r3, #0]
   1743e:	4b0c      	ldr	r3, [pc, #48]	; (17470 <prvTraceGetObjectHandle+0x188>)
   17440:	681b      	ldr	r3, [r3, #0]
   17442:	1e5a      	subs	r2, r3, #1
   17444:	4b0a      	ldr	r3, [pc, #40]	; (17470 <prvTraceGetObjectHandle+0x188>)
   17446:	601a      	str	r2, [r3, #0]
   17448:	69bb      	ldr	r3, [r7, #24]
   1744a:	60bb      	str	r3, [r7, #8]
   1744c:	68bb      	ldr	r3, [r7, #8]
   1744e:	f383 8810 	msr	PRIMASK, r3
   17452:	231f      	movs	r3, #31
   17454:	18fb      	adds	r3, r7, r3
   17456:	781b      	ldrb	r3, [r3, #0]
   17458:	0018      	movs	r0, r3
   1745a:	46bd      	mov	sp, r7
   1745c:	b008      	add	sp, #32
   1745e:	bd80      	pop	{r7, pc}
   17460:	20000c34 	.word	0x20000c34
   17464:	000346fc 	.word	0x000346fc
   17468:	00017605 	.word	0x00017605
   1746c:	000352dc 	.word	0x000352dc
   17470:	20000b8c 	.word	0x20000b8c
   17474:	20000ba4 	.word	0x20000ba4
   17478:	20000c38 	.word	0x20000c38
   1747c:	00016325 	.word	0x00016325

00017480 <prvMarkObjectAsUsed>:
   17480:	b590      	push	{r4, r7, lr}
   17482:	b085      	sub	sp, #20
   17484:	af00      	add	r7, sp, #0
   17486:	0002      	movs	r2, r0
   17488:	1dfb      	adds	r3, r7, #7
   1748a:	701a      	strb	r2, [r3, #0]
   1748c:	1dbb      	adds	r3, r7, #6
   1748e:	1c0a      	adds	r2, r1, #0
   17490:	701a      	strb	r2, [r3, #0]
   17492:	230e      	movs	r3, #14
   17494:	18fc      	adds	r4, r7, r3
   17496:	1dfb      	adds	r3, r7, #7
   17498:	781a      	ldrb	r2, [r3, #0]
   1749a:	1dbb      	adds	r3, r7, #6
   1749c:	781b      	ldrb	r3, [r3, #0]
   1749e:	0011      	movs	r1, r2
   174a0:	0018      	movs	r0, r3
   174a2:	4b09      	ldr	r3, [pc, #36]	; (174c8 <prvMarkObjectAsUsed+0x48>)
   174a4:	4798      	blx	r3
   174a6:	0003      	movs	r3, r0
   174a8:	8023      	strh	r3, [r4, #0]
   174aa:	4b08      	ldr	r3, [pc, #32]	; (174cc <prvMarkObjectAsUsed+0x4c>)
   174ac:	681a      	ldr	r2, [r3, #0]
   174ae:	230e      	movs	r3, #14
   174b0:	18fb      	adds	r3, r7, r3
   174b2:	881b      	ldrh	r3, [r3, #0]
   174b4:	219c      	movs	r1, #156	; 0x9c
   174b6:	18d3      	adds	r3, r2, r3
   174b8:	185b      	adds	r3, r3, r1
   174ba:	2201      	movs	r2, #1
   174bc:	701a      	strb	r2, [r3, #0]
   174be:	46c0      	nop			; (mov r8, r8)
   174c0:	46bd      	mov	sp, r7
   174c2:	b005      	add	sp, #20
   174c4:	bd90      	pop	{r4, r7, pc}
   174c6:	46c0      	nop			; (mov r8, r8)
   174c8:	00017211 	.word	0x00017211
   174cc:	20000c34 	.word	0x20000c34

000174d0 <prvStrncpy>:
   174d0:	b580      	push	{r7, lr}
   174d2:	b086      	sub	sp, #24
   174d4:	af00      	add	r7, sp, #0
   174d6:	60f8      	str	r0, [r7, #12]
   174d8:	60b9      	str	r1, [r7, #8]
   174da:	607a      	str	r2, [r7, #4]
   174dc:	2300      	movs	r3, #0
   174de:	617b      	str	r3, [r7, #20]
   174e0:	e010      	b.n	17504 <prvStrncpy+0x34>
   174e2:	68fa      	ldr	r2, [r7, #12]
   174e4:	697b      	ldr	r3, [r7, #20]
   174e6:	18d3      	adds	r3, r2, r3
   174e8:	68b9      	ldr	r1, [r7, #8]
   174ea:	697a      	ldr	r2, [r7, #20]
   174ec:	188a      	adds	r2, r1, r2
   174ee:	7812      	ldrb	r2, [r2, #0]
   174f0:	701a      	strb	r2, [r3, #0]
   174f2:	68ba      	ldr	r2, [r7, #8]
   174f4:	697b      	ldr	r3, [r7, #20]
   174f6:	18d3      	adds	r3, r2, r3
   174f8:	781b      	ldrb	r3, [r3, #0]
   174fa:	2b00      	cmp	r3, #0
   174fc:	d007      	beq.n	1750e <prvStrncpy+0x3e>
   174fe:	697b      	ldr	r3, [r7, #20]
   17500:	3301      	adds	r3, #1
   17502:	617b      	str	r3, [r7, #20]
   17504:	697a      	ldr	r2, [r7, #20]
   17506:	687b      	ldr	r3, [r7, #4]
   17508:	429a      	cmp	r2, r3
   1750a:	d3ea      	bcc.n	174e2 <prvStrncpy+0x12>
   1750c:	e000      	b.n	17510 <prvStrncpy+0x40>
   1750e:	46c0      	nop			; (mov r8, r8)
   17510:	46c0      	nop			; (mov r8, r8)
   17512:	46bd      	mov	sp, r7
   17514:	b006      	add	sp, #24
   17516:	bd80      	pop	{r7, pc}

00017518 <prvTraceSetObjectName>:
   17518:	b580      	push	{r7, lr}
   1751a:	b082      	sub	sp, #8
   1751c:	af00      	add	r7, sp, #0
   1751e:	603a      	str	r2, [r7, #0]
   17520:	1dfb      	adds	r3, r7, #7
   17522:	1c02      	adds	r2, r0, #0
   17524:	701a      	strb	r2, [r3, #0]
   17526:	1dbb      	adds	r3, r7, #6
   17528:	1c0a      	adds	r2, r1, #0
   1752a:	701a      	strb	r2, [r3, #0]
   1752c:	683b      	ldr	r3, [r7, #0]
   1752e:	2b00      	cmp	r3, #0
   17530:	d104      	bne.n	1753c <prvTraceSetObjectName+0x24>
   17532:	4b2a      	ldr	r3, [pc, #168]	; (175dc <prvTraceSetObjectName+0xc4>)
   17534:	0018      	movs	r0, r3
   17536:	4b2a      	ldr	r3, [pc, #168]	; (175e0 <prvTraceSetObjectName+0xc8>)
   17538:	4798      	blx	r3
   1753a:	e04b      	b.n	175d4 <prvTraceSetObjectName+0xbc>
   1753c:	1dfb      	adds	r3, r7, #7
   1753e:	781b      	ldrb	r3, [r3, #0]
   17540:	2b08      	cmp	r3, #8
   17542:	d904      	bls.n	1754e <prvTraceSetObjectName+0x36>
   17544:	4b27      	ldr	r3, [pc, #156]	; (175e4 <prvTraceSetObjectName+0xcc>)
   17546:	0018      	movs	r0, r3
   17548:	4b25      	ldr	r3, [pc, #148]	; (175e0 <prvTraceSetObjectName+0xc8>)
   1754a:	4798      	blx	r3
   1754c:	e042      	b.n	175d4 <prvTraceSetObjectName+0xbc>
   1754e:	1dbb      	adds	r3, r7, #6
   17550:	781b      	ldrb	r3, [r3, #0]
   17552:	2b00      	cmp	r3, #0
   17554:	d104      	bne.n	17560 <prvTraceSetObjectName+0x48>
   17556:	4b24      	ldr	r3, [pc, #144]	; (175e8 <prvTraceSetObjectName+0xd0>)
   17558:	0018      	movs	r0, r3
   1755a:	4b21      	ldr	r3, [pc, #132]	; (175e0 <prvTraceSetObjectName+0xc8>)
   1755c:	4798      	blx	r3
   1755e:	e039      	b.n	175d4 <prvTraceSetObjectName+0xbc>
   17560:	4b22      	ldr	r3, [pc, #136]	; (175ec <prvTraceSetObjectName+0xd4>)
   17562:	681a      	ldr	r2, [r3, #0]
   17564:	1dfb      	adds	r3, r7, #7
   17566:	781b      	ldrb	r3, [r3, #0]
   17568:	2164      	movs	r1, #100	; 0x64
   1756a:	18d3      	adds	r3, r2, r3
   1756c:	185b      	adds	r3, r3, r1
   1756e:	781b      	ldrb	r3, [r3, #0]
   17570:	1dba      	adds	r2, r7, #6
   17572:	7812      	ldrb	r2, [r2, #0]
   17574:	429a      	cmp	r2, r3
   17576:	d909      	bls.n	1758c <prvTraceSetObjectName+0x74>
   17578:	1dfb      	adds	r3, r7, #7
   1757a:	781b      	ldrb	r3, [r3, #0]
   1757c:	0018      	movs	r0, r3
   1757e:	4b1c      	ldr	r3, [pc, #112]	; (175f0 <prvTraceSetObjectName+0xd8>)
   17580:	4798      	blx	r3
   17582:	0003      	movs	r3, r0
   17584:	0018      	movs	r0, r3
   17586:	4b16      	ldr	r3, [pc, #88]	; (175e0 <prvTraceSetObjectName+0xc8>)
   17588:	4798      	blx	r3
   1758a:	e023      	b.n	175d4 <prvTraceSetObjectName+0xbc>
   1758c:	1dfb      	adds	r3, r7, #7
   1758e:	781a      	ldrb	r2, [r3, #0]
   17590:	1dbb      	adds	r3, r7, #6
   17592:	781b      	ldrb	r3, [r3, #0]
   17594:	0011      	movs	r1, r2
   17596:	0018      	movs	r0, r3
   17598:	4b16      	ldr	r3, [pc, #88]	; (175f4 <prvTraceSetObjectName+0xdc>)
   1759a:	4798      	blx	r3
   1759c:	0003      	movs	r3, r0
   1759e:	001a      	movs	r2, r3
   175a0:	4b15      	ldr	r3, [pc, #84]	; (175f8 <prvTraceSetObjectName+0xe0>)
   175a2:	801a      	strh	r2, [r3, #0]
   175a4:	4b15      	ldr	r3, [pc, #84]	; (175fc <prvTraceSetObjectName+0xe4>)
   175a6:	681b      	ldr	r3, [r3, #0]
   175a8:	2b00      	cmp	r3, #0
   175aa:	d113      	bne.n	175d4 <prvTraceSetObjectName+0xbc>
   175ac:	4b0f      	ldr	r3, [pc, #60]	; (175ec <prvTraceSetObjectName+0xd4>)
   175ae:	681a      	ldr	r2, [r3, #0]
   175b0:	4b11      	ldr	r3, [pc, #68]	; (175f8 <prvTraceSetObjectName+0xe0>)
   175b2:	881b      	ldrh	r3, [r3, #0]
   175b4:	3398      	adds	r3, #152	; 0x98
   175b6:	18d3      	adds	r3, r2, r3
   175b8:	1d18      	adds	r0, r3, #4
   175ba:	4b0c      	ldr	r3, [pc, #48]	; (175ec <prvTraceSetObjectName+0xd4>)
   175bc:	681a      	ldr	r2, [r3, #0]
   175be:	1dfb      	adds	r3, r7, #7
   175c0:	781b      	ldrb	r3, [r3, #0]
   175c2:	2170      	movs	r1, #112	; 0x70
   175c4:	18d3      	adds	r3, r2, r3
   175c6:	185b      	adds	r3, r3, r1
   175c8:	781b      	ldrb	r3, [r3, #0]
   175ca:	001a      	movs	r2, r3
   175cc:	683b      	ldr	r3, [r7, #0]
   175ce:	0019      	movs	r1, r3
   175d0:	4b0b      	ldr	r3, [pc, #44]	; (17600 <prvTraceSetObjectName+0xe8>)
   175d2:	4798      	blx	r3
   175d4:	46bd      	mov	sp, r7
   175d6:	b002      	add	sp, #8
   175d8:	bd80      	pop	{r7, pc}
   175da:	46c0      	nop			; (mov r8, r8)
   175dc:	000353e0 	.word	0x000353e0
   175e0:	00017605 	.word	0x00017605
   175e4:	00035414 	.word	0x00035414
   175e8:	00035444 	.word	0x00035444
   175ec:	20000c34 	.word	0x20000c34
   175f0:	00016325 	.word	0x00016325
   175f4:	00017211 	.word	0x00017211
   175f8:	20000c3c 	.word	0x20000c3c
   175fc:	20000b94 	.word	0x20000b94
   17600:	000174d1 	.word	0x000174d1

00017604 <prvTraceError>:
   17604:	b580      	push	{r7, lr}
   17606:	b082      	sub	sp, #8
   17608:	af00      	add	r7, sp, #0
   1760a:	6078      	str	r0, [r7, #4]
   1760c:	4b11      	ldr	r3, [pc, #68]	; (17654 <prvTraceError+0x50>)
   1760e:	681b      	ldr	r3, [r3, #0]
   17610:	2b00      	cmp	r3, #0
   17612:	d001      	beq.n	17618 <prvTraceError+0x14>
   17614:	4b10      	ldr	r3, [pc, #64]	; (17658 <prvTraceError+0x54>)
   17616:	4798      	blx	r3
   17618:	4b10      	ldr	r3, [pc, #64]	; (1765c <prvTraceError+0x58>)
   1761a:	681b      	ldr	r3, [r3, #0]
   1761c:	2b00      	cmp	r3, #0
   1761e:	d115      	bne.n	1764c <prvTraceError+0x48>
   17620:	4b0e      	ldr	r3, [pc, #56]	; (1765c <prvTraceError+0x58>)
   17622:	687a      	ldr	r2, [r7, #4]
   17624:	601a      	str	r2, [r3, #0]
   17626:	4b0b      	ldr	r3, [pc, #44]	; (17654 <prvTraceError+0x50>)
   17628:	681b      	ldr	r3, [r3, #0]
   1762a:	2b00      	cmp	r3, #0
   1762c:	d00e      	beq.n	1764c <prvTraceError+0x48>
   1762e:	4b09      	ldr	r3, [pc, #36]	; (17654 <prvTraceError+0x50>)
   17630:	681b      	ldr	r3, [r3, #0]
   17632:	4a0b      	ldr	r2, [pc, #44]	; (17660 <prvTraceError+0x5c>)
   17634:	1898      	adds	r0, r3, r2
   17636:	4b09      	ldr	r3, [pc, #36]	; (1765c <prvTraceError+0x58>)
   17638:	681b      	ldr	r3, [r3, #0]
   1763a:	2250      	movs	r2, #80	; 0x50
   1763c:	0019      	movs	r1, r3
   1763e:	4b09      	ldr	r3, [pc, #36]	; (17664 <prvTraceError+0x60>)
   17640:	4798      	blx	r3
   17642:	4b04      	ldr	r3, [pc, #16]	; (17654 <prvTraceError+0x50>)
   17644:	681b      	ldr	r3, [r3, #0]
   17646:	4a08      	ldr	r2, [pc, #32]	; (17668 <prvTraceError+0x64>)
   17648:	2101      	movs	r1, #1
   1764a:	5099      	str	r1, [r3, r2]
   1764c:	46c0      	nop			; (mov r8, r8)
   1764e:	46bd      	mov	sp, r7
   17650:	b002      	add	sp, #8
   17652:	bd80      	pop	{r7, pc}
   17654:	20000c34 	.word	0x20000c34
   17658:	000164c9 	.word	0x000164c9
   1765c:	20000b94 	.word	0x20000b94
   17660:	000006bc 	.word	0x000006bc
   17664:	000174d1 	.word	0x000174d1
   17668:	000006b4 	.word	0x000006b4

0001766c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
   1766c:	b580      	push	{r7, lr}
   1766e:	b086      	sub	sp, #24
   17670:	af00      	add	r7, sp, #0
   17672:	0002      	movs	r2, r0
   17674:	1dfb      	adds	r3, r7, #7
   17676:	701a      	strb	r2, [r3, #0]
   17678:	2300      	movs	r3, #0
   1767a:	617b      	str	r3, [r7, #20]
   1767c:	2300      	movs	r3, #0
   1767e:	613b      	str	r3, [r7, #16]
   17680:	1dfb      	adds	r3, r7, #7
   17682:	781b      	ldrb	r3, [r3, #0]
   17684:	2b00      	cmp	r3, #0
   17686:	d000      	beq.n	1768a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   17688:	e089      	b.n	1779e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1768a:	4b49      	ldr	r3, [pc, #292]	; (177b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1768c:	0018      	movs	r0, r3
   1768e:	4b49      	ldr	r3, [pc, #292]	; (177b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   17690:	4798      	blx	r3
   17692:	e08a      	b.n	177aa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   17694:	4b48      	ldr	r3, [pc, #288]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17696:	681b      	ldr	r3, [r3, #0]
   17698:	69da      	ldr	r2, [r3, #28]
   1769a:	697b      	ldr	r3, [r7, #20]
   1769c:	18d3      	adds	r3, r2, r3
   1769e:	613b      	str	r3, [r7, #16]
   176a0:	4b45      	ldr	r3, [pc, #276]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176a2:	6819      	ldr	r1, [r3, #0]
   176a4:	693b      	ldr	r3, [r7, #16]
   176a6:	009a      	lsls	r2, r3, #2
   176a8:	23e2      	movs	r3, #226	; 0xe2
   176aa:	00db      	lsls	r3, r3, #3
   176ac:	188a      	adds	r2, r1, r2
   176ae:	18d3      	adds	r3, r2, r3
   176b0:	781b      	ldrb	r3, [r3, #0]
   176b2:	2b98      	cmp	r3, #152	; 0x98
   176b4:	d934      	bls.n	17720 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   176b6:	4b40      	ldr	r3, [pc, #256]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176b8:	6819      	ldr	r1, [r3, #0]
   176ba:	693b      	ldr	r3, [r7, #16]
   176bc:	009a      	lsls	r2, r3, #2
   176be:	23e2      	movs	r3, #226	; 0xe2
   176c0:	00db      	lsls	r3, r3, #3
   176c2:	188a      	adds	r2, r1, r2
   176c4:	18d3      	adds	r3, r2, r3
   176c6:	781b      	ldrb	r3, [r3, #0]
   176c8:	2ba7      	cmp	r3, #167	; 0xa7
   176ca:	d829      	bhi.n	17720 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   176cc:	4b3a      	ldr	r3, [pc, #232]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176ce:	6819      	ldr	r1, [r3, #0]
   176d0:	693b      	ldr	r3, [r7, #16]
   176d2:	009a      	lsls	r2, r3, #2
   176d4:	23e2      	movs	r3, #226	; 0xe2
   176d6:	00db      	lsls	r3, r3, #3
   176d8:	188a      	adds	r2, r1, r2
   176da:	18d3      	adds	r3, r2, r3
   176dc:	781a      	ldrb	r2, [r3, #0]
   176de:	230f      	movs	r3, #15
   176e0:	18fb      	adds	r3, r7, r3
   176e2:	3268      	adds	r2, #104	; 0x68
   176e4:	701a      	strb	r2, [r3, #0]
   176e6:	230f      	movs	r3, #15
   176e8:	18fb      	adds	r3, r7, r3
   176ea:	781a      	ldrb	r2, [r3, #0]
   176ec:	693b      	ldr	r3, [r7, #16]
   176ee:	18d2      	adds	r2, r2, r3
   176f0:	4b31      	ldr	r3, [pc, #196]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176f2:	681b      	ldr	r3, [r3, #0]
   176f4:	699b      	ldr	r3, [r3, #24]
   176f6:	429a      	cmp	r2, r3
   176f8:	d24d      	bcs.n	17796 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   176fa:	4b2f      	ldr	r3, [pc, #188]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176fc:	681a      	ldr	r2, [r3, #0]
   176fe:	693b      	ldr	r3, [r7, #16]
   17700:	009b      	lsls	r3, r3, #2
   17702:	21e2      	movs	r1, #226	; 0xe2
   17704:	00c9      	lsls	r1, r1, #3
   17706:	468c      	mov	ip, r1
   17708:	4463      	add	r3, ip
   1770a:	18d0      	adds	r0, r2, r3
   1770c:	230f      	movs	r3, #15
   1770e:	18fb      	adds	r3, r7, r3
   17710:	781b      	ldrb	r3, [r3, #0]
   17712:	3301      	adds	r3, #1
   17714:	009b      	lsls	r3, r3, #2
   17716:	001a      	movs	r2, r3
   17718:	2100      	movs	r1, #0
   1771a:	4b28      	ldr	r3, [pc, #160]	; (177bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1771c:	4798      	blx	r3
   1771e:	e03a      	b.n	17796 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   17720:	4b25      	ldr	r3, [pc, #148]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17722:	6819      	ldr	r1, [r3, #0]
   17724:	693b      	ldr	r3, [r7, #16]
   17726:	009a      	lsls	r2, r3, #2
   17728:	23e2      	movs	r3, #226	; 0xe2
   1772a:	00db      	lsls	r3, r3, #3
   1772c:	188a      	adds	r2, r1, r2
   1772e:	18d3      	adds	r3, r2, r3
   17730:	781b      	ldrb	r3, [r3, #0]
   17732:	2b01      	cmp	r3, #1
   17734:	d130      	bne.n	17798 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17736:	693b      	ldr	r3, [r7, #16]
   17738:	1c5a      	adds	r2, r3, #1
   1773a:	4b1f      	ldr	r3, [pc, #124]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1773c:	681b      	ldr	r3, [r3, #0]
   1773e:	699b      	ldr	r3, [r3, #24]
   17740:	429a      	cmp	r2, r3
   17742:	d20e      	bcs.n	17762 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
   17744:	4b1c      	ldr	r3, [pc, #112]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17746:	681a      	ldr	r2, [r3, #0]
   17748:	693b      	ldr	r3, [r7, #16]
   1774a:	009b      	lsls	r3, r3, #2
   1774c:	21e2      	movs	r1, #226	; 0xe2
   1774e:	00c9      	lsls	r1, r1, #3
   17750:	468c      	mov	ip, r1
   17752:	4463      	add	r3, ip
   17754:	18d3      	adds	r3, r2, r3
   17756:	2208      	movs	r2, #8
   17758:	2100      	movs	r1, #0
   1775a:	0018      	movs	r0, r3
   1775c:	4b17      	ldr	r3, [pc, #92]	; (177bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1775e:	4798      	blx	r3
   17760:	e01a      	b.n	17798 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17762:	4b15      	ldr	r3, [pc, #84]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17764:	681b      	ldr	r3, [r3, #0]
   17766:	22e2      	movs	r2, #226	; 0xe2
   17768:	00d2      	lsls	r2, r2, #3
   1776a:	4694      	mov	ip, r2
   1776c:	4463      	add	r3, ip
   1776e:	2204      	movs	r2, #4
   17770:	2100      	movs	r1, #0
   17772:	0018      	movs	r0, r3
   17774:	4b11      	ldr	r3, [pc, #68]	; (177bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   17776:	4798      	blx	r3
   17778:	4b0f      	ldr	r3, [pc, #60]	; (177b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1777a:	681a      	ldr	r2, [r3, #0]
   1777c:	693b      	ldr	r3, [r7, #16]
   1777e:	009b      	lsls	r3, r3, #2
   17780:	21e2      	movs	r1, #226	; 0xe2
   17782:	00c9      	lsls	r1, r1, #3
   17784:	468c      	mov	ip, r1
   17786:	4463      	add	r3, ip
   17788:	18d3      	adds	r3, r2, r3
   1778a:	2204      	movs	r2, #4
   1778c:	2100      	movs	r1, #0
   1778e:	0018      	movs	r0, r3
   17790:	4b0a      	ldr	r3, [pc, #40]	; (177bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   17792:	4798      	blx	r3
   17794:	e000      	b.n	17798 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17796:	46c0      	nop			; (mov r8, r8)
   17798:	697b      	ldr	r3, [r7, #20]
   1779a:	3301      	adds	r3, #1
   1779c:	617b      	str	r3, [r7, #20]
   1779e:	1dfb      	adds	r3, r7, #7
   177a0:	781a      	ldrb	r2, [r3, #0]
   177a2:	697b      	ldr	r3, [r7, #20]
   177a4:	429a      	cmp	r2, r3
   177a6:	d900      	bls.n	177aa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   177a8:	e774      	b.n	17694 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   177aa:	46bd      	mov	sp, r7
   177ac:	b006      	add	sp, #24
   177ae:	bd80      	pop	{r7, pc}
   177b0:	000354a4 	.word	0x000354a4
   177b4:	00017605 	.word	0x00017605
   177b8:	20000c34 	.word	0x20000c34
   177bc:	00032203 	.word	0x00032203

000177c0 <prvTraceUpdateCounters>:
   177c0:	b580      	push	{r7, lr}
   177c2:	af00      	add	r7, sp, #0
   177c4:	4b12      	ldr	r3, [pc, #72]	; (17810 <prvTraceUpdateCounters+0x50>)
   177c6:	681b      	ldr	r3, [r3, #0]
   177c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   177ca:	2b00      	cmp	r3, #0
   177cc:	d01c      	beq.n	17808 <prvTraceUpdateCounters+0x48>
   177ce:	4b10      	ldr	r3, [pc, #64]	; (17810 <prvTraceUpdateCounters+0x50>)
   177d0:	681b      	ldr	r3, [r3, #0]
   177d2:	695a      	ldr	r2, [r3, #20]
   177d4:	3201      	adds	r2, #1
   177d6:	615a      	str	r2, [r3, #20]
   177d8:	4b0d      	ldr	r3, [pc, #52]	; (17810 <prvTraceUpdateCounters+0x50>)
   177da:	681b      	ldr	r3, [r3, #0]
   177dc:	69da      	ldr	r2, [r3, #28]
   177de:	3201      	adds	r2, #1
   177e0:	61da      	str	r2, [r3, #28]
   177e2:	4b0b      	ldr	r3, [pc, #44]	; (17810 <prvTraceUpdateCounters+0x50>)
   177e4:	681b      	ldr	r3, [r3, #0]
   177e6:	69da      	ldr	r2, [r3, #28]
   177e8:	232c      	movs	r3, #44	; 0x2c
   177ea:	33ff      	adds	r3, #255	; 0xff
   177ec:	429a      	cmp	r2, r3
   177ee:	d907      	bls.n	17800 <prvTraceUpdateCounters+0x40>
   177f0:	4b07      	ldr	r3, [pc, #28]	; (17810 <prvTraceUpdateCounters+0x50>)
   177f2:	681b      	ldr	r3, [r3, #0]
   177f4:	2201      	movs	r2, #1
   177f6:	621a      	str	r2, [r3, #32]
   177f8:	4b05      	ldr	r3, [pc, #20]	; (17810 <prvTraceUpdateCounters+0x50>)
   177fa:	681b      	ldr	r3, [r3, #0]
   177fc:	2200      	movs	r2, #0
   177fe:	61da      	str	r2, [r3, #28]
   17800:	2001      	movs	r0, #1
   17802:	4b04      	ldr	r3, [pc, #16]	; (17814 <prvTraceUpdateCounters+0x54>)
   17804:	4798      	blx	r3
   17806:	e000      	b.n	1780a <prvTraceUpdateCounters+0x4a>
   17808:	46c0      	nop			; (mov r8, r8)
   1780a:	46bd      	mov	sp, r7
   1780c:	bd80      	pop	{r7, pc}
   1780e:	46c0      	nop			; (mov r8, r8)
   17810:	20000c34 	.word	0x20000c34
   17814:	0001766d 	.word	0x0001766d

00017818 <prvTraceGetDTS>:
   17818:	b5b0      	push	{r4, r5, r7, lr}
   1781a:	b086      	sub	sp, #24
   1781c:	af00      	add	r7, sp, #0
   1781e:	0002      	movs	r2, r0
   17820:	1dbb      	adds	r3, r7, #6
   17822:	801a      	strh	r2, [r3, #0]
   17824:	2300      	movs	r3, #0
   17826:	617b      	str	r3, [r7, #20]
   17828:	2300      	movs	r3, #0
   1782a:	613b      	str	r3, [r7, #16]
   1782c:	2300      	movs	r3, #0
   1782e:	60fb      	str	r3, [r7, #12]
   17830:	1dbb      	adds	r3, r7, #6
   17832:	881b      	ldrh	r3, [r3, #0]
   17834:	2bff      	cmp	r3, #255	; 0xff
   17836:	d00a      	beq.n	1784e <prvTraceGetDTS+0x36>
   17838:	1dbb      	adds	r3, r7, #6
   1783a:	881b      	ldrh	r3, [r3, #0]
   1783c:	4a60      	ldr	r2, [pc, #384]	; (179c0 <prvTraceGetDTS+0x1a8>)
   1783e:	4293      	cmp	r3, r2
   17840:	d005      	beq.n	1784e <prvTraceGetDTS+0x36>
   17842:	4b60      	ldr	r3, [pc, #384]	; (179c4 <prvTraceGetDTS+0x1ac>)
   17844:	0018      	movs	r0, r3
   17846:	4b60      	ldr	r3, [pc, #384]	; (179c8 <prvTraceGetDTS+0x1b0>)
   17848:	4798      	blx	r3
   1784a:	2300      	movs	r3, #0
   1784c:	e0b3      	b.n	179b6 <prvTraceGetDTS+0x19e>
   1784e:	4b5f      	ldr	r3, [pc, #380]	; (179cc <prvTraceGetDTS+0x1b4>)
   17850:	681b      	ldr	r3, [r3, #0]
   17852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17854:	2b00      	cmp	r3, #0
   17856:	d118      	bne.n	1788a <prvTraceGetDTS+0x72>
   17858:	4b5d      	ldr	r3, [pc, #372]	; (179d0 <prvTraceGetDTS+0x1b8>)
   1785a:	681b      	ldr	r3, [r3, #0]
   1785c:	2b00      	cmp	r3, #0
   1785e:	d006      	beq.n	1786e <prvTraceGetDTS+0x56>
   17860:	4b5a      	ldr	r3, [pc, #360]	; (179cc <prvTraceGetDTS+0x1b4>)
   17862:	681b      	ldr	r3, [r3, #0]
   17864:	4a5a      	ldr	r2, [pc, #360]	; (179d0 <prvTraceGetDTS+0x1b8>)
   17866:	6812      	ldr	r2, [r2, #0]
   17868:	0892      	lsrs	r2, r2, #2
   1786a:	625a      	str	r2, [r3, #36]	; 0x24
   1786c:	e00d      	b.n	1788a <prvTraceGetDTS+0x72>
   1786e:	4b59      	ldr	r3, [pc, #356]	; (179d4 <prvTraceGetDTS+0x1bc>)
   17870:	681a      	ldr	r2, [r3, #0]
   17872:	4b59      	ldr	r3, [pc, #356]	; (179d8 <prvTraceGetDTS+0x1c0>)
   17874:	681b      	ldr	r3, [r3, #0]
   17876:	429a      	cmp	r2, r3
   17878:	d007      	beq.n	1788a <prvTraceGetDTS+0x72>
   1787a:	4b54      	ldr	r3, [pc, #336]	; (179cc <prvTraceGetDTS+0x1b4>)
   1787c:	681c      	ldr	r4, [r3, #0]
   1787e:	2000      	movs	r0, #0
   17880:	4b56      	ldr	r3, [pc, #344]	; (179dc <prvTraceGetDTS+0x1c4>)
   17882:	4798      	blx	r3
   17884:	0003      	movs	r3, r0
   17886:	089b      	lsrs	r3, r3, #2
   17888:	6263      	str	r3, [r4, #36]	; 0x24
   1788a:	230c      	movs	r3, #12
   1788c:	18fb      	adds	r3, r7, r3
   1788e:	0018      	movs	r0, r3
   17890:	4b53      	ldr	r3, [pc, #332]	; (179e0 <prvTraceGetDTS+0x1c8>)
   17892:	4798      	blx	r3
   17894:	68fa      	ldr	r2, [r7, #12]
   17896:	4b53      	ldr	r3, [pc, #332]	; (179e4 <prvTraceGetDTS+0x1cc>)
   17898:	681b      	ldr	r3, [r3, #0]
   1789a:	1ad3      	subs	r3, r2, r3
   1789c:	613b      	str	r3, [r7, #16]
   1789e:	68fa      	ldr	r2, [r7, #12]
   178a0:	4b50      	ldr	r3, [pc, #320]	; (179e4 <prvTraceGetDTS+0x1cc>)
   178a2:	601a      	str	r2, [r3, #0]
   178a4:	4b49      	ldr	r3, [pc, #292]	; (179cc <prvTraceGetDTS+0x1b4>)
   178a6:	681b      	ldr	r3, [r3, #0]
   178a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   178aa:	2b00      	cmp	r3, #0
   178ac:	d044      	beq.n	17938 <prvTraceGetDTS+0x120>
   178ae:	4b47      	ldr	r3, [pc, #284]	; (179cc <prvTraceGetDTS+0x1b4>)
   178b0:	681b      	ldr	r3, [r3, #0]
   178b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178b4:	693b      	ldr	r3, [r7, #16]
   178b6:	429a      	cmp	r2, r3
   178b8:	d21e      	bcs.n	178f8 <prvTraceGetDTS+0xe0>
   178ba:	4b44      	ldr	r3, [pc, #272]	; (179cc <prvTraceGetDTS+0x1b4>)
   178bc:	681c      	ldr	r4, [r3, #0]
   178be:	4b43      	ldr	r3, [pc, #268]	; (179cc <prvTraceGetDTS+0x1b4>)
   178c0:	681b      	ldr	r3, [r3, #0]
   178c2:	6add      	ldr	r5, [r3, #44]	; 0x2c
   178c4:	4b41      	ldr	r3, [pc, #260]	; (179cc <prvTraceGetDTS+0x1b4>)
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178ca:	4b47      	ldr	r3, [pc, #284]	; (179e8 <prvTraceGetDTS+0x1d0>)
   178cc:	0011      	movs	r1, r2
   178ce:	6938      	ldr	r0, [r7, #16]
   178d0:	4798      	blx	r3
   178d2:	0003      	movs	r3, r0
   178d4:	18eb      	adds	r3, r5, r3
   178d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   178d8:	4b3c      	ldr	r3, [pc, #240]	; (179cc <prvTraceGetDTS+0x1b4>)
   178da:	681c      	ldr	r4, [r3, #0]
   178dc:	4b3b      	ldr	r3, [pc, #236]	; (179cc <prvTraceGetDTS+0x1b4>)
   178de:	681b      	ldr	r3, [r3, #0]
   178e0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   178e2:	4b3a      	ldr	r3, [pc, #232]	; (179cc <prvTraceGetDTS+0x1b4>)
   178e4:	681b      	ldr	r3, [r3, #0]
   178e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   178e8:	693a      	ldr	r2, [r7, #16]
   178ea:	4b40      	ldr	r3, [pc, #256]	; (179ec <prvTraceGetDTS+0x1d4>)
   178ec:	0010      	movs	r0, r2
   178ee:	4798      	blx	r3
   178f0:	000b      	movs	r3, r1
   178f2:	18eb      	adds	r3, r5, r3
   178f4:	62a3      	str	r3, [r4, #40]	; 0x28
   178f6:	e007      	b.n	17908 <prvTraceGetDTS+0xf0>
   178f8:	4b34      	ldr	r3, [pc, #208]	; (179cc <prvTraceGetDTS+0x1b4>)
   178fa:	681b      	ldr	r3, [r3, #0]
   178fc:	4a33      	ldr	r2, [pc, #204]	; (179cc <prvTraceGetDTS+0x1b4>)
   178fe:	6812      	ldr	r2, [r2, #0]
   17900:	6a91      	ldr	r1, [r2, #40]	; 0x28
   17902:	693a      	ldr	r2, [r7, #16]
   17904:	188a      	adds	r2, r1, r2
   17906:	629a      	str	r2, [r3, #40]	; 0x28
   17908:	4b30      	ldr	r3, [pc, #192]	; (179cc <prvTraceGetDTS+0x1b4>)
   1790a:	681b      	ldr	r3, [r3, #0]
   1790c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1790e:	4b2f      	ldr	r3, [pc, #188]	; (179cc <prvTraceGetDTS+0x1b4>)
   17910:	681b      	ldr	r3, [r3, #0]
   17912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17914:	429a      	cmp	r2, r3
   17916:	d313      	bcc.n	17940 <prvTraceGetDTS+0x128>
   17918:	4b2c      	ldr	r3, [pc, #176]	; (179cc <prvTraceGetDTS+0x1b4>)
   1791a:	681b      	ldr	r3, [r3, #0]
   1791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1791e:	3201      	adds	r2, #1
   17920:	62da      	str	r2, [r3, #44]	; 0x2c
   17922:	4b2a      	ldr	r3, [pc, #168]	; (179cc <prvTraceGetDTS+0x1b4>)
   17924:	681b      	ldr	r3, [r3, #0]
   17926:	4a29      	ldr	r2, [pc, #164]	; (179cc <prvTraceGetDTS+0x1b4>)
   17928:	6812      	ldr	r2, [r2, #0]
   1792a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1792c:	4a27      	ldr	r2, [pc, #156]	; (179cc <prvTraceGetDTS+0x1b4>)
   1792e:	6812      	ldr	r2, [r2, #0]
   17930:	6a52      	ldr	r2, [r2, #36]	; 0x24
   17932:	1a8a      	subs	r2, r1, r2
   17934:	629a      	str	r2, [r3, #40]	; 0x28
   17936:	e003      	b.n	17940 <prvTraceGetDTS+0x128>
   17938:	4b24      	ldr	r3, [pc, #144]	; (179cc <prvTraceGetDTS+0x1b4>)
   1793a:	681b      	ldr	r3, [r3, #0]
   1793c:	68fa      	ldr	r2, [r7, #12]
   1793e:	629a      	str	r2, [r3, #40]	; 0x28
   17940:	1dbb      	adds	r3, r7, #6
   17942:	881a      	ldrh	r2, [r3, #0]
   17944:	693b      	ldr	r3, [r7, #16]
   17946:	429a      	cmp	r2, r3
   17948:	d22f      	bcs.n	179aa <prvTraceGetDTS+0x192>
   1794a:	4b29      	ldr	r3, [pc, #164]	; (179f0 <prvTraceGetDTS+0x1d8>)
   1794c:	4798      	blx	r3
   1794e:	0003      	movs	r3, r0
   17950:	617b      	str	r3, [r7, #20]
   17952:	697b      	ldr	r3, [r7, #20]
   17954:	2b00      	cmp	r3, #0
   17956:	d028      	beq.n	179aa <prvTraceGetDTS+0x192>
   17958:	1dbb      	adds	r3, r7, #6
   1795a:	881b      	ldrh	r3, [r3, #0]
   1795c:	4a18      	ldr	r2, [pc, #96]	; (179c0 <prvTraceGetDTS+0x1a8>)
   1795e:	4293      	cmp	r3, r2
   17960:	d10b      	bne.n	1797a <prvTraceGetDTS+0x162>
   17962:	697b      	ldr	r3, [r7, #20]
   17964:	22a9      	movs	r2, #169	; 0xa9
   17966:	701a      	strb	r2, [r3, #0]
   17968:	693b      	ldr	r3, [r7, #16]
   1796a:	0c1b      	lsrs	r3, r3, #16
   1796c:	b29a      	uxth	r2, r3
   1796e:	697b      	ldr	r3, [r7, #20]
   17970:	805a      	strh	r2, [r3, #2]
   17972:	697b      	ldr	r3, [r7, #20]
   17974:	2200      	movs	r2, #0
   17976:	705a      	strb	r2, [r3, #1]
   17978:	e015      	b.n	179a6 <prvTraceGetDTS+0x18e>
   1797a:	1dbb      	adds	r3, r7, #6
   1797c:	881b      	ldrh	r3, [r3, #0]
   1797e:	2bff      	cmp	r3, #255	; 0xff
   17980:	d10d      	bne.n	1799e <prvTraceGetDTS+0x186>
   17982:	697b      	ldr	r3, [r7, #20]
   17984:	22a8      	movs	r2, #168	; 0xa8
   17986:	701a      	strb	r2, [r3, #0]
   17988:	693b      	ldr	r3, [r7, #16]
   1798a:	0a1b      	lsrs	r3, r3, #8
   1798c:	b29a      	uxth	r2, r3
   1798e:	697b      	ldr	r3, [r7, #20]
   17990:	805a      	strh	r2, [r3, #2]
   17992:	693b      	ldr	r3, [r7, #16]
   17994:	0e1b      	lsrs	r3, r3, #24
   17996:	b2da      	uxtb	r2, r3
   17998:	697b      	ldr	r3, [r7, #20]
   1799a:	705a      	strb	r2, [r3, #1]
   1799c:	e003      	b.n	179a6 <prvTraceGetDTS+0x18e>
   1799e:	4b15      	ldr	r3, [pc, #84]	; (179f4 <prvTraceGetDTS+0x1dc>)
   179a0:	0018      	movs	r0, r3
   179a2:	4b09      	ldr	r3, [pc, #36]	; (179c8 <prvTraceGetDTS+0x1b0>)
   179a4:	4798      	blx	r3
   179a6:	4b14      	ldr	r3, [pc, #80]	; (179f8 <prvTraceGetDTS+0x1e0>)
   179a8:	4798      	blx	r3
   179aa:	693b      	ldr	r3, [r7, #16]
   179ac:	b29b      	uxth	r3, r3
   179ae:	1dba      	adds	r2, r7, #6
   179b0:	8812      	ldrh	r2, [r2, #0]
   179b2:	4013      	ands	r3, r2
   179b4:	b29b      	uxth	r3, r3
   179b6:	0018      	movs	r0, r3
   179b8:	46bd      	mov	sp, r7
   179ba:	b006      	add	sp, #24
   179bc:	bdb0      	pop	{r4, r5, r7, pc}
   179be:	46c0      	nop			; (mov r8, r8)
   179c0:	0000ffff 	.word	0x0000ffff
   179c4:	000354fc 	.word	0x000354fc
   179c8:	00017605 	.word	0x00017605
   179cc:	20000c34 	.word	0x20000c34
   179d0:	20000b90 	.word	0x20000b90
   179d4:	e000e018 	.word	0xe000e018
   179d8:	20004f3c 	.word	0x20004f3c
   179dc:	000279b5 	.word	0x000279b5
   179e0:	000179fd 	.word	0x000179fd
   179e4:	20000c40 	.word	0x20000c40
   179e8:	00030549 	.word	0x00030549
   179ec:	00030655 	.word	0x00030655
   179f0:	000171bd 	.word	0x000171bd
   179f4:	0003553c 	.word	0x0003553c
   179f8:	000177c1 	.word	0x000177c1

000179fc <prvTracePortGetTimeStamp>:
   179fc:	b580      	push	{r7, lr}
   179fe:	b084      	sub	sp, #16
   17a00:	af00      	add	r7, sp, #0
   17a02:	6078      	str	r0, [r7, #4]
   17a04:	2300      	movs	r3, #0
   17a06:	60bb      	str	r3, [r7, #8]
   17a08:	2300      	movs	r3, #0
   17a0a:	60fb      	str	r3, [r7, #12]
   17a0c:	4b2d      	ldr	r3, [pc, #180]	; (17ac4 <prvTracePortGetTimeStamp+0xc8>)
   17a0e:	681b      	ldr	r3, [r3, #0]
   17a10:	2b01      	cmp	r3, #1
   17a12:	d107      	bne.n	17a24 <prvTracePortGetTimeStamp+0x28>
   17a14:	687b      	ldr	r3, [r7, #4]
   17a16:	2b00      	cmp	r3, #0
   17a18:	d04f      	beq.n	17aba <prvTracePortGetTimeStamp+0xbe>
   17a1a:	4b2b      	ldr	r3, [pc, #172]	; (17ac8 <prvTracePortGetTimeStamp+0xcc>)
   17a1c:	681a      	ldr	r2, [r3, #0]
   17a1e:	687b      	ldr	r3, [r7, #4]
   17a20:	601a      	str	r2, [r3, #0]
   17a22:	e04a      	b.n	17aba <prvTracePortGetTimeStamp+0xbe>
   17a24:	4b29      	ldr	r3, [pc, #164]	; (17acc <prvTracePortGetTimeStamp+0xd0>)
   17a26:	681a      	ldr	r2, [r3, #0]
   17a28:	4b29      	ldr	r3, [pc, #164]	; (17ad0 <prvTracePortGetTimeStamp+0xd4>)
   17a2a:	681b      	ldr	r3, [r3, #0]
   17a2c:	1ad3      	subs	r3, r2, r3
   17a2e:	3301      	adds	r3, #1
   17a30:	60bb      	str	r3, [r7, #8]
   17a32:	4b28      	ldr	r3, [pc, #160]	; (17ad4 <prvTracePortGetTimeStamp+0xd8>)
   17a34:	681a      	ldr	r2, [r3, #0]
   17a36:	4b28      	ldr	r3, [pc, #160]	; (17ad8 <prvTracePortGetTimeStamp+0xdc>)
   17a38:	681b      	ldr	r3, [r3, #0]
   17a3a:	1ad3      	subs	r3, r2, r3
   17a3c:	3b01      	subs	r3, #1
   17a3e:	2b00      	cmp	r3, #0
   17a40:	db03      	blt.n	17a4a <prvTracePortGetTimeStamp+0x4e>
   17a42:	4b24      	ldr	r3, [pc, #144]	; (17ad4 <prvTracePortGetTimeStamp+0xd8>)
   17a44:	681b      	ldr	r3, [r3, #0]
   17a46:	60fb      	str	r3, [r7, #12]
   17a48:	e002      	b.n	17a50 <prvTracePortGetTimeStamp+0x54>
   17a4a:	4b23      	ldr	r3, [pc, #140]	; (17ad8 <prvTracePortGetTimeStamp+0xdc>)
   17a4c:	681b      	ldr	r3, [r3, #0]
   17a4e:	60fb      	str	r3, [r7, #12]
   17a50:	4b20      	ldr	r3, [pc, #128]	; (17ad4 <prvTracePortGetTimeStamp+0xd8>)
   17a52:	681b      	ldr	r3, [r3, #0]
   17a54:	68fa      	ldr	r2, [r7, #12]
   17a56:	429a      	cmp	r2, r3
   17a58:	d107      	bne.n	17a6a <prvTracePortGetTimeStamp+0x6e>
   17a5a:	4b20      	ldr	r3, [pc, #128]	; (17adc <prvTracePortGetTimeStamp+0xe0>)
   17a5c:	681b      	ldr	r3, [r3, #0]
   17a5e:	68ba      	ldr	r2, [r7, #8]
   17a60:	429a      	cmp	r2, r3
   17a62:	d202      	bcs.n	17a6a <prvTracePortGetTimeStamp+0x6e>
   17a64:	68fb      	ldr	r3, [r7, #12]
   17a66:	3301      	adds	r3, #1
   17a68:	60fb      	str	r3, [r7, #12]
   17a6a:	687b      	ldr	r3, [r7, #4]
   17a6c:	2b00      	cmp	r3, #0
   17a6e:	d016      	beq.n	17a9e <prvTracePortGetTimeStamp+0xa2>
   17a70:	4b16      	ldr	r3, [pc, #88]	; (17acc <prvTracePortGetTimeStamp+0xd0>)
   17a72:	681b      	ldr	r3, [r3, #0]
   17a74:	3301      	adds	r3, #1
   17a76:	089b      	lsrs	r3, r3, #2
   17a78:	68fa      	ldr	r2, [r7, #12]
   17a7a:	435a      	muls	r2, r3
   17a7c:	4b12      	ldr	r3, [pc, #72]	; (17ac8 <prvTracePortGetTimeStamp+0xcc>)
   17a7e:	601a      	str	r2, [r3, #0]
   17a80:	4b12      	ldr	r3, [pc, #72]	; (17acc <prvTracePortGetTimeStamp+0xd0>)
   17a82:	681b      	ldr	r3, [r3, #0]
   17a84:	3301      	adds	r3, #1
   17a86:	2203      	movs	r2, #3
   17a88:	4013      	ands	r3, r2
   17a8a:	68fa      	ldr	r2, [r7, #12]
   17a8c:	435a      	muls	r2, r3
   17a8e:	68bb      	ldr	r3, [r7, #8]
   17a90:	18d3      	adds	r3, r2, r3
   17a92:	089a      	lsrs	r2, r3, #2
   17a94:	4b0c      	ldr	r3, [pc, #48]	; (17ac8 <prvTracePortGetTimeStamp+0xcc>)
   17a96:	681b      	ldr	r3, [r3, #0]
   17a98:	18d2      	adds	r2, r2, r3
   17a9a:	4b0b      	ldr	r3, [pc, #44]	; (17ac8 <prvTracePortGetTimeStamp+0xcc>)
   17a9c:	601a      	str	r2, [r3, #0]
   17a9e:	4b0d      	ldr	r3, [pc, #52]	; (17ad4 <prvTracePortGetTimeStamp+0xd8>)
   17aa0:	68fa      	ldr	r2, [r7, #12]
   17aa2:	601a      	str	r2, [r3, #0]
   17aa4:	687b      	ldr	r3, [r7, #4]
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	d003      	beq.n	17ab2 <prvTracePortGetTimeStamp+0xb6>
   17aaa:	4b07      	ldr	r3, [pc, #28]	; (17ac8 <prvTracePortGetTimeStamp+0xcc>)
   17aac:	681a      	ldr	r2, [r3, #0]
   17aae:	687b      	ldr	r3, [r7, #4]
   17ab0:	601a      	str	r2, [r3, #0]
   17ab2:	4b0a      	ldr	r3, [pc, #40]	; (17adc <prvTracePortGetTimeStamp+0xe0>)
   17ab4:	68ba      	ldr	r2, [r7, #8]
   17ab6:	601a      	str	r2, [r3, #0]
   17ab8:	e000      	b.n	17abc <prvTracePortGetTimeStamp+0xc0>
   17aba:	46c0      	nop			; (mov r8, r8)
   17abc:	46bd      	mov	sp, r7
   17abe:	b004      	add	sp, #16
   17ac0:	bd80      	pop	{r7, pc}
   17ac2:	46c0      	nop			; (mov r8, r8)
   17ac4:	20000b80 	.word	0x20000b80
   17ac8:	20000b84 	.word	0x20000b84
   17acc:	e000e014 	.word	0xe000e014
   17ad0:	e000e018 	.word	0xe000e018
   17ad4:	20000c44 	.word	0x20000c44
   17ad8:	20000b7c 	.word	0x20000b7c
   17adc:	20000c48 	.word	0x20000c48

00017ae0 <vListInitialise>:
   17ae0:	b580      	push	{r7, lr}
   17ae2:	b082      	sub	sp, #8
   17ae4:	af00      	add	r7, sp, #0
   17ae6:	6078      	str	r0, [r7, #4]
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	3308      	adds	r3, #8
   17aec:	001a      	movs	r2, r3
   17aee:	687b      	ldr	r3, [r7, #4]
   17af0:	605a      	str	r2, [r3, #4]
   17af2:	687b      	ldr	r3, [r7, #4]
   17af4:	2201      	movs	r2, #1
   17af6:	4252      	negs	r2, r2
   17af8:	609a      	str	r2, [r3, #8]
   17afa:	687b      	ldr	r3, [r7, #4]
   17afc:	3308      	adds	r3, #8
   17afe:	001a      	movs	r2, r3
   17b00:	687b      	ldr	r3, [r7, #4]
   17b02:	60da      	str	r2, [r3, #12]
   17b04:	687b      	ldr	r3, [r7, #4]
   17b06:	3308      	adds	r3, #8
   17b08:	001a      	movs	r2, r3
   17b0a:	687b      	ldr	r3, [r7, #4]
   17b0c:	611a      	str	r2, [r3, #16]
   17b0e:	687b      	ldr	r3, [r7, #4]
   17b10:	2200      	movs	r2, #0
   17b12:	601a      	str	r2, [r3, #0]
   17b14:	46c0      	nop			; (mov r8, r8)
   17b16:	46bd      	mov	sp, r7
   17b18:	b002      	add	sp, #8
   17b1a:	bd80      	pop	{r7, pc}

00017b1c <vListInitialiseItem>:
   17b1c:	b580      	push	{r7, lr}
   17b1e:	b082      	sub	sp, #8
   17b20:	af00      	add	r7, sp, #0
   17b22:	6078      	str	r0, [r7, #4]
   17b24:	687b      	ldr	r3, [r7, #4]
   17b26:	2200      	movs	r2, #0
   17b28:	611a      	str	r2, [r3, #16]
   17b2a:	46c0      	nop			; (mov r8, r8)
   17b2c:	46bd      	mov	sp, r7
   17b2e:	b002      	add	sp, #8
   17b30:	bd80      	pop	{r7, pc}

00017b32 <vListInsertEnd>:
   17b32:	b580      	push	{r7, lr}
   17b34:	b084      	sub	sp, #16
   17b36:	af00      	add	r7, sp, #0
   17b38:	6078      	str	r0, [r7, #4]
   17b3a:	6039      	str	r1, [r7, #0]
   17b3c:	687b      	ldr	r3, [r7, #4]
   17b3e:	685b      	ldr	r3, [r3, #4]
   17b40:	60fb      	str	r3, [r7, #12]
   17b42:	683b      	ldr	r3, [r7, #0]
   17b44:	68fa      	ldr	r2, [r7, #12]
   17b46:	605a      	str	r2, [r3, #4]
   17b48:	68fb      	ldr	r3, [r7, #12]
   17b4a:	689a      	ldr	r2, [r3, #8]
   17b4c:	683b      	ldr	r3, [r7, #0]
   17b4e:	609a      	str	r2, [r3, #8]
   17b50:	68fb      	ldr	r3, [r7, #12]
   17b52:	689b      	ldr	r3, [r3, #8]
   17b54:	683a      	ldr	r2, [r7, #0]
   17b56:	605a      	str	r2, [r3, #4]
   17b58:	68fb      	ldr	r3, [r7, #12]
   17b5a:	683a      	ldr	r2, [r7, #0]
   17b5c:	609a      	str	r2, [r3, #8]
   17b5e:	683b      	ldr	r3, [r7, #0]
   17b60:	687a      	ldr	r2, [r7, #4]
   17b62:	611a      	str	r2, [r3, #16]
   17b64:	687b      	ldr	r3, [r7, #4]
   17b66:	681b      	ldr	r3, [r3, #0]
   17b68:	1c5a      	adds	r2, r3, #1
   17b6a:	687b      	ldr	r3, [r7, #4]
   17b6c:	601a      	str	r2, [r3, #0]
   17b6e:	46c0      	nop			; (mov r8, r8)
   17b70:	46bd      	mov	sp, r7
   17b72:	b004      	add	sp, #16
   17b74:	bd80      	pop	{r7, pc}

00017b76 <vListInsert>:
   17b76:	b580      	push	{r7, lr}
   17b78:	b084      	sub	sp, #16
   17b7a:	af00      	add	r7, sp, #0
   17b7c:	6078      	str	r0, [r7, #4]
   17b7e:	6039      	str	r1, [r7, #0]
   17b80:	683b      	ldr	r3, [r7, #0]
   17b82:	681b      	ldr	r3, [r3, #0]
   17b84:	60bb      	str	r3, [r7, #8]
   17b86:	68bb      	ldr	r3, [r7, #8]
   17b88:	3301      	adds	r3, #1
   17b8a:	d103      	bne.n	17b94 <vListInsert+0x1e>
   17b8c:	687b      	ldr	r3, [r7, #4]
   17b8e:	691b      	ldr	r3, [r3, #16]
   17b90:	60fb      	str	r3, [r7, #12]
   17b92:	e00c      	b.n	17bae <vListInsert+0x38>
   17b94:	687b      	ldr	r3, [r7, #4]
   17b96:	3308      	adds	r3, #8
   17b98:	60fb      	str	r3, [r7, #12]
   17b9a:	e002      	b.n	17ba2 <vListInsert+0x2c>
   17b9c:	68fb      	ldr	r3, [r7, #12]
   17b9e:	685b      	ldr	r3, [r3, #4]
   17ba0:	60fb      	str	r3, [r7, #12]
   17ba2:	68fb      	ldr	r3, [r7, #12]
   17ba4:	685b      	ldr	r3, [r3, #4]
   17ba6:	681a      	ldr	r2, [r3, #0]
   17ba8:	68bb      	ldr	r3, [r7, #8]
   17baa:	429a      	cmp	r2, r3
   17bac:	d9f6      	bls.n	17b9c <vListInsert+0x26>
   17bae:	68fb      	ldr	r3, [r7, #12]
   17bb0:	685a      	ldr	r2, [r3, #4]
   17bb2:	683b      	ldr	r3, [r7, #0]
   17bb4:	605a      	str	r2, [r3, #4]
   17bb6:	683b      	ldr	r3, [r7, #0]
   17bb8:	685b      	ldr	r3, [r3, #4]
   17bba:	683a      	ldr	r2, [r7, #0]
   17bbc:	609a      	str	r2, [r3, #8]
   17bbe:	683b      	ldr	r3, [r7, #0]
   17bc0:	68fa      	ldr	r2, [r7, #12]
   17bc2:	609a      	str	r2, [r3, #8]
   17bc4:	68fb      	ldr	r3, [r7, #12]
   17bc6:	683a      	ldr	r2, [r7, #0]
   17bc8:	605a      	str	r2, [r3, #4]
   17bca:	683b      	ldr	r3, [r7, #0]
   17bcc:	687a      	ldr	r2, [r7, #4]
   17bce:	611a      	str	r2, [r3, #16]
   17bd0:	687b      	ldr	r3, [r7, #4]
   17bd2:	681b      	ldr	r3, [r3, #0]
   17bd4:	1c5a      	adds	r2, r3, #1
   17bd6:	687b      	ldr	r3, [r7, #4]
   17bd8:	601a      	str	r2, [r3, #0]
   17bda:	46c0      	nop			; (mov r8, r8)
   17bdc:	46bd      	mov	sp, r7
   17bde:	b004      	add	sp, #16
   17be0:	bd80      	pop	{r7, pc}

00017be2 <uxListRemove>:
   17be2:	b580      	push	{r7, lr}
   17be4:	b084      	sub	sp, #16
   17be6:	af00      	add	r7, sp, #0
   17be8:	6078      	str	r0, [r7, #4]
   17bea:	687b      	ldr	r3, [r7, #4]
   17bec:	691b      	ldr	r3, [r3, #16]
   17bee:	60fb      	str	r3, [r7, #12]
   17bf0:	687b      	ldr	r3, [r7, #4]
   17bf2:	685b      	ldr	r3, [r3, #4]
   17bf4:	687a      	ldr	r2, [r7, #4]
   17bf6:	6892      	ldr	r2, [r2, #8]
   17bf8:	609a      	str	r2, [r3, #8]
   17bfa:	687b      	ldr	r3, [r7, #4]
   17bfc:	689b      	ldr	r3, [r3, #8]
   17bfe:	687a      	ldr	r2, [r7, #4]
   17c00:	6852      	ldr	r2, [r2, #4]
   17c02:	605a      	str	r2, [r3, #4]
   17c04:	68fb      	ldr	r3, [r7, #12]
   17c06:	685a      	ldr	r2, [r3, #4]
   17c08:	687b      	ldr	r3, [r7, #4]
   17c0a:	429a      	cmp	r2, r3
   17c0c:	d103      	bne.n	17c16 <uxListRemove+0x34>
   17c0e:	687b      	ldr	r3, [r7, #4]
   17c10:	689a      	ldr	r2, [r3, #8]
   17c12:	68fb      	ldr	r3, [r7, #12]
   17c14:	605a      	str	r2, [r3, #4]
   17c16:	687b      	ldr	r3, [r7, #4]
   17c18:	2200      	movs	r2, #0
   17c1a:	611a      	str	r2, [r3, #16]
   17c1c:	68fb      	ldr	r3, [r7, #12]
   17c1e:	681b      	ldr	r3, [r3, #0]
   17c20:	1e5a      	subs	r2, r3, #1
   17c22:	68fb      	ldr	r3, [r7, #12]
   17c24:	601a      	str	r2, [r3, #0]
   17c26:	68fb      	ldr	r3, [r7, #12]
   17c28:	681b      	ldr	r3, [r3, #0]
   17c2a:	0018      	movs	r0, r3
   17c2c:	46bd      	mov	sp, r7
   17c2e:	b004      	add	sp, #16
   17c30:	bd80      	pop	{r7, pc}
	...

00017c34 <pxPortInitialiseStack>:
   17c34:	b580      	push	{r7, lr}
   17c36:	b084      	sub	sp, #16
   17c38:	af00      	add	r7, sp, #0
   17c3a:	60f8      	str	r0, [r7, #12]
   17c3c:	60b9      	str	r1, [r7, #8]
   17c3e:	607a      	str	r2, [r7, #4]
   17c40:	68fb      	ldr	r3, [r7, #12]
   17c42:	3b04      	subs	r3, #4
   17c44:	60fb      	str	r3, [r7, #12]
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	2280      	movs	r2, #128	; 0x80
   17c4a:	0452      	lsls	r2, r2, #17
   17c4c:	601a      	str	r2, [r3, #0]
   17c4e:	68fb      	ldr	r3, [r7, #12]
   17c50:	3b04      	subs	r3, #4
   17c52:	60fb      	str	r3, [r7, #12]
   17c54:	68ba      	ldr	r2, [r7, #8]
   17c56:	68fb      	ldr	r3, [r7, #12]
   17c58:	601a      	str	r2, [r3, #0]
   17c5a:	68fb      	ldr	r3, [r7, #12]
   17c5c:	3b04      	subs	r3, #4
   17c5e:	60fb      	str	r3, [r7, #12]
   17c60:	4a08      	ldr	r2, [pc, #32]	; (17c84 <pxPortInitialiseStack+0x50>)
   17c62:	68fb      	ldr	r3, [r7, #12]
   17c64:	601a      	str	r2, [r3, #0]
   17c66:	68fb      	ldr	r3, [r7, #12]
   17c68:	3b14      	subs	r3, #20
   17c6a:	60fb      	str	r3, [r7, #12]
   17c6c:	687a      	ldr	r2, [r7, #4]
   17c6e:	68fb      	ldr	r3, [r7, #12]
   17c70:	601a      	str	r2, [r3, #0]
   17c72:	68fb      	ldr	r3, [r7, #12]
   17c74:	3b20      	subs	r3, #32
   17c76:	60fb      	str	r3, [r7, #12]
   17c78:	68fb      	ldr	r3, [r7, #12]
   17c7a:	0018      	movs	r0, r3
   17c7c:	46bd      	mov	sp, r7
   17c7e:	b004      	add	sp, #16
   17c80:	bd80      	pop	{r7, pc}
   17c82:	46c0      	nop			; (mov r8, r8)
   17c84:	00017c89 	.word	0x00017c89

00017c88 <prvTaskExitError>:
   17c88:	b580      	push	{r7, lr}
   17c8a:	b082      	sub	sp, #8
   17c8c:	af00      	add	r7, sp, #0
   17c8e:	2300      	movs	r3, #0
   17c90:	607b      	str	r3, [r7, #4]
   17c92:	4b07      	ldr	r3, [pc, #28]	; (17cb0 <prvTaskExitError+0x28>)
   17c94:	681b      	ldr	r3, [r3, #0]
   17c96:	3301      	adds	r3, #1
   17c98:	d001      	beq.n	17c9e <prvTaskExitError+0x16>
   17c9a:	b672      	cpsid	i
   17c9c:	e7fe      	b.n	17c9c <prvTaskExitError+0x14>
   17c9e:	b672      	cpsid	i
   17ca0:	46c0      	nop			; (mov r8, r8)
   17ca2:	687b      	ldr	r3, [r7, #4]
   17ca4:	2b00      	cmp	r3, #0
   17ca6:	d0fc      	beq.n	17ca2 <prvTaskExitError+0x1a>
   17ca8:	46c0      	nop			; (mov r8, r8)
   17caa:	46bd      	mov	sp, r7
   17cac:	b002      	add	sp, #8
   17cae:	bd80      	pop	{r7, pc}
   17cb0:	200000f4 	.word	0x200000f4

00017cb4 <SVC_Handler>:
   17cb4:	b580      	push	{r7, lr}
   17cb6:	af00      	add	r7, sp, #0
   17cb8:	46c0      	nop			; (mov r8, r8)
   17cba:	46bd      	mov	sp, r7
   17cbc:	bd80      	pop	{r7, pc}
	...

00017cc0 <vPortStartFirstTask>:
   17cc0:	4a0b      	ldr	r2, [pc, #44]	; (17cf0 <pxCurrentTCBConst2>)
   17cc2:	6813      	ldr	r3, [r2, #0]
   17cc4:	6818      	ldr	r0, [r3, #0]
   17cc6:	3020      	adds	r0, #32
   17cc8:	f380 8809 	msr	PSP, r0
   17ccc:	2002      	movs	r0, #2
   17cce:	f380 8814 	msr	CONTROL, r0
   17cd2:	f3bf 8f6f 	isb	sy
   17cd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   17cd8:	46ae      	mov	lr, r5
   17cda:	bc08      	pop	{r3}
   17cdc:	bc04      	pop	{r2}
   17cde:	b662      	cpsie	i
   17ce0:	4718      	bx	r3
   17ce2:	46c0      	nop			; (mov r8, r8)
   17ce4:	46c0      	nop			; (mov r8, r8)
   17ce6:	46c0      	nop			; (mov r8, r8)
   17ce8:	46c0      	nop			; (mov r8, r8)
   17cea:	46c0      	nop			; (mov r8, r8)
   17cec:	46c0      	nop			; (mov r8, r8)
   17cee:	46c0      	nop			; (mov r8, r8)

00017cf0 <pxCurrentTCBConst2>:
   17cf0:	20003b34 	.word	0x20003b34
   17cf4:	46c0      	nop			; (mov r8, r8)
   17cf6:	46c0      	nop			; (mov r8, r8)

00017cf8 <xPortStartScheduler>:
   17cf8:	b580      	push	{r7, lr}
   17cfa:	af00      	add	r7, sp, #0
   17cfc:	4b0e      	ldr	r3, [pc, #56]	; (17d38 <xPortStartScheduler+0x40>)
   17cfe:	4a0e      	ldr	r2, [pc, #56]	; (17d38 <xPortStartScheduler+0x40>)
   17d00:	6812      	ldr	r2, [r2, #0]
   17d02:	21ff      	movs	r1, #255	; 0xff
   17d04:	0409      	lsls	r1, r1, #16
   17d06:	430a      	orrs	r2, r1
   17d08:	601a      	str	r2, [r3, #0]
   17d0a:	4b0b      	ldr	r3, [pc, #44]	; (17d38 <xPortStartScheduler+0x40>)
   17d0c:	4a0a      	ldr	r2, [pc, #40]	; (17d38 <xPortStartScheduler+0x40>)
   17d0e:	6812      	ldr	r2, [r2, #0]
   17d10:	21ff      	movs	r1, #255	; 0xff
   17d12:	0609      	lsls	r1, r1, #24
   17d14:	430a      	orrs	r2, r1
   17d16:	601a      	str	r2, [r3, #0]
   17d18:	4b08      	ldr	r3, [pc, #32]	; (17d3c <xPortStartScheduler+0x44>)
   17d1a:	4798      	blx	r3
   17d1c:	4b08      	ldr	r3, [pc, #32]	; (17d40 <xPortStartScheduler+0x48>)
   17d1e:	2200      	movs	r2, #0
   17d20:	601a      	str	r2, [r3, #0]
   17d22:	4b08      	ldr	r3, [pc, #32]	; (17d44 <xPortStartScheduler+0x4c>)
   17d24:	4798      	blx	r3
   17d26:	4b08      	ldr	r3, [pc, #32]	; (17d48 <xPortStartScheduler+0x50>)
   17d28:	4798      	blx	r3
   17d2a:	4b08      	ldr	r3, [pc, #32]	; (17d4c <xPortStartScheduler+0x54>)
   17d2c:	4798      	blx	r3
   17d2e:	2300      	movs	r3, #0
   17d30:	0018      	movs	r0, r3
   17d32:	46bd      	mov	sp, r7
   17d34:	bd80      	pop	{r7, pc}
   17d36:	46c0      	nop			; (mov r8, r8)
   17d38:	e000ed20 	.word	0xe000ed20
   17d3c:	00017e59 	.word	0x00017e59
   17d40:	200000f4 	.word	0x200000f4
   17d44:	00017cc1 	.word	0x00017cc1
   17d48:	0001a3b9 	.word	0x0001a3b9
   17d4c:	00017c89 	.word	0x00017c89

00017d50 <vPortYield>:
   17d50:	b580      	push	{r7, lr}
   17d52:	af00      	add	r7, sp, #0
   17d54:	4b03      	ldr	r3, [pc, #12]	; (17d64 <vPortYield+0x14>)
   17d56:	2280      	movs	r2, #128	; 0x80
   17d58:	0552      	lsls	r2, r2, #21
   17d5a:	601a      	str	r2, [r3, #0]
   17d5c:	46c0      	nop			; (mov r8, r8)
   17d5e:	46bd      	mov	sp, r7
   17d60:	bd80      	pop	{r7, pc}
   17d62:	46c0      	nop			; (mov r8, r8)
   17d64:	e000ed04 	.word	0xe000ed04

00017d68 <vPortEnterCritical>:
   17d68:	b580      	push	{r7, lr}
   17d6a:	af00      	add	r7, sp, #0
   17d6c:	b672      	cpsid	i
   17d6e:	4b06      	ldr	r3, [pc, #24]	; (17d88 <vPortEnterCritical+0x20>)
   17d70:	681b      	ldr	r3, [r3, #0]
   17d72:	1c5a      	adds	r2, r3, #1
   17d74:	4b04      	ldr	r3, [pc, #16]	; (17d88 <vPortEnterCritical+0x20>)
   17d76:	601a      	str	r2, [r3, #0]
   17d78:	f3bf 8f4f 	dsb	sy
   17d7c:	f3bf 8f6f 	isb	sy
   17d80:	46c0      	nop			; (mov r8, r8)
   17d82:	46bd      	mov	sp, r7
   17d84:	bd80      	pop	{r7, pc}
   17d86:	46c0      	nop			; (mov r8, r8)
   17d88:	200000f4 	.word	0x200000f4

00017d8c <vPortExitCritical>:
   17d8c:	b580      	push	{r7, lr}
   17d8e:	af00      	add	r7, sp, #0
   17d90:	4b09      	ldr	r3, [pc, #36]	; (17db8 <vPortExitCritical+0x2c>)
   17d92:	681b      	ldr	r3, [r3, #0]
   17d94:	2b00      	cmp	r3, #0
   17d96:	d101      	bne.n	17d9c <vPortExitCritical+0x10>
   17d98:	b672      	cpsid	i
   17d9a:	e7fe      	b.n	17d9a <vPortExitCritical+0xe>
   17d9c:	4b06      	ldr	r3, [pc, #24]	; (17db8 <vPortExitCritical+0x2c>)
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	1e5a      	subs	r2, r3, #1
   17da2:	4b05      	ldr	r3, [pc, #20]	; (17db8 <vPortExitCritical+0x2c>)
   17da4:	601a      	str	r2, [r3, #0]
   17da6:	4b04      	ldr	r3, [pc, #16]	; (17db8 <vPortExitCritical+0x2c>)
   17da8:	681b      	ldr	r3, [r3, #0]
   17daa:	2b00      	cmp	r3, #0
   17dac:	d100      	bne.n	17db0 <vPortExitCritical+0x24>
   17dae:	b662      	cpsie	i
   17db0:	46c0      	nop			; (mov r8, r8)
   17db2:	46bd      	mov	sp, r7
   17db4:	bd80      	pop	{r7, pc}
   17db6:	46c0      	nop			; (mov r8, r8)
   17db8:	200000f4 	.word	0x200000f4

00017dbc <ulSetInterruptMaskFromISR>:
   17dbc:	f3ef 8010 	mrs	r0, PRIMASK
   17dc0:	b672      	cpsid	i
   17dc2:	4770      	bx	lr
   17dc4:	46c0      	nop			; (mov r8, r8)
   17dc6:	0018      	movs	r0, r3

00017dc8 <vClearInterruptMaskFromISR>:
   17dc8:	f380 8810 	msr	PRIMASK, r0
   17dcc:	4770      	bx	lr
   17dce:	46c0      	nop			; (mov r8, r8)

00017dd0 <PendSV_Handler>:
   17dd0:	f3ef 8009 	mrs	r0, PSP
   17dd4:	4b0e      	ldr	r3, [pc, #56]	; (17e10 <pxCurrentTCBConst>)
   17dd6:	681a      	ldr	r2, [r3, #0]
   17dd8:	3820      	subs	r0, #32
   17dda:	6010      	str	r0, [r2, #0]
   17ddc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17dde:	4644      	mov	r4, r8
   17de0:	464d      	mov	r5, r9
   17de2:	4656      	mov	r6, sl
   17de4:	465f      	mov	r7, fp
   17de6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17de8:	b508      	push	{r3, lr}
   17dea:	b672      	cpsid	i
   17dec:	f002 fae4 	bl	1a3b8 <vTaskSwitchContext>
   17df0:	b662      	cpsie	i
   17df2:	bc0c      	pop	{r2, r3}
   17df4:	6811      	ldr	r1, [r2, #0]
   17df6:	6808      	ldr	r0, [r1, #0]
   17df8:	3010      	adds	r0, #16
   17dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17dfc:	46a0      	mov	r8, r4
   17dfe:	46a9      	mov	r9, r5
   17e00:	46b2      	mov	sl, r6
   17e02:	46bb      	mov	fp, r7
   17e04:	f380 8809 	msr	PSP, r0
   17e08:	3820      	subs	r0, #32
   17e0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17e0c:	4718      	bx	r3
   17e0e:	46c0      	nop			; (mov r8, r8)

00017e10 <pxCurrentTCBConst>:
   17e10:	20003b34 	.word	0x20003b34
   17e14:	46c0      	nop			; (mov r8, r8)
   17e16:	46c0      	nop			; (mov r8, r8)

00017e18 <SysTick_Handler>:
   17e18:	b580      	push	{r7, lr}
   17e1a:	b082      	sub	sp, #8
   17e1c:	af00      	add	r7, sp, #0
   17e1e:	4b0a      	ldr	r3, [pc, #40]	; (17e48 <SysTick_Handler+0x30>)
   17e20:	4798      	blx	r3
   17e22:	0003      	movs	r3, r0
   17e24:	607b      	str	r3, [r7, #4]
   17e26:	4b09      	ldr	r3, [pc, #36]	; (17e4c <SysTick_Handler+0x34>)
   17e28:	4798      	blx	r3
   17e2a:	1e03      	subs	r3, r0, #0
   17e2c:	d003      	beq.n	17e36 <SysTick_Handler+0x1e>
   17e2e:	4b08      	ldr	r3, [pc, #32]	; (17e50 <SysTick_Handler+0x38>)
   17e30:	2280      	movs	r2, #128	; 0x80
   17e32:	0552      	lsls	r2, r2, #21
   17e34:	601a      	str	r2, [r3, #0]
   17e36:	687b      	ldr	r3, [r7, #4]
   17e38:	0018      	movs	r0, r3
   17e3a:	4b06      	ldr	r3, [pc, #24]	; (17e54 <SysTick_Handler+0x3c>)
   17e3c:	4798      	blx	r3
   17e3e:	46c0      	nop			; (mov r8, r8)
   17e40:	46bd      	mov	sp, r7
   17e42:	b002      	add	sp, #8
   17e44:	bd80      	pop	{r7, pc}
   17e46:	46c0      	nop			; (mov r8, r8)
   17e48:	00017dbd 	.word	0x00017dbd
   17e4c:	0001a1c9 	.word	0x0001a1c9
   17e50:	e000ed04 	.word	0xe000ed04
   17e54:	00017dc9 	.word	0x00017dc9

00017e58 <prvSetupTimerInterrupt>:
   17e58:	b5b0      	push	{r4, r5, r7, lr}
   17e5a:	af00      	add	r7, sp, #0
   17e5c:	4b0b      	ldr	r3, [pc, #44]	; (17e8c <prvSetupTimerInterrupt+0x34>)
   17e5e:	2200      	movs	r2, #0
   17e60:	601a      	str	r2, [r3, #0]
   17e62:	4b0b      	ldr	r3, [pc, #44]	; (17e90 <prvSetupTimerInterrupt+0x38>)
   17e64:	2200      	movs	r2, #0
   17e66:	601a      	str	r2, [r3, #0]
   17e68:	4c0a      	ldr	r4, [pc, #40]	; (17e94 <prvSetupTimerInterrupt+0x3c>)
   17e6a:	2000      	movs	r0, #0
   17e6c:	4b0a      	ldr	r3, [pc, #40]	; (17e98 <prvSetupTimerInterrupt+0x40>)
   17e6e:	4798      	blx	r3
   17e70:	4b0a      	ldr	r3, [pc, #40]	; (17e9c <prvSetupTimerInterrupt+0x44>)
   17e72:	22fa      	movs	r2, #250	; 0xfa
   17e74:	0091      	lsls	r1, r2, #2
   17e76:	4798      	blx	r3
   17e78:	0003      	movs	r3, r0
   17e7a:	3b01      	subs	r3, #1
   17e7c:	6023      	str	r3, [r4, #0]
   17e7e:	4b03      	ldr	r3, [pc, #12]	; (17e8c <prvSetupTimerInterrupt+0x34>)
   17e80:	2207      	movs	r2, #7
   17e82:	601a      	str	r2, [r3, #0]
   17e84:	46c0      	nop			; (mov r8, r8)
   17e86:	46bd      	mov	sp, r7
   17e88:	bdb0      	pop	{r4, r5, r7, pc}
   17e8a:	46c0      	nop			; (mov r8, r8)
   17e8c:	e000e010 	.word	0xe000e010
   17e90:	e000e018 	.word	0xe000e018
   17e94:	e000e014 	.word	0xe000e014
   17e98:	000279b5 	.word	0x000279b5
   17e9c:	00030549 	.word	0x00030549

00017ea0 <pvPortMalloc>:
   17ea0:	b580      	push	{r7, lr}
   17ea2:	b084      	sub	sp, #16
   17ea4:	af00      	add	r7, sp, #0
   17ea6:	6078      	str	r0, [r7, #4]
   17ea8:	2300      	movs	r3, #0
   17eaa:	60fb      	str	r3, [r7, #12]
   17eac:	687b      	ldr	r3, [r7, #4]
   17eae:	2207      	movs	r2, #7
   17eb0:	4013      	ands	r3, r2
   17eb2:	d004      	beq.n	17ebe <pvPortMalloc+0x1e>
   17eb4:	687b      	ldr	r3, [r7, #4]
   17eb6:	2207      	movs	r2, #7
   17eb8:	4393      	bics	r3, r2
   17eba:	3308      	adds	r3, #8
   17ebc:	607b      	str	r3, [r7, #4]
   17ebe:	4b21      	ldr	r3, [pc, #132]	; (17f44 <pvPortMalloc+0xa4>)
   17ec0:	4798      	blx	r3
   17ec2:	4b21      	ldr	r3, [pc, #132]	; (17f48 <pvPortMalloc+0xa8>)
   17ec4:	681b      	ldr	r3, [r3, #0]
   17ec6:	2b00      	cmp	r3, #0
   17ec8:	d105      	bne.n	17ed6 <pvPortMalloc+0x36>
   17eca:	4b20      	ldr	r3, [pc, #128]	; (17f4c <pvPortMalloc+0xac>)
   17ecc:	2207      	movs	r2, #7
   17ece:	4393      	bics	r3, r2
   17ed0:	001a      	movs	r2, r3
   17ed2:	4b1d      	ldr	r3, [pc, #116]	; (17f48 <pvPortMalloc+0xa8>)
   17ed4:	601a      	str	r2, [r3, #0]
   17ed6:	4b1e      	ldr	r3, [pc, #120]	; (17f50 <pvPortMalloc+0xb0>)
   17ed8:	681a      	ldr	r2, [r3, #0]
   17eda:	687b      	ldr	r3, [r7, #4]
   17edc:	18d3      	adds	r3, r2, r3
   17ede:	4a1d      	ldr	r2, [pc, #116]	; (17f54 <pvPortMalloc+0xb4>)
   17ee0:	4293      	cmp	r3, r2
   17ee2:	d813      	bhi.n	17f0c <pvPortMalloc+0x6c>
   17ee4:	4b1a      	ldr	r3, [pc, #104]	; (17f50 <pvPortMalloc+0xb0>)
   17ee6:	681a      	ldr	r2, [r3, #0]
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	18d2      	adds	r2, r2, r3
   17eec:	4b18      	ldr	r3, [pc, #96]	; (17f50 <pvPortMalloc+0xb0>)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	429a      	cmp	r2, r3
   17ef2:	d90b      	bls.n	17f0c <pvPortMalloc+0x6c>
   17ef4:	4b14      	ldr	r3, [pc, #80]	; (17f48 <pvPortMalloc+0xa8>)
   17ef6:	681a      	ldr	r2, [r3, #0]
   17ef8:	4b15      	ldr	r3, [pc, #84]	; (17f50 <pvPortMalloc+0xb0>)
   17efa:	681b      	ldr	r3, [r3, #0]
   17efc:	18d3      	adds	r3, r2, r3
   17efe:	60fb      	str	r3, [r7, #12]
   17f00:	4b13      	ldr	r3, [pc, #76]	; (17f50 <pvPortMalloc+0xb0>)
   17f02:	681a      	ldr	r2, [r3, #0]
   17f04:	687b      	ldr	r3, [r7, #4]
   17f06:	18d2      	adds	r2, r2, r3
   17f08:	4b11      	ldr	r3, [pc, #68]	; (17f50 <pvPortMalloc+0xb0>)
   17f0a:	601a      	str	r2, [r3, #0]
   17f0c:	68fb      	ldr	r3, [r7, #12]
   17f0e:	2b00      	cmp	r3, #0
   17f10:	d006      	beq.n	17f20 <pvPortMalloc+0x80>
   17f12:	68fb      	ldr	r3, [r7, #12]
   17f14:	687a      	ldr	r2, [r7, #4]
   17f16:	0019      	movs	r1, r3
   17f18:	2094      	movs	r0, #148	; 0x94
   17f1a:	4b0f      	ldr	r3, [pc, #60]	; (17f58 <pvPortMalloc+0xb8>)
   17f1c:	4798      	blx	r3
   17f1e:	e005      	b.n	17f2c <pvPortMalloc+0x8c>
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	687a      	ldr	r2, [r7, #4]
   17f24:	0019      	movs	r1, r3
   17f26:	20e8      	movs	r0, #232	; 0xe8
   17f28:	4b0b      	ldr	r3, [pc, #44]	; (17f58 <pvPortMalloc+0xb8>)
   17f2a:	4798      	blx	r3
   17f2c:	4b0b      	ldr	r3, [pc, #44]	; (17f5c <pvPortMalloc+0xbc>)
   17f2e:	4798      	blx	r3
   17f30:	68fb      	ldr	r3, [r7, #12]
   17f32:	2b00      	cmp	r3, #0
   17f34:	d101      	bne.n	17f3a <pvPortMalloc+0x9a>
   17f36:	4b0a      	ldr	r3, [pc, #40]	; (17f60 <pvPortMalloc+0xc0>)
   17f38:	4798      	blx	r3
   17f3a:	68fb      	ldr	r3, [r7, #12]
   17f3c:	0018      	movs	r0, r3
   17f3e:	46bd      	mov	sp, r7
   17f40:	b004      	add	sp, #16
   17f42:	bd80      	pop	{r7, pc}
   17f44:	0001a025 	.word	0x0001a025
   17f48:	20003b30 	.word	0x20003b30
   17f4c:	20000c54 	.word	0x20000c54
   17f50:	20003b2c 	.word	0x20003b2c
   17f54:	00002ed7 	.word	0x00002ed7
   17f58:	00016611 	.word	0x00016611
   17f5c:	0001a03d 	.word	0x0001a03d
   17f60:	00030519 	.word	0x00030519

00017f64 <vPortFree>:
   17f64:	b580      	push	{r7, lr}
   17f66:	b082      	sub	sp, #8
   17f68:	af00      	add	r7, sp, #0
   17f6a:	6078      	str	r0, [r7, #4]
   17f6c:	687b      	ldr	r3, [r7, #4]
   17f6e:	2b00      	cmp	r3, #0
   17f70:	d001      	beq.n	17f76 <vPortFree+0x12>
   17f72:	b672      	cpsid	i
   17f74:	e7fe      	b.n	17f74 <vPortFree+0x10>
   17f76:	46c0      	nop			; (mov r8, r8)
   17f78:	46bd      	mov	sp, r7
   17f7a:	b002      	add	sp, #8
   17f7c:	bd80      	pop	{r7, pc}
	...

00017f80 <xPortGetFreeHeapSize>:
   17f80:	b580      	push	{r7, lr}
   17f82:	af00      	add	r7, sp, #0
   17f84:	4b03      	ldr	r3, [pc, #12]	; (17f94 <xPortGetFreeHeapSize+0x14>)
   17f86:	681b      	ldr	r3, [r3, #0]
   17f88:	4a03      	ldr	r2, [pc, #12]	; (17f98 <xPortGetFreeHeapSize+0x18>)
   17f8a:	1ad3      	subs	r3, r2, r3
   17f8c:	0018      	movs	r0, r3
   17f8e:	46bd      	mov	sp, r7
   17f90:	bd80      	pop	{r7, pc}
   17f92:	46c0      	nop			; (mov r8, r8)
   17f94:	20003b2c 	.word	0x20003b2c
   17f98:	00002ed8 	.word	0x00002ed8

00017f9c <xQueueGenericReset>:
   17f9c:	b580      	push	{r7, lr}
   17f9e:	b084      	sub	sp, #16
   17fa0:	af00      	add	r7, sp, #0
   17fa2:	6078      	str	r0, [r7, #4]
   17fa4:	6039      	str	r1, [r7, #0]
   17fa6:	687b      	ldr	r3, [r7, #4]
   17fa8:	60fb      	str	r3, [r7, #12]
   17faa:	68fb      	ldr	r3, [r7, #12]
   17fac:	2b00      	cmp	r3, #0
   17fae:	d101      	bne.n	17fb4 <xQueueGenericReset+0x18>
   17fb0:	b672      	cpsid	i
   17fb2:	e7fe      	b.n	17fb2 <xQueueGenericReset+0x16>
   17fb4:	4b23      	ldr	r3, [pc, #140]	; (18044 <xQueueGenericReset+0xa8>)
   17fb6:	4798      	blx	r3
   17fb8:	68fb      	ldr	r3, [r7, #12]
   17fba:	681a      	ldr	r2, [r3, #0]
   17fbc:	68fb      	ldr	r3, [r7, #12]
   17fbe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   17fc0:	68fb      	ldr	r3, [r7, #12]
   17fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17fc4:	434b      	muls	r3, r1
   17fc6:	18d2      	adds	r2, r2, r3
   17fc8:	68fb      	ldr	r3, [r7, #12]
   17fca:	605a      	str	r2, [r3, #4]
   17fcc:	68fb      	ldr	r3, [r7, #12]
   17fce:	2200      	movs	r2, #0
   17fd0:	639a      	str	r2, [r3, #56]	; 0x38
   17fd2:	68fb      	ldr	r3, [r7, #12]
   17fd4:	681a      	ldr	r2, [r3, #0]
   17fd6:	68fb      	ldr	r3, [r7, #12]
   17fd8:	609a      	str	r2, [r3, #8]
   17fda:	68fb      	ldr	r3, [r7, #12]
   17fdc:	681a      	ldr	r2, [r3, #0]
   17fde:	68fb      	ldr	r3, [r7, #12]
   17fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17fe2:	1e59      	subs	r1, r3, #1
   17fe4:	68fb      	ldr	r3, [r7, #12]
   17fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17fe8:	434b      	muls	r3, r1
   17fea:	18d2      	adds	r2, r2, r3
   17fec:	68fb      	ldr	r3, [r7, #12]
   17fee:	60da      	str	r2, [r3, #12]
   17ff0:	68fb      	ldr	r3, [r7, #12]
   17ff2:	2244      	movs	r2, #68	; 0x44
   17ff4:	21ff      	movs	r1, #255	; 0xff
   17ff6:	5499      	strb	r1, [r3, r2]
   17ff8:	68fb      	ldr	r3, [r7, #12]
   17ffa:	2245      	movs	r2, #69	; 0x45
   17ffc:	21ff      	movs	r1, #255	; 0xff
   17ffe:	5499      	strb	r1, [r3, r2]
   18000:	683b      	ldr	r3, [r7, #0]
   18002:	2b00      	cmp	r3, #0
   18004:	d10d      	bne.n	18022 <xQueueGenericReset+0x86>
   18006:	68fb      	ldr	r3, [r7, #12]
   18008:	691b      	ldr	r3, [r3, #16]
   1800a:	2b00      	cmp	r3, #0
   1800c:	d013      	beq.n	18036 <xQueueGenericReset+0x9a>
   1800e:	68fb      	ldr	r3, [r7, #12]
   18010:	3310      	adds	r3, #16
   18012:	0018      	movs	r0, r3
   18014:	4b0c      	ldr	r3, [pc, #48]	; (18048 <xQueueGenericReset+0xac>)
   18016:	4798      	blx	r3
   18018:	1e03      	subs	r3, r0, #0
   1801a:	d00c      	beq.n	18036 <xQueueGenericReset+0x9a>
   1801c:	4b0b      	ldr	r3, [pc, #44]	; (1804c <xQueueGenericReset+0xb0>)
   1801e:	4798      	blx	r3
   18020:	e009      	b.n	18036 <xQueueGenericReset+0x9a>
   18022:	68fb      	ldr	r3, [r7, #12]
   18024:	3310      	adds	r3, #16
   18026:	0018      	movs	r0, r3
   18028:	4b09      	ldr	r3, [pc, #36]	; (18050 <xQueueGenericReset+0xb4>)
   1802a:	4798      	blx	r3
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	3324      	adds	r3, #36	; 0x24
   18030:	0018      	movs	r0, r3
   18032:	4b07      	ldr	r3, [pc, #28]	; (18050 <xQueueGenericReset+0xb4>)
   18034:	4798      	blx	r3
   18036:	4b07      	ldr	r3, [pc, #28]	; (18054 <xQueueGenericReset+0xb8>)
   18038:	4798      	blx	r3
   1803a:	2301      	movs	r3, #1
   1803c:	0018      	movs	r0, r3
   1803e:	46bd      	mov	sp, r7
   18040:	b004      	add	sp, #16
   18042:	bd80      	pop	{r7, pc}
   18044:	00017d69 	.word	0x00017d69
   18048:	0001a5fd 	.word	0x0001a5fd
   1804c:	00017d51 	.word	0x00017d51
   18050:	00017ae1 	.word	0x00017ae1
   18054:	00017d8d 	.word	0x00017d8d

00018058 <xQueueGenericCreate>:
   18058:	b590      	push	{r4, r7, lr}
   1805a:	b08b      	sub	sp, #44	; 0x2c
   1805c:	af02      	add	r7, sp, #8
   1805e:	60f8      	str	r0, [r7, #12]
   18060:	60b9      	str	r1, [r7, #8]
   18062:	1dfb      	adds	r3, r7, #7
   18064:	701a      	strb	r2, [r3, #0]
   18066:	68fb      	ldr	r3, [r7, #12]
   18068:	2b00      	cmp	r3, #0
   1806a:	d101      	bne.n	18070 <xQueueGenericCreate+0x18>
   1806c:	b672      	cpsid	i
   1806e:	e7fe      	b.n	1806e <xQueueGenericCreate+0x16>
   18070:	68bb      	ldr	r3, [r7, #8]
   18072:	2b00      	cmp	r3, #0
   18074:	d102      	bne.n	1807c <xQueueGenericCreate+0x24>
   18076:	2300      	movs	r3, #0
   18078:	61fb      	str	r3, [r7, #28]
   1807a:	e003      	b.n	18084 <xQueueGenericCreate+0x2c>
   1807c:	68fb      	ldr	r3, [r7, #12]
   1807e:	68ba      	ldr	r2, [r7, #8]
   18080:	4353      	muls	r3, r2
   18082:	61fb      	str	r3, [r7, #28]
   18084:	69fb      	ldr	r3, [r7, #28]
   18086:	3354      	adds	r3, #84	; 0x54
   18088:	0018      	movs	r0, r3
   1808a:	4b19      	ldr	r3, [pc, #100]	; (180f0 <xQueueGenericCreate+0x98>)
   1808c:	4798      	blx	r3
   1808e:	0003      	movs	r3, r0
   18090:	61bb      	str	r3, [r7, #24]
   18092:	69bb      	ldr	r3, [r7, #24]
   18094:	2b00      	cmp	r3, #0
   18096:	d00d      	beq.n	180b4 <xQueueGenericCreate+0x5c>
   18098:	69bb      	ldr	r3, [r7, #24]
   1809a:	3354      	adds	r3, #84	; 0x54
   1809c:	617b      	str	r3, [r7, #20]
   1809e:	1dfb      	adds	r3, r7, #7
   180a0:	781c      	ldrb	r4, [r3, #0]
   180a2:	697a      	ldr	r2, [r7, #20]
   180a4:	68b9      	ldr	r1, [r7, #8]
   180a6:	68f8      	ldr	r0, [r7, #12]
   180a8:	69bb      	ldr	r3, [r7, #24]
   180aa:	9300      	str	r3, [sp, #0]
   180ac:	0023      	movs	r3, r4
   180ae:	4c11      	ldr	r4, [pc, #68]	; (180f4 <xQueueGenericCreate+0x9c>)
   180b0:	47a0      	blx	r4
   180b2:	e017      	b.n	180e4 <xQueueGenericCreate+0x8c>
   180b4:	4b10      	ldr	r3, [pc, #64]	; (180f8 <xQueueGenericCreate+0xa0>)
   180b6:	4798      	blx	r3
   180b8:	0003      	movs	r3, r0
   180ba:	0018      	movs	r0, r3
   180bc:	4b0f      	ldr	r3, [pc, #60]	; (180fc <xQueueGenericCreate+0xa4>)
   180be:	4798      	blx	r3
   180c0:	0003      	movs	r3, r0
   180c2:	001a      	movs	r2, r3
   180c4:	4b0e      	ldr	r3, [pc, #56]	; (18100 <xQueueGenericCreate+0xa8>)
   180c6:	881b      	ldrh	r3, [r3, #0]
   180c8:	4013      	ands	r3, r2
   180ca:	b29b      	uxth	r3, r3
   180cc:	2b00      	cmp	r3, #0
   180ce:	d009      	beq.n	180e4 <xQueueGenericCreate+0x8c>
   180d0:	1dfb      	adds	r3, r7, #7
   180d2:	781b      	ldrb	r3, [r3, #0]
   180d4:	4a0b      	ldr	r2, [pc, #44]	; (18104 <xQueueGenericCreate+0xac>)
   180d6:	5cd3      	ldrb	r3, [r2, r3]
   180d8:	3340      	adds	r3, #64	; 0x40
   180da:	b2db      	uxtb	r3, r3
   180dc:	2100      	movs	r1, #0
   180de:	0018      	movs	r0, r3
   180e0:	4b09      	ldr	r3, [pc, #36]	; (18108 <xQueueGenericCreate+0xb0>)
   180e2:	4798      	blx	r3
   180e4:	69bb      	ldr	r3, [r7, #24]
   180e6:	0018      	movs	r0, r3
   180e8:	46bd      	mov	sp, r7
   180ea:	b009      	add	sp, #36	; 0x24
   180ec:	bd90      	pop	{r4, r7, pc}
   180ee:	46c0      	nop			; (mov r8, r8)
   180f0:	00017ea1 	.word	0x00017ea1
   180f4:	0001810d 	.word	0x0001810d
   180f8:	00016005 	.word	0x00016005
   180fc:	00015d69 	.word	0x00015d69
   18100:	200000f0 	.word	0x200000f0
   18104:	200000e4 	.word	0x200000e4
   18108:	00016a69 	.word	0x00016a69

0001810c <prvInitialiseNewQueue>:
   1810c:	b5b0      	push	{r4, r5, r7, lr}
   1810e:	b084      	sub	sp, #16
   18110:	af00      	add	r7, sp, #0
   18112:	60f8      	str	r0, [r7, #12]
   18114:	60b9      	str	r1, [r7, #8]
   18116:	607a      	str	r2, [r7, #4]
   18118:	001a      	movs	r2, r3
   1811a:	1cfb      	adds	r3, r7, #3
   1811c:	701a      	strb	r2, [r3, #0]
   1811e:	68bb      	ldr	r3, [r7, #8]
   18120:	2b00      	cmp	r3, #0
   18122:	d103      	bne.n	1812c <prvInitialiseNewQueue+0x20>
   18124:	6a3b      	ldr	r3, [r7, #32]
   18126:	6a3a      	ldr	r2, [r7, #32]
   18128:	601a      	str	r2, [r3, #0]
   1812a:	e002      	b.n	18132 <prvInitialiseNewQueue+0x26>
   1812c:	6a3b      	ldr	r3, [r7, #32]
   1812e:	687a      	ldr	r2, [r7, #4]
   18130:	601a      	str	r2, [r3, #0]
   18132:	6a3b      	ldr	r3, [r7, #32]
   18134:	68fa      	ldr	r2, [r7, #12]
   18136:	63da      	str	r2, [r3, #60]	; 0x3c
   18138:	6a3b      	ldr	r3, [r7, #32]
   1813a:	68ba      	ldr	r2, [r7, #8]
   1813c:	641a      	str	r2, [r3, #64]	; 0x40
   1813e:	6a3b      	ldr	r3, [r7, #32]
   18140:	2101      	movs	r1, #1
   18142:	0018      	movs	r0, r3
   18144:	4b41      	ldr	r3, [pc, #260]	; (1824c <prvInitialiseNewQueue+0x140>)
   18146:	4798      	blx	r3
   18148:	6a3b      	ldr	r3, [r7, #32]
   1814a:	1cfa      	adds	r2, r7, #3
   1814c:	2150      	movs	r1, #80	; 0x50
   1814e:	7812      	ldrb	r2, [r2, #0]
   18150:	545a      	strb	r2, [r3, r1]
   18152:	6a3b      	ldr	r3, [r7, #32]
   18154:	2200      	movs	r2, #0
   18156:	649a      	str	r2, [r3, #72]	; 0x48
   18158:	6a3b      	ldr	r3, [r7, #32]
   1815a:	0018      	movs	r0, r3
   1815c:	4b3c      	ldr	r3, [pc, #240]	; (18250 <prvInitialiseNewQueue+0x144>)
   1815e:	4798      	blx	r3
   18160:	0003      	movs	r3, r0
   18162:	001a      	movs	r2, r3
   18164:	4b3b      	ldr	r3, [pc, #236]	; (18254 <prvInitialiseNewQueue+0x148>)
   18166:	5c9b      	ldrb	r3, [r3, r2]
   18168:	0018      	movs	r0, r3
   1816a:	4b3b      	ldr	r3, [pc, #236]	; (18258 <prvInitialiseNewQueue+0x14c>)
   1816c:	4798      	blx	r3
   1816e:	0003      	movs	r3, r0
   18170:	b29a      	uxth	r2, r3
   18172:	6a3b      	ldr	r3, [r7, #32]
   18174:	0011      	movs	r1, r2
   18176:	0018      	movs	r0, r3
   18178:	4b38      	ldr	r3, [pc, #224]	; (1825c <prvInitialiseNewQueue+0x150>)
   1817a:	4798      	blx	r3
   1817c:	4b38      	ldr	r3, [pc, #224]	; (18260 <prvInitialiseNewQueue+0x154>)
   1817e:	881a      	ldrh	r2, [r3, #0]
   18180:	6a3b      	ldr	r3, [r7, #32]
   18182:	0011      	movs	r1, r2
   18184:	0018      	movs	r0, r3
   18186:	4b37      	ldr	r3, [pc, #220]	; (18264 <prvInitialiseNewQueue+0x158>)
   18188:	4798      	blx	r3
   1818a:	6a3b      	ldr	r3, [r7, #32]
   1818c:	0018      	movs	r0, r3
   1818e:	4b30      	ldr	r3, [pc, #192]	; (18250 <prvInitialiseNewQueue+0x144>)
   18190:	4798      	blx	r3
   18192:	0003      	movs	r3, r0
   18194:	001a      	movs	r2, r3
   18196:	4b2f      	ldr	r3, [pc, #188]	; (18254 <prvInitialiseNewQueue+0x148>)
   18198:	5c9c      	ldrb	r4, [r3, r2]
   1819a:	6a3b      	ldr	r3, [r7, #32]
   1819c:	0018      	movs	r0, r3
   1819e:	4b32      	ldr	r3, [pc, #200]	; (18268 <prvInitialiseNewQueue+0x15c>)
   181a0:	4798      	blx	r3
   181a2:	0003      	movs	r3, r0
   181a4:	b2db      	uxtb	r3, r3
   181a6:	0019      	movs	r1, r3
   181a8:	0020      	movs	r0, r4
   181aa:	4b30      	ldr	r3, [pc, #192]	; (1826c <prvInitialiseNewQueue+0x160>)
   181ac:	4798      	blx	r3
   181ae:	4b30      	ldr	r3, [pc, #192]	; (18270 <prvInitialiseNewQueue+0x164>)
   181b0:	4798      	blx	r3
   181b2:	0003      	movs	r3, r0
   181b4:	0018      	movs	r0, r3
   181b6:	4b2f      	ldr	r3, [pc, #188]	; (18274 <prvInitialiseNewQueue+0x168>)
   181b8:	4798      	blx	r3
   181ba:	0003      	movs	r3, r0
   181bc:	001a      	movs	r2, r3
   181be:	4b2e      	ldr	r3, [pc, #184]	; (18278 <prvInitialiseNewQueue+0x16c>)
   181c0:	881b      	ldrh	r3, [r3, #0]
   181c2:	4013      	ands	r3, r2
   181c4:	b29b      	uxth	r3, r3
   181c6:	2b00      	cmp	r3, #0
   181c8:	d029      	beq.n	1821e <prvInitialiseNewQueue+0x112>
   181ca:	6a3b      	ldr	r3, [r7, #32]
   181cc:	0018      	movs	r0, r3
   181ce:	4b2b      	ldr	r3, [pc, #172]	; (1827c <prvInitialiseNewQueue+0x170>)
   181d0:	4798      	blx	r3
   181d2:	0003      	movs	r3, r0
   181d4:	001a      	movs	r2, r3
   181d6:	4b28      	ldr	r3, [pc, #160]	; (18278 <prvInitialiseNewQueue+0x16c>)
   181d8:	881b      	ldrh	r3, [r3, #0]
   181da:	4013      	ands	r3, r2
   181dc:	b29b      	uxth	r3, r3
   181de:	2b00      	cmp	r3, #0
   181e0:	d01d      	beq.n	1821e <prvInitialiseNewQueue+0x112>
   181e2:	6a3b      	ldr	r3, [r7, #32]
   181e4:	0018      	movs	r0, r3
   181e6:	4b1a      	ldr	r3, [pc, #104]	; (18250 <prvInitialiseNewQueue+0x144>)
   181e8:	4798      	blx	r3
   181ea:	0003      	movs	r3, r0
   181ec:	001a      	movs	r2, r3
   181ee:	4b19      	ldr	r3, [pc, #100]	; (18254 <prvInitialiseNewQueue+0x148>)
   181f0:	5c9b      	ldrb	r3, [r3, r2]
   181f2:	3318      	adds	r3, #24
   181f4:	b2db      	uxtb	r3, r3
   181f6:	001d      	movs	r5, r3
   181f8:	6a3b      	ldr	r3, [r7, #32]
   181fa:	0018      	movs	r0, r3
   181fc:	4b14      	ldr	r3, [pc, #80]	; (18250 <prvInitialiseNewQueue+0x144>)
   181fe:	4798      	blx	r3
   18200:	0003      	movs	r3, r0
   18202:	001a      	movs	r2, r3
   18204:	4b13      	ldr	r3, [pc, #76]	; (18254 <prvInitialiseNewQueue+0x148>)
   18206:	5c9c      	ldrb	r4, [r3, r2]
   18208:	6a3b      	ldr	r3, [r7, #32]
   1820a:	0018      	movs	r0, r3
   1820c:	4b16      	ldr	r3, [pc, #88]	; (18268 <prvInitialiseNewQueue+0x15c>)
   1820e:	4798      	blx	r3
   18210:	0003      	movs	r3, r0
   18212:	b2db      	uxtb	r3, r3
   18214:	001a      	movs	r2, r3
   18216:	0021      	movs	r1, r4
   18218:	0028      	movs	r0, r5
   1821a:	4b19      	ldr	r3, [pc, #100]	; (18280 <prvInitialiseNewQueue+0x174>)
   1821c:	4798      	blx	r3
   1821e:	6a3b      	ldr	r3, [r7, #32]
   18220:	0018      	movs	r0, r3
   18222:	4b0b      	ldr	r3, [pc, #44]	; (18250 <prvInitialiseNewQueue+0x144>)
   18224:	4798      	blx	r3
   18226:	0003      	movs	r3, r0
   18228:	001a      	movs	r2, r3
   1822a:	4b0a      	ldr	r3, [pc, #40]	; (18254 <prvInitialiseNewQueue+0x148>)
   1822c:	5c9c      	ldrb	r4, [r3, r2]
   1822e:	6a3b      	ldr	r3, [r7, #32]
   18230:	0018      	movs	r0, r3
   18232:	4b0d      	ldr	r3, [pc, #52]	; (18268 <prvInitialiseNewQueue+0x15c>)
   18234:	4798      	blx	r3
   18236:	0003      	movs	r3, r0
   18238:	b2db      	uxtb	r3, r3
   1823a:	2200      	movs	r2, #0
   1823c:	0019      	movs	r1, r3
   1823e:	0020      	movs	r0, r4
   18240:	4b10      	ldr	r3, [pc, #64]	; (18284 <prvInitialiseNewQueue+0x178>)
   18242:	4798      	blx	r3
   18244:	46c0      	nop			; (mov r8, r8)
   18246:	46bd      	mov	sp, r7
   18248:	b004      	add	sp, #16
   1824a:	bdb0      	pop	{r4, r5, r7, pc}
   1824c:	00017f9d 	.word	0x00017f9d
   18250:	00015d29 	.word	0x00015d29
   18254:	200000e4 	.word	0x200000e4
   18258:	000172e9 	.word	0x000172e9
   1825c:	00015e4d 	.word	0x00015e4d
   18260:	200000f2 	.word	0x200000f2
   18264:	00015e89 	.word	0x00015e89
   18268:	00015e09 	.word	0x00015e09
   1826c:	00017481 	.word	0x00017481
   18270:	00016005 	.word	0x00016005
   18274:	00015d69 	.word	0x00015d69
   18278:	200000f0 	.word	0x200000f0
   1827c:	00015e29 	.word	0x00015e29
   18280:	00016761 	.word	0x00016761
   18284:	00016dbd 	.word	0x00016dbd

00018288 <prvInitialiseMutex>:
   18288:	b590      	push	{r4, r7, lr}
   1828a:	b083      	sub	sp, #12
   1828c:	af00      	add	r7, sp, #0
   1828e:	6078      	str	r0, [r7, #4]
   18290:	687b      	ldr	r3, [r7, #4]
   18292:	2b00      	cmp	r3, #0
   18294:	d00e      	beq.n	182b4 <prvInitialiseMutex+0x2c>
   18296:	687b      	ldr	r3, [r7, #4]
   18298:	2200      	movs	r2, #0
   1829a:	605a      	str	r2, [r3, #4]
   1829c:	687b      	ldr	r3, [r7, #4]
   1829e:	2200      	movs	r2, #0
   182a0:	601a      	str	r2, [r3, #0]
   182a2:	687b      	ldr	r3, [r7, #4]
   182a4:	2200      	movs	r2, #0
   182a6:	60da      	str	r2, [r3, #12]
   182a8:	6878      	ldr	r0, [r7, #4]
   182aa:	2300      	movs	r3, #0
   182ac:	2200      	movs	r2, #0
   182ae:	2100      	movs	r1, #0
   182b0:	4c02      	ldr	r4, [pc, #8]	; (182bc <prvInitialiseMutex+0x34>)
   182b2:	47a0      	blx	r4
   182b4:	46c0      	nop			; (mov r8, r8)
   182b6:	46bd      	mov	sp, r7
   182b8:	b003      	add	sp, #12
   182ba:	bd90      	pop	{r4, r7, pc}
   182bc:	00018301 	.word	0x00018301

000182c0 <xQueueCreateMutex>:
   182c0:	b580      	push	{r7, lr}
   182c2:	b086      	sub	sp, #24
   182c4:	af00      	add	r7, sp, #0
   182c6:	0002      	movs	r2, r0
   182c8:	1dfb      	adds	r3, r7, #7
   182ca:	701a      	strb	r2, [r3, #0]
   182cc:	2301      	movs	r3, #1
   182ce:	617b      	str	r3, [r7, #20]
   182d0:	2300      	movs	r3, #0
   182d2:	613b      	str	r3, [r7, #16]
   182d4:	1dfb      	adds	r3, r7, #7
   182d6:	781a      	ldrb	r2, [r3, #0]
   182d8:	6939      	ldr	r1, [r7, #16]
   182da:	697b      	ldr	r3, [r7, #20]
   182dc:	0018      	movs	r0, r3
   182de:	4b06      	ldr	r3, [pc, #24]	; (182f8 <xQueueCreateMutex+0x38>)
   182e0:	4798      	blx	r3
   182e2:	0003      	movs	r3, r0
   182e4:	60fb      	str	r3, [r7, #12]
   182e6:	68fb      	ldr	r3, [r7, #12]
   182e8:	0018      	movs	r0, r3
   182ea:	4b04      	ldr	r3, [pc, #16]	; (182fc <xQueueCreateMutex+0x3c>)
   182ec:	4798      	blx	r3
   182ee:	68fb      	ldr	r3, [r7, #12]
   182f0:	0018      	movs	r0, r3
   182f2:	46bd      	mov	sp, r7
   182f4:	b006      	add	sp, #24
   182f6:	bd80      	pop	{r7, pc}
   182f8:	00018059 	.word	0x00018059
   182fc:	00018289 	.word	0x00018289

00018300 <xQueueGenericSend>:
   18300:	b5b0      	push	{r4, r5, r7, lr}
   18302:	b08a      	sub	sp, #40	; 0x28
   18304:	af00      	add	r7, sp, #0
   18306:	60f8      	str	r0, [r7, #12]
   18308:	60b9      	str	r1, [r7, #8]
   1830a:	607a      	str	r2, [r7, #4]
   1830c:	603b      	str	r3, [r7, #0]
   1830e:	2300      	movs	r3, #0
   18310:	627b      	str	r3, [r7, #36]	; 0x24
   18312:	68fb      	ldr	r3, [r7, #12]
   18314:	623b      	str	r3, [r7, #32]
   18316:	6a3b      	ldr	r3, [r7, #32]
   18318:	2b00      	cmp	r3, #0
   1831a:	d101      	bne.n	18320 <xQueueGenericSend+0x20>
   1831c:	b672      	cpsid	i
   1831e:	e7fe      	b.n	1831e <xQueueGenericSend+0x1e>
   18320:	68bb      	ldr	r3, [r7, #8]
   18322:	2b00      	cmp	r3, #0
   18324:	d103      	bne.n	1832e <xQueueGenericSend+0x2e>
   18326:	6a3b      	ldr	r3, [r7, #32]
   18328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1832a:	2b00      	cmp	r3, #0
   1832c:	d101      	bne.n	18332 <xQueueGenericSend+0x32>
   1832e:	2301      	movs	r3, #1
   18330:	e000      	b.n	18334 <xQueueGenericSend+0x34>
   18332:	2300      	movs	r3, #0
   18334:	2b00      	cmp	r3, #0
   18336:	d101      	bne.n	1833c <xQueueGenericSend+0x3c>
   18338:	b672      	cpsid	i
   1833a:	e7fe      	b.n	1833a <xQueueGenericSend+0x3a>
   1833c:	683b      	ldr	r3, [r7, #0]
   1833e:	2b02      	cmp	r3, #2
   18340:	d103      	bne.n	1834a <xQueueGenericSend+0x4a>
   18342:	6a3b      	ldr	r3, [r7, #32]
   18344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18346:	2b01      	cmp	r3, #1
   18348:	d101      	bne.n	1834e <xQueueGenericSend+0x4e>
   1834a:	2301      	movs	r3, #1
   1834c:	e000      	b.n	18350 <xQueueGenericSend+0x50>
   1834e:	2300      	movs	r3, #0
   18350:	2b00      	cmp	r3, #0
   18352:	d101      	bne.n	18358 <xQueueGenericSend+0x58>
   18354:	b672      	cpsid	i
   18356:	e7fe      	b.n	18356 <xQueueGenericSend+0x56>
   18358:	4bbc      	ldr	r3, [pc, #752]	; (1864c <xQueueGenericSend+0x34c>)
   1835a:	4798      	blx	r3
   1835c:	1e03      	subs	r3, r0, #0
   1835e:	d102      	bne.n	18366 <xQueueGenericSend+0x66>
   18360:	687b      	ldr	r3, [r7, #4]
   18362:	2b00      	cmp	r3, #0
   18364:	d101      	bne.n	1836a <xQueueGenericSend+0x6a>
   18366:	2301      	movs	r3, #1
   18368:	e000      	b.n	1836c <xQueueGenericSend+0x6c>
   1836a:	2300      	movs	r3, #0
   1836c:	2b00      	cmp	r3, #0
   1836e:	d101      	bne.n	18374 <xQueueGenericSend+0x74>
   18370:	b672      	cpsid	i
   18372:	e7fe      	b.n	18372 <xQueueGenericSend+0x72>
   18374:	4bb6      	ldr	r3, [pc, #728]	; (18650 <xQueueGenericSend+0x350>)
   18376:	4798      	blx	r3
   18378:	6a3b      	ldr	r3, [r7, #32]
   1837a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1837c:	6a3b      	ldr	r3, [r7, #32]
   1837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18380:	429a      	cmp	r2, r3
   18382:	d303      	bcc.n	1838c <xQueueGenericSend+0x8c>
   18384:	683b      	ldr	r3, [r7, #0]
   18386:	2b02      	cmp	r3, #2
   18388:	d000      	beq.n	1838c <xQueueGenericSend+0x8c>
   1838a:	e08e      	b.n	184aa <xQueueGenericSend+0x1aa>
   1838c:	4bb1      	ldr	r3, [pc, #708]	; (18654 <xQueueGenericSend+0x354>)
   1838e:	4798      	blx	r3
   18390:	0003      	movs	r3, r0
   18392:	0018      	movs	r0, r3
   18394:	4bb0      	ldr	r3, [pc, #704]	; (18658 <xQueueGenericSend+0x358>)
   18396:	4798      	blx	r3
   18398:	0003      	movs	r3, r0
   1839a:	001a      	movs	r2, r3
   1839c:	4baf      	ldr	r3, [pc, #700]	; (1865c <xQueueGenericSend+0x35c>)
   1839e:	881b      	ldrh	r3, [r3, #0]
   183a0:	4013      	ands	r3, r2
   183a2:	b29b      	uxth	r3, r3
   183a4:	2b00      	cmp	r3, #0
   183a6:	d02e      	beq.n	18406 <xQueueGenericSend+0x106>
   183a8:	6a3b      	ldr	r3, [r7, #32]
   183aa:	0018      	movs	r0, r3
   183ac:	4bac      	ldr	r3, [pc, #688]	; (18660 <xQueueGenericSend+0x360>)
   183ae:	4798      	blx	r3
   183b0:	0003      	movs	r3, r0
   183b2:	001a      	movs	r2, r3
   183b4:	4ba9      	ldr	r3, [pc, #676]	; (1865c <xQueueGenericSend+0x35c>)
   183b6:	881b      	ldrh	r3, [r3, #0]
   183b8:	4013      	ands	r3, r2
   183ba:	b29b      	uxth	r3, r3
   183bc:	2b00      	cmp	r3, #0
   183be:	d022      	beq.n	18406 <xQueueGenericSend+0x106>
   183c0:	683b      	ldr	r3, [r7, #0]
   183c2:	2b00      	cmp	r3, #0
   183c4:	d10b      	bne.n	183de <xQueueGenericSend+0xde>
   183c6:	6a3b      	ldr	r3, [r7, #32]
   183c8:	0018      	movs	r0, r3
   183ca:	4ba6      	ldr	r3, [pc, #664]	; (18664 <xQueueGenericSend+0x364>)
   183cc:	4798      	blx	r3
   183ce:	0003      	movs	r3, r0
   183d0:	001a      	movs	r2, r3
   183d2:	4ba5      	ldr	r3, [pc, #660]	; (18668 <xQueueGenericSend+0x368>)
   183d4:	5c9b      	ldrb	r3, [r3, r2]
   183d6:	3320      	adds	r3, #32
   183d8:	b2db      	uxtb	r3, r3
   183da:	001d      	movs	r5, r3
   183dc:	e000      	b.n	183e0 <xQueueGenericSend+0xe0>
   183de:	2525      	movs	r5, #37	; 0x25
   183e0:	6a3b      	ldr	r3, [r7, #32]
   183e2:	0018      	movs	r0, r3
   183e4:	4b9f      	ldr	r3, [pc, #636]	; (18664 <xQueueGenericSend+0x364>)
   183e6:	4798      	blx	r3
   183e8:	0003      	movs	r3, r0
   183ea:	001a      	movs	r2, r3
   183ec:	4b9e      	ldr	r3, [pc, #632]	; (18668 <xQueueGenericSend+0x368>)
   183ee:	5c9c      	ldrb	r4, [r3, r2]
   183f0:	6a3b      	ldr	r3, [r7, #32]
   183f2:	0018      	movs	r0, r3
   183f4:	4b9d      	ldr	r3, [pc, #628]	; (1866c <xQueueGenericSend+0x36c>)
   183f6:	4798      	blx	r3
   183f8:	0003      	movs	r3, r0
   183fa:	b2db      	uxtb	r3, r3
   183fc:	001a      	movs	r2, r3
   183fe:	0021      	movs	r1, r4
   18400:	0028      	movs	r0, r5
   18402:	4b9b      	ldr	r3, [pc, #620]	; (18670 <xQueueGenericSend+0x370>)
   18404:	4798      	blx	r3
   18406:	6a3b      	ldr	r3, [r7, #32]
   18408:	0018      	movs	r0, r3
   1840a:	4b96      	ldr	r3, [pc, #600]	; (18664 <xQueueGenericSend+0x364>)
   1840c:	4798      	blx	r3
   1840e:	0003      	movs	r3, r0
   18410:	001a      	movs	r2, r3
   18412:	4b95      	ldr	r3, [pc, #596]	; (18668 <xQueueGenericSend+0x368>)
   18414:	5c9c      	ldrb	r4, [r3, r2]
   18416:	6a3b      	ldr	r3, [r7, #32]
   18418:	0018      	movs	r0, r3
   1841a:	4b94      	ldr	r3, [pc, #592]	; (1866c <xQueueGenericSend+0x36c>)
   1841c:	4798      	blx	r3
   1841e:	0003      	movs	r3, r0
   18420:	b2dd      	uxtb	r5, r3
   18422:	6a3b      	ldr	r3, [r7, #32]
   18424:	0018      	movs	r0, r3
   18426:	4b8f      	ldr	r3, [pc, #572]	; (18664 <xQueueGenericSend+0x364>)
   18428:	4798      	blx	r3
   1842a:	0003      	movs	r3, r0
   1842c:	001a      	movs	r2, r3
   1842e:	4b8e      	ldr	r3, [pc, #568]	; (18668 <xQueueGenericSend+0x368>)
   18430:	5c9b      	ldrb	r3, [r3, r2]
   18432:	2b02      	cmp	r3, #2
   18434:	d005      	beq.n	18442 <xQueueGenericSend+0x142>
   18436:	6a3b      	ldr	r3, [r7, #32]
   18438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1843a:	b2db      	uxtb	r3, r3
   1843c:	3301      	adds	r3, #1
   1843e:	b2db      	uxtb	r3, r3
   18440:	e000      	b.n	18444 <xQueueGenericSend+0x144>
   18442:	2300      	movs	r3, #0
   18444:	001a      	movs	r2, r3
   18446:	0029      	movs	r1, r5
   18448:	0020      	movs	r0, r4
   1844a:	4b8a      	ldr	r3, [pc, #552]	; (18674 <xQueueGenericSend+0x374>)
   1844c:	4798      	blx	r3
   1844e:	683a      	ldr	r2, [r7, #0]
   18450:	68b9      	ldr	r1, [r7, #8]
   18452:	6a3b      	ldr	r3, [r7, #32]
   18454:	0018      	movs	r0, r3
   18456:	4b88      	ldr	r3, [pc, #544]	; (18678 <xQueueGenericSend+0x378>)
   18458:	4798      	blx	r3
   1845a:	0003      	movs	r3, r0
   1845c:	61fb      	str	r3, [r7, #28]
   1845e:	6a3b      	ldr	r3, [r7, #32]
   18460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18462:	2b00      	cmp	r3, #0
   18464:	d00a      	beq.n	1847c <xQueueGenericSend+0x17c>
   18466:	683a      	ldr	r2, [r7, #0]
   18468:	6a3b      	ldr	r3, [r7, #32]
   1846a:	0011      	movs	r1, r2
   1846c:	0018      	movs	r0, r3
   1846e:	4b83      	ldr	r3, [pc, #524]	; (1867c <xQueueGenericSend+0x37c>)
   18470:	4798      	blx	r3
   18472:	1e03      	subs	r3, r0, #0
   18474:	d015      	beq.n	184a2 <xQueueGenericSend+0x1a2>
   18476:	4b82      	ldr	r3, [pc, #520]	; (18680 <xQueueGenericSend+0x380>)
   18478:	4798      	blx	r3
   1847a:	e012      	b.n	184a2 <xQueueGenericSend+0x1a2>
   1847c:	6a3b      	ldr	r3, [r7, #32]
   1847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18480:	2b00      	cmp	r3, #0
   18482:	d009      	beq.n	18498 <xQueueGenericSend+0x198>
   18484:	6a3b      	ldr	r3, [r7, #32]
   18486:	3324      	adds	r3, #36	; 0x24
   18488:	0018      	movs	r0, r3
   1848a:	4b7e      	ldr	r3, [pc, #504]	; (18684 <xQueueGenericSend+0x384>)
   1848c:	4798      	blx	r3
   1848e:	1e03      	subs	r3, r0, #0
   18490:	d007      	beq.n	184a2 <xQueueGenericSend+0x1a2>
   18492:	4b7b      	ldr	r3, [pc, #492]	; (18680 <xQueueGenericSend+0x380>)
   18494:	4798      	blx	r3
   18496:	e004      	b.n	184a2 <xQueueGenericSend+0x1a2>
   18498:	69fb      	ldr	r3, [r7, #28]
   1849a:	2b00      	cmp	r3, #0
   1849c:	d001      	beq.n	184a2 <xQueueGenericSend+0x1a2>
   1849e:	4b78      	ldr	r3, [pc, #480]	; (18680 <xQueueGenericSend+0x380>)
   184a0:	4798      	blx	r3
   184a2:	4b79      	ldr	r3, [pc, #484]	; (18688 <xQueueGenericSend+0x388>)
   184a4:	4798      	blx	r3
   184a6:	2301      	movs	r3, #1
   184a8:	e142      	b.n	18730 <xQueueGenericSend+0x430>
   184aa:	687b      	ldr	r3, [r7, #4]
   184ac:	2b00      	cmp	r3, #0
   184ae:	d140      	bne.n	18532 <xQueueGenericSend+0x232>
   184b0:	4b75      	ldr	r3, [pc, #468]	; (18688 <xQueueGenericSend+0x388>)
   184b2:	4798      	blx	r3
   184b4:	4b67      	ldr	r3, [pc, #412]	; (18654 <xQueueGenericSend+0x354>)
   184b6:	4798      	blx	r3
   184b8:	0003      	movs	r3, r0
   184ba:	0018      	movs	r0, r3
   184bc:	4b66      	ldr	r3, [pc, #408]	; (18658 <xQueueGenericSend+0x358>)
   184be:	4798      	blx	r3
   184c0:	0003      	movs	r3, r0
   184c2:	001a      	movs	r2, r3
   184c4:	4b65      	ldr	r3, [pc, #404]	; (1865c <xQueueGenericSend+0x35c>)
   184c6:	881b      	ldrh	r3, [r3, #0]
   184c8:	4013      	ands	r3, r2
   184ca:	b29b      	uxth	r3, r3
   184cc:	2b00      	cmp	r3, #0
   184ce:	d02e      	beq.n	1852e <xQueueGenericSend+0x22e>
   184d0:	6a3b      	ldr	r3, [r7, #32]
   184d2:	0018      	movs	r0, r3
   184d4:	4b62      	ldr	r3, [pc, #392]	; (18660 <xQueueGenericSend+0x360>)
   184d6:	4798      	blx	r3
   184d8:	0003      	movs	r3, r0
   184da:	001a      	movs	r2, r3
   184dc:	4b5f      	ldr	r3, [pc, #380]	; (1865c <xQueueGenericSend+0x35c>)
   184de:	881b      	ldrh	r3, [r3, #0]
   184e0:	4013      	ands	r3, r2
   184e2:	b29b      	uxth	r3, r3
   184e4:	2b00      	cmp	r3, #0
   184e6:	d022      	beq.n	1852e <xQueueGenericSend+0x22e>
   184e8:	683b      	ldr	r3, [r7, #0]
   184ea:	2b00      	cmp	r3, #0
   184ec:	d10b      	bne.n	18506 <xQueueGenericSend+0x206>
   184ee:	6a3b      	ldr	r3, [r7, #32]
   184f0:	0018      	movs	r0, r3
   184f2:	4b5c      	ldr	r3, [pc, #368]	; (18664 <xQueueGenericSend+0x364>)
   184f4:	4798      	blx	r3
   184f6:	0003      	movs	r3, r0
   184f8:	001a      	movs	r2, r3
   184fa:	4b5b      	ldr	r3, [pc, #364]	; (18668 <xQueueGenericSend+0x368>)
   184fc:	5c9b      	ldrb	r3, [r3, r2]
   184fe:	3348      	adds	r3, #72	; 0x48
   18500:	b2db      	uxtb	r3, r3
   18502:	001d      	movs	r5, r3
   18504:	e000      	b.n	18508 <xQueueGenericSend+0x208>
   18506:	254d      	movs	r5, #77	; 0x4d
   18508:	6a3b      	ldr	r3, [r7, #32]
   1850a:	0018      	movs	r0, r3
   1850c:	4b55      	ldr	r3, [pc, #340]	; (18664 <xQueueGenericSend+0x364>)
   1850e:	4798      	blx	r3
   18510:	0003      	movs	r3, r0
   18512:	001a      	movs	r2, r3
   18514:	4b54      	ldr	r3, [pc, #336]	; (18668 <xQueueGenericSend+0x368>)
   18516:	5c9c      	ldrb	r4, [r3, r2]
   18518:	6a3b      	ldr	r3, [r7, #32]
   1851a:	0018      	movs	r0, r3
   1851c:	4b53      	ldr	r3, [pc, #332]	; (1866c <xQueueGenericSend+0x36c>)
   1851e:	4798      	blx	r3
   18520:	0003      	movs	r3, r0
   18522:	b2db      	uxtb	r3, r3
   18524:	001a      	movs	r2, r3
   18526:	0021      	movs	r1, r4
   18528:	0028      	movs	r0, r5
   1852a:	4b51      	ldr	r3, [pc, #324]	; (18670 <xQueueGenericSend+0x370>)
   1852c:	4798      	blx	r3
   1852e:	2300      	movs	r3, #0
   18530:	e0fe      	b.n	18730 <xQueueGenericSend+0x430>
   18532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18534:	2b00      	cmp	r3, #0
   18536:	d106      	bne.n	18546 <xQueueGenericSend+0x246>
   18538:	2314      	movs	r3, #20
   1853a:	18fb      	adds	r3, r7, r3
   1853c:	0018      	movs	r0, r3
   1853e:	4b53      	ldr	r3, [pc, #332]	; (1868c <xQueueGenericSend+0x38c>)
   18540:	4798      	blx	r3
   18542:	2301      	movs	r3, #1
   18544:	627b      	str	r3, [r7, #36]	; 0x24
   18546:	4b50      	ldr	r3, [pc, #320]	; (18688 <xQueueGenericSend+0x388>)
   18548:	4798      	blx	r3
   1854a:	4b51      	ldr	r3, [pc, #324]	; (18690 <xQueueGenericSend+0x390>)
   1854c:	4798      	blx	r3
   1854e:	4b40      	ldr	r3, [pc, #256]	; (18650 <xQueueGenericSend+0x350>)
   18550:	4798      	blx	r3
   18552:	6a3b      	ldr	r3, [r7, #32]
   18554:	2244      	movs	r2, #68	; 0x44
   18556:	5c9b      	ldrb	r3, [r3, r2]
   18558:	b25b      	sxtb	r3, r3
   1855a:	3301      	adds	r3, #1
   1855c:	d103      	bne.n	18566 <xQueueGenericSend+0x266>
   1855e:	6a3b      	ldr	r3, [r7, #32]
   18560:	2244      	movs	r2, #68	; 0x44
   18562:	2100      	movs	r1, #0
   18564:	5499      	strb	r1, [r3, r2]
   18566:	6a3b      	ldr	r3, [r7, #32]
   18568:	2245      	movs	r2, #69	; 0x45
   1856a:	5c9b      	ldrb	r3, [r3, r2]
   1856c:	b25b      	sxtb	r3, r3
   1856e:	3301      	adds	r3, #1
   18570:	d103      	bne.n	1857a <xQueueGenericSend+0x27a>
   18572:	6a3b      	ldr	r3, [r7, #32]
   18574:	2245      	movs	r2, #69	; 0x45
   18576:	2100      	movs	r1, #0
   18578:	5499      	strb	r1, [r3, r2]
   1857a:	4b43      	ldr	r3, [pc, #268]	; (18688 <xQueueGenericSend+0x388>)
   1857c:	4798      	blx	r3
   1857e:	1d3a      	adds	r2, r7, #4
   18580:	2314      	movs	r3, #20
   18582:	18fb      	adds	r3, r7, r3
   18584:	0011      	movs	r1, r2
   18586:	0018      	movs	r0, r3
   18588:	4b42      	ldr	r3, [pc, #264]	; (18694 <xQueueGenericSend+0x394>)
   1858a:	4798      	blx	r3
   1858c:	1e03      	subs	r3, r0, #0
   1858e:	d000      	beq.n	18592 <xQueueGenericSend+0x292>
   18590:	e08a      	b.n	186a8 <xQueueGenericSend+0x3a8>
   18592:	6a3b      	ldr	r3, [r7, #32]
   18594:	0018      	movs	r0, r3
   18596:	4b40      	ldr	r3, [pc, #256]	; (18698 <xQueueGenericSend+0x398>)
   18598:	4798      	blx	r3
   1859a:	1e03      	subs	r3, r0, #0
   1859c:	d04f      	beq.n	1863e <xQueueGenericSend+0x33e>
   1859e:	4b2d      	ldr	r3, [pc, #180]	; (18654 <xQueueGenericSend+0x354>)
   185a0:	4798      	blx	r3
   185a2:	0003      	movs	r3, r0
   185a4:	0018      	movs	r0, r3
   185a6:	4b2c      	ldr	r3, [pc, #176]	; (18658 <xQueueGenericSend+0x358>)
   185a8:	4798      	blx	r3
   185aa:	0003      	movs	r3, r0
   185ac:	001a      	movs	r2, r3
   185ae:	4b2b      	ldr	r3, [pc, #172]	; (1865c <xQueueGenericSend+0x35c>)
   185b0:	881b      	ldrh	r3, [r3, #0]
   185b2:	4013      	ands	r3, r2
   185b4:	b29b      	uxth	r3, r3
   185b6:	2b00      	cmp	r3, #0
   185b8:	d02e      	beq.n	18618 <xQueueGenericSend+0x318>
   185ba:	6a3b      	ldr	r3, [r7, #32]
   185bc:	0018      	movs	r0, r3
   185be:	4b28      	ldr	r3, [pc, #160]	; (18660 <xQueueGenericSend+0x360>)
   185c0:	4798      	blx	r3
   185c2:	0003      	movs	r3, r0
   185c4:	001a      	movs	r2, r3
   185c6:	4b25      	ldr	r3, [pc, #148]	; (1865c <xQueueGenericSend+0x35c>)
   185c8:	881b      	ldrh	r3, [r3, #0]
   185ca:	4013      	ands	r3, r2
   185cc:	b29b      	uxth	r3, r3
   185ce:	2b00      	cmp	r3, #0
   185d0:	d022      	beq.n	18618 <xQueueGenericSend+0x318>
   185d2:	683b      	ldr	r3, [r7, #0]
   185d4:	2b00      	cmp	r3, #0
   185d6:	d10b      	bne.n	185f0 <xQueueGenericSend+0x2f0>
   185d8:	6a3b      	ldr	r3, [r7, #32]
   185da:	0018      	movs	r0, r3
   185dc:	4b21      	ldr	r3, [pc, #132]	; (18664 <xQueueGenericSend+0x364>)
   185de:	4798      	blx	r3
   185e0:	0003      	movs	r3, r0
   185e2:	001a      	movs	r2, r3
   185e4:	4b20      	ldr	r3, [pc, #128]	; (18668 <xQueueGenericSend+0x368>)
   185e6:	5c9b      	ldrb	r3, [r3, r2]
   185e8:	3370      	adds	r3, #112	; 0x70
   185ea:	b2db      	uxtb	r3, r3
   185ec:	001d      	movs	r5, r3
   185ee:	e000      	b.n	185f2 <xQueueGenericSend+0x2f2>
   185f0:	2575      	movs	r5, #117	; 0x75
   185f2:	6a3b      	ldr	r3, [r7, #32]
   185f4:	0018      	movs	r0, r3
   185f6:	4b1b      	ldr	r3, [pc, #108]	; (18664 <xQueueGenericSend+0x364>)
   185f8:	4798      	blx	r3
   185fa:	0003      	movs	r3, r0
   185fc:	001a      	movs	r2, r3
   185fe:	4b1a      	ldr	r3, [pc, #104]	; (18668 <xQueueGenericSend+0x368>)
   18600:	5c9c      	ldrb	r4, [r3, r2]
   18602:	6a3b      	ldr	r3, [r7, #32]
   18604:	0018      	movs	r0, r3
   18606:	4b19      	ldr	r3, [pc, #100]	; (1866c <xQueueGenericSend+0x36c>)
   18608:	4798      	blx	r3
   1860a:	0003      	movs	r3, r0
   1860c:	b2db      	uxtb	r3, r3
   1860e:	001a      	movs	r2, r3
   18610:	0021      	movs	r1, r4
   18612:	0028      	movs	r0, r5
   18614:	4b16      	ldr	r3, [pc, #88]	; (18670 <xQueueGenericSend+0x370>)
   18616:	4798      	blx	r3
   18618:	6a3b      	ldr	r3, [r7, #32]
   1861a:	3310      	adds	r3, #16
   1861c:	687a      	ldr	r2, [r7, #4]
   1861e:	0011      	movs	r1, r2
   18620:	0018      	movs	r0, r3
   18622:	4b1e      	ldr	r3, [pc, #120]	; (1869c <xQueueGenericSend+0x39c>)
   18624:	4798      	blx	r3
   18626:	6a3b      	ldr	r3, [r7, #32]
   18628:	0018      	movs	r0, r3
   1862a:	4b1d      	ldr	r3, [pc, #116]	; (186a0 <xQueueGenericSend+0x3a0>)
   1862c:	4798      	blx	r3
   1862e:	4b1d      	ldr	r3, [pc, #116]	; (186a4 <xQueueGenericSend+0x3a4>)
   18630:	4798      	blx	r3
   18632:	1e03      	subs	r3, r0, #0
   18634:	d000      	beq.n	18638 <xQueueGenericSend+0x338>
   18636:	e69d      	b.n	18374 <xQueueGenericSend+0x74>
   18638:	4b11      	ldr	r3, [pc, #68]	; (18680 <xQueueGenericSend+0x380>)
   1863a:	4798      	blx	r3
   1863c:	e69a      	b.n	18374 <xQueueGenericSend+0x74>
   1863e:	6a3b      	ldr	r3, [r7, #32]
   18640:	0018      	movs	r0, r3
   18642:	4b17      	ldr	r3, [pc, #92]	; (186a0 <xQueueGenericSend+0x3a0>)
   18644:	4798      	blx	r3
   18646:	4b17      	ldr	r3, [pc, #92]	; (186a4 <xQueueGenericSend+0x3a4>)
   18648:	4798      	blx	r3
   1864a:	e693      	b.n	18374 <xQueueGenericSend+0x74>
   1864c:	0001aa8d 	.word	0x0001aa8d
   18650:	00017d69 	.word	0x00017d69
   18654:	00016005 	.word	0x00016005
   18658:	00015d69 	.word	0x00015d69
   1865c:	200000f0 	.word	0x200000f0
   18660:	00015e29 	.word	0x00015e29
   18664:	00015d29 	.word	0x00015d29
   18668:	200000e4 	.word	0x200000e4
   1866c:	00015e09 	.word	0x00015e09
   18670:	00016761 	.word	0x00016761
   18674:	00016dbd 	.word	0x00016dbd
   18678:	00019539 	.word	0x00019539
   1867c:	0001983d 	.word	0x0001983d
   18680:	00017d51 	.word	0x00017d51
   18684:	0001a5fd 	.word	0x0001a5fd
   18688:	00017d8d 	.word	0x00017d8d
   1868c:	0001a73d 	.word	0x0001a73d
   18690:	0001a025 	.word	0x0001a025
   18694:	0001a765 	.word	0x0001a765
   18698:	0001978d 	.word	0x0001978d
   1869c:	0001a4d9 	.word	0x0001a4d9
   186a0:	00019669 	.word	0x00019669
   186a4:	0001a03d 	.word	0x0001a03d
   186a8:	6a3b      	ldr	r3, [r7, #32]
   186aa:	0018      	movs	r0, r3
   186ac:	4b22      	ldr	r3, [pc, #136]	; (18738 <xQueueGenericSend+0x438>)
   186ae:	4798      	blx	r3
   186b0:	4b22      	ldr	r3, [pc, #136]	; (1873c <xQueueGenericSend+0x43c>)
   186b2:	4798      	blx	r3
   186b4:	4b22      	ldr	r3, [pc, #136]	; (18740 <xQueueGenericSend+0x440>)
   186b6:	4798      	blx	r3
   186b8:	0003      	movs	r3, r0
   186ba:	0018      	movs	r0, r3
   186bc:	4b21      	ldr	r3, [pc, #132]	; (18744 <xQueueGenericSend+0x444>)
   186be:	4798      	blx	r3
   186c0:	0003      	movs	r3, r0
   186c2:	001a      	movs	r2, r3
   186c4:	4b20      	ldr	r3, [pc, #128]	; (18748 <xQueueGenericSend+0x448>)
   186c6:	881b      	ldrh	r3, [r3, #0]
   186c8:	4013      	ands	r3, r2
   186ca:	b29b      	uxth	r3, r3
   186cc:	2b00      	cmp	r3, #0
   186ce:	d02e      	beq.n	1872e <xQueueGenericSend+0x42e>
   186d0:	6a3b      	ldr	r3, [r7, #32]
   186d2:	0018      	movs	r0, r3
   186d4:	4b1d      	ldr	r3, [pc, #116]	; (1874c <xQueueGenericSend+0x44c>)
   186d6:	4798      	blx	r3
   186d8:	0003      	movs	r3, r0
   186da:	001a      	movs	r2, r3
   186dc:	4b1a      	ldr	r3, [pc, #104]	; (18748 <xQueueGenericSend+0x448>)
   186de:	881b      	ldrh	r3, [r3, #0]
   186e0:	4013      	ands	r3, r2
   186e2:	b29b      	uxth	r3, r3
   186e4:	2b00      	cmp	r3, #0
   186e6:	d022      	beq.n	1872e <xQueueGenericSend+0x42e>
   186e8:	683b      	ldr	r3, [r7, #0]
   186ea:	2b00      	cmp	r3, #0
   186ec:	d10b      	bne.n	18706 <xQueueGenericSend+0x406>
   186ee:	6a3b      	ldr	r3, [r7, #32]
   186f0:	0018      	movs	r0, r3
   186f2:	4b17      	ldr	r3, [pc, #92]	; (18750 <xQueueGenericSend+0x450>)
   186f4:	4798      	blx	r3
   186f6:	0003      	movs	r3, r0
   186f8:	001a      	movs	r2, r3
   186fa:	4b16      	ldr	r3, [pc, #88]	; (18754 <xQueueGenericSend+0x454>)
   186fc:	5c9b      	ldrb	r3, [r3, r2]
   186fe:	3348      	adds	r3, #72	; 0x48
   18700:	b2db      	uxtb	r3, r3
   18702:	001d      	movs	r5, r3
   18704:	e000      	b.n	18708 <xQueueGenericSend+0x408>
   18706:	254d      	movs	r5, #77	; 0x4d
   18708:	6a3b      	ldr	r3, [r7, #32]
   1870a:	0018      	movs	r0, r3
   1870c:	4b10      	ldr	r3, [pc, #64]	; (18750 <xQueueGenericSend+0x450>)
   1870e:	4798      	blx	r3
   18710:	0003      	movs	r3, r0
   18712:	001a      	movs	r2, r3
   18714:	4b0f      	ldr	r3, [pc, #60]	; (18754 <xQueueGenericSend+0x454>)
   18716:	5c9c      	ldrb	r4, [r3, r2]
   18718:	6a3b      	ldr	r3, [r7, #32]
   1871a:	0018      	movs	r0, r3
   1871c:	4b0e      	ldr	r3, [pc, #56]	; (18758 <xQueueGenericSend+0x458>)
   1871e:	4798      	blx	r3
   18720:	0003      	movs	r3, r0
   18722:	b2db      	uxtb	r3, r3
   18724:	001a      	movs	r2, r3
   18726:	0021      	movs	r1, r4
   18728:	0028      	movs	r0, r5
   1872a:	4b0c      	ldr	r3, [pc, #48]	; (1875c <xQueueGenericSend+0x45c>)
   1872c:	4798      	blx	r3
   1872e:	2300      	movs	r3, #0
   18730:	0018      	movs	r0, r3
   18732:	46bd      	mov	sp, r7
   18734:	b00a      	add	sp, #40	; 0x28
   18736:	bdb0      	pop	{r4, r5, r7, pc}
   18738:	00019669 	.word	0x00019669
   1873c:	0001a03d 	.word	0x0001a03d
   18740:	00016005 	.word	0x00016005
   18744:	00015d69 	.word	0x00015d69
   18748:	200000f0 	.word	0x200000f0
   1874c:	00015e29 	.word	0x00015e29
   18750:	00015d29 	.word	0x00015d29
   18754:	200000e4 	.word	0x200000e4
   18758:	00015e09 	.word	0x00015e09
   1875c:	00016761 	.word	0x00016761

00018760 <xQueueGenericSendFromISR>:
   18760:	b5b0      	push	{r4, r5, r7, lr}
   18762:	b088      	sub	sp, #32
   18764:	af00      	add	r7, sp, #0
   18766:	60f8      	str	r0, [r7, #12]
   18768:	60b9      	str	r1, [r7, #8]
   1876a:	607a      	str	r2, [r7, #4]
   1876c:	603b      	str	r3, [r7, #0]
   1876e:	68fb      	ldr	r3, [r7, #12]
   18770:	61bb      	str	r3, [r7, #24]
   18772:	69bb      	ldr	r3, [r7, #24]
   18774:	2b00      	cmp	r3, #0
   18776:	d101      	bne.n	1877c <xQueueGenericSendFromISR+0x1c>
   18778:	b672      	cpsid	i
   1877a:	e7fe      	b.n	1877a <xQueueGenericSendFromISR+0x1a>
   1877c:	68bb      	ldr	r3, [r7, #8]
   1877e:	2b00      	cmp	r3, #0
   18780:	d103      	bne.n	1878a <xQueueGenericSendFromISR+0x2a>
   18782:	69bb      	ldr	r3, [r7, #24]
   18784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18786:	2b00      	cmp	r3, #0
   18788:	d101      	bne.n	1878e <xQueueGenericSendFromISR+0x2e>
   1878a:	2301      	movs	r3, #1
   1878c:	e000      	b.n	18790 <xQueueGenericSendFromISR+0x30>
   1878e:	2300      	movs	r3, #0
   18790:	2b00      	cmp	r3, #0
   18792:	d101      	bne.n	18798 <xQueueGenericSendFromISR+0x38>
   18794:	b672      	cpsid	i
   18796:	e7fe      	b.n	18796 <xQueueGenericSendFromISR+0x36>
   18798:	683b      	ldr	r3, [r7, #0]
   1879a:	2b02      	cmp	r3, #2
   1879c:	d103      	bne.n	187a6 <xQueueGenericSendFromISR+0x46>
   1879e:	69bb      	ldr	r3, [r7, #24]
   187a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   187a2:	2b01      	cmp	r3, #1
   187a4:	d101      	bne.n	187aa <xQueueGenericSendFromISR+0x4a>
   187a6:	2301      	movs	r3, #1
   187a8:	e000      	b.n	187ac <xQueueGenericSendFromISR+0x4c>
   187aa:	2300      	movs	r3, #0
   187ac:	2b00      	cmp	r3, #0
   187ae:	d101      	bne.n	187b4 <xQueueGenericSendFromISR+0x54>
   187b0:	b672      	cpsid	i
   187b2:	e7fe      	b.n	187b2 <xQueueGenericSendFromISR+0x52>
   187b4:	4b68      	ldr	r3, [pc, #416]	; (18958 <xQueueGenericSendFromISR+0x1f8>)
   187b6:	4798      	blx	r3
   187b8:	0003      	movs	r3, r0
   187ba:	617b      	str	r3, [r7, #20]
   187bc:	69bb      	ldr	r3, [r7, #24]
   187be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   187c0:	69bb      	ldr	r3, [r7, #24]
   187c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   187c4:	429a      	cmp	r2, r3
   187c6:	d303      	bcc.n	187d0 <xQueueGenericSendFromISR+0x70>
   187c8:	683b      	ldr	r3, [r7, #0]
   187ca:	2b02      	cmp	r3, #2
   187cc:	d000      	beq.n	187d0 <xQueueGenericSendFromISR+0x70>
   187ce:	e088      	b.n	188e2 <xQueueGenericSendFromISR+0x182>
   187d0:	2313      	movs	r3, #19
   187d2:	18fb      	adds	r3, r7, r3
   187d4:	69ba      	ldr	r2, [r7, #24]
   187d6:	2145      	movs	r1, #69	; 0x45
   187d8:	5c52      	ldrb	r2, [r2, r1]
   187da:	701a      	strb	r2, [r3, #0]
   187dc:	69bb      	ldr	r3, [r7, #24]
   187de:	0018      	movs	r0, r3
   187e0:	4b5e      	ldr	r3, [pc, #376]	; (1895c <xQueueGenericSendFromISR+0x1fc>)
   187e2:	4798      	blx	r3
   187e4:	0003      	movs	r3, r0
   187e6:	001a      	movs	r2, r3
   187e8:	4b5d      	ldr	r3, [pc, #372]	; (18960 <xQueueGenericSendFromISR+0x200>)
   187ea:	881b      	ldrh	r3, [r3, #0]
   187ec:	4013      	ands	r3, r2
   187ee:	b29b      	uxth	r3, r3
   187f0:	2b00      	cmp	r3, #0
   187f2:	d022      	beq.n	1883a <xQueueGenericSendFromISR+0xda>
   187f4:	683b      	ldr	r3, [r7, #0]
   187f6:	2b00      	cmp	r3, #0
   187f8:	d10b      	bne.n	18812 <xQueueGenericSendFromISR+0xb2>
   187fa:	69bb      	ldr	r3, [r7, #24]
   187fc:	0018      	movs	r0, r3
   187fe:	4b59      	ldr	r3, [pc, #356]	; (18964 <xQueueGenericSendFromISR+0x204>)
   18800:	4798      	blx	r3
   18802:	0003      	movs	r3, r0
   18804:	001a      	movs	r2, r3
   18806:	4b58      	ldr	r3, [pc, #352]	; (18968 <xQueueGenericSendFromISR+0x208>)
   18808:	5c9b      	ldrb	r3, [r3, r2]
   1880a:	3330      	adds	r3, #48	; 0x30
   1880c:	b2db      	uxtb	r3, r3
   1880e:	001d      	movs	r5, r3
   18810:	e000      	b.n	18814 <xQueueGenericSendFromISR+0xb4>
   18812:	2535      	movs	r5, #53	; 0x35
   18814:	69bb      	ldr	r3, [r7, #24]
   18816:	0018      	movs	r0, r3
   18818:	4b52      	ldr	r3, [pc, #328]	; (18964 <xQueueGenericSendFromISR+0x204>)
   1881a:	4798      	blx	r3
   1881c:	0003      	movs	r3, r0
   1881e:	001a      	movs	r2, r3
   18820:	4b51      	ldr	r3, [pc, #324]	; (18968 <xQueueGenericSendFromISR+0x208>)
   18822:	5c9c      	ldrb	r4, [r3, r2]
   18824:	69bb      	ldr	r3, [r7, #24]
   18826:	0018      	movs	r0, r3
   18828:	4b50      	ldr	r3, [pc, #320]	; (1896c <xQueueGenericSendFromISR+0x20c>)
   1882a:	4798      	blx	r3
   1882c:	0003      	movs	r3, r0
   1882e:	b2db      	uxtb	r3, r3
   18830:	001a      	movs	r2, r3
   18832:	0021      	movs	r1, r4
   18834:	0028      	movs	r0, r5
   18836:	4b4e      	ldr	r3, [pc, #312]	; (18970 <xQueueGenericSendFromISR+0x210>)
   18838:	4798      	blx	r3
   1883a:	69bb      	ldr	r3, [r7, #24]
   1883c:	0018      	movs	r0, r3
   1883e:	4b49      	ldr	r3, [pc, #292]	; (18964 <xQueueGenericSendFromISR+0x204>)
   18840:	4798      	blx	r3
   18842:	0003      	movs	r3, r0
   18844:	001a      	movs	r2, r3
   18846:	4b48      	ldr	r3, [pc, #288]	; (18968 <xQueueGenericSendFromISR+0x208>)
   18848:	5c9c      	ldrb	r4, [r3, r2]
   1884a:	69bb      	ldr	r3, [r7, #24]
   1884c:	0018      	movs	r0, r3
   1884e:	4b47      	ldr	r3, [pc, #284]	; (1896c <xQueueGenericSendFromISR+0x20c>)
   18850:	4798      	blx	r3
   18852:	0003      	movs	r3, r0
   18854:	b2d9      	uxtb	r1, r3
   18856:	69bb      	ldr	r3, [r7, #24]
   18858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1885a:	b2db      	uxtb	r3, r3
   1885c:	3301      	adds	r3, #1
   1885e:	b2db      	uxtb	r3, r3
   18860:	001a      	movs	r2, r3
   18862:	0020      	movs	r0, r4
   18864:	4b43      	ldr	r3, [pc, #268]	; (18974 <xQueueGenericSendFromISR+0x214>)
   18866:	4798      	blx	r3
   18868:	683a      	ldr	r2, [r7, #0]
   1886a:	68b9      	ldr	r1, [r7, #8]
   1886c:	69bb      	ldr	r3, [r7, #24]
   1886e:	0018      	movs	r0, r3
   18870:	4b41      	ldr	r3, [pc, #260]	; (18978 <xQueueGenericSendFromISR+0x218>)
   18872:	4798      	blx	r3
   18874:	2313      	movs	r3, #19
   18876:	18fb      	adds	r3, r7, r3
   18878:	781b      	ldrb	r3, [r3, #0]
   1887a:	b25b      	sxtb	r3, r3
   1887c:	3301      	adds	r3, #1
   1887e:	d124      	bne.n	188ca <xQueueGenericSendFromISR+0x16a>
   18880:	69bb      	ldr	r3, [r7, #24]
   18882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18884:	2b00      	cmp	r3, #0
   18886:	d00e      	beq.n	188a6 <xQueueGenericSendFromISR+0x146>
   18888:	683a      	ldr	r2, [r7, #0]
   1888a:	69bb      	ldr	r3, [r7, #24]
   1888c:	0011      	movs	r1, r2
   1888e:	0018      	movs	r0, r3
   18890:	4b3a      	ldr	r3, [pc, #232]	; (1897c <xQueueGenericSendFromISR+0x21c>)
   18892:	4798      	blx	r3
   18894:	1e03      	subs	r3, r0, #0
   18896:	d021      	beq.n	188dc <xQueueGenericSendFromISR+0x17c>
   18898:	687b      	ldr	r3, [r7, #4]
   1889a:	2b00      	cmp	r3, #0
   1889c:	d01e      	beq.n	188dc <xQueueGenericSendFromISR+0x17c>
   1889e:	687b      	ldr	r3, [r7, #4]
   188a0:	2201      	movs	r2, #1
   188a2:	601a      	str	r2, [r3, #0]
   188a4:	e01a      	b.n	188dc <xQueueGenericSendFromISR+0x17c>
   188a6:	69bb      	ldr	r3, [r7, #24]
   188a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   188aa:	2b00      	cmp	r3, #0
   188ac:	d016      	beq.n	188dc <xQueueGenericSendFromISR+0x17c>
   188ae:	69bb      	ldr	r3, [r7, #24]
   188b0:	3324      	adds	r3, #36	; 0x24
   188b2:	0018      	movs	r0, r3
   188b4:	4b32      	ldr	r3, [pc, #200]	; (18980 <xQueueGenericSendFromISR+0x220>)
   188b6:	4798      	blx	r3
   188b8:	1e03      	subs	r3, r0, #0
   188ba:	d00f      	beq.n	188dc <xQueueGenericSendFromISR+0x17c>
   188bc:	687b      	ldr	r3, [r7, #4]
   188be:	2b00      	cmp	r3, #0
   188c0:	d00c      	beq.n	188dc <xQueueGenericSendFromISR+0x17c>
   188c2:	687b      	ldr	r3, [r7, #4]
   188c4:	2201      	movs	r2, #1
   188c6:	601a      	str	r2, [r3, #0]
   188c8:	e008      	b.n	188dc <xQueueGenericSendFromISR+0x17c>
   188ca:	2313      	movs	r3, #19
   188cc:	18fb      	adds	r3, r7, r3
   188ce:	781b      	ldrb	r3, [r3, #0]
   188d0:	3301      	adds	r3, #1
   188d2:	b2db      	uxtb	r3, r3
   188d4:	b259      	sxtb	r1, r3
   188d6:	69bb      	ldr	r3, [r7, #24]
   188d8:	2245      	movs	r2, #69	; 0x45
   188da:	5499      	strb	r1, [r3, r2]
   188dc:	2301      	movs	r3, #1
   188de:	61fb      	str	r3, [r7, #28]
   188e0:	e030      	b.n	18944 <xQueueGenericSendFromISR+0x1e4>
   188e2:	69bb      	ldr	r3, [r7, #24]
   188e4:	0018      	movs	r0, r3
   188e6:	4b1d      	ldr	r3, [pc, #116]	; (1895c <xQueueGenericSendFromISR+0x1fc>)
   188e8:	4798      	blx	r3
   188ea:	0003      	movs	r3, r0
   188ec:	001a      	movs	r2, r3
   188ee:	4b1c      	ldr	r3, [pc, #112]	; (18960 <xQueueGenericSendFromISR+0x200>)
   188f0:	881b      	ldrh	r3, [r3, #0]
   188f2:	4013      	ands	r3, r2
   188f4:	b29b      	uxth	r3, r3
   188f6:	2b00      	cmp	r3, #0
   188f8:	d022      	beq.n	18940 <xQueueGenericSendFromISR+0x1e0>
   188fa:	683b      	ldr	r3, [r7, #0]
   188fc:	2b00      	cmp	r3, #0
   188fe:	d10b      	bne.n	18918 <xQueueGenericSendFromISR+0x1b8>
   18900:	69bb      	ldr	r3, [r7, #24]
   18902:	0018      	movs	r0, r3
   18904:	4b17      	ldr	r3, [pc, #92]	; (18964 <xQueueGenericSendFromISR+0x204>)
   18906:	4798      	blx	r3
   18908:	0003      	movs	r3, r0
   1890a:	001a      	movs	r2, r3
   1890c:	4b16      	ldr	r3, [pc, #88]	; (18968 <xQueueGenericSendFromISR+0x208>)
   1890e:	5c9b      	ldrb	r3, [r3, r2]
   18910:	3358      	adds	r3, #88	; 0x58
   18912:	b2db      	uxtb	r3, r3
   18914:	001d      	movs	r5, r3
   18916:	e000      	b.n	1891a <xQueueGenericSendFromISR+0x1ba>
   18918:	255d      	movs	r5, #93	; 0x5d
   1891a:	69bb      	ldr	r3, [r7, #24]
   1891c:	0018      	movs	r0, r3
   1891e:	4b11      	ldr	r3, [pc, #68]	; (18964 <xQueueGenericSendFromISR+0x204>)
   18920:	4798      	blx	r3
   18922:	0003      	movs	r3, r0
   18924:	001a      	movs	r2, r3
   18926:	4b10      	ldr	r3, [pc, #64]	; (18968 <xQueueGenericSendFromISR+0x208>)
   18928:	5c9c      	ldrb	r4, [r3, r2]
   1892a:	69bb      	ldr	r3, [r7, #24]
   1892c:	0018      	movs	r0, r3
   1892e:	4b0f      	ldr	r3, [pc, #60]	; (1896c <xQueueGenericSendFromISR+0x20c>)
   18930:	4798      	blx	r3
   18932:	0003      	movs	r3, r0
   18934:	b2db      	uxtb	r3, r3
   18936:	001a      	movs	r2, r3
   18938:	0021      	movs	r1, r4
   1893a:	0028      	movs	r0, r5
   1893c:	4b0c      	ldr	r3, [pc, #48]	; (18970 <xQueueGenericSendFromISR+0x210>)
   1893e:	4798      	blx	r3
   18940:	2300      	movs	r3, #0
   18942:	61fb      	str	r3, [r7, #28]
   18944:	697b      	ldr	r3, [r7, #20]
   18946:	0018      	movs	r0, r3
   18948:	4b0e      	ldr	r3, [pc, #56]	; (18984 <xQueueGenericSendFromISR+0x224>)
   1894a:	4798      	blx	r3
   1894c:	69fb      	ldr	r3, [r7, #28]
   1894e:	0018      	movs	r0, r3
   18950:	46bd      	mov	sp, r7
   18952:	b008      	add	sp, #32
   18954:	bdb0      	pop	{r4, r5, r7, pc}
   18956:	46c0      	nop			; (mov r8, r8)
   18958:	00017dbd 	.word	0x00017dbd
   1895c:	00015e29 	.word	0x00015e29
   18960:	200000f0 	.word	0x200000f0
   18964:	00015d29 	.word	0x00015d29
   18968:	200000e4 	.word	0x200000e4
   1896c:	00015e09 	.word	0x00015e09
   18970:	00016761 	.word	0x00016761
   18974:	00016dbd 	.word	0x00016dbd
   18978:	00019539 	.word	0x00019539
   1897c:	0001983d 	.word	0x0001983d
   18980:	0001a5fd 	.word	0x0001a5fd
   18984:	00017dc9 	.word	0x00017dc9

00018988 <xQueueGiveFromISR>:
   18988:	b580      	push	{r7, lr}
   1898a:	b082      	sub	sp, #8
   1898c:	af00      	add	r7, sp, #0
   1898e:	6078      	str	r0, [r7, #4]
   18990:	6039      	str	r1, [r7, #0]
   18992:	6839      	ldr	r1, [r7, #0]
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	2200      	movs	r2, #0
   18998:	0018      	movs	r0, r3
   1899a:	4b03      	ldr	r3, [pc, #12]	; (189a8 <xQueueGiveFromISR+0x20>)
   1899c:	4798      	blx	r3
   1899e:	0003      	movs	r3, r0
   189a0:	0018      	movs	r0, r3
   189a2:	46bd      	mov	sp, r7
   189a4:	b002      	add	sp, #8
   189a6:	bd80      	pop	{r7, pc}
   189a8:	000189ad 	.word	0x000189ad

000189ac <MyWrapper>:
   189ac:	b5b0      	push	{r4, r5, r7, lr}
   189ae:	b08a      	sub	sp, #40	; 0x28
   189b0:	af00      	add	r7, sp, #0
   189b2:	60f8      	str	r0, [r7, #12]
   189b4:	60b9      	str	r1, [r7, #8]
   189b6:	607a      	str	r2, [r7, #4]
   189b8:	68fb      	ldr	r3, [r7, #12]
   189ba:	623b      	str	r3, [r7, #32]
   189bc:	6a3b      	ldr	r3, [r7, #32]
   189be:	2b00      	cmp	r3, #0
   189c0:	d101      	bne.n	189c6 <MyWrapper+0x1a>
   189c2:	b672      	cpsid	i
   189c4:	e7fe      	b.n	189c4 <MyWrapper+0x18>
   189c6:	6a3b      	ldr	r3, [r7, #32]
   189c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   189ca:	2b00      	cmp	r3, #0
   189cc:	d001      	beq.n	189d2 <MyWrapper+0x26>
   189ce:	b672      	cpsid	i
   189d0:	e7fe      	b.n	189d0 <MyWrapper+0x24>
   189d2:	6a3b      	ldr	r3, [r7, #32]
   189d4:	681b      	ldr	r3, [r3, #0]
   189d6:	2b00      	cmp	r3, #0
   189d8:	d103      	bne.n	189e2 <MyWrapper+0x36>
   189da:	6a3b      	ldr	r3, [r7, #32]
   189dc:	685b      	ldr	r3, [r3, #4]
   189de:	2b00      	cmp	r3, #0
   189e0:	d101      	bne.n	189e6 <MyWrapper+0x3a>
   189e2:	2301      	movs	r3, #1
   189e4:	e000      	b.n	189e8 <MyWrapper+0x3c>
   189e6:	2300      	movs	r3, #0
   189e8:	2b00      	cmp	r3, #0
   189ea:	d101      	bne.n	189f0 <MyWrapper+0x44>
   189ec:	b672      	cpsid	i
   189ee:	e7fe      	b.n	189ee <MyWrapper+0x42>
   189f0:	4b66      	ldr	r3, [pc, #408]	; (18b8c <MyWrapper+0x1e0>)
   189f2:	4798      	blx	r3
   189f4:	0003      	movs	r3, r0
   189f6:	61fb      	str	r3, [r7, #28]
   189f8:	6a3b      	ldr	r3, [r7, #32]
   189fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   189fc:	61bb      	str	r3, [r7, #24]
   189fe:	6a3b      	ldr	r3, [r7, #32]
   18a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18a02:	69bb      	ldr	r3, [r7, #24]
   18a04:	429a      	cmp	r2, r3
   18a06:	d800      	bhi.n	18a0a <MyWrapper+0x5e>
   18a08:	e085      	b.n	18b16 <MyWrapper+0x16a>
   18a0a:	2317      	movs	r3, #23
   18a0c:	18fb      	adds	r3, r7, r3
   18a0e:	6a3a      	ldr	r2, [r7, #32]
   18a10:	2145      	movs	r1, #69	; 0x45
   18a12:	5c52      	ldrb	r2, [r2, r1]
   18a14:	701a      	strb	r2, [r3, #0]
   18a16:	6a3b      	ldr	r3, [r7, #32]
   18a18:	0018      	movs	r0, r3
   18a1a:	4b5d      	ldr	r3, [pc, #372]	; (18b90 <MyWrapper+0x1e4>)
   18a1c:	4798      	blx	r3
   18a1e:	0003      	movs	r3, r0
   18a20:	001a      	movs	r2, r3
   18a22:	4b5c      	ldr	r3, [pc, #368]	; (18b94 <MyWrapper+0x1e8>)
   18a24:	881b      	ldrh	r3, [r3, #0]
   18a26:	4013      	ands	r3, r2
   18a28:	b29b      	uxth	r3, r3
   18a2a:	2b00      	cmp	r3, #0
   18a2c:	d022      	beq.n	18a74 <MyWrapper+0xc8>
   18a2e:	687b      	ldr	r3, [r7, #4]
   18a30:	2b00      	cmp	r3, #0
   18a32:	d10b      	bne.n	18a4c <MyWrapper+0xa0>
   18a34:	6a3b      	ldr	r3, [r7, #32]
   18a36:	0018      	movs	r0, r3
   18a38:	4b57      	ldr	r3, [pc, #348]	; (18b98 <MyWrapper+0x1ec>)
   18a3a:	4798      	blx	r3
   18a3c:	0003      	movs	r3, r0
   18a3e:	001a      	movs	r2, r3
   18a40:	4b56      	ldr	r3, [pc, #344]	; (18b9c <MyWrapper+0x1f0>)
   18a42:	5c9b      	ldrb	r3, [r3, r2]
   18a44:	3330      	adds	r3, #48	; 0x30
   18a46:	b2db      	uxtb	r3, r3
   18a48:	001d      	movs	r5, r3
   18a4a:	e000      	b.n	18a4e <MyWrapper+0xa2>
   18a4c:	2535      	movs	r5, #53	; 0x35
   18a4e:	6a3b      	ldr	r3, [r7, #32]
   18a50:	0018      	movs	r0, r3
   18a52:	4b51      	ldr	r3, [pc, #324]	; (18b98 <MyWrapper+0x1ec>)
   18a54:	4798      	blx	r3
   18a56:	0003      	movs	r3, r0
   18a58:	001a      	movs	r2, r3
   18a5a:	4b50      	ldr	r3, [pc, #320]	; (18b9c <MyWrapper+0x1f0>)
   18a5c:	5c9c      	ldrb	r4, [r3, r2]
   18a5e:	6a3b      	ldr	r3, [r7, #32]
   18a60:	0018      	movs	r0, r3
   18a62:	4b4f      	ldr	r3, [pc, #316]	; (18ba0 <MyWrapper+0x1f4>)
   18a64:	4798      	blx	r3
   18a66:	0003      	movs	r3, r0
   18a68:	b2db      	uxtb	r3, r3
   18a6a:	001a      	movs	r2, r3
   18a6c:	0021      	movs	r1, r4
   18a6e:	0028      	movs	r0, r5
   18a70:	4b4c      	ldr	r3, [pc, #304]	; (18ba4 <MyWrapper+0x1f8>)
   18a72:	4798      	blx	r3
   18a74:	6a3b      	ldr	r3, [r7, #32]
   18a76:	0018      	movs	r0, r3
   18a78:	4b47      	ldr	r3, [pc, #284]	; (18b98 <MyWrapper+0x1ec>)
   18a7a:	4798      	blx	r3
   18a7c:	0003      	movs	r3, r0
   18a7e:	001a      	movs	r2, r3
   18a80:	4b46      	ldr	r3, [pc, #280]	; (18b9c <MyWrapper+0x1f0>)
   18a82:	5c9c      	ldrb	r4, [r3, r2]
   18a84:	6a3b      	ldr	r3, [r7, #32]
   18a86:	0018      	movs	r0, r3
   18a88:	4b45      	ldr	r3, [pc, #276]	; (18ba0 <MyWrapper+0x1f4>)
   18a8a:	4798      	blx	r3
   18a8c:	0003      	movs	r3, r0
   18a8e:	b2d9      	uxtb	r1, r3
   18a90:	6a3b      	ldr	r3, [r7, #32]
   18a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18a94:	b2db      	uxtb	r3, r3
   18a96:	3301      	adds	r3, #1
   18a98:	b2db      	uxtb	r3, r3
   18a9a:	001a      	movs	r2, r3
   18a9c:	0020      	movs	r0, r4
   18a9e:	4b42      	ldr	r3, [pc, #264]	; (18ba8 <MyWrapper+0x1fc>)
   18aa0:	4798      	blx	r3
   18aa2:	69bb      	ldr	r3, [r7, #24]
   18aa4:	1c5a      	adds	r2, r3, #1
   18aa6:	6a3b      	ldr	r3, [r7, #32]
   18aa8:	639a      	str	r2, [r3, #56]	; 0x38
   18aaa:	2317      	movs	r3, #23
   18aac:	18fb      	adds	r3, r7, r3
   18aae:	781b      	ldrb	r3, [r3, #0]
   18ab0:	b25b      	sxtb	r3, r3
   18ab2:	3301      	adds	r3, #1
   18ab4:	d123      	bne.n	18afe <MyWrapper+0x152>
   18ab6:	6a3b      	ldr	r3, [r7, #32]
   18ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18aba:	2b00      	cmp	r3, #0
   18abc:	d00d      	beq.n	18ada <MyWrapper+0x12e>
   18abe:	6a3b      	ldr	r3, [r7, #32]
   18ac0:	2100      	movs	r1, #0
   18ac2:	0018      	movs	r0, r3
   18ac4:	4b39      	ldr	r3, [pc, #228]	; (18bac <MyWrapper+0x200>)
   18ac6:	4798      	blx	r3
   18ac8:	1e03      	subs	r3, r0, #0
   18aca:	d021      	beq.n	18b10 <MyWrapper+0x164>
   18acc:	68bb      	ldr	r3, [r7, #8]
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d01e      	beq.n	18b10 <MyWrapper+0x164>
   18ad2:	68bb      	ldr	r3, [r7, #8]
   18ad4:	2201      	movs	r2, #1
   18ad6:	601a      	str	r2, [r3, #0]
   18ad8:	e01a      	b.n	18b10 <MyWrapper+0x164>
   18ada:	6a3b      	ldr	r3, [r7, #32]
   18adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ade:	2b00      	cmp	r3, #0
   18ae0:	d016      	beq.n	18b10 <MyWrapper+0x164>
   18ae2:	6a3b      	ldr	r3, [r7, #32]
   18ae4:	3324      	adds	r3, #36	; 0x24
   18ae6:	0018      	movs	r0, r3
   18ae8:	4b31      	ldr	r3, [pc, #196]	; (18bb0 <MyWrapper+0x204>)
   18aea:	4798      	blx	r3
   18aec:	1e03      	subs	r3, r0, #0
   18aee:	d00f      	beq.n	18b10 <MyWrapper+0x164>
   18af0:	68bb      	ldr	r3, [r7, #8]
   18af2:	2b00      	cmp	r3, #0
   18af4:	d00c      	beq.n	18b10 <MyWrapper+0x164>
   18af6:	68bb      	ldr	r3, [r7, #8]
   18af8:	2201      	movs	r2, #1
   18afa:	601a      	str	r2, [r3, #0]
   18afc:	e008      	b.n	18b10 <MyWrapper+0x164>
   18afe:	2317      	movs	r3, #23
   18b00:	18fb      	adds	r3, r7, r3
   18b02:	781b      	ldrb	r3, [r3, #0]
   18b04:	3301      	adds	r3, #1
   18b06:	b2db      	uxtb	r3, r3
   18b08:	b259      	sxtb	r1, r3
   18b0a:	6a3b      	ldr	r3, [r7, #32]
   18b0c:	2245      	movs	r2, #69	; 0x45
   18b0e:	5499      	strb	r1, [r3, r2]
   18b10:	2301      	movs	r3, #1
   18b12:	627b      	str	r3, [r7, #36]	; 0x24
   18b14:	e030      	b.n	18b78 <MyWrapper+0x1cc>
   18b16:	6a3b      	ldr	r3, [r7, #32]
   18b18:	0018      	movs	r0, r3
   18b1a:	4b1d      	ldr	r3, [pc, #116]	; (18b90 <MyWrapper+0x1e4>)
   18b1c:	4798      	blx	r3
   18b1e:	0003      	movs	r3, r0
   18b20:	001a      	movs	r2, r3
   18b22:	4b1c      	ldr	r3, [pc, #112]	; (18b94 <MyWrapper+0x1e8>)
   18b24:	881b      	ldrh	r3, [r3, #0]
   18b26:	4013      	ands	r3, r2
   18b28:	b29b      	uxth	r3, r3
   18b2a:	2b00      	cmp	r3, #0
   18b2c:	d022      	beq.n	18b74 <MyWrapper+0x1c8>
   18b2e:	687b      	ldr	r3, [r7, #4]
   18b30:	2b00      	cmp	r3, #0
   18b32:	d10b      	bne.n	18b4c <MyWrapper+0x1a0>
   18b34:	6a3b      	ldr	r3, [r7, #32]
   18b36:	0018      	movs	r0, r3
   18b38:	4b17      	ldr	r3, [pc, #92]	; (18b98 <MyWrapper+0x1ec>)
   18b3a:	4798      	blx	r3
   18b3c:	0003      	movs	r3, r0
   18b3e:	001a      	movs	r2, r3
   18b40:	4b16      	ldr	r3, [pc, #88]	; (18b9c <MyWrapper+0x1f0>)
   18b42:	5c9b      	ldrb	r3, [r3, r2]
   18b44:	3358      	adds	r3, #88	; 0x58
   18b46:	b2db      	uxtb	r3, r3
   18b48:	001d      	movs	r5, r3
   18b4a:	e000      	b.n	18b4e <MyWrapper+0x1a2>
   18b4c:	255d      	movs	r5, #93	; 0x5d
   18b4e:	6a3b      	ldr	r3, [r7, #32]
   18b50:	0018      	movs	r0, r3
   18b52:	4b11      	ldr	r3, [pc, #68]	; (18b98 <MyWrapper+0x1ec>)
   18b54:	4798      	blx	r3
   18b56:	0003      	movs	r3, r0
   18b58:	001a      	movs	r2, r3
   18b5a:	4b10      	ldr	r3, [pc, #64]	; (18b9c <MyWrapper+0x1f0>)
   18b5c:	5c9c      	ldrb	r4, [r3, r2]
   18b5e:	6a3b      	ldr	r3, [r7, #32]
   18b60:	0018      	movs	r0, r3
   18b62:	4b0f      	ldr	r3, [pc, #60]	; (18ba0 <MyWrapper+0x1f4>)
   18b64:	4798      	blx	r3
   18b66:	0003      	movs	r3, r0
   18b68:	b2db      	uxtb	r3, r3
   18b6a:	001a      	movs	r2, r3
   18b6c:	0021      	movs	r1, r4
   18b6e:	0028      	movs	r0, r5
   18b70:	4b0c      	ldr	r3, [pc, #48]	; (18ba4 <MyWrapper+0x1f8>)
   18b72:	4798      	blx	r3
   18b74:	2300      	movs	r3, #0
   18b76:	627b      	str	r3, [r7, #36]	; 0x24
   18b78:	69fb      	ldr	r3, [r7, #28]
   18b7a:	0018      	movs	r0, r3
   18b7c:	4b0d      	ldr	r3, [pc, #52]	; (18bb4 <MyWrapper+0x208>)
   18b7e:	4798      	blx	r3
   18b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b82:	0018      	movs	r0, r3
   18b84:	46bd      	mov	sp, r7
   18b86:	b00a      	add	sp, #40	; 0x28
   18b88:	bdb0      	pop	{r4, r5, r7, pc}
   18b8a:	46c0      	nop			; (mov r8, r8)
   18b8c:	00017dbd 	.word	0x00017dbd
   18b90:	00015e29 	.word	0x00015e29
   18b94:	200000f0 	.word	0x200000f0
   18b98:	00015d29 	.word	0x00015d29
   18b9c:	200000e4 	.word	0x200000e4
   18ba0:	00015e09 	.word	0x00015e09
   18ba4:	00016761 	.word	0x00016761
   18ba8:	00016dbd 	.word	0x00016dbd
   18bac:	0001983d 	.word	0x0001983d
   18bb0:	0001a5fd 	.word	0x0001a5fd
   18bb4:	00017dc9 	.word	0x00017dc9

00018bb8 <xQueueReceive>:
   18bb8:	b5b0      	push	{r4, r5, r7, lr}
   18bba:	b08a      	sub	sp, #40	; 0x28
   18bbc:	af00      	add	r7, sp, #0
   18bbe:	60f8      	str	r0, [r7, #12]
   18bc0:	60b9      	str	r1, [r7, #8]
   18bc2:	607a      	str	r2, [r7, #4]
   18bc4:	2300      	movs	r3, #0
   18bc6:	627b      	str	r3, [r7, #36]	; 0x24
   18bc8:	68fb      	ldr	r3, [r7, #12]
   18bca:	623b      	str	r3, [r7, #32]
   18bcc:	6a3b      	ldr	r3, [r7, #32]
   18bce:	2b00      	cmp	r3, #0
   18bd0:	d101      	bne.n	18bd6 <xQueueReceive+0x1e>
   18bd2:	b672      	cpsid	i
   18bd4:	e7fe      	b.n	18bd4 <xQueueReceive+0x1c>
   18bd6:	68bb      	ldr	r3, [r7, #8]
   18bd8:	2b00      	cmp	r3, #0
   18bda:	d103      	bne.n	18be4 <xQueueReceive+0x2c>
   18bdc:	6a3b      	ldr	r3, [r7, #32]
   18bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18be0:	2b00      	cmp	r3, #0
   18be2:	d101      	bne.n	18be8 <xQueueReceive+0x30>
   18be4:	2301      	movs	r3, #1
   18be6:	e000      	b.n	18bea <xQueueReceive+0x32>
   18be8:	2300      	movs	r3, #0
   18bea:	2b00      	cmp	r3, #0
   18bec:	d101      	bne.n	18bf2 <xQueueReceive+0x3a>
   18bee:	b672      	cpsid	i
   18bf0:	e7fe      	b.n	18bf0 <xQueueReceive+0x38>
   18bf2:	4bbf      	ldr	r3, [pc, #764]	; (18ef0 <xQueueReceive+0x338>)
   18bf4:	4798      	blx	r3
   18bf6:	1e03      	subs	r3, r0, #0
   18bf8:	d102      	bne.n	18c00 <xQueueReceive+0x48>
   18bfa:	687b      	ldr	r3, [r7, #4]
   18bfc:	2b00      	cmp	r3, #0
   18bfe:	d101      	bne.n	18c04 <xQueueReceive+0x4c>
   18c00:	2301      	movs	r3, #1
   18c02:	e000      	b.n	18c06 <xQueueReceive+0x4e>
   18c04:	2300      	movs	r3, #0
   18c06:	2b00      	cmp	r3, #0
   18c08:	d101      	bne.n	18c0e <xQueueReceive+0x56>
   18c0a:	b672      	cpsid	i
   18c0c:	e7fe      	b.n	18c0c <xQueueReceive+0x54>
   18c0e:	4bb9      	ldr	r3, [pc, #740]	; (18ef4 <xQueueReceive+0x33c>)
   18c10:	4798      	blx	r3
   18c12:	6a3b      	ldr	r3, [r7, #32]
   18c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18c16:	61fb      	str	r3, [r7, #28]
   18c18:	69fb      	ldr	r3, [r7, #28]
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d100      	bne.n	18c20 <xQueueReceive+0x68>
   18c1e:	e07d      	b.n	18d1c <xQueueReceive+0x164>
   18c20:	68ba      	ldr	r2, [r7, #8]
   18c22:	6a3b      	ldr	r3, [r7, #32]
   18c24:	0011      	movs	r1, r2
   18c26:	0018      	movs	r0, r3
   18c28:	4bb3      	ldr	r3, [pc, #716]	; (18ef8 <xQueueReceive+0x340>)
   18c2a:	4798      	blx	r3
   18c2c:	4bb3      	ldr	r3, [pc, #716]	; (18efc <xQueueReceive+0x344>)
   18c2e:	4798      	blx	r3
   18c30:	0003      	movs	r3, r0
   18c32:	0018      	movs	r0, r3
   18c34:	4bb2      	ldr	r3, [pc, #712]	; (18f00 <xQueueReceive+0x348>)
   18c36:	4798      	blx	r3
   18c38:	0003      	movs	r3, r0
   18c3a:	001a      	movs	r2, r3
   18c3c:	4bb1      	ldr	r3, [pc, #708]	; (18f04 <xQueueReceive+0x34c>)
   18c3e:	881b      	ldrh	r3, [r3, #0]
   18c40:	4013      	ands	r3, r2
   18c42:	b29b      	uxth	r3, r3
   18c44:	2b00      	cmp	r3, #0
   18c46:	d029      	beq.n	18c9c <xQueueReceive+0xe4>
   18c48:	6a3b      	ldr	r3, [r7, #32]
   18c4a:	0018      	movs	r0, r3
   18c4c:	4bae      	ldr	r3, [pc, #696]	; (18f08 <xQueueReceive+0x350>)
   18c4e:	4798      	blx	r3
   18c50:	0003      	movs	r3, r0
   18c52:	001a      	movs	r2, r3
   18c54:	4bab      	ldr	r3, [pc, #684]	; (18f04 <xQueueReceive+0x34c>)
   18c56:	881b      	ldrh	r3, [r3, #0]
   18c58:	4013      	ands	r3, r2
   18c5a:	b29b      	uxth	r3, r3
   18c5c:	2b00      	cmp	r3, #0
   18c5e:	d01d      	beq.n	18c9c <xQueueReceive+0xe4>
   18c60:	6a3b      	ldr	r3, [r7, #32]
   18c62:	0018      	movs	r0, r3
   18c64:	4ba9      	ldr	r3, [pc, #676]	; (18f0c <xQueueReceive+0x354>)
   18c66:	4798      	blx	r3
   18c68:	0003      	movs	r3, r0
   18c6a:	001a      	movs	r2, r3
   18c6c:	4ba8      	ldr	r3, [pc, #672]	; (18f10 <xQueueReceive+0x358>)
   18c6e:	5c9b      	ldrb	r3, [r3, r2]
   18c70:	3328      	adds	r3, #40	; 0x28
   18c72:	b2db      	uxtb	r3, r3
   18c74:	001d      	movs	r5, r3
   18c76:	6a3b      	ldr	r3, [r7, #32]
   18c78:	0018      	movs	r0, r3
   18c7a:	4ba4      	ldr	r3, [pc, #656]	; (18f0c <xQueueReceive+0x354>)
   18c7c:	4798      	blx	r3
   18c7e:	0003      	movs	r3, r0
   18c80:	001a      	movs	r2, r3
   18c82:	4ba3      	ldr	r3, [pc, #652]	; (18f10 <xQueueReceive+0x358>)
   18c84:	5c9c      	ldrb	r4, [r3, r2]
   18c86:	6a3b      	ldr	r3, [r7, #32]
   18c88:	0018      	movs	r0, r3
   18c8a:	4ba2      	ldr	r3, [pc, #648]	; (18f14 <xQueueReceive+0x35c>)
   18c8c:	4798      	blx	r3
   18c8e:	0003      	movs	r3, r0
   18c90:	b2db      	uxtb	r3, r3
   18c92:	001a      	movs	r2, r3
   18c94:	0021      	movs	r1, r4
   18c96:	0028      	movs	r0, r5
   18c98:	4b9f      	ldr	r3, [pc, #636]	; (18f18 <xQueueReceive+0x360>)
   18c9a:	4798      	blx	r3
   18c9c:	6a3b      	ldr	r3, [r7, #32]
   18c9e:	0018      	movs	r0, r3
   18ca0:	4b9a      	ldr	r3, [pc, #616]	; (18f0c <xQueueReceive+0x354>)
   18ca2:	4798      	blx	r3
   18ca4:	0003      	movs	r3, r0
   18ca6:	001a      	movs	r2, r3
   18ca8:	4b99      	ldr	r3, [pc, #612]	; (18f10 <xQueueReceive+0x358>)
   18caa:	5c9c      	ldrb	r4, [r3, r2]
   18cac:	6a3b      	ldr	r3, [r7, #32]
   18cae:	0018      	movs	r0, r3
   18cb0:	4b98      	ldr	r3, [pc, #608]	; (18f14 <xQueueReceive+0x35c>)
   18cb2:	4798      	blx	r3
   18cb4:	0003      	movs	r3, r0
   18cb6:	b2dd      	uxtb	r5, r3
   18cb8:	6a3b      	ldr	r3, [r7, #32]
   18cba:	0018      	movs	r0, r3
   18cbc:	4b93      	ldr	r3, [pc, #588]	; (18f0c <xQueueReceive+0x354>)
   18cbe:	4798      	blx	r3
   18cc0:	0003      	movs	r3, r0
   18cc2:	001a      	movs	r2, r3
   18cc4:	4b92      	ldr	r3, [pc, #584]	; (18f10 <xQueueReceive+0x358>)
   18cc6:	5c9b      	ldrb	r3, [r3, r2]
   18cc8:	2b02      	cmp	r3, #2
   18cca:	d108      	bne.n	18cde <xQueueReceive+0x126>
   18ccc:	4b8b      	ldr	r3, [pc, #556]	; (18efc <xQueueReceive+0x344>)
   18cce:	4798      	blx	r3
   18cd0:	0003      	movs	r3, r0
   18cd2:	0018      	movs	r0, r3
   18cd4:	4b91      	ldr	r3, [pc, #580]	; (18f1c <xQueueReceive+0x364>)
   18cd6:	4798      	blx	r3
   18cd8:	0003      	movs	r3, r0
   18cda:	b2db      	uxtb	r3, r3
   18cdc:	e004      	b.n	18ce8 <xQueueReceive+0x130>
   18cde:	6a3b      	ldr	r3, [r7, #32]
   18ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18ce2:	b2db      	uxtb	r3, r3
   18ce4:	3b01      	subs	r3, #1
   18ce6:	b2db      	uxtb	r3, r3
   18ce8:	001a      	movs	r2, r3
   18cea:	0029      	movs	r1, r5
   18cec:	0020      	movs	r0, r4
   18cee:	4b8c      	ldr	r3, [pc, #560]	; (18f20 <xQueueReceive+0x368>)
   18cf0:	4798      	blx	r3
   18cf2:	69fb      	ldr	r3, [r7, #28]
   18cf4:	1e5a      	subs	r2, r3, #1
   18cf6:	6a3b      	ldr	r3, [r7, #32]
   18cf8:	639a      	str	r2, [r3, #56]	; 0x38
   18cfa:	6a3b      	ldr	r3, [r7, #32]
   18cfc:	691b      	ldr	r3, [r3, #16]
   18cfe:	2b00      	cmp	r3, #0
   18d00:	d008      	beq.n	18d14 <xQueueReceive+0x15c>
   18d02:	6a3b      	ldr	r3, [r7, #32]
   18d04:	3310      	adds	r3, #16
   18d06:	0018      	movs	r0, r3
   18d08:	4b86      	ldr	r3, [pc, #536]	; (18f24 <xQueueReceive+0x36c>)
   18d0a:	4798      	blx	r3
   18d0c:	1e03      	subs	r3, r0, #0
   18d0e:	d001      	beq.n	18d14 <xQueueReceive+0x15c>
   18d10:	4b85      	ldr	r3, [pc, #532]	; (18f28 <xQueueReceive+0x370>)
   18d12:	4798      	blx	r3
   18d14:	4b85      	ldr	r3, [pc, #532]	; (18f2c <xQueueReceive+0x374>)
   18d16:	4798      	blx	r3
   18d18:	2301      	movs	r3, #1
   18d1a:	e15f      	b.n	18fdc <xQueueReceive+0x424>
   18d1c:	687b      	ldr	r3, [r7, #4]
   18d1e:	2b00      	cmp	r3, #0
   18d20:	d13b      	bne.n	18d9a <xQueueReceive+0x1e2>
   18d22:	4b82      	ldr	r3, [pc, #520]	; (18f2c <xQueueReceive+0x374>)
   18d24:	4798      	blx	r3
   18d26:	4b75      	ldr	r3, [pc, #468]	; (18efc <xQueueReceive+0x344>)
   18d28:	4798      	blx	r3
   18d2a:	0003      	movs	r3, r0
   18d2c:	0018      	movs	r0, r3
   18d2e:	4b74      	ldr	r3, [pc, #464]	; (18f00 <xQueueReceive+0x348>)
   18d30:	4798      	blx	r3
   18d32:	0003      	movs	r3, r0
   18d34:	001a      	movs	r2, r3
   18d36:	4b73      	ldr	r3, [pc, #460]	; (18f04 <xQueueReceive+0x34c>)
   18d38:	881b      	ldrh	r3, [r3, #0]
   18d3a:	4013      	ands	r3, r2
   18d3c:	b29b      	uxth	r3, r3
   18d3e:	2b00      	cmp	r3, #0
   18d40:	d029      	beq.n	18d96 <xQueueReceive+0x1de>
   18d42:	6a3b      	ldr	r3, [r7, #32]
   18d44:	0018      	movs	r0, r3
   18d46:	4b70      	ldr	r3, [pc, #448]	; (18f08 <xQueueReceive+0x350>)
   18d48:	4798      	blx	r3
   18d4a:	0003      	movs	r3, r0
   18d4c:	001a      	movs	r2, r3
   18d4e:	4b6d      	ldr	r3, [pc, #436]	; (18f04 <xQueueReceive+0x34c>)
   18d50:	881b      	ldrh	r3, [r3, #0]
   18d52:	4013      	ands	r3, r2
   18d54:	b29b      	uxth	r3, r3
   18d56:	2b00      	cmp	r3, #0
   18d58:	d01d      	beq.n	18d96 <xQueueReceive+0x1de>
   18d5a:	6a3b      	ldr	r3, [r7, #32]
   18d5c:	0018      	movs	r0, r3
   18d5e:	4b6b      	ldr	r3, [pc, #428]	; (18f0c <xQueueReceive+0x354>)
   18d60:	4798      	blx	r3
   18d62:	0003      	movs	r3, r0
   18d64:	001a      	movs	r2, r3
   18d66:	4b6a      	ldr	r3, [pc, #424]	; (18f10 <xQueueReceive+0x358>)
   18d68:	5c9b      	ldrb	r3, [r3, r2]
   18d6a:	3350      	adds	r3, #80	; 0x50
   18d6c:	b2db      	uxtb	r3, r3
   18d6e:	001d      	movs	r5, r3
   18d70:	6a3b      	ldr	r3, [r7, #32]
   18d72:	0018      	movs	r0, r3
   18d74:	4b65      	ldr	r3, [pc, #404]	; (18f0c <xQueueReceive+0x354>)
   18d76:	4798      	blx	r3
   18d78:	0003      	movs	r3, r0
   18d7a:	001a      	movs	r2, r3
   18d7c:	4b64      	ldr	r3, [pc, #400]	; (18f10 <xQueueReceive+0x358>)
   18d7e:	5c9c      	ldrb	r4, [r3, r2]
   18d80:	6a3b      	ldr	r3, [r7, #32]
   18d82:	0018      	movs	r0, r3
   18d84:	4b63      	ldr	r3, [pc, #396]	; (18f14 <xQueueReceive+0x35c>)
   18d86:	4798      	blx	r3
   18d88:	0003      	movs	r3, r0
   18d8a:	b2db      	uxtb	r3, r3
   18d8c:	001a      	movs	r2, r3
   18d8e:	0021      	movs	r1, r4
   18d90:	0028      	movs	r0, r5
   18d92:	4b61      	ldr	r3, [pc, #388]	; (18f18 <xQueueReceive+0x360>)
   18d94:	4798      	blx	r3
   18d96:	2300      	movs	r3, #0
   18d98:	e120      	b.n	18fdc <xQueueReceive+0x424>
   18d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d9c:	2b00      	cmp	r3, #0
   18d9e:	d106      	bne.n	18dae <xQueueReceive+0x1f6>
   18da0:	2314      	movs	r3, #20
   18da2:	18fb      	adds	r3, r7, r3
   18da4:	0018      	movs	r0, r3
   18da6:	4b62      	ldr	r3, [pc, #392]	; (18f30 <xQueueReceive+0x378>)
   18da8:	4798      	blx	r3
   18daa:	2301      	movs	r3, #1
   18dac:	627b      	str	r3, [r7, #36]	; 0x24
   18dae:	4b5f      	ldr	r3, [pc, #380]	; (18f2c <xQueueReceive+0x374>)
   18db0:	4798      	blx	r3
   18db2:	4b60      	ldr	r3, [pc, #384]	; (18f34 <xQueueReceive+0x37c>)
   18db4:	4798      	blx	r3
   18db6:	4b4f      	ldr	r3, [pc, #316]	; (18ef4 <xQueueReceive+0x33c>)
   18db8:	4798      	blx	r3
   18dba:	6a3b      	ldr	r3, [r7, #32]
   18dbc:	2244      	movs	r2, #68	; 0x44
   18dbe:	5c9b      	ldrb	r3, [r3, r2]
   18dc0:	b25b      	sxtb	r3, r3
   18dc2:	3301      	adds	r3, #1
   18dc4:	d103      	bne.n	18dce <xQueueReceive+0x216>
   18dc6:	6a3b      	ldr	r3, [r7, #32]
   18dc8:	2244      	movs	r2, #68	; 0x44
   18dca:	2100      	movs	r1, #0
   18dcc:	5499      	strb	r1, [r3, r2]
   18dce:	6a3b      	ldr	r3, [r7, #32]
   18dd0:	2245      	movs	r2, #69	; 0x45
   18dd2:	5c9b      	ldrb	r3, [r3, r2]
   18dd4:	b25b      	sxtb	r3, r3
   18dd6:	3301      	adds	r3, #1
   18dd8:	d103      	bne.n	18de2 <xQueueReceive+0x22a>
   18dda:	6a3b      	ldr	r3, [r7, #32]
   18ddc:	2245      	movs	r2, #69	; 0x45
   18dde:	2100      	movs	r1, #0
   18de0:	5499      	strb	r1, [r3, r2]
   18de2:	4b52      	ldr	r3, [pc, #328]	; (18f2c <xQueueReceive+0x374>)
   18de4:	4798      	blx	r3
   18de6:	1d3a      	adds	r2, r7, #4
   18de8:	2314      	movs	r3, #20
   18dea:	18fb      	adds	r3, r7, r3
   18dec:	0011      	movs	r1, r2
   18dee:	0018      	movs	r0, r3
   18df0:	4b51      	ldr	r3, [pc, #324]	; (18f38 <xQueueReceive+0x380>)
   18df2:	4798      	blx	r3
   18df4:	1e03      	subs	r3, r0, #0
   18df6:	d000      	beq.n	18dfa <xQueueReceive+0x242>
   18df8:	e0aa      	b.n	18f50 <xQueueReceive+0x398>
   18dfa:	6a3b      	ldr	r3, [r7, #32]
   18dfc:	0018      	movs	r0, r3
   18dfe:	4b4f      	ldr	r3, [pc, #316]	; (18f3c <xQueueReceive+0x384>)
   18e00:	4798      	blx	r3
   18e02:	1e03      	subs	r3, r0, #0
   18e04:	d06d      	beq.n	18ee2 <xQueueReceive+0x32a>
   18e06:	4b3d      	ldr	r3, [pc, #244]	; (18efc <xQueueReceive+0x344>)
   18e08:	4798      	blx	r3
   18e0a:	0003      	movs	r3, r0
   18e0c:	0018      	movs	r0, r3
   18e0e:	4b3c      	ldr	r3, [pc, #240]	; (18f00 <xQueueReceive+0x348>)
   18e10:	4798      	blx	r3
   18e12:	0003      	movs	r3, r0
   18e14:	001a      	movs	r2, r3
   18e16:	4b3b      	ldr	r3, [pc, #236]	; (18f04 <xQueueReceive+0x34c>)
   18e18:	881b      	ldrh	r3, [r3, #0]
   18e1a:	4013      	ands	r3, r2
   18e1c:	b29b      	uxth	r3, r3
   18e1e:	2b00      	cmp	r3, #0
   18e20:	d029      	beq.n	18e76 <xQueueReceive+0x2be>
   18e22:	6a3b      	ldr	r3, [r7, #32]
   18e24:	0018      	movs	r0, r3
   18e26:	4b38      	ldr	r3, [pc, #224]	; (18f08 <xQueueReceive+0x350>)
   18e28:	4798      	blx	r3
   18e2a:	0003      	movs	r3, r0
   18e2c:	001a      	movs	r2, r3
   18e2e:	4b35      	ldr	r3, [pc, #212]	; (18f04 <xQueueReceive+0x34c>)
   18e30:	881b      	ldrh	r3, [r3, #0]
   18e32:	4013      	ands	r3, r2
   18e34:	b29b      	uxth	r3, r3
   18e36:	2b00      	cmp	r3, #0
   18e38:	d01d      	beq.n	18e76 <xQueueReceive+0x2be>
   18e3a:	6a3b      	ldr	r3, [r7, #32]
   18e3c:	0018      	movs	r0, r3
   18e3e:	4b33      	ldr	r3, [pc, #204]	; (18f0c <xQueueReceive+0x354>)
   18e40:	4798      	blx	r3
   18e42:	0003      	movs	r3, r0
   18e44:	001a      	movs	r2, r3
   18e46:	4b32      	ldr	r3, [pc, #200]	; (18f10 <xQueueReceive+0x358>)
   18e48:	5c9b      	ldrb	r3, [r3, r2]
   18e4a:	3368      	adds	r3, #104	; 0x68
   18e4c:	b2db      	uxtb	r3, r3
   18e4e:	001d      	movs	r5, r3
   18e50:	6a3b      	ldr	r3, [r7, #32]
   18e52:	0018      	movs	r0, r3
   18e54:	4b2d      	ldr	r3, [pc, #180]	; (18f0c <xQueueReceive+0x354>)
   18e56:	4798      	blx	r3
   18e58:	0003      	movs	r3, r0
   18e5a:	001a      	movs	r2, r3
   18e5c:	4b2c      	ldr	r3, [pc, #176]	; (18f10 <xQueueReceive+0x358>)
   18e5e:	5c9c      	ldrb	r4, [r3, r2]
   18e60:	6a3b      	ldr	r3, [r7, #32]
   18e62:	0018      	movs	r0, r3
   18e64:	4b2b      	ldr	r3, [pc, #172]	; (18f14 <xQueueReceive+0x35c>)
   18e66:	4798      	blx	r3
   18e68:	0003      	movs	r3, r0
   18e6a:	b2db      	uxtb	r3, r3
   18e6c:	001a      	movs	r2, r3
   18e6e:	0021      	movs	r1, r4
   18e70:	0028      	movs	r0, r5
   18e72:	4b29      	ldr	r3, [pc, #164]	; (18f18 <xQueueReceive+0x360>)
   18e74:	4798      	blx	r3
   18e76:	6a3b      	ldr	r3, [r7, #32]
   18e78:	0018      	movs	r0, r3
   18e7a:	4b24      	ldr	r3, [pc, #144]	; (18f0c <xQueueReceive+0x354>)
   18e7c:	4798      	blx	r3
   18e7e:	0003      	movs	r3, r0
   18e80:	001a      	movs	r2, r3
   18e82:	4b23      	ldr	r3, [pc, #140]	; (18f10 <xQueueReceive+0x358>)
   18e84:	5c9b      	ldrb	r3, [r3, r2]
   18e86:	2b02      	cmp	r3, #2
   18e88:	d018      	beq.n	18ebc <xQueueReceive+0x304>
   18e8a:	4b1c      	ldr	r3, [pc, #112]	; (18efc <xQueueReceive+0x344>)
   18e8c:	4798      	blx	r3
   18e8e:	0003      	movs	r3, r0
   18e90:	0018      	movs	r0, r3
   18e92:	4b1b      	ldr	r3, [pc, #108]	; (18f00 <xQueueReceive+0x348>)
   18e94:	4798      	blx	r3
   18e96:	0003      	movs	r3, r0
   18e98:	001a      	movs	r2, r3
   18e9a:	4b1a      	ldr	r3, [pc, #104]	; (18f04 <xQueueReceive+0x34c>)
   18e9c:	881b      	ldrh	r3, [r3, #0]
   18e9e:	4013      	ands	r3, r2
   18ea0:	b29b      	uxth	r3, r3
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d00a      	beq.n	18ebc <xQueueReceive+0x304>
   18ea6:	4b15      	ldr	r3, [pc, #84]	; (18efc <xQueueReceive+0x344>)
   18ea8:	4798      	blx	r3
   18eaa:	0003      	movs	r3, r0
   18eac:	0018      	movs	r0, r3
   18eae:	4b1b      	ldr	r3, [pc, #108]	; (18f1c <xQueueReceive+0x364>)
   18eb0:	4798      	blx	r3
   18eb2:	0003      	movs	r3, r0
   18eb4:	b2db      	uxtb	r3, r3
   18eb6:	0018      	movs	r0, r3
   18eb8:	4b21      	ldr	r3, [pc, #132]	; (18f40 <xQueueReceive+0x388>)
   18eba:	4798      	blx	r3
   18ebc:	6a3b      	ldr	r3, [r7, #32]
   18ebe:	3324      	adds	r3, #36	; 0x24
   18ec0:	687a      	ldr	r2, [r7, #4]
   18ec2:	0011      	movs	r1, r2
   18ec4:	0018      	movs	r0, r3
   18ec6:	4b1f      	ldr	r3, [pc, #124]	; (18f44 <xQueueReceive+0x38c>)
   18ec8:	4798      	blx	r3
   18eca:	6a3b      	ldr	r3, [r7, #32]
   18ecc:	0018      	movs	r0, r3
   18ece:	4b1e      	ldr	r3, [pc, #120]	; (18f48 <xQueueReceive+0x390>)
   18ed0:	4798      	blx	r3
   18ed2:	4b1e      	ldr	r3, [pc, #120]	; (18f4c <xQueueReceive+0x394>)
   18ed4:	4798      	blx	r3
   18ed6:	1e03      	subs	r3, r0, #0
   18ed8:	d000      	beq.n	18edc <xQueueReceive+0x324>
   18eda:	e698      	b.n	18c0e <xQueueReceive+0x56>
   18edc:	4b12      	ldr	r3, [pc, #72]	; (18f28 <xQueueReceive+0x370>)
   18ede:	4798      	blx	r3
   18ee0:	e695      	b.n	18c0e <xQueueReceive+0x56>
   18ee2:	6a3b      	ldr	r3, [r7, #32]
   18ee4:	0018      	movs	r0, r3
   18ee6:	4b18      	ldr	r3, [pc, #96]	; (18f48 <xQueueReceive+0x390>)
   18ee8:	4798      	blx	r3
   18eea:	4b18      	ldr	r3, [pc, #96]	; (18f4c <xQueueReceive+0x394>)
   18eec:	4798      	blx	r3
   18eee:	e68e      	b.n	18c0e <xQueueReceive+0x56>
   18ef0:	0001aa8d 	.word	0x0001aa8d
   18ef4:	00017d69 	.word	0x00017d69
   18ef8:	00019619 	.word	0x00019619
   18efc:	00016005 	.word	0x00016005
   18f00:	00015d69 	.word	0x00015d69
   18f04:	200000f0 	.word	0x200000f0
   18f08:	00015e29 	.word	0x00015e29
   18f0c:	00015d29 	.word	0x00015d29
   18f10:	200000e4 	.word	0x200000e4
   18f14:	00015e09 	.word	0x00015e09
   18f18:	00016761 	.word	0x00016761
   18f1c:	00015d49 	.word	0x00015d49
   18f20:	00016dbd 	.word	0x00016dbd
   18f24:	0001a5fd 	.word	0x0001a5fd
   18f28:	00017d51 	.word	0x00017d51
   18f2c:	00017d8d 	.word	0x00017d8d
   18f30:	0001a73d 	.word	0x0001a73d
   18f34:	0001a025 	.word	0x0001a025
   18f38:	0001a765 	.word	0x0001a765
   18f3c:	00019759 	.word	0x00019759
   18f40:	00016ef9 	.word	0x00016ef9
   18f44:	0001a4d9 	.word	0x0001a4d9
   18f48:	00019669 	.word	0x00019669
   18f4c:	0001a03d 	.word	0x0001a03d
   18f50:	6a3b      	ldr	r3, [r7, #32]
   18f52:	0018      	movs	r0, r3
   18f54:	4b23      	ldr	r3, [pc, #140]	; (18fe4 <xQueueReceive+0x42c>)
   18f56:	4798      	blx	r3
   18f58:	4b23      	ldr	r3, [pc, #140]	; (18fe8 <xQueueReceive+0x430>)
   18f5a:	4798      	blx	r3
   18f5c:	6a3b      	ldr	r3, [r7, #32]
   18f5e:	0018      	movs	r0, r3
   18f60:	4b22      	ldr	r3, [pc, #136]	; (18fec <xQueueReceive+0x434>)
   18f62:	4798      	blx	r3
   18f64:	1e03      	subs	r3, r0, #0
   18f66:	d100      	bne.n	18f6a <xQueueReceive+0x3b2>
   18f68:	e651      	b.n	18c0e <xQueueReceive+0x56>
   18f6a:	4b21      	ldr	r3, [pc, #132]	; (18ff0 <xQueueReceive+0x438>)
   18f6c:	4798      	blx	r3
   18f6e:	0003      	movs	r3, r0
   18f70:	0018      	movs	r0, r3
   18f72:	4b20      	ldr	r3, [pc, #128]	; (18ff4 <xQueueReceive+0x43c>)
   18f74:	4798      	blx	r3
   18f76:	0003      	movs	r3, r0
   18f78:	001a      	movs	r2, r3
   18f7a:	4b1f      	ldr	r3, [pc, #124]	; (18ff8 <xQueueReceive+0x440>)
   18f7c:	881b      	ldrh	r3, [r3, #0]
   18f7e:	4013      	ands	r3, r2
   18f80:	b29b      	uxth	r3, r3
   18f82:	2b00      	cmp	r3, #0
   18f84:	d029      	beq.n	18fda <xQueueReceive+0x422>
   18f86:	6a3b      	ldr	r3, [r7, #32]
   18f88:	0018      	movs	r0, r3
   18f8a:	4b1c      	ldr	r3, [pc, #112]	; (18ffc <xQueueReceive+0x444>)
   18f8c:	4798      	blx	r3
   18f8e:	0003      	movs	r3, r0
   18f90:	001a      	movs	r2, r3
   18f92:	4b19      	ldr	r3, [pc, #100]	; (18ff8 <xQueueReceive+0x440>)
   18f94:	881b      	ldrh	r3, [r3, #0]
   18f96:	4013      	ands	r3, r2
   18f98:	b29b      	uxth	r3, r3
   18f9a:	2b00      	cmp	r3, #0
   18f9c:	d01d      	beq.n	18fda <xQueueReceive+0x422>
   18f9e:	6a3b      	ldr	r3, [r7, #32]
   18fa0:	0018      	movs	r0, r3
   18fa2:	4b17      	ldr	r3, [pc, #92]	; (19000 <xQueueReceive+0x448>)
   18fa4:	4798      	blx	r3
   18fa6:	0003      	movs	r3, r0
   18fa8:	001a      	movs	r2, r3
   18faa:	4b16      	ldr	r3, [pc, #88]	; (19004 <xQueueReceive+0x44c>)
   18fac:	5c9b      	ldrb	r3, [r3, r2]
   18fae:	3350      	adds	r3, #80	; 0x50
   18fb0:	b2db      	uxtb	r3, r3
   18fb2:	001d      	movs	r5, r3
   18fb4:	6a3b      	ldr	r3, [r7, #32]
   18fb6:	0018      	movs	r0, r3
   18fb8:	4b11      	ldr	r3, [pc, #68]	; (19000 <xQueueReceive+0x448>)
   18fba:	4798      	blx	r3
   18fbc:	0003      	movs	r3, r0
   18fbe:	001a      	movs	r2, r3
   18fc0:	4b10      	ldr	r3, [pc, #64]	; (19004 <xQueueReceive+0x44c>)
   18fc2:	5c9c      	ldrb	r4, [r3, r2]
   18fc4:	6a3b      	ldr	r3, [r7, #32]
   18fc6:	0018      	movs	r0, r3
   18fc8:	4b0f      	ldr	r3, [pc, #60]	; (19008 <xQueueReceive+0x450>)
   18fca:	4798      	blx	r3
   18fcc:	0003      	movs	r3, r0
   18fce:	b2db      	uxtb	r3, r3
   18fd0:	001a      	movs	r2, r3
   18fd2:	0021      	movs	r1, r4
   18fd4:	0028      	movs	r0, r5
   18fd6:	4b0d      	ldr	r3, [pc, #52]	; (1900c <xQueueReceive+0x454>)
   18fd8:	4798      	blx	r3
   18fda:	2300      	movs	r3, #0
   18fdc:	0018      	movs	r0, r3
   18fde:	46bd      	mov	sp, r7
   18fe0:	b00a      	add	sp, #40	; 0x28
   18fe2:	bdb0      	pop	{r4, r5, r7, pc}
   18fe4:	00019669 	.word	0x00019669
   18fe8:	0001a03d 	.word	0x0001a03d
   18fec:	00019759 	.word	0x00019759
   18ff0:	00016005 	.word	0x00016005
   18ff4:	00015d69 	.word	0x00015d69
   18ff8:	200000f0 	.word	0x200000f0
   18ffc:	00015e29 	.word	0x00015e29
   19000:	00015d29 	.word	0x00015d29
   19004:	200000e4 	.word	0x200000e4
   19008:	00015e09 	.word	0x00015e09
   1900c:	00016761 	.word	0x00016761

00019010 <xQueueSemaphoreTake>:
   19010:	b5b0      	push	{r4, r5, r7, lr}
   19012:	b08a      	sub	sp, #40	; 0x28
   19014:	af00      	add	r7, sp, #0
   19016:	6078      	str	r0, [r7, #4]
   19018:	6039      	str	r1, [r7, #0]
   1901a:	2300      	movs	r3, #0
   1901c:	627b      	str	r3, [r7, #36]	; 0x24
   1901e:	687b      	ldr	r3, [r7, #4]
   19020:	61fb      	str	r3, [r7, #28]
   19022:	2300      	movs	r3, #0
   19024:	623b      	str	r3, [r7, #32]
   19026:	69fb      	ldr	r3, [r7, #28]
   19028:	2b00      	cmp	r3, #0
   1902a:	d101      	bne.n	19030 <xQueueSemaphoreTake+0x20>
   1902c:	b672      	cpsid	i
   1902e:	e7fe      	b.n	1902e <xQueueSemaphoreTake+0x1e>
   19030:	69fb      	ldr	r3, [r7, #28]
   19032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19034:	2b00      	cmp	r3, #0
   19036:	d001      	beq.n	1903c <xQueueSemaphoreTake+0x2c>
   19038:	b672      	cpsid	i
   1903a:	e7fe      	b.n	1903a <xQueueSemaphoreTake+0x2a>
   1903c:	4bcb      	ldr	r3, [pc, #812]	; (1936c <xQueueSemaphoreTake+0x35c>)
   1903e:	4798      	blx	r3
   19040:	1e03      	subs	r3, r0, #0
   19042:	d102      	bne.n	1904a <xQueueSemaphoreTake+0x3a>
   19044:	683b      	ldr	r3, [r7, #0]
   19046:	2b00      	cmp	r3, #0
   19048:	d101      	bne.n	1904e <xQueueSemaphoreTake+0x3e>
   1904a:	2301      	movs	r3, #1
   1904c:	e000      	b.n	19050 <xQueueSemaphoreTake+0x40>
   1904e:	2300      	movs	r3, #0
   19050:	2b00      	cmp	r3, #0
   19052:	d101      	bne.n	19058 <xQueueSemaphoreTake+0x48>
   19054:	b672      	cpsid	i
   19056:	e7fe      	b.n	19056 <xQueueSemaphoreTake+0x46>
   19058:	4bc5      	ldr	r3, [pc, #788]	; (19370 <xQueueSemaphoreTake+0x360>)
   1905a:	4798      	blx	r3
   1905c:	69fb      	ldr	r3, [r7, #28]
   1905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19060:	61bb      	str	r3, [r7, #24]
   19062:	69bb      	ldr	r3, [r7, #24]
   19064:	2b00      	cmp	r3, #0
   19066:	d100      	bne.n	1906a <xQueueSemaphoreTake+0x5a>
   19068:	e080      	b.n	1916c <xQueueSemaphoreTake+0x15c>
   1906a:	4bc2      	ldr	r3, [pc, #776]	; (19374 <xQueueSemaphoreTake+0x364>)
   1906c:	4798      	blx	r3
   1906e:	0003      	movs	r3, r0
   19070:	0018      	movs	r0, r3
   19072:	4bc1      	ldr	r3, [pc, #772]	; (19378 <xQueueSemaphoreTake+0x368>)
   19074:	4798      	blx	r3
   19076:	0003      	movs	r3, r0
   19078:	001a      	movs	r2, r3
   1907a:	4bc0      	ldr	r3, [pc, #768]	; (1937c <xQueueSemaphoreTake+0x36c>)
   1907c:	881b      	ldrh	r3, [r3, #0]
   1907e:	4013      	ands	r3, r2
   19080:	b29b      	uxth	r3, r3
   19082:	2b00      	cmp	r3, #0
   19084:	d029      	beq.n	190da <xQueueSemaphoreTake+0xca>
   19086:	69fb      	ldr	r3, [r7, #28]
   19088:	0018      	movs	r0, r3
   1908a:	4bbd      	ldr	r3, [pc, #756]	; (19380 <xQueueSemaphoreTake+0x370>)
   1908c:	4798      	blx	r3
   1908e:	0003      	movs	r3, r0
   19090:	001a      	movs	r2, r3
   19092:	4bba      	ldr	r3, [pc, #744]	; (1937c <xQueueSemaphoreTake+0x36c>)
   19094:	881b      	ldrh	r3, [r3, #0]
   19096:	4013      	ands	r3, r2
   19098:	b29b      	uxth	r3, r3
   1909a:	2b00      	cmp	r3, #0
   1909c:	d01d      	beq.n	190da <xQueueSemaphoreTake+0xca>
   1909e:	69fb      	ldr	r3, [r7, #28]
   190a0:	0018      	movs	r0, r3
   190a2:	4bb8      	ldr	r3, [pc, #736]	; (19384 <xQueueSemaphoreTake+0x374>)
   190a4:	4798      	blx	r3
   190a6:	0003      	movs	r3, r0
   190a8:	001a      	movs	r2, r3
   190aa:	4bb7      	ldr	r3, [pc, #732]	; (19388 <xQueueSemaphoreTake+0x378>)
   190ac:	5c9b      	ldrb	r3, [r3, r2]
   190ae:	3328      	adds	r3, #40	; 0x28
   190b0:	b2db      	uxtb	r3, r3
   190b2:	001d      	movs	r5, r3
   190b4:	69fb      	ldr	r3, [r7, #28]
   190b6:	0018      	movs	r0, r3
   190b8:	4bb2      	ldr	r3, [pc, #712]	; (19384 <xQueueSemaphoreTake+0x374>)
   190ba:	4798      	blx	r3
   190bc:	0003      	movs	r3, r0
   190be:	001a      	movs	r2, r3
   190c0:	4bb1      	ldr	r3, [pc, #708]	; (19388 <xQueueSemaphoreTake+0x378>)
   190c2:	5c9c      	ldrb	r4, [r3, r2]
   190c4:	69fb      	ldr	r3, [r7, #28]
   190c6:	0018      	movs	r0, r3
   190c8:	4bb0      	ldr	r3, [pc, #704]	; (1938c <xQueueSemaphoreTake+0x37c>)
   190ca:	4798      	blx	r3
   190cc:	0003      	movs	r3, r0
   190ce:	b2db      	uxtb	r3, r3
   190d0:	001a      	movs	r2, r3
   190d2:	0021      	movs	r1, r4
   190d4:	0028      	movs	r0, r5
   190d6:	4bae      	ldr	r3, [pc, #696]	; (19390 <xQueueSemaphoreTake+0x380>)
   190d8:	4798      	blx	r3
   190da:	69fb      	ldr	r3, [r7, #28]
   190dc:	0018      	movs	r0, r3
   190de:	4ba9      	ldr	r3, [pc, #676]	; (19384 <xQueueSemaphoreTake+0x374>)
   190e0:	4798      	blx	r3
   190e2:	0003      	movs	r3, r0
   190e4:	001a      	movs	r2, r3
   190e6:	4ba8      	ldr	r3, [pc, #672]	; (19388 <xQueueSemaphoreTake+0x378>)
   190e8:	5c9c      	ldrb	r4, [r3, r2]
   190ea:	69fb      	ldr	r3, [r7, #28]
   190ec:	0018      	movs	r0, r3
   190ee:	4ba7      	ldr	r3, [pc, #668]	; (1938c <xQueueSemaphoreTake+0x37c>)
   190f0:	4798      	blx	r3
   190f2:	0003      	movs	r3, r0
   190f4:	b2dd      	uxtb	r5, r3
   190f6:	69fb      	ldr	r3, [r7, #28]
   190f8:	0018      	movs	r0, r3
   190fa:	4ba2      	ldr	r3, [pc, #648]	; (19384 <xQueueSemaphoreTake+0x374>)
   190fc:	4798      	blx	r3
   190fe:	0003      	movs	r3, r0
   19100:	001a      	movs	r2, r3
   19102:	4ba1      	ldr	r3, [pc, #644]	; (19388 <xQueueSemaphoreTake+0x378>)
   19104:	5c9b      	ldrb	r3, [r3, r2]
   19106:	2b02      	cmp	r3, #2
   19108:	d108      	bne.n	1911c <xQueueSemaphoreTake+0x10c>
   1910a:	4b9a      	ldr	r3, [pc, #616]	; (19374 <xQueueSemaphoreTake+0x364>)
   1910c:	4798      	blx	r3
   1910e:	0003      	movs	r3, r0
   19110:	0018      	movs	r0, r3
   19112:	4ba0      	ldr	r3, [pc, #640]	; (19394 <xQueueSemaphoreTake+0x384>)
   19114:	4798      	blx	r3
   19116:	0003      	movs	r3, r0
   19118:	b2db      	uxtb	r3, r3
   1911a:	e004      	b.n	19126 <xQueueSemaphoreTake+0x116>
   1911c:	69fb      	ldr	r3, [r7, #28]
   1911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19120:	b2db      	uxtb	r3, r3
   19122:	3b01      	subs	r3, #1
   19124:	b2db      	uxtb	r3, r3
   19126:	001a      	movs	r2, r3
   19128:	0029      	movs	r1, r5
   1912a:	0020      	movs	r0, r4
   1912c:	4b9a      	ldr	r3, [pc, #616]	; (19398 <xQueueSemaphoreTake+0x388>)
   1912e:	4798      	blx	r3
   19130:	69bb      	ldr	r3, [r7, #24]
   19132:	1e5a      	subs	r2, r3, #1
   19134:	69fb      	ldr	r3, [r7, #28]
   19136:	639a      	str	r2, [r3, #56]	; 0x38
   19138:	69fb      	ldr	r3, [r7, #28]
   1913a:	681b      	ldr	r3, [r3, #0]
   1913c:	2b00      	cmp	r3, #0
   1913e:	d104      	bne.n	1914a <xQueueSemaphoreTake+0x13a>
   19140:	4b96      	ldr	r3, [pc, #600]	; (1939c <xQueueSemaphoreTake+0x38c>)
   19142:	4798      	blx	r3
   19144:	0002      	movs	r2, r0
   19146:	69fb      	ldr	r3, [r7, #28]
   19148:	605a      	str	r2, [r3, #4]
   1914a:	69fb      	ldr	r3, [r7, #28]
   1914c:	691b      	ldr	r3, [r3, #16]
   1914e:	2b00      	cmp	r3, #0
   19150:	d008      	beq.n	19164 <xQueueSemaphoreTake+0x154>
   19152:	69fb      	ldr	r3, [r7, #28]
   19154:	3310      	adds	r3, #16
   19156:	0018      	movs	r0, r3
   19158:	4b91      	ldr	r3, [pc, #580]	; (193a0 <xQueueSemaphoreTake+0x390>)
   1915a:	4798      	blx	r3
   1915c:	1e03      	subs	r3, r0, #0
   1915e:	d001      	beq.n	19164 <xQueueSemaphoreTake+0x154>
   19160:	4b90      	ldr	r3, [pc, #576]	; (193a4 <xQueueSemaphoreTake+0x394>)
   19162:	4798      	blx	r3
   19164:	4b90      	ldr	r3, [pc, #576]	; (193a8 <xQueueSemaphoreTake+0x398>)
   19166:	4798      	blx	r3
   19168:	2301      	movs	r3, #1
   1916a:	e18b      	b.n	19484 <xQueueSemaphoreTake+0x474>
   1916c:	683b      	ldr	r3, [r7, #0]
   1916e:	2b00      	cmp	r3, #0
   19170:	d140      	bne.n	191f4 <xQueueSemaphoreTake+0x1e4>
   19172:	6a3b      	ldr	r3, [r7, #32]
   19174:	2b00      	cmp	r3, #0
   19176:	d001      	beq.n	1917c <xQueueSemaphoreTake+0x16c>
   19178:	b672      	cpsid	i
   1917a:	e7fe      	b.n	1917a <xQueueSemaphoreTake+0x16a>
   1917c:	4b8a      	ldr	r3, [pc, #552]	; (193a8 <xQueueSemaphoreTake+0x398>)
   1917e:	4798      	blx	r3
   19180:	4b7c      	ldr	r3, [pc, #496]	; (19374 <xQueueSemaphoreTake+0x364>)
   19182:	4798      	blx	r3
   19184:	0003      	movs	r3, r0
   19186:	0018      	movs	r0, r3
   19188:	4b7b      	ldr	r3, [pc, #492]	; (19378 <xQueueSemaphoreTake+0x368>)
   1918a:	4798      	blx	r3
   1918c:	0003      	movs	r3, r0
   1918e:	001a      	movs	r2, r3
   19190:	4b7a      	ldr	r3, [pc, #488]	; (1937c <xQueueSemaphoreTake+0x36c>)
   19192:	881b      	ldrh	r3, [r3, #0]
   19194:	4013      	ands	r3, r2
   19196:	b29b      	uxth	r3, r3
   19198:	2b00      	cmp	r3, #0
   1919a:	d029      	beq.n	191f0 <xQueueSemaphoreTake+0x1e0>
   1919c:	69fb      	ldr	r3, [r7, #28]
   1919e:	0018      	movs	r0, r3
   191a0:	4b77      	ldr	r3, [pc, #476]	; (19380 <xQueueSemaphoreTake+0x370>)
   191a2:	4798      	blx	r3
   191a4:	0003      	movs	r3, r0
   191a6:	001a      	movs	r2, r3
   191a8:	4b74      	ldr	r3, [pc, #464]	; (1937c <xQueueSemaphoreTake+0x36c>)
   191aa:	881b      	ldrh	r3, [r3, #0]
   191ac:	4013      	ands	r3, r2
   191ae:	b29b      	uxth	r3, r3
   191b0:	2b00      	cmp	r3, #0
   191b2:	d01d      	beq.n	191f0 <xQueueSemaphoreTake+0x1e0>
   191b4:	69fb      	ldr	r3, [r7, #28]
   191b6:	0018      	movs	r0, r3
   191b8:	4b72      	ldr	r3, [pc, #456]	; (19384 <xQueueSemaphoreTake+0x374>)
   191ba:	4798      	blx	r3
   191bc:	0003      	movs	r3, r0
   191be:	001a      	movs	r2, r3
   191c0:	4b71      	ldr	r3, [pc, #452]	; (19388 <xQueueSemaphoreTake+0x378>)
   191c2:	5c9b      	ldrb	r3, [r3, r2]
   191c4:	3350      	adds	r3, #80	; 0x50
   191c6:	b2db      	uxtb	r3, r3
   191c8:	001d      	movs	r5, r3
   191ca:	69fb      	ldr	r3, [r7, #28]
   191cc:	0018      	movs	r0, r3
   191ce:	4b6d      	ldr	r3, [pc, #436]	; (19384 <xQueueSemaphoreTake+0x374>)
   191d0:	4798      	blx	r3
   191d2:	0003      	movs	r3, r0
   191d4:	001a      	movs	r2, r3
   191d6:	4b6c      	ldr	r3, [pc, #432]	; (19388 <xQueueSemaphoreTake+0x378>)
   191d8:	5c9c      	ldrb	r4, [r3, r2]
   191da:	69fb      	ldr	r3, [r7, #28]
   191dc:	0018      	movs	r0, r3
   191de:	4b6b      	ldr	r3, [pc, #428]	; (1938c <xQueueSemaphoreTake+0x37c>)
   191e0:	4798      	blx	r3
   191e2:	0003      	movs	r3, r0
   191e4:	b2db      	uxtb	r3, r3
   191e6:	001a      	movs	r2, r3
   191e8:	0021      	movs	r1, r4
   191ea:	0028      	movs	r0, r5
   191ec:	4b68      	ldr	r3, [pc, #416]	; (19390 <xQueueSemaphoreTake+0x380>)
   191ee:	4798      	blx	r3
   191f0:	2300      	movs	r3, #0
   191f2:	e147      	b.n	19484 <xQueueSemaphoreTake+0x474>
   191f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   191f6:	2b00      	cmp	r3, #0
   191f8:	d106      	bne.n	19208 <xQueueSemaphoreTake+0x1f8>
   191fa:	230c      	movs	r3, #12
   191fc:	18fb      	adds	r3, r7, r3
   191fe:	0018      	movs	r0, r3
   19200:	4b6a      	ldr	r3, [pc, #424]	; (193ac <xQueueSemaphoreTake+0x39c>)
   19202:	4798      	blx	r3
   19204:	2301      	movs	r3, #1
   19206:	627b      	str	r3, [r7, #36]	; 0x24
   19208:	4b67      	ldr	r3, [pc, #412]	; (193a8 <xQueueSemaphoreTake+0x398>)
   1920a:	4798      	blx	r3
   1920c:	4b68      	ldr	r3, [pc, #416]	; (193b0 <xQueueSemaphoreTake+0x3a0>)
   1920e:	4798      	blx	r3
   19210:	4b57      	ldr	r3, [pc, #348]	; (19370 <xQueueSemaphoreTake+0x360>)
   19212:	4798      	blx	r3
   19214:	69fb      	ldr	r3, [r7, #28]
   19216:	2244      	movs	r2, #68	; 0x44
   19218:	5c9b      	ldrb	r3, [r3, r2]
   1921a:	b25b      	sxtb	r3, r3
   1921c:	3301      	adds	r3, #1
   1921e:	d103      	bne.n	19228 <xQueueSemaphoreTake+0x218>
   19220:	69fb      	ldr	r3, [r7, #28]
   19222:	2244      	movs	r2, #68	; 0x44
   19224:	2100      	movs	r1, #0
   19226:	5499      	strb	r1, [r3, r2]
   19228:	69fb      	ldr	r3, [r7, #28]
   1922a:	2245      	movs	r2, #69	; 0x45
   1922c:	5c9b      	ldrb	r3, [r3, r2]
   1922e:	b25b      	sxtb	r3, r3
   19230:	3301      	adds	r3, #1
   19232:	d103      	bne.n	1923c <xQueueSemaphoreTake+0x22c>
   19234:	69fb      	ldr	r3, [r7, #28]
   19236:	2245      	movs	r2, #69	; 0x45
   19238:	2100      	movs	r1, #0
   1923a:	5499      	strb	r1, [r3, r2]
   1923c:	4b5a      	ldr	r3, [pc, #360]	; (193a8 <xQueueSemaphoreTake+0x398>)
   1923e:	4798      	blx	r3
   19240:	003a      	movs	r2, r7
   19242:	230c      	movs	r3, #12
   19244:	18fb      	adds	r3, r7, r3
   19246:	0011      	movs	r1, r2
   19248:	0018      	movs	r0, r3
   1924a:	4b5a      	ldr	r3, [pc, #360]	; (193b4 <xQueueSemaphoreTake+0x3a4>)
   1924c:	4798      	blx	r3
   1924e:	1e03      	subs	r3, r0, #0
   19250:	d000      	beq.n	19254 <xQueueSemaphoreTake+0x244>
   19252:	e0bd      	b.n	193d0 <xQueueSemaphoreTake+0x3c0>
   19254:	69fb      	ldr	r3, [r7, #28]
   19256:	0018      	movs	r0, r3
   19258:	4b57      	ldr	r3, [pc, #348]	; (193b8 <xQueueSemaphoreTake+0x3a8>)
   1925a:	4798      	blx	r3
   1925c:	1e03      	subs	r3, r0, #0
   1925e:	d100      	bne.n	19262 <xQueueSemaphoreTake+0x252>
   19260:	e07c      	b.n	1935c <xQueueSemaphoreTake+0x34c>
   19262:	4b44      	ldr	r3, [pc, #272]	; (19374 <xQueueSemaphoreTake+0x364>)
   19264:	4798      	blx	r3
   19266:	0003      	movs	r3, r0
   19268:	0018      	movs	r0, r3
   1926a:	4b43      	ldr	r3, [pc, #268]	; (19378 <xQueueSemaphoreTake+0x368>)
   1926c:	4798      	blx	r3
   1926e:	0003      	movs	r3, r0
   19270:	001a      	movs	r2, r3
   19272:	4b42      	ldr	r3, [pc, #264]	; (1937c <xQueueSemaphoreTake+0x36c>)
   19274:	881b      	ldrh	r3, [r3, #0]
   19276:	4013      	ands	r3, r2
   19278:	b29b      	uxth	r3, r3
   1927a:	2b00      	cmp	r3, #0
   1927c:	d029      	beq.n	192d2 <xQueueSemaphoreTake+0x2c2>
   1927e:	69fb      	ldr	r3, [r7, #28]
   19280:	0018      	movs	r0, r3
   19282:	4b3f      	ldr	r3, [pc, #252]	; (19380 <xQueueSemaphoreTake+0x370>)
   19284:	4798      	blx	r3
   19286:	0003      	movs	r3, r0
   19288:	001a      	movs	r2, r3
   1928a:	4b3c      	ldr	r3, [pc, #240]	; (1937c <xQueueSemaphoreTake+0x36c>)
   1928c:	881b      	ldrh	r3, [r3, #0]
   1928e:	4013      	ands	r3, r2
   19290:	b29b      	uxth	r3, r3
   19292:	2b00      	cmp	r3, #0
   19294:	d01d      	beq.n	192d2 <xQueueSemaphoreTake+0x2c2>
   19296:	69fb      	ldr	r3, [r7, #28]
   19298:	0018      	movs	r0, r3
   1929a:	4b3a      	ldr	r3, [pc, #232]	; (19384 <xQueueSemaphoreTake+0x374>)
   1929c:	4798      	blx	r3
   1929e:	0003      	movs	r3, r0
   192a0:	001a      	movs	r2, r3
   192a2:	4b39      	ldr	r3, [pc, #228]	; (19388 <xQueueSemaphoreTake+0x378>)
   192a4:	5c9b      	ldrb	r3, [r3, r2]
   192a6:	3368      	adds	r3, #104	; 0x68
   192a8:	b2db      	uxtb	r3, r3
   192aa:	001d      	movs	r5, r3
   192ac:	69fb      	ldr	r3, [r7, #28]
   192ae:	0018      	movs	r0, r3
   192b0:	4b34      	ldr	r3, [pc, #208]	; (19384 <xQueueSemaphoreTake+0x374>)
   192b2:	4798      	blx	r3
   192b4:	0003      	movs	r3, r0
   192b6:	001a      	movs	r2, r3
   192b8:	4b33      	ldr	r3, [pc, #204]	; (19388 <xQueueSemaphoreTake+0x378>)
   192ba:	5c9c      	ldrb	r4, [r3, r2]
   192bc:	69fb      	ldr	r3, [r7, #28]
   192be:	0018      	movs	r0, r3
   192c0:	4b32      	ldr	r3, [pc, #200]	; (1938c <xQueueSemaphoreTake+0x37c>)
   192c2:	4798      	blx	r3
   192c4:	0003      	movs	r3, r0
   192c6:	b2db      	uxtb	r3, r3
   192c8:	001a      	movs	r2, r3
   192ca:	0021      	movs	r1, r4
   192cc:	0028      	movs	r0, r5
   192ce:	4b30      	ldr	r3, [pc, #192]	; (19390 <xQueueSemaphoreTake+0x380>)
   192d0:	4798      	blx	r3
   192d2:	69fb      	ldr	r3, [r7, #28]
   192d4:	0018      	movs	r0, r3
   192d6:	4b2b      	ldr	r3, [pc, #172]	; (19384 <xQueueSemaphoreTake+0x374>)
   192d8:	4798      	blx	r3
   192da:	0003      	movs	r3, r0
   192dc:	001a      	movs	r2, r3
   192de:	4b2a      	ldr	r3, [pc, #168]	; (19388 <xQueueSemaphoreTake+0x378>)
   192e0:	5c9b      	ldrb	r3, [r3, r2]
   192e2:	2b02      	cmp	r3, #2
   192e4:	d018      	beq.n	19318 <xQueueSemaphoreTake+0x308>
   192e6:	4b23      	ldr	r3, [pc, #140]	; (19374 <xQueueSemaphoreTake+0x364>)
   192e8:	4798      	blx	r3
   192ea:	0003      	movs	r3, r0
   192ec:	0018      	movs	r0, r3
   192ee:	4b22      	ldr	r3, [pc, #136]	; (19378 <xQueueSemaphoreTake+0x368>)
   192f0:	4798      	blx	r3
   192f2:	0003      	movs	r3, r0
   192f4:	001a      	movs	r2, r3
   192f6:	4b21      	ldr	r3, [pc, #132]	; (1937c <xQueueSemaphoreTake+0x36c>)
   192f8:	881b      	ldrh	r3, [r3, #0]
   192fa:	4013      	ands	r3, r2
   192fc:	b29b      	uxth	r3, r3
   192fe:	2b00      	cmp	r3, #0
   19300:	d00a      	beq.n	19318 <xQueueSemaphoreTake+0x308>
   19302:	4b1c      	ldr	r3, [pc, #112]	; (19374 <xQueueSemaphoreTake+0x364>)
   19304:	4798      	blx	r3
   19306:	0003      	movs	r3, r0
   19308:	0018      	movs	r0, r3
   1930a:	4b22      	ldr	r3, [pc, #136]	; (19394 <xQueueSemaphoreTake+0x384>)
   1930c:	4798      	blx	r3
   1930e:	0003      	movs	r3, r0
   19310:	b2db      	uxtb	r3, r3
   19312:	0018      	movs	r0, r3
   19314:	4b29      	ldr	r3, [pc, #164]	; (193bc <xQueueSemaphoreTake+0x3ac>)
   19316:	4798      	blx	r3
   19318:	69fb      	ldr	r3, [r7, #28]
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	2b00      	cmp	r3, #0
   1931e:	d10a      	bne.n	19336 <xQueueSemaphoreTake+0x326>
   19320:	4b13      	ldr	r3, [pc, #76]	; (19370 <xQueueSemaphoreTake+0x360>)
   19322:	4798      	blx	r3
   19324:	69fb      	ldr	r3, [r7, #28]
   19326:	685b      	ldr	r3, [r3, #4]
   19328:	0018      	movs	r0, r3
   1932a:	4b25      	ldr	r3, [pc, #148]	; (193c0 <xQueueSemaphoreTake+0x3b0>)
   1932c:	4798      	blx	r3
   1932e:	0003      	movs	r3, r0
   19330:	623b      	str	r3, [r7, #32]
   19332:	4b1d      	ldr	r3, [pc, #116]	; (193a8 <xQueueSemaphoreTake+0x398>)
   19334:	4798      	blx	r3
   19336:	69fb      	ldr	r3, [r7, #28]
   19338:	3324      	adds	r3, #36	; 0x24
   1933a:	683a      	ldr	r2, [r7, #0]
   1933c:	0011      	movs	r1, r2
   1933e:	0018      	movs	r0, r3
   19340:	4b20      	ldr	r3, [pc, #128]	; (193c4 <xQueueSemaphoreTake+0x3b4>)
   19342:	4798      	blx	r3
   19344:	69fb      	ldr	r3, [r7, #28]
   19346:	0018      	movs	r0, r3
   19348:	4b1f      	ldr	r3, [pc, #124]	; (193c8 <xQueueSemaphoreTake+0x3b8>)
   1934a:	4798      	blx	r3
   1934c:	4b1f      	ldr	r3, [pc, #124]	; (193cc <xQueueSemaphoreTake+0x3bc>)
   1934e:	4798      	blx	r3
   19350:	1e03      	subs	r3, r0, #0
   19352:	d000      	beq.n	19356 <xQueueSemaphoreTake+0x346>
   19354:	e680      	b.n	19058 <xQueueSemaphoreTake+0x48>
   19356:	4b13      	ldr	r3, [pc, #76]	; (193a4 <xQueueSemaphoreTake+0x394>)
   19358:	4798      	blx	r3
   1935a:	e67d      	b.n	19058 <xQueueSemaphoreTake+0x48>
   1935c:	69fb      	ldr	r3, [r7, #28]
   1935e:	0018      	movs	r0, r3
   19360:	4b19      	ldr	r3, [pc, #100]	; (193c8 <xQueueSemaphoreTake+0x3b8>)
   19362:	4798      	blx	r3
   19364:	4b19      	ldr	r3, [pc, #100]	; (193cc <xQueueSemaphoreTake+0x3bc>)
   19366:	4798      	blx	r3
   19368:	e676      	b.n	19058 <xQueueSemaphoreTake+0x48>
   1936a:	46c0      	nop			; (mov r8, r8)
   1936c:	0001aa8d 	.word	0x0001aa8d
   19370:	00017d69 	.word	0x00017d69
   19374:	00016005 	.word	0x00016005
   19378:	00015d69 	.word	0x00015d69
   1937c:	200000f0 	.word	0x200000f0
   19380:	00015e29 	.word	0x00015e29
   19384:	00015d29 	.word	0x00015d29
   19388:	200000e4 	.word	0x200000e4
   1938c:	00015e09 	.word	0x00015e09
   19390:	00016761 	.word	0x00016761
   19394:	00015d49 	.word	0x00015d49
   19398:	00016dbd 	.word	0x00016dbd
   1939c:	0001af59 	.word	0x0001af59
   193a0:	0001a5fd 	.word	0x0001a5fd
   193a4:	00017d51 	.word	0x00017d51
   193a8:	00017d8d 	.word	0x00017d8d
   193ac:	0001a73d 	.word	0x0001a73d
   193b0:	0001a025 	.word	0x0001a025
   193b4:	0001a765 	.word	0x0001a765
   193b8:	00019759 	.word	0x00019759
   193bc:	00016ef9 	.word	0x00016ef9
   193c0:	0001aac5 	.word	0x0001aac5
   193c4:	0001a4d9 	.word	0x0001a4d9
   193c8:	00019669 	.word	0x00019669
   193cc:	0001a03d 	.word	0x0001a03d
   193d0:	69fb      	ldr	r3, [r7, #28]
   193d2:	0018      	movs	r0, r3
   193d4:	4b2d      	ldr	r3, [pc, #180]	; (1948c <xQueueSemaphoreTake+0x47c>)
   193d6:	4798      	blx	r3
   193d8:	4b2d      	ldr	r3, [pc, #180]	; (19490 <xQueueSemaphoreTake+0x480>)
   193da:	4798      	blx	r3
   193dc:	69fb      	ldr	r3, [r7, #28]
   193de:	0018      	movs	r0, r3
   193e0:	4b2c      	ldr	r3, [pc, #176]	; (19494 <xQueueSemaphoreTake+0x484>)
   193e2:	4798      	blx	r3
   193e4:	1e03      	subs	r3, r0, #0
   193e6:	d100      	bne.n	193ea <xQueueSemaphoreTake+0x3da>
   193e8:	e636      	b.n	19058 <xQueueSemaphoreTake+0x48>
   193ea:	6a3b      	ldr	r3, [r7, #32]
   193ec:	2b00      	cmp	r3, #0
   193ee:	d010      	beq.n	19412 <xQueueSemaphoreTake+0x402>
   193f0:	4b29      	ldr	r3, [pc, #164]	; (19498 <xQueueSemaphoreTake+0x488>)
   193f2:	4798      	blx	r3
   193f4:	69fb      	ldr	r3, [r7, #28]
   193f6:	0018      	movs	r0, r3
   193f8:	4b28      	ldr	r3, [pc, #160]	; (1949c <xQueueSemaphoreTake+0x48c>)
   193fa:	4798      	blx	r3
   193fc:	0003      	movs	r3, r0
   193fe:	617b      	str	r3, [r7, #20]
   19400:	69fb      	ldr	r3, [r7, #28]
   19402:	685b      	ldr	r3, [r3, #4]
   19404:	697a      	ldr	r2, [r7, #20]
   19406:	0011      	movs	r1, r2
   19408:	0018      	movs	r0, r3
   1940a:	4b25      	ldr	r3, [pc, #148]	; (194a0 <xQueueSemaphoreTake+0x490>)
   1940c:	4798      	blx	r3
   1940e:	4b25      	ldr	r3, [pc, #148]	; (194a4 <xQueueSemaphoreTake+0x494>)
   19410:	4798      	blx	r3
   19412:	4b25      	ldr	r3, [pc, #148]	; (194a8 <xQueueSemaphoreTake+0x498>)
   19414:	4798      	blx	r3
   19416:	0003      	movs	r3, r0
   19418:	0018      	movs	r0, r3
   1941a:	4b24      	ldr	r3, [pc, #144]	; (194ac <xQueueSemaphoreTake+0x49c>)
   1941c:	4798      	blx	r3
   1941e:	0003      	movs	r3, r0
   19420:	001a      	movs	r2, r3
   19422:	4b23      	ldr	r3, [pc, #140]	; (194b0 <xQueueSemaphoreTake+0x4a0>)
   19424:	881b      	ldrh	r3, [r3, #0]
   19426:	4013      	ands	r3, r2
   19428:	b29b      	uxth	r3, r3
   1942a:	2b00      	cmp	r3, #0
   1942c:	d029      	beq.n	19482 <xQueueSemaphoreTake+0x472>
   1942e:	69fb      	ldr	r3, [r7, #28]
   19430:	0018      	movs	r0, r3
   19432:	4b20      	ldr	r3, [pc, #128]	; (194b4 <xQueueSemaphoreTake+0x4a4>)
   19434:	4798      	blx	r3
   19436:	0003      	movs	r3, r0
   19438:	001a      	movs	r2, r3
   1943a:	4b1d      	ldr	r3, [pc, #116]	; (194b0 <xQueueSemaphoreTake+0x4a0>)
   1943c:	881b      	ldrh	r3, [r3, #0]
   1943e:	4013      	ands	r3, r2
   19440:	b29b      	uxth	r3, r3
   19442:	2b00      	cmp	r3, #0
   19444:	d01d      	beq.n	19482 <xQueueSemaphoreTake+0x472>
   19446:	69fb      	ldr	r3, [r7, #28]
   19448:	0018      	movs	r0, r3
   1944a:	4b1b      	ldr	r3, [pc, #108]	; (194b8 <xQueueSemaphoreTake+0x4a8>)
   1944c:	4798      	blx	r3
   1944e:	0003      	movs	r3, r0
   19450:	001a      	movs	r2, r3
   19452:	4b1a      	ldr	r3, [pc, #104]	; (194bc <xQueueSemaphoreTake+0x4ac>)
   19454:	5c9b      	ldrb	r3, [r3, r2]
   19456:	3350      	adds	r3, #80	; 0x50
   19458:	b2db      	uxtb	r3, r3
   1945a:	001d      	movs	r5, r3
   1945c:	69fb      	ldr	r3, [r7, #28]
   1945e:	0018      	movs	r0, r3
   19460:	4b15      	ldr	r3, [pc, #84]	; (194b8 <xQueueSemaphoreTake+0x4a8>)
   19462:	4798      	blx	r3
   19464:	0003      	movs	r3, r0
   19466:	001a      	movs	r2, r3
   19468:	4b14      	ldr	r3, [pc, #80]	; (194bc <xQueueSemaphoreTake+0x4ac>)
   1946a:	5c9c      	ldrb	r4, [r3, r2]
   1946c:	69fb      	ldr	r3, [r7, #28]
   1946e:	0018      	movs	r0, r3
   19470:	4b13      	ldr	r3, [pc, #76]	; (194c0 <xQueueSemaphoreTake+0x4b0>)
   19472:	4798      	blx	r3
   19474:	0003      	movs	r3, r0
   19476:	b2db      	uxtb	r3, r3
   19478:	001a      	movs	r2, r3
   1947a:	0021      	movs	r1, r4
   1947c:	0028      	movs	r0, r5
   1947e:	4b11      	ldr	r3, [pc, #68]	; (194c4 <xQueueSemaphoreTake+0x4b4>)
   19480:	4798      	blx	r3
   19482:	2300      	movs	r3, #0
   19484:	0018      	movs	r0, r3
   19486:	46bd      	mov	sp, r7
   19488:	b00a      	add	sp, #40	; 0x28
   1948a:	bdb0      	pop	{r4, r5, r7, pc}
   1948c:	00019669 	.word	0x00019669
   19490:	0001a03d 	.word	0x0001a03d
   19494:	00019759 	.word	0x00019759
   19498:	00017d69 	.word	0x00017d69
   1949c:	0001950b 	.word	0x0001950b
   194a0:	0001adbd 	.word	0x0001adbd
   194a4:	00017d8d 	.word	0x00017d8d
   194a8:	00016005 	.word	0x00016005
   194ac:	00015d69 	.word	0x00015d69
   194b0:	200000f0 	.word	0x200000f0
   194b4:	00015e29 	.word	0x00015e29
   194b8:	00015d29 	.word	0x00015d29
   194bc:	200000e4 	.word	0x200000e4
   194c0:	00015e09 	.word	0x00015e09
   194c4:	00016761 	.word	0x00016761

000194c8 <uxQueueGetQueueNumber>:
   194c8:	b580      	push	{r7, lr}
   194ca:	b082      	sub	sp, #8
   194cc:	af00      	add	r7, sp, #0
   194ce:	6078      	str	r0, [r7, #4]
   194d0:	687b      	ldr	r3, [r7, #4]
   194d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   194d4:	0018      	movs	r0, r3
   194d6:	46bd      	mov	sp, r7
   194d8:	b002      	add	sp, #8
   194da:	bd80      	pop	{r7, pc}

000194dc <vQueueSetQueueNumber>:
   194dc:	b580      	push	{r7, lr}
   194de:	b082      	sub	sp, #8
   194e0:	af00      	add	r7, sp, #0
   194e2:	6078      	str	r0, [r7, #4]
   194e4:	6039      	str	r1, [r7, #0]
   194e6:	687b      	ldr	r3, [r7, #4]
   194e8:	683a      	ldr	r2, [r7, #0]
   194ea:	64da      	str	r2, [r3, #76]	; 0x4c
   194ec:	46c0      	nop			; (mov r8, r8)
   194ee:	46bd      	mov	sp, r7
   194f0:	b002      	add	sp, #8
   194f2:	bd80      	pop	{r7, pc}

000194f4 <ucQueueGetQueueType>:
   194f4:	b580      	push	{r7, lr}
   194f6:	b082      	sub	sp, #8
   194f8:	af00      	add	r7, sp, #0
   194fa:	6078      	str	r0, [r7, #4]
   194fc:	687b      	ldr	r3, [r7, #4]
   194fe:	2250      	movs	r2, #80	; 0x50
   19500:	5c9b      	ldrb	r3, [r3, r2]
   19502:	0018      	movs	r0, r3
   19504:	46bd      	mov	sp, r7
   19506:	b002      	add	sp, #8
   19508:	bd80      	pop	{r7, pc}

0001950a <prvGetDisinheritPriorityAfterTimeout>:
   1950a:	b580      	push	{r7, lr}
   1950c:	b084      	sub	sp, #16
   1950e:	af00      	add	r7, sp, #0
   19510:	6078      	str	r0, [r7, #4]
   19512:	687b      	ldr	r3, [r7, #4]
   19514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19516:	2b00      	cmp	r3, #0
   19518:	d006      	beq.n	19528 <prvGetDisinheritPriorityAfterTimeout+0x1e>
   1951a:	687b      	ldr	r3, [r7, #4]
   1951c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	2205      	movs	r2, #5
   19522:	1ad3      	subs	r3, r2, r3
   19524:	60fb      	str	r3, [r7, #12]
   19526:	e001      	b.n	1952c <prvGetDisinheritPriorityAfterTimeout+0x22>
   19528:	2300      	movs	r3, #0
   1952a:	60fb      	str	r3, [r7, #12]
   1952c:	68fb      	ldr	r3, [r7, #12]
   1952e:	0018      	movs	r0, r3
   19530:	46bd      	mov	sp, r7
   19532:	b004      	add	sp, #16
   19534:	bd80      	pop	{r7, pc}
	...

00019538 <prvCopyDataToQueue>:
   19538:	b580      	push	{r7, lr}
   1953a:	b086      	sub	sp, #24
   1953c:	af00      	add	r7, sp, #0
   1953e:	60f8      	str	r0, [r7, #12]
   19540:	60b9      	str	r1, [r7, #8]
   19542:	607a      	str	r2, [r7, #4]
   19544:	2300      	movs	r3, #0
   19546:	617b      	str	r3, [r7, #20]
   19548:	68fb      	ldr	r3, [r7, #12]
   1954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1954c:	613b      	str	r3, [r7, #16]
   1954e:	68fb      	ldr	r3, [r7, #12]
   19550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19552:	2b00      	cmp	r3, #0
   19554:	d10e      	bne.n	19574 <prvCopyDataToQueue+0x3c>
   19556:	68fb      	ldr	r3, [r7, #12]
   19558:	681b      	ldr	r3, [r3, #0]
   1955a:	2b00      	cmp	r3, #0
   1955c:	d14e      	bne.n	195fc <prvCopyDataToQueue+0xc4>
   1955e:	68fb      	ldr	r3, [r7, #12]
   19560:	685b      	ldr	r3, [r3, #4]
   19562:	0018      	movs	r0, r3
   19564:	4b2a      	ldr	r3, [pc, #168]	; (19610 <prvCopyDataToQueue+0xd8>)
   19566:	4798      	blx	r3
   19568:	0003      	movs	r3, r0
   1956a:	617b      	str	r3, [r7, #20]
   1956c:	68fb      	ldr	r3, [r7, #12]
   1956e:	2200      	movs	r2, #0
   19570:	605a      	str	r2, [r3, #4]
   19572:	e043      	b.n	195fc <prvCopyDataToQueue+0xc4>
   19574:	687b      	ldr	r3, [r7, #4]
   19576:	2b00      	cmp	r3, #0
   19578:	d119      	bne.n	195ae <prvCopyDataToQueue+0x76>
   1957a:	68fb      	ldr	r3, [r7, #12]
   1957c:	6898      	ldr	r0, [r3, #8]
   1957e:	68fb      	ldr	r3, [r7, #12]
   19580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19582:	68bb      	ldr	r3, [r7, #8]
   19584:	0019      	movs	r1, r3
   19586:	4b23      	ldr	r3, [pc, #140]	; (19614 <prvCopyDataToQueue+0xdc>)
   19588:	4798      	blx	r3
   1958a:	68fb      	ldr	r3, [r7, #12]
   1958c:	689a      	ldr	r2, [r3, #8]
   1958e:	68fb      	ldr	r3, [r7, #12]
   19590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19592:	18d2      	adds	r2, r2, r3
   19594:	68fb      	ldr	r3, [r7, #12]
   19596:	609a      	str	r2, [r3, #8]
   19598:	68fb      	ldr	r3, [r7, #12]
   1959a:	689a      	ldr	r2, [r3, #8]
   1959c:	68fb      	ldr	r3, [r7, #12]
   1959e:	685b      	ldr	r3, [r3, #4]
   195a0:	429a      	cmp	r2, r3
   195a2:	d32b      	bcc.n	195fc <prvCopyDataToQueue+0xc4>
   195a4:	68fb      	ldr	r3, [r7, #12]
   195a6:	681a      	ldr	r2, [r3, #0]
   195a8:	68fb      	ldr	r3, [r7, #12]
   195aa:	609a      	str	r2, [r3, #8]
   195ac:	e026      	b.n	195fc <prvCopyDataToQueue+0xc4>
   195ae:	68fb      	ldr	r3, [r7, #12]
   195b0:	68d8      	ldr	r0, [r3, #12]
   195b2:	68fb      	ldr	r3, [r7, #12]
   195b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   195b6:	68bb      	ldr	r3, [r7, #8]
   195b8:	0019      	movs	r1, r3
   195ba:	4b16      	ldr	r3, [pc, #88]	; (19614 <prvCopyDataToQueue+0xdc>)
   195bc:	4798      	blx	r3
   195be:	68fb      	ldr	r3, [r7, #12]
   195c0:	68da      	ldr	r2, [r3, #12]
   195c2:	68fb      	ldr	r3, [r7, #12]
   195c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   195c6:	425b      	negs	r3, r3
   195c8:	18d2      	adds	r2, r2, r3
   195ca:	68fb      	ldr	r3, [r7, #12]
   195cc:	60da      	str	r2, [r3, #12]
   195ce:	68fb      	ldr	r3, [r7, #12]
   195d0:	68da      	ldr	r2, [r3, #12]
   195d2:	68fb      	ldr	r3, [r7, #12]
   195d4:	681b      	ldr	r3, [r3, #0]
   195d6:	429a      	cmp	r2, r3
   195d8:	d207      	bcs.n	195ea <prvCopyDataToQueue+0xb2>
   195da:	68fb      	ldr	r3, [r7, #12]
   195dc:	685a      	ldr	r2, [r3, #4]
   195de:	68fb      	ldr	r3, [r7, #12]
   195e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   195e2:	425b      	negs	r3, r3
   195e4:	18d2      	adds	r2, r2, r3
   195e6:	68fb      	ldr	r3, [r7, #12]
   195e8:	60da      	str	r2, [r3, #12]
   195ea:	687b      	ldr	r3, [r7, #4]
   195ec:	2b02      	cmp	r3, #2
   195ee:	d105      	bne.n	195fc <prvCopyDataToQueue+0xc4>
   195f0:	693b      	ldr	r3, [r7, #16]
   195f2:	2b00      	cmp	r3, #0
   195f4:	d002      	beq.n	195fc <prvCopyDataToQueue+0xc4>
   195f6:	693b      	ldr	r3, [r7, #16]
   195f8:	3b01      	subs	r3, #1
   195fa:	613b      	str	r3, [r7, #16]
   195fc:	693b      	ldr	r3, [r7, #16]
   195fe:	1c5a      	adds	r2, r3, #1
   19600:	68fb      	ldr	r3, [r7, #12]
   19602:	639a      	str	r2, [r3, #56]	; 0x38
   19604:	697b      	ldr	r3, [r7, #20]
   19606:	0018      	movs	r0, r3
   19608:	46bd      	mov	sp, r7
   1960a:	b006      	add	sp, #24
   1960c:	bd80      	pop	{r7, pc}
   1960e:	46c0      	nop			; (mov r8, r8)
   19610:	0001ac55 	.word	0x0001ac55
   19614:	000321cd 	.word	0x000321cd

00019618 <prvCopyDataFromQueue>:
   19618:	b580      	push	{r7, lr}
   1961a:	b082      	sub	sp, #8
   1961c:	af00      	add	r7, sp, #0
   1961e:	6078      	str	r0, [r7, #4]
   19620:	6039      	str	r1, [r7, #0]
   19622:	687b      	ldr	r3, [r7, #4]
   19624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19626:	2b00      	cmp	r3, #0
   19628:	d018      	beq.n	1965c <prvCopyDataFromQueue+0x44>
   1962a:	687b      	ldr	r3, [r7, #4]
   1962c:	68da      	ldr	r2, [r3, #12]
   1962e:	687b      	ldr	r3, [r7, #4]
   19630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19632:	18d2      	adds	r2, r2, r3
   19634:	687b      	ldr	r3, [r7, #4]
   19636:	60da      	str	r2, [r3, #12]
   19638:	687b      	ldr	r3, [r7, #4]
   1963a:	68da      	ldr	r2, [r3, #12]
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	685b      	ldr	r3, [r3, #4]
   19640:	429a      	cmp	r2, r3
   19642:	d303      	bcc.n	1964c <prvCopyDataFromQueue+0x34>
   19644:	687b      	ldr	r3, [r7, #4]
   19646:	681a      	ldr	r2, [r3, #0]
   19648:	687b      	ldr	r3, [r7, #4]
   1964a:	60da      	str	r2, [r3, #12]
   1964c:	687b      	ldr	r3, [r7, #4]
   1964e:	68d9      	ldr	r1, [r3, #12]
   19650:	687b      	ldr	r3, [r7, #4]
   19652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19654:	683b      	ldr	r3, [r7, #0]
   19656:	0018      	movs	r0, r3
   19658:	4b02      	ldr	r3, [pc, #8]	; (19664 <prvCopyDataFromQueue+0x4c>)
   1965a:	4798      	blx	r3
   1965c:	46c0      	nop			; (mov r8, r8)
   1965e:	46bd      	mov	sp, r7
   19660:	b002      	add	sp, #8
   19662:	bd80      	pop	{r7, pc}
   19664:	000321cd 	.word	0x000321cd

00019668 <prvUnlockQueue>:
   19668:	b580      	push	{r7, lr}
   1966a:	b084      	sub	sp, #16
   1966c:	af00      	add	r7, sp, #0
   1966e:	6078      	str	r0, [r7, #4]
   19670:	4b34      	ldr	r3, [pc, #208]	; (19744 <prvUnlockQueue+0xdc>)
   19672:	4798      	blx	r3
   19674:	230f      	movs	r3, #15
   19676:	18fb      	adds	r3, r7, r3
   19678:	687a      	ldr	r2, [r7, #4]
   1967a:	2145      	movs	r1, #69	; 0x45
   1967c:	5c52      	ldrb	r2, [r2, r1]
   1967e:	701a      	strb	r2, [r3, #0]
   19680:	e022      	b.n	196c8 <prvUnlockQueue+0x60>
   19682:	687b      	ldr	r3, [r7, #4]
   19684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19686:	2b00      	cmp	r3, #0
   19688:	d009      	beq.n	1969e <prvUnlockQueue+0x36>
   1968a:	687b      	ldr	r3, [r7, #4]
   1968c:	2100      	movs	r1, #0
   1968e:	0018      	movs	r0, r3
   19690:	4b2d      	ldr	r3, [pc, #180]	; (19748 <prvUnlockQueue+0xe0>)
   19692:	4798      	blx	r3
   19694:	1e03      	subs	r3, r0, #0
   19696:	d00f      	beq.n	196b8 <prvUnlockQueue+0x50>
   19698:	4b2c      	ldr	r3, [pc, #176]	; (1974c <prvUnlockQueue+0xe4>)
   1969a:	4798      	blx	r3
   1969c:	e00c      	b.n	196b8 <prvUnlockQueue+0x50>
   1969e:	687b      	ldr	r3, [r7, #4]
   196a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   196a2:	2b00      	cmp	r3, #0
   196a4:	d017      	beq.n	196d6 <prvUnlockQueue+0x6e>
   196a6:	687b      	ldr	r3, [r7, #4]
   196a8:	3324      	adds	r3, #36	; 0x24
   196aa:	0018      	movs	r0, r3
   196ac:	4b28      	ldr	r3, [pc, #160]	; (19750 <prvUnlockQueue+0xe8>)
   196ae:	4798      	blx	r3
   196b0:	1e03      	subs	r3, r0, #0
   196b2:	d001      	beq.n	196b8 <prvUnlockQueue+0x50>
   196b4:	4b25      	ldr	r3, [pc, #148]	; (1974c <prvUnlockQueue+0xe4>)
   196b6:	4798      	blx	r3
   196b8:	230f      	movs	r3, #15
   196ba:	18fb      	adds	r3, r7, r3
   196bc:	781b      	ldrb	r3, [r3, #0]
   196be:	3b01      	subs	r3, #1
   196c0:	b2da      	uxtb	r2, r3
   196c2:	230f      	movs	r3, #15
   196c4:	18fb      	adds	r3, r7, r3
   196c6:	701a      	strb	r2, [r3, #0]
   196c8:	230f      	movs	r3, #15
   196ca:	18fb      	adds	r3, r7, r3
   196cc:	781b      	ldrb	r3, [r3, #0]
   196ce:	b25b      	sxtb	r3, r3
   196d0:	2b00      	cmp	r3, #0
   196d2:	dcd6      	bgt.n	19682 <prvUnlockQueue+0x1a>
   196d4:	e000      	b.n	196d8 <prvUnlockQueue+0x70>
   196d6:	46c0      	nop			; (mov r8, r8)
   196d8:	687b      	ldr	r3, [r7, #4]
   196da:	2245      	movs	r2, #69	; 0x45
   196dc:	21ff      	movs	r1, #255	; 0xff
   196de:	5499      	strb	r1, [r3, r2]
   196e0:	4b1c      	ldr	r3, [pc, #112]	; (19754 <prvUnlockQueue+0xec>)
   196e2:	4798      	blx	r3
   196e4:	4b17      	ldr	r3, [pc, #92]	; (19744 <prvUnlockQueue+0xdc>)
   196e6:	4798      	blx	r3
   196e8:	230e      	movs	r3, #14
   196ea:	18fb      	adds	r3, r7, r3
   196ec:	687a      	ldr	r2, [r7, #4]
   196ee:	2144      	movs	r1, #68	; 0x44
   196f0:	5c52      	ldrb	r2, [r2, r1]
   196f2:	701a      	strb	r2, [r3, #0]
   196f4:	e014      	b.n	19720 <prvUnlockQueue+0xb8>
   196f6:	687b      	ldr	r3, [r7, #4]
   196f8:	691b      	ldr	r3, [r3, #16]
   196fa:	2b00      	cmp	r3, #0
   196fc:	d017      	beq.n	1972e <prvUnlockQueue+0xc6>
   196fe:	687b      	ldr	r3, [r7, #4]
   19700:	3310      	adds	r3, #16
   19702:	0018      	movs	r0, r3
   19704:	4b12      	ldr	r3, [pc, #72]	; (19750 <prvUnlockQueue+0xe8>)
   19706:	4798      	blx	r3
   19708:	1e03      	subs	r3, r0, #0
   1970a:	d001      	beq.n	19710 <prvUnlockQueue+0xa8>
   1970c:	4b0f      	ldr	r3, [pc, #60]	; (1974c <prvUnlockQueue+0xe4>)
   1970e:	4798      	blx	r3
   19710:	230e      	movs	r3, #14
   19712:	18fb      	adds	r3, r7, r3
   19714:	781b      	ldrb	r3, [r3, #0]
   19716:	3b01      	subs	r3, #1
   19718:	b2da      	uxtb	r2, r3
   1971a:	230e      	movs	r3, #14
   1971c:	18fb      	adds	r3, r7, r3
   1971e:	701a      	strb	r2, [r3, #0]
   19720:	230e      	movs	r3, #14
   19722:	18fb      	adds	r3, r7, r3
   19724:	781b      	ldrb	r3, [r3, #0]
   19726:	b25b      	sxtb	r3, r3
   19728:	2b00      	cmp	r3, #0
   1972a:	dce4      	bgt.n	196f6 <prvUnlockQueue+0x8e>
   1972c:	e000      	b.n	19730 <prvUnlockQueue+0xc8>
   1972e:	46c0      	nop			; (mov r8, r8)
   19730:	687b      	ldr	r3, [r7, #4]
   19732:	2244      	movs	r2, #68	; 0x44
   19734:	21ff      	movs	r1, #255	; 0xff
   19736:	5499      	strb	r1, [r3, r2]
   19738:	4b06      	ldr	r3, [pc, #24]	; (19754 <prvUnlockQueue+0xec>)
   1973a:	4798      	blx	r3
   1973c:	46c0      	nop			; (mov r8, r8)
   1973e:	46bd      	mov	sp, r7
   19740:	b004      	add	sp, #16
   19742:	bd80      	pop	{r7, pc}
   19744:	00017d69 	.word	0x00017d69
   19748:	0001983d 	.word	0x0001983d
   1974c:	0001a811 	.word	0x0001a811
   19750:	0001a5fd 	.word	0x0001a5fd
   19754:	00017d8d 	.word	0x00017d8d

00019758 <prvIsQueueEmpty>:
   19758:	b580      	push	{r7, lr}
   1975a:	b084      	sub	sp, #16
   1975c:	af00      	add	r7, sp, #0
   1975e:	6078      	str	r0, [r7, #4]
   19760:	4b08      	ldr	r3, [pc, #32]	; (19784 <prvIsQueueEmpty+0x2c>)
   19762:	4798      	blx	r3
   19764:	687b      	ldr	r3, [r7, #4]
   19766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19768:	2b00      	cmp	r3, #0
   1976a:	d102      	bne.n	19772 <prvIsQueueEmpty+0x1a>
   1976c:	2301      	movs	r3, #1
   1976e:	60fb      	str	r3, [r7, #12]
   19770:	e001      	b.n	19776 <prvIsQueueEmpty+0x1e>
   19772:	2300      	movs	r3, #0
   19774:	60fb      	str	r3, [r7, #12]
   19776:	4b04      	ldr	r3, [pc, #16]	; (19788 <prvIsQueueEmpty+0x30>)
   19778:	4798      	blx	r3
   1977a:	68fb      	ldr	r3, [r7, #12]
   1977c:	0018      	movs	r0, r3
   1977e:	46bd      	mov	sp, r7
   19780:	b004      	add	sp, #16
   19782:	bd80      	pop	{r7, pc}
   19784:	00017d69 	.word	0x00017d69
   19788:	00017d8d 	.word	0x00017d8d

0001978c <prvIsQueueFull>:
   1978c:	b580      	push	{r7, lr}
   1978e:	b084      	sub	sp, #16
   19790:	af00      	add	r7, sp, #0
   19792:	6078      	str	r0, [r7, #4]
   19794:	4b09      	ldr	r3, [pc, #36]	; (197bc <prvIsQueueFull+0x30>)
   19796:	4798      	blx	r3
   19798:	687b      	ldr	r3, [r7, #4]
   1979a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1979c:	687b      	ldr	r3, [r7, #4]
   1979e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   197a0:	429a      	cmp	r2, r3
   197a2:	d102      	bne.n	197aa <prvIsQueueFull+0x1e>
   197a4:	2301      	movs	r3, #1
   197a6:	60fb      	str	r3, [r7, #12]
   197a8:	e001      	b.n	197ae <prvIsQueueFull+0x22>
   197aa:	2300      	movs	r3, #0
   197ac:	60fb      	str	r3, [r7, #12]
   197ae:	4b04      	ldr	r3, [pc, #16]	; (197c0 <prvIsQueueFull+0x34>)
   197b0:	4798      	blx	r3
   197b2:	68fb      	ldr	r3, [r7, #12]
   197b4:	0018      	movs	r0, r3
   197b6:	46bd      	mov	sp, r7
   197b8:	b004      	add	sp, #16
   197ba:	bd80      	pop	{r7, pc}
   197bc:	00017d69 	.word	0x00017d69
   197c0:	00017d8d 	.word	0x00017d8d

000197c4 <vQueueWaitForMessageRestricted>:
   197c4:	b580      	push	{r7, lr}
   197c6:	b086      	sub	sp, #24
   197c8:	af00      	add	r7, sp, #0
   197ca:	60f8      	str	r0, [r7, #12]
   197cc:	60b9      	str	r1, [r7, #8]
   197ce:	607a      	str	r2, [r7, #4]
   197d0:	68fb      	ldr	r3, [r7, #12]
   197d2:	617b      	str	r3, [r7, #20]
   197d4:	4b15      	ldr	r3, [pc, #84]	; (1982c <vQueueWaitForMessageRestricted+0x68>)
   197d6:	4798      	blx	r3
   197d8:	697b      	ldr	r3, [r7, #20]
   197da:	2244      	movs	r2, #68	; 0x44
   197dc:	5c9b      	ldrb	r3, [r3, r2]
   197de:	b25b      	sxtb	r3, r3
   197e0:	3301      	adds	r3, #1
   197e2:	d103      	bne.n	197ec <vQueueWaitForMessageRestricted+0x28>
   197e4:	697b      	ldr	r3, [r7, #20]
   197e6:	2244      	movs	r2, #68	; 0x44
   197e8:	2100      	movs	r1, #0
   197ea:	5499      	strb	r1, [r3, r2]
   197ec:	697b      	ldr	r3, [r7, #20]
   197ee:	2245      	movs	r2, #69	; 0x45
   197f0:	5c9b      	ldrb	r3, [r3, r2]
   197f2:	b25b      	sxtb	r3, r3
   197f4:	3301      	adds	r3, #1
   197f6:	d103      	bne.n	19800 <vQueueWaitForMessageRestricted+0x3c>
   197f8:	697b      	ldr	r3, [r7, #20]
   197fa:	2245      	movs	r2, #69	; 0x45
   197fc:	2100      	movs	r1, #0
   197fe:	5499      	strb	r1, [r3, r2]
   19800:	4b0b      	ldr	r3, [pc, #44]	; (19830 <vQueueWaitForMessageRestricted+0x6c>)
   19802:	4798      	blx	r3
   19804:	697b      	ldr	r3, [r7, #20]
   19806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19808:	2b00      	cmp	r3, #0
   1980a:	d106      	bne.n	1981a <vQueueWaitForMessageRestricted+0x56>
   1980c:	697b      	ldr	r3, [r7, #20]
   1980e:	3324      	adds	r3, #36	; 0x24
   19810:	687a      	ldr	r2, [r7, #4]
   19812:	68b9      	ldr	r1, [r7, #8]
   19814:	0018      	movs	r0, r3
   19816:	4b07      	ldr	r3, [pc, #28]	; (19834 <vQueueWaitForMessageRestricted+0x70>)
   19818:	4798      	blx	r3
   1981a:	697b      	ldr	r3, [r7, #20]
   1981c:	0018      	movs	r0, r3
   1981e:	4b06      	ldr	r3, [pc, #24]	; (19838 <vQueueWaitForMessageRestricted+0x74>)
   19820:	4798      	blx	r3
   19822:	46c0      	nop			; (mov r8, r8)
   19824:	46bd      	mov	sp, r7
   19826:	b006      	add	sp, #24
   19828:	bd80      	pop	{r7, pc}
   1982a:	46c0      	nop			; (mov r8, r8)
   1982c:	00017d69 	.word	0x00017d69
   19830:	00017d8d 	.word	0x00017d8d
   19834:	0001a51d 	.word	0x0001a51d
   19838:	00019669 	.word	0x00019669

0001983c <prvNotifyQueueSetContainer>:
   1983c:	b5b0      	push	{r4, r5, r7, lr}
   1983e:	b086      	sub	sp, #24
   19840:	af00      	add	r7, sp, #0
   19842:	6078      	str	r0, [r7, #4]
   19844:	6039      	str	r1, [r7, #0]
   19846:	687b      	ldr	r3, [r7, #4]
   19848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1984a:	613b      	str	r3, [r7, #16]
   1984c:	2300      	movs	r3, #0
   1984e:	617b      	str	r3, [r7, #20]
   19850:	693b      	ldr	r3, [r7, #16]
   19852:	2b00      	cmp	r3, #0
   19854:	d101      	bne.n	1985a <prvNotifyQueueSetContainer+0x1e>
   19856:	b672      	cpsid	i
   19858:	e7fe      	b.n	19858 <prvNotifyQueueSetContainer+0x1c>
   1985a:	693b      	ldr	r3, [r7, #16]
   1985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1985e:	693b      	ldr	r3, [r7, #16]
   19860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19862:	429a      	cmp	r2, r3
   19864:	d301      	bcc.n	1986a <prvNotifyQueueSetContainer+0x2e>
   19866:	b672      	cpsid	i
   19868:	e7fe      	b.n	19868 <prvNotifyQueueSetContainer+0x2c>
   1986a:	693b      	ldr	r3, [r7, #16]
   1986c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1986e:	693b      	ldr	r3, [r7, #16]
   19870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19872:	429a      	cmp	r2, r3
   19874:	d300      	bcc.n	19878 <prvNotifyQueueSetContainer+0x3c>
   19876:	e08b      	b.n	19990 <prvNotifyQueueSetContainer+0x154>
   19878:	230f      	movs	r3, #15
   1987a:	18fb      	adds	r3, r7, r3
   1987c:	693a      	ldr	r2, [r7, #16]
   1987e:	2145      	movs	r1, #69	; 0x45
   19880:	5c52      	ldrb	r2, [r2, r1]
   19882:	701a      	strb	r2, [r3, #0]
   19884:	4b45      	ldr	r3, [pc, #276]	; (1999c <prvNotifyQueueSetContainer+0x160>)
   19886:	4798      	blx	r3
   19888:	0003      	movs	r3, r0
   1988a:	0018      	movs	r0, r3
   1988c:	4b44      	ldr	r3, [pc, #272]	; (199a0 <prvNotifyQueueSetContainer+0x164>)
   1988e:	4798      	blx	r3
   19890:	0003      	movs	r3, r0
   19892:	001a      	movs	r2, r3
   19894:	4b43      	ldr	r3, [pc, #268]	; (199a4 <prvNotifyQueueSetContainer+0x168>)
   19896:	881b      	ldrh	r3, [r3, #0]
   19898:	4013      	ands	r3, r2
   1989a:	b29b      	uxth	r3, r3
   1989c:	2b00      	cmp	r3, #0
   1989e:	d02e      	beq.n	198fe <prvNotifyQueueSetContainer+0xc2>
   198a0:	693b      	ldr	r3, [r7, #16]
   198a2:	0018      	movs	r0, r3
   198a4:	4b40      	ldr	r3, [pc, #256]	; (199a8 <prvNotifyQueueSetContainer+0x16c>)
   198a6:	4798      	blx	r3
   198a8:	0003      	movs	r3, r0
   198aa:	001a      	movs	r2, r3
   198ac:	4b3d      	ldr	r3, [pc, #244]	; (199a4 <prvNotifyQueueSetContainer+0x168>)
   198ae:	881b      	ldrh	r3, [r3, #0]
   198b0:	4013      	ands	r3, r2
   198b2:	b29b      	uxth	r3, r3
   198b4:	2b00      	cmp	r3, #0
   198b6:	d022      	beq.n	198fe <prvNotifyQueueSetContainer+0xc2>
   198b8:	683b      	ldr	r3, [r7, #0]
   198ba:	2b00      	cmp	r3, #0
   198bc:	d10b      	bne.n	198d6 <prvNotifyQueueSetContainer+0x9a>
   198be:	693b      	ldr	r3, [r7, #16]
   198c0:	0018      	movs	r0, r3
   198c2:	4b3a      	ldr	r3, [pc, #232]	; (199ac <prvNotifyQueueSetContainer+0x170>)
   198c4:	4798      	blx	r3
   198c6:	0003      	movs	r3, r0
   198c8:	001a      	movs	r2, r3
   198ca:	4b39      	ldr	r3, [pc, #228]	; (199b0 <prvNotifyQueueSetContainer+0x174>)
   198cc:	5c9b      	ldrb	r3, [r3, r2]
   198ce:	3320      	adds	r3, #32
   198d0:	b2db      	uxtb	r3, r3
   198d2:	001d      	movs	r5, r3
   198d4:	e000      	b.n	198d8 <prvNotifyQueueSetContainer+0x9c>
   198d6:	2525      	movs	r5, #37	; 0x25
   198d8:	693b      	ldr	r3, [r7, #16]
   198da:	0018      	movs	r0, r3
   198dc:	4b33      	ldr	r3, [pc, #204]	; (199ac <prvNotifyQueueSetContainer+0x170>)
   198de:	4798      	blx	r3
   198e0:	0003      	movs	r3, r0
   198e2:	001a      	movs	r2, r3
   198e4:	4b32      	ldr	r3, [pc, #200]	; (199b0 <prvNotifyQueueSetContainer+0x174>)
   198e6:	5c9c      	ldrb	r4, [r3, r2]
   198e8:	693b      	ldr	r3, [r7, #16]
   198ea:	0018      	movs	r0, r3
   198ec:	4b31      	ldr	r3, [pc, #196]	; (199b4 <prvNotifyQueueSetContainer+0x178>)
   198ee:	4798      	blx	r3
   198f0:	0003      	movs	r3, r0
   198f2:	b2db      	uxtb	r3, r3
   198f4:	001a      	movs	r2, r3
   198f6:	0021      	movs	r1, r4
   198f8:	0028      	movs	r0, r5
   198fa:	4b2f      	ldr	r3, [pc, #188]	; (199b8 <prvNotifyQueueSetContainer+0x17c>)
   198fc:	4798      	blx	r3
   198fe:	693b      	ldr	r3, [r7, #16]
   19900:	0018      	movs	r0, r3
   19902:	4b2a      	ldr	r3, [pc, #168]	; (199ac <prvNotifyQueueSetContainer+0x170>)
   19904:	4798      	blx	r3
   19906:	0003      	movs	r3, r0
   19908:	001a      	movs	r2, r3
   1990a:	4b29      	ldr	r3, [pc, #164]	; (199b0 <prvNotifyQueueSetContainer+0x174>)
   1990c:	5c9c      	ldrb	r4, [r3, r2]
   1990e:	693b      	ldr	r3, [r7, #16]
   19910:	0018      	movs	r0, r3
   19912:	4b28      	ldr	r3, [pc, #160]	; (199b4 <prvNotifyQueueSetContainer+0x178>)
   19914:	4798      	blx	r3
   19916:	0003      	movs	r3, r0
   19918:	b2dd      	uxtb	r5, r3
   1991a:	693b      	ldr	r3, [r7, #16]
   1991c:	0018      	movs	r0, r3
   1991e:	4b23      	ldr	r3, [pc, #140]	; (199ac <prvNotifyQueueSetContainer+0x170>)
   19920:	4798      	blx	r3
   19922:	0003      	movs	r3, r0
   19924:	001a      	movs	r2, r3
   19926:	4b22      	ldr	r3, [pc, #136]	; (199b0 <prvNotifyQueueSetContainer+0x174>)
   19928:	5c9b      	ldrb	r3, [r3, r2]
   1992a:	2b02      	cmp	r3, #2
   1992c:	d005      	beq.n	1993a <prvNotifyQueueSetContainer+0xfe>
   1992e:	693b      	ldr	r3, [r7, #16]
   19930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19932:	b2db      	uxtb	r3, r3
   19934:	3301      	adds	r3, #1
   19936:	b2db      	uxtb	r3, r3
   19938:	e000      	b.n	1993c <prvNotifyQueueSetContainer+0x100>
   1993a:	2300      	movs	r3, #0
   1993c:	001a      	movs	r2, r3
   1993e:	0029      	movs	r1, r5
   19940:	0020      	movs	r0, r4
   19942:	4b1e      	ldr	r3, [pc, #120]	; (199bc <prvNotifyQueueSetContainer+0x180>)
   19944:	4798      	blx	r3
   19946:	683a      	ldr	r2, [r7, #0]
   19948:	1d39      	adds	r1, r7, #4
   1994a:	693b      	ldr	r3, [r7, #16]
   1994c:	0018      	movs	r0, r3
   1994e:	4b1c      	ldr	r3, [pc, #112]	; (199c0 <prvNotifyQueueSetContainer+0x184>)
   19950:	4798      	blx	r3
   19952:	0003      	movs	r3, r0
   19954:	617b      	str	r3, [r7, #20]
   19956:	230f      	movs	r3, #15
   19958:	18fb      	adds	r3, r7, r3
   1995a:	781b      	ldrb	r3, [r3, #0]
   1995c:	b25b      	sxtb	r3, r3
   1995e:	3301      	adds	r3, #1
   19960:	d10d      	bne.n	1997e <prvNotifyQueueSetContainer+0x142>
   19962:	693b      	ldr	r3, [r7, #16]
   19964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19966:	2b00      	cmp	r3, #0
   19968:	d012      	beq.n	19990 <prvNotifyQueueSetContainer+0x154>
   1996a:	693b      	ldr	r3, [r7, #16]
   1996c:	3324      	adds	r3, #36	; 0x24
   1996e:	0018      	movs	r0, r3
   19970:	4b14      	ldr	r3, [pc, #80]	; (199c4 <prvNotifyQueueSetContainer+0x188>)
   19972:	4798      	blx	r3
   19974:	1e03      	subs	r3, r0, #0
   19976:	d00b      	beq.n	19990 <prvNotifyQueueSetContainer+0x154>
   19978:	2301      	movs	r3, #1
   1997a:	617b      	str	r3, [r7, #20]
   1997c:	e008      	b.n	19990 <prvNotifyQueueSetContainer+0x154>
   1997e:	230f      	movs	r3, #15
   19980:	18fb      	adds	r3, r7, r3
   19982:	781b      	ldrb	r3, [r3, #0]
   19984:	3301      	adds	r3, #1
   19986:	b2db      	uxtb	r3, r3
   19988:	b259      	sxtb	r1, r3
   1998a:	693b      	ldr	r3, [r7, #16]
   1998c:	2245      	movs	r2, #69	; 0x45
   1998e:	5499      	strb	r1, [r3, r2]
   19990:	697b      	ldr	r3, [r7, #20]
   19992:	0018      	movs	r0, r3
   19994:	46bd      	mov	sp, r7
   19996:	b006      	add	sp, #24
   19998:	bdb0      	pop	{r4, r5, r7, pc}
   1999a:	46c0      	nop			; (mov r8, r8)
   1999c:	00016005 	.word	0x00016005
   199a0:	00015d69 	.word	0x00015d69
   199a4:	200000f0 	.word	0x200000f0
   199a8:	00015e29 	.word	0x00015e29
   199ac:	00015d29 	.word	0x00015d29
   199b0:	200000e4 	.word	0x200000e4
   199b4:	00015e09 	.word	0x00015e09
   199b8:	00016761 	.word	0x00016761
   199bc:	00016dbd 	.word	0x00016dbd
   199c0:	00019539 	.word	0x00019539
   199c4:	0001a5fd 	.word	0x0001a5fd

000199c8 <xTaskCreate>:
   199c8:	b590      	push	{r4, r7, lr}
   199ca:	b08d      	sub	sp, #52	; 0x34
   199cc:	af04      	add	r7, sp, #16
   199ce:	60f8      	str	r0, [r7, #12]
   199d0:	60b9      	str	r1, [r7, #8]
   199d2:	603b      	str	r3, [r7, #0]
   199d4:	1dbb      	adds	r3, r7, #6
   199d6:	801a      	strh	r2, [r3, #0]
   199d8:	1dbb      	adds	r3, r7, #6
   199da:	881b      	ldrh	r3, [r3, #0]
   199dc:	009b      	lsls	r3, r3, #2
   199de:	0018      	movs	r0, r3
   199e0:	4b1d      	ldr	r3, [pc, #116]	; (19a58 <xTaskCreate+0x90>)
   199e2:	4798      	blx	r3
   199e4:	0003      	movs	r3, r0
   199e6:	617b      	str	r3, [r7, #20]
   199e8:	697b      	ldr	r3, [r7, #20]
   199ea:	2b00      	cmp	r3, #0
   199ec:	d010      	beq.n	19a10 <xTaskCreate+0x48>
   199ee:	2054      	movs	r0, #84	; 0x54
   199f0:	4b19      	ldr	r3, [pc, #100]	; (19a58 <xTaskCreate+0x90>)
   199f2:	4798      	blx	r3
   199f4:	0003      	movs	r3, r0
   199f6:	61fb      	str	r3, [r7, #28]
   199f8:	69fb      	ldr	r3, [r7, #28]
   199fa:	2b00      	cmp	r3, #0
   199fc:	d003      	beq.n	19a06 <xTaskCreate+0x3e>
   199fe:	69fb      	ldr	r3, [r7, #28]
   19a00:	697a      	ldr	r2, [r7, #20]
   19a02:	631a      	str	r2, [r3, #48]	; 0x30
   19a04:	e006      	b.n	19a14 <xTaskCreate+0x4c>
   19a06:	697b      	ldr	r3, [r7, #20]
   19a08:	0018      	movs	r0, r3
   19a0a:	4b14      	ldr	r3, [pc, #80]	; (19a5c <xTaskCreate+0x94>)
   19a0c:	4798      	blx	r3
   19a0e:	e001      	b.n	19a14 <xTaskCreate+0x4c>
   19a10:	2300      	movs	r3, #0
   19a12:	61fb      	str	r3, [r7, #28]
   19a14:	69fb      	ldr	r3, [r7, #28]
   19a16:	2b00      	cmp	r3, #0
   19a18:	d016      	beq.n	19a48 <xTaskCreate+0x80>
   19a1a:	1dbb      	adds	r3, r7, #6
   19a1c:	881a      	ldrh	r2, [r3, #0]
   19a1e:	683c      	ldr	r4, [r7, #0]
   19a20:	68b9      	ldr	r1, [r7, #8]
   19a22:	68f8      	ldr	r0, [r7, #12]
   19a24:	2300      	movs	r3, #0
   19a26:	9303      	str	r3, [sp, #12]
   19a28:	69fb      	ldr	r3, [r7, #28]
   19a2a:	9302      	str	r3, [sp, #8]
   19a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19a2e:	9301      	str	r3, [sp, #4]
   19a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19a32:	9300      	str	r3, [sp, #0]
   19a34:	0023      	movs	r3, r4
   19a36:	4c0a      	ldr	r4, [pc, #40]	; (19a60 <xTaskCreate+0x98>)
   19a38:	47a0      	blx	r4
   19a3a:	69fb      	ldr	r3, [r7, #28]
   19a3c:	0018      	movs	r0, r3
   19a3e:	4b09      	ldr	r3, [pc, #36]	; (19a64 <xTaskCreate+0x9c>)
   19a40:	4798      	blx	r3
   19a42:	2301      	movs	r3, #1
   19a44:	61bb      	str	r3, [r7, #24]
   19a46:	e002      	b.n	19a4e <xTaskCreate+0x86>
   19a48:	2301      	movs	r3, #1
   19a4a:	425b      	negs	r3, r3
   19a4c:	61bb      	str	r3, [r7, #24]
   19a4e:	69bb      	ldr	r3, [r7, #24]
   19a50:	0018      	movs	r0, r3
   19a52:	46bd      	mov	sp, r7
   19a54:	b009      	add	sp, #36	; 0x24
   19a56:	bd90      	pop	{r4, r7, pc}
   19a58:	00017ea1 	.word	0x00017ea1
   19a5c:	00017f65 	.word	0x00017f65
   19a60:	00019a69 	.word	0x00019a69
   19a64:	00019b79 	.word	0x00019b79

00019a68 <prvInitialiseNewTask>:
   19a68:	b580      	push	{r7, lr}
   19a6a:	b086      	sub	sp, #24
   19a6c:	af00      	add	r7, sp, #0
   19a6e:	60f8      	str	r0, [r7, #12]
   19a70:	60b9      	str	r1, [r7, #8]
   19a72:	607a      	str	r2, [r7, #4]
   19a74:	603b      	str	r3, [r7, #0]
   19a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
   19a7a:	687b      	ldr	r3, [r7, #4]
   19a7c:	009b      	lsls	r3, r3, #2
   19a7e:	001a      	movs	r2, r3
   19a80:	21a5      	movs	r1, #165	; 0xa5
   19a82:	4b39      	ldr	r3, [pc, #228]	; (19b68 <prvInitialiseNewTask+0x100>)
   19a84:	4798      	blx	r3
   19a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a8a:	687b      	ldr	r3, [r7, #4]
   19a8c:	4937      	ldr	r1, [pc, #220]	; (19b6c <prvInitialiseNewTask+0x104>)
   19a8e:	468c      	mov	ip, r1
   19a90:	4463      	add	r3, ip
   19a92:	009b      	lsls	r3, r3, #2
   19a94:	18d3      	adds	r3, r2, r3
   19a96:	613b      	str	r3, [r7, #16]
   19a98:	693b      	ldr	r3, [r7, #16]
   19a9a:	2207      	movs	r2, #7
   19a9c:	4393      	bics	r3, r2
   19a9e:	613b      	str	r3, [r7, #16]
   19aa0:	693b      	ldr	r3, [r7, #16]
   19aa2:	2207      	movs	r2, #7
   19aa4:	4013      	ands	r3, r2
   19aa6:	d001      	beq.n	19aac <prvInitialiseNewTask+0x44>
   19aa8:	b672      	cpsid	i
   19aaa:	e7fe      	b.n	19aaa <prvInitialiseNewTask+0x42>
   19aac:	2300      	movs	r3, #0
   19aae:	617b      	str	r3, [r7, #20]
   19ab0:	e013      	b.n	19ada <prvInitialiseNewTask+0x72>
   19ab2:	68ba      	ldr	r2, [r7, #8]
   19ab4:	697b      	ldr	r3, [r7, #20]
   19ab6:	18d3      	adds	r3, r2, r3
   19ab8:	7818      	ldrb	r0, [r3, #0]
   19aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19abc:	2134      	movs	r1, #52	; 0x34
   19abe:	697b      	ldr	r3, [r7, #20]
   19ac0:	18d3      	adds	r3, r2, r3
   19ac2:	185b      	adds	r3, r3, r1
   19ac4:	1c02      	adds	r2, r0, #0
   19ac6:	701a      	strb	r2, [r3, #0]
   19ac8:	68ba      	ldr	r2, [r7, #8]
   19aca:	697b      	ldr	r3, [r7, #20]
   19acc:	18d3      	adds	r3, r2, r3
   19ace:	781b      	ldrb	r3, [r3, #0]
   19ad0:	2b00      	cmp	r3, #0
   19ad2:	d006      	beq.n	19ae2 <prvInitialiseNewTask+0x7a>
   19ad4:	697b      	ldr	r3, [r7, #20]
   19ad6:	3301      	adds	r3, #1
   19ad8:	617b      	str	r3, [r7, #20]
   19ada:	697b      	ldr	r3, [r7, #20]
   19adc:	2b07      	cmp	r3, #7
   19ade:	d9e8      	bls.n	19ab2 <prvInitialiseNewTask+0x4a>
   19ae0:	e000      	b.n	19ae4 <prvInitialiseNewTask+0x7c>
   19ae2:	46c0      	nop			; (mov r8, r8)
   19ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ae6:	223b      	movs	r2, #59	; 0x3b
   19ae8:	2100      	movs	r1, #0
   19aea:	5499      	strb	r1, [r3, r2]
   19aec:	6a3b      	ldr	r3, [r7, #32]
   19aee:	2b04      	cmp	r3, #4
   19af0:	d901      	bls.n	19af6 <prvInitialiseNewTask+0x8e>
   19af2:	2304      	movs	r3, #4
   19af4:	623b      	str	r3, [r7, #32]
   19af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19af8:	6a3a      	ldr	r2, [r7, #32]
   19afa:	62da      	str	r2, [r3, #44]	; 0x2c
   19afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19afe:	6a3a      	ldr	r2, [r7, #32]
   19b00:	645a      	str	r2, [r3, #68]	; 0x44
   19b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b04:	2200      	movs	r2, #0
   19b06:	649a      	str	r2, [r3, #72]	; 0x48
   19b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b0a:	3304      	adds	r3, #4
   19b0c:	0018      	movs	r0, r3
   19b0e:	4b18      	ldr	r3, [pc, #96]	; (19b70 <prvInitialiseNewTask+0x108>)
   19b10:	4798      	blx	r3
   19b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b14:	3318      	adds	r3, #24
   19b16:	0018      	movs	r0, r3
   19b18:	4b15      	ldr	r3, [pc, #84]	; (19b70 <prvInitialiseNewTask+0x108>)
   19b1a:	4798      	blx	r3
   19b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b20:	611a      	str	r2, [r3, #16]
   19b22:	6a3b      	ldr	r3, [r7, #32]
   19b24:	2205      	movs	r2, #5
   19b26:	1ad2      	subs	r2, r2, r3
   19b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b2a:	619a      	str	r2, [r3, #24]
   19b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b30:	625a      	str	r2, [r3, #36]	; 0x24
   19b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b34:	2200      	movs	r2, #0
   19b36:	64da      	str	r2, [r3, #76]	; 0x4c
   19b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b3a:	2250      	movs	r2, #80	; 0x50
   19b3c:	2100      	movs	r1, #0
   19b3e:	5499      	strb	r1, [r3, r2]
   19b40:	683a      	ldr	r2, [r7, #0]
   19b42:	68f9      	ldr	r1, [r7, #12]
   19b44:	693b      	ldr	r3, [r7, #16]
   19b46:	0018      	movs	r0, r3
   19b48:	4b0a      	ldr	r3, [pc, #40]	; (19b74 <prvInitialiseNewTask+0x10c>)
   19b4a:	4798      	blx	r3
   19b4c:	0002      	movs	r2, r0
   19b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b50:	601a      	str	r2, [r3, #0]
   19b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b54:	2b00      	cmp	r3, #0
   19b56:	d002      	beq.n	19b5e <prvInitialiseNewTask+0xf6>
   19b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b5c:	601a      	str	r2, [r3, #0]
   19b5e:	46c0      	nop			; (mov r8, r8)
   19b60:	46bd      	mov	sp, r7
   19b62:	b006      	add	sp, #24
   19b64:	bd80      	pop	{r7, pc}
   19b66:	46c0      	nop			; (mov r8, r8)
   19b68:	00032203 	.word	0x00032203
   19b6c:	3fffffff 	.word	0x3fffffff
   19b70:	00017b1d 	.word	0x00017b1d
   19b74:	00017c35 	.word	0x00017c35

00019b78 <prvAddNewTaskToReadyList>:
   19b78:	b580      	push	{r7, lr}
   19b7a:	b082      	sub	sp, #8
   19b7c:	af00      	add	r7, sp, #0
   19b7e:	6078      	str	r0, [r7, #4]
   19b80:	4b60      	ldr	r3, [pc, #384]	; (19d04 <prvAddNewTaskToReadyList+0x18c>)
   19b82:	4798      	blx	r3
   19b84:	4b60      	ldr	r3, [pc, #384]	; (19d08 <prvAddNewTaskToReadyList+0x190>)
   19b86:	681b      	ldr	r3, [r3, #0]
   19b88:	1c5a      	adds	r2, r3, #1
   19b8a:	4b5f      	ldr	r3, [pc, #380]	; (19d08 <prvAddNewTaskToReadyList+0x190>)
   19b8c:	601a      	str	r2, [r3, #0]
   19b8e:	4b5f      	ldr	r3, [pc, #380]	; (19d0c <prvAddNewTaskToReadyList+0x194>)
   19b90:	681b      	ldr	r3, [r3, #0]
   19b92:	2b00      	cmp	r3, #0
   19b94:	d109      	bne.n	19baa <prvAddNewTaskToReadyList+0x32>
   19b96:	4b5d      	ldr	r3, [pc, #372]	; (19d0c <prvAddNewTaskToReadyList+0x194>)
   19b98:	687a      	ldr	r2, [r7, #4]
   19b9a:	601a      	str	r2, [r3, #0]
   19b9c:	4b5a      	ldr	r3, [pc, #360]	; (19d08 <prvAddNewTaskToReadyList+0x190>)
   19b9e:	681b      	ldr	r3, [r3, #0]
   19ba0:	2b01      	cmp	r3, #1
   19ba2:	d110      	bne.n	19bc6 <prvAddNewTaskToReadyList+0x4e>
   19ba4:	4b5a      	ldr	r3, [pc, #360]	; (19d10 <prvAddNewTaskToReadyList+0x198>)
   19ba6:	4798      	blx	r3
   19ba8:	e00d      	b.n	19bc6 <prvAddNewTaskToReadyList+0x4e>
   19baa:	4b5a      	ldr	r3, [pc, #360]	; (19d14 <prvAddNewTaskToReadyList+0x19c>)
   19bac:	681b      	ldr	r3, [r3, #0]
   19bae:	2b00      	cmp	r3, #0
   19bb0:	d109      	bne.n	19bc6 <prvAddNewTaskToReadyList+0x4e>
   19bb2:	4b56      	ldr	r3, [pc, #344]	; (19d0c <prvAddNewTaskToReadyList+0x194>)
   19bb4:	681b      	ldr	r3, [r3, #0]
   19bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19bb8:	687b      	ldr	r3, [r7, #4]
   19bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19bbc:	429a      	cmp	r2, r3
   19bbe:	d802      	bhi.n	19bc6 <prvAddNewTaskToReadyList+0x4e>
   19bc0:	4b52      	ldr	r3, [pc, #328]	; (19d0c <prvAddNewTaskToReadyList+0x194>)
   19bc2:	687a      	ldr	r2, [r7, #4]
   19bc4:	601a      	str	r2, [r3, #0]
   19bc6:	4b54      	ldr	r3, [pc, #336]	; (19d18 <prvAddNewTaskToReadyList+0x1a0>)
   19bc8:	681b      	ldr	r3, [r3, #0]
   19bca:	1c5a      	adds	r2, r3, #1
   19bcc:	4b52      	ldr	r3, [pc, #328]	; (19d18 <prvAddNewTaskToReadyList+0x1a0>)
   19bce:	601a      	str	r2, [r3, #0]
   19bd0:	4b51      	ldr	r3, [pc, #324]	; (19d18 <prvAddNewTaskToReadyList+0x1a0>)
   19bd2:	681a      	ldr	r2, [r3, #0]
   19bd4:	687b      	ldr	r3, [r7, #4]
   19bd6:	63da      	str	r2, [r3, #60]	; 0x3c
   19bd8:	687b      	ldr	r3, [r7, #4]
   19bda:	2b00      	cmp	r3, #0
   19bdc:	d052      	beq.n	19c84 <prvAddNewTaskToReadyList+0x10c>
   19bde:	2003      	movs	r0, #3
   19be0:	4b4e      	ldr	r3, [pc, #312]	; (19d1c <prvAddNewTaskToReadyList+0x1a4>)
   19be2:	4798      	blx	r3
   19be4:	0003      	movs	r3, r0
   19be6:	b29a      	uxth	r2, r3
   19be8:	687b      	ldr	r3, [r7, #4]
   19bea:	0011      	movs	r1, r2
   19bec:	0018      	movs	r0, r3
   19bee:	4b4c      	ldr	r3, [pc, #304]	; (19d20 <prvAddNewTaskToReadyList+0x1a8>)
   19bf0:	4798      	blx	r3
   19bf2:	4b4c      	ldr	r3, [pc, #304]	; (19d24 <prvAddNewTaskToReadyList+0x1ac>)
   19bf4:	881a      	ldrh	r2, [r3, #0]
   19bf6:	687b      	ldr	r3, [r7, #4]
   19bf8:	0011      	movs	r1, r2
   19bfa:	0018      	movs	r0, r3
   19bfc:	4b4a      	ldr	r3, [pc, #296]	; (19d28 <prvAddNewTaskToReadyList+0x1b0>)
   19bfe:	4798      	blx	r3
   19c00:	687b      	ldr	r3, [r7, #4]
   19c02:	0018      	movs	r0, r3
   19c04:	4b49      	ldr	r3, [pc, #292]	; (19d2c <prvAddNewTaskToReadyList+0x1b4>)
   19c06:	4798      	blx	r3
   19c08:	0003      	movs	r3, r0
   19c0a:	b2d9      	uxtb	r1, r3
   19c0c:	687b      	ldr	r3, [r7, #4]
   19c0e:	3334      	adds	r3, #52	; 0x34
   19c10:	001a      	movs	r2, r3
   19c12:	2003      	movs	r0, #3
   19c14:	4b46      	ldr	r3, [pc, #280]	; (19d30 <prvAddNewTaskToReadyList+0x1b8>)
   19c16:	4798      	blx	r3
   19c18:	687b      	ldr	r3, [r7, #4]
   19c1a:	0018      	movs	r0, r3
   19c1c:	4b43      	ldr	r3, [pc, #268]	; (19d2c <prvAddNewTaskToReadyList+0x1b4>)
   19c1e:	4798      	blx	r3
   19c20:	0003      	movs	r3, r0
   19c22:	b2d9      	uxtb	r1, r3
   19c24:	687b      	ldr	r3, [r7, #4]
   19c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19c28:	b2db      	uxtb	r3, r3
   19c2a:	001a      	movs	r2, r3
   19c2c:	2003      	movs	r0, #3
   19c2e:	4b41      	ldr	r3, [pc, #260]	; (19d34 <prvAddNewTaskToReadyList+0x1bc>)
   19c30:	4798      	blx	r3
   19c32:	4b41      	ldr	r3, [pc, #260]	; (19d38 <prvAddNewTaskToReadyList+0x1c0>)
   19c34:	4798      	blx	r3
   19c36:	0003      	movs	r3, r0
   19c38:	0018      	movs	r0, r3
   19c3a:	4b40      	ldr	r3, [pc, #256]	; (19d3c <prvAddNewTaskToReadyList+0x1c4>)
   19c3c:	4798      	blx	r3
   19c3e:	0003      	movs	r3, r0
   19c40:	001a      	movs	r2, r3
   19c42:	4b3f      	ldr	r3, [pc, #252]	; (19d40 <prvAddNewTaskToReadyList+0x1c8>)
   19c44:	881b      	ldrh	r3, [r3, #0]
   19c46:	4013      	ands	r3, r2
   19c48:	b29b      	uxth	r3, r3
   19c4a:	2b00      	cmp	r3, #0
   19c4c:	d016      	beq.n	19c7c <prvAddNewTaskToReadyList+0x104>
   19c4e:	687b      	ldr	r3, [r7, #4]
   19c50:	0018      	movs	r0, r3
   19c52:	4b3a      	ldr	r3, [pc, #232]	; (19d3c <prvAddNewTaskToReadyList+0x1c4>)
   19c54:	4798      	blx	r3
   19c56:	0003      	movs	r3, r0
   19c58:	001a      	movs	r2, r3
   19c5a:	4b39      	ldr	r3, [pc, #228]	; (19d40 <prvAddNewTaskToReadyList+0x1c8>)
   19c5c:	881b      	ldrh	r3, [r3, #0]
   19c5e:	4013      	ands	r3, r2
   19c60:	b29b      	uxth	r3, r3
   19c62:	2b00      	cmp	r3, #0
   19c64:	d00a      	beq.n	19c7c <prvAddNewTaskToReadyList+0x104>
   19c66:	687b      	ldr	r3, [r7, #4]
   19c68:	0018      	movs	r0, r3
   19c6a:	4b30      	ldr	r3, [pc, #192]	; (19d2c <prvAddNewTaskToReadyList+0x1b4>)
   19c6c:	4798      	blx	r3
   19c6e:	0003      	movs	r3, r0
   19c70:	b2db      	uxtb	r3, r3
   19c72:	001a      	movs	r2, r3
   19c74:	2103      	movs	r1, #3
   19c76:	201b      	movs	r0, #27
   19c78:	4b32      	ldr	r3, [pc, #200]	; (19d44 <prvAddNewTaskToReadyList+0x1cc>)
   19c7a:	4798      	blx	r3
   19c7c:	687b      	ldr	r3, [r7, #4]
   19c7e:	0018      	movs	r0, r3
   19c80:	4b31      	ldr	r3, [pc, #196]	; (19d48 <prvAddNewTaskToReadyList+0x1d0>)
   19c82:	4798      	blx	r3
   19c84:	687b      	ldr	r3, [r7, #4]
   19c86:	0018      	movs	r0, r3
   19c88:	4b2c      	ldr	r3, [pc, #176]	; (19d3c <prvAddNewTaskToReadyList+0x1c4>)
   19c8a:	4798      	blx	r3
   19c8c:	0003      	movs	r3, r0
   19c8e:	001a      	movs	r2, r3
   19c90:	4b2b      	ldr	r3, [pc, #172]	; (19d40 <prvAddNewTaskToReadyList+0x1c8>)
   19c92:	881b      	ldrh	r3, [r3, #0]
   19c94:	4013      	ands	r3, r2
   19c96:	b29b      	uxth	r3, r3
   19c98:	2b00      	cmp	r3, #0
   19c9a:	d008      	beq.n	19cae <prvAddNewTaskToReadyList+0x136>
   19c9c:	687b      	ldr	r3, [r7, #4]
   19c9e:	0018      	movs	r0, r3
   19ca0:	4b22      	ldr	r3, [pc, #136]	; (19d2c <prvAddNewTaskToReadyList+0x1b4>)
   19ca2:	4798      	blx	r3
   19ca4:	0003      	movs	r3, r0
   19ca6:	b2db      	uxtb	r3, r3
   19ca8:	0018      	movs	r0, r3
   19caa:	4b28      	ldr	r3, [pc, #160]	; (19d4c <prvAddNewTaskToReadyList+0x1d4>)
   19cac:	4798      	blx	r3
   19cae:	687b      	ldr	r3, [r7, #4]
   19cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cb2:	4b27      	ldr	r3, [pc, #156]	; (19d50 <prvAddNewTaskToReadyList+0x1d8>)
   19cb4:	681b      	ldr	r3, [r3, #0]
   19cb6:	429a      	cmp	r2, r3
   19cb8:	d903      	bls.n	19cc2 <prvAddNewTaskToReadyList+0x14a>
   19cba:	687b      	ldr	r3, [r7, #4]
   19cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cbe:	4b24      	ldr	r3, [pc, #144]	; (19d50 <prvAddNewTaskToReadyList+0x1d8>)
   19cc0:	601a      	str	r2, [r3, #0]
   19cc2:	687b      	ldr	r3, [r7, #4]
   19cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cc6:	0013      	movs	r3, r2
   19cc8:	009b      	lsls	r3, r3, #2
   19cca:	189b      	adds	r3, r3, r2
   19ccc:	009b      	lsls	r3, r3, #2
   19cce:	4a21      	ldr	r2, [pc, #132]	; (19d54 <prvAddNewTaskToReadyList+0x1dc>)
   19cd0:	189a      	adds	r2, r3, r2
   19cd2:	687b      	ldr	r3, [r7, #4]
   19cd4:	3304      	adds	r3, #4
   19cd6:	0019      	movs	r1, r3
   19cd8:	0010      	movs	r0, r2
   19cda:	4b1f      	ldr	r3, [pc, #124]	; (19d58 <prvAddNewTaskToReadyList+0x1e0>)
   19cdc:	4798      	blx	r3
   19cde:	4b1f      	ldr	r3, [pc, #124]	; (19d5c <prvAddNewTaskToReadyList+0x1e4>)
   19ce0:	4798      	blx	r3
   19ce2:	4b0c      	ldr	r3, [pc, #48]	; (19d14 <prvAddNewTaskToReadyList+0x19c>)
   19ce4:	681b      	ldr	r3, [r3, #0]
   19ce6:	2b00      	cmp	r3, #0
   19ce8:	d008      	beq.n	19cfc <prvAddNewTaskToReadyList+0x184>
   19cea:	4b08      	ldr	r3, [pc, #32]	; (19d0c <prvAddNewTaskToReadyList+0x194>)
   19cec:	681b      	ldr	r3, [r3, #0]
   19cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cf0:	687b      	ldr	r3, [r7, #4]
   19cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19cf4:	429a      	cmp	r2, r3
   19cf6:	d201      	bcs.n	19cfc <prvAddNewTaskToReadyList+0x184>
   19cf8:	4b19      	ldr	r3, [pc, #100]	; (19d60 <prvAddNewTaskToReadyList+0x1e8>)
   19cfa:	4798      	blx	r3
   19cfc:	46c0      	nop			; (mov r8, r8)
   19cfe:	46bd      	mov	sp, r7
   19d00:	b002      	add	sp, #8
   19d02:	bd80      	pop	{r7, pc}
   19d04:	00017d69 	.word	0x00017d69
   19d08:	20003c0c 	.word	0x20003c0c
   19d0c:	20003b34 	.word	0x20003b34
   19d10:	0001a899 	.word	0x0001a899
   19d14:	20003c18 	.word	0x20003c18
   19d18:	20003c28 	.word	0x20003c28
   19d1c:	000172e9 	.word	0x000172e9
   19d20:	00015d8d 	.word	0x00015d8d
   19d24:	200000f2 	.word	0x200000f2
   19d28:	00015dc9 	.word	0x00015dc9
   19d2c:	00015d49 	.word	0x00015d49
   19d30:	00017519 	.word	0x00017519
   19d34:	00016c7d 	.word	0x00016c7d
   19d38:	00016005 	.word	0x00016005
   19d3c:	00015d69 	.word	0x00015d69
   19d40:	200000f0 	.word	0x200000f0
   19d44:	00016761 	.word	0x00016761
   19d48:	00015ec9 	.word	0x00015ec9
   19d4c:	00016519 	.word	0x00016519
   19d50:	20003c14 	.word	0x20003c14
   19d54:	20003b38 	.word	0x20003b38
   19d58:	00017b33 	.word	0x00017b33
   19d5c:	00017d8d 	.word	0x00017d8d
   19d60:	00017d51 	.word	0x00017d51

00019d64 <vTaskDelay>:
   19d64:	b580      	push	{r7, lr}
   19d66:	b084      	sub	sp, #16
   19d68:	af00      	add	r7, sp, #0
   19d6a:	6078      	str	r0, [r7, #4]
   19d6c:	2300      	movs	r3, #0
   19d6e:	60fb      	str	r3, [r7, #12]
   19d70:	687b      	ldr	r3, [r7, #4]
   19d72:	2b00      	cmp	r3, #0
   19d74:	d045      	beq.n	19e02 <vTaskDelay+0x9e>
   19d76:	4b27      	ldr	r3, [pc, #156]	; (19e14 <vTaskDelay+0xb0>)
   19d78:	681b      	ldr	r3, [r3, #0]
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d001      	beq.n	19d82 <vTaskDelay+0x1e>
   19d7e:	b672      	cpsid	i
   19d80:	e7fe      	b.n	19d80 <vTaskDelay+0x1c>
   19d82:	4b25      	ldr	r3, [pc, #148]	; (19e18 <vTaskDelay+0xb4>)
   19d84:	4798      	blx	r3
   19d86:	4b25      	ldr	r3, [pc, #148]	; (19e1c <vTaskDelay+0xb8>)
   19d88:	681b      	ldr	r3, [r3, #0]
   19d8a:	0018      	movs	r0, r3
   19d8c:	4b24      	ldr	r3, [pc, #144]	; (19e20 <vTaskDelay+0xbc>)
   19d8e:	4798      	blx	r3
   19d90:	0003      	movs	r3, r0
   19d92:	001a      	movs	r2, r3
   19d94:	4b23      	ldr	r3, [pc, #140]	; (19e24 <vTaskDelay+0xc0>)
   19d96:	881b      	ldrh	r3, [r3, #0]
   19d98:	4013      	ands	r3, r2
   19d9a:	b29b      	uxth	r3, r3
   19d9c:	2b00      	cmp	r3, #0
   19d9e:	d00e      	beq.n	19dbe <vTaskDelay+0x5a>
   19da0:	687b      	ldr	r3, [r7, #4]
   19da2:	0019      	movs	r1, r3
   19da4:	2089      	movs	r0, #137	; 0x89
   19da6:	4b20      	ldr	r3, [pc, #128]	; (19e28 <vTaskDelay+0xc4>)
   19da8:	4798      	blx	r3
   19daa:	4b1c      	ldr	r3, [pc, #112]	; (19e1c <vTaskDelay+0xb8>)
   19dac:	681b      	ldr	r3, [r3, #0]
   19dae:	0018      	movs	r0, r3
   19db0:	4b1e      	ldr	r3, [pc, #120]	; (19e2c <vTaskDelay+0xc8>)
   19db2:	4798      	blx	r3
   19db4:	0003      	movs	r3, r0
   19db6:	b2db      	uxtb	r3, r3
   19db8:	0018      	movs	r0, r3
   19dba:	4b1d      	ldr	r3, [pc, #116]	; (19e30 <vTaskDelay+0xcc>)
   19dbc:	4798      	blx	r3
   19dbe:	4b1d      	ldr	r3, [pc, #116]	; (19e34 <vTaskDelay+0xd0>)
   19dc0:	4798      	blx	r3
   19dc2:	0003      	movs	r3, r0
   19dc4:	0018      	movs	r0, r3
   19dc6:	4b16      	ldr	r3, [pc, #88]	; (19e20 <vTaskDelay+0xbc>)
   19dc8:	4798      	blx	r3
   19dca:	0003      	movs	r3, r0
   19dcc:	001a      	movs	r2, r3
   19dce:	4b15      	ldr	r3, [pc, #84]	; (19e24 <vTaskDelay+0xc0>)
   19dd0:	881b      	ldrh	r3, [r3, #0]
   19dd2:	4013      	ands	r3, r2
   19dd4:	b29b      	uxth	r3, r3
   19dd6:	2b00      	cmp	r3, #0
   19dd8:	d00a      	beq.n	19df0 <vTaskDelay+0x8c>
   19dda:	4b16      	ldr	r3, [pc, #88]	; (19e34 <vTaskDelay+0xd0>)
   19ddc:	4798      	blx	r3
   19dde:	0003      	movs	r3, r0
   19de0:	0018      	movs	r0, r3
   19de2:	4b12      	ldr	r3, [pc, #72]	; (19e2c <vTaskDelay+0xc8>)
   19de4:	4798      	blx	r3
   19de6:	0003      	movs	r3, r0
   19de8:	b2db      	uxtb	r3, r3
   19dea:	0018      	movs	r0, r3
   19dec:	4b10      	ldr	r3, [pc, #64]	; (19e30 <vTaskDelay+0xcc>)
   19dee:	4798      	blx	r3
   19df0:	687b      	ldr	r3, [r7, #4]
   19df2:	2100      	movs	r1, #0
   19df4:	0018      	movs	r0, r3
   19df6:	4b10      	ldr	r3, [pc, #64]	; (19e38 <vTaskDelay+0xd4>)
   19df8:	4798      	blx	r3
   19dfa:	4b10      	ldr	r3, [pc, #64]	; (19e3c <vTaskDelay+0xd8>)
   19dfc:	4798      	blx	r3
   19dfe:	0003      	movs	r3, r0
   19e00:	60fb      	str	r3, [r7, #12]
   19e02:	68fb      	ldr	r3, [r7, #12]
   19e04:	2b00      	cmp	r3, #0
   19e06:	d101      	bne.n	19e0c <vTaskDelay+0xa8>
   19e08:	4b0d      	ldr	r3, [pc, #52]	; (19e40 <vTaskDelay+0xdc>)
   19e0a:	4798      	blx	r3
   19e0c:	46c0      	nop			; (mov r8, r8)
   19e0e:	46bd      	mov	sp, r7
   19e10:	b004      	add	sp, #16
   19e12:	bd80      	pop	{r7, pc}
   19e14:	20003c34 	.word	0x20003c34
   19e18:	0001a025 	.word	0x0001a025
   19e1c:	20003b34 	.word	0x20003b34
   19e20:	00015d69 	.word	0x00015d69
   19e24:	200000f0 	.word	0x200000f0
   19e28:	00016a69 	.word	0x00016a69
   19e2c:	00015d49 	.word	0x00015d49
   19e30:	00016ef9 	.word	0x00016ef9
   19e34:	00016005 	.word	0x00016005
   19e38:	0001af7d 	.word	0x0001af7d
   19e3c:	0001a03d 	.word	0x0001a03d
   19e40:	00017d51 	.word	0x00017d51

00019e44 <vTaskSuspend>:
   19e44:	b580      	push	{r7, lr}
   19e46:	b084      	sub	sp, #16
   19e48:	af00      	add	r7, sp, #0
   19e4a:	6078      	str	r0, [r7, #4]
   19e4c:	4b42      	ldr	r3, [pc, #264]	; (19f58 <vTaskSuspend+0x114>)
   19e4e:	4798      	blx	r3
   19e50:	687b      	ldr	r3, [r7, #4]
   19e52:	2b00      	cmp	r3, #0
   19e54:	d102      	bne.n	19e5c <vTaskSuspend+0x18>
   19e56:	4b41      	ldr	r3, [pc, #260]	; (19f5c <vTaskSuspend+0x118>)
   19e58:	681b      	ldr	r3, [r3, #0]
   19e5a:	e000      	b.n	19e5e <vTaskSuspend+0x1a>
   19e5c:	687b      	ldr	r3, [r7, #4]
   19e5e:	60fb      	str	r3, [r7, #12]
   19e60:	4b3f      	ldr	r3, [pc, #252]	; (19f60 <vTaskSuspend+0x11c>)
   19e62:	4798      	blx	r3
   19e64:	0003      	movs	r3, r0
   19e66:	0018      	movs	r0, r3
   19e68:	4b3e      	ldr	r3, [pc, #248]	; (19f64 <vTaskSuspend+0x120>)
   19e6a:	4798      	blx	r3
   19e6c:	0003      	movs	r3, r0
   19e6e:	001a      	movs	r2, r3
   19e70:	4b3d      	ldr	r3, [pc, #244]	; (19f68 <vTaskSuspend+0x124>)
   19e72:	881b      	ldrh	r3, [r3, #0]
   19e74:	4013      	ands	r3, r2
   19e76:	b29b      	uxth	r3, r3
   19e78:	2b00      	cmp	r3, #0
   19e7a:	d016      	beq.n	19eaa <vTaskSuspend+0x66>
   19e7c:	68fb      	ldr	r3, [r7, #12]
   19e7e:	0018      	movs	r0, r3
   19e80:	4b38      	ldr	r3, [pc, #224]	; (19f64 <vTaskSuspend+0x120>)
   19e82:	4798      	blx	r3
   19e84:	0003      	movs	r3, r0
   19e86:	001a      	movs	r2, r3
   19e88:	4b37      	ldr	r3, [pc, #220]	; (19f68 <vTaskSuspend+0x124>)
   19e8a:	881b      	ldrh	r3, [r3, #0]
   19e8c:	4013      	ands	r3, r2
   19e8e:	b29b      	uxth	r3, r3
   19e90:	2b00      	cmp	r3, #0
   19e92:	d00a      	beq.n	19eaa <vTaskSuspend+0x66>
   19e94:	68fb      	ldr	r3, [r7, #12]
   19e96:	0018      	movs	r0, r3
   19e98:	4b34      	ldr	r3, [pc, #208]	; (19f6c <vTaskSuspend+0x128>)
   19e9a:	4798      	blx	r3
   19e9c:	0003      	movs	r3, r0
   19e9e:	b2db      	uxtb	r3, r3
   19ea0:	001a      	movs	r2, r3
   19ea2:	2103      	movs	r1, #3
   19ea4:	208a      	movs	r0, #138	; 0x8a
   19ea6:	4b32      	ldr	r3, [pc, #200]	; (19f70 <vTaskSuspend+0x12c>)
   19ea8:	4798      	blx	r3
   19eaa:	68fb      	ldr	r3, [r7, #12]
   19eac:	0018      	movs	r0, r3
   19eae:	4b2f      	ldr	r3, [pc, #188]	; (19f6c <vTaskSuspend+0x128>)
   19eb0:	4798      	blx	r3
   19eb2:	0003      	movs	r3, r0
   19eb4:	b2db      	uxtb	r3, r3
   19eb6:	0018      	movs	r0, r3
   19eb8:	4b2e      	ldr	r3, [pc, #184]	; (19f74 <vTaskSuspend+0x130>)
   19eba:	4798      	blx	r3
   19ebc:	68fb      	ldr	r3, [r7, #12]
   19ebe:	3304      	adds	r3, #4
   19ec0:	0018      	movs	r0, r3
   19ec2:	4b2d      	ldr	r3, [pc, #180]	; (19f78 <vTaskSuspend+0x134>)
   19ec4:	4798      	blx	r3
   19ec6:	68fb      	ldr	r3, [r7, #12]
   19ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d004      	beq.n	19ed8 <vTaskSuspend+0x94>
   19ece:	68fb      	ldr	r3, [r7, #12]
   19ed0:	3318      	adds	r3, #24
   19ed2:	0018      	movs	r0, r3
   19ed4:	4b28      	ldr	r3, [pc, #160]	; (19f78 <vTaskSuspend+0x134>)
   19ed6:	4798      	blx	r3
   19ed8:	68fb      	ldr	r3, [r7, #12]
   19eda:	1d1a      	adds	r2, r3, #4
   19edc:	4b27      	ldr	r3, [pc, #156]	; (19f7c <vTaskSuspend+0x138>)
   19ede:	0011      	movs	r1, r2
   19ee0:	0018      	movs	r0, r3
   19ee2:	4b27      	ldr	r3, [pc, #156]	; (19f80 <vTaskSuspend+0x13c>)
   19ee4:	4798      	blx	r3
   19ee6:	68fb      	ldr	r3, [r7, #12]
   19ee8:	2250      	movs	r2, #80	; 0x50
   19eea:	5c9b      	ldrb	r3, [r3, r2]
   19eec:	b2db      	uxtb	r3, r3
   19eee:	2b01      	cmp	r3, #1
   19ef0:	d103      	bne.n	19efa <vTaskSuspend+0xb6>
   19ef2:	68fb      	ldr	r3, [r7, #12]
   19ef4:	2250      	movs	r2, #80	; 0x50
   19ef6:	2100      	movs	r1, #0
   19ef8:	5499      	strb	r1, [r3, r2]
   19efa:	4b22      	ldr	r3, [pc, #136]	; (19f84 <vTaskSuspend+0x140>)
   19efc:	4798      	blx	r3
   19efe:	4b22      	ldr	r3, [pc, #136]	; (19f88 <vTaskSuspend+0x144>)
   19f00:	681b      	ldr	r3, [r3, #0]
   19f02:	2b00      	cmp	r3, #0
   19f04:	d005      	beq.n	19f12 <vTaskSuspend+0xce>
   19f06:	4b14      	ldr	r3, [pc, #80]	; (19f58 <vTaskSuspend+0x114>)
   19f08:	4798      	blx	r3
   19f0a:	4b20      	ldr	r3, [pc, #128]	; (19f8c <vTaskSuspend+0x148>)
   19f0c:	4798      	blx	r3
   19f0e:	4b1d      	ldr	r3, [pc, #116]	; (19f84 <vTaskSuspend+0x140>)
   19f10:	4798      	blx	r3
   19f12:	4b12      	ldr	r3, [pc, #72]	; (19f5c <vTaskSuspend+0x118>)
   19f14:	681b      	ldr	r3, [r3, #0]
   19f16:	68fa      	ldr	r2, [r7, #12]
   19f18:	429a      	cmp	r2, r3
   19f1a:	d118      	bne.n	19f4e <vTaskSuspend+0x10a>
   19f1c:	4b1a      	ldr	r3, [pc, #104]	; (19f88 <vTaskSuspend+0x144>)
   19f1e:	681b      	ldr	r3, [r3, #0]
   19f20:	2b00      	cmp	r3, #0
   19f22:	d008      	beq.n	19f36 <vTaskSuspend+0xf2>
   19f24:	4b1a      	ldr	r3, [pc, #104]	; (19f90 <vTaskSuspend+0x14c>)
   19f26:	681b      	ldr	r3, [r3, #0]
   19f28:	2b00      	cmp	r3, #0
   19f2a:	d001      	beq.n	19f30 <vTaskSuspend+0xec>
   19f2c:	b672      	cpsid	i
   19f2e:	e7fe      	b.n	19f2e <vTaskSuspend+0xea>
   19f30:	4b18      	ldr	r3, [pc, #96]	; (19f94 <vTaskSuspend+0x150>)
   19f32:	4798      	blx	r3
   19f34:	e00b      	b.n	19f4e <vTaskSuspend+0x10a>
   19f36:	4b11      	ldr	r3, [pc, #68]	; (19f7c <vTaskSuspend+0x138>)
   19f38:	681a      	ldr	r2, [r3, #0]
   19f3a:	4b17      	ldr	r3, [pc, #92]	; (19f98 <vTaskSuspend+0x154>)
   19f3c:	681b      	ldr	r3, [r3, #0]
   19f3e:	429a      	cmp	r2, r3
   19f40:	d103      	bne.n	19f4a <vTaskSuspend+0x106>
   19f42:	4b06      	ldr	r3, [pc, #24]	; (19f5c <vTaskSuspend+0x118>)
   19f44:	2200      	movs	r2, #0
   19f46:	601a      	str	r2, [r3, #0]
   19f48:	e001      	b.n	19f4e <vTaskSuspend+0x10a>
   19f4a:	4b14      	ldr	r3, [pc, #80]	; (19f9c <vTaskSuspend+0x158>)
   19f4c:	4798      	blx	r3
   19f4e:	46c0      	nop			; (mov r8, r8)
   19f50:	46bd      	mov	sp, r7
   19f52:	b004      	add	sp, #16
   19f54:	bd80      	pop	{r7, pc}
   19f56:	46c0      	nop			; (mov r8, r8)
   19f58:	00017d69 	.word	0x00017d69
   19f5c:	20003b34 	.word	0x20003b34
   19f60:	00016005 	.word	0x00016005
   19f64:	00015d69 	.word	0x00015d69
   19f68:	200000f0 	.word	0x200000f0
   19f6c:	00015d49 	.word	0x00015d49
   19f70:	00016761 	.word	0x00016761
   19f74:	00016ef9 	.word	0x00016ef9
   19f78:	00017be3 	.word	0x00017be3
   19f7c:	20003bf8 	.word	0x20003bf8
   19f80:	00017b33 	.word	0x00017b33
   19f84:	00017d8d 	.word	0x00017d8d
   19f88:	20003c18 	.word	0x20003c18
   19f8c:	0001aa29 	.word	0x0001aa29
   19f90:	20003c34 	.word	0x20003c34
   19f94:	00017d51 	.word	0x00017d51
   19f98:	20003c0c 	.word	0x20003c0c
   19f9c:	0001a3b9 	.word	0x0001a3b9

00019fa0 <vTaskStartScheduler>:
   19fa0:	b590      	push	{r4, r7, lr}
   19fa2:	b085      	sub	sp, #20
   19fa4:	af02      	add	r7, sp, #8
   19fa6:	4916      	ldr	r1, [pc, #88]	; (1a000 <vTaskStartScheduler+0x60>)
   19fa8:	4816      	ldr	r0, [pc, #88]	; (1a004 <vTaskStartScheduler+0x64>)
   19faa:	4b17      	ldr	r3, [pc, #92]	; (1a008 <vTaskStartScheduler+0x68>)
   19fac:	9301      	str	r3, [sp, #4]
   19fae:	2300      	movs	r3, #0
   19fb0:	9300      	str	r3, [sp, #0]
   19fb2:	2300      	movs	r3, #0
   19fb4:	2264      	movs	r2, #100	; 0x64
   19fb6:	4c15      	ldr	r4, [pc, #84]	; (1a00c <vTaskStartScheduler+0x6c>)
   19fb8:	47a0      	blx	r4
   19fba:	0003      	movs	r3, r0
   19fbc:	607b      	str	r3, [r7, #4]
   19fbe:	687b      	ldr	r3, [r7, #4]
   19fc0:	2b01      	cmp	r3, #1
   19fc2:	d103      	bne.n	19fcc <vTaskStartScheduler+0x2c>
   19fc4:	4b12      	ldr	r3, [pc, #72]	; (1a010 <vTaskStartScheduler+0x70>)
   19fc6:	4798      	blx	r3
   19fc8:	0003      	movs	r3, r0
   19fca:	607b      	str	r3, [r7, #4]
   19fcc:	687b      	ldr	r3, [r7, #4]
   19fce:	2b01      	cmp	r3, #1
   19fd0:	d10d      	bne.n	19fee <vTaskStartScheduler+0x4e>
   19fd2:	b672      	cpsid	i
   19fd4:	4b0f      	ldr	r3, [pc, #60]	; (1a014 <vTaskStartScheduler+0x74>)
   19fd6:	2201      	movs	r2, #1
   19fd8:	4252      	negs	r2, r2
   19fda:	601a      	str	r2, [r3, #0]
   19fdc:	4b0e      	ldr	r3, [pc, #56]	; (1a018 <vTaskStartScheduler+0x78>)
   19fde:	2201      	movs	r2, #1
   19fe0:	601a      	str	r2, [r3, #0]
   19fe2:	4b0e      	ldr	r3, [pc, #56]	; (1a01c <vTaskStartScheduler+0x7c>)
   19fe4:	2200      	movs	r2, #0
   19fe6:	601a      	str	r2, [r3, #0]
   19fe8:	4b0d      	ldr	r3, [pc, #52]	; (1a020 <vTaskStartScheduler+0x80>)
   19fea:	4798      	blx	r3
   19fec:	e004      	b.n	19ff8 <vTaskStartScheduler+0x58>
   19fee:	687b      	ldr	r3, [r7, #4]
   19ff0:	3301      	adds	r3, #1
   19ff2:	d101      	bne.n	19ff8 <vTaskStartScheduler+0x58>
   19ff4:	b672      	cpsid	i
   19ff6:	e7fe      	b.n	19ff6 <vTaskStartScheduler+0x56>
   19ff8:	46c0      	nop			; (mov r8, r8)
   19ffa:	46bd      	mov	sp, r7
   19ffc:	b003      	add	sp, #12
   19ffe:	bd90      	pop	{r4, r7, pc}
   1a000:	00035728 	.word	0x00035728
   1a004:	0001a871 	.word	0x0001a871
   1a008:	20003c30 	.word	0x20003c30
   1a00c:	000199c9 	.word	0x000199c9
   1a010:	0001b031 	.word	0x0001b031
   1a014:	20003c2c 	.word	0x20003c2c
   1a018:	20003c18 	.word	0x20003c18
   1a01c:	20003c10 	.word	0x20003c10
   1a020:	00017cf9 	.word	0x00017cf9

0001a024 <vTaskSuspendAll>:
   1a024:	b580      	push	{r7, lr}
   1a026:	af00      	add	r7, sp, #0
   1a028:	4b03      	ldr	r3, [pc, #12]	; (1a038 <vTaskSuspendAll+0x14>)
   1a02a:	681b      	ldr	r3, [r3, #0]
   1a02c:	1c5a      	adds	r2, r3, #1
   1a02e:	4b02      	ldr	r3, [pc, #8]	; (1a038 <vTaskSuspendAll+0x14>)
   1a030:	601a      	str	r2, [r3, #0]
   1a032:	46c0      	nop			; (mov r8, r8)
   1a034:	46bd      	mov	sp, r7
   1a036:	bd80      	pop	{r7, pc}
   1a038:	20003c34 	.word	0x20003c34

0001a03c <xTaskResumeAll>:
   1a03c:	b580      	push	{r7, lr}
   1a03e:	b084      	sub	sp, #16
   1a040:	af00      	add	r7, sp, #0
   1a042:	2300      	movs	r3, #0
   1a044:	60fb      	str	r3, [r7, #12]
   1a046:	2300      	movs	r3, #0
   1a048:	60bb      	str	r3, [r7, #8]
   1a04a:	4b45      	ldr	r3, [pc, #276]	; (1a160 <xTaskResumeAll+0x124>)
   1a04c:	681b      	ldr	r3, [r3, #0]
   1a04e:	2b00      	cmp	r3, #0
   1a050:	d101      	bne.n	1a056 <xTaskResumeAll+0x1a>
   1a052:	b672      	cpsid	i
   1a054:	e7fe      	b.n	1a054 <xTaskResumeAll+0x18>
   1a056:	4b43      	ldr	r3, [pc, #268]	; (1a164 <xTaskResumeAll+0x128>)
   1a058:	4798      	blx	r3
   1a05a:	4b41      	ldr	r3, [pc, #260]	; (1a160 <xTaskResumeAll+0x124>)
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	1e5a      	subs	r2, r3, #1
   1a060:	4b3f      	ldr	r3, [pc, #252]	; (1a160 <xTaskResumeAll+0x124>)
   1a062:	601a      	str	r2, [r3, #0]
   1a064:	4b3e      	ldr	r3, [pc, #248]	; (1a160 <xTaskResumeAll+0x124>)
   1a066:	681b      	ldr	r3, [r3, #0]
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d000      	beq.n	1a06e <xTaskResumeAll+0x32>
   1a06c:	e071      	b.n	1a152 <xTaskResumeAll+0x116>
   1a06e:	4b3e      	ldr	r3, [pc, #248]	; (1a168 <xTaskResumeAll+0x12c>)
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	2b00      	cmp	r3, #0
   1a074:	d100      	bne.n	1a078 <xTaskResumeAll+0x3c>
   1a076:	e06c      	b.n	1a152 <xTaskResumeAll+0x116>
   1a078:	e044      	b.n	1a104 <xTaskResumeAll+0xc8>
   1a07a:	4b3c      	ldr	r3, [pc, #240]	; (1a16c <xTaskResumeAll+0x130>)
   1a07c:	68db      	ldr	r3, [r3, #12]
   1a07e:	68db      	ldr	r3, [r3, #12]
   1a080:	60fb      	str	r3, [r7, #12]
   1a082:	68fb      	ldr	r3, [r7, #12]
   1a084:	3318      	adds	r3, #24
   1a086:	0018      	movs	r0, r3
   1a088:	4b39      	ldr	r3, [pc, #228]	; (1a170 <xTaskResumeAll+0x134>)
   1a08a:	4798      	blx	r3
   1a08c:	68fb      	ldr	r3, [r7, #12]
   1a08e:	3304      	adds	r3, #4
   1a090:	0018      	movs	r0, r3
   1a092:	4b37      	ldr	r3, [pc, #220]	; (1a170 <xTaskResumeAll+0x134>)
   1a094:	4798      	blx	r3
   1a096:	68fb      	ldr	r3, [r7, #12]
   1a098:	0018      	movs	r0, r3
   1a09a:	4b36      	ldr	r3, [pc, #216]	; (1a174 <xTaskResumeAll+0x138>)
   1a09c:	4798      	blx	r3
   1a09e:	0003      	movs	r3, r0
   1a0a0:	001a      	movs	r2, r3
   1a0a2:	4b35      	ldr	r3, [pc, #212]	; (1a178 <xTaskResumeAll+0x13c>)
   1a0a4:	881b      	ldrh	r3, [r3, #0]
   1a0a6:	4013      	ands	r3, r2
   1a0a8:	b29b      	uxth	r3, r3
   1a0aa:	2b00      	cmp	r3, #0
   1a0ac:	d008      	beq.n	1a0c0 <xTaskResumeAll+0x84>
   1a0ae:	68fb      	ldr	r3, [r7, #12]
   1a0b0:	0018      	movs	r0, r3
   1a0b2:	4b32      	ldr	r3, [pc, #200]	; (1a17c <xTaskResumeAll+0x140>)
   1a0b4:	4798      	blx	r3
   1a0b6:	0003      	movs	r3, r0
   1a0b8:	b2db      	uxtb	r3, r3
   1a0ba:	0018      	movs	r0, r3
   1a0bc:	4b30      	ldr	r3, [pc, #192]	; (1a180 <xTaskResumeAll+0x144>)
   1a0be:	4798      	blx	r3
   1a0c0:	68fb      	ldr	r3, [r7, #12]
   1a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0c4:	4b2f      	ldr	r3, [pc, #188]	; (1a184 <xTaskResumeAll+0x148>)
   1a0c6:	681b      	ldr	r3, [r3, #0]
   1a0c8:	429a      	cmp	r2, r3
   1a0ca:	d903      	bls.n	1a0d4 <xTaskResumeAll+0x98>
   1a0cc:	68fb      	ldr	r3, [r7, #12]
   1a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0d0:	4b2c      	ldr	r3, [pc, #176]	; (1a184 <xTaskResumeAll+0x148>)
   1a0d2:	601a      	str	r2, [r3, #0]
   1a0d4:	68fb      	ldr	r3, [r7, #12]
   1a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0d8:	0013      	movs	r3, r2
   1a0da:	009b      	lsls	r3, r3, #2
   1a0dc:	189b      	adds	r3, r3, r2
   1a0de:	009b      	lsls	r3, r3, #2
   1a0e0:	4a29      	ldr	r2, [pc, #164]	; (1a188 <xTaskResumeAll+0x14c>)
   1a0e2:	189a      	adds	r2, r3, r2
   1a0e4:	68fb      	ldr	r3, [r7, #12]
   1a0e6:	3304      	adds	r3, #4
   1a0e8:	0019      	movs	r1, r3
   1a0ea:	0010      	movs	r0, r2
   1a0ec:	4b27      	ldr	r3, [pc, #156]	; (1a18c <xTaskResumeAll+0x150>)
   1a0ee:	4798      	blx	r3
   1a0f0:	68fb      	ldr	r3, [r7, #12]
   1a0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0f4:	4b26      	ldr	r3, [pc, #152]	; (1a190 <xTaskResumeAll+0x154>)
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a0fa:	429a      	cmp	r2, r3
   1a0fc:	d302      	bcc.n	1a104 <xTaskResumeAll+0xc8>
   1a0fe:	4b25      	ldr	r3, [pc, #148]	; (1a194 <xTaskResumeAll+0x158>)
   1a100:	2201      	movs	r2, #1
   1a102:	601a      	str	r2, [r3, #0]
   1a104:	4b19      	ldr	r3, [pc, #100]	; (1a16c <xTaskResumeAll+0x130>)
   1a106:	681b      	ldr	r3, [r3, #0]
   1a108:	2b00      	cmp	r3, #0
   1a10a:	d1b6      	bne.n	1a07a <xTaskResumeAll+0x3e>
   1a10c:	68fb      	ldr	r3, [r7, #12]
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d001      	beq.n	1a116 <xTaskResumeAll+0xda>
   1a112:	4b21      	ldr	r3, [pc, #132]	; (1a198 <xTaskResumeAll+0x15c>)
   1a114:	4798      	blx	r3
   1a116:	4b21      	ldr	r3, [pc, #132]	; (1a19c <xTaskResumeAll+0x160>)
   1a118:	681b      	ldr	r3, [r3, #0]
   1a11a:	607b      	str	r3, [r7, #4]
   1a11c:	687b      	ldr	r3, [r7, #4]
   1a11e:	2b00      	cmp	r3, #0
   1a120:	d00f      	beq.n	1a142 <xTaskResumeAll+0x106>
   1a122:	4b1f      	ldr	r3, [pc, #124]	; (1a1a0 <xTaskResumeAll+0x164>)
   1a124:	4798      	blx	r3
   1a126:	1e03      	subs	r3, r0, #0
   1a128:	d002      	beq.n	1a130 <xTaskResumeAll+0xf4>
   1a12a:	4b1a      	ldr	r3, [pc, #104]	; (1a194 <xTaskResumeAll+0x158>)
   1a12c:	2201      	movs	r2, #1
   1a12e:	601a      	str	r2, [r3, #0]
   1a130:	687b      	ldr	r3, [r7, #4]
   1a132:	3b01      	subs	r3, #1
   1a134:	607b      	str	r3, [r7, #4]
   1a136:	687b      	ldr	r3, [r7, #4]
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d1f2      	bne.n	1a122 <xTaskResumeAll+0xe6>
   1a13c:	4b17      	ldr	r3, [pc, #92]	; (1a19c <xTaskResumeAll+0x160>)
   1a13e:	2200      	movs	r2, #0
   1a140:	601a      	str	r2, [r3, #0]
   1a142:	4b14      	ldr	r3, [pc, #80]	; (1a194 <xTaskResumeAll+0x158>)
   1a144:	681b      	ldr	r3, [r3, #0]
   1a146:	2b00      	cmp	r3, #0
   1a148:	d003      	beq.n	1a152 <xTaskResumeAll+0x116>
   1a14a:	2301      	movs	r3, #1
   1a14c:	60bb      	str	r3, [r7, #8]
   1a14e:	4b15      	ldr	r3, [pc, #84]	; (1a1a4 <xTaskResumeAll+0x168>)
   1a150:	4798      	blx	r3
   1a152:	4b15      	ldr	r3, [pc, #84]	; (1a1a8 <xTaskResumeAll+0x16c>)
   1a154:	4798      	blx	r3
   1a156:	68bb      	ldr	r3, [r7, #8]
   1a158:	0018      	movs	r0, r3
   1a15a:	46bd      	mov	sp, r7
   1a15c:	b004      	add	sp, #16
   1a15e:	bd80      	pop	{r7, pc}
   1a160:	20003c34 	.word	0x20003c34
   1a164:	00017d69 	.word	0x00017d69
   1a168:	20003c0c 	.word	0x20003c0c
   1a16c:	20003bcc 	.word	0x20003bcc
   1a170:	00017be3 	.word	0x00017be3
   1a174:	00015d69 	.word	0x00015d69
   1a178:	200000f0 	.word	0x200000f0
   1a17c:	00015d49 	.word	0x00015d49
   1a180:	00016519 	.word	0x00016519
   1a184:	20003c14 	.word	0x20003c14
   1a188:	20003b38 	.word	0x20003b38
   1a18c:	00017b33 	.word	0x00017b33
   1a190:	20003b34 	.word	0x20003b34
   1a194:	20003c20 	.word	0x20003c20
   1a198:	0001aa29 	.word	0x0001aa29
   1a19c:	20003c1c 	.word	0x20003c1c
   1a1a0:	0001a1c9 	.word	0x0001a1c9
   1a1a4:	00017d51 	.word	0x00017d51
   1a1a8:	00017d8d 	.word	0x00017d8d

0001a1ac <xTaskGetTickCount>:
   1a1ac:	b580      	push	{r7, lr}
   1a1ae:	b082      	sub	sp, #8
   1a1b0:	af00      	add	r7, sp, #0
   1a1b2:	4b04      	ldr	r3, [pc, #16]	; (1a1c4 <xTaskGetTickCount+0x18>)
   1a1b4:	681b      	ldr	r3, [r3, #0]
   1a1b6:	607b      	str	r3, [r7, #4]
   1a1b8:	687b      	ldr	r3, [r7, #4]
   1a1ba:	0018      	movs	r0, r3
   1a1bc:	46bd      	mov	sp, r7
   1a1be:	b002      	add	sp, #8
   1a1c0:	bd80      	pop	{r7, pc}
   1a1c2:	46c0      	nop			; (mov r8, r8)
   1a1c4:	20003c10 	.word	0x20003c10

0001a1c8 <xTaskIncrementTick>:
   1a1c8:	b580      	push	{r7, lr}
   1a1ca:	b086      	sub	sp, #24
   1a1cc:	af00      	add	r7, sp, #0
   1a1ce:	2300      	movs	r3, #0
   1a1d0:	617b      	str	r3, [r7, #20]
   1a1d2:	4b64      	ldr	r3, [pc, #400]	; (1a364 <xTaskIncrementTick+0x19c>)
   1a1d4:	681b      	ldr	r3, [r3, #0]
   1a1d6:	2b01      	cmp	r3, #1
   1a1d8:	d003      	beq.n	1a1e2 <xTaskIncrementTick+0x1a>
   1a1da:	4b63      	ldr	r3, [pc, #396]	; (1a368 <xTaskIncrementTick+0x1a0>)
   1a1dc:	681b      	ldr	r3, [r3, #0]
   1a1de:	2b00      	cmp	r3, #0
   1a1e0:	d107      	bne.n	1a1f2 <xTaskIncrementTick+0x2a>
   1a1e2:	4b62      	ldr	r3, [pc, #392]	; (1a36c <xTaskIncrementTick+0x1a4>)
   1a1e4:	681b      	ldr	r3, [r3, #0]
   1a1e6:	1c5a      	adds	r2, r3, #1
   1a1e8:	4b60      	ldr	r3, [pc, #384]	; (1a36c <xTaskIncrementTick+0x1a4>)
   1a1ea:	601a      	str	r2, [r3, #0]
   1a1ec:	2000      	movs	r0, #0
   1a1ee:	4b60      	ldr	r3, [pc, #384]	; (1a370 <xTaskIncrementTick+0x1a8>)
   1a1f0:	4798      	blx	r3
   1a1f2:	4b5c      	ldr	r3, [pc, #368]	; (1a364 <xTaskIncrementTick+0x19c>)
   1a1f4:	681b      	ldr	r3, [r3, #0]
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	d106      	bne.n	1a208 <xTaskIncrementTick+0x40>
   1a1fa:	4b5e      	ldr	r3, [pc, #376]	; (1a374 <xTaskIncrementTick+0x1ac>)
   1a1fc:	681b      	ldr	r3, [r3, #0]
   1a1fe:	3301      	adds	r3, #1
   1a200:	0019      	movs	r1, r3
   1a202:	2003      	movs	r0, #3
   1a204:	4b5c      	ldr	r3, [pc, #368]	; (1a378 <xTaskIncrementTick+0x1b0>)
   1a206:	4798      	blx	r3
   1a208:	4b56      	ldr	r3, [pc, #344]	; (1a364 <xTaskIncrementTick+0x19c>)
   1a20a:	681b      	ldr	r3, [r3, #0]
   1a20c:	2b00      	cmp	r3, #0
   1a20e:	d000      	beq.n	1a212 <xTaskIncrementTick+0x4a>
   1a210:	e098      	b.n	1a344 <xTaskIncrementTick+0x17c>
   1a212:	4b58      	ldr	r3, [pc, #352]	; (1a374 <xTaskIncrementTick+0x1ac>)
   1a214:	681b      	ldr	r3, [r3, #0]
   1a216:	3301      	adds	r3, #1
   1a218:	613b      	str	r3, [r7, #16]
   1a21a:	4b56      	ldr	r3, [pc, #344]	; (1a374 <xTaskIncrementTick+0x1ac>)
   1a21c:	693a      	ldr	r2, [r7, #16]
   1a21e:	601a      	str	r2, [r3, #0]
   1a220:	693b      	ldr	r3, [r7, #16]
   1a222:	2b00      	cmp	r3, #0
   1a224:	d117      	bne.n	1a256 <xTaskIncrementTick+0x8e>
   1a226:	4b55      	ldr	r3, [pc, #340]	; (1a37c <xTaskIncrementTick+0x1b4>)
   1a228:	681b      	ldr	r3, [r3, #0]
   1a22a:	681b      	ldr	r3, [r3, #0]
   1a22c:	2b00      	cmp	r3, #0
   1a22e:	d001      	beq.n	1a234 <xTaskIncrementTick+0x6c>
   1a230:	b672      	cpsid	i
   1a232:	e7fe      	b.n	1a232 <xTaskIncrementTick+0x6a>
   1a234:	4b51      	ldr	r3, [pc, #324]	; (1a37c <xTaskIncrementTick+0x1b4>)
   1a236:	681b      	ldr	r3, [r3, #0]
   1a238:	60fb      	str	r3, [r7, #12]
   1a23a:	4b51      	ldr	r3, [pc, #324]	; (1a380 <xTaskIncrementTick+0x1b8>)
   1a23c:	681a      	ldr	r2, [r3, #0]
   1a23e:	4b4f      	ldr	r3, [pc, #316]	; (1a37c <xTaskIncrementTick+0x1b4>)
   1a240:	601a      	str	r2, [r3, #0]
   1a242:	4b4f      	ldr	r3, [pc, #316]	; (1a380 <xTaskIncrementTick+0x1b8>)
   1a244:	68fa      	ldr	r2, [r7, #12]
   1a246:	601a      	str	r2, [r3, #0]
   1a248:	4b4e      	ldr	r3, [pc, #312]	; (1a384 <xTaskIncrementTick+0x1bc>)
   1a24a:	681b      	ldr	r3, [r3, #0]
   1a24c:	1c5a      	adds	r2, r3, #1
   1a24e:	4b4d      	ldr	r3, [pc, #308]	; (1a384 <xTaskIncrementTick+0x1bc>)
   1a250:	601a      	str	r2, [r3, #0]
   1a252:	4b4d      	ldr	r3, [pc, #308]	; (1a388 <xTaskIncrementTick+0x1c0>)
   1a254:	4798      	blx	r3
   1a256:	4b4d      	ldr	r3, [pc, #308]	; (1a38c <xTaskIncrementTick+0x1c4>)
   1a258:	681b      	ldr	r3, [r3, #0]
   1a25a:	693a      	ldr	r2, [r7, #16]
   1a25c:	429a      	cmp	r2, r3
   1a25e:	d363      	bcc.n	1a328 <xTaskIncrementTick+0x160>
   1a260:	4b46      	ldr	r3, [pc, #280]	; (1a37c <xTaskIncrementTick+0x1b4>)
   1a262:	681b      	ldr	r3, [r3, #0]
   1a264:	681b      	ldr	r3, [r3, #0]
   1a266:	2b00      	cmp	r3, #0
   1a268:	d101      	bne.n	1a26e <xTaskIncrementTick+0xa6>
   1a26a:	2301      	movs	r3, #1
   1a26c:	e000      	b.n	1a270 <xTaskIncrementTick+0xa8>
   1a26e:	2300      	movs	r3, #0
   1a270:	2b00      	cmp	r3, #0
   1a272:	d004      	beq.n	1a27e <xTaskIncrementTick+0xb6>
   1a274:	4b45      	ldr	r3, [pc, #276]	; (1a38c <xTaskIncrementTick+0x1c4>)
   1a276:	2201      	movs	r2, #1
   1a278:	4252      	negs	r2, r2
   1a27a:	601a      	str	r2, [r3, #0]
   1a27c:	e054      	b.n	1a328 <xTaskIncrementTick+0x160>
   1a27e:	4b3f      	ldr	r3, [pc, #252]	; (1a37c <xTaskIncrementTick+0x1b4>)
   1a280:	681b      	ldr	r3, [r3, #0]
   1a282:	68db      	ldr	r3, [r3, #12]
   1a284:	68db      	ldr	r3, [r3, #12]
   1a286:	60bb      	str	r3, [r7, #8]
   1a288:	68bb      	ldr	r3, [r7, #8]
   1a28a:	685b      	ldr	r3, [r3, #4]
   1a28c:	607b      	str	r3, [r7, #4]
   1a28e:	693a      	ldr	r2, [r7, #16]
   1a290:	687b      	ldr	r3, [r7, #4]
   1a292:	429a      	cmp	r2, r3
   1a294:	d203      	bcs.n	1a29e <xTaskIncrementTick+0xd6>
   1a296:	4b3d      	ldr	r3, [pc, #244]	; (1a38c <xTaskIncrementTick+0x1c4>)
   1a298:	687a      	ldr	r2, [r7, #4]
   1a29a:	601a      	str	r2, [r3, #0]
   1a29c:	e044      	b.n	1a328 <xTaskIncrementTick+0x160>
   1a29e:	68bb      	ldr	r3, [r7, #8]
   1a2a0:	3304      	adds	r3, #4
   1a2a2:	0018      	movs	r0, r3
   1a2a4:	4b3a      	ldr	r3, [pc, #232]	; (1a390 <xTaskIncrementTick+0x1c8>)
   1a2a6:	4798      	blx	r3
   1a2a8:	68bb      	ldr	r3, [r7, #8]
   1a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a2ac:	2b00      	cmp	r3, #0
   1a2ae:	d004      	beq.n	1a2ba <xTaskIncrementTick+0xf2>
   1a2b0:	68bb      	ldr	r3, [r7, #8]
   1a2b2:	3318      	adds	r3, #24
   1a2b4:	0018      	movs	r0, r3
   1a2b6:	4b36      	ldr	r3, [pc, #216]	; (1a390 <xTaskIncrementTick+0x1c8>)
   1a2b8:	4798      	blx	r3
   1a2ba:	68bb      	ldr	r3, [r7, #8]
   1a2bc:	0018      	movs	r0, r3
   1a2be:	4b35      	ldr	r3, [pc, #212]	; (1a394 <xTaskIncrementTick+0x1cc>)
   1a2c0:	4798      	blx	r3
   1a2c2:	0003      	movs	r3, r0
   1a2c4:	001a      	movs	r2, r3
   1a2c6:	4b34      	ldr	r3, [pc, #208]	; (1a398 <xTaskIncrementTick+0x1d0>)
   1a2c8:	881b      	ldrh	r3, [r3, #0]
   1a2ca:	4013      	ands	r3, r2
   1a2cc:	b29b      	uxth	r3, r3
   1a2ce:	2b00      	cmp	r3, #0
   1a2d0:	d008      	beq.n	1a2e4 <xTaskIncrementTick+0x11c>
   1a2d2:	68bb      	ldr	r3, [r7, #8]
   1a2d4:	0018      	movs	r0, r3
   1a2d6:	4b31      	ldr	r3, [pc, #196]	; (1a39c <xTaskIncrementTick+0x1d4>)
   1a2d8:	4798      	blx	r3
   1a2da:	0003      	movs	r3, r0
   1a2dc:	b2db      	uxtb	r3, r3
   1a2de:	0018      	movs	r0, r3
   1a2e0:	4b2f      	ldr	r3, [pc, #188]	; (1a3a0 <xTaskIncrementTick+0x1d8>)
   1a2e2:	4798      	blx	r3
   1a2e4:	68bb      	ldr	r3, [r7, #8]
   1a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2e8:	4b2e      	ldr	r3, [pc, #184]	; (1a3a4 <xTaskIncrementTick+0x1dc>)
   1a2ea:	681b      	ldr	r3, [r3, #0]
   1a2ec:	429a      	cmp	r2, r3
   1a2ee:	d903      	bls.n	1a2f8 <xTaskIncrementTick+0x130>
   1a2f0:	68bb      	ldr	r3, [r7, #8]
   1a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2f4:	4b2b      	ldr	r3, [pc, #172]	; (1a3a4 <xTaskIncrementTick+0x1dc>)
   1a2f6:	601a      	str	r2, [r3, #0]
   1a2f8:	68bb      	ldr	r3, [r7, #8]
   1a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2fc:	0013      	movs	r3, r2
   1a2fe:	009b      	lsls	r3, r3, #2
   1a300:	189b      	adds	r3, r3, r2
   1a302:	009b      	lsls	r3, r3, #2
   1a304:	4a28      	ldr	r2, [pc, #160]	; (1a3a8 <xTaskIncrementTick+0x1e0>)
   1a306:	189a      	adds	r2, r3, r2
   1a308:	68bb      	ldr	r3, [r7, #8]
   1a30a:	3304      	adds	r3, #4
   1a30c:	0019      	movs	r1, r3
   1a30e:	0010      	movs	r0, r2
   1a310:	4b26      	ldr	r3, [pc, #152]	; (1a3ac <xTaskIncrementTick+0x1e4>)
   1a312:	4798      	blx	r3
   1a314:	68bb      	ldr	r3, [r7, #8]
   1a316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a318:	4b25      	ldr	r3, [pc, #148]	; (1a3b0 <xTaskIncrementTick+0x1e8>)
   1a31a:	681b      	ldr	r3, [r3, #0]
   1a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a31e:	429a      	cmp	r2, r3
   1a320:	d39e      	bcc.n	1a260 <xTaskIncrementTick+0x98>
   1a322:	2301      	movs	r3, #1
   1a324:	617b      	str	r3, [r7, #20]
   1a326:	e79b      	b.n	1a260 <xTaskIncrementTick+0x98>
   1a328:	4b21      	ldr	r3, [pc, #132]	; (1a3b0 <xTaskIncrementTick+0x1e8>)
   1a32a:	681b      	ldr	r3, [r3, #0]
   1a32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a32e:	491e      	ldr	r1, [pc, #120]	; (1a3a8 <xTaskIncrementTick+0x1e0>)
   1a330:	0013      	movs	r3, r2
   1a332:	009b      	lsls	r3, r3, #2
   1a334:	189b      	adds	r3, r3, r2
   1a336:	009b      	lsls	r3, r3, #2
   1a338:	585b      	ldr	r3, [r3, r1]
   1a33a:	2b01      	cmp	r3, #1
   1a33c:	d907      	bls.n	1a34e <xTaskIncrementTick+0x186>
   1a33e:	2301      	movs	r3, #1
   1a340:	617b      	str	r3, [r7, #20]
   1a342:	e004      	b.n	1a34e <xTaskIncrementTick+0x186>
   1a344:	4b08      	ldr	r3, [pc, #32]	; (1a368 <xTaskIncrementTick+0x1a0>)
   1a346:	681b      	ldr	r3, [r3, #0]
   1a348:	1c5a      	adds	r2, r3, #1
   1a34a:	4b07      	ldr	r3, [pc, #28]	; (1a368 <xTaskIncrementTick+0x1a0>)
   1a34c:	601a      	str	r2, [r3, #0]
   1a34e:	4b19      	ldr	r3, [pc, #100]	; (1a3b4 <xTaskIncrementTick+0x1ec>)
   1a350:	681b      	ldr	r3, [r3, #0]
   1a352:	2b00      	cmp	r3, #0
   1a354:	d001      	beq.n	1a35a <xTaskIncrementTick+0x192>
   1a356:	2301      	movs	r3, #1
   1a358:	617b      	str	r3, [r7, #20]
   1a35a:	697b      	ldr	r3, [r7, #20]
   1a35c:	0018      	movs	r0, r3
   1a35e:	46bd      	mov	sp, r7
   1a360:	b006      	add	sp, #24
   1a362:	bd80      	pop	{r7, pc}
   1a364:	20003c34 	.word	0x20003c34
   1a368:	20003c1c 	.word	0x20003c1c
   1a36c:	20000b7c 	.word	0x20000b7c
   1a370:	000179fd 	.word	0x000179fd
   1a374:	20003c10 	.word	0x20003c10
   1a378:	00016a69 	.word	0x00016a69
   1a37c:	20003bc4 	.word	0x20003bc4
   1a380:	20003bc8 	.word	0x20003bc8
   1a384:	20003c24 	.word	0x20003c24
   1a388:	0001aa29 	.word	0x0001aa29
   1a38c:	20003c2c 	.word	0x20003c2c
   1a390:	00017be3 	.word	0x00017be3
   1a394:	00015d69 	.word	0x00015d69
   1a398:	200000f0 	.word	0x200000f0
   1a39c:	00015d49 	.word	0x00015d49
   1a3a0:	00016519 	.word	0x00016519
   1a3a4:	20003c14 	.word	0x20003c14
   1a3a8:	20003b38 	.word	0x20003b38
   1a3ac:	00017b33 	.word	0x00017b33
   1a3b0:	20003b34 	.word	0x20003b34
   1a3b4:	20003c20 	.word	0x20003c20

0001a3b8 <vTaskSwitchContext>:
   1a3b8:	b580      	push	{r7, lr}
   1a3ba:	b082      	sub	sp, #8
   1a3bc:	af00      	add	r7, sp, #0
   1a3be:	4b3a      	ldr	r3, [pc, #232]	; (1a4a8 <vTaskSwitchContext+0xf0>)
   1a3c0:	681b      	ldr	r3, [r3, #0]
   1a3c2:	2b00      	cmp	r3, #0
   1a3c4:	d003      	beq.n	1a3ce <vTaskSwitchContext+0x16>
   1a3c6:	4b39      	ldr	r3, [pc, #228]	; (1a4ac <vTaskSwitchContext+0xf4>)
   1a3c8:	2201      	movs	r2, #1
   1a3ca:	601a      	str	r2, [r3, #0]
   1a3cc:	e067      	b.n	1a49e <vTaskSwitchContext+0xe6>
   1a3ce:	4b37      	ldr	r3, [pc, #220]	; (1a4ac <vTaskSwitchContext+0xf4>)
   1a3d0:	2200      	movs	r2, #0
   1a3d2:	601a      	str	r2, [r3, #0]
   1a3d4:	4b36      	ldr	r3, [pc, #216]	; (1a4b0 <vTaskSwitchContext+0xf8>)
   1a3d6:	681b      	ldr	r3, [r3, #0]
   1a3d8:	681a      	ldr	r2, [r3, #0]
   1a3da:	4b35      	ldr	r3, [pc, #212]	; (1a4b0 <vTaskSwitchContext+0xf8>)
   1a3dc:	681b      	ldr	r3, [r3, #0]
   1a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a3e0:	429a      	cmp	r2, r3
   1a3e2:	d808      	bhi.n	1a3f6 <vTaskSwitchContext+0x3e>
   1a3e4:	4b32      	ldr	r3, [pc, #200]	; (1a4b0 <vTaskSwitchContext+0xf8>)
   1a3e6:	681a      	ldr	r2, [r3, #0]
   1a3e8:	4b31      	ldr	r3, [pc, #196]	; (1a4b0 <vTaskSwitchContext+0xf8>)
   1a3ea:	681b      	ldr	r3, [r3, #0]
   1a3ec:	3334      	adds	r3, #52	; 0x34
   1a3ee:	0019      	movs	r1, r3
   1a3f0:	0010      	movs	r0, r2
   1a3f2:	4b30      	ldr	r3, [pc, #192]	; (1a4b4 <vTaskSwitchContext+0xfc>)
   1a3f4:	4798      	blx	r3
   1a3f6:	4b30      	ldr	r3, [pc, #192]	; (1a4b8 <vTaskSwitchContext+0x100>)
   1a3f8:	681b      	ldr	r3, [r3, #0]
   1a3fa:	607b      	str	r3, [r7, #4]
   1a3fc:	e007      	b.n	1a40e <vTaskSwitchContext+0x56>
   1a3fe:	687b      	ldr	r3, [r7, #4]
   1a400:	2b00      	cmp	r3, #0
   1a402:	d101      	bne.n	1a408 <vTaskSwitchContext+0x50>
   1a404:	b672      	cpsid	i
   1a406:	e7fe      	b.n	1a406 <vTaskSwitchContext+0x4e>
   1a408:	687b      	ldr	r3, [r7, #4]
   1a40a:	3b01      	subs	r3, #1
   1a40c:	607b      	str	r3, [r7, #4]
   1a40e:	492b      	ldr	r1, [pc, #172]	; (1a4bc <vTaskSwitchContext+0x104>)
   1a410:	687a      	ldr	r2, [r7, #4]
   1a412:	0013      	movs	r3, r2
   1a414:	009b      	lsls	r3, r3, #2
   1a416:	189b      	adds	r3, r3, r2
   1a418:	009b      	lsls	r3, r3, #2
   1a41a:	585b      	ldr	r3, [r3, r1]
   1a41c:	2b00      	cmp	r3, #0
   1a41e:	d0ee      	beq.n	1a3fe <vTaskSwitchContext+0x46>
   1a420:	687a      	ldr	r2, [r7, #4]
   1a422:	0013      	movs	r3, r2
   1a424:	009b      	lsls	r3, r3, #2
   1a426:	189b      	adds	r3, r3, r2
   1a428:	009b      	lsls	r3, r3, #2
   1a42a:	4a24      	ldr	r2, [pc, #144]	; (1a4bc <vTaskSwitchContext+0x104>)
   1a42c:	189b      	adds	r3, r3, r2
   1a42e:	603b      	str	r3, [r7, #0]
   1a430:	683b      	ldr	r3, [r7, #0]
   1a432:	685b      	ldr	r3, [r3, #4]
   1a434:	685a      	ldr	r2, [r3, #4]
   1a436:	683b      	ldr	r3, [r7, #0]
   1a438:	605a      	str	r2, [r3, #4]
   1a43a:	683b      	ldr	r3, [r7, #0]
   1a43c:	685a      	ldr	r2, [r3, #4]
   1a43e:	683b      	ldr	r3, [r7, #0]
   1a440:	3308      	adds	r3, #8
   1a442:	429a      	cmp	r2, r3
   1a444:	d104      	bne.n	1a450 <vTaskSwitchContext+0x98>
   1a446:	683b      	ldr	r3, [r7, #0]
   1a448:	685b      	ldr	r3, [r3, #4]
   1a44a:	685a      	ldr	r2, [r3, #4]
   1a44c:	683b      	ldr	r3, [r7, #0]
   1a44e:	605a      	str	r2, [r3, #4]
   1a450:	683b      	ldr	r3, [r7, #0]
   1a452:	685b      	ldr	r3, [r3, #4]
   1a454:	68da      	ldr	r2, [r3, #12]
   1a456:	4b16      	ldr	r3, [pc, #88]	; (1a4b0 <vTaskSwitchContext+0xf8>)
   1a458:	601a      	str	r2, [r3, #0]
   1a45a:	4b17      	ldr	r3, [pc, #92]	; (1a4b8 <vTaskSwitchContext+0x100>)
   1a45c:	687a      	ldr	r2, [r7, #4]
   1a45e:	601a      	str	r2, [r3, #0]
   1a460:	4b17      	ldr	r3, [pc, #92]	; (1a4c0 <vTaskSwitchContext+0x108>)
   1a462:	2201      	movs	r2, #1
   1a464:	601a      	str	r2, [r3, #0]
   1a466:	4b17      	ldr	r3, [pc, #92]	; (1a4c4 <vTaskSwitchContext+0x10c>)
   1a468:	4798      	blx	r3
   1a46a:	0003      	movs	r3, r0
   1a46c:	0018      	movs	r0, r3
   1a46e:	4b16      	ldr	r3, [pc, #88]	; (1a4c8 <vTaskSwitchContext+0x110>)
   1a470:	4798      	blx	r3
   1a472:	0003      	movs	r3, r0
   1a474:	001a      	movs	r2, r3
   1a476:	4b15      	ldr	r3, [pc, #84]	; (1a4cc <vTaskSwitchContext+0x114>)
   1a478:	881b      	ldrh	r3, [r3, #0]
   1a47a:	4013      	ands	r3, r2
   1a47c:	b29b      	uxth	r3, r3
   1a47e:	2b00      	cmp	r3, #0
   1a480:	d00a      	beq.n	1a498 <vTaskSwitchContext+0xe0>
   1a482:	4b10      	ldr	r3, [pc, #64]	; (1a4c4 <vTaskSwitchContext+0x10c>)
   1a484:	4798      	blx	r3
   1a486:	0003      	movs	r3, r0
   1a488:	0018      	movs	r0, r3
   1a48a:	4b11      	ldr	r3, [pc, #68]	; (1a4d0 <vTaskSwitchContext+0x118>)
   1a48c:	4798      	blx	r3
   1a48e:	0003      	movs	r3, r0
   1a490:	b2db      	uxtb	r3, r3
   1a492:	0018      	movs	r0, r3
   1a494:	4b0f      	ldr	r3, [pc, #60]	; (1a4d4 <vTaskSwitchContext+0x11c>)
   1a496:	4798      	blx	r3
   1a498:	4b09      	ldr	r3, [pc, #36]	; (1a4c0 <vTaskSwitchContext+0x108>)
   1a49a:	2202      	movs	r2, #2
   1a49c:	601a      	str	r2, [r3, #0]
   1a49e:	46c0      	nop			; (mov r8, r8)
   1a4a0:	46bd      	mov	sp, r7
   1a4a2:	b002      	add	sp, #8
   1a4a4:	bd80      	pop	{r7, pc}
   1a4a6:	46c0      	nop			; (mov r8, r8)
   1a4a8:	20003c34 	.word	0x20003c34
   1a4ac:	20003c20 	.word	0x20003c20
   1a4b0:	20003b34 	.word	0x20003b34
   1a4b4:	00030531 	.word	0x00030531
   1a4b8:	20003c14 	.word	0x20003c14
   1a4bc:	20003b38 	.word	0x20003b38
   1a4c0:	20000b88 	.word	0x20000b88
   1a4c4:	00016005 	.word	0x00016005
   1a4c8:	00015d69 	.word	0x00015d69
   1a4cc:	200000f0 	.word	0x200000f0
   1a4d0:	00015d49 	.word	0x00015d49
   1a4d4:	00016b65 	.word	0x00016b65

0001a4d8 <vTaskPlaceOnEventList>:
   1a4d8:	b580      	push	{r7, lr}
   1a4da:	b082      	sub	sp, #8
   1a4dc:	af00      	add	r7, sp, #0
   1a4de:	6078      	str	r0, [r7, #4]
   1a4e0:	6039      	str	r1, [r7, #0]
   1a4e2:	687b      	ldr	r3, [r7, #4]
   1a4e4:	2b00      	cmp	r3, #0
   1a4e6:	d101      	bne.n	1a4ec <vTaskPlaceOnEventList+0x14>
   1a4e8:	b672      	cpsid	i
   1a4ea:	e7fe      	b.n	1a4ea <vTaskPlaceOnEventList+0x12>
   1a4ec:	4b08      	ldr	r3, [pc, #32]	; (1a510 <vTaskPlaceOnEventList+0x38>)
   1a4ee:	681b      	ldr	r3, [r3, #0]
   1a4f0:	3318      	adds	r3, #24
   1a4f2:	001a      	movs	r2, r3
   1a4f4:	687b      	ldr	r3, [r7, #4]
   1a4f6:	0011      	movs	r1, r2
   1a4f8:	0018      	movs	r0, r3
   1a4fa:	4b06      	ldr	r3, [pc, #24]	; (1a514 <vTaskPlaceOnEventList+0x3c>)
   1a4fc:	4798      	blx	r3
   1a4fe:	683b      	ldr	r3, [r7, #0]
   1a500:	2101      	movs	r1, #1
   1a502:	0018      	movs	r0, r3
   1a504:	4b04      	ldr	r3, [pc, #16]	; (1a518 <vTaskPlaceOnEventList+0x40>)
   1a506:	4798      	blx	r3
   1a508:	46c0      	nop			; (mov r8, r8)
   1a50a:	46bd      	mov	sp, r7
   1a50c:	b002      	add	sp, #8
   1a50e:	bd80      	pop	{r7, pc}
   1a510:	20003b34 	.word	0x20003b34
   1a514:	00017b77 	.word	0x00017b77
   1a518:	0001af7d 	.word	0x0001af7d

0001a51c <vTaskPlaceOnEventListRestricted>:
   1a51c:	b580      	push	{r7, lr}
   1a51e:	b084      	sub	sp, #16
   1a520:	af00      	add	r7, sp, #0
   1a522:	60f8      	str	r0, [r7, #12]
   1a524:	60b9      	str	r1, [r7, #8]
   1a526:	607a      	str	r2, [r7, #4]
   1a528:	68fb      	ldr	r3, [r7, #12]
   1a52a:	2b00      	cmp	r3, #0
   1a52c:	d101      	bne.n	1a532 <vTaskPlaceOnEventListRestricted+0x16>
   1a52e:	b672      	cpsid	i
   1a530:	e7fe      	b.n	1a530 <vTaskPlaceOnEventListRestricted+0x14>
   1a532:	4b28      	ldr	r3, [pc, #160]	; (1a5d4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a534:	681b      	ldr	r3, [r3, #0]
   1a536:	3318      	adds	r3, #24
   1a538:	001a      	movs	r2, r3
   1a53a:	68fb      	ldr	r3, [r7, #12]
   1a53c:	0011      	movs	r1, r2
   1a53e:	0018      	movs	r0, r3
   1a540:	4b25      	ldr	r3, [pc, #148]	; (1a5d8 <vTaskPlaceOnEventListRestricted+0xbc>)
   1a542:	4798      	blx	r3
   1a544:	687b      	ldr	r3, [r7, #4]
   1a546:	2b00      	cmp	r3, #0
   1a548:	d002      	beq.n	1a550 <vTaskPlaceOnEventListRestricted+0x34>
   1a54a:	2301      	movs	r3, #1
   1a54c:	425b      	negs	r3, r3
   1a54e:	60bb      	str	r3, [r7, #8]
   1a550:	4b20      	ldr	r3, [pc, #128]	; (1a5d4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a552:	681b      	ldr	r3, [r3, #0]
   1a554:	0018      	movs	r0, r3
   1a556:	4b21      	ldr	r3, [pc, #132]	; (1a5dc <vTaskPlaceOnEventListRestricted+0xc0>)
   1a558:	4798      	blx	r3
   1a55a:	0003      	movs	r3, r0
   1a55c:	001a      	movs	r2, r3
   1a55e:	4b20      	ldr	r3, [pc, #128]	; (1a5e0 <vTaskPlaceOnEventListRestricted+0xc4>)
   1a560:	881b      	ldrh	r3, [r3, #0]
   1a562:	4013      	ands	r3, r2
   1a564:	b29b      	uxth	r3, r3
   1a566:	2b00      	cmp	r3, #0
   1a568:	d011      	beq.n	1a58e <vTaskPlaceOnEventListRestricted+0x72>
   1a56a:	4b1e      	ldr	r3, [pc, #120]	; (1a5e4 <vTaskPlaceOnEventListRestricted+0xc8>)
   1a56c:	681a      	ldr	r2, [r3, #0]
   1a56e:	68bb      	ldr	r3, [r7, #8]
   1a570:	18d3      	adds	r3, r2, r3
   1a572:	0019      	movs	r1, r3
   1a574:	2088      	movs	r0, #136	; 0x88
   1a576:	4b1c      	ldr	r3, [pc, #112]	; (1a5e8 <vTaskPlaceOnEventListRestricted+0xcc>)
   1a578:	4798      	blx	r3
   1a57a:	4b16      	ldr	r3, [pc, #88]	; (1a5d4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a57c:	681b      	ldr	r3, [r3, #0]
   1a57e:	0018      	movs	r0, r3
   1a580:	4b1a      	ldr	r3, [pc, #104]	; (1a5ec <vTaskPlaceOnEventListRestricted+0xd0>)
   1a582:	4798      	blx	r3
   1a584:	0003      	movs	r3, r0
   1a586:	b2db      	uxtb	r3, r3
   1a588:	0018      	movs	r0, r3
   1a58a:	4b19      	ldr	r3, [pc, #100]	; (1a5f0 <vTaskPlaceOnEventListRestricted+0xd4>)
   1a58c:	4798      	blx	r3
   1a58e:	4b19      	ldr	r3, [pc, #100]	; (1a5f4 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a590:	4798      	blx	r3
   1a592:	0003      	movs	r3, r0
   1a594:	0018      	movs	r0, r3
   1a596:	4b11      	ldr	r3, [pc, #68]	; (1a5dc <vTaskPlaceOnEventListRestricted+0xc0>)
   1a598:	4798      	blx	r3
   1a59a:	0003      	movs	r3, r0
   1a59c:	001a      	movs	r2, r3
   1a59e:	4b10      	ldr	r3, [pc, #64]	; (1a5e0 <vTaskPlaceOnEventListRestricted+0xc4>)
   1a5a0:	881b      	ldrh	r3, [r3, #0]
   1a5a2:	4013      	ands	r3, r2
   1a5a4:	b29b      	uxth	r3, r3
   1a5a6:	2b00      	cmp	r3, #0
   1a5a8:	d00a      	beq.n	1a5c0 <vTaskPlaceOnEventListRestricted+0xa4>
   1a5aa:	4b12      	ldr	r3, [pc, #72]	; (1a5f4 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a5ac:	4798      	blx	r3
   1a5ae:	0003      	movs	r3, r0
   1a5b0:	0018      	movs	r0, r3
   1a5b2:	4b0e      	ldr	r3, [pc, #56]	; (1a5ec <vTaskPlaceOnEventListRestricted+0xd0>)
   1a5b4:	4798      	blx	r3
   1a5b6:	0003      	movs	r3, r0
   1a5b8:	b2db      	uxtb	r3, r3
   1a5ba:	0018      	movs	r0, r3
   1a5bc:	4b0c      	ldr	r3, [pc, #48]	; (1a5f0 <vTaskPlaceOnEventListRestricted+0xd4>)
   1a5be:	4798      	blx	r3
   1a5c0:	687a      	ldr	r2, [r7, #4]
   1a5c2:	68bb      	ldr	r3, [r7, #8]
   1a5c4:	0011      	movs	r1, r2
   1a5c6:	0018      	movs	r0, r3
   1a5c8:	4b0b      	ldr	r3, [pc, #44]	; (1a5f8 <vTaskPlaceOnEventListRestricted+0xdc>)
   1a5ca:	4798      	blx	r3
   1a5cc:	46c0      	nop			; (mov r8, r8)
   1a5ce:	46bd      	mov	sp, r7
   1a5d0:	b004      	add	sp, #16
   1a5d2:	bd80      	pop	{r7, pc}
   1a5d4:	20003b34 	.word	0x20003b34
   1a5d8:	00017b33 	.word	0x00017b33
   1a5dc:	00015d69 	.word	0x00015d69
   1a5e0:	200000f0 	.word	0x200000f0
   1a5e4:	20003c10 	.word	0x20003c10
   1a5e8:	00016a69 	.word	0x00016a69
   1a5ec:	00015d49 	.word	0x00015d49
   1a5f0:	00016ef9 	.word	0x00016ef9
   1a5f4:	00016005 	.word	0x00016005
   1a5f8:	0001af7d 	.word	0x0001af7d

0001a5fc <xTaskRemoveFromEventList>:
   1a5fc:	b580      	push	{r7, lr}
   1a5fe:	b084      	sub	sp, #16
   1a600:	af00      	add	r7, sp, #0
   1a602:	6078      	str	r0, [r7, #4]
   1a604:	687b      	ldr	r3, [r7, #4]
   1a606:	68db      	ldr	r3, [r3, #12]
   1a608:	68db      	ldr	r3, [r3, #12]
   1a60a:	60bb      	str	r3, [r7, #8]
   1a60c:	68bb      	ldr	r3, [r7, #8]
   1a60e:	2b00      	cmp	r3, #0
   1a610:	d101      	bne.n	1a616 <xTaskRemoveFromEventList+0x1a>
   1a612:	b672      	cpsid	i
   1a614:	e7fe      	b.n	1a614 <xTaskRemoveFromEventList+0x18>
   1a616:	68bb      	ldr	r3, [r7, #8]
   1a618:	3318      	adds	r3, #24
   1a61a:	0018      	movs	r0, r3
   1a61c:	4b2a      	ldr	r3, [pc, #168]	; (1a6c8 <xTaskRemoveFromEventList+0xcc>)
   1a61e:	4798      	blx	r3
   1a620:	4b2a      	ldr	r3, [pc, #168]	; (1a6cc <xTaskRemoveFromEventList+0xd0>)
   1a622:	681b      	ldr	r3, [r3, #0]
   1a624:	2b00      	cmp	r3, #0
   1a626:	d132      	bne.n	1a68e <xTaskRemoveFromEventList+0x92>
   1a628:	68bb      	ldr	r3, [r7, #8]
   1a62a:	3304      	adds	r3, #4
   1a62c:	0018      	movs	r0, r3
   1a62e:	4b26      	ldr	r3, [pc, #152]	; (1a6c8 <xTaskRemoveFromEventList+0xcc>)
   1a630:	4798      	blx	r3
   1a632:	68bb      	ldr	r3, [r7, #8]
   1a634:	0018      	movs	r0, r3
   1a636:	4b26      	ldr	r3, [pc, #152]	; (1a6d0 <xTaskRemoveFromEventList+0xd4>)
   1a638:	4798      	blx	r3
   1a63a:	0003      	movs	r3, r0
   1a63c:	001a      	movs	r2, r3
   1a63e:	4b25      	ldr	r3, [pc, #148]	; (1a6d4 <xTaskRemoveFromEventList+0xd8>)
   1a640:	881b      	ldrh	r3, [r3, #0]
   1a642:	4013      	ands	r3, r2
   1a644:	b29b      	uxth	r3, r3
   1a646:	2b00      	cmp	r3, #0
   1a648:	d008      	beq.n	1a65c <xTaskRemoveFromEventList+0x60>
   1a64a:	68bb      	ldr	r3, [r7, #8]
   1a64c:	0018      	movs	r0, r3
   1a64e:	4b22      	ldr	r3, [pc, #136]	; (1a6d8 <xTaskRemoveFromEventList+0xdc>)
   1a650:	4798      	blx	r3
   1a652:	0003      	movs	r3, r0
   1a654:	b2db      	uxtb	r3, r3
   1a656:	0018      	movs	r0, r3
   1a658:	4b20      	ldr	r3, [pc, #128]	; (1a6dc <xTaskRemoveFromEventList+0xe0>)
   1a65a:	4798      	blx	r3
   1a65c:	68bb      	ldr	r3, [r7, #8]
   1a65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a660:	4b1f      	ldr	r3, [pc, #124]	; (1a6e0 <xTaskRemoveFromEventList+0xe4>)
   1a662:	681b      	ldr	r3, [r3, #0]
   1a664:	429a      	cmp	r2, r3
   1a666:	d903      	bls.n	1a670 <xTaskRemoveFromEventList+0x74>
   1a668:	68bb      	ldr	r3, [r7, #8]
   1a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a66c:	4b1c      	ldr	r3, [pc, #112]	; (1a6e0 <xTaskRemoveFromEventList+0xe4>)
   1a66e:	601a      	str	r2, [r3, #0]
   1a670:	68bb      	ldr	r3, [r7, #8]
   1a672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a674:	0013      	movs	r3, r2
   1a676:	009b      	lsls	r3, r3, #2
   1a678:	189b      	adds	r3, r3, r2
   1a67a:	009b      	lsls	r3, r3, #2
   1a67c:	4a19      	ldr	r2, [pc, #100]	; (1a6e4 <xTaskRemoveFromEventList+0xe8>)
   1a67e:	189a      	adds	r2, r3, r2
   1a680:	68bb      	ldr	r3, [r7, #8]
   1a682:	3304      	adds	r3, #4
   1a684:	0019      	movs	r1, r3
   1a686:	0010      	movs	r0, r2
   1a688:	4b17      	ldr	r3, [pc, #92]	; (1a6e8 <xTaskRemoveFromEventList+0xec>)
   1a68a:	4798      	blx	r3
   1a68c:	e007      	b.n	1a69e <xTaskRemoveFromEventList+0xa2>
   1a68e:	68bb      	ldr	r3, [r7, #8]
   1a690:	3318      	adds	r3, #24
   1a692:	001a      	movs	r2, r3
   1a694:	4b15      	ldr	r3, [pc, #84]	; (1a6ec <xTaskRemoveFromEventList+0xf0>)
   1a696:	0011      	movs	r1, r2
   1a698:	0018      	movs	r0, r3
   1a69a:	4b13      	ldr	r3, [pc, #76]	; (1a6e8 <xTaskRemoveFromEventList+0xec>)
   1a69c:	4798      	blx	r3
   1a69e:	68bb      	ldr	r3, [r7, #8]
   1a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a6a2:	4b13      	ldr	r3, [pc, #76]	; (1a6f0 <xTaskRemoveFromEventList+0xf4>)
   1a6a4:	681b      	ldr	r3, [r3, #0]
   1a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a6a8:	429a      	cmp	r2, r3
   1a6aa:	d905      	bls.n	1a6b8 <xTaskRemoveFromEventList+0xbc>
   1a6ac:	2301      	movs	r3, #1
   1a6ae:	60fb      	str	r3, [r7, #12]
   1a6b0:	4b10      	ldr	r3, [pc, #64]	; (1a6f4 <xTaskRemoveFromEventList+0xf8>)
   1a6b2:	2201      	movs	r2, #1
   1a6b4:	601a      	str	r2, [r3, #0]
   1a6b6:	e001      	b.n	1a6bc <xTaskRemoveFromEventList+0xc0>
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	60fb      	str	r3, [r7, #12]
   1a6bc:	68fb      	ldr	r3, [r7, #12]
   1a6be:	0018      	movs	r0, r3
   1a6c0:	46bd      	mov	sp, r7
   1a6c2:	b004      	add	sp, #16
   1a6c4:	bd80      	pop	{r7, pc}
   1a6c6:	46c0      	nop			; (mov r8, r8)
   1a6c8:	00017be3 	.word	0x00017be3
   1a6cc:	20003c34 	.word	0x20003c34
   1a6d0:	00015d69 	.word	0x00015d69
   1a6d4:	200000f0 	.word	0x200000f0
   1a6d8:	00015d49 	.word	0x00015d49
   1a6dc:	00016519 	.word	0x00016519
   1a6e0:	20003c14 	.word	0x20003c14
   1a6e4:	20003b38 	.word	0x20003b38
   1a6e8:	00017b33 	.word	0x00017b33
   1a6ec:	20003bcc 	.word	0x20003bcc
   1a6f0:	20003b34 	.word	0x20003b34
   1a6f4:	20003c20 	.word	0x20003c20

0001a6f8 <vTaskSetTimeOutState>:
   1a6f8:	b580      	push	{r7, lr}
   1a6fa:	b082      	sub	sp, #8
   1a6fc:	af00      	add	r7, sp, #0
   1a6fe:	6078      	str	r0, [r7, #4]
   1a700:	687b      	ldr	r3, [r7, #4]
   1a702:	2b00      	cmp	r3, #0
   1a704:	d101      	bne.n	1a70a <vTaskSetTimeOutState+0x12>
   1a706:	b672      	cpsid	i
   1a708:	e7fe      	b.n	1a708 <vTaskSetTimeOutState+0x10>
   1a70a:	4b08      	ldr	r3, [pc, #32]	; (1a72c <vTaskSetTimeOutState+0x34>)
   1a70c:	4798      	blx	r3
   1a70e:	4b08      	ldr	r3, [pc, #32]	; (1a730 <vTaskSetTimeOutState+0x38>)
   1a710:	681a      	ldr	r2, [r3, #0]
   1a712:	687b      	ldr	r3, [r7, #4]
   1a714:	601a      	str	r2, [r3, #0]
   1a716:	4b07      	ldr	r3, [pc, #28]	; (1a734 <vTaskSetTimeOutState+0x3c>)
   1a718:	681a      	ldr	r2, [r3, #0]
   1a71a:	687b      	ldr	r3, [r7, #4]
   1a71c:	605a      	str	r2, [r3, #4]
   1a71e:	4b06      	ldr	r3, [pc, #24]	; (1a738 <vTaskSetTimeOutState+0x40>)
   1a720:	4798      	blx	r3
   1a722:	46c0      	nop			; (mov r8, r8)
   1a724:	46bd      	mov	sp, r7
   1a726:	b002      	add	sp, #8
   1a728:	bd80      	pop	{r7, pc}
   1a72a:	46c0      	nop			; (mov r8, r8)
   1a72c:	00017d69 	.word	0x00017d69
   1a730:	20003c24 	.word	0x20003c24
   1a734:	20003c10 	.word	0x20003c10
   1a738:	00017d8d 	.word	0x00017d8d

0001a73c <vTaskInternalSetTimeOutState>:
   1a73c:	b580      	push	{r7, lr}
   1a73e:	b082      	sub	sp, #8
   1a740:	af00      	add	r7, sp, #0
   1a742:	6078      	str	r0, [r7, #4]
   1a744:	4b05      	ldr	r3, [pc, #20]	; (1a75c <vTaskInternalSetTimeOutState+0x20>)
   1a746:	681a      	ldr	r2, [r3, #0]
   1a748:	687b      	ldr	r3, [r7, #4]
   1a74a:	601a      	str	r2, [r3, #0]
   1a74c:	4b04      	ldr	r3, [pc, #16]	; (1a760 <vTaskInternalSetTimeOutState+0x24>)
   1a74e:	681a      	ldr	r2, [r3, #0]
   1a750:	687b      	ldr	r3, [r7, #4]
   1a752:	605a      	str	r2, [r3, #4]
   1a754:	46c0      	nop			; (mov r8, r8)
   1a756:	46bd      	mov	sp, r7
   1a758:	b002      	add	sp, #8
   1a75a:	bd80      	pop	{r7, pc}
   1a75c:	20003c24 	.word	0x20003c24
   1a760:	20003c10 	.word	0x20003c10

0001a764 <xTaskCheckForTimeOut>:
   1a764:	b580      	push	{r7, lr}
   1a766:	b086      	sub	sp, #24
   1a768:	af00      	add	r7, sp, #0
   1a76a:	6078      	str	r0, [r7, #4]
   1a76c:	6039      	str	r1, [r7, #0]
   1a76e:	687b      	ldr	r3, [r7, #4]
   1a770:	2b00      	cmp	r3, #0
   1a772:	d101      	bne.n	1a778 <xTaskCheckForTimeOut+0x14>
   1a774:	b672      	cpsid	i
   1a776:	e7fe      	b.n	1a776 <xTaskCheckForTimeOut+0x12>
   1a778:	683b      	ldr	r3, [r7, #0]
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d101      	bne.n	1a782 <xTaskCheckForTimeOut+0x1e>
   1a77e:	b672      	cpsid	i
   1a780:	e7fe      	b.n	1a780 <xTaskCheckForTimeOut+0x1c>
   1a782:	4b1e      	ldr	r3, [pc, #120]	; (1a7fc <xTaskCheckForTimeOut+0x98>)
   1a784:	4798      	blx	r3
   1a786:	4b1e      	ldr	r3, [pc, #120]	; (1a800 <xTaskCheckForTimeOut+0x9c>)
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	613b      	str	r3, [r7, #16]
   1a78c:	687b      	ldr	r3, [r7, #4]
   1a78e:	685b      	ldr	r3, [r3, #4]
   1a790:	693a      	ldr	r2, [r7, #16]
   1a792:	1ad3      	subs	r3, r2, r3
   1a794:	60fb      	str	r3, [r7, #12]
   1a796:	683b      	ldr	r3, [r7, #0]
   1a798:	681b      	ldr	r3, [r3, #0]
   1a79a:	3301      	adds	r3, #1
   1a79c:	d102      	bne.n	1a7a4 <xTaskCheckForTimeOut+0x40>
   1a79e:	2300      	movs	r3, #0
   1a7a0:	617b      	str	r3, [r7, #20]
   1a7a2:	e024      	b.n	1a7ee <xTaskCheckForTimeOut+0x8a>
   1a7a4:	687b      	ldr	r3, [r7, #4]
   1a7a6:	681a      	ldr	r2, [r3, #0]
   1a7a8:	4b16      	ldr	r3, [pc, #88]	; (1a804 <xTaskCheckForTimeOut+0xa0>)
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	429a      	cmp	r2, r3
   1a7ae:	d007      	beq.n	1a7c0 <xTaskCheckForTimeOut+0x5c>
   1a7b0:	687b      	ldr	r3, [r7, #4]
   1a7b2:	685a      	ldr	r2, [r3, #4]
   1a7b4:	693b      	ldr	r3, [r7, #16]
   1a7b6:	429a      	cmp	r2, r3
   1a7b8:	d802      	bhi.n	1a7c0 <xTaskCheckForTimeOut+0x5c>
   1a7ba:	2301      	movs	r3, #1
   1a7bc:	617b      	str	r3, [r7, #20]
   1a7be:	e016      	b.n	1a7ee <xTaskCheckForTimeOut+0x8a>
   1a7c0:	683b      	ldr	r3, [r7, #0]
   1a7c2:	681a      	ldr	r2, [r3, #0]
   1a7c4:	68fb      	ldr	r3, [r7, #12]
   1a7c6:	429a      	cmp	r2, r3
   1a7c8:	d90c      	bls.n	1a7e4 <xTaskCheckForTimeOut+0x80>
   1a7ca:	683b      	ldr	r3, [r7, #0]
   1a7cc:	681a      	ldr	r2, [r3, #0]
   1a7ce:	68fb      	ldr	r3, [r7, #12]
   1a7d0:	1ad2      	subs	r2, r2, r3
   1a7d2:	683b      	ldr	r3, [r7, #0]
   1a7d4:	601a      	str	r2, [r3, #0]
   1a7d6:	687b      	ldr	r3, [r7, #4]
   1a7d8:	0018      	movs	r0, r3
   1a7da:	4b0b      	ldr	r3, [pc, #44]	; (1a808 <xTaskCheckForTimeOut+0xa4>)
   1a7dc:	4798      	blx	r3
   1a7de:	2300      	movs	r3, #0
   1a7e0:	617b      	str	r3, [r7, #20]
   1a7e2:	e004      	b.n	1a7ee <xTaskCheckForTimeOut+0x8a>
   1a7e4:	683b      	ldr	r3, [r7, #0]
   1a7e6:	2200      	movs	r2, #0
   1a7e8:	601a      	str	r2, [r3, #0]
   1a7ea:	2301      	movs	r3, #1
   1a7ec:	617b      	str	r3, [r7, #20]
   1a7ee:	4b07      	ldr	r3, [pc, #28]	; (1a80c <xTaskCheckForTimeOut+0xa8>)
   1a7f0:	4798      	blx	r3
   1a7f2:	697b      	ldr	r3, [r7, #20]
   1a7f4:	0018      	movs	r0, r3
   1a7f6:	46bd      	mov	sp, r7
   1a7f8:	b006      	add	sp, #24
   1a7fa:	bd80      	pop	{r7, pc}
   1a7fc:	00017d69 	.word	0x00017d69
   1a800:	20003c10 	.word	0x20003c10
   1a804:	20003c24 	.word	0x20003c24
   1a808:	0001a73d 	.word	0x0001a73d
   1a80c:	00017d8d 	.word	0x00017d8d

0001a810 <vTaskMissedYield>:
   1a810:	b580      	push	{r7, lr}
   1a812:	af00      	add	r7, sp, #0
   1a814:	4b02      	ldr	r3, [pc, #8]	; (1a820 <vTaskMissedYield+0x10>)
   1a816:	2201      	movs	r2, #1
   1a818:	601a      	str	r2, [r3, #0]
   1a81a:	46c0      	nop			; (mov r8, r8)
   1a81c:	46bd      	mov	sp, r7
   1a81e:	bd80      	pop	{r7, pc}
   1a820:	20003c20 	.word	0x20003c20

0001a824 <uxTaskGetTaskNumber>:
   1a824:	b580      	push	{r7, lr}
   1a826:	b084      	sub	sp, #16
   1a828:	af00      	add	r7, sp, #0
   1a82a:	6078      	str	r0, [r7, #4]
   1a82c:	687b      	ldr	r3, [r7, #4]
   1a82e:	2b00      	cmp	r3, #0
   1a830:	d005      	beq.n	1a83e <uxTaskGetTaskNumber+0x1a>
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	60bb      	str	r3, [r7, #8]
   1a836:	68bb      	ldr	r3, [r7, #8]
   1a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a83a:	60fb      	str	r3, [r7, #12]
   1a83c:	e001      	b.n	1a842 <uxTaskGetTaskNumber+0x1e>
   1a83e:	2300      	movs	r3, #0
   1a840:	60fb      	str	r3, [r7, #12]
   1a842:	68fb      	ldr	r3, [r7, #12]
   1a844:	0018      	movs	r0, r3
   1a846:	46bd      	mov	sp, r7
   1a848:	b004      	add	sp, #16
   1a84a:	bd80      	pop	{r7, pc}

0001a84c <vTaskSetTaskNumber>:
   1a84c:	b580      	push	{r7, lr}
   1a84e:	b084      	sub	sp, #16
   1a850:	af00      	add	r7, sp, #0
   1a852:	6078      	str	r0, [r7, #4]
   1a854:	6039      	str	r1, [r7, #0]
   1a856:	687b      	ldr	r3, [r7, #4]
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d004      	beq.n	1a866 <vTaskSetTaskNumber+0x1a>
   1a85c:	687b      	ldr	r3, [r7, #4]
   1a85e:	60fb      	str	r3, [r7, #12]
   1a860:	68fb      	ldr	r3, [r7, #12]
   1a862:	683a      	ldr	r2, [r7, #0]
   1a864:	641a      	str	r2, [r3, #64]	; 0x40
   1a866:	46c0      	nop			; (mov r8, r8)
   1a868:	46bd      	mov	sp, r7
   1a86a:	b004      	add	sp, #16
   1a86c:	bd80      	pop	{r7, pc}
	...

0001a870 <prvIdleTask>:
   1a870:	b580      	push	{r7, lr}
   1a872:	b082      	sub	sp, #8
   1a874:	af00      	add	r7, sp, #0
   1a876:	6078      	str	r0, [r7, #4]
   1a878:	4b04      	ldr	r3, [pc, #16]	; (1a88c <prvIdleTask+0x1c>)
   1a87a:	4798      	blx	r3
   1a87c:	4b04      	ldr	r3, [pc, #16]	; (1a890 <prvIdleTask+0x20>)
   1a87e:	681b      	ldr	r3, [r3, #0]
   1a880:	2b01      	cmp	r3, #1
   1a882:	d9f9      	bls.n	1a878 <prvIdleTask+0x8>
   1a884:	4b03      	ldr	r3, [pc, #12]	; (1a894 <prvIdleTask+0x24>)
   1a886:	4798      	blx	r3
   1a888:	e7f6      	b.n	1a878 <prvIdleTask+0x8>
   1a88a:	46c0      	nop			; (mov r8, r8)
   1a88c:	0001a925 	.word	0x0001a925
   1a890:	20003b38 	.word	0x20003b38
   1a894:	00017d51 	.word	0x00017d51

0001a898 <prvInitialiseTaskLists>:
   1a898:	b580      	push	{r7, lr}
   1a89a:	b082      	sub	sp, #8
   1a89c:	af00      	add	r7, sp, #0
   1a89e:	2300      	movs	r3, #0
   1a8a0:	607b      	str	r3, [r7, #4]
   1a8a2:	e00c      	b.n	1a8be <prvInitialiseTaskLists+0x26>
   1a8a4:	687a      	ldr	r2, [r7, #4]
   1a8a6:	0013      	movs	r3, r2
   1a8a8:	009b      	lsls	r3, r3, #2
   1a8aa:	189b      	adds	r3, r3, r2
   1a8ac:	009b      	lsls	r3, r3, #2
   1a8ae:	4a14      	ldr	r2, [pc, #80]	; (1a900 <prvInitialiseTaskLists+0x68>)
   1a8b0:	189b      	adds	r3, r3, r2
   1a8b2:	0018      	movs	r0, r3
   1a8b4:	4b13      	ldr	r3, [pc, #76]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8b6:	4798      	blx	r3
   1a8b8:	687b      	ldr	r3, [r7, #4]
   1a8ba:	3301      	adds	r3, #1
   1a8bc:	607b      	str	r3, [r7, #4]
   1a8be:	687b      	ldr	r3, [r7, #4]
   1a8c0:	2b04      	cmp	r3, #4
   1a8c2:	d9ef      	bls.n	1a8a4 <prvInitialiseTaskLists+0xc>
   1a8c4:	4b10      	ldr	r3, [pc, #64]	; (1a908 <prvInitialiseTaskLists+0x70>)
   1a8c6:	0018      	movs	r0, r3
   1a8c8:	4b0e      	ldr	r3, [pc, #56]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8ca:	4798      	blx	r3
   1a8cc:	4b0f      	ldr	r3, [pc, #60]	; (1a90c <prvInitialiseTaskLists+0x74>)
   1a8ce:	0018      	movs	r0, r3
   1a8d0:	4b0c      	ldr	r3, [pc, #48]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8d2:	4798      	blx	r3
   1a8d4:	4b0e      	ldr	r3, [pc, #56]	; (1a910 <prvInitialiseTaskLists+0x78>)
   1a8d6:	0018      	movs	r0, r3
   1a8d8:	4b0a      	ldr	r3, [pc, #40]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8da:	4798      	blx	r3
   1a8dc:	4b0d      	ldr	r3, [pc, #52]	; (1a914 <prvInitialiseTaskLists+0x7c>)
   1a8de:	0018      	movs	r0, r3
   1a8e0:	4b08      	ldr	r3, [pc, #32]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8e2:	4798      	blx	r3
   1a8e4:	4b0c      	ldr	r3, [pc, #48]	; (1a918 <prvInitialiseTaskLists+0x80>)
   1a8e6:	0018      	movs	r0, r3
   1a8e8:	4b06      	ldr	r3, [pc, #24]	; (1a904 <prvInitialiseTaskLists+0x6c>)
   1a8ea:	4798      	blx	r3
   1a8ec:	4b0b      	ldr	r3, [pc, #44]	; (1a91c <prvInitialiseTaskLists+0x84>)
   1a8ee:	4a06      	ldr	r2, [pc, #24]	; (1a908 <prvInitialiseTaskLists+0x70>)
   1a8f0:	601a      	str	r2, [r3, #0]
   1a8f2:	4b0b      	ldr	r3, [pc, #44]	; (1a920 <prvInitialiseTaskLists+0x88>)
   1a8f4:	4a05      	ldr	r2, [pc, #20]	; (1a90c <prvInitialiseTaskLists+0x74>)
   1a8f6:	601a      	str	r2, [r3, #0]
   1a8f8:	46c0      	nop			; (mov r8, r8)
   1a8fa:	46bd      	mov	sp, r7
   1a8fc:	b002      	add	sp, #8
   1a8fe:	bd80      	pop	{r7, pc}
   1a900:	20003b38 	.word	0x20003b38
   1a904:	00017ae1 	.word	0x00017ae1
   1a908:	20003b9c 	.word	0x20003b9c
   1a90c:	20003bb0 	.word	0x20003bb0
   1a910:	20003bcc 	.word	0x20003bcc
   1a914:	20003be0 	.word	0x20003be0
   1a918:	20003bf8 	.word	0x20003bf8
   1a91c:	20003bc4 	.word	0x20003bc4
   1a920:	20003bc8 	.word	0x20003bc8

0001a924 <prvCheckTasksWaitingTermination>:
   1a924:	b580      	push	{r7, lr}
   1a926:	b082      	sub	sp, #8
   1a928:	af00      	add	r7, sp, #0
   1a92a:	e01a      	b.n	1a962 <prvCheckTasksWaitingTermination+0x3e>
   1a92c:	4b11      	ldr	r3, [pc, #68]	; (1a974 <prvCheckTasksWaitingTermination+0x50>)
   1a92e:	4798      	blx	r3
   1a930:	4b11      	ldr	r3, [pc, #68]	; (1a978 <prvCheckTasksWaitingTermination+0x54>)
   1a932:	68db      	ldr	r3, [r3, #12]
   1a934:	68db      	ldr	r3, [r3, #12]
   1a936:	607b      	str	r3, [r7, #4]
   1a938:	687b      	ldr	r3, [r7, #4]
   1a93a:	3304      	adds	r3, #4
   1a93c:	0018      	movs	r0, r3
   1a93e:	4b0f      	ldr	r3, [pc, #60]	; (1a97c <prvCheckTasksWaitingTermination+0x58>)
   1a940:	4798      	blx	r3
   1a942:	4b0f      	ldr	r3, [pc, #60]	; (1a980 <prvCheckTasksWaitingTermination+0x5c>)
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	1e5a      	subs	r2, r3, #1
   1a948:	4b0d      	ldr	r3, [pc, #52]	; (1a980 <prvCheckTasksWaitingTermination+0x5c>)
   1a94a:	601a      	str	r2, [r3, #0]
   1a94c:	4b0d      	ldr	r3, [pc, #52]	; (1a984 <prvCheckTasksWaitingTermination+0x60>)
   1a94e:	681b      	ldr	r3, [r3, #0]
   1a950:	1e5a      	subs	r2, r3, #1
   1a952:	4b0c      	ldr	r3, [pc, #48]	; (1a984 <prvCheckTasksWaitingTermination+0x60>)
   1a954:	601a      	str	r2, [r3, #0]
   1a956:	4b0c      	ldr	r3, [pc, #48]	; (1a988 <prvCheckTasksWaitingTermination+0x64>)
   1a958:	4798      	blx	r3
   1a95a:	687b      	ldr	r3, [r7, #4]
   1a95c:	0018      	movs	r0, r3
   1a95e:	4b0b      	ldr	r3, [pc, #44]	; (1a98c <prvCheckTasksWaitingTermination+0x68>)
   1a960:	4798      	blx	r3
   1a962:	4b08      	ldr	r3, [pc, #32]	; (1a984 <prvCheckTasksWaitingTermination+0x60>)
   1a964:	681b      	ldr	r3, [r3, #0]
   1a966:	2b00      	cmp	r3, #0
   1a968:	d1e0      	bne.n	1a92c <prvCheckTasksWaitingTermination+0x8>
   1a96a:	46c0      	nop			; (mov r8, r8)
   1a96c:	46bd      	mov	sp, r7
   1a96e:	b002      	add	sp, #8
   1a970:	bd80      	pop	{r7, pc}
   1a972:	46c0      	nop			; (mov r8, r8)
   1a974:	00017d69 	.word	0x00017d69
   1a978:	20003be0 	.word	0x20003be0
   1a97c:	00017be3 	.word	0x00017be3
   1a980:	20003c0c 	.word	0x20003c0c
   1a984:	20003bf4 	.word	0x20003bf4
   1a988:	00017d8d 	.word	0x00017d8d
   1a98c:	0001aa01 	.word	0x0001aa01

0001a990 <prvTaskCheckFreeStackSpace>:
   1a990:	b580      	push	{r7, lr}
   1a992:	b084      	sub	sp, #16
   1a994:	af00      	add	r7, sp, #0
   1a996:	6078      	str	r0, [r7, #4]
   1a998:	2300      	movs	r3, #0
   1a99a:	60fb      	str	r3, [r7, #12]
   1a99c:	e005      	b.n	1a9aa <prvTaskCheckFreeStackSpace+0x1a>
   1a99e:	687b      	ldr	r3, [r7, #4]
   1a9a0:	3301      	adds	r3, #1
   1a9a2:	607b      	str	r3, [r7, #4]
   1a9a4:	68fb      	ldr	r3, [r7, #12]
   1a9a6:	3301      	adds	r3, #1
   1a9a8:	60fb      	str	r3, [r7, #12]
   1a9aa:	687b      	ldr	r3, [r7, #4]
   1a9ac:	781b      	ldrb	r3, [r3, #0]
   1a9ae:	2ba5      	cmp	r3, #165	; 0xa5
   1a9b0:	d0f5      	beq.n	1a99e <prvTaskCheckFreeStackSpace+0xe>
   1a9b2:	68fb      	ldr	r3, [r7, #12]
   1a9b4:	089b      	lsrs	r3, r3, #2
   1a9b6:	60fb      	str	r3, [r7, #12]
   1a9b8:	68fb      	ldr	r3, [r7, #12]
   1a9ba:	b29b      	uxth	r3, r3
   1a9bc:	0018      	movs	r0, r3
   1a9be:	46bd      	mov	sp, r7
   1a9c0:	b004      	add	sp, #16
   1a9c2:	bd80      	pop	{r7, pc}

0001a9c4 <uxTaskGetStackHighWaterMark>:
   1a9c4:	b580      	push	{r7, lr}
   1a9c6:	b086      	sub	sp, #24
   1a9c8:	af00      	add	r7, sp, #0
   1a9ca:	6078      	str	r0, [r7, #4]
   1a9cc:	687b      	ldr	r3, [r7, #4]
   1a9ce:	2b00      	cmp	r3, #0
   1a9d0:	d102      	bne.n	1a9d8 <uxTaskGetStackHighWaterMark+0x14>
   1a9d2:	4b09      	ldr	r3, [pc, #36]	; (1a9f8 <uxTaskGetStackHighWaterMark+0x34>)
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	e000      	b.n	1a9da <uxTaskGetStackHighWaterMark+0x16>
   1a9d8:	687b      	ldr	r3, [r7, #4]
   1a9da:	617b      	str	r3, [r7, #20]
   1a9dc:	697b      	ldr	r3, [r7, #20]
   1a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a9e0:	613b      	str	r3, [r7, #16]
   1a9e2:	693b      	ldr	r3, [r7, #16]
   1a9e4:	0018      	movs	r0, r3
   1a9e6:	4b05      	ldr	r3, [pc, #20]	; (1a9fc <uxTaskGetStackHighWaterMark+0x38>)
   1a9e8:	4798      	blx	r3
   1a9ea:	0003      	movs	r3, r0
   1a9ec:	60fb      	str	r3, [r7, #12]
   1a9ee:	68fb      	ldr	r3, [r7, #12]
   1a9f0:	0018      	movs	r0, r3
   1a9f2:	46bd      	mov	sp, r7
   1a9f4:	b006      	add	sp, #24
   1a9f6:	bd80      	pop	{r7, pc}
   1a9f8:	20003b34 	.word	0x20003b34
   1a9fc:	0001a991 	.word	0x0001a991

0001aa00 <prvDeleteTCB>:
   1aa00:	b580      	push	{r7, lr}
   1aa02:	b082      	sub	sp, #8
   1aa04:	af00      	add	r7, sp, #0
   1aa06:	6078      	str	r0, [r7, #4]
   1aa08:	687b      	ldr	r3, [r7, #4]
   1aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aa0c:	0018      	movs	r0, r3
   1aa0e:	4b05      	ldr	r3, [pc, #20]	; (1aa24 <prvDeleteTCB+0x24>)
   1aa10:	4798      	blx	r3
   1aa12:	687b      	ldr	r3, [r7, #4]
   1aa14:	0018      	movs	r0, r3
   1aa16:	4b03      	ldr	r3, [pc, #12]	; (1aa24 <prvDeleteTCB+0x24>)
   1aa18:	4798      	blx	r3
   1aa1a:	46c0      	nop			; (mov r8, r8)
   1aa1c:	46bd      	mov	sp, r7
   1aa1e:	b002      	add	sp, #8
   1aa20:	bd80      	pop	{r7, pc}
   1aa22:	46c0      	nop			; (mov r8, r8)
   1aa24:	00017f65 	.word	0x00017f65

0001aa28 <prvResetNextTaskUnblockTime>:
   1aa28:	b580      	push	{r7, lr}
   1aa2a:	b082      	sub	sp, #8
   1aa2c:	af00      	add	r7, sp, #0
   1aa2e:	4b0e      	ldr	r3, [pc, #56]	; (1aa68 <prvResetNextTaskUnblockTime+0x40>)
   1aa30:	681b      	ldr	r3, [r3, #0]
   1aa32:	681b      	ldr	r3, [r3, #0]
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	d101      	bne.n	1aa3c <prvResetNextTaskUnblockTime+0x14>
   1aa38:	2301      	movs	r3, #1
   1aa3a:	e000      	b.n	1aa3e <prvResetNextTaskUnblockTime+0x16>
   1aa3c:	2300      	movs	r3, #0
   1aa3e:	2b00      	cmp	r3, #0
   1aa40:	d004      	beq.n	1aa4c <prvResetNextTaskUnblockTime+0x24>
   1aa42:	4b0a      	ldr	r3, [pc, #40]	; (1aa6c <prvResetNextTaskUnblockTime+0x44>)
   1aa44:	2201      	movs	r2, #1
   1aa46:	4252      	negs	r2, r2
   1aa48:	601a      	str	r2, [r3, #0]
   1aa4a:	e008      	b.n	1aa5e <prvResetNextTaskUnblockTime+0x36>
   1aa4c:	4b06      	ldr	r3, [pc, #24]	; (1aa68 <prvResetNextTaskUnblockTime+0x40>)
   1aa4e:	681b      	ldr	r3, [r3, #0]
   1aa50:	68db      	ldr	r3, [r3, #12]
   1aa52:	68db      	ldr	r3, [r3, #12]
   1aa54:	607b      	str	r3, [r7, #4]
   1aa56:	687b      	ldr	r3, [r7, #4]
   1aa58:	685a      	ldr	r2, [r3, #4]
   1aa5a:	4b04      	ldr	r3, [pc, #16]	; (1aa6c <prvResetNextTaskUnblockTime+0x44>)
   1aa5c:	601a      	str	r2, [r3, #0]
   1aa5e:	46c0      	nop			; (mov r8, r8)
   1aa60:	46bd      	mov	sp, r7
   1aa62:	b002      	add	sp, #8
   1aa64:	bd80      	pop	{r7, pc}
   1aa66:	46c0      	nop			; (mov r8, r8)
   1aa68:	20003bc4 	.word	0x20003bc4
   1aa6c:	20003c2c 	.word	0x20003c2c

0001aa70 <xTaskGetCurrentTaskHandle>:
   1aa70:	b580      	push	{r7, lr}
   1aa72:	b082      	sub	sp, #8
   1aa74:	af00      	add	r7, sp, #0
   1aa76:	4b04      	ldr	r3, [pc, #16]	; (1aa88 <xTaskGetCurrentTaskHandle+0x18>)
   1aa78:	681b      	ldr	r3, [r3, #0]
   1aa7a:	607b      	str	r3, [r7, #4]
   1aa7c:	687b      	ldr	r3, [r7, #4]
   1aa7e:	0018      	movs	r0, r3
   1aa80:	46bd      	mov	sp, r7
   1aa82:	b002      	add	sp, #8
   1aa84:	bd80      	pop	{r7, pc}
   1aa86:	46c0      	nop			; (mov r8, r8)
   1aa88:	20003b34 	.word	0x20003b34

0001aa8c <xTaskGetSchedulerState>:
   1aa8c:	b580      	push	{r7, lr}
   1aa8e:	b082      	sub	sp, #8
   1aa90:	af00      	add	r7, sp, #0
   1aa92:	4b0a      	ldr	r3, [pc, #40]	; (1aabc <xTaskGetSchedulerState+0x30>)
   1aa94:	681b      	ldr	r3, [r3, #0]
   1aa96:	2b00      	cmp	r3, #0
   1aa98:	d102      	bne.n	1aaa0 <xTaskGetSchedulerState+0x14>
   1aa9a:	2301      	movs	r3, #1
   1aa9c:	607b      	str	r3, [r7, #4]
   1aa9e:	e008      	b.n	1aab2 <xTaskGetSchedulerState+0x26>
   1aaa0:	4b07      	ldr	r3, [pc, #28]	; (1aac0 <xTaskGetSchedulerState+0x34>)
   1aaa2:	681b      	ldr	r3, [r3, #0]
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	d102      	bne.n	1aaae <xTaskGetSchedulerState+0x22>
   1aaa8:	2302      	movs	r3, #2
   1aaaa:	607b      	str	r3, [r7, #4]
   1aaac:	e001      	b.n	1aab2 <xTaskGetSchedulerState+0x26>
   1aaae:	2300      	movs	r3, #0
   1aab0:	607b      	str	r3, [r7, #4]
   1aab2:	687b      	ldr	r3, [r7, #4]
   1aab4:	0018      	movs	r0, r3
   1aab6:	46bd      	mov	sp, r7
   1aab8:	b002      	add	sp, #8
   1aaba:	bd80      	pop	{r7, pc}
   1aabc:	20003c18 	.word	0x20003c18
   1aac0:	20003c34 	.word	0x20003c34

0001aac4 <xTaskPriorityInherit>:
   1aac4:	b590      	push	{r4, r7, lr}
   1aac6:	b085      	sub	sp, #20
   1aac8:	af00      	add	r7, sp, #0
   1aaca:	6078      	str	r0, [r7, #4]
   1aacc:	687b      	ldr	r3, [r7, #4]
   1aace:	60bb      	str	r3, [r7, #8]
   1aad0:	2300      	movs	r3, #0
   1aad2:	60fb      	str	r3, [r7, #12]
   1aad4:	687b      	ldr	r3, [r7, #4]
   1aad6:	2b00      	cmp	r3, #0
   1aad8:	d100      	bne.n	1aadc <xTaskPriorityInherit+0x18>
   1aada:	e09d      	b.n	1ac18 <xTaskPriorityInherit+0x154>
   1aadc:	68bb      	ldr	r3, [r7, #8]
   1aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aae0:	4b50      	ldr	r3, [pc, #320]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1aae2:	681b      	ldr	r3, [r3, #0]
   1aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aae6:	429a      	cmp	r2, r3
   1aae8:	d300      	bcc.n	1aaec <xTaskPriorityInherit+0x28>
   1aaea:	e08c      	b.n	1ac06 <xTaskPriorityInherit+0x142>
   1aaec:	68bb      	ldr	r3, [r7, #8]
   1aaee:	699b      	ldr	r3, [r3, #24]
   1aaf0:	2b00      	cmp	r3, #0
   1aaf2:	db06      	blt.n	1ab02 <xTaskPriorityInherit+0x3e>
   1aaf4:	4b4b      	ldr	r3, [pc, #300]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1aaf6:	681b      	ldr	r3, [r3, #0]
   1aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aafa:	2205      	movs	r2, #5
   1aafc:	1ad2      	subs	r2, r2, r3
   1aafe:	68bb      	ldr	r3, [r7, #8]
   1ab00:	619a      	str	r2, [r3, #24]
   1ab02:	68bb      	ldr	r3, [r7, #8]
   1ab04:	6959      	ldr	r1, [r3, #20]
   1ab06:	68bb      	ldr	r3, [r7, #8]
   1ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab0a:	0013      	movs	r3, r2
   1ab0c:	009b      	lsls	r3, r3, #2
   1ab0e:	189b      	adds	r3, r3, r2
   1ab10:	009b      	lsls	r3, r3, #2
   1ab12:	4a45      	ldr	r2, [pc, #276]	; (1ac28 <xTaskPriorityInherit+0x164>)
   1ab14:	189b      	adds	r3, r3, r2
   1ab16:	4299      	cmp	r1, r3
   1ab18:	d101      	bne.n	1ab1e <xTaskPriorityInherit+0x5a>
   1ab1a:	2301      	movs	r3, #1
   1ab1c:	e000      	b.n	1ab20 <xTaskPriorityInherit+0x5c>
   1ab1e:	2300      	movs	r3, #0
   1ab20:	2b00      	cmp	r3, #0
   1ab22:	d037      	beq.n	1ab94 <xTaskPriorityInherit+0xd0>
   1ab24:	68bb      	ldr	r3, [r7, #8]
   1ab26:	3304      	adds	r3, #4
   1ab28:	0018      	movs	r0, r3
   1ab2a:	4b40      	ldr	r3, [pc, #256]	; (1ac2c <xTaskPriorityInherit+0x168>)
   1ab2c:	4798      	blx	r3
   1ab2e:	4b3d      	ldr	r3, [pc, #244]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1ab30:	681b      	ldr	r3, [r3, #0]
   1ab32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab34:	68bb      	ldr	r3, [r7, #8]
   1ab36:	62da      	str	r2, [r3, #44]	; 0x2c
   1ab38:	68bb      	ldr	r3, [r7, #8]
   1ab3a:	0018      	movs	r0, r3
   1ab3c:	4b3c      	ldr	r3, [pc, #240]	; (1ac30 <xTaskPriorityInherit+0x16c>)
   1ab3e:	4798      	blx	r3
   1ab40:	0003      	movs	r3, r0
   1ab42:	001a      	movs	r2, r3
   1ab44:	4b3b      	ldr	r3, [pc, #236]	; (1ac34 <xTaskPriorityInherit+0x170>)
   1ab46:	881b      	ldrh	r3, [r3, #0]
   1ab48:	4013      	ands	r3, r2
   1ab4a:	b29b      	uxth	r3, r3
   1ab4c:	2b00      	cmp	r3, #0
   1ab4e:	d008      	beq.n	1ab62 <xTaskPriorityInherit+0x9e>
   1ab50:	68bb      	ldr	r3, [r7, #8]
   1ab52:	0018      	movs	r0, r3
   1ab54:	4b38      	ldr	r3, [pc, #224]	; (1ac38 <xTaskPriorityInherit+0x174>)
   1ab56:	4798      	blx	r3
   1ab58:	0003      	movs	r3, r0
   1ab5a:	b2db      	uxtb	r3, r3
   1ab5c:	0018      	movs	r0, r3
   1ab5e:	4b37      	ldr	r3, [pc, #220]	; (1ac3c <xTaskPriorityInherit+0x178>)
   1ab60:	4798      	blx	r3
   1ab62:	68bb      	ldr	r3, [r7, #8]
   1ab64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab66:	4b36      	ldr	r3, [pc, #216]	; (1ac40 <xTaskPriorityInherit+0x17c>)
   1ab68:	681b      	ldr	r3, [r3, #0]
   1ab6a:	429a      	cmp	r2, r3
   1ab6c:	d903      	bls.n	1ab76 <xTaskPriorityInherit+0xb2>
   1ab6e:	68bb      	ldr	r3, [r7, #8]
   1ab70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab72:	4b33      	ldr	r3, [pc, #204]	; (1ac40 <xTaskPriorityInherit+0x17c>)
   1ab74:	601a      	str	r2, [r3, #0]
   1ab76:	68bb      	ldr	r3, [r7, #8]
   1ab78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab7a:	0013      	movs	r3, r2
   1ab7c:	009b      	lsls	r3, r3, #2
   1ab7e:	189b      	adds	r3, r3, r2
   1ab80:	009b      	lsls	r3, r3, #2
   1ab82:	4a29      	ldr	r2, [pc, #164]	; (1ac28 <xTaskPriorityInherit+0x164>)
   1ab84:	189a      	adds	r2, r3, r2
   1ab86:	68bb      	ldr	r3, [r7, #8]
   1ab88:	3304      	adds	r3, #4
   1ab8a:	0019      	movs	r1, r3
   1ab8c:	0010      	movs	r0, r2
   1ab8e:	4b2d      	ldr	r3, [pc, #180]	; (1ac44 <xTaskPriorityInherit+0x180>)
   1ab90:	4798      	blx	r3
   1ab92:	e004      	b.n	1ab9e <xTaskPriorityInherit+0xda>
   1ab94:	4b23      	ldr	r3, [pc, #140]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1ab96:	681b      	ldr	r3, [r3, #0]
   1ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab9a:	68bb      	ldr	r3, [r7, #8]
   1ab9c:	62da      	str	r2, [r3, #44]	; 0x2c
   1ab9e:	68bb      	ldr	r3, [r7, #8]
   1aba0:	0018      	movs	r0, r3
   1aba2:	4b23      	ldr	r3, [pc, #140]	; (1ac30 <xTaskPriorityInherit+0x16c>)
   1aba4:	4798      	blx	r3
   1aba6:	0003      	movs	r3, r0
   1aba8:	001a      	movs	r2, r3
   1abaa:	4b22      	ldr	r3, [pc, #136]	; (1ac34 <xTaskPriorityInherit+0x170>)
   1abac:	881b      	ldrh	r3, [r3, #0]
   1abae:	4013      	ands	r3, r2
   1abb0:	b29b      	uxth	r3, r3
   1abb2:	2b00      	cmp	r3, #0
   1abb4:	d024      	beq.n	1ac00 <xTaskPriorityInherit+0x13c>
   1abb6:	68bb      	ldr	r3, [r7, #8]
   1abb8:	0018      	movs	r0, r3
   1abba:	4b1f      	ldr	r3, [pc, #124]	; (1ac38 <xTaskPriorityInherit+0x174>)
   1abbc:	4798      	blx	r3
   1abbe:	0003      	movs	r3, r0
   1abc0:	b2db      	uxtb	r3, r3
   1abc2:	001c      	movs	r4, r3
   1abc4:	68bb      	ldr	r3, [r7, #8]
   1abc6:	0018      	movs	r0, r3
   1abc8:	4b1b      	ldr	r3, [pc, #108]	; (1ac38 <xTaskPriorityInherit+0x174>)
   1abca:	4798      	blx	r3
   1abcc:	0003      	movs	r3, r0
   1abce:	b2db      	uxtb	r3, r3
   1abd0:	0019      	movs	r1, r3
   1abd2:	2003      	movs	r0, #3
   1abd4:	4b1c      	ldr	r3, [pc, #112]	; (1ac48 <xTaskPriorityInherit+0x184>)
   1abd6:	4798      	blx	r3
   1abd8:	0003      	movs	r3, r0
   1abda:	0022      	movs	r2, r4
   1abdc:	2103      	movs	r1, #3
   1abde:	208e      	movs	r0, #142	; 0x8e
   1abe0:	4c1a      	ldr	r4, [pc, #104]	; (1ac4c <xTaskPriorityInherit+0x188>)
   1abe2:	47a0      	blx	r4
   1abe4:	68bb      	ldr	r3, [r7, #8]
   1abe6:	0018      	movs	r0, r3
   1abe8:	4b13      	ldr	r3, [pc, #76]	; (1ac38 <xTaskPriorityInherit+0x174>)
   1abea:	4798      	blx	r3
   1abec:	0003      	movs	r3, r0
   1abee:	b2d9      	uxtb	r1, r3
   1abf0:	4b0c      	ldr	r3, [pc, #48]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1abf2:	681b      	ldr	r3, [r3, #0]
   1abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1abf6:	b2db      	uxtb	r3, r3
   1abf8:	001a      	movs	r2, r3
   1abfa:	2003      	movs	r0, #3
   1abfc:	4b14      	ldr	r3, [pc, #80]	; (1ac50 <xTaskPriorityInherit+0x18c>)
   1abfe:	4798      	blx	r3
   1ac00:	2301      	movs	r3, #1
   1ac02:	60fb      	str	r3, [r7, #12]
   1ac04:	e008      	b.n	1ac18 <xTaskPriorityInherit+0x154>
   1ac06:	68bb      	ldr	r3, [r7, #8]
   1ac08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ac0a:	4b06      	ldr	r3, [pc, #24]	; (1ac24 <xTaskPriorityInherit+0x160>)
   1ac0c:	681b      	ldr	r3, [r3, #0]
   1ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ac10:	429a      	cmp	r2, r3
   1ac12:	d201      	bcs.n	1ac18 <xTaskPriorityInherit+0x154>
   1ac14:	2301      	movs	r3, #1
   1ac16:	60fb      	str	r3, [r7, #12]
   1ac18:	68fb      	ldr	r3, [r7, #12]
   1ac1a:	0018      	movs	r0, r3
   1ac1c:	46bd      	mov	sp, r7
   1ac1e:	b005      	add	sp, #20
   1ac20:	bd90      	pop	{r4, r7, pc}
   1ac22:	46c0      	nop			; (mov r8, r8)
   1ac24:	20003b34 	.word	0x20003b34
   1ac28:	20003b38 	.word	0x20003b38
   1ac2c:	00017be3 	.word	0x00017be3
   1ac30:	00015d69 	.word	0x00015d69
   1ac34:	200000f0 	.word	0x200000f0
   1ac38:	00015d49 	.word	0x00015d49
   1ac3c:	00016519 	.word	0x00016519
   1ac40:	20003c14 	.word	0x20003c14
   1ac44:	00017b33 	.word	0x00017b33
   1ac48:	00016d21 	.word	0x00016d21
   1ac4c:	00016891 	.word	0x00016891
   1ac50:	00016c7d 	.word	0x00016c7d

0001ac54 <xTaskPriorityDisinherit>:
   1ac54:	b590      	push	{r4, r7, lr}
   1ac56:	b085      	sub	sp, #20
   1ac58:	af00      	add	r7, sp, #0
   1ac5a:	6078      	str	r0, [r7, #4]
   1ac5c:	687b      	ldr	r3, [r7, #4]
   1ac5e:	60bb      	str	r3, [r7, #8]
   1ac60:	2300      	movs	r3, #0
   1ac62:	60fb      	str	r3, [r7, #12]
   1ac64:	687b      	ldr	r3, [r7, #4]
   1ac66:	2b00      	cmp	r3, #0
   1ac68:	d100      	bne.n	1ac6c <xTaskPriorityDisinherit+0x18>
   1ac6a:	e089      	b.n	1ad80 <xTaskPriorityDisinherit+0x12c>
   1ac6c:	4b47      	ldr	r3, [pc, #284]	; (1ad8c <xTaskPriorityDisinherit+0x138>)
   1ac6e:	681b      	ldr	r3, [r3, #0]
   1ac70:	68ba      	ldr	r2, [r7, #8]
   1ac72:	429a      	cmp	r2, r3
   1ac74:	d001      	beq.n	1ac7a <xTaskPriorityDisinherit+0x26>
   1ac76:	b672      	cpsid	i
   1ac78:	e7fe      	b.n	1ac78 <xTaskPriorityDisinherit+0x24>
   1ac7a:	68bb      	ldr	r3, [r7, #8]
   1ac7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac7e:	2b00      	cmp	r3, #0
   1ac80:	d101      	bne.n	1ac86 <xTaskPriorityDisinherit+0x32>
   1ac82:	b672      	cpsid	i
   1ac84:	e7fe      	b.n	1ac84 <xTaskPriorityDisinherit+0x30>
   1ac86:	68bb      	ldr	r3, [r7, #8]
   1ac88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac8a:	1e5a      	subs	r2, r3, #1
   1ac8c:	68bb      	ldr	r3, [r7, #8]
   1ac8e:	649a      	str	r2, [r3, #72]	; 0x48
   1ac90:	68bb      	ldr	r3, [r7, #8]
   1ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac94:	68bb      	ldr	r3, [r7, #8]
   1ac96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ac98:	429a      	cmp	r2, r3
   1ac9a:	d071      	beq.n	1ad80 <xTaskPriorityDisinherit+0x12c>
   1ac9c:	68bb      	ldr	r3, [r7, #8]
   1ac9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aca0:	2b00      	cmp	r3, #0
   1aca2:	d16d      	bne.n	1ad80 <xTaskPriorityDisinherit+0x12c>
   1aca4:	68bb      	ldr	r3, [r7, #8]
   1aca6:	3304      	adds	r3, #4
   1aca8:	0018      	movs	r0, r3
   1acaa:	4b39      	ldr	r3, [pc, #228]	; (1ad90 <xTaskPriorityDisinherit+0x13c>)
   1acac:	4798      	blx	r3
   1acae:	68bb      	ldr	r3, [r7, #8]
   1acb0:	0018      	movs	r0, r3
   1acb2:	4b38      	ldr	r3, [pc, #224]	; (1ad94 <xTaskPriorityDisinherit+0x140>)
   1acb4:	4798      	blx	r3
   1acb6:	0003      	movs	r3, r0
   1acb8:	001a      	movs	r2, r3
   1acba:	4b37      	ldr	r3, [pc, #220]	; (1ad98 <xTaskPriorityDisinherit+0x144>)
   1acbc:	881b      	ldrh	r3, [r3, #0]
   1acbe:	4013      	ands	r3, r2
   1acc0:	b29b      	uxth	r3, r3
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d023      	beq.n	1ad0e <xTaskPriorityDisinherit+0xba>
   1acc6:	68bb      	ldr	r3, [r7, #8]
   1acc8:	0018      	movs	r0, r3
   1acca:	4b34      	ldr	r3, [pc, #208]	; (1ad9c <xTaskPriorityDisinherit+0x148>)
   1accc:	4798      	blx	r3
   1acce:	0003      	movs	r3, r0
   1acd0:	b2db      	uxtb	r3, r3
   1acd2:	001c      	movs	r4, r3
   1acd4:	68bb      	ldr	r3, [r7, #8]
   1acd6:	0018      	movs	r0, r3
   1acd8:	4b30      	ldr	r3, [pc, #192]	; (1ad9c <xTaskPriorityDisinherit+0x148>)
   1acda:	4798      	blx	r3
   1acdc:	0003      	movs	r3, r0
   1acde:	b2db      	uxtb	r3, r3
   1ace0:	0019      	movs	r1, r3
   1ace2:	2003      	movs	r0, #3
   1ace4:	4b2e      	ldr	r3, [pc, #184]	; (1ada0 <xTaskPriorityDisinherit+0x14c>)
   1ace6:	4798      	blx	r3
   1ace8:	0003      	movs	r3, r0
   1acea:	0022      	movs	r2, r4
   1acec:	2103      	movs	r1, #3
   1acee:	208f      	movs	r0, #143	; 0x8f
   1acf0:	4c2c      	ldr	r4, [pc, #176]	; (1ada4 <xTaskPriorityDisinherit+0x150>)
   1acf2:	47a0      	blx	r4
   1acf4:	68bb      	ldr	r3, [r7, #8]
   1acf6:	0018      	movs	r0, r3
   1acf8:	4b28      	ldr	r3, [pc, #160]	; (1ad9c <xTaskPriorityDisinherit+0x148>)
   1acfa:	4798      	blx	r3
   1acfc:	0003      	movs	r3, r0
   1acfe:	b2d9      	uxtb	r1, r3
   1ad00:	68bb      	ldr	r3, [r7, #8]
   1ad02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ad04:	b2db      	uxtb	r3, r3
   1ad06:	001a      	movs	r2, r3
   1ad08:	2003      	movs	r0, #3
   1ad0a:	4b27      	ldr	r3, [pc, #156]	; (1ada8 <xTaskPriorityDisinherit+0x154>)
   1ad0c:	4798      	blx	r3
   1ad0e:	68bb      	ldr	r3, [r7, #8]
   1ad10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ad12:	68bb      	ldr	r3, [r7, #8]
   1ad14:	62da      	str	r2, [r3, #44]	; 0x2c
   1ad16:	68bb      	ldr	r3, [r7, #8]
   1ad18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ad1a:	2205      	movs	r2, #5
   1ad1c:	1ad2      	subs	r2, r2, r3
   1ad1e:	68bb      	ldr	r3, [r7, #8]
   1ad20:	619a      	str	r2, [r3, #24]
   1ad22:	68bb      	ldr	r3, [r7, #8]
   1ad24:	0018      	movs	r0, r3
   1ad26:	4b1b      	ldr	r3, [pc, #108]	; (1ad94 <xTaskPriorityDisinherit+0x140>)
   1ad28:	4798      	blx	r3
   1ad2a:	0003      	movs	r3, r0
   1ad2c:	001a      	movs	r2, r3
   1ad2e:	4b1a      	ldr	r3, [pc, #104]	; (1ad98 <xTaskPriorityDisinherit+0x144>)
   1ad30:	881b      	ldrh	r3, [r3, #0]
   1ad32:	4013      	ands	r3, r2
   1ad34:	b29b      	uxth	r3, r3
   1ad36:	2b00      	cmp	r3, #0
   1ad38:	d008      	beq.n	1ad4c <xTaskPriorityDisinherit+0xf8>
   1ad3a:	68bb      	ldr	r3, [r7, #8]
   1ad3c:	0018      	movs	r0, r3
   1ad3e:	4b17      	ldr	r3, [pc, #92]	; (1ad9c <xTaskPriorityDisinherit+0x148>)
   1ad40:	4798      	blx	r3
   1ad42:	0003      	movs	r3, r0
   1ad44:	b2db      	uxtb	r3, r3
   1ad46:	0018      	movs	r0, r3
   1ad48:	4b18      	ldr	r3, [pc, #96]	; (1adac <xTaskPriorityDisinherit+0x158>)
   1ad4a:	4798      	blx	r3
   1ad4c:	68bb      	ldr	r3, [r7, #8]
   1ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad50:	4b17      	ldr	r3, [pc, #92]	; (1adb0 <xTaskPriorityDisinherit+0x15c>)
   1ad52:	681b      	ldr	r3, [r3, #0]
   1ad54:	429a      	cmp	r2, r3
   1ad56:	d903      	bls.n	1ad60 <xTaskPriorityDisinherit+0x10c>
   1ad58:	68bb      	ldr	r3, [r7, #8]
   1ad5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad5c:	4b14      	ldr	r3, [pc, #80]	; (1adb0 <xTaskPriorityDisinherit+0x15c>)
   1ad5e:	601a      	str	r2, [r3, #0]
   1ad60:	68bb      	ldr	r3, [r7, #8]
   1ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad64:	0013      	movs	r3, r2
   1ad66:	009b      	lsls	r3, r3, #2
   1ad68:	189b      	adds	r3, r3, r2
   1ad6a:	009b      	lsls	r3, r3, #2
   1ad6c:	4a11      	ldr	r2, [pc, #68]	; (1adb4 <xTaskPriorityDisinherit+0x160>)
   1ad6e:	189a      	adds	r2, r3, r2
   1ad70:	68bb      	ldr	r3, [r7, #8]
   1ad72:	3304      	adds	r3, #4
   1ad74:	0019      	movs	r1, r3
   1ad76:	0010      	movs	r0, r2
   1ad78:	4b0f      	ldr	r3, [pc, #60]	; (1adb8 <xTaskPriorityDisinherit+0x164>)
   1ad7a:	4798      	blx	r3
   1ad7c:	2301      	movs	r3, #1
   1ad7e:	60fb      	str	r3, [r7, #12]
   1ad80:	68fb      	ldr	r3, [r7, #12]
   1ad82:	0018      	movs	r0, r3
   1ad84:	46bd      	mov	sp, r7
   1ad86:	b005      	add	sp, #20
   1ad88:	bd90      	pop	{r4, r7, pc}
   1ad8a:	46c0      	nop			; (mov r8, r8)
   1ad8c:	20003b34 	.word	0x20003b34
   1ad90:	00017be3 	.word	0x00017be3
   1ad94:	00015d69 	.word	0x00015d69
   1ad98:	200000f0 	.word	0x200000f0
   1ad9c:	00015d49 	.word	0x00015d49
   1ada0:	00016d21 	.word	0x00016d21
   1ada4:	00016891 	.word	0x00016891
   1ada8:	00016c7d 	.word	0x00016c7d
   1adac:	00016519 	.word	0x00016519
   1adb0:	20003c14 	.word	0x20003c14
   1adb4:	20003b38 	.word	0x20003b38
   1adb8:	00017b33 	.word	0x00017b33

0001adbc <vTaskPriorityDisinheritAfterTimeout>:
   1adbc:	b590      	push	{r4, r7, lr}
   1adbe:	b087      	sub	sp, #28
   1adc0:	af00      	add	r7, sp, #0
   1adc2:	6078      	str	r0, [r7, #4]
   1adc4:	6039      	str	r1, [r7, #0]
   1adc6:	687b      	ldr	r3, [r7, #4]
   1adc8:	613b      	str	r3, [r7, #16]
   1adca:	2301      	movs	r3, #1
   1adcc:	60fb      	str	r3, [r7, #12]
   1adce:	687b      	ldr	r3, [r7, #4]
   1add0:	2b00      	cmp	r3, #0
   1add2:	d100      	bne.n	1add6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1add4:	e0a4      	b.n	1af20 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1add6:	693b      	ldr	r3, [r7, #16]
   1add8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1adda:	2b00      	cmp	r3, #0
   1addc:	d101      	bne.n	1ade2 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1adde:	b672      	cpsid	i
   1ade0:	e7fe      	b.n	1ade0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   1ade2:	693b      	ldr	r3, [r7, #16]
   1ade4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ade6:	683b      	ldr	r3, [r7, #0]
   1ade8:	429a      	cmp	r2, r3
   1adea:	d202      	bcs.n	1adf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
   1adec:	683b      	ldr	r3, [r7, #0]
   1adee:	617b      	str	r3, [r7, #20]
   1adf0:	e002      	b.n	1adf8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
   1adf2:	693b      	ldr	r3, [r7, #16]
   1adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1adf6:	617b      	str	r3, [r7, #20]
   1adf8:	693b      	ldr	r3, [r7, #16]
   1adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1adfc:	697b      	ldr	r3, [r7, #20]
   1adfe:	429a      	cmp	r2, r3
   1ae00:	d100      	bne.n	1ae04 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1ae02:	e08d      	b.n	1af20 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1ae04:	693b      	ldr	r3, [r7, #16]
   1ae06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ae08:	68fb      	ldr	r3, [r7, #12]
   1ae0a:	429a      	cmp	r2, r3
   1ae0c:	d000      	beq.n	1ae10 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1ae0e:	e087      	b.n	1af20 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1ae10:	4b45      	ldr	r3, [pc, #276]	; (1af28 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1ae12:	681b      	ldr	r3, [r3, #0]
   1ae14:	693a      	ldr	r2, [r7, #16]
   1ae16:	429a      	cmp	r2, r3
   1ae18:	d101      	bne.n	1ae1e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1ae1a:	b672      	cpsid	i
   1ae1c:	e7fe      	b.n	1ae1c <vTaskPriorityDisinheritAfterTimeout+0x60>
   1ae1e:	693b      	ldr	r3, [r7, #16]
   1ae20:	0018      	movs	r0, r3
   1ae22:	4b42      	ldr	r3, [pc, #264]	; (1af2c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ae24:	4798      	blx	r3
   1ae26:	0003      	movs	r3, r0
   1ae28:	001a      	movs	r2, r3
   1ae2a:	4b41      	ldr	r3, [pc, #260]	; (1af30 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ae2c:	881b      	ldrh	r3, [r3, #0]
   1ae2e:	4013      	ands	r3, r2
   1ae30:	b29b      	uxth	r3, r3
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d023      	beq.n	1ae7e <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1ae36:	693b      	ldr	r3, [r7, #16]
   1ae38:	0018      	movs	r0, r3
   1ae3a:	4b3e      	ldr	r3, [pc, #248]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae3c:	4798      	blx	r3
   1ae3e:	0003      	movs	r3, r0
   1ae40:	b2db      	uxtb	r3, r3
   1ae42:	001c      	movs	r4, r3
   1ae44:	693b      	ldr	r3, [r7, #16]
   1ae46:	0018      	movs	r0, r3
   1ae48:	4b3a      	ldr	r3, [pc, #232]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae4a:	4798      	blx	r3
   1ae4c:	0003      	movs	r3, r0
   1ae4e:	b2db      	uxtb	r3, r3
   1ae50:	0019      	movs	r1, r3
   1ae52:	2003      	movs	r0, #3
   1ae54:	4b38      	ldr	r3, [pc, #224]	; (1af38 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ae56:	4798      	blx	r3
   1ae58:	0003      	movs	r3, r0
   1ae5a:	0022      	movs	r2, r4
   1ae5c:	2103      	movs	r1, #3
   1ae5e:	208f      	movs	r0, #143	; 0x8f
   1ae60:	4c36      	ldr	r4, [pc, #216]	; (1af3c <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1ae62:	47a0      	blx	r4
   1ae64:	693b      	ldr	r3, [r7, #16]
   1ae66:	0018      	movs	r0, r3
   1ae68:	4b32      	ldr	r3, [pc, #200]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae6a:	4798      	blx	r3
   1ae6c:	0003      	movs	r3, r0
   1ae6e:	b2d9      	uxtb	r1, r3
   1ae70:	693b      	ldr	r3, [r7, #16]
   1ae72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ae74:	b2db      	uxtb	r3, r3
   1ae76:	001a      	movs	r2, r3
   1ae78:	2003      	movs	r0, #3
   1ae7a:	4b31      	ldr	r3, [pc, #196]	; (1af40 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1ae7c:	4798      	blx	r3
   1ae7e:	693b      	ldr	r3, [r7, #16]
   1ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ae82:	60bb      	str	r3, [r7, #8]
   1ae84:	693b      	ldr	r3, [r7, #16]
   1ae86:	697a      	ldr	r2, [r7, #20]
   1ae88:	62da      	str	r2, [r3, #44]	; 0x2c
   1ae8a:	693b      	ldr	r3, [r7, #16]
   1ae8c:	699b      	ldr	r3, [r3, #24]
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	db04      	blt.n	1ae9c <vTaskPriorityDisinheritAfterTimeout+0xe0>
   1ae92:	697b      	ldr	r3, [r7, #20]
   1ae94:	2205      	movs	r2, #5
   1ae96:	1ad2      	subs	r2, r2, r3
   1ae98:	693b      	ldr	r3, [r7, #16]
   1ae9a:	619a      	str	r2, [r3, #24]
   1ae9c:	693b      	ldr	r3, [r7, #16]
   1ae9e:	6959      	ldr	r1, [r3, #20]
   1aea0:	68ba      	ldr	r2, [r7, #8]
   1aea2:	0013      	movs	r3, r2
   1aea4:	009b      	lsls	r3, r3, #2
   1aea6:	189b      	adds	r3, r3, r2
   1aea8:	009b      	lsls	r3, r3, #2
   1aeaa:	4a26      	ldr	r2, [pc, #152]	; (1af44 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1aeac:	189b      	adds	r3, r3, r2
   1aeae:	4299      	cmp	r1, r3
   1aeb0:	d101      	bne.n	1aeb6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1aeb2:	2301      	movs	r3, #1
   1aeb4:	e000      	b.n	1aeb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1aeb6:	2300      	movs	r3, #0
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	d031      	beq.n	1af20 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1aebc:	693b      	ldr	r3, [r7, #16]
   1aebe:	3304      	adds	r3, #4
   1aec0:	0018      	movs	r0, r3
   1aec2:	4b21      	ldr	r3, [pc, #132]	; (1af48 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1aec4:	4798      	blx	r3
   1aec6:	693b      	ldr	r3, [r7, #16]
   1aec8:	0018      	movs	r0, r3
   1aeca:	4b18      	ldr	r3, [pc, #96]	; (1af2c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1aecc:	4798      	blx	r3
   1aece:	0003      	movs	r3, r0
   1aed0:	001a      	movs	r2, r3
   1aed2:	4b17      	ldr	r3, [pc, #92]	; (1af30 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1aed4:	881b      	ldrh	r3, [r3, #0]
   1aed6:	4013      	ands	r3, r2
   1aed8:	b29b      	uxth	r3, r3
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	d008      	beq.n	1aef0 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1aede:	693b      	ldr	r3, [r7, #16]
   1aee0:	0018      	movs	r0, r3
   1aee2:	4b14      	ldr	r3, [pc, #80]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1aee4:	4798      	blx	r3
   1aee6:	0003      	movs	r3, r0
   1aee8:	b2db      	uxtb	r3, r3
   1aeea:	0018      	movs	r0, r3
   1aeec:	4b17      	ldr	r3, [pc, #92]	; (1af4c <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1aeee:	4798      	blx	r3
   1aef0:	693b      	ldr	r3, [r7, #16]
   1aef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aef4:	4b16      	ldr	r3, [pc, #88]	; (1af50 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1aef6:	681b      	ldr	r3, [r3, #0]
   1aef8:	429a      	cmp	r2, r3
   1aefa:	d903      	bls.n	1af04 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1aefc:	693b      	ldr	r3, [r7, #16]
   1aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1af00:	4b13      	ldr	r3, [pc, #76]	; (1af50 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1af02:	601a      	str	r2, [r3, #0]
   1af04:	693b      	ldr	r3, [r7, #16]
   1af06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1af08:	0013      	movs	r3, r2
   1af0a:	009b      	lsls	r3, r3, #2
   1af0c:	189b      	adds	r3, r3, r2
   1af0e:	009b      	lsls	r3, r3, #2
   1af10:	4a0c      	ldr	r2, [pc, #48]	; (1af44 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1af12:	189a      	adds	r2, r3, r2
   1af14:	693b      	ldr	r3, [r7, #16]
   1af16:	3304      	adds	r3, #4
   1af18:	0019      	movs	r1, r3
   1af1a:	0010      	movs	r0, r2
   1af1c:	4b0d      	ldr	r3, [pc, #52]	; (1af54 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1af1e:	4798      	blx	r3
   1af20:	46c0      	nop			; (mov r8, r8)
   1af22:	46bd      	mov	sp, r7
   1af24:	b007      	add	sp, #28
   1af26:	bd90      	pop	{r4, r7, pc}
   1af28:	20003b34 	.word	0x20003b34
   1af2c:	00015d69 	.word	0x00015d69
   1af30:	200000f0 	.word	0x200000f0
   1af34:	00015d49 	.word	0x00015d49
   1af38:	00016d21 	.word	0x00016d21
   1af3c:	00016891 	.word	0x00016891
   1af40:	00016c7d 	.word	0x00016c7d
   1af44:	20003b38 	.word	0x20003b38
   1af48:	00017be3 	.word	0x00017be3
   1af4c:	00016519 	.word	0x00016519
   1af50:	20003c14 	.word	0x20003c14
   1af54:	00017b33 	.word	0x00017b33

0001af58 <pvTaskIncrementMutexHeldCount>:
   1af58:	b580      	push	{r7, lr}
   1af5a:	af00      	add	r7, sp, #0
   1af5c:	4b06      	ldr	r3, [pc, #24]	; (1af78 <pvTaskIncrementMutexHeldCount+0x20>)
   1af5e:	681b      	ldr	r3, [r3, #0]
   1af60:	2b00      	cmp	r3, #0
   1af62:	d004      	beq.n	1af6e <pvTaskIncrementMutexHeldCount+0x16>
   1af64:	4b04      	ldr	r3, [pc, #16]	; (1af78 <pvTaskIncrementMutexHeldCount+0x20>)
   1af66:	681b      	ldr	r3, [r3, #0]
   1af68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1af6a:	3201      	adds	r2, #1
   1af6c:	649a      	str	r2, [r3, #72]	; 0x48
   1af6e:	4b02      	ldr	r3, [pc, #8]	; (1af78 <pvTaskIncrementMutexHeldCount+0x20>)
   1af70:	681b      	ldr	r3, [r3, #0]
   1af72:	0018      	movs	r0, r3
   1af74:	46bd      	mov	sp, r7
   1af76:	bd80      	pop	{r7, pc}
   1af78:	20003b34 	.word	0x20003b34

0001af7c <prvAddCurrentTaskToDelayedList>:
   1af7c:	b580      	push	{r7, lr}
   1af7e:	b084      	sub	sp, #16
   1af80:	af00      	add	r7, sp, #0
   1af82:	6078      	str	r0, [r7, #4]
   1af84:	6039      	str	r1, [r7, #0]
   1af86:	4b21      	ldr	r3, [pc, #132]	; (1b00c <prvAddCurrentTaskToDelayedList+0x90>)
   1af88:	681b      	ldr	r3, [r3, #0]
   1af8a:	60fb      	str	r3, [r7, #12]
   1af8c:	4b20      	ldr	r3, [pc, #128]	; (1b010 <prvAddCurrentTaskToDelayedList+0x94>)
   1af8e:	681b      	ldr	r3, [r3, #0]
   1af90:	3304      	adds	r3, #4
   1af92:	0018      	movs	r0, r3
   1af94:	4b1f      	ldr	r3, [pc, #124]	; (1b014 <prvAddCurrentTaskToDelayedList+0x98>)
   1af96:	4798      	blx	r3
   1af98:	687b      	ldr	r3, [r7, #4]
   1af9a:	3301      	adds	r3, #1
   1af9c:	d10b      	bne.n	1afb6 <prvAddCurrentTaskToDelayedList+0x3a>
   1af9e:	683b      	ldr	r3, [r7, #0]
   1afa0:	2b00      	cmp	r3, #0
   1afa2:	d008      	beq.n	1afb6 <prvAddCurrentTaskToDelayedList+0x3a>
   1afa4:	4b1a      	ldr	r3, [pc, #104]	; (1b010 <prvAddCurrentTaskToDelayedList+0x94>)
   1afa6:	681b      	ldr	r3, [r3, #0]
   1afa8:	1d1a      	adds	r2, r3, #4
   1afaa:	4b1b      	ldr	r3, [pc, #108]	; (1b018 <prvAddCurrentTaskToDelayedList+0x9c>)
   1afac:	0011      	movs	r1, r2
   1afae:	0018      	movs	r0, r3
   1afb0:	4b1a      	ldr	r3, [pc, #104]	; (1b01c <prvAddCurrentTaskToDelayedList+0xa0>)
   1afb2:	4798      	blx	r3
   1afb4:	e026      	b.n	1b004 <prvAddCurrentTaskToDelayedList+0x88>
   1afb6:	68fa      	ldr	r2, [r7, #12]
   1afb8:	687b      	ldr	r3, [r7, #4]
   1afba:	18d3      	adds	r3, r2, r3
   1afbc:	60bb      	str	r3, [r7, #8]
   1afbe:	4b14      	ldr	r3, [pc, #80]	; (1b010 <prvAddCurrentTaskToDelayedList+0x94>)
   1afc0:	681b      	ldr	r3, [r3, #0]
   1afc2:	68ba      	ldr	r2, [r7, #8]
   1afc4:	605a      	str	r2, [r3, #4]
   1afc6:	68ba      	ldr	r2, [r7, #8]
   1afc8:	68fb      	ldr	r3, [r7, #12]
   1afca:	429a      	cmp	r2, r3
   1afcc:	d209      	bcs.n	1afe2 <prvAddCurrentTaskToDelayedList+0x66>
   1afce:	4b14      	ldr	r3, [pc, #80]	; (1b020 <prvAddCurrentTaskToDelayedList+0xa4>)
   1afd0:	681a      	ldr	r2, [r3, #0]
   1afd2:	4b0f      	ldr	r3, [pc, #60]	; (1b010 <prvAddCurrentTaskToDelayedList+0x94>)
   1afd4:	681b      	ldr	r3, [r3, #0]
   1afd6:	3304      	adds	r3, #4
   1afd8:	0019      	movs	r1, r3
   1afda:	0010      	movs	r0, r2
   1afdc:	4b11      	ldr	r3, [pc, #68]	; (1b024 <prvAddCurrentTaskToDelayedList+0xa8>)
   1afde:	4798      	blx	r3
   1afe0:	e010      	b.n	1b004 <prvAddCurrentTaskToDelayedList+0x88>
   1afe2:	4b11      	ldr	r3, [pc, #68]	; (1b028 <prvAddCurrentTaskToDelayedList+0xac>)
   1afe4:	681a      	ldr	r2, [r3, #0]
   1afe6:	4b0a      	ldr	r3, [pc, #40]	; (1b010 <prvAddCurrentTaskToDelayedList+0x94>)
   1afe8:	681b      	ldr	r3, [r3, #0]
   1afea:	3304      	adds	r3, #4
   1afec:	0019      	movs	r1, r3
   1afee:	0010      	movs	r0, r2
   1aff0:	4b0c      	ldr	r3, [pc, #48]	; (1b024 <prvAddCurrentTaskToDelayedList+0xa8>)
   1aff2:	4798      	blx	r3
   1aff4:	4b0d      	ldr	r3, [pc, #52]	; (1b02c <prvAddCurrentTaskToDelayedList+0xb0>)
   1aff6:	681b      	ldr	r3, [r3, #0]
   1aff8:	68ba      	ldr	r2, [r7, #8]
   1affa:	429a      	cmp	r2, r3
   1affc:	d202      	bcs.n	1b004 <prvAddCurrentTaskToDelayedList+0x88>
   1affe:	4b0b      	ldr	r3, [pc, #44]	; (1b02c <prvAddCurrentTaskToDelayedList+0xb0>)
   1b000:	68ba      	ldr	r2, [r7, #8]
   1b002:	601a      	str	r2, [r3, #0]
   1b004:	46c0      	nop			; (mov r8, r8)
   1b006:	46bd      	mov	sp, r7
   1b008:	b004      	add	sp, #16
   1b00a:	bd80      	pop	{r7, pc}
   1b00c:	20003c10 	.word	0x20003c10
   1b010:	20003b34 	.word	0x20003b34
   1b014:	00017be3 	.word	0x00017be3
   1b018:	20003bf8 	.word	0x20003bf8
   1b01c:	00017b33 	.word	0x00017b33
   1b020:	20003bc8 	.word	0x20003bc8
   1b024:	00017b77 	.word	0x00017b77
   1b028:	20003bc4 	.word	0x20003bc4
   1b02c:	20003c2c 	.word	0x20003c2c

0001b030 <xTimerCreateTimerTask>:
   1b030:	b590      	push	{r4, r7, lr}
   1b032:	b085      	sub	sp, #20
   1b034:	af02      	add	r7, sp, #8
   1b036:	2300      	movs	r3, #0
   1b038:	607b      	str	r3, [r7, #4]
   1b03a:	4b0e      	ldr	r3, [pc, #56]	; (1b074 <xTimerCreateTimerTask+0x44>)
   1b03c:	4798      	blx	r3
   1b03e:	4b0e      	ldr	r3, [pc, #56]	; (1b078 <xTimerCreateTimerTask+0x48>)
   1b040:	681b      	ldr	r3, [r3, #0]
   1b042:	2b00      	cmp	r3, #0
   1b044:	d00b      	beq.n	1b05e <xTimerCreateTimerTask+0x2e>
   1b046:	490d      	ldr	r1, [pc, #52]	; (1b07c <xTimerCreateTimerTask+0x4c>)
   1b048:	480d      	ldr	r0, [pc, #52]	; (1b080 <xTimerCreateTimerTask+0x50>)
   1b04a:	4b0e      	ldr	r3, [pc, #56]	; (1b084 <xTimerCreateTimerTask+0x54>)
   1b04c:	9301      	str	r3, [sp, #4]
   1b04e:	2302      	movs	r3, #2
   1b050:	9300      	str	r3, [sp, #0]
   1b052:	2300      	movs	r3, #0
   1b054:	2280      	movs	r2, #128	; 0x80
   1b056:	4c0c      	ldr	r4, [pc, #48]	; (1b088 <xTimerCreateTimerTask+0x58>)
   1b058:	47a0      	blx	r4
   1b05a:	0003      	movs	r3, r0
   1b05c:	607b      	str	r3, [r7, #4]
   1b05e:	687b      	ldr	r3, [r7, #4]
   1b060:	2b00      	cmp	r3, #0
   1b062:	d101      	bne.n	1b068 <xTimerCreateTimerTask+0x38>
   1b064:	b672      	cpsid	i
   1b066:	e7fe      	b.n	1b066 <xTimerCreateTimerTask+0x36>
   1b068:	687b      	ldr	r3, [r7, #4]
   1b06a:	0018      	movs	r0, r3
   1b06c:	46bd      	mov	sp, r7
   1b06e:	b003      	add	sp, #12
   1b070:	bd90      	pop	{r4, r7, pc}
   1b072:	46c0      	nop			; (mov r8, r8)
   1b074:	0001b579 	.word	0x0001b579
   1b078:	20003c68 	.word	0x20003c68
   1b07c:	00035730 	.word	0x00035730
   1b080:	0001b1b1 	.word	0x0001b1b1
   1b084:	20003c6c 	.word	0x20003c6c
   1b088:	000199c9 	.word	0x000199c9

0001b08c <xTimerGenericCommand>:
   1b08c:	b590      	push	{r4, r7, lr}
   1b08e:	b089      	sub	sp, #36	; 0x24
   1b090:	af00      	add	r7, sp, #0
   1b092:	60f8      	str	r0, [r7, #12]
   1b094:	60b9      	str	r1, [r7, #8]
   1b096:	607a      	str	r2, [r7, #4]
   1b098:	603b      	str	r3, [r7, #0]
   1b09a:	2300      	movs	r3, #0
   1b09c:	61fb      	str	r3, [r7, #28]
   1b09e:	68fb      	ldr	r3, [r7, #12]
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d101      	bne.n	1b0a8 <xTimerGenericCommand+0x1c>
   1b0a4:	b672      	cpsid	i
   1b0a6:	e7fe      	b.n	1b0a6 <xTimerGenericCommand+0x1a>
   1b0a8:	4b1e      	ldr	r3, [pc, #120]	; (1b124 <xTimerGenericCommand+0x98>)
   1b0aa:	681b      	ldr	r3, [r3, #0]
   1b0ac:	2b00      	cmp	r3, #0
   1b0ae:	d033      	beq.n	1b118 <xTimerGenericCommand+0x8c>
   1b0b0:	2310      	movs	r3, #16
   1b0b2:	18fb      	adds	r3, r7, r3
   1b0b4:	68ba      	ldr	r2, [r7, #8]
   1b0b6:	601a      	str	r2, [r3, #0]
   1b0b8:	2310      	movs	r3, #16
   1b0ba:	18fb      	adds	r3, r7, r3
   1b0bc:	687a      	ldr	r2, [r7, #4]
   1b0be:	605a      	str	r2, [r3, #4]
   1b0c0:	2310      	movs	r3, #16
   1b0c2:	18fb      	adds	r3, r7, r3
   1b0c4:	68fa      	ldr	r2, [r7, #12]
   1b0c6:	609a      	str	r2, [r3, #8]
   1b0c8:	68bb      	ldr	r3, [r7, #8]
   1b0ca:	2b05      	cmp	r3, #5
   1b0cc:	dc1a      	bgt.n	1b104 <xTimerGenericCommand+0x78>
   1b0ce:	4b16      	ldr	r3, [pc, #88]	; (1b128 <xTimerGenericCommand+0x9c>)
   1b0d0:	4798      	blx	r3
   1b0d2:	0003      	movs	r3, r0
   1b0d4:	2b02      	cmp	r3, #2
   1b0d6:	d10a      	bne.n	1b0ee <xTimerGenericCommand+0x62>
   1b0d8:	4b12      	ldr	r3, [pc, #72]	; (1b124 <xTimerGenericCommand+0x98>)
   1b0da:	6818      	ldr	r0, [r3, #0]
   1b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b0de:	2310      	movs	r3, #16
   1b0e0:	18f9      	adds	r1, r7, r3
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	4c11      	ldr	r4, [pc, #68]	; (1b12c <xTimerGenericCommand+0xa0>)
   1b0e6:	47a0      	blx	r4
   1b0e8:	0003      	movs	r3, r0
   1b0ea:	61fb      	str	r3, [r7, #28]
   1b0ec:	e014      	b.n	1b118 <xTimerGenericCommand+0x8c>
   1b0ee:	4b0d      	ldr	r3, [pc, #52]	; (1b124 <xTimerGenericCommand+0x98>)
   1b0f0:	6818      	ldr	r0, [r3, #0]
   1b0f2:	2310      	movs	r3, #16
   1b0f4:	18f9      	adds	r1, r7, r3
   1b0f6:	2300      	movs	r3, #0
   1b0f8:	2200      	movs	r2, #0
   1b0fa:	4c0c      	ldr	r4, [pc, #48]	; (1b12c <xTimerGenericCommand+0xa0>)
   1b0fc:	47a0      	blx	r4
   1b0fe:	0003      	movs	r3, r0
   1b100:	61fb      	str	r3, [r7, #28]
   1b102:	e009      	b.n	1b118 <xTimerGenericCommand+0x8c>
   1b104:	4b07      	ldr	r3, [pc, #28]	; (1b124 <xTimerGenericCommand+0x98>)
   1b106:	6818      	ldr	r0, [r3, #0]
   1b108:	683a      	ldr	r2, [r7, #0]
   1b10a:	2310      	movs	r3, #16
   1b10c:	18f9      	adds	r1, r7, r3
   1b10e:	2300      	movs	r3, #0
   1b110:	4c07      	ldr	r4, [pc, #28]	; (1b130 <xTimerGenericCommand+0xa4>)
   1b112:	47a0      	blx	r4
   1b114:	0003      	movs	r3, r0
   1b116:	61fb      	str	r3, [r7, #28]
   1b118:	69fb      	ldr	r3, [r7, #28]
   1b11a:	0018      	movs	r0, r3
   1b11c:	46bd      	mov	sp, r7
   1b11e:	b009      	add	sp, #36	; 0x24
   1b120:	bd90      	pop	{r4, r7, pc}
   1b122:	46c0      	nop			; (mov r8, r8)
   1b124:	20003c68 	.word	0x20003c68
   1b128:	0001aa8d 	.word	0x0001aa8d
   1b12c:	00018301 	.word	0x00018301
   1b130:	00018761 	.word	0x00018761

0001b134 <prvProcessExpiredTimer>:
   1b134:	b590      	push	{r4, r7, lr}
   1b136:	b087      	sub	sp, #28
   1b138:	af02      	add	r7, sp, #8
   1b13a:	6078      	str	r0, [r7, #4]
   1b13c:	6039      	str	r1, [r7, #0]
   1b13e:	4b18      	ldr	r3, [pc, #96]	; (1b1a0 <prvProcessExpiredTimer+0x6c>)
   1b140:	681b      	ldr	r3, [r3, #0]
   1b142:	68db      	ldr	r3, [r3, #12]
   1b144:	68db      	ldr	r3, [r3, #12]
   1b146:	60fb      	str	r3, [r7, #12]
   1b148:	68fb      	ldr	r3, [r7, #12]
   1b14a:	3304      	adds	r3, #4
   1b14c:	0018      	movs	r0, r3
   1b14e:	4b15      	ldr	r3, [pc, #84]	; (1b1a4 <prvProcessExpiredTimer+0x70>)
   1b150:	4798      	blx	r3
   1b152:	68fb      	ldr	r3, [r7, #12]
   1b154:	69db      	ldr	r3, [r3, #28]
   1b156:	2b01      	cmp	r3, #1
   1b158:	d119      	bne.n	1b18e <prvProcessExpiredTimer+0x5a>
   1b15a:	68fb      	ldr	r3, [r7, #12]
   1b15c:	699a      	ldr	r2, [r3, #24]
   1b15e:	687b      	ldr	r3, [r7, #4]
   1b160:	18d1      	adds	r1, r2, r3
   1b162:	687b      	ldr	r3, [r7, #4]
   1b164:	683a      	ldr	r2, [r7, #0]
   1b166:	68f8      	ldr	r0, [r7, #12]
   1b168:	4c0f      	ldr	r4, [pc, #60]	; (1b1a8 <prvProcessExpiredTimer+0x74>)
   1b16a:	47a0      	blx	r4
   1b16c:	1e03      	subs	r3, r0, #0
   1b16e:	d00e      	beq.n	1b18e <prvProcessExpiredTimer+0x5a>
   1b170:	687a      	ldr	r2, [r7, #4]
   1b172:	68f8      	ldr	r0, [r7, #12]
   1b174:	2300      	movs	r3, #0
   1b176:	9300      	str	r3, [sp, #0]
   1b178:	2300      	movs	r3, #0
   1b17a:	2100      	movs	r1, #0
   1b17c:	4c0b      	ldr	r4, [pc, #44]	; (1b1ac <prvProcessExpiredTimer+0x78>)
   1b17e:	47a0      	blx	r4
   1b180:	0003      	movs	r3, r0
   1b182:	60bb      	str	r3, [r7, #8]
   1b184:	68bb      	ldr	r3, [r7, #8]
   1b186:	2b00      	cmp	r3, #0
   1b188:	d101      	bne.n	1b18e <prvProcessExpiredTimer+0x5a>
   1b18a:	b672      	cpsid	i
   1b18c:	e7fe      	b.n	1b18c <prvProcessExpiredTimer+0x58>
   1b18e:	68fb      	ldr	r3, [r7, #12]
   1b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b192:	68fa      	ldr	r2, [r7, #12]
   1b194:	0010      	movs	r0, r2
   1b196:	4798      	blx	r3
   1b198:	46c0      	nop			; (mov r8, r8)
   1b19a:	46bd      	mov	sp, r7
   1b19c:	b005      	add	sp, #20
   1b19e:	bd90      	pop	{r4, r7, pc}
   1b1a0:	20003c60 	.word	0x20003c60
   1b1a4:	00017be3 	.word	0x00017be3
   1b1a8:	0001b319 	.word	0x0001b319
   1b1ac:	0001b08d 	.word	0x0001b08d

0001b1b0 <prvTimerTask>:
   1b1b0:	b580      	push	{r7, lr}
   1b1b2:	b084      	sub	sp, #16
   1b1b4:	af00      	add	r7, sp, #0
   1b1b6:	6078      	str	r0, [r7, #4]
   1b1b8:	4b08      	ldr	r3, [pc, #32]	; (1b1dc <prvTimerTask+0x2c>)
   1b1ba:	4798      	blx	r3
   1b1bc:	2308      	movs	r3, #8
   1b1be:	18fb      	adds	r3, r7, r3
   1b1c0:	0018      	movs	r0, r3
   1b1c2:	4b07      	ldr	r3, [pc, #28]	; (1b1e0 <prvTimerTask+0x30>)
   1b1c4:	4798      	blx	r3
   1b1c6:	0003      	movs	r3, r0
   1b1c8:	60fb      	str	r3, [r7, #12]
   1b1ca:	68ba      	ldr	r2, [r7, #8]
   1b1cc:	68fb      	ldr	r3, [r7, #12]
   1b1ce:	0011      	movs	r1, r2
   1b1d0:	0018      	movs	r0, r3
   1b1d2:	4b04      	ldr	r3, [pc, #16]	; (1b1e4 <prvTimerTask+0x34>)
   1b1d4:	4798      	blx	r3
   1b1d6:	4b04      	ldr	r3, [pc, #16]	; (1b1e8 <prvTimerTask+0x38>)
   1b1d8:	4798      	blx	r3
   1b1da:	e7ef      	b.n	1b1bc <prvTimerTask+0xc>
   1b1dc:	00030381 	.word	0x00030381
   1b1e0:	0001b291 	.word	0x0001b291
   1b1e4:	0001b1ed 	.word	0x0001b1ed
   1b1e8:	0001b3a1 	.word	0x0001b3a1

0001b1ec <prvProcessTimerOrBlockTask>:
   1b1ec:	b580      	push	{r7, lr}
   1b1ee:	b084      	sub	sp, #16
   1b1f0:	af00      	add	r7, sp, #0
   1b1f2:	6078      	str	r0, [r7, #4]
   1b1f4:	6039      	str	r1, [r7, #0]
   1b1f6:	4b1e      	ldr	r3, [pc, #120]	; (1b270 <prvProcessTimerOrBlockTask+0x84>)
   1b1f8:	4798      	blx	r3
   1b1fa:	2308      	movs	r3, #8
   1b1fc:	18fb      	adds	r3, r7, r3
   1b1fe:	0018      	movs	r0, r3
   1b200:	4b1c      	ldr	r3, [pc, #112]	; (1b274 <prvProcessTimerOrBlockTask+0x88>)
   1b202:	4798      	blx	r3
   1b204:	0003      	movs	r3, r0
   1b206:	60fb      	str	r3, [r7, #12]
   1b208:	68bb      	ldr	r3, [r7, #8]
   1b20a:	2b00      	cmp	r3, #0
   1b20c:	d129      	bne.n	1b262 <prvProcessTimerOrBlockTask+0x76>
   1b20e:	683b      	ldr	r3, [r7, #0]
   1b210:	2b00      	cmp	r3, #0
   1b212:	d10c      	bne.n	1b22e <prvProcessTimerOrBlockTask+0x42>
   1b214:	687a      	ldr	r2, [r7, #4]
   1b216:	68fb      	ldr	r3, [r7, #12]
   1b218:	429a      	cmp	r2, r3
   1b21a:	d808      	bhi.n	1b22e <prvProcessTimerOrBlockTask+0x42>
   1b21c:	4b16      	ldr	r3, [pc, #88]	; (1b278 <prvProcessTimerOrBlockTask+0x8c>)
   1b21e:	4798      	blx	r3
   1b220:	68fa      	ldr	r2, [r7, #12]
   1b222:	687b      	ldr	r3, [r7, #4]
   1b224:	0011      	movs	r1, r2
   1b226:	0018      	movs	r0, r3
   1b228:	4b14      	ldr	r3, [pc, #80]	; (1b27c <prvProcessTimerOrBlockTask+0x90>)
   1b22a:	4798      	blx	r3
   1b22c:	e01b      	b.n	1b266 <prvProcessTimerOrBlockTask+0x7a>
   1b22e:	683b      	ldr	r3, [r7, #0]
   1b230:	2b00      	cmp	r3, #0
   1b232:	d006      	beq.n	1b242 <prvProcessTimerOrBlockTask+0x56>
   1b234:	4b12      	ldr	r3, [pc, #72]	; (1b280 <prvProcessTimerOrBlockTask+0x94>)
   1b236:	681b      	ldr	r3, [r3, #0]
   1b238:	681b      	ldr	r3, [r3, #0]
   1b23a:	425a      	negs	r2, r3
   1b23c:	4153      	adcs	r3, r2
   1b23e:	b2db      	uxtb	r3, r3
   1b240:	603b      	str	r3, [r7, #0]
   1b242:	4b10      	ldr	r3, [pc, #64]	; (1b284 <prvProcessTimerOrBlockTask+0x98>)
   1b244:	6818      	ldr	r0, [r3, #0]
   1b246:	687a      	ldr	r2, [r7, #4]
   1b248:	68fb      	ldr	r3, [r7, #12]
   1b24a:	1ad3      	subs	r3, r2, r3
   1b24c:	683a      	ldr	r2, [r7, #0]
   1b24e:	0019      	movs	r1, r3
   1b250:	4b0d      	ldr	r3, [pc, #52]	; (1b288 <prvProcessTimerOrBlockTask+0x9c>)
   1b252:	4798      	blx	r3
   1b254:	4b08      	ldr	r3, [pc, #32]	; (1b278 <prvProcessTimerOrBlockTask+0x8c>)
   1b256:	4798      	blx	r3
   1b258:	1e03      	subs	r3, r0, #0
   1b25a:	d104      	bne.n	1b266 <prvProcessTimerOrBlockTask+0x7a>
   1b25c:	4b0b      	ldr	r3, [pc, #44]	; (1b28c <prvProcessTimerOrBlockTask+0xa0>)
   1b25e:	4798      	blx	r3
   1b260:	e001      	b.n	1b266 <prvProcessTimerOrBlockTask+0x7a>
   1b262:	4b05      	ldr	r3, [pc, #20]	; (1b278 <prvProcessTimerOrBlockTask+0x8c>)
   1b264:	4798      	blx	r3
   1b266:	46c0      	nop			; (mov r8, r8)
   1b268:	46bd      	mov	sp, r7
   1b26a:	b004      	add	sp, #16
   1b26c:	bd80      	pop	{r7, pc}
   1b26e:	46c0      	nop			; (mov r8, r8)
   1b270:	0001a025 	.word	0x0001a025
   1b274:	0001b2d1 	.word	0x0001b2d1
   1b278:	0001a03d 	.word	0x0001a03d
   1b27c:	0001b135 	.word	0x0001b135
   1b280:	20003c64 	.word	0x20003c64
   1b284:	20003c68 	.word	0x20003c68
   1b288:	000197c5 	.word	0x000197c5
   1b28c:	00017d51 	.word	0x00017d51

0001b290 <prvGetNextExpireTime>:
   1b290:	b580      	push	{r7, lr}
   1b292:	b084      	sub	sp, #16
   1b294:	af00      	add	r7, sp, #0
   1b296:	6078      	str	r0, [r7, #4]
   1b298:	4b0c      	ldr	r3, [pc, #48]	; (1b2cc <prvGetNextExpireTime+0x3c>)
   1b29a:	681b      	ldr	r3, [r3, #0]
   1b29c:	681b      	ldr	r3, [r3, #0]
   1b29e:	425a      	negs	r2, r3
   1b2a0:	4153      	adcs	r3, r2
   1b2a2:	b2db      	uxtb	r3, r3
   1b2a4:	001a      	movs	r2, r3
   1b2a6:	687b      	ldr	r3, [r7, #4]
   1b2a8:	601a      	str	r2, [r3, #0]
   1b2aa:	687b      	ldr	r3, [r7, #4]
   1b2ac:	681b      	ldr	r3, [r3, #0]
   1b2ae:	2b00      	cmp	r3, #0
   1b2b0:	d105      	bne.n	1b2be <prvGetNextExpireTime+0x2e>
   1b2b2:	4b06      	ldr	r3, [pc, #24]	; (1b2cc <prvGetNextExpireTime+0x3c>)
   1b2b4:	681b      	ldr	r3, [r3, #0]
   1b2b6:	68db      	ldr	r3, [r3, #12]
   1b2b8:	681b      	ldr	r3, [r3, #0]
   1b2ba:	60fb      	str	r3, [r7, #12]
   1b2bc:	e001      	b.n	1b2c2 <prvGetNextExpireTime+0x32>
   1b2be:	2300      	movs	r3, #0
   1b2c0:	60fb      	str	r3, [r7, #12]
   1b2c2:	68fb      	ldr	r3, [r7, #12]
   1b2c4:	0018      	movs	r0, r3
   1b2c6:	46bd      	mov	sp, r7
   1b2c8:	b004      	add	sp, #16
   1b2ca:	bd80      	pop	{r7, pc}
   1b2cc:	20003c60 	.word	0x20003c60

0001b2d0 <prvSampleTimeNow>:
   1b2d0:	b580      	push	{r7, lr}
   1b2d2:	b084      	sub	sp, #16
   1b2d4:	af00      	add	r7, sp, #0
   1b2d6:	6078      	str	r0, [r7, #4]
   1b2d8:	4b0c      	ldr	r3, [pc, #48]	; (1b30c <prvSampleTimeNow+0x3c>)
   1b2da:	4798      	blx	r3
   1b2dc:	0003      	movs	r3, r0
   1b2de:	60fb      	str	r3, [r7, #12]
   1b2e0:	4b0b      	ldr	r3, [pc, #44]	; (1b310 <prvSampleTimeNow+0x40>)
   1b2e2:	681b      	ldr	r3, [r3, #0]
   1b2e4:	68fa      	ldr	r2, [r7, #12]
   1b2e6:	429a      	cmp	r2, r3
   1b2e8:	d205      	bcs.n	1b2f6 <prvSampleTimeNow+0x26>
   1b2ea:	4b0a      	ldr	r3, [pc, #40]	; (1b314 <prvSampleTimeNow+0x44>)
   1b2ec:	4798      	blx	r3
   1b2ee:	687b      	ldr	r3, [r7, #4]
   1b2f0:	2201      	movs	r2, #1
   1b2f2:	601a      	str	r2, [r3, #0]
   1b2f4:	e002      	b.n	1b2fc <prvSampleTimeNow+0x2c>
   1b2f6:	687b      	ldr	r3, [r7, #4]
   1b2f8:	2200      	movs	r2, #0
   1b2fa:	601a      	str	r2, [r3, #0]
   1b2fc:	4b04      	ldr	r3, [pc, #16]	; (1b310 <prvSampleTimeNow+0x40>)
   1b2fe:	68fa      	ldr	r2, [r7, #12]
   1b300:	601a      	str	r2, [r3, #0]
   1b302:	68fb      	ldr	r3, [r7, #12]
   1b304:	0018      	movs	r0, r3
   1b306:	46bd      	mov	sp, r7
   1b308:	b004      	add	sp, #16
   1b30a:	bd80      	pop	{r7, pc}
   1b30c:	0001a1ad 	.word	0x0001a1ad
   1b310:	20003c70 	.word	0x20003c70
   1b314:	0001b4b9 	.word	0x0001b4b9

0001b318 <prvInsertTimerInActiveList>:
   1b318:	b580      	push	{r7, lr}
   1b31a:	b086      	sub	sp, #24
   1b31c:	af00      	add	r7, sp, #0
   1b31e:	60f8      	str	r0, [r7, #12]
   1b320:	60b9      	str	r1, [r7, #8]
   1b322:	607a      	str	r2, [r7, #4]
   1b324:	603b      	str	r3, [r7, #0]
   1b326:	2300      	movs	r3, #0
   1b328:	617b      	str	r3, [r7, #20]
   1b32a:	68fb      	ldr	r3, [r7, #12]
   1b32c:	68ba      	ldr	r2, [r7, #8]
   1b32e:	605a      	str	r2, [r3, #4]
   1b330:	68fb      	ldr	r3, [r7, #12]
   1b332:	68fa      	ldr	r2, [r7, #12]
   1b334:	611a      	str	r2, [r3, #16]
   1b336:	68ba      	ldr	r2, [r7, #8]
   1b338:	687b      	ldr	r3, [r7, #4]
   1b33a:	429a      	cmp	r2, r3
   1b33c:	d812      	bhi.n	1b364 <prvInsertTimerInActiveList+0x4c>
   1b33e:	687a      	ldr	r2, [r7, #4]
   1b340:	683b      	ldr	r3, [r7, #0]
   1b342:	1ad2      	subs	r2, r2, r3
   1b344:	68fb      	ldr	r3, [r7, #12]
   1b346:	699b      	ldr	r3, [r3, #24]
   1b348:	429a      	cmp	r2, r3
   1b34a:	d302      	bcc.n	1b352 <prvInsertTimerInActiveList+0x3a>
   1b34c:	2301      	movs	r3, #1
   1b34e:	617b      	str	r3, [r7, #20]
   1b350:	e01b      	b.n	1b38a <prvInsertTimerInActiveList+0x72>
   1b352:	4b10      	ldr	r3, [pc, #64]	; (1b394 <prvInsertTimerInActiveList+0x7c>)
   1b354:	681a      	ldr	r2, [r3, #0]
   1b356:	68fb      	ldr	r3, [r7, #12]
   1b358:	3304      	adds	r3, #4
   1b35a:	0019      	movs	r1, r3
   1b35c:	0010      	movs	r0, r2
   1b35e:	4b0e      	ldr	r3, [pc, #56]	; (1b398 <prvInsertTimerInActiveList+0x80>)
   1b360:	4798      	blx	r3
   1b362:	e012      	b.n	1b38a <prvInsertTimerInActiveList+0x72>
   1b364:	687a      	ldr	r2, [r7, #4]
   1b366:	683b      	ldr	r3, [r7, #0]
   1b368:	429a      	cmp	r2, r3
   1b36a:	d206      	bcs.n	1b37a <prvInsertTimerInActiveList+0x62>
   1b36c:	68ba      	ldr	r2, [r7, #8]
   1b36e:	683b      	ldr	r3, [r7, #0]
   1b370:	429a      	cmp	r2, r3
   1b372:	d302      	bcc.n	1b37a <prvInsertTimerInActiveList+0x62>
   1b374:	2301      	movs	r3, #1
   1b376:	617b      	str	r3, [r7, #20]
   1b378:	e007      	b.n	1b38a <prvInsertTimerInActiveList+0x72>
   1b37a:	4b08      	ldr	r3, [pc, #32]	; (1b39c <prvInsertTimerInActiveList+0x84>)
   1b37c:	681a      	ldr	r2, [r3, #0]
   1b37e:	68fb      	ldr	r3, [r7, #12]
   1b380:	3304      	adds	r3, #4
   1b382:	0019      	movs	r1, r3
   1b384:	0010      	movs	r0, r2
   1b386:	4b04      	ldr	r3, [pc, #16]	; (1b398 <prvInsertTimerInActiveList+0x80>)
   1b388:	4798      	blx	r3
   1b38a:	697b      	ldr	r3, [r7, #20]
   1b38c:	0018      	movs	r0, r3
   1b38e:	46bd      	mov	sp, r7
   1b390:	b006      	add	sp, #24
   1b392:	bd80      	pop	{r7, pc}
   1b394:	20003c64 	.word	0x20003c64
   1b398:	00017b77 	.word	0x00017b77
   1b39c:	20003c60 	.word	0x20003c60

0001b3a0 <prvProcessReceivedCommands>:
   1b3a0:	b590      	push	{r4, r7, lr}
   1b3a2:	b08b      	sub	sp, #44	; 0x2c
   1b3a4:	af02      	add	r7, sp, #8
   1b3a6:	e068      	b.n	1b47a <prvProcessReceivedCommands+0xda>
   1b3a8:	2308      	movs	r3, #8
   1b3aa:	18fb      	adds	r3, r7, r3
   1b3ac:	681b      	ldr	r3, [r3, #0]
   1b3ae:	2b00      	cmp	r3, #0
   1b3b0:	db63      	blt.n	1b47a <prvProcessReceivedCommands+0xda>
   1b3b2:	2308      	movs	r3, #8
   1b3b4:	18fb      	adds	r3, r7, r3
   1b3b6:	689b      	ldr	r3, [r3, #8]
   1b3b8:	61fb      	str	r3, [r7, #28]
   1b3ba:	69fb      	ldr	r3, [r7, #28]
   1b3bc:	695b      	ldr	r3, [r3, #20]
   1b3be:	2b00      	cmp	r3, #0
   1b3c0:	d004      	beq.n	1b3cc <prvProcessReceivedCommands+0x2c>
   1b3c2:	69fb      	ldr	r3, [r7, #28]
   1b3c4:	3304      	adds	r3, #4
   1b3c6:	0018      	movs	r0, r3
   1b3c8:	4b33      	ldr	r3, [pc, #204]	; (1b498 <prvProcessReceivedCommands+0xf8>)
   1b3ca:	4798      	blx	r3
   1b3cc:	1d3b      	adds	r3, r7, #4
   1b3ce:	0018      	movs	r0, r3
   1b3d0:	4b32      	ldr	r3, [pc, #200]	; (1b49c <prvProcessReceivedCommands+0xfc>)
   1b3d2:	4798      	blx	r3
   1b3d4:	0003      	movs	r3, r0
   1b3d6:	61bb      	str	r3, [r7, #24]
   1b3d8:	2308      	movs	r3, #8
   1b3da:	18fb      	adds	r3, r7, r3
   1b3dc:	681b      	ldr	r3, [r3, #0]
   1b3de:	2b09      	cmp	r3, #9
   1b3e0:	d84a      	bhi.n	1b478 <prvProcessReceivedCommands+0xd8>
   1b3e2:	009a      	lsls	r2, r3, #2
   1b3e4:	4b2e      	ldr	r3, [pc, #184]	; (1b4a0 <prvProcessReceivedCommands+0x100>)
   1b3e6:	18d3      	adds	r3, r2, r3
   1b3e8:	681b      	ldr	r3, [r3, #0]
   1b3ea:	469f      	mov	pc, r3
   1b3ec:	2308      	movs	r3, #8
   1b3ee:	18fb      	adds	r3, r7, r3
   1b3f0:	685a      	ldr	r2, [r3, #4]
   1b3f2:	69fb      	ldr	r3, [r7, #28]
   1b3f4:	699b      	ldr	r3, [r3, #24]
   1b3f6:	18d1      	adds	r1, r2, r3
   1b3f8:	2308      	movs	r3, #8
   1b3fa:	18fb      	adds	r3, r7, r3
   1b3fc:	685b      	ldr	r3, [r3, #4]
   1b3fe:	69ba      	ldr	r2, [r7, #24]
   1b400:	69f8      	ldr	r0, [r7, #28]
   1b402:	4c28      	ldr	r4, [pc, #160]	; (1b4a4 <prvProcessReceivedCommands+0x104>)
   1b404:	47a0      	blx	r4
   1b406:	1e03      	subs	r3, r0, #0
   1b408:	d037      	beq.n	1b47a <prvProcessReceivedCommands+0xda>
   1b40a:	69fb      	ldr	r3, [r7, #28]
   1b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b40e:	69fa      	ldr	r2, [r7, #28]
   1b410:	0010      	movs	r0, r2
   1b412:	4798      	blx	r3
   1b414:	69fb      	ldr	r3, [r7, #28]
   1b416:	69db      	ldr	r3, [r3, #28]
   1b418:	2b01      	cmp	r3, #1
   1b41a:	d12e      	bne.n	1b47a <prvProcessReceivedCommands+0xda>
   1b41c:	2308      	movs	r3, #8
   1b41e:	18fb      	adds	r3, r7, r3
   1b420:	685a      	ldr	r2, [r3, #4]
   1b422:	69fb      	ldr	r3, [r7, #28]
   1b424:	699b      	ldr	r3, [r3, #24]
   1b426:	18d2      	adds	r2, r2, r3
   1b428:	69f8      	ldr	r0, [r7, #28]
   1b42a:	2300      	movs	r3, #0
   1b42c:	9300      	str	r3, [sp, #0]
   1b42e:	2300      	movs	r3, #0
   1b430:	2100      	movs	r1, #0
   1b432:	4c1d      	ldr	r4, [pc, #116]	; (1b4a8 <prvProcessReceivedCommands+0x108>)
   1b434:	47a0      	blx	r4
   1b436:	0003      	movs	r3, r0
   1b438:	617b      	str	r3, [r7, #20]
   1b43a:	697b      	ldr	r3, [r7, #20]
   1b43c:	2b00      	cmp	r3, #0
   1b43e:	d11c      	bne.n	1b47a <prvProcessReceivedCommands+0xda>
   1b440:	b672      	cpsid	i
   1b442:	e7fe      	b.n	1b442 <prvProcessReceivedCommands+0xa2>
   1b444:	2308      	movs	r3, #8
   1b446:	18fb      	adds	r3, r7, r3
   1b448:	685a      	ldr	r2, [r3, #4]
   1b44a:	69fb      	ldr	r3, [r7, #28]
   1b44c:	619a      	str	r2, [r3, #24]
   1b44e:	69fb      	ldr	r3, [r7, #28]
   1b450:	699b      	ldr	r3, [r3, #24]
   1b452:	2b00      	cmp	r3, #0
   1b454:	d101      	bne.n	1b45a <prvProcessReceivedCommands+0xba>
   1b456:	b672      	cpsid	i
   1b458:	e7fe      	b.n	1b458 <prvProcessReceivedCommands+0xb8>
   1b45a:	69fb      	ldr	r3, [r7, #28]
   1b45c:	699a      	ldr	r2, [r3, #24]
   1b45e:	69bb      	ldr	r3, [r7, #24]
   1b460:	18d1      	adds	r1, r2, r3
   1b462:	69bb      	ldr	r3, [r7, #24]
   1b464:	69ba      	ldr	r2, [r7, #24]
   1b466:	69f8      	ldr	r0, [r7, #28]
   1b468:	4c0e      	ldr	r4, [pc, #56]	; (1b4a4 <prvProcessReceivedCommands+0x104>)
   1b46a:	47a0      	blx	r4
   1b46c:	e005      	b.n	1b47a <prvProcessReceivedCommands+0xda>
   1b46e:	69fb      	ldr	r3, [r7, #28]
   1b470:	0018      	movs	r0, r3
   1b472:	4b0e      	ldr	r3, [pc, #56]	; (1b4ac <prvProcessReceivedCommands+0x10c>)
   1b474:	4798      	blx	r3
   1b476:	e000      	b.n	1b47a <prvProcessReceivedCommands+0xda>
   1b478:	46c0      	nop			; (mov r8, r8)
   1b47a:	4b0d      	ldr	r3, [pc, #52]	; (1b4b0 <prvProcessReceivedCommands+0x110>)
   1b47c:	681b      	ldr	r3, [r3, #0]
   1b47e:	2208      	movs	r2, #8
   1b480:	18b9      	adds	r1, r7, r2
   1b482:	2200      	movs	r2, #0
   1b484:	0018      	movs	r0, r3
   1b486:	4b0b      	ldr	r3, [pc, #44]	; (1b4b4 <prvProcessReceivedCommands+0x114>)
   1b488:	4798      	blx	r3
   1b48a:	1e03      	subs	r3, r0, #0
   1b48c:	d18c      	bne.n	1b3a8 <prvProcessReceivedCommands+0x8>
   1b48e:	46c0      	nop			; (mov r8, r8)
   1b490:	46bd      	mov	sp, r7
   1b492:	b009      	add	sp, #36	; 0x24
   1b494:	bd90      	pop	{r4, r7, pc}
   1b496:	46c0      	nop			; (mov r8, r8)
   1b498:	00017be3 	.word	0x00017be3
   1b49c:	0001b2d1 	.word	0x0001b2d1
   1b4a0:	00035738 	.word	0x00035738
   1b4a4:	0001b319 	.word	0x0001b319
   1b4a8:	0001b08d 	.word	0x0001b08d
   1b4ac:	00017f65 	.word	0x00017f65
   1b4b0:	20003c68 	.word	0x20003c68
   1b4b4:	00018bb9 	.word	0x00018bb9

0001b4b8 <prvSwitchTimerLists>:
   1b4b8:	b590      	push	{r4, r7, lr}
   1b4ba:	b089      	sub	sp, #36	; 0x24
   1b4bc:	af02      	add	r7, sp, #8
   1b4be:	e03e      	b.n	1b53e <prvSwitchTimerLists+0x86>
   1b4c0:	4b28      	ldr	r3, [pc, #160]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b4c2:	681b      	ldr	r3, [r3, #0]
   1b4c4:	68db      	ldr	r3, [r3, #12]
   1b4c6:	681b      	ldr	r3, [r3, #0]
   1b4c8:	617b      	str	r3, [r7, #20]
   1b4ca:	4b26      	ldr	r3, [pc, #152]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b4cc:	681b      	ldr	r3, [r3, #0]
   1b4ce:	68db      	ldr	r3, [r3, #12]
   1b4d0:	68db      	ldr	r3, [r3, #12]
   1b4d2:	613b      	str	r3, [r7, #16]
   1b4d4:	693b      	ldr	r3, [r7, #16]
   1b4d6:	3304      	adds	r3, #4
   1b4d8:	0018      	movs	r0, r3
   1b4da:	4b23      	ldr	r3, [pc, #140]	; (1b568 <prvSwitchTimerLists+0xb0>)
   1b4dc:	4798      	blx	r3
   1b4de:	693b      	ldr	r3, [r7, #16]
   1b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b4e2:	693a      	ldr	r2, [r7, #16]
   1b4e4:	0010      	movs	r0, r2
   1b4e6:	4798      	blx	r3
   1b4e8:	693b      	ldr	r3, [r7, #16]
   1b4ea:	69db      	ldr	r3, [r3, #28]
   1b4ec:	2b01      	cmp	r3, #1
   1b4ee:	d126      	bne.n	1b53e <prvSwitchTimerLists+0x86>
   1b4f0:	693b      	ldr	r3, [r7, #16]
   1b4f2:	699a      	ldr	r2, [r3, #24]
   1b4f4:	697b      	ldr	r3, [r7, #20]
   1b4f6:	18d3      	adds	r3, r2, r3
   1b4f8:	60fb      	str	r3, [r7, #12]
   1b4fa:	68fa      	ldr	r2, [r7, #12]
   1b4fc:	697b      	ldr	r3, [r7, #20]
   1b4fe:	429a      	cmp	r2, r3
   1b500:	d90e      	bls.n	1b520 <prvSwitchTimerLists+0x68>
   1b502:	693b      	ldr	r3, [r7, #16]
   1b504:	68fa      	ldr	r2, [r7, #12]
   1b506:	605a      	str	r2, [r3, #4]
   1b508:	693b      	ldr	r3, [r7, #16]
   1b50a:	693a      	ldr	r2, [r7, #16]
   1b50c:	611a      	str	r2, [r3, #16]
   1b50e:	4b15      	ldr	r3, [pc, #84]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b510:	681a      	ldr	r2, [r3, #0]
   1b512:	693b      	ldr	r3, [r7, #16]
   1b514:	3304      	adds	r3, #4
   1b516:	0019      	movs	r1, r3
   1b518:	0010      	movs	r0, r2
   1b51a:	4b14      	ldr	r3, [pc, #80]	; (1b56c <prvSwitchTimerLists+0xb4>)
   1b51c:	4798      	blx	r3
   1b51e:	e00e      	b.n	1b53e <prvSwitchTimerLists+0x86>
   1b520:	697a      	ldr	r2, [r7, #20]
   1b522:	6938      	ldr	r0, [r7, #16]
   1b524:	2300      	movs	r3, #0
   1b526:	9300      	str	r3, [sp, #0]
   1b528:	2300      	movs	r3, #0
   1b52a:	2100      	movs	r1, #0
   1b52c:	4c10      	ldr	r4, [pc, #64]	; (1b570 <prvSwitchTimerLists+0xb8>)
   1b52e:	47a0      	blx	r4
   1b530:	0003      	movs	r3, r0
   1b532:	60bb      	str	r3, [r7, #8]
   1b534:	68bb      	ldr	r3, [r7, #8]
   1b536:	2b00      	cmp	r3, #0
   1b538:	d101      	bne.n	1b53e <prvSwitchTimerLists+0x86>
   1b53a:	b672      	cpsid	i
   1b53c:	e7fe      	b.n	1b53c <prvSwitchTimerLists+0x84>
   1b53e:	4b09      	ldr	r3, [pc, #36]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b540:	681b      	ldr	r3, [r3, #0]
   1b542:	681b      	ldr	r3, [r3, #0]
   1b544:	2b00      	cmp	r3, #0
   1b546:	d1bb      	bne.n	1b4c0 <prvSwitchTimerLists+0x8>
   1b548:	4b06      	ldr	r3, [pc, #24]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b54a:	681b      	ldr	r3, [r3, #0]
   1b54c:	607b      	str	r3, [r7, #4]
   1b54e:	4b09      	ldr	r3, [pc, #36]	; (1b574 <prvSwitchTimerLists+0xbc>)
   1b550:	681a      	ldr	r2, [r3, #0]
   1b552:	4b04      	ldr	r3, [pc, #16]	; (1b564 <prvSwitchTimerLists+0xac>)
   1b554:	601a      	str	r2, [r3, #0]
   1b556:	4b07      	ldr	r3, [pc, #28]	; (1b574 <prvSwitchTimerLists+0xbc>)
   1b558:	687a      	ldr	r2, [r7, #4]
   1b55a:	601a      	str	r2, [r3, #0]
   1b55c:	46c0      	nop			; (mov r8, r8)
   1b55e:	46bd      	mov	sp, r7
   1b560:	b007      	add	sp, #28
   1b562:	bd90      	pop	{r4, r7, pc}
   1b564:	20003c60 	.word	0x20003c60
   1b568:	00017be3 	.word	0x00017be3
   1b56c:	00017b77 	.word	0x00017b77
   1b570:	0001b08d 	.word	0x0001b08d
   1b574:	20003c64 	.word	0x20003c64

0001b578 <prvCheckForValidListAndQueue>:
   1b578:	b580      	push	{r7, lr}
   1b57a:	af00      	add	r7, sp, #0
   1b57c:	4b10      	ldr	r3, [pc, #64]	; (1b5c0 <prvCheckForValidListAndQueue+0x48>)
   1b57e:	4798      	blx	r3
   1b580:	4b10      	ldr	r3, [pc, #64]	; (1b5c4 <prvCheckForValidListAndQueue+0x4c>)
   1b582:	681b      	ldr	r3, [r3, #0]
   1b584:	2b00      	cmp	r3, #0
   1b586:	d115      	bne.n	1b5b4 <prvCheckForValidListAndQueue+0x3c>
   1b588:	4b0f      	ldr	r3, [pc, #60]	; (1b5c8 <prvCheckForValidListAndQueue+0x50>)
   1b58a:	0018      	movs	r0, r3
   1b58c:	4b0f      	ldr	r3, [pc, #60]	; (1b5cc <prvCheckForValidListAndQueue+0x54>)
   1b58e:	4798      	blx	r3
   1b590:	4b0f      	ldr	r3, [pc, #60]	; (1b5d0 <prvCheckForValidListAndQueue+0x58>)
   1b592:	0018      	movs	r0, r3
   1b594:	4b0d      	ldr	r3, [pc, #52]	; (1b5cc <prvCheckForValidListAndQueue+0x54>)
   1b596:	4798      	blx	r3
   1b598:	4b0e      	ldr	r3, [pc, #56]	; (1b5d4 <prvCheckForValidListAndQueue+0x5c>)
   1b59a:	4a0b      	ldr	r2, [pc, #44]	; (1b5c8 <prvCheckForValidListAndQueue+0x50>)
   1b59c:	601a      	str	r2, [r3, #0]
   1b59e:	4b0e      	ldr	r3, [pc, #56]	; (1b5d8 <prvCheckForValidListAndQueue+0x60>)
   1b5a0:	4a0b      	ldr	r2, [pc, #44]	; (1b5d0 <prvCheckForValidListAndQueue+0x58>)
   1b5a2:	601a      	str	r2, [r3, #0]
   1b5a4:	2200      	movs	r2, #0
   1b5a6:	210c      	movs	r1, #12
   1b5a8:	2005      	movs	r0, #5
   1b5aa:	4b0c      	ldr	r3, [pc, #48]	; (1b5dc <prvCheckForValidListAndQueue+0x64>)
   1b5ac:	4798      	blx	r3
   1b5ae:	0002      	movs	r2, r0
   1b5b0:	4b04      	ldr	r3, [pc, #16]	; (1b5c4 <prvCheckForValidListAndQueue+0x4c>)
   1b5b2:	601a      	str	r2, [r3, #0]
   1b5b4:	4b0a      	ldr	r3, [pc, #40]	; (1b5e0 <prvCheckForValidListAndQueue+0x68>)
   1b5b6:	4798      	blx	r3
   1b5b8:	46c0      	nop			; (mov r8, r8)
   1b5ba:	46bd      	mov	sp, r7
   1b5bc:	bd80      	pop	{r7, pc}
   1b5be:	46c0      	nop			; (mov r8, r8)
   1b5c0:	00017d69 	.word	0x00017d69
   1b5c4:	20003c68 	.word	0x20003c68
   1b5c8:	20003c38 	.word	0x20003c38
   1b5cc:	00017ae1 	.word	0x00017ae1
   1b5d0:	20003c4c 	.word	0x20003c4c
   1b5d4:	20003c60 	.word	0x20003c60
   1b5d8:	20003c64 	.word	0x20003c64
   1b5dc:	00018059 	.word	0x00018059
   1b5e0:	00017d8d 	.word	0x00017d8d

0001b5e4 <advance_pointer>:
   1b5e4:	b580      	push	{r7, lr}
   1b5e6:	b082      	sub	sp, #8
   1b5e8:	af00      	add	r7, sp, #0
   1b5ea:	6078      	str	r0, [r7, #4]
   1b5ec:	687b      	ldr	r3, [r7, #4]
   1b5ee:	7c1b      	ldrb	r3, [r3, #16]
   1b5f0:	2b00      	cmp	r3, #0
   1b5f2:	d00b      	beq.n	1b60c <advance_pointer+0x28>
   1b5f4:	687b      	ldr	r3, [r7, #4]
   1b5f6:	689b      	ldr	r3, [r3, #8]
   1b5f8:	1c5a      	adds	r2, r3, #1
   1b5fa:	687b      	ldr	r3, [r7, #4]
   1b5fc:	68d9      	ldr	r1, [r3, #12]
   1b5fe:	4b10      	ldr	r3, [pc, #64]	; (1b640 <advance_pointer+0x5c>)
   1b600:	0010      	movs	r0, r2
   1b602:	4798      	blx	r3
   1b604:	000b      	movs	r3, r1
   1b606:	001a      	movs	r2, r3
   1b608:	687b      	ldr	r3, [r7, #4]
   1b60a:	609a      	str	r2, [r3, #8]
   1b60c:	687b      	ldr	r3, [r7, #4]
   1b60e:	685b      	ldr	r3, [r3, #4]
   1b610:	1c5a      	adds	r2, r3, #1
   1b612:	687b      	ldr	r3, [r7, #4]
   1b614:	68d9      	ldr	r1, [r3, #12]
   1b616:	4b0a      	ldr	r3, [pc, #40]	; (1b640 <advance_pointer+0x5c>)
   1b618:	0010      	movs	r0, r2
   1b61a:	4798      	blx	r3
   1b61c:	000b      	movs	r3, r1
   1b61e:	001a      	movs	r2, r3
   1b620:	687b      	ldr	r3, [r7, #4]
   1b622:	605a      	str	r2, [r3, #4]
   1b624:	687b      	ldr	r3, [r7, #4]
   1b626:	685a      	ldr	r2, [r3, #4]
   1b628:	687b      	ldr	r3, [r7, #4]
   1b62a:	689b      	ldr	r3, [r3, #8]
   1b62c:	1ad3      	subs	r3, r2, r3
   1b62e:	425a      	negs	r2, r3
   1b630:	4153      	adcs	r3, r2
   1b632:	b2da      	uxtb	r2, r3
   1b634:	687b      	ldr	r3, [r7, #4]
   1b636:	741a      	strb	r2, [r3, #16]
   1b638:	46c0      	nop			; (mov r8, r8)
   1b63a:	46bd      	mov	sp, r7
   1b63c:	b002      	add	sp, #8
   1b63e:	bd80      	pop	{r7, pc}
   1b640:	00030655 	.word	0x00030655

0001b644 <retreat_pointer>:
   1b644:	b580      	push	{r7, lr}
   1b646:	b082      	sub	sp, #8
   1b648:	af00      	add	r7, sp, #0
   1b64a:	6078      	str	r0, [r7, #4]
   1b64c:	687b      	ldr	r3, [r7, #4]
   1b64e:	2200      	movs	r2, #0
   1b650:	741a      	strb	r2, [r3, #16]
   1b652:	687b      	ldr	r3, [r7, #4]
   1b654:	689b      	ldr	r3, [r3, #8]
   1b656:	1c5a      	adds	r2, r3, #1
   1b658:	687b      	ldr	r3, [r7, #4]
   1b65a:	68d9      	ldr	r1, [r3, #12]
   1b65c:	4b05      	ldr	r3, [pc, #20]	; (1b674 <retreat_pointer+0x30>)
   1b65e:	0010      	movs	r0, r2
   1b660:	4798      	blx	r3
   1b662:	000b      	movs	r3, r1
   1b664:	001a      	movs	r2, r3
   1b666:	687b      	ldr	r3, [r7, #4]
   1b668:	609a      	str	r2, [r3, #8]
   1b66a:	46c0      	nop			; (mov r8, r8)
   1b66c:	46bd      	mov	sp, r7
   1b66e:	b002      	add	sp, #8
   1b670:	bd80      	pop	{r7, pc}
   1b672:	46c0      	nop			; (mov r8, r8)
   1b674:	00030655 	.word	0x00030655

0001b678 <circular_buf_init>:
   1b678:	b580      	push	{r7, lr}
   1b67a:	b084      	sub	sp, #16
   1b67c:	af00      	add	r7, sp, #0
   1b67e:	6078      	str	r0, [r7, #4]
   1b680:	6039      	str	r1, [r7, #0]
   1b682:	2014      	movs	r0, #20
   1b684:	4b09      	ldr	r3, [pc, #36]	; (1b6ac <circular_buf_init+0x34>)
   1b686:	4798      	blx	r3
   1b688:	0003      	movs	r3, r0
   1b68a:	60fb      	str	r3, [r7, #12]
   1b68c:	68fb      	ldr	r3, [r7, #12]
   1b68e:	687a      	ldr	r2, [r7, #4]
   1b690:	601a      	str	r2, [r3, #0]
   1b692:	68fb      	ldr	r3, [r7, #12]
   1b694:	683a      	ldr	r2, [r7, #0]
   1b696:	60da      	str	r2, [r3, #12]
   1b698:	68fb      	ldr	r3, [r7, #12]
   1b69a:	0018      	movs	r0, r3
   1b69c:	4b04      	ldr	r3, [pc, #16]	; (1b6b0 <circular_buf_init+0x38>)
   1b69e:	4798      	blx	r3
   1b6a0:	68fb      	ldr	r3, [r7, #12]
   1b6a2:	0018      	movs	r0, r3
   1b6a4:	46bd      	mov	sp, r7
   1b6a6:	b004      	add	sp, #16
   1b6a8:	bd80      	pop	{r7, pc}
   1b6aa:	46c0      	nop			; (mov r8, r8)
   1b6ac:	000321a5 	.word	0x000321a5
   1b6b0:	0001b6b5 	.word	0x0001b6b5

0001b6b4 <circular_buf_reset>:
   1b6b4:	b580      	push	{r7, lr}
   1b6b6:	b082      	sub	sp, #8
   1b6b8:	af00      	add	r7, sp, #0
   1b6ba:	6078      	str	r0, [r7, #4]
   1b6bc:	687b      	ldr	r3, [r7, #4]
   1b6be:	2200      	movs	r2, #0
   1b6c0:	605a      	str	r2, [r3, #4]
   1b6c2:	687b      	ldr	r3, [r7, #4]
   1b6c4:	2200      	movs	r2, #0
   1b6c6:	609a      	str	r2, [r3, #8]
   1b6c8:	687b      	ldr	r3, [r7, #4]
   1b6ca:	2200      	movs	r2, #0
   1b6cc:	741a      	strb	r2, [r3, #16]
   1b6ce:	46c0      	nop			; (mov r8, r8)
   1b6d0:	46bd      	mov	sp, r7
   1b6d2:	b002      	add	sp, #8
   1b6d4:	bd80      	pop	{r7, pc}
	...

0001b6d8 <circular_buf_put>:
   1b6d8:	b580      	push	{r7, lr}
   1b6da:	b082      	sub	sp, #8
   1b6dc:	af00      	add	r7, sp, #0
   1b6de:	6078      	str	r0, [r7, #4]
   1b6e0:	000a      	movs	r2, r1
   1b6e2:	1cfb      	adds	r3, r7, #3
   1b6e4:	701a      	strb	r2, [r3, #0]
   1b6e6:	687b      	ldr	r3, [r7, #4]
   1b6e8:	681a      	ldr	r2, [r3, #0]
   1b6ea:	687b      	ldr	r3, [r7, #4]
   1b6ec:	685b      	ldr	r3, [r3, #4]
   1b6ee:	18d3      	adds	r3, r2, r3
   1b6f0:	1cfa      	adds	r2, r7, #3
   1b6f2:	7812      	ldrb	r2, [r2, #0]
   1b6f4:	701a      	strb	r2, [r3, #0]
   1b6f6:	687b      	ldr	r3, [r7, #4]
   1b6f8:	0018      	movs	r0, r3
   1b6fa:	4b03      	ldr	r3, [pc, #12]	; (1b708 <circular_buf_put+0x30>)
   1b6fc:	4798      	blx	r3
   1b6fe:	46c0      	nop			; (mov r8, r8)
   1b700:	46bd      	mov	sp, r7
   1b702:	b002      	add	sp, #8
   1b704:	bd80      	pop	{r7, pc}
   1b706:	46c0      	nop			; (mov r8, r8)
   1b708:	0001b5e5 	.word	0x0001b5e5

0001b70c <circular_buf_get>:
   1b70c:	b580      	push	{r7, lr}
   1b70e:	b084      	sub	sp, #16
   1b710:	af00      	add	r7, sp, #0
   1b712:	6078      	str	r0, [r7, #4]
   1b714:	6039      	str	r1, [r7, #0]
   1b716:	2301      	movs	r3, #1
   1b718:	425b      	negs	r3, r3
   1b71a:	60fb      	str	r3, [r7, #12]
   1b71c:	687b      	ldr	r3, [r7, #4]
   1b71e:	0018      	movs	r0, r3
   1b720:	4b0d      	ldr	r3, [pc, #52]	; (1b758 <circular_buf_get+0x4c>)
   1b722:	4798      	blx	r3
   1b724:	0003      	movs	r3, r0
   1b726:	001a      	movs	r2, r3
   1b728:	2301      	movs	r3, #1
   1b72a:	4053      	eors	r3, r2
   1b72c:	b2db      	uxtb	r3, r3
   1b72e:	2b00      	cmp	r3, #0
   1b730:	d00d      	beq.n	1b74e <circular_buf_get+0x42>
   1b732:	687b      	ldr	r3, [r7, #4]
   1b734:	681a      	ldr	r2, [r3, #0]
   1b736:	687b      	ldr	r3, [r7, #4]
   1b738:	689b      	ldr	r3, [r3, #8]
   1b73a:	18d3      	adds	r3, r2, r3
   1b73c:	781a      	ldrb	r2, [r3, #0]
   1b73e:	683b      	ldr	r3, [r7, #0]
   1b740:	701a      	strb	r2, [r3, #0]
   1b742:	687b      	ldr	r3, [r7, #4]
   1b744:	0018      	movs	r0, r3
   1b746:	4b05      	ldr	r3, [pc, #20]	; (1b75c <circular_buf_get+0x50>)
   1b748:	4798      	blx	r3
   1b74a:	2300      	movs	r3, #0
   1b74c:	60fb      	str	r3, [r7, #12]
   1b74e:	68fb      	ldr	r3, [r7, #12]
   1b750:	0018      	movs	r0, r3
   1b752:	46bd      	mov	sp, r7
   1b754:	b004      	add	sp, #16
   1b756:	bd80      	pop	{r7, pc}
   1b758:	0001b761 	.word	0x0001b761
   1b75c:	0001b645 	.word	0x0001b645

0001b760 <circular_buf_empty>:
   1b760:	b580      	push	{r7, lr}
   1b762:	b082      	sub	sp, #8
   1b764:	af00      	add	r7, sp, #0
   1b766:	6078      	str	r0, [r7, #4]
   1b768:	687b      	ldr	r3, [r7, #4]
   1b76a:	7c1b      	ldrb	r3, [r3, #16]
   1b76c:	2201      	movs	r2, #1
   1b76e:	4053      	eors	r3, r2
   1b770:	b2db      	uxtb	r3, r3
   1b772:	2b00      	cmp	r3, #0
   1b774:	d007      	beq.n	1b786 <circular_buf_empty+0x26>
   1b776:	687b      	ldr	r3, [r7, #4]
   1b778:	685a      	ldr	r2, [r3, #4]
   1b77a:	687b      	ldr	r3, [r7, #4]
   1b77c:	689b      	ldr	r3, [r3, #8]
   1b77e:	429a      	cmp	r2, r3
   1b780:	d101      	bne.n	1b786 <circular_buf_empty+0x26>
   1b782:	2301      	movs	r3, #1
   1b784:	e000      	b.n	1b788 <circular_buf_empty+0x28>
   1b786:	2300      	movs	r3, #0
   1b788:	1c1a      	adds	r2, r3, #0
   1b78a:	2301      	movs	r3, #1
   1b78c:	4013      	ands	r3, r2
   1b78e:	b2db      	uxtb	r3, r3
   1b790:	0018      	movs	r0, r3
   1b792:	46bd      	mov	sp, r7
   1b794:	b002      	add	sp, #8
   1b796:	bd80      	pop	{r7, pc}

0001b798 <system_interrupt_enable>:
{
   1b798:	b580      	push	{r7, lr}
   1b79a:	b082      	sub	sp, #8
   1b79c:	af00      	add	r7, sp, #0
   1b79e:	0002      	movs	r2, r0
   1b7a0:	1dfb      	adds	r3, r7, #7
   1b7a2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1b7a4:	4b06      	ldr	r3, [pc, #24]	; (1b7c0 <system_interrupt_enable+0x28>)
   1b7a6:	1dfa      	adds	r2, r7, #7
   1b7a8:	7812      	ldrb	r2, [r2, #0]
   1b7aa:	0011      	movs	r1, r2
   1b7ac:	221f      	movs	r2, #31
   1b7ae:	400a      	ands	r2, r1
   1b7b0:	2101      	movs	r1, #1
   1b7b2:	4091      	lsls	r1, r2
   1b7b4:	000a      	movs	r2, r1
   1b7b6:	601a      	str	r2, [r3, #0]
}
   1b7b8:	46c0      	nop			; (mov r8, r8)
   1b7ba:	46bd      	mov	sp, r7
   1b7bc:	b002      	add	sp, #8
   1b7be:	bd80      	pop	{r7, pc}
   1b7c0:	e000e100 	.word	0xe000e100

0001b7c4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1b7c4:	b580      	push	{r7, lr}
   1b7c6:	b084      	sub	sp, #16
   1b7c8:	af00      	add	r7, sp, #0
   1b7ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1b7cc:	687b      	ldr	r3, [r7, #4]
   1b7ce:	681b      	ldr	r3, [r3, #0]
   1b7d0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1b7d2:	68fb      	ldr	r3, [r7, #12]
   1b7d4:	69db      	ldr	r3, [r3, #28]
   1b7d6:	1e5a      	subs	r2, r3, #1
   1b7d8:	4193      	sbcs	r3, r2
   1b7da:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1b7dc:	0018      	movs	r0, r3
   1b7de:	46bd      	mov	sp, r7
   1b7e0:	b004      	add	sp, #16
   1b7e2:	bd80      	pop	{r7, pc}

0001b7e4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1b7e4:	b580      	push	{r7, lr}
   1b7e6:	b082      	sub	sp, #8
   1b7e8:	af00      	add	r7, sp, #0
   1b7ea:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1b7ec:	46c0      	nop			; (mov r8, r8)
   1b7ee:	687b      	ldr	r3, [r7, #4]
   1b7f0:	0018      	movs	r0, r3
   1b7f2:	4b04      	ldr	r3, [pc, #16]	; (1b804 <_usart_wait_for_sync+0x20>)
   1b7f4:	4798      	blx	r3
   1b7f6:	1e03      	subs	r3, r0, #0
   1b7f8:	d1f9      	bne.n	1b7ee <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1b7fa:	46c0      	nop			; (mov r8, r8)
   1b7fc:	46bd      	mov	sp, r7
   1b7fe:	b002      	add	sp, #8
   1b800:	bd80      	pop	{r7, pc}
   1b802:	46c0      	nop			; (mov r8, r8)
   1b804:	0001b7c5 	.word	0x0001b7c5

0001b808 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1b808:	b580      	push	{r7, lr}
   1b80a:	b082      	sub	sp, #8
   1b80c:	af00      	add	r7, sp, #0
   1b80e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1b810:	687b      	ldr	r3, [r7, #4]
   1b812:	2280      	movs	r2, #128	; 0x80
   1b814:	05d2      	lsls	r2, r2, #23
   1b816:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1b818:	687b      	ldr	r3, [r7, #4]
   1b81a:	2200      	movs	r2, #0
   1b81c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1b81e:	687b      	ldr	r3, [r7, #4]
   1b820:	22ff      	movs	r2, #255	; 0xff
   1b822:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1b824:	687b      	ldr	r3, [r7, #4]
   1b826:	2200      	movs	r2, #0
   1b828:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1b82a:	687b      	ldr	r3, [r7, #4]
   1b82c:	2200      	movs	r2, #0
   1b82e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1b830:	687b      	ldr	r3, [r7, #4]
   1b832:	2296      	movs	r2, #150	; 0x96
   1b834:	0192      	lsls	r2, r2, #6
   1b836:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1b838:	687b      	ldr	r3, [r7, #4]
   1b83a:	2224      	movs	r2, #36	; 0x24
   1b83c:	2101      	movs	r1, #1
   1b83e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1b840:	687b      	ldr	r3, [r7, #4]
   1b842:	2225      	movs	r2, #37	; 0x25
   1b844:	2101      	movs	r1, #1
   1b846:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1b848:	687b      	ldr	r3, [r7, #4]
   1b84a:	2226      	movs	r2, #38	; 0x26
   1b84c:	2100      	movs	r1, #0
   1b84e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1b850:	687b      	ldr	r3, [r7, #4]
   1b852:	2227      	movs	r2, #39	; 0x27
   1b854:	2100      	movs	r1, #0
   1b856:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1b858:	687b      	ldr	r3, [r7, #4]
   1b85a:	2200      	movs	r2, #0
   1b85c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1b85e:	687b      	ldr	r3, [r7, #4]
   1b860:	2288      	movs	r2, #136	; 0x88
   1b862:	0352      	lsls	r2, r2, #13
   1b864:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1b866:	687b      	ldr	r3, [r7, #4]
   1b868:	222c      	movs	r2, #44	; 0x2c
   1b86a:	2100      	movs	r1, #0
   1b86c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1b86e:	687b      	ldr	r3, [r7, #4]
   1b870:	222d      	movs	r2, #45	; 0x2d
   1b872:	2100      	movs	r1, #0
   1b874:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1b876:	687b      	ldr	r3, [r7, #4]
   1b878:	2200      	movs	r2, #0
   1b87a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1b87c:	687b      	ldr	r3, [r7, #4]
   1b87e:	2200      	movs	r2, #0
   1b880:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1b882:	687b      	ldr	r3, [r7, #4]
   1b884:	2200      	movs	r2, #0
   1b886:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1b888:	687b      	ldr	r3, [r7, #4]
   1b88a:	2200      	movs	r2, #0
   1b88c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1b88e:	687b      	ldr	r3, [r7, #4]
   1b890:	2200      	movs	r2, #0
   1b892:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1b894:	687b      	ldr	r3, [r7, #4]
   1b896:	2200      	movs	r2, #0
   1b898:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1b89a:	687b      	ldr	r3, [r7, #4]
   1b89c:	2200      	movs	r2, #0
   1b89e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1b8a0:	687b      	ldr	r3, [r7, #4]
   1b8a2:	2200      	movs	r2, #0
   1b8a4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1b8a6:	687b      	ldr	r3, [r7, #4]
   1b8a8:	2200      	movs	r2, #0
   1b8aa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1b8ac:	687b      	ldr	r3, [r7, #4]
   1b8ae:	2200      	movs	r2, #0
   1b8b0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1b8b2:	687b      	ldr	r3, [r7, #4]
   1b8b4:	2213      	movs	r2, #19
   1b8b6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1b8b8:	687b      	ldr	r3, [r7, #4]
   1b8ba:	2200      	movs	r2, #0
   1b8bc:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1b8be:	46c0      	nop			; (mov r8, r8)
   1b8c0:	46bd      	mov	sp, r7
   1b8c2:	b002      	add	sp, #8
   1b8c4:	bd80      	pop	{r7, pc}
	...

0001b8c8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1b8c8:	b580      	push	{r7, lr}
   1b8ca:	b084      	sub	sp, #16
   1b8cc:	af00      	add	r7, sp, #0
   1b8ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1b8d0:	687b      	ldr	r3, [r7, #4]
   1b8d2:	681b      	ldr	r3, [r3, #0]
   1b8d4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1b8d6:	687b      	ldr	r3, [r7, #4]
   1b8d8:	681b      	ldr	r3, [r3, #0]
   1b8da:	0018      	movs	r0, r3
   1b8dc:	4b09      	ldr	r3, [pc, #36]	; (1b904 <usart_enable+0x3c>)
   1b8de:	4798      	blx	r3
   1b8e0:	0003      	movs	r3, r0
   1b8e2:	0018      	movs	r0, r3
   1b8e4:	4b08      	ldr	r3, [pc, #32]	; (1b908 <usart_enable+0x40>)
   1b8e6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1b8e8:	687b      	ldr	r3, [r7, #4]
   1b8ea:	0018      	movs	r0, r3
   1b8ec:	4b07      	ldr	r3, [pc, #28]	; (1b90c <usart_enable+0x44>)
   1b8ee:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1b8f0:	68fb      	ldr	r3, [r7, #12]
   1b8f2:	681b      	ldr	r3, [r3, #0]
   1b8f4:	2202      	movs	r2, #2
   1b8f6:	431a      	orrs	r2, r3
   1b8f8:	68fb      	ldr	r3, [r7, #12]
   1b8fa:	601a      	str	r2, [r3, #0]
}
   1b8fc:	46c0      	nop			; (mov r8, r8)
   1b8fe:	46bd      	mov	sp, r7
   1b900:	b004      	add	sp, #16
   1b902:	bd80      	pop	{r7, pc}
   1b904:	000252cd 	.word	0x000252cd
   1b908:	0001b799 	.word	0x0001b799
   1b90c:	0001b7e5 	.word	0x0001b7e5

0001b910 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1b910:	b580      	push	{r7, lr}
   1b912:	b082      	sub	sp, #8
   1b914:	af00      	add	r7, sp, #0
   1b916:	6078      	str	r0, [r7, #4]
   1b918:	000a      	movs	r2, r1
   1b91a:	1cfb      	adds	r3, r7, #3
   1b91c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1b91e:	687b      	ldr	r3, [r7, #4]
   1b920:	2231      	movs	r2, #49	; 0x31
   1b922:	5c9b      	ldrb	r3, [r3, r2]
   1b924:	b25a      	sxtb	r2, r3
   1b926:	1cfb      	adds	r3, r7, #3
   1b928:	781b      	ldrb	r3, [r3, #0]
   1b92a:	2101      	movs	r1, #1
   1b92c:	4099      	lsls	r1, r3
   1b92e:	000b      	movs	r3, r1
   1b930:	b25b      	sxtb	r3, r3
   1b932:	4313      	orrs	r3, r2
   1b934:	b25b      	sxtb	r3, r3
   1b936:	b2d9      	uxtb	r1, r3
   1b938:	687b      	ldr	r3, [r7, #4]
   1b93a:	2231      	movs	r2, #49	; 0x31
   1b93c:	5499      	strb	r1, [r3, r2]

}
   1b93e:	46c0      	nop			; (mov r8, r8)
   1b940:	46bd      	mov	sp, r7
   1b942:	b002      	add	sp, #8
   1b944:	bd80      	pop	{r7, pc}
	...

0001b948 <InitializeSerialConsole>:
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void) {
   1b948:	b580      	push	{r7, lr}
   1b94a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
   1b94c:	2380      	movs	r3, #128	; 0x80
   1b94e:	009a      	lsls	r2, r3, #2
   1b950:	4b0f      	ldr	r3, [pc, #60]	; (1b990 <InitializeSerialConsole+0x48>)
   1b952:	0011      	movs	r1, r2
   1b954:	0018      	movs	r0, r3
   1b956:	4b0f      	ldr	r3, [pc, #60]	; (1b994 <InitializeSerialConsole+0x4c>)
   1b958:	4798      	blx	r3
   1b95a:	0002      	movs	r2, r0
   1b95c:	4b0e      	ldr	r3, [pc, #56]	; (1b998 <InitializeSerialConsole+0x50>)
   1b95e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, RX_BUFFER_SIZE);
   1b960:	2380      	movs	r3, #128	; 0x80
   1b962:	009a      	lsls	r2, r3, #2
   1b964:	4b0d      	ldr	r3, [pc, #52]	; (1b99c <InitializeSerialConsole+0x54>)
   1b966:	0011      	movs	r1, r2
   1b968:	0018      	movs	r0, r3
   1b96a:	4b0a      	ldr	r3, [pc, #40]	; (1b994 <InitializeSerialConsole+0x4c>)
   1b96c:	4798      	blx	r3
   1b96e:	0002      	movs	r2, r0
   1b970:	4b0b      	ldr	r3, [pc, #44]	; (1b9a0 <InitializeSerialConsole+0x58>)
   1b972:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1b974:	4b0b      	ldr	r3, [pc, #44]	; (1b9a4 <InitializeSerialConsole+0x5c>)
   1b976:	4798      	blx	r3
    configure_usart_callbacks();
   1b978:	4b0b      	ldr	r3, [pc, #44]	; (1b9a8 <InitializeSerialConsole+0x60>)
   1b97a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
   1b97c:	490b      	ldr	r1, [pc, #44]	; (1b9ac <InitializeSerialConsole+0x64>)
   1b97e:	4b0c      	ldr	r3, [pc, #48]	; (1b9b0 <InitializeSerialConsole+0x68>)
   1b980:	2201      	movs	r2, #1
   1b982:	0018      	movs	r0, r3
   1b984:	4b0b      	ldr	r3, [pc, #44]	; (1b9b4 <InitializeSerialConsole+0x6c>)
   1b986:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1b988:	46c0      	nop			; (mov r8, r8)
   1b98a:	46bd      	mov	sp, r7
   1b98c:	bd80      	pop	{r7, pc}
   1b98e:	46c0      	nop			; (mov r8, r8)
   1b990:	200051fc 	.word	0x200051fc
   1b994:	0001b679 	.word	0x0001b679
   1b998:	20004ff4 	.word	0x20004ff4
   1b99c:	20004ffc 	.word	0x20004ffc
   1b9a0:	20005400 	.word	0x20005400
   1b9a4:	0001bb1d 	.word	0x0001bb1d
   1b9a8:	0001bb95 	.word	0x0001bb95
   1b9ac:	20004ff8 	.word	0x20004ff8
   1b9b0:	20004fc0 	.word	0x20004fc0
   1b9b4:	00026b75 	.word	0x00026b75

0001b9b8 <SerialConsoleWriteString>:
 *text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string) {
   1b9b8:	b580      	push	{r7, lr}
   1b9ba:	b084      	sub	sp, #16
   1b9bc:	af00      	add	r7, sp, #0
   1b9be:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1b9c0:	4b1a      	ldr	r3, [pc, #104]	; (1ba2c <SerialConsoleWriteString+0x74>)
   1b9c2:	4798      	blx	r3
    if (string != NULL) {
   1b9c4:	687b      	ldr	r3, [r7, #4]
   1b9c6:	2b00      	cmp	r3, #0
   1b9c8:	d02a      	beq.n	1ba20 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b9ca:	2300      	movs	r3, #0
   1b9cc:	60fb      	str	r3, [r7, #12]
   1b9ce:	e00b      	b.n	1b9e8 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1b9d0:	4b17      	ldr	r3, [pc, #92]	; (1ba30 <SerialConsoleWriteString+0x78>)
   1b9d2:	6818      	ldr	r0, [r3, #0]
   1b9d4:	687a      	ldr	r2, [r7, #4]
   1b9d6:	68fb      	ldr	r3, [r7, #12]
   1b9d8:	18d3      	adds	r3, r2, r3
   1b9da:	781b      	ldrb	r3, [r3, #0]
   1b9dc:	0019      	movs	r1, r3
   1b9de:	4b15      	ldr	r3, [pc, #84]	; (1ba34 <SerialConsoleWriteString+0x7c>)
   1b9e0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b9e2:	68fb      	ldr	r3, [r7, #12]
   1b9e4:	3301      	adds	r3, #1
   1b9e6:	60fb      	str	r3, [r7, #12]
   1b9e8:	687b      	ldr	r3, [r7, #4]
   1b9ea:	0018      	movs	r0, r3
   1b9ec:	4b12      	ldr	r3, [pc, #72]	; (1ba38 <SerialConsoleWriteString+0x80>)
   1b9ee:	4798      	blx	r3
   1b9f0:	0002      	movs	r2, r0
   1b9f2:	68fb      	ldr	r3, [r7, #12]
   1b9f4:	429a      	cmp	r2, r3
   1b9f6:	d8eb      	bhi.n	1b9d0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1b9f8:	4b10      	ldr	r3, [pc, #64]	; (1ba3c <SerialConsoleWriteString+0x84>)
   1b9fa:	2101      	movs	r1, #1
   1b9fc:	0018      	movs	r0, r3
   1b9fe:	4b10      	ldr	r3, [pc, #64]	; (1ba40 <SerialConsoleWriteString+0x88>)
   1ba00:	4798      	blx	r3
   1ba02:	1e03      	subs	r3, r0, #0
   1ba04:	d10c      	bne.n	1ba20 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
   1ba06:	4b0a      	ldr	r3, [pc, #40]	; (1ba30 <SerialConsoleWriteString+0x78>)
   1ba08:	681b      	ldr	r3, [r3, #0]
   1ba0a:	4a0e      	ldr	r2, [pc, #56]	; (1ba44 <SerialConsoleWriteString+0x8c>)
   1ba0c:	0011      	movs	r1, r2
   1ba0e:	0018      	movs	r0, r3
   1ba10:	4b0d      	ldr	r3, [pc, #52]	; (1ba48 <SerialConsoleWriteString+0x90>)
   1ba12:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
   1ba14:	490b      	ldr	r1, [pc, #44]	; (1ba44 <SerialConsoleWriteString+0x8c>)
   1ba16:	4b09      	ldr	r3, [pc, #36]	; (1ba3c <SerialConsoleWriteString+0x84>)
   1ba18:	2201      	movs	r2, #1
   1ba1a:	0018      	movs	r0, r3
   1ba1c:	4b0b      	ldr	r3, [pc, #44]	; (1ba4c <SerialConsoleWriteString+0x94>)
   1ba1e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ba20:	4b0b      	ldr	r3, [pc, #44]	; (1ba50 <SerialConsoleWriteString+0x98>)
   1ba22:	4798      	blx	r3
}
   1ba24:	46c0      	nop			; (mov r8, r8)
   1ba26:	46bd      	mov	sp, r7
   1ba28:	b004      	add	sp, #16
   1ba2a:	bd80      	pop	{r7, pc}
   1ba2c:	0001a025 	.word	0x0001a025
   1ba30:	20005400 	.word	0x20005400
   1ba34:	0001b6d9 	.word	0x0001b6d9
   1ba38:	000325bb 	.word	0x000325bb
   1ba3c:	20004fc0 	.word	0x20004fc0
   1ba40:	00026bbd 	.word	0x00026bbd
   1ba44:	200053fc 	.word	0x200053fc
   1ba48:	0001b70d 	.word	0x0001b70d
   1ba4c:	00026b2d 	.word	0x00026b2d
   1ba50:	0001a03d 	.word	0x0001a03d

0001ba54 <SerialConsoleReadCharacter>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar) {
   1ba54:	b580      	push	{r7, lr}
   1ba56:	b084      	sub	sp, #16
   1ba58:	af00      	add	r7, sp, #0
   1ba5a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ba5c:	4b08      	ldr	r3, [pc, #32]	; (1ba80 <SerialConsoleReadCharacter+0x2c>)
   1ba5e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *) rxChar);
   1ba60:	4b08      	ldr	r3, [pc, #32]	; (1ba84 <SerialConsoleReadCharacter+0x30>)
   1ba62:	681b      	ldr	r3, [r3, #0]
   1ba64:	687a      	ldr	r2, [r7, #4]
   1ba66:	0011      	movs	r1, r2
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b07      	ldr	r3, [pc, #28]	; (1ba88 <SerialConsoleReadCharacter+0x34>)
   1ba6c:	4798      	blx	r3
   1ba6e:	0003      	movs	r3, r0
   1ba70:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ba72:	4b06      	ldr	r3, [pc, #24]	; (1ba8c <SerialConsoleReadCharacter+0x38>)
   1ba74:	4798      	blx	r3
    return a;
   1ba76:	68fb      	ldr	r3, [r7, #12]
}
   1ba78:	0018      	movs	r0, r3
   1ba7a:	46bd      	mov	sp, r7
   1ba7c:	b004      	add	sp, #16
   1ba7e:	bd80      	pop	{r7, pc}
   1ba80:	0001a025 	.word	0x0001a025
   1ba84:	20004ff4 	.word	0x20004ff4
   1ba88:	0001b70d 	.word	0x0001b70d
   1ba8c:	0001a03d 	.word	0x0001a03d

0001ba90 <getLogLevel>:
 *				Debug logs below the given level will not be allowed to be printed on the system
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void) { return currentDebugLevel; }
   1ba90:	b580      	push	{r7, lr}
   1ba92:	af00      	add	r7, sp, #0
   1ba94:	4b02      	ldr	r3, [pc, #8]	; (1baa0 <getLogLevel+0x10>)
   1ba96:	781b      	ldrb	r3, [r3, #0]
   1ba98:	0018      	movs	r0, r3
   1ba9a:	46bd      	mov	sp, r7
   1ba9c:	bd80      	pop	{r7, pc}
   1ba9e:	46c0      	nop			; (mov r8, r8)
   1baa0:	20003c74 	.word	0x20003c74

0001baa4 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...){
   1baa4:	b40e      	push	{r1, r2, r3}
   1baa6:	b590      	push	{r4, r7, lr}
   1baa8:	b084      	sub	sp, #16
   1baaa:	af00      	add	r7, sp, #0
   1baac:	0002      	movs	r2, r0
   1baae:	1dfb      	adds	r3, r7, #7
   1bab0:	701a      	strb	r2, [r3, #0]
	if(getLogLevel()<=level)
   1bab2:	4b0e      	ldr	r3, [pc, #56]	; (1baec <LogMessage+0x48>)
   1bab4:	4798      	blx	r3
   1bab6:	0003      	movs	r3, r0
   1bab8:	001a      	movs	r2, r3
   1baba:	1dfb      	adds	r3, r7, #7
   1babc:	781b      	ldrb	r3, [r3, #0]
   1babe:	4293      	cmp	r3, r2
   1bac0:	d30c      	bcc.n	1badc <LogMessage+0x38>
	{
		va_list ap;
		va_start(ap, format);
   1bac2:	2320      	movs	r3, #32
   1bac4:	18fb      	adds	r3, r7, r3
   1bac6:	60fb      	str	r3, [r7, #12]
		vsnprintf(debugBuffer, 127, format, ap);
   1bac8:	68fb      	ldr	r3, [r7, #12]
   1baca:	69fa      	ldr	r2, [r7, #28]
   1bacc:	4808      	ldr	r0, [pc, #32]	; (1baf0 <LogMessage+0x4c>)
   1bace:	217f      	movs	r1, #127	; 0x7f
   1bad0:	4c08      	ldr	r4, [pc, #32]	; (1baf4 <LogMessage+0x50>)
   1bad2:	47a0      	blx	r4
		SerialConsoleWriteString(debugBuffer);
   1bad4:	4b06      	ldr	r3, [pc, #24]	; (1baf0 <LogMessage+0x4c>)
   1bad6:	0018      	movs	r0, r3
   1bad8:	4b07      	ldr	r3, [pc, #28]	; (1baf8 <LogMessage+0x54>)
   1bada:	4798      	blx	r3
		va_end(ap);
	}
}
   1badc:	46c0      	nop			; (mov r8, r8)
   1bade:	46bd      	mov	sp, r7
   1bae0:	b004      	add	sp, #16
   1bae2:	bc90      	pop	{r4, r7}
   1bae4:	bc08      	pop	{r3}
   1bae6:	b003      	add	sp, #12
   1bae8:	4718      	bx	r3
   1baea:	46c0      	nop			; (mov r8, r8)
   1baec:	0001ba91 	.word	0x0001ba91
   1baf0:	20004f40 	.word	0x20004f40
   1baf4:	000327f5 	.word	0x000327f5
   1baf8:	0001b9b9 	.word	0x0001b9b9

0001bafc <LogMessageDebug>:
/**
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...) { LogMessage(LOG_DEBUG_LVL, format); };
   1bafc:	b40f      	push	{r0, r1, r2, r3}
   1bafe:	b580      	push	{r7, lr}
   1bb00:	af00      	add	r7, sp, #0
   1bb02:	68bb      	ldr	r3, [r7, #8]
   1bb04:	0019      	movs	r1, r3
   1bb06:	2001      	movs	r0, #1
   1bb08:	4b03      	ldr	r3, [pc, #12]	; (1bb18 <LogMessageDebug+0x1c>)
   1bb0a:	4798      	blx	r3
   1bb0c:	46c0      	nop			; (mov r8, r8)
   1bb0e:	46bd      	mov	sp, r7
   1bb10:	bc80      	pop	{r7}
   1bb12:	bc08      	pop	{r3}
   1bb14:	b004      	add	sp, #16
   1bb16:	4718      	bx	r3
   1bb18:	0001baa5 	.word	0x0001baa5

0001bb1c <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void) {
   1bb1c:	b580      	push	{r7, lr}
   1bb1e:	b090      	sub	sp, #64	; 0x40
   1bb20:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1bb22:	003b      	movs	r3, r7
   1bb24:	0018      	movs	r0, r3
   1bb26:	4b14      	ldr	r3, [pc, #80]	; (1bb78 <configure_usart+0x5c>)
   1bb28:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1bb2a:	003b      	movs	r3, r7
   1bb2c:	22e1      	movs	r2, #225	; 0xe1
   1bb2e:	0252      	lsls	r2, r2, #9
   1bb30:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1bb32:	003b      	movs	r3, r7
   1bb34:	22c4      	movs	r2, #196	; 0xc4
   1bb36:	0392      	lsls	r2, r2, #14
   1bb38:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1bb3a:	003b      	movs	r3, r7
   1bb3c:	2201      	movs	r2, #1
   1bb3e:	4252      	negs	r2, r2
   1bb40:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1bb42:	003b      	movs	r3, r7
   1bb44:	2201      	movs	r2, #1
   1bb46:	4252      	negs	r2, r2
   1bb48:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1bb4a:	003b      	movs	r3, r7
   1bb4c:	4a0b      	ldr	r2, [pc, #44]	; (1bb7c <configure_usart+0x60>)
   1bb4e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1bb50:	003b      	movs	r3, r7
   1bb52:	4a0b      	ldr	r2, [pc, #44]	; (1bb80 <configure_usart+0x64>)
   1bb54:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1bb56:	46c0      	nop			; (mov r8, r8)
   1bb58:	003a      	movs	r2, r7
   1bb5a:	490a      	ldr	r1, [pc, #40]	; (1bb84 <configure_usart+0x68>)
   1bb5c:	4b0a      	ldr	r3, [pc, #40]	; (1bb88 <configure_usart+0x6c>)
   1bb5e:	0018      	movs	r0, r3
   1bb60:	4b0a      	ldr	r3, [pc, #40]	; (1bb8c <configure_usart+0x70>)
   1bb62:	4798      	blx	r3
   1bb64:	1e03      	subs	r3, r0, #0
   1bb66:	d1f7      	bne.n	1bb58 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1bb68:	4b07      	ldr	r3, [pc, #28]	; (1bb88 <configure_usart+0x6c>)
   1bb6a:	0018      	movs	r0, r3
   1bb6c:	4b08      	ldr	r3, [pc, #32]	; (1bb90 <configure_usart+0x74>)
   1bb6e:	4798      	blx	r3
}
   1bb70:	46c0      	nop			; (mov r8, r8)
   1bb72:	46bd      	mov	sp, r7
   1bb74:	b010      	add	sp, #64	; 0x40
   1bb76:	bd80      	pop	{r7, pc}
   1bb78:	0001b809 	.word	0x0001b809
   1bb7c:	002a0003 	.word	0x002a0003
   1bb80:	002b0003 	.word	0x002b0003
   1bb84:	42001800 	.word	0x42001800
   1bb88:	20004fc0 	.word	0x20004fc0
   1bb8c:	00026731 	.word	0x00026731
   1bb90:	0001b8c9 	.word	0x0001b8c9

0001bb94 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void) {
   1bb94:	b580      	push	{r7, lr}
   1bb96:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1bb98:	490c      	ldr	r1, [pc, #48]	; (1bbcc <configure_usart_callbacks+0x38>)
   1bb9a:	4b0d      	ldr	r3, [pc, #52]	; (1bbd0 <configure_usart_callbacks+0x3c>)
   1bb9c:	2200      	movs	r2, #0
   1bb9e:	0018      	movs	r0, r3
   1bba0:	4b0c      	ldr	r3, [pc, #48]	; (1bbd4 <configure_usart_callbacks+0x40>)
   1bba2:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1bba4:	490c      	ldr	r1, [pc, #48]	; (1bbd8 <configure_usart_callbacks+0x44>)
   1bba6:	4b0a      	ldr	r3, [pc, #40]	; (1bbd0 <configure_usart_callbacks+0x3c>)
   1bba8:	2201      	movs	r2, #1
   1bbaa:	0018      	movs	r0, r3
   1bbac:	4b09      	ldr	r3, [pc, #36]	; (1bbd4 <configure_usart_callbacks+0x40>)
   1bbae:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1bbb0:	4b07      	ldr	r3, [pc, #28]	; (1bbd0 <configure_usart_callbacks+0x3c>)
   1bbb2:	2100      	movs	r1, #0
   1bbb4:	0018      	movs	r0, r3
   1bbb6:	4b09      	ldr	r3, [pc, #36]	; (1bbdc <configure_usart_callbacks+0x48>)
   1bbb8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1bbba:	4b05      	ldr	r3, [pc, #20]	; (1bbd0 <configure_usart_callbacks+0x3c>)
   1bbbc:	2101      	movs	r1, #1
   1bbbe:	0018      	movs	r0, r3
   1bbc0:	4b06      	ldr	r3, [pc, #24]	; (1bbdc <configure_usart_callbacks+0x48>)
   1bbc2:	4798      	blx	r3
}
   1bbc4:	46c0      	nop			; (mov r8, r8)
   1bbc6:	46bd      	mov	sp, r7
   1bbc8:	bd80      	pop	{r7, pc}
   1bbca:	46c0      	nop			; (mov r8, r8)
   1bbcc:	0001bc29 	.word	0x0001bc29
   1bbd0:	20004fc0 	.word	0x20004fc0
   1bbd4:	00026ae5 	.word	0x00026ae5
   1bbd8:	0001bbe1 	.word	0x0001bbe1
   1bbdc:	0001b911 	.word	0x0001b911

0001bbe0 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module) {
   1bbe0:	b580      	push	{r7, lr}
   1bbe2:	b082      	sub	sp, #8
   1bbe4:	af00      	add	r7, sp, #0
   1bbe6:	6078      	str	r0, [r7, #4]
	circular_buf_put(cbufRx, (uint8_t)latestRx);
   1bbe8:	4b09      	ldr	r3, [pc, #36]	; (1bc10 <usart_read_callback+0x30>)
   1bbea:	681a      	ldr	r2, [r3, #0]
   1bbec:	4b09      	ldr	r3, [pc, #36]	; (1bc14 <usart_read_callback+0x34>)
   1bbee:	781b      	ldrb	r3, [r3, #0]
   1bbf0:	0019      	movs	r1, r3
   1bbf2:	0010      	movs	r0, r2
   1bbf4:	4b08      	ldr	r3, [pc, #32]	; (1bc18 <usart_read_callback+0x38>)
   1bbf6:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);
   1bbf8:	4906      	ldr	r1, [pc, #24]	; (1bc14 <usart_read_callback+0x34>)
   1bbfa:	4b08      	ldr	r3, [pc, #32]	; (1bc1c <usart_read_callback+0x3c>)
   1bbfc:	2201      	movs	r2, #1
   1bbfe:	0018      	movs	r0, r3
   1bc00:	4b07      	ldr	r3, [pc, #28]	; (1bc20 <usart_read_callback+0x40>)
   1bc02:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR();
   1bc04:	4b07      	ldr	r3, [pc, #28]	; (1bc24 <usart_read_callback+0x44>)
   1bc06:	4798      	blx	r3
}
   1bc08:	46c0      	nop			; (mov r8, r8)
   1bc0a:	46bd      	mov	sp, r7
   1bc0c:	b002      	add	sp, #8
   1bc0e:	bd80      	pop	{r7, pc}
   1bc10:	20004ff4 	.word	0x20004ff4
   1bc14:	20004ff8 	.word	0x20004ff8
   1bc18:	0001b6d9 	.word	0x0001b6d9
   1bc1c:	20004fc0 	.word	0x20004fc0
   1bc20:	00026b75 	.word	0x00026b75
   1bc24:	0001300d 	.word	0x0001300d

0001bc28 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module) {
   1bc28:	b580      	push	{r7, lr}
   1bc2a:	b082      	sub	sp, #8
   1bc2c:	af00      	add	r7, sp, #0
   1bc2e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
   1bc30:	4b09      	ldr	r3, [pc, #36]	; (1bc58 <usart_write_callback+0x30>)
   1bc32:	681b      	ldr	r3, [r3, #0]
   1bc34:	4a09      	ldr	r2, [pc, #36]	; (1bc5c <usart_write_callback+0x34>)
   1bc36:	0011      	movs	r1, r2
   1bc38:	0018      	movs	r0, r3
   1bc3a:	4b09      	ldr	r3, [pc, #36]	; (1bc60 <usart_write_callback+0x38>)
   1bc3c:	4798      	blx	r3
   1bc3e:	0003      	movs	r3, r0
   1bc40:	3301      	adds	r3, #1
   1bc42:	d005      	beq.n	1bc50 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
   1bc44:	4905      	ldr	r1, [pc, #20]	; (1bc5c <usart_write_callback+0x34>)
   1bc46:	4b07      	ldr	r3, [pc, #28]	; (1bc64 <usart_write_callback+0x3c>)
   1bc48:	2201      	movs	r2, #1
   1bc4a:	0018      	movs	r0, r3
   1bc4c:	4b06      	ldr	r3, [pc, #24]	; (1bc68 <usart_write_callback+0x40>)
   1bc4e:	4798      	blx	r3
    }
}
   1bc50:	46c0      	nop			; (mov r8, r8)
   1bc52:	46bd      	mov	sp, r7
   1bc54:	b002      	add	sp, #8
   1bc56:	bd80      	pop	{r7, pc}
   1bc58:	20005400 	.word	0x20005400
   1bc5c:	200053fc 	.word	0x200053fc
   1bc60:	0001b70d 	.word	0x0001b70d
   1bc64:	20004fc0 	.word	0x20004fc0
   1bc68:	00026b2d 	.word	0x00026b2d

0001bc6c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1bc6c:	b590      	push	{r4, r7, lr}
   1bc6e:	b087      	sub	sp, #28
   1bc70:	af00      	add	r7, sp, #0
   1bc72:	60f8      	str	r0, [r7, #12]
   1bc74:	000c      	movs	r4, r1
   1bc76:	0010      	movs	r0, r2
   1bc78:	0019      	movs	r1, r3
   1bc7a:	230a      	movs	r3, #10
   1bc7c:	18fb      	adds	r3, r7, r3
   1bc7e:	1c22      	adds	r2, r4, #0
   1bc80:	801a      	strh	r2, [r3, #0]
   1bc82:	2308      	movs	r3, #8
   1bc84:	18fb      	adds	r3, r7, r3
   1bc86:	1c02      	adds	r2, r0, #0
   1bc88:	801a      	strh	r2, [r3, #0]
   1bc8a:	1dfb      	adds	r3, r7, #7
   1bc8c:	1c0a      	adds	r2, r1, #0
   1bc8e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1bc90:	230a      	movs	r3, #10
   1bc92:	18fb      	adds	r3, r7, r3
   1bc94:	881a      	ldrh	r2, [r3, #0]
   1bc96:	2308      	movs	r3, #8
   1bc98:	18fb      	adds	r3, r7, r3
   1bc9a:	881b      	ldrh	r3, [r3, #0]
   1bc9c:	1ad3      	subs	r3, r2, r3
   1bc9e:	3307      	adds	r3, #7
   1bca0:	2b00      	cmp	r3, #0
   1bca2:	da00      	bge.n	1bca6 <SDMMC_UNSTUFF_BITS+0x3a>
   1bca4:	3307      	adds	r3, #7
   1bca6:	10db      	asrs	r3, r3, #3
   1bca8:	3b01      	subs	r3, #1
   1bcaa:	68fa      	ldr	r2, [r7, #12]
   1bcac:	18d3      	adds	r3, r2, r3
   1bcae:	781b      	ldrb	r3, [r3, #0]
   1bcb0:	0019      	movs	r1, r3
   1bcb2:	2308      	movs	r3, #8
   1bcb4:	18fb      	adds	r3, r7, r3
   1bcb6:	881b      	ldrh	r3, [r3, #0]
   1bcb8:	2207      	movs	r2, #7
   1bcba:	4013      	ands	r3, r2
   1bcbc:	4119      	asrs	r1, r3
   1bcbe:	000b      	movs	r3, r1
   1bcc0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1bcc2:	2308      	movs	r3, #8
   1bcc4:	18fb      	adds	r3, r7, r3
   1bcc6:	881b      	ldrh	r3, [r3, #0]
   1bcc8:	2207      	movs	r2, #7
   1bcca:	401a      	ands	r2, r3
   1bccc:	1dfb      	adds	r3, r7, #7
   1bcce:	781b      	ldrb	r3, [r3, #0]
   1bcd0:	18d3      	adds	r3, r2, r3
   1bcd2:	2b08      	cmp	r3, #8
   1bcd4:	dd1c      	ble.n	1bd10 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1bcd6:	230a      	movs	r3, #10
   1bcd8:	18fb      	adds	r3, r7, r3
   1bcda:	881a      	ldrh	r2, [r3, #0]
   1bcdc:	2308      	movs	r3, #8
   1bcde:	18fb      	adds	r3, r7, r3
   1bce0:	881b      	ldrh	r3, [r3, #0]
   1bce2:	1ad3      	subs	r3, r2, r3
   1bce4:	3307      	adds	r3, #7
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	da00      	bge.n	1bcec <SDMMC_UNSTUFF_BITS+0x80>
   1bcea:	3307      	adds	r3, #7
   1bcec:	10db      	asrs	r3, r3, #3
   1bcee:	3b02      	subs	r3, #2
   1bcf0:	68fa      	ldr	r2, [r7, #12]
   1bcf2:	18d3      	adds	r3, r2, r3
   1bcf4:	781b      	ldrb	r3, [r3, #0]
   1bcf6:	0019      	movs	r1, r3
   1bcf8:	2308      	movs	r3, #8
   1bcfa:	18fb      	adds	r3, r7, r3
   1bcfc:	881b      	ldrh	r3, [r3, #0]
   1bcfe:	2207      	movs	r2, #7
   1bd00:	4013      	ands	r3, r2
   1bd02:	2208      	movs	r2, #8
   1bd04:	1ad3      	subs	r3, r2, r3
   1bd06:	4099      	lsls	r1, r3
   1bd08:	000b      	movs	r3, r1
   1bd0a:	697a      	ldr	r2, [r7, #20]
   1bd0c:	4313      	orrs	r3, r2
   1bd0e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1bd10:	2308      	movs	r3, #8
   1bd12:	18fb      	adds	r3, r7, r3
   1bd14:	881b      	ldrh	r3, [r3, #0]
   1bd16:	2207      	movs	r2, #7
   1bd18:	401a      	ands	r2, r3
   1bd1a:	1dfb      	adds	r3, r7, #7
   1bd1c:	781b      	ldrb	r3, [r3, #0]
   1bd1e:	18d3      	adds	r3, r2, r3
   1bd20:	2b10      	cmp	r3, #16
   1bd22:	dd1c      	ble.n	1bd5e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1bd24:	230a      	movs	r3, #10
   1bd26:	18fb      	adds	r3, r7, r3
   1bd28:	881a      	ldrh	r2, [r3, #0]
   1bd2a:	2308      	movs	r3, #8
   1bd2c:	18fb      	adds	r3, r7, r3
   1bd2e:	881b      	ldrh	r3, [r3, #0]
   1bd30:	1ad3      	subs	r3, r2, r3
   1bd32:	3307      	adds	r3, #7
   1bd34:	2b00      	cmp	r3, #0
   1bd36:	da00      	bge.n	1bd3a <SDMMC_UNSTUFF_BITS+0xce>
   1bd38:	3307      	adds	r3, #7
   1bd3a:	10db      	asrs	r3, r3, #3
   1bd3c:	3b03      	subs	r3, #3
   1bd3e:	68fa      	ldr	r2, [r7, #12]
   1bd40:	18d3      	adds	r3, r2, r3
   1bd42:	781b      	ldrb	r3, [r3, #0]
   1bd44:	0019      	movs	r1, r3
   1bd46:	2308      	movs	r3, #8
   1bd48:	18fb      	adds	r3, r7, r3
   1bd4a:	881b      	ldrh	r3, [r3, #0]
   1bd4c:	2207      	movs	r2, #7
   1bd4e:	4013      	ands	r3, r2
   1bd50:	2210      	movs	r2, #16
   1bd52:	1ad3      	subs	r3, r2, r3
   1bd54:	4099      	lsls	r1, r3
   1bd56:	000b      	movs	r3, r1
   1bd58:	697a      	ldr	r2, [r7, #20]
   1bd5a:	4313      	orrs	r3, r2
   1bd5c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1bd5e:	2308      	movs	r3, #8
   1bd60:	18fb      	adds	r3, r7, r3
   1bd62:	881b      	ldrh	r3, [r3, #0]
   1bd64:	2207      	movs	r2, #7
   1bd66:	401a      	ands	r2, r3
   1bd68:	1dfb      	adds	r3, r7, #7
   1bd6a:	781b      	ldrb	r3, [r3, #0]
   1bd6c:	18d3      	adds	r3, r2, r3
   1bd6e:	2b10      	cmp	r3, #16
   1bd70:	dd1c      	ble.n	1bdac <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1bd72:	230a      	movs	r3, #10
   1bd74:	18fb      	adds	r3, r7, r3
   1bd76:	881a      	ldrh	r2, [r3, #0]
   1bd78:	2308      	movs	r3, #8
   1bd7a:	18fb      	adds	r3, r7, r3
   1bd7c:	881b      	ldrh	r3, [r3, #0]
   1bd7e:	1ad3      	subs	r3, r2, r3
   1bd80:	3307      	adds	r3, #7
   1bd82:	2b00      	cmp	r3, #0
   1bd84:	da00      	bge.n	1bd88 <SDMMC_UNSTUFF_BITS+0x11c>
   1bd86:	3307      	adds	r3, #7
   1bd88:	10db      	asrs	r3, r3, #3
   1bd8a:	3b03      	subs	r3, #3
   1bd8c:	68fa      	ldr	r2, [r7, #12]
   1bd8e:	18d3      	adds	r3, r2, r3
   1bd90:	781b      	ldrb	r3, [r3, #0]
   1bd92:	0019      	movs	r1, r3
   1bd94:	2308      	movs	r3, #8
   1bd96:	18fb      	adds	r3, r7, r3
   1bd98:	881b      	ldrh	r3, [r3, #0]
   1bd9a:	2207      	movs	r2, #7
   1bd9c:	4013      	ands	r3, r2
   1bd9e:	2210      	movs	r2, #16
   1bda0:	1ad3      	subs	r3, r2, r3
   1bda2:	4099      	lsls	r1, r3
   1bda4:	000b      	movs	r3, r1
   1bda6:	697a      	ldr	r2, [r7, #20]
   1bda8:	4313      	orrs	r3, r2
   1bdaa:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1bdac:	1dfb      	adds	r3, r7, #7
   1bdae:	781b      	ldrb	r3, [r3, #0]
   1bdb0:	2201      	movs	r2, #1
   1bdb2:	409a      	lsls	r2, r3
   1bdb4:	0013      	movs	r3, r2
   1bdb6:	1e5a      	subs	r2, r3, #1
   1bdb8:	697b      	ldr	r3, [r7, #20]
   1bdba:	4013      	ands	r3, r2
   1bdbc:	617b      	str	r3, [r7, #20]
	return value;
   1bdbe:	697b      	ldr	r3, [r7, #20]
}
   1bdc0:	0018      	movs	r0, r3
   1bdc2:	46bd      	mov	sp, r7
   1bdc4:	b007      	add	sp, #28
   1bdc6:	bd90      	pop	{r4, r7, pc}

0001bdc8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1bdc8:	b580      	push	{r7, lr}
   1bdca:	b082      	sub	sp, #8
   1bdcc:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1bdce:	4b23      	ldr	r3, [pc, #140]	; (1be5c <mmc_spi_op_cond+0x94>)
   1bdd0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1bdd2:	4b23      	ldr	r3, [pc, #140]	; (1be60 <mmc_spi_op_cond+0x98>)
   1bdd4:	2100      	movs	r1, #0
   1bdd6:	0018      	movs	r0, r3
   1bdd8:	4b22      	ldr	r3, [pc, #136]	; (1be64 <mmc_spi_op_cond+0x9c>)
   1bdda:	4798      	blx	r3
   1bddc:	0003      	movs	r3, r0
   1bdde:	001a      	movs	r2, r3
   1bde0:	2301      	movs	r3, #1
   1bde2:	4053      	eors	r3, r2
   1bde4:	b2db      	uxtb	r3, r3
   1bde6:	2b00      	cmp	r3, #0
   1bde8:	d001      	beq.n	1bdee <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1bdea:	2300      	movs	r3, #0
   1bdec:	e031      	b.n	1be52 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1bdee:	4b1e      	ldr	r3, [pc, #120]	; (1be68 <mmc_spi_op_cond+0xa0>)
   1bdf0:	4798      	blx	r3
   1bdf2:	0003      	movs	r3, r0
   1bdf4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1bdf6:	683b      	ldr	r3, [r7, #0]
   1bdf8:	2201      	movs	r2, #1
   1bdfa:	4013      	ands	r3, r2
   1bdfc:	d006      	beq.n	1be0c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1bdfe:	687b      	ldr	r3, [r7, #4]
   1be00:	1e5a      	subs	r2, r3, #1
   1be02:	607a      	str	r2, [r7, #4]
   1be04:	2b00      	cmp	r3, #0
   1be06:	d1e4      	bne.n	1bdd2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1be08:	2300      	movs	r3, #0
   1be0a:	e022      	b.n	1be52 <mmc_spi_op_cond+0x8a>
			break;
   1be0c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1be0e:	4b17      	ldr	r3, [pc, #92]	; (1be6c <mmc_spi_op_cond+0xa4>)
   1be10:	2100      	movs	r1, #0
   1be12:	0018      	movs	r0, r3
   1be14:	4b13      	ldr	r3, [pc, #76]	; (1be64 <mmc_spi_op_cond+0x9c>)
   1be16:	4798      	blx	r3
   1be18:	0003      	movs	r3, r0
   1be1a:	001a      	movs	r2, r3
   1be1c:	2301      	movs	r3, #1
   1be1e:	4053      	eors	r3, r2
   1be20:	b2db      	uxtb	r3, r3
   1be22:	2b00      	cmp	r3, #0
   1be24:	d001      	beq.n	1be2a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1be26:	2300      	movs	r3, #0
   1be28:	e013      	b.n	1be52 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1be2a:	4b0f      	ldr	r3, [pc, #60]	; (1be68 <mmc_spi_op_cond+0xa0>)
   1be2c:	4798      	blx	r3
   1be2e:	0002      	movs	r2, r0
   1be30:	23c0      	movs	r3, #192	; 0xc0
   1be32:	05db      	lsls	r3, r3, #23
   1be34:	401a      	ands	r2, r3
   1be36:	2380      	movs	r3, #128	; 0x80
   1be38:	05db      	lsls	r3, r3, #23
   1be3a:	429a      	cmp	r2, r3
   1be3c:	d108      	bne.n	1be50 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1be3e:	4b0c      	ldr	r3, [pc, #48]	; (1be70 <mmc_spi_op_cond+0xa8>)
   1be40:	681a      	ldr	r2, [r3, #0]
   1be42:	4b0b      	ldr	r3, [pc, #44]	; (1be70 <mmc_spi_op_cond+0xa8>)
   1be44:	681b      	ldr	r3, [r3, #0]
   1be46:	7adb      	ldrb	r3, [r3, #11]
   1be48:	2108      	movs	r1, #8
   1be4a:	430b      	orrs	r3, r1
   1be4c:	b2db      	uxtb	r3, r3
   1be4e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1be50:	2301      	movs	r3, #1
}
   1be52:	0018      	movs	r0, r3
   1be54:	46bd      	mov	sp, r7
   1be56:	b002      	add	sp, #8
   1be58:	bd80      	pop	{r7, pc}
   1be5a:	46c0      	nop			; (mov r8, r8)
   1be5c:	00001bee 	.word	0x00001bee
   1be60:	00001101 	.word	0x00001101
   1be64:	0001d845 	.word	0x0001d845
   1be68:	0001da85 	.word	0x0001da85
   1be6c:	0000053a 	.word	0x0000053a
   1be70:	20003c9c 	.word	0x20003c9c

0001be74 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1be74:	b580      	push	{r7, lr}
   1be76:	b086      	sub	sp, #24
   1be78:	af00      	add	r7, sp, #0
   1be7a:	0002      	movs	r2, r0
   1be7c:	1dfb      	adds	r3, r7, #7
   1be7e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1be80:	4b2e      	ldr	r3, [pc, #184]	; (1bf3c <sd_spi_op_cond+0xc8>)
   1be82:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1be84:	4b2e      	ldr	r3, [pc, #184]	; (1bf40 <sd_spi_op_cond+0xcc>)
   1be86:	2100      	movs	r1, #0
   1be88:	0018      	movs	r0, r3
   1be8a:	4b2e      	ldr	r3, [pc, #184]	; (1bf44 <sd_spi_op_cond+0xd0>)
   1be8c:	4798      	blx	r3
   1be8e:	0003      	movs	r3, r0
   1be90:	001a      	movs	r2, r3
   1be92:	2301      	movs	r3, #1
   1be94:	4053      	eors	r3, r2
   1be96:	b2db      	uxtb	r3, r3
   1be98:	2b00      	cmp	r3, #0
   1be9a:	d001      	beq.n	1bea0 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1be9c:	2300      	movs	r3, #0
   1be9e:	e048      	b.n	1bf32 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1bea0:	2300      	movs	r3, #0
   1bea2:	617b      	str	r3, [r7, #20]
		if (v2) {
   1bea4:	1dfb      	adds	r3, r7, #7
   1bea6:	781b      	ldrb	r3, [r3, #0]
   1bea8:	2b00      	cmp	r3, #0
   1beaa:	d004      	beq.n	1beb6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1beac:	697b      	ldr	r3, [r7, #20]
   1beae:	2280      	movs	r2, #128	; 0x80
   1beb0:	05d2      	lsls	r2, r2, #23
   1beb2:	4313      	orrs	r3, r2
   1beb4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1beb6:	697b      	ldr	r3, [r7, #20]
   1beb8:	4a23      	ldr	r2, [pc, #140]	; (1bf48 <sd_spi_op_cond+0xd4>)
   1beba:	0019      	movs	r1, r3
   1bebc:	0010      	movs	r0, r2
   1bebe:	4b21      	ldr	r3, [pc, #132]	; (1bf44 <sd_spi_op_cond+0xd0>)
   1bec0:	4798      	blx	r3
   1bec2:	0003      	movs	r3, r0
   1bec4:	001a      	movs	r2, r3
   1bec6:	2301      	movs	r3, #1
   1bec8:	4053      	eors	r3, r2
   1beca:	b2db      	uxtb	r3, r3
   1becc:	2b00      	cmp	r3, #0
   1bece:	d001      	beq.n	1bed4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1bed0:	2300      	movs	r3, #0
   1bed2:	e02e      	b.n	1bf32 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1bed4:	4b1d      	ldr	r3, [pc, #116]	; (1bf4c <sd_spi_op_cond+0xd8>)
   1bed6:	4798      	blx	r3
   1bed8:	0003      	movs	r3, r0
   1beda:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1bedc:	68fb      	ldr	r3, [r7, #12]
   1bede:	2201      	movs	r2, #1
   1bee0:	4013      	ands	r3, r2
   1bee2:	d006      	beq.n	1bef2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1bee4:	693b      	ldr	r3, [r7, #16]
   1bee6:	1e5a      	subs	r2, r3, #1
   1bee8:	613a      	str	r2, [r7, #16]
   1beea:	2b00      	cmp	r3, #0
   1beec:	d1ca      	bne.n	1be84 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1beee:	2300      	movs	r3, #0
   1bef0:	e01f      	b.n	1bf32 <sd_spi_op_cond+0xbe>
			break;
   1bef2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1bef4:	4b16      	ldr	r3, [pc, #88]	; (1bf50 <sd_spi_op_cond+0xdc>)
   1bef6:	2100      	movs	r1, #0
   1bef8:	0018      	movs	r0, r3
   1befa:	4b12      	ldr	r3, [pc, #72]	; (1bf44 <sd_spi_op_cond+0xd0>)
   1befc:	4798      	blx	r3
   1befe:	0003      	movs	r3, r0
   1bf00:	001a      	movs	r2, r3
   1bf02:	2301      	movs	r3, #1
   1bf04:	4053      	eors	r3, r2
   1bf06:	b2db      	uxtb	r3, r3
   1bf08:	2b00      	cmp	r3, #0
   1bf0a:	d001      	beq.n	1bf10 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1bf0c:	2300      	movs	r3, #0
   1bf0e:	e010      	b.n	1bf32 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1bf10:	4b0e      	ldr	r3, [pc, #56]	; (1bf4c <sd_spi_op_cond+0xd8>)
   1bf12:	4798      	blx	r3
   1bf14:	0002      	movs	r2, r0
   1bf16:	2380      	movs	r3, #128	; 0x80
   1bf18:	05db      	lsls	r3, r3, #23
   1bf1a:	4013      	ands	r3, r2
   1bf1c:	d008      	beq.n	1bf30 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1bf1e:	4b0d      	ldr	r3, [pc, #52]	; (1bf54 <sd_spi_op_cond+0xe0>)
   1bf20:	681a      	ldr	r2, [r3, #0]
   1bf22:	4b0c      	ldr	r3, [pc, #48]	; (1bf54 <sd_spi_op_cond+0xe0>)
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	7adb      	ldrb	r3, [r3, #11]
   1bf28:	2108      	movs	r1, #8
   1bf2a:	430b      	orrs	r3, r1
   1bf2c:	b2db      	uxtb	r3, r3
   1bf2e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1bf30:	2301      	movs	r3, #1
}
   1bf32:	0018      	movs	r0, r3
   1bf34:	46bd      	mov	sp, r7
   1bf36:	b006      	add	sp, #24
   1bf38:	bd80      	pop	{r7, pc}
   1bf3a:	46c0      	nop			; (mov r8, r8)
   1bf3c:	00001bee 	.word	0x00001bee
   1bf40:	00001137 	.word	0x00001137
   1bf44:	0001d845 	.word	0x0001d845
   1bf48:	00001129 	.word	0x00001129
   1bf4c:	0001da85 	.word	0x0001da85
   1bf50:	0000053a 	.word	0x0000053a
   1bf54:	20003c9c 	.word	0x20003c9c

0001bf58 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1bf58:	b580      	push	{r7, lr}
   1bf5a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1bf5c:	2301      	movs	r3, #1
}
   1bf5e:	0018      	movs	r0, r3
   1bf60:	46bd      	mov	sp, r7
   1bf62:	bd80      	pop	{r7, pc}

0001bf64 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1bf64:	b580      	push	{r7, lr}
   1bf66:	b084      	sub	sp, #16
   1bf68:	af00      	add	r7, sp, #0
   1bf6a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1bf6c:	687b      	ldr	r3, [r7, #4]
   1bf6e:	2200      	movs	r2, #0
   1bf70:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1bf72:	23d5      	movs	r3, #213	; 0xd5
   1bf74:	005b      	lsls	r3, r3, #1
   1bf76:	4a14      	ldr	r2, [pc, #80]	; (1bfc8 <sd_cmd8+0x64>)
   1bf78:	0019      	movs	r1, r3
   1bf7a:	0010      	movs	r0, r2
   1bf7c:	4b13      	ldr	r3, [pc, #76]	; (1bfcc <sd_cmd8+0x68>)
   1bf7e:	4798      	blx	r3
   1bf80:	0003      	movs	r3, r0
   1bf82:	001a      	movs	r2, r3
   1bf84:	2301      	movs	r3, #1
   1bf86:	4053      	eors	r3, r2
   1bf88:	b2db      	uxtb	r3, r3
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d001      	beq.n	1bf92 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1bf8e:	2301      	movs	r3, #1
   1bf90:	e015      	b.n	1bfbe <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1bf92:	4b0f      	ldr	r3, [pc, #60]	; (1bfd0 <sd_cmd8+0x6c>)
   1bf94:	4798      	blx	r3
   1bf96:	0003      	movs	r3, r0
   1bf98:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1bf9a:	68fb      	ldr	r3, [r7, #12]
   1bf9c:	3301      	adds	r3, #1
   1bf9e:	d101      	bne.n	1bfa4 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1bfa0:	2301      	movs	r3, #1
   1bfa2:	e00c      	b.n	1bfbe <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1bfa4:	68fb      	ldr	r3, [r7, #12]
   1bfa6:	051b      	lsls	r3, r3, #20
   1bfa8:	0d1a      	lsrs	r2, r3, #20
   1bfaa:	23d5      	movs	r3, #213	; 0xd5
   1bfac:	005b      	lsls	r3, r3, #1
   1bfae:	429a      	cmp	r2, r3
   1bfb0:	d001      	beq.n	1bfb6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1bfb2:	2300      	movs	r3, #0
   1bfb4:	e003      	b.n	1bfbe <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1bfb6:	687b      	ldr	r3, [r7, #4]
   1bfb8:	2201      	movs	r2, #1
   1bfba:	701a      	strb	r2, [r3, #0]
	return true;
   1bfbc:	2301      	movs	r3, #1
}
   1bfbe:	0018      	movs	r0, r3
   1bfc0:	46bd      	mov	sp, r7
   1bfc2:	b004      	add	sp, #16
   1bfc4:	bd80      	pop	{r7, pc}
   1bfc6:	46c0      	nop			; (mov r8, r8)
   1bfc8:	00005508 	.word	0x00005508
   1bfcc:	0001d845 	.word	0x0001d845
   1bfd0:	0001da85 	.word	0x0001da85

0001bfd4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1bfd4:	b590      	push	{r4, r7, lr}
   1bfd6:	b089      	sub	sp, #36	; 0x24
   1bfd8:	af02      	add	r7, sp, #8
   1bfda:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1bfdc:	2380      	movs	r3, #128	; 0x80
   1bfde:	009a      	lsls	r2, r3, #2
   1bfe0:	4841      	ldr	r0, [pc, #260]	; (1c0e8 <mmc_cmd8+0x114>)
   1bfe2:	2300      	movs	r3, #0
   1bfe4:	9300      	str	r3, [sp, #0]
   1bfe6:	2301      	movs	r3, #1
   1bfe8:	2100      	movs	r1, #0
   1bfea:	4c40      	ldr	r4, [pc, #256]	; (1c0ec <mmc_cmd8+0x118>)
   1bfec:	47a0      	blx	r4
   1bfee:	0003      	movs	r3, r0
   1bff0:	001a      	movs	r2, r3
   1bff2:	2301      	movs	r3, #1
   1bff4:	4053      	eors	r3, r2
   1bff6:	b2db      	uxtb	r3, r3
   1bff8:	2b00      	cmp	r3, #0
   1bffa:	d001      	beq.n	1c000 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1bffc:	2300      	movs	r3, #0
   1bffe:	e06e      	b.n	1c0de <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1c000:	2316      	movs	r3, #22
   1c002:	18fb      	adds	r3, r7, r3
   1c004:	2200      	movs	r2, #0
   1c006:	801a      	strh	r2, [r3, #0]
   1c008:	e014      	b.n	1c034 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1c00a:	2310      	movs	r3, #16
   1c00c:	18fb      	adds	r3, r7, r3
   1c00e:	0018      	movs	r0, r3
   1c010:	4b37      	ldr	r3, [pc, #220]	; (1c0f0 <mmc_cmd8+0x11c>)
   1c012:	4798      	blx	r3
   1c014:	0003      	movs	r3, r0
   1c016:	001a      	movs	r2, r3
   1c018:	2301      	movs	r3, #1
   1c01a:	4053      	eors	r3, r2
   1c01c:	b2db      	uxtb	r3, r3
   1c01e:	2b00      	cmp	r3, #0
   1c020:	d001      	beq.n	1c026 <mmc_cmd8+0x52>
			return false;
   1c022:	2300      	movs	r3, #0
   1c024:	e05b      	b.n	1c0de <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1c026:	2316      	movs	r3, #22
   1c028:	18fb      	adds	r3, r7, r3
   1c02a:	881a      	ldrh	r2, [r3, #0]
   1c02c:	2316      	movs	r3, #22
   1c02e:	18fb      	adds	r3, r7, r3
   1c030:	3201      	adds	r2, #1
   1c032:	801a      	strh	r2, [r3, #0]
   1c034:	2316      	movs	r3, #22
   1c036:	18fb      	adds	r3, r7, r3
   1c038:	881b      	ldrh	r3, [r3, #0]
   1c03a:	2b31      	cmp	r3, #49	; 0x31
   1c03c:	d9e5      	bls.n	1c00a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1c03e:	693b      	ldr	r3, [r7, #16]
   1c040:	b2db      	uxtb	r3, r3
   1c042:	2202      	movs	r2, #2
   1c044:	4013      	ands	r3, r2
   1c046:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1c048:	687b      	ldr	r3, [r7, #4]
   1c04a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1c04c:	4b29      	ldr	r3, [pc, #164]	; (1c0f4 <mmc_cmd8+0x120>)
   1c04e:	681b      	ldr	r3, [r3, #0]
   1c050:	330e      	adds	r3, #14
   1c052:	0018      	movs	r0, r3
   1c054:	230c      	movs	r3, #12
   1c056:	223e      	movs	r2, #62	; 0x3e
   1c058:	2180      	movs	r1, #128	; 0x80
   1c05a:	4c27      	ldr	r4, [pc, #156]	; (1c0f8 <mmc_cmd8+0x124>)
   1c05c:	47a0      	blx	r4
   1c05e:	0002      	movs	r2, r0
   1c060:	4b26      	ldr	r3, [pc, #152]	; (1c0fc <mmc_cmd8+0x128>)
   1c062:	429a      	cmp	r2, r3
   1c064:	d135      	bne.n	1c0d2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1c066:	e014      	b.n	1c092 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1c068:	230c      	movs	r3, #12
   1c06a:	18fb      	adds	r3, r7, r3
   1c06c:	0018      	movs	r0, r3
   1c06e:	4b20      	ldr	r3, [pc, #128]	; (1c0f0 <mmc_cmd8+0x11c>)
   1c070:	4798      	blx	r3
   1c072:	0003      	movs	r3, r0
   1c074:	001a      	movs	r2, r3
   1c076:	2301      	movs	r3, #1
   1c078:	4053      	eors	r3, r2
   1c07a:	b2db      	uxtb	r3, r3
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d001      	beq.n	1c084 <mmc_cmd8+0xb0>
				return false;
   1c080:	2300      	movs	r3, #0
   1c082:	e02c      	b.n	1c0de <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1c084:	2316      	movs	r3, #22
   1c086:	18fb      	adds	r3, r7, r3
   1c088:	881a      	ldrh	r2, [r3, #0]
   1c08a:	2316      	movs	r3, #22
   1c08c:	18fb      	adds	r3, r7, r3
   1c08e:	3201      	adds	r2, #1
   1c090:	801a      	strh	r2, [r3, #0]
   1c092:	2316      	movs	r3, #22
   1c094:	18fb      	adds	r3, r7, r3
   1c096:	881b      	ldrh	r3, [r3, #0]
   1c098:	2b35      	cmp	r3, #53	; 0x35
   1c09a:	d9e5      	bls.n	1c068 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1c09c:	4b15      	ldr	r3, [pc, #84]	; (1c0f4 <mmc_cmd8+0x120>)
   1c09e:	681b      	ldr	r3, [r3, #0]
   1c0a0:	68fa      	ldr	r2, [r7, #12]
   1c0a2:	0852      	lsrs	r2, r2, #1
   1c0a4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1c0a6:	e014      	b.n	1c0d2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1c0a8:	230c      	movs	r3, #12
   1c0aa:	18fb      	adds	r3, r7, r3
   1c0ac:	0018      	movs	r0, r3
   1c0ae:	4b10      	ldr	r3, [pc, #64]	; (1c0f0 <mmc_cmd8+0x11c>)
   1c0b0:	4798      	blx	r3
   1c0b2:	0003      	movs	r3, r0
   1c0b4:	001a      	movs	r2, r3
   1c0b6:	2301      	movs	r3, #1
   1c0b8:	4053      	eors	r3, r2
   1c0ba:	b2db      	uxtb	r3, r3
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	d001      	beq.n	1c0c4 <mmc_cmd8+0xf0>
			return false;
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	e00c      	b.n	1c0de <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1c0c4:	2316      	movs	r3, #22
   1c0c6:	18fb      	adds	r3, r7, r3
   1c0c8:	881a      	ldrh	r2, [r3, #0]
   1c0ca:	2316      	movs	r3, #22
   1c0cc:	18fb      	adds	r3, r7, r3
   1c0ce:	3201      	adds	r2, #1
   1c0d0:	801a      	strh	r2, [r3, #0]
   1c0d2:	2316      	movs	r3, #22
   1c0d4:	18fb      	adds	r3, r7, r3
   1c0d6:	881b      	ldrh	r3, [r3, #0]
   1c0d8:	2b7f      	cmp	r3, #127	; 0x7f
   1c0da:	d9e5      	bls.n	1c0a8 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1c0dc:	2301      	movs	r3, #1
}
   1c0de:	0018      	movs	r0, r3
   1c0e0:	46bd      	mov	sp, r7
   1c0e2:	b007      	add	sp, #28
   1c0e4:	bd90      	pop	{r4, r7, pc}
   1c0e6:	46c0      	nop			; (mov r8, r8)
   1c0e8:	00081108 	.word	0x00081108
   1c0ec:	0001d86d 	.word	0x0001d86d
   1c0f0:	0001da99 	.word	0x0001da99
   1c0f4:	20003c9c 	.word	0x20003c9c
   1c0f8:	0001bc6d 	.word	0x0001bc6d
   1c0fc:	00000fff 	.word	0x00000fff

0001c100 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1c100:	b590      	push	{r4, r7, lr}
   1c102:	b083      	sub	sp, #12
   1c104:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1c106:	4b15      	ldr	r3, [pc, #84]	; (1c15c <sd_mmc_cmd9_spi+0x5c>)
   1c108:	681b      	ldr	r3, [r3, #0]
   1c10a:	891b      	ldrh	r3, [r3, #8]
   1c10c:	0419      	lsls	r1, r3, #16
   1c10e:	4814      	ldr	r0, [pc, #80]	; (1c160 <sd_mmc_cmd9_spi+0x60>)
   1c110:	2301      	movs	r3, #1
   1c112:	9300      	str	r3, [sp, #0]
   1c114:	2301      	movs	r3, #1
   1c116:	2210      	movs	r2, #16
   1c118:	4c12      	ldr	r4, [pc, #72]	; (1c164 <sd_mmc_cmd9_spi+0x64>)
   1c11a:	47a0      	blx	r4
   1c11c:	0003      	movs	r3, r0
   1c11e:	001a      	movs	r2, r3
   1c120:	2301      	movs	r3, #1
   1c122:	4053      	eors	r3, r2
   1c124:	b2db      	uxtb	r3, r3
   1c126:	2b00      	cmp	r3, #0
   1c128:	d001      	beq.n	1c12e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1c12a:	2300      	movs	r3, #0
   1c12c:	e012      	b.n	1c154 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1c12e:	4b0b      	ldr	r3, [pc, #44]	; (1c15c <sd_mmc_cmd9_spi+0x5c>)
   1c130:	681b      	ldr	r3, [r3, #0]
   1c132:	330e      	adds	r3, #14
   1c134:	2101      	movs	r1, #1
   1c136:	0018      	movs	r0, r3
   1c138:	4b0b      	ldr	r3, [pc, #44]	; (1c168 <sd_mmc_cmd9_spi+0x68>)
   1c13a:	4798      	blx	r3
   1c13c:	0003      	movs	r3, r0
   1c13e:	001a      	movs	r2, r3
   1c140:	2301      	movs	r3, #1
   1c142:	4053      	eors	r3, r2
   1c144:	b2db      	uxtb	r3, r3
   1c146:	2b00      	cmp	r3, #0
   1c148:	d001      	beq.n	1c14e <sd_mmc_cmd9_spi+0x4e>
		return false;
   1c14a:	2300      	movs	r3, #0
   1c14c:	e002      	b.n	1c154 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1c14e:	4b07      	ldr	r3, [pc, #28]	; (1c16c <sd_mmc_cmd9_spi+0x6c>)
   1c150:	4798      	blx	r3
   1c152:	0003      	movs	r3, r0
}
   1c154:	0018      	movs	r0, r3
   1c156:	46bd      	mov	sp, r7
   1c158:	b001      	add	sp, #4
   1c15a:	bd90      	pop	{r4, r7, pc}
   1c15c:	20003c9c 	.word	0x20003c9c
   1c160:	00081109 	.word	0x00081109
   1c164:	0001d86d 	.word	0x0001d86d
   1c168:	0001db3d 	.word	0x0001db3d
   1c16c:	0001dbe1 	.word	0x0001dbe1

0001c170 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1c170:	b5b0      	push	{r4, r5, r7, lr}
   1c172:	b084      	sub	sp, #16
   1c174:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1c176:	4b45      	ldr	r3, [pc, #276]	; (1c28c <mmc_decode_csd+0x11c>)
   1c178:	681b      	ldr	r3, [r3, #0]
   1c17a:	330e      	adds	r3, #14
   1c17c:	0018      	movs	r0, r3
   1c17e:	2304      	movs	r3, #4
   1c180:	227a      	movs	r2, #122	; 0x7a
   1c182:	2180      	movs	r1, #128	; 0x80
   1c184:	4c42      	ldr	r4, [pc, #264]	; (1c290 <mmc_decode_csd+0x120>)
   1c186:	47a0      	blx	r4
   1c188:	0003      	movs	r3, r0
   1c18a:	2b02      	cmp	r3, #2
   1c18c:	d011      	beq.n	1c1b2 <mmc_decode_csd+0x42>
   1c18e:	d802      	bhi.n	1c196 <mmc_decode_csd+0x26>
   1c190:	2b01      	cmp	r3, #1
   1c192:	d009      	beq.n	1c1a8 <mmc_decode_csd+0x38>
   1c194:	e003      	b.n	1c19e <mmc_decode_csd+0x2e>
   1c196:	2b03      	cmp	r3, #3
   1c198:	d010      	beq.n	1c1bc <mmc_decode_csd+0x4c>
   1c19a:	2b04      	cmp	r3, #4
   1c19c:	d013      	beq.n	1c1c6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1c19e:	4b3b      	ldr	r3, [pc, #236]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1a0:	681b      	ldr	r3, [r3, #0]
   1c1a2:	2212      	movs	r2, #18
   1c1a4:	731a      	strb	r2, [r3, #12]
		break;
   1c1a6:	e013      	b.n	1c1d0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1c1a8:	4b38      	ldr	r3, [pc, #224]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1aa:	681b      	ldr	r3, [r3, #0]
   1c1ac:	2214      	movs	r2, #20
   1c1ae:	731a      	strb	r2, [r3, #12]
		break;
   1c1b0:	e00e      	b.n	1c1d0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1c1b2:	4b36      	ldr	r3, [pc, #216]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1b4:	681b      	ldr	r3, [r3, #0]
   1c1b6:	2222      	movs	r2, #34	; 0x22
   1c1b8:	731a      	strb	r2, [r3, #12]
		break;
   1c1ba:	e009      	b.n	1c1d0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1c1bc:	4b33      	ldr	r3, [pc, #204]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1be:	681b      	ldr	r3, [r3, #0]
   1c1c0:	2230      	movs	r2, #48	; 0x30
   1c1c2:	731a      	strb	r2, [r3, #12]
		break;
   1c1c4:	e004      	b.n	1c1d0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1c1c6:	4b31      	ldr	r3, [pc, #196]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1c8:	681b      	ldr	r3, [r3, #0]
   1c1ca:	2240      	movs	r2, #64	; 0x40
   1c1cc:	731a      	strb	r2, [r3, #12]
		break;
   1c1ce:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1c1d0:	4b2e      	ldr	r3, [pc, #184]	; (1c28c <mmc_decode_csd+0x11c>)
   1c1d2:	681b      	ldr	r3, [r3, #0]
   1c1d4:	330e      	adds	r3, #14
   1c1d6:	0018      	movs	r0, r3
   1c1d8:	2308      	movs	r3, #8
   1c1da:	2260      	movs	r2, #96	; 0x60
   1c1dc:	2180      	movs	r1, #128	; 0x80
   1c1de:	4c2c      	ldr	r4, [pc, #176]	; (1c290 <mmc_decode_csd+0x120>)
   1c1e0:	47a0      	blx	r4
   1c1e2:	0003      	movs	r3, r0
   1c1e4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1c1e6:	68fb      	ldr	r3, [r7, #12]
   1c1e8:	2207      	movs	r2, #7
   1c1ea:	401a      	ands	r2, r3
   1c1ec:	4b29      	ldr	r3, [pc, #164]	; (1c294 <mmc_decode_csd+0x124>)
   1c1ee:	0092      	lsls	r2, r2, #2
   1c1f0:	58d3      	ldr	r3, [r2, r3]
   1c1f2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1c1f4:	68fb      	ldr	r3, [r7, #12]
   1c1f6:	08db      	lsrs	r3, r3, #3
   1c1f8:	220f      	movs	r2, #15
   1c1fa:	401a      	ands	r2, r3
   1c1fc:	4b26      	ldr	r3, [pc, #152]	; (1c298 <mmc_decode_csd+0x128>)
   1c1fe:	0092      	lsls	r2, r2, #2
   1c200:	58d3      	ldr	r3, [r2, r3]
   1c202:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1c204:	4b21      	ldr	r3, [pc, #132]	; (1c28c <mmc_decode_csd+0x11c>)
   1c206:	681b      	ldr	r3, [r3, #0]
   1c208:	68ba      	ldr	r2, [r7, #8]
   1c20a:	6879      	ldr	r1, [r7, #4]
   1c20c:	434a      	muls	r2, r1
   1c20e:	21fa      	movs	r1, #250	; 0xfa
   1c210:	0089      	lsls	r1, r1, #2
   1c212:	434a      	muls	r2, r1
   1c214:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1c216:	4b1d      	ldr	r3, [pc, #116]	; (1c28c <mmc_decode_csd+0x11c>)
   1c218:	681b      	ldr	r3, [r3, #0]
   1c21a:	330e      	adds	r3, #14
   1c21c:	0018      	movs	r0, r3
   1c21e:	230c      	movs	r3, #12
   1c220:	223e      	movs	r2, #62	; 0x3e
   1c222:	2180      	movs	r1, #128	; 0x80
   1c224:	4c1a      	ldr	r4, [pc, #104]	; (1c290 <mmc_decode_csd+0x120>)
   1c226:	47a0      	blx	r4
   1c228:	0002      	movs	r2, r0
   1c22a:	4b1c      	ldr	r3, [pc, #112]	; (1c29c <mmc_decode_csd+0x12c>)
   1c22c:	429a      	cmp	r2, r3
   1c22e:	d028      	beq.n	1c282 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1c230:	4b16      	ldr	r3, [pc, #88]	; (1c28c <mmc_decode_csd+0x11c>)
   1c232:	681b      	ldr	r3, [r3, #0]
   1c234:	330e      	adds	r3, #14
   1c236:	0018      	movs	r0, r3
   1c238:	230c      	movs	r3, #12
   1c23a:	223e      	movs	r2, #62	; 0x3e
   1c23c:	2180      	movs	r1, #128	; 0x80
   1c23e:	4c14      	ldr	r4, [pc, #80]	; (1c290 <mmc_decode_csd+0x120>)
   1c240:	47a0      	blx	r4
   1c242:	0003      	movs	r3, r0
   1c244:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1c246:	4b11      	ldr	r3, [pc, #68]	; (1c28c <mmc_decode_csd+0x11c>)
   1c248:	681b      	ldr	r3, [r3, #0]
   1c24a:	330e      	adds	r3, #14
   1c24c:	0018      	movs	r0, r3
   1c24e:	2303      	movs	r3, #3
   1c250:	222f      	movs	r2, #47	; 0x2f
   1c252:	2180      	movs	r1, #128	; 0x80
   1c254:	4d0e      	ldr	r5, [pc, #56]	; (1c290 <mmc_decode_csd+0x120>)
   1c256:	47a8      	blx	r5
   1c258:	0003      	movs	r3, r0
   1c25a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1c25c:	409c      	lsls	r4, r3
   1c25e:	0023      	movs	r3, r4
   1c260:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1c262:	4b0a      	ldr	r3, [pc, #40]	; (1c28c <mmc_decode_csd+0x11c>)
   1c264:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1c266:	4b09      	ldr	r3, [pc, #36]	; (1c28c <mmc_decode_csd+0x11c>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	330e      	adds	r3, #14
   1c26c:	0018      	movs	r0, r3
   1c26e:	2304      	movs	r3, #4
   1c270:	2250      	movs	r2, #80	; 0x50
   1c272:	2180      	movs	r1, #128	; 0x80
   1c274:	4d06      	ldr	r5, [pc, #24]	; (1c290 <mmc_decode_csd+0x120>)
   1c276:	47a8      	blx	r5
   1c278:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1c27a:	683b      	ldr	r3, [r7, #0]
   1c27c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1c27e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1c280:	6063      	str	r3, [r4, #4]
	}
}
   1c282:	46c0      	nop			; (mov r8, r8)
   1c284:	46bd      	mov	sp, r7
   1c286:	b004      	add	sp, #16
   1c288:	bdb0      	pop	{r4, r5, r7, pc}
   1c28a:	46c0      	nop			; (mov r8, r8)
   1c28c:	20003c9c 	.word	0x20003c9c
   1c290:	0001bc6d 	.word	0x0001bc6d
   1c294:	00035760 	.word	0x00035760
   1c298:	000357bc 	.word	0x000357bc
   1c29c:	00000fff 	.word	0x00000fff

0001c2a0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1c2a0:	b5b0      	push	{r4, r5, r7, lr}
   1c2a2:	b084      	sub	sp, #16
   1c2a4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1c2a6:	4b35      	ldr	r3, [pc, #212]	; (1c37c <sd_decode_csd+0xdc>)
   1c2a8:	681b      	ldr	r3, [r3, #0]
   1c2aa:	330e      	adds	r3, #14
   1c2ac:	0018      	movs	r0, r3
   1c2ae:	2308      	movs	r3, #8
   1c2b0:	2260      	movs	r2, #96	; 0x60
   1c2b2:	2180      	movs	r1, #128	; 0x80
   1c2b4:	4c32      	ldr	r4, [pc, #200]	; (1c380 <sd_decode_csd+0xe0>)
   1c2b6:	47a0      	blx	r4
   1c2b8:	0003      	movs	r3, r0
   1c2ba:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1c2bc:	68fb      	ldr	r3, [r7, #12]
   1c2be:	2207      	movs	r2, #7
   1c2c0:	401a      	ands	r2, r3
   1c2c2:	4b30      	ldr	r3, [pc, #192]	; (1c384 <sd_decode_csd+0xe4>)
   1c2c4:	0092      	lsls	r2, r2, #2
   1c2c6:	58d3      	ldr	r3, [r2, r3]
   1c2c8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1c2ca:	68fb      	ldr	r3, [r7, #12]
   1c2cc:	08db      	lsrs	r3, r3, #3
   1c2ce:	220f      	movs	r2, #15
   1c2d0:	401a      	ands	r2, r3
   1c2d2:	4b2d      	ldr	r3, [pc, #180]	; (1c388 <sd_decode_csd+0xe8>)
   1c2d4:	0092      	lsls	r2, r2, #2
   1c2d6:	58d3      	ldr	r3, [r2, r3]
   1c2d8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1c2da:	4b28      	ldr	r3, [pc, #160]	; (1c37c <sd_decode_csd+0xdc>)
   1c2dc:	681b      	ldr	r3, [r3, #0]
   1c2de:	68ba      	ldr	r2, [r7, #8]
   1c2e0:	6879      	ldr	r1, [r7, #4]
   1c2e2:	434a      	muls	r2, r1
   1c2e4:	21fa      	movs	r1, #250	; 0xfa
   1c2e6:	0089      	lsls	r1, r1, #2
   1c2e8:	434a      	muls	r2, r1
   1c2ea:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1c2ec:	4b23      	ldr	r3, [pc, #140]	; (1c37c <sd_decode_csd+0xdc>)
   1c2ee:	681b      	ldr	r3, [r3, #0]
   1c2f0:	330e      	adds	r3, #14
   1c2f2:	0018      	movs	r0, r3
   1c2f4:	2302      	movs	r3, #2
   1c2f6:	227e      	movs	r2, #126	; 0x7e
   1c2f8:	2180      	movs	r1, #128	; 0x80
   1c2fa:	4c21      	ldr	r4, [pc, #132]	; (1c380 <sd_decode_csd+0xe0>)
   1c2fc:	47a0      	blx	r4
   1c2fe:	1e03      	subs	r3, r0, #0
   1c300:	d00f      	beq.n	1c322 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1c302:	4b1e      	ldr	r3, [pc, #120]	; (1c37c <sd_decode_csd+0xdc>)
   1c304:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1c306:	4b1d      	ldr	r3, [pc, #116]	; (1c37c <sd_decode_csd+0xdc>)
   1c308:	681b      	ldr	r3, [r3, #0]
   1c30a:	330e      	adds	r3, #14
   1c30c:	0018      	movs	r0, r3
   1c30e:	2316      	movs	r3, #22
   1c310:	2230      	movs	r2, #48	; 0x30
   1c312:	2180      	movs	r1, #128	; 0x80
   1c314:	4d1a      	ldr	r5, [pc, #104]	; (1c380 <sd_decode_csd+0xe0>)
   1c316:	47a8      	blx	r5
   1c318:	0003      	movs	r3, r0
				* 512;
   1c31a:	3301      	adds	r3, #1
   1c31c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1c31e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1c320:	e028      	b.n	1c374 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1c322:	4b16      	ldr	r3, [pc, #88]	; (1c37c <sd_decode_csd+0xdc>)
   1c324:	681b      	ldr	r3, [r3, #0]
   1c326:	330e      	adds	r3, #14
   1c328:	0018      	movs	r0, r3
   1c32a:	230c      	movs	r3, #12
   1c32c:	223e      	movs	r2, #62	; 0x3e
   1c32e:	2180      	movs	r1, #128	; 0x80
   1c330:	4c13      	ldr	r4, [pc, #76]	; (1c380 <sd_decode_csd+0xe0>)
   1c332:	47a0      	blx	r4
   1c334:	0003      	movs	r3, r0
   1c336:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1c338:	4b10      	ldr	r3, [pc, #64]	; (1c37c <sd_decode_csd+0xdc>)
   1c33a:	681b      	ldr	r3, [r3, #0]
   1c33c:	330e      	adds	r3, #14
   1c33e:	0018      	movs	r0, r3
   1c340:	2303      	movs	r3, #3
   1c342:	222f      	movs	r2, #47	; 0x2f
   1c344:	2180      	movs	r1, #128	; 0x80
   1c346:	4d0e      	ldr	r5, [pc, #56]	; (1c380 <sd_decode_csd+0xe0>)
   1c348:	47a8      	blx	r5
   1c34a:	0003      	movs	r3, r0
   1c34c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1c34e:	409c      	lsls	r4, r3
   1c350:	0023      	movs	r3, r4
   1c352:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1c354:	4b09      	ldr	r3, [pc, #36]	; (1c37c <sd_decode_csd+0xdc>)
   1c356:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1c358:	4b08      	ldr	r3, [pc, #32]	; (1c37c <sd_decode_csd+0xdc>)
   1c35a:	681b      	ldr	r3, [r3, #0]
   1c35c:	330e      	adds	r3, #14
   1c35e:	0018      	movs	r0, r3
   1c360:	2304      	movs	r3, #4
   1c362:	2250      	movs	r2, #80	; 0x50
   1c364:	2180      	movs	r1, #128	; 0x80
   1c366:	4d06      	ldr	r5, [pc, #24]	; (1c380 <sd_decode_csd+0xe0>)
   1c368:	47a8      	blx	r5
   1c36a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1c36c:	683b      	ldr	r3, [r7, #0]
   1c36e:	4093      	lsls	r3, r2
				/ 1024;
   1c370:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1c372:	6063      	str	r3, [r4, #4]
}
   1c374:	46c0      	nop			; (mov r8, r8)
   1c376:	46bd      	mov	sp, r7
   1c378:	b004      	add	sp, #16
   1c37a:	bdb0      	pop	{r4, r5, r7, pc}
   1c37c:	20003c9c 	.word	0x20003c9c
   1c380:	0001bc6d 	.word	0x0001bc6d
   1c384:	00035760 	.word	0x00035760
   1c388:	0003577c 	.word	0x0003577c

0001c38c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1c38c:	b580      	push	{r7, lr}
   1c38e:	b082      	sub	sp, #8
   1c390:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1c392:	4b11      	ldr	r3, [pc, #68]	; (1c3d8 <sd_mmc_cmd13+0x4c>)
   1c394:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1c396:	4b11      	ldr	r3, [pc, #68]	; (1c3dc <sd_mmc_cmd13+0x50>)
   1c398:	2100      	movs	r1, #0
   1c39a:	0018      	movs	r0, r3
   1c39c:	4b10      	ldr	r3, [pc, #64]	; (1c3e0 <sd_mmc_cmd13+0x54>)
   1c39e:	4798      	blx	r3
   1c3a0:	0003      	movs	r3, r0
   1c3a2:	001a      	movs	r2, r3
   1c3a4:	2301      	movs	r3, #1
   1c3a6:	4053      	eors	r3, r2
   1c3a8:	b2db      	uxtb	r3, r3
   1c3aa:	2b00      	cmp	r3, #0
   1c3ac:	d001      	beq.n	1c3b2 <sd_mmc_cmd13+0x26>
				return false;
   1c3ae:	2300      	movs	r3, #0
   1c3b0:	e00e      	b.n	1c3d0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1c3b2:	4b0c      	ldr	r3, [pc, #48]	; (1c3e4 <sd_mmc_cmd13+0x58>)
   1c3b4:	4798      	blx	r3
   1c3b6:	0002      	movs	r2, r0
   1c3b8:	23ff      	movs	r3, #255	; 0xff
   1c3ba:	4013      	ands	r3, r2
   1c3bc:	d006      	beq.n	1c3cc <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1c3be:	687b      	ldr	r3, [r7, #4]
   1c3c0:	1e5a      	subs	r2, r3, #1
   1c3c2:	607a      	str	r2, [r7, #4]
   1c3c4:	2b00      	cmp	r3, #0
   1c3c6:	d1e6      	bne.n	1c396 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1c3c8:	2300      	movs	r3, #0
   1c3ca:	e001      	b.n	1c3d0 <sd_mmc_cmd13+0x44>
				break;
   1c3cc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1c3ce:	2301      	movs	r3, #1
}
   1c3d0:	0018      	movs	r0, r3
   1c3d2:	46bd      	mov	sp, r7
   1c3d4:	b002      	add	sp, #8
   1c3d6:	bd80      	pop	{r7, pc}
   1c3d8:	00030d40 	.word	0x00030d40
   1c3dc:	00001b0d 	.word	0x00001b0d
   1c3e0:	0001d845 	.word	0x0001d845
   1c3e4:	0001da85 	.word	0x0001da85

0001c3e8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1c3e8:	b590      	push	{r4, r7, lr}
   1c3ea:	b085      	sub	sp, #20
   1c3ec:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1c3ee:	4b38      	ldr	r3, [pc, #224]	; (1c4d0 <sd_acmd51+0xe8>)
   1c3f0:	681b      	ldr	r3, [r3, #0]
   1c3f2:	891b      	ldrh	r3, [r3, #8]
   1c3f4:	041b      	lsls	r3, r3, #16
   1c3f6:	4a37      	ldr	r2, [pc, #220]	; (1c4d4 <sd_acmd51+0xec>)
   1c3f8:	0019      	movs	r1, r3
   1c3fa:	0010      	movs	r0, r2
   1c3fc:	4b36      	ldr	r3, [pc, #216]	; (1c4d8 <sd_acmd51+0xf0>)
   1c3fe:	4798      	blx	r3
   1c400:	0003      	movs	r3, r0
   1c402:	001a      	movs	r2, r3
   1c404:	2301      	movs	r3, #1
   1c406:	4053      	eors	r3, r2
   1c408:	b2db      	uxtb	r3, r3
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d001      	beq.n	1c412 <sd_acmd51+0x2a>
		return false;
   1c40e:	2300      	movs	r3, #0
   1c410:	e059      	b.n	1c4c6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1c412:	4832      	ldr	r0, [pc, #200]	; (1c4dc <sd_acmd51+0xf4>)
   1c414:	2301      	movs	r3, #1
   1c416:	9300      	str	r3, [sp, #0]
   1c418:	2301      	movs	r3, #1
   1c41a:	2208      	movs	r2, #8
   1c41c:	2100      	movs	r1, #0
   1c41e:	4c30      	ldr	r4, [pc, #192]	; (1c4e0 <sd_acmd51+0xf8>)
   1c420:	47a0      	blx	r4
   1c422:	0003      	movs	r3, r0
   1c424:	001a      	movs	r2, r3
   1c426:	2301      	movs	r3, #1
   1c428:	4053      	eors	r3, r2
   1c42a:	b2db      	uxtb	r3, r3
   1c42c:	2b00      	cmp	r3, #0
   1c42e:	d001      	beq.n	1c434 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1c430:	2300      	movs	r3, #0
   1c432:	e048      	b.n	1c4c6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1c434:	003b      	movs	r3, r7
   1c436:	2101      	movs	r1, #1
   1c438:	0018      	movs	r0, r3
   1c43a:	4b2a      	ldr	r3, [pc, #168]	; (1c4e4 <sd_acmd51+0xfc>)
   1c43c:	4798      	blx	r3
   1c43e:	0003      	movs	r3, r0
   1c440:	001a      	movs	r2, r3
   1c442:	2301      	movs	r3, #1
   1c444:	4053      	eors	r3, r2
   1c446:	b2db      	uxtb	r3, r3
   1c448:	2b00      	cmp	r3, #0
   1c44a:	d001      	beq.n	1c450 <sd_acmd51+0x68>
		return false;
   1c44c:	2300      	movs	r3, #0
   1c44e:	e03a      	b.n	1c4c6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1c450:	4b25      	ldr	r3, [pc, #148]	; (1c4e8 <sd_acmd51+0x100>)
   1c452:	4798      	blx	r3
   1c454:	0003      	movs	r3, r0
   1c456:	001a      	movs	r2, r3
   1c458:	2301      	movs	r3, #1
   1c45a:	4053      	eors	r3, r2
   1c45c:	b2db      	uxtb	r3, r3
   1c45e:	2b00      	cmp	r3, #0
   1c460:	d001      	beq.n	1c466 <sd_acmd51+0x7e>
		return false;
   1c462:	2300      	movs	r3, #0
   1c464:	e02f      	b.n	1c4c6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1c466:	0038      	movs	r0, r7
   1c468:	2304      	movs	r3, #4
   1c46a:	2238      	movs	r2, #56	; 0x38
   1c46c:	2140      	movs	r1, #64	; 0x40
   1c46e:	4c1f      	ldr	r4, [pc, #124]	; (1c4ec <sd_acmd51+0x104>)
   1c470:	47a0      	blx	r4
   1c472:	0003      	movs	r3, r0
   1c474:	2b01      	cmp	r3, #1
   1c476:	d008      	beq.n	1c48a <sd_acmd51+0xa2>
   1c478:	d302      	bcc.n	1c480 <sd_acmd51+0x98>
   1c47a:	2b02      	cmp	r3, #2
   1c47c:	d00a      	beq.n	1c494 <sd_acmd51+0xac>
   1c47e:	e01c      	b.n	1c4ba <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1c480:	4b13      	ldr	r3, [pc, #76]	; (1c4d0 <sd_acmd51+0xe8>)
   1c482:	681b      	ldr	r3, [r3, #0]
   1c484:	2210      	movs	r2, #16
   1c486:	731a      	strb	r2, [r3, #12]
		break;
   1c488:	e01c      	b.n	1c4c4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1c48a:	4b11      	ldr	r3, [pc, #68]	; (1c4d0 <sd_acmd51+0xe8>)
   1c48c:	681b      	ldr	r3, [r3, #0]
   1c48e:	221a      	movs	r2, #26
   1c490:	731a      	strb	r2, [r3, #12]
		break;
   1c492:	e017      	b.n	1c4c4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1c494:	0038      	movs	r0, r7
   1c496:	2301      	movs	r3, #1
   1c498:	222f      	movs	r2, #47	; 0x2f
   1c49a:	2140      	movs	r1, #64	; 0x40
   1c49c:	4c13      	ldr	r4, [pc, #76]	; (1c4ec <sd_acmd51+0x104>)
   1c49e:	47a0      	blx	r4
   1c4a0:	0003      	movs	r3, r0
   1c4a2:	2b01      	cmp	r3, #1
   1c4a4:	d104      	bne.n	1c4b0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1c4a6:	4b0a      	ldr	r3, [pc, #40]	; (1c4d0 <sd_acmd51+0xe8>)
   1c4a8:	681b      	ldr	r3, [r3, #0]
   1c4aa:	2230      	movs	r2, #48	; 0x30
   1c4ac:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1c4ae:	e009      	b.n	1c4c4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1c4b0:	4b07      	ldr	r3, [pc, #28]	; (1c4d0 <sd_acmd51+0xe8>)
   1c4b2:	681b      	ldr	r3, [r3, #0]
   1c4b4:	2220      	movs	r2, #32
   1c4b6:	731a      	strb	r2, [r3, #12]
		break;
   1c4b8:	e004      	b.n	1c4c4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1c4ba:	4b05      	ldr	r3, [pc, #20]	; (1c4d0 <sd_acmd51+0xe8>)
   1c4bc:	681b      	ldr	r3, [r3, #0]
   1c4be:	2210      	movs	r2, #16
   1c4c0:	731a      	strb	r2, [r3, #12]
		break;
   1c4c2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1c4c4:	2301      	movs	r3, #1
}
   1c4c6:	0018      	movs	r0, r3
   1c4c8:	46bd      	mov	sp, r7
   1c4ca:	b003      	add	sp, #12
   1c4cc:	bd90      	pop	{r4, r7, pc}
   1c4ce:	46c0      	nop			; (mov r8, r8)
   1c4d0:	20003c9c 	.word	0x20003c9c
   1c4d4:	00001137 	.word	0x00001137
   1c4d8:	0001d845 	.word	0x0001d845
   1c4dc:	00081133 	.word	0x00081133
   1c4e0:	0001d86d 	.word	0x0001d86d
   1c4e4:	0001db3d 	.word	0x0001db3d
   1c4e8:	0001dbe1 	.word	0x0001dbe1
   1c4ec:	0001bc6d 	.word	0x0001bc6d

0001c4f0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1c4f0:	b580      	push	{r7, lr}
   1c4f2:	b082      	sub	sp, #8
   1c4f4:	af00      	add	r7, sp, #0
   1c4f6:	0002      	movs	r2, r0
   1c4f8:	1dfb      	adds	r3, r7, #7
   1c4fa:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1c4fc:	1dfb      	adds	r3, r7, #7
   1c4fe:	781b      	ldrb	r3, [r3, #0]
   1c500:	2b00      	cmp	r3, #0
   1c502:	d001      	beq.n	1c508 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1c504:	2304      	movs	r3, #4
   1c506:	e047      	b.n	1c598 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1c508:	1dfb      	adds	r3, r7, #7
   1c50a:	781b      	ldrb	r3, [r3, #0]
   1c50c:	4a24      	ldr	r2, [pc, #144]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c50e:	015b      	lsls	r3, r3, #5
   1c510:	18d3      	adds	r3, r2, r3
   1c512:	330a      	adds	r3, #10
   1c514:	781b      	ldrb	r3, [r3, #0]
   1c516:	2b04      	cmp	r3, #4
   1c518:	d008      	beq.n	1c52c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1c51a:	1dfb      	adds	r3, r7, #7
   1c51c:	781b      	ldrb	r3, [r3, #0]
   1c51e:	4a20      	ldr	r2, [pc, #128]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c520:	015b      	lsls	r3, r3, #5
   1c522:	18d3      	adds	r3, r2, r3
   1c524:	330a      	adds	r3, #10
   1c526:	781b      	ldrb	r3, [r3, #0]
   1c528:	2b03      	cmp	r3, #3
   1c52a:	d11d      	bne.n	1c568 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1c52c:	1dfb      	adds	r3, r7, #7
   1c52e:	781b      	ldrb	r3, [r3, #0]
   1c530:	4a1b      	ldr	r2, [pc, #108]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c532:	015b      	lsls	r3, r3, #5
   1c534:	18d3      	adds	r3, r2, r3
   1c536:	330a      	adds	r3, #10
   1c538:	2202      	movs	r2, #2
   1c53a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1c53c:	1dfb      	adds	r3, r7, #7
   1c53e:	781a      	ldrb	r2, [r3, #0]
   1c540:	4b17      	ldr	r3, [pc, #92]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c542:	0152      	lsls	r2, r2, #5
   1c544:	4917      	ldr	r1, [pc, #92]	; (1c5a4 <sd_mmc_select_slot+0xb4>)
   1c546:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1c548:	1dfb      	adds	r3, r7, #7
   1c54a:	781b      	ldrb	r3, [r3, #0]
   1c54c:	4a14      	ldr	r2, [pc, #80]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c54e:	015b      	lsls	r3, r3, #5
   1c550:	18d3      	adds	r3, r2, r3
   1c552:	330d      	adds	r3, #13
   1c554:	2201      	movs	r2, #1
   1c556:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1c558:	1dfb      	adds	r3, r7, #7
   1c55a:	781b      	ldrb	r3, [r3, #0]
   1c55c:	4a10      	ldr	r2, [pc, #64]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c55e:	015b      	lsls	r3, r3, #5
   1c560:	18d3      	adds	r3, r2, r3
   1c562:	331e      	adds	r3, #30
   1c564:	2200      	movs	r2, #0
   1c566:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1c568:	4b0f      	ldr	r3, [pc, #60]	; (1c5a8 <sd_mmc_select_slot+0xb8>)
   1c56a:	1dfa      	adds	r2, r7, #7
   1c56c:	7812      	ldrb	r2, [r2, #0]
   1c56e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1c570:	1dfb      	adds	r3, r7, #7
   1c572:	781b      	ldrb	r3, [r3, #0]
   1c574:	015a      	lsls	r2, r3, #5
   1c576:	4b0a      	ldr	r3, [pc, #40]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c578:	18d2      	adds	r2, r2, r3
   1c57a:	4b0c      	ldr	r3, [pc, #48]	; (1c5ac <sd_mmc_select_slot+0xbc>)
   1c57c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1c57e:	4b0c      	ldr	r3, [pc, #48]	; (1c5b0 <sd_mmc_select_slot+0xc0>)
   1c580:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1c582:	1dfb      	adds	r3, r7, #7
   1c584:	781b      	ldrb	r3, [r3, #0]
   1c586:	4a06      	ldr	r2, [pc, #24]	; (1c5a0 <sd_mmc_select_slot+0xb0>)
   1c588:	015b      	lsls	r3, r3, #5
   1c58a:	18d3      	adds	r3, r2, r3
   1c58c:	330a      	adds	r3, #10
   1c58e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1c590:	3b02      	subs	r3, #2
   1c592:	425a      	negs	r2, r3
   1c594:	4153      	adcs	r3, r2
   1c596:	b2db      	uxtb	r3, r3
}
   1c598:	0018      	movs	r0, r3
   1c59a:	46bd      	mov	sp, r7
   1c59c:	b002      	add	sp, #8
   1c59e:	bd80      	pop	{r7, pc}
   1c5a0:	20003c78 	.word	0x20003c78
   1c5a4:	00061a80 	.word	0x00061a80
   1c5a8:	20003c98 	.word	0x20003c98
   1c5ac:	20003c9c 	.word	0x20003c9c
   1c5b0:	0001c5b5 	.word	0x0001c5b5

0001c5b4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1c5b4:	b5b0      	push	{r4, r5, r7, lr}
   1c5b6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5b8:	4b09      	ldr	r3, [pc, #36]	; (1c5e0 <sd_mmc_configure_slot+0x2c>)
   1c5ba:	7818      	ldrb	r0, [r3, #0]
   1c5bc:	4b09      	ldr	r3, [pc, #36]	; (1c5e4 <sd_mmc_configure_slot+0x30>)
   1c5be:	681b      	ldr	r3, [r3, #0]
   1c5c0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1c5c2:	4b08      	ldr	r3, [pc, #32]	; (1c5e4 <sd_mmc_configure_slot+0x30>)
   1c5c4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5c6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1c5c8:	4b06      	ldr	r3, [pc, #24]	; (1c5e4 <sd_mmc_configure_slot+0x30>)
   1c5ca:	681b      	ldr	r3, [r3, #0]
   1c5cc:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5ce:	1e5c      	subs	r4, r3, #1
   1c5d0:	41a3      	sbcs	r3, r4
   1c5d2:	b2db      	uxtb	r3, r3
   1c5d4:	4c04      	ldr	r4, [pc, #16]	; (1c5e8 <sd_mmc_configure_slot+0x34>)
   1c5d6:	47a0      	blx	r4
}
   1c5d8:	46c0      	nop			; (mov r8, r8)
   1c5da:	46bd      	mov	sp, r7
   1c5dc:	bdb0      	pop	{r4, r5, r7, pc}
   1c5de:	46c0      	nop			; (mov r8, r8)
   1c5e0:	20003c98 	.word	0x20003c98
   1c5e4:	20003c9c 	.word	0x20003c9c
   1c5e8:	0001d72d 	.word	0x0001d72d

0001c5ec <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1c5ec:	b580      	push	{r7, lr}
   1c5ee:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1c5f0:	4b05      	ldr	r3, [pc, #20]	; (1c608 <sd_mmc_deselect_slot+0x1c>)
   1c5f2:	781b      	ldrb	r3, [r3, #0]
   1c5f4:	2b00      	cmp	r3, #0
   1c5f6:	d104      	bne.n	1c602 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1c5f8:	4b03      	ldr	r3, [pc, #12]	; (1c608 <sd_mmc_deselect_slot+0x1c>)
   1c5fa:	781b      	ldrb	r3, [r3, #0]
   1c5fc:	0018      	movs	r0, r3
   1c5fe:	4b03      	ldr	r3, [pc, #12]	; (1c60c <sd_mmc_deselect_slot+0x20>)
   1c600:	4798      	blx	r3
	}
}
   1c602:	46c0      	nop			; (mov r8, r8)
   1c604:	46bd      	mov	sp, r7
   1c606:	bd80      	pop	{r7, pc}
   1c608:	20003c98 	.word	0x20003c98
   1c60c:	0001d7b5 	.word	0x0001d7b5

0001c610 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1c610:	b580      	push	{r7, lr}
   1c612:	b082      	sub	sp, #8
   1c614:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1c616:	1dfb      	adds	r3, r7, #7
   1c618:	2200      	movs	r2, #0
   1c61a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1c61c:	4b59      	ldr	r3, [pc, #356]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c61e:	681b      	ldr	r3, [r3, #0]
   1c620:	2201      	movs	r2, #1
   1c622:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1c624:	4b57      	ldr	r3, [pc, #348]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c626:	681b      	ldr	r3, [r3, #0]
   1c628:	2200      	movs	r2, #0
   1c62a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1c62c:	4b55      	ldr	r3, [pc, #340]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c62e:	681b      	ldr	r3, [r3, #0]
   1c630:	2200      	movs	r2, #0
   1c632:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1c634:	4b54      	ldr	r3, [pc, #336]	; (1c788 <sd_mmc_spi_card_init+0x178>)
   1c636:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1c638:	2388      	movs	r3, #136	; 0x88
   1c63a:	015b      	lsls	r3, r3, #5
   1c63c:	2100      	movs	r1, #0
   1c63e:	0018      	movs	r0, r3
   1c640:	4b52      	ldr	r3, [pc, #328]	; (1c78c <sd_mmc_spi_card_init+0x17c>)
   1c642:	4798      	blx	r3
   1c644:	0003      	movs	r3, r0
   1c646:	001a      	movs	r2, r3
   1c648:	2301      	movs	r3, #1
   1c64a:	4053      	eors	r3, r2
   1c64c:	b2db      	uxtb	r3, r3
   1c64e:	2b00      	cmp	r3, #0
   1c650:	d001      	beq.n	1c656 <sd_mmc_spi_card_init+0x46>
		return false;
   1c652:	2300      	movs	r3, #0
   1c654:	e092      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1c656:	1dfb      	adds	r3, r7, #7
   1c658:	0018      	movs	r0, r3
   1c65a:	4b4d      	ldr	r3, [pc, #308]	; (1c790 <sd_mmc_spi_card_init+0x180>)
   1c65c:	4798      	blx	r3
   1c65e:	0003      	movs	r3, r0
   1c660:	001a      	movs	r2, r3
   1c662:	2301      	movs	r3, #1
   1c664:	4053      	eors	r3, r2
   1c666:	b2db      	uxtb	r3, r3
   1c668:	2b00      	cmp	r3, #0
   1c66a:	d001      	beq.n	1c670 <sd_mmc_spi_card_init+0x60>
		return false;
   1c66c:	2300      	movs	r3, #0
   1c66e:	e085      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1c670:	4b48      	ldr	r3, [pc, #288]	; (1c794 <sd_mmc_spi_card_init+0x184>)
   1c672:	4798      	blx	r3
   1c674:	0003      	movs	r3, r0
   1c676:	001a      	movs	r2, r3
   1c678:	2301      	movs	r3, #1
   1c67a:	4053      	eors	r3, r2
   1c67c:	b2db      	uxtb	r3, r3
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d001      	beq.n	1c686 <sd_mmc_spi_card_init+0x76>
		return false;
   1c682:	2300      	movs	r3, #0
   1c684:	e07a      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c686:	4b3f      	ldr	r3, [pc, #252]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c688:	681b      	ldr	r3, [r3, #0]
   1c68a:	7adb      	ldrb	r3, [r3, #11]
   1c68c:	001a      	movs	r2, r3
   1c68e:	2301      	movs	r3, #1
   1c690:	4013      	ands	r3, r2
   1c692:	d021      	beq.n	1c6d8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1c694:	1dfb      	adds	r3, r7, #7
   1c696:	781b      	ldrb	r3, [r3, #0]
   1c698:	0018      	movs	r0, r3
   1c69a:	4b3f      	ldr	r3, [pc, #252]	; (1c798 <sd_mmc_spi_card_init+0x188>)
   1c69c:	4798      	blx	r3
   1c69e:	0003      	movs	r3, r0
   1c6a0:	001a      	movs	r2, r3
   1c6a2:	2301      	movs	r3, #1
   1c6a4:	4053      	eors	r3, r2
   1c6a6:	b2db      	uxtb	r3, r3
   1c6a8:	2b00      	cmp	r3, #0
   1c6aa:	d007      	beq.n	1c6bc <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1c6ac:	4b35      	ldr	r3, [pc, #212]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c6ae:	681b      	ldr	r3, [r3, #0]
   1c6b0:	2202      	movs	r2, #2
   1c6b2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1c6b4:	4b39      	ldr	r3, [pc, #228]	; (1c79c <sd_mmc_spi_card_init+0x18c>)
   1c6b6:	4798      	blx	r3
   1c6b8:	0003      	movs	r3, r0
   1c6ba:	e05f      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1c6bc:	4b38      	ldr	r3, [pc, #224]	; (1c7a0 <sd_mmc_spi_card_init+0x190>)
   1c6be:	2100      	movs	r1, #0
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	4b32      	ldr	r3, [pc, #200]	; (1c78c <sd_mmc_spi_card_init+0x17c>)
   1c6c4:	4798      	blx	r3
   1c6c6:	0003      	movs	r3, r0
   1c6c8:	001a      	movs	r2, r3
   1c6ca:	2301      	movs	r3, #1
   1c6cc:	4053      	eors	r3, r2
   1c6ce:	b2db      	uxtb	r3, r3
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	d001      	beq.n	1c6d8 <sd_mmc_spi_card_init+0xc8>
			return false;
   1c6d4:	2300      	movs	r3, #0
   1c6d6:	e051      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c6d8:	4b2a      	ldr	r3, [pc, #168]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c6da:	681b      	ldr	r3, [r3, #0]
   1c6dc:	7adb      	ldrb	r3, [r3, #11]
   1c6de:	001a      	movs	r2, r3
   1c6e0:	2301      	movs	r3, #1
   1c6e2:	4013      	ands	r3, r2
   1c6e4:	d017      	beq.n	1c716 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1c6e6:	4b2f      	ldr	r3, [pc, #188]	; (1c7a4 <sd_mmc_spi_card_init+0x194>)
   1c6e8:	4798      	blx	r3
   1c6ea:	0003      	movs	r3, r0
   1c6ec:	001a      	movs	r2, r3
   1c6ee:	2301      	movs	r3, #1
   1c6f0:	4053      	eors	r3, r2
   1c6f2:	b2db      	uxtb	r3, r3
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	d001      	beq.n	1c6fc <sd_mmc_spi_card_init+0xec>
			return false;
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	e03f      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1c6fc:	4b2a      	ldr	r3, [pc, #168]	; (1c7a8 <sd_mmc_spi_card_init+0x198>)
   1c6fe:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1c700:	4b2a      	ldr	r3, [pc, #168]	; (1c7ac <sd_mmc_spi_card_init+0x19c>)
   1c702:	4798      	blx	r3
   1c704:	0003      	movs	r3, r0
   1c706:	001a      	movs	r2, r3
   1c708:	2301      	movs	r3, #1
   1c70a:	4053      	eors	r3, r2
   1c70c:	b2db      	uxtb	r3, r3
   1c70e:	2b00      	cmp	r3, #0
   1c710:	d001      	beq.n	1c716 <sd_mmc_spi_card_init+0x106>
			return false;
   1c712:	2300      	movs	r3, #0
   1c714:	e032      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1c716:	4b1b      	ldr	r3, [pc, #108]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	7adb      	ldrb	r3, [r3, #11]
   1c71c:	001a      	movs	r2, r3
   1c71e:	2301      	movs	r3, #1
   1c720:	4013      	ands	r3, r2
   1c722:	d016      	beq.n	1c752 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1c724:	4b17      	ldr	r3, [pc, #92]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c726:	681b      	ldr	r3, [r3, #0]
   1c728:	7adb      	ldrb	r3, [r3, #11]
   1c72a:	001a      	movs	r2, r3
   1c72c:	2308      	movs	r3, #8
   1c72e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1c730:	d10f      	bne.n	1c752 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1c732:	2380      	movs	r3, #128	; 0x80
   1c734:	009b      	lsls	r3, r3, #2
   1c736:	4a1e      	ldr	r2, [pc, #120]	; (1c7b0 <sd_mmc_spi_card_init+0x1a0>)
   1c738:	0019      	movs	r1, r3
   1c73a:	0010      	movs	r0, r2
   1c73c:	4b13      	ldr	r3, [pc, #76]	; (1c78c <sd_mmc_spi_card_init+0x17c>)
   1c73e:	4798      	blx	r3
   1c740:	0003      	movs	r3, r0
   1c742:	001a      	movs	r2, r3
   1c744:	2301      	movs	r3, #1
   1c746:	4053      	eors	r3, r2
   1c748:	b2db      	uxtb	r3, r3
   1c74a:	2b00      	cmp	r3, #0
   1c74c:	d001      	beq.n	1c752 <sd_mmc_spi_card_init+0x142>
			return false;
   1c74e:	2300      	movs	r3, #0
   1c750:	e014      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c752:	4b0c      	ldr	r3, [pc, #48]	; (1c784 <sd_mmc_spi_card_init+0x174>)
   1c754:	681b      	ldr	r3, [r3, #0]
   1c756:	7adb      	ldrb	r3, [r3, #11]
   1c758:	001a      	movs	r2, r3
   1c75a:	2301      	movs	r3, #1
   1c75c:	4013      	ands	r3, r2
   1c75e:	d00a      	beq.n	1c776 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1c760:	4b14      	ldr	r3, [pc, #80]	; (1c7b4 <sd_mmc_spi_card_init+0x1a4>)
   1c762:	4798      	blx	r3
   1c764:	0003      	movs	r3, r0
   1c766:	001a      	movs	r2, r3
   1c768:	2301      	movs	r3, #1
   1c76a:	4053      	eors	r3, r2
   1c76c:	b2db      	uxtb	r3, r3
   1c76e:	2b00      	cmp	r3, #0
   1c770:	d001      	beq.n	1c776 <sd_mmc_spi_card_init+0x166>
			return false;
   1c772:	2300      	movs	r3, #0
   1c774:	e002      	b.n	1c77c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1c776:	4b10      	ldr	r3, [pc, #64]	; (1c7b8 <sd_mmc_spi_card_init+0x1a8>)
   1c778:	4798      	blx	r3
	return true;
   1c77a:	2301      	movs	r3, #1
}
   1c77c:	0018      	movs	r0, r3
   1c77e:	46bd      	mov	sp, r7
   1c780:	b002      	add	sp, #8
   1c782:	bd80      	pop	{r7, pc}
   1c784:	20003c9c 	.word	0x20003c9c
   1c788:	0001d7f9 	.word	0x0001d7f9
   1c78c:	0001d845 	.word	0x0001d845
   1c790:	0001bf65 	.word	0x0001bf65
   1c794:	0001bf59 	.word	0x0001bf59
   1c798:	0001be75 	.word	0x0001be75
   1c79c:	0001c7bd 	.word	0x0001c7bd
   1c7a0:	0000113b 	.word	0x0000113b
   1c7a4:	0001c101 	.word	0x0001c101
   1c7a8:	0001c2a1 	.word	0x0001c2a1
   1c7ac:	0001c3e9 	.word	0x0001c3e9
   1c7b0:	00001110 	.word	0x00001110
   1c7b4:	0001c38d 	.word	0x0001c38d
   1c7b8:	0001c5b5 	.word	0x0001c5b5

0001c7bc <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1c7bc:	b580      	push	{r7, lr}
   1c7be:	b082      	sub	sp, #8
   1c7c0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1c7c2:	2388      	movs	r3, #136	; 0x88
   1c7c4:	015b      	lsls	r3, r3, #5
   1c7c6:	2100      	movs	r1, #0
   1c7c8:	0018      	movs	r0, r3
   1c7ca:	4b32      	ldr	r3, [pc, #200]	; (1c894 <sd_mmc_spi_install_mmc+0xd8>)
   1c7cc:	4798      	blx	r3
   1c7ce:	0003      	movs	r3, r0
   1c7d0:	001a      	movs	r2, r3
   1c7d2:	2301      	movs	r3, #1
   1c7d4:	4053      	eors	r3, r2
   1c7d6:	b2db      	uxtb	r3, r3
   1c7d8:	2b00      	cmp	r3, #0
   1c7da:	d001      	beq.n	1c7e0 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1c7dc:	2300      	movs	r3, #0
   1c7de:	e055      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1c7e0:	4b2d      	ldr	r3, [pc, #180]	; (1c898 <sd_mmc_spi_install_mmc+0xdc>)
   1c7e2:	4798      	blx	r3
   1c7e4:	0003      	movs	r3, r0
   1c7e6:	001a      	movs	r2, r3
   1c7e8:	2301      	movs	r3, #1
   1c7ea:	4053      	eors	r3, r2
   1c7ec:	b2db      	uxtb	r3, r3
   1c7ee:	2b00      	cmp	r3, #0
   1c7f0:	d001      	beq.n	1c7f6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1c7f2:	2300      	movs	r3, #0
   1c7f4:	e04a      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1c7f6:	4b29      	ldr	r3, [pc, #164]	; (1c89c <sd_mmc_spi_install_mmc+0xe0>)
   1c7f8:	2100      	movs	r1, #0
   1c7fa:	0018      	movs	r0, r3
   1c7fc:	4b25      	ldr	r3, [pc, #148]	; (1c894 <sd_mmc_spi_install_mmc+0xd8>)
   1c7fe:	4798      	blx	r3
   1c800:	0003      	movs	r3, r0
   1c802:	001a      	movs	r2, r3
   1c804:	2301      	movs	r3, #1
   1c806:	4053      	eors	r3, r2
   1c808:	b2db      	uxtb	r3, r3
   1c80a:	2b00      	cmp	r3, #0
   1c80c:	d001      	beq.n	1c812 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1c80e:	2300      	movs	r3, #0
   1c810:	e03c      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1c812:	4b23      	ldr	r3, [pc, #140]	; (1c8a0 <sd_mmc_spi_install_mmc+0xe4>)
   1c814:	4798      	blx	r3
   1c816:	0003      	movs	r3, r0
   1c818:	001a      	movs	r2, r3
   1c81a:	2301      	movs	r3, #1
   1c81c:	4053      	eors	r3, r2
   1c81e:	b2db      	uxtb	r3, r3
   1c820:	2b00      	cmp	r3, #0
   1c822:	d001      	beq.n	1c828 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1c824:	2300      	movs	r3, #0
   1c826:	e031      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1c828:	4b1e      	ldr	r3, [pc, #120]	; (1c8a4 <sd_mmc_spi_install_mmc+0xe8>)
   1c82a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1c82c:	4b1e      	ldr	r3, [pc, #120]	; (1c8a8 <sd_mmc_spi_install_mmc+0xec>)
   1c82e:	681b      	ldr	r3, [r3, #0]
   1c830:	7b1b      	ldrb	r3, [r3, #12]
   1c832:	2b3f      	cmp	r3, #63	; 0x3f
   1c834:	d90c      	bls.n	1c850 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1c836:	1dfb      	adds	r3, r7, #7
   1c838:	0018      	movs	r0, r3
   1c83a:	4b1c      	ldr	r3, [pc, #112]	; (1c8ac <sd_mmc_spi_install_mmc+0xf0>)
   1c83c:	4798      	blx	r3
   1c83e:	0003      	movs	r3, r0
   1c840:	001a      	movs	r2, r3
   1c842:	2301      	movs	r3, #1
   1c844:	4053      	eors	r3, r2
   1c846:	b2db      	uxtb	r3, r3
   1c848:	2b00      	cmp	r3, #0
   1c84a:	d001      	beq.n	1c850 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1c84c:	2300      	movs	r3, #0
   1c84e:	e01d      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1c850:	2380      	movs	r3, #128	; 0x80
   1c852:	009b      	lsls	r3, r3, #2
   1c854:	4a16      	ldr	r2, [pc, #88]	; (1c8b0 <sd_mmc_spi_install_mmc+0xf4>)
   1c856:	0019      	movs	r1, r3
   1c858:	0010      	movs	r0, r2
   1c85a:	4b0e      	ldr	r3, [pc, #56]	; (1c894 <sd_mmc_spi_install_mmc+0xd8>)
   1c85c:	4798      	blx	r3
   1c85e:	0003      	movs	r3, r0
   1c860:	001a      	movs	r2, r3
   1c862:	2301      	movs	r3, #1
   1c864:	4053      	eors	r3, r2
   1c866:	b2db      	uxtb	r3, r3
   1c868:	2b00      	cmp	r3, #0
   1c86a:	d001      	beq.n	1c870 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1c86c:	2300      	movs	r3, #0
   1c86e:	e00d      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1c870:	4b10      	ldr	r3, [pc, #64]	; (1c8b4 <sd_mmc_spi_install_mmc+0xf8>)
   1c872:	4798      	blx	r3
   1c874:	0003      	movs	r3, r0
   1c876:	001a      	movs	r2, r3
   1c878:	2301      	movs	r3, #1
   1c87a:	4053      	eors	r3, r2
   1c87c:	b2db      	uxtb	r3, r3
   1c87e:	2b00      	cmp	r3, #0
   1c880:	d001      	beq.n	1c886 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1c882:	2300      	movs	r3, #0
   1c884:	e002      	b.n	1c88c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1c886:	4b0c      	ldr	r3, [pc, #48]	; (1c8b8 <sd_mmc_spi_install_mmc+0xfc>)
   1c888:	4798      	blx	r3
	return true;
   1c88a:	2301      	movs	r3, #1
}
   1c88c:	0018      	movs	r0, r3
   1c88e:	46bd      	mov	sp, r7
   1c890:	b002      	add	sp, #8
   1c892:	bd80      	pop	{r7, pc}
   1c894:	0001d845 	.word	0x0001d845
   1c898:	0001bdc9 	.word	0x0001bdc9
   1c89c:	0000113b 	.word	0x0000113b
   1c8a0:	0001c101 	.word	0x0001c101
   1c8a4:	0001c171 	.word	0x0001c171
   1c8a8:	20003c9c 	.word	0x20003c9c
   1c8ac:	0001bfd5 	.word	0x0001bfd5
   1c8b0:	00001110 	.word	0x00001110
   1c8b4:	0001c38d 	.word	0x0001c38d
   1c8b8:	0001c5b5 	.word	0x0001c5b5

0001c8bc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1c8bc:	b580      	push	{r7, lr}
   1c8be:	b082      	sub	sp, #8
   1c8c0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1c8c2:	1dfb      	adds	r3, r7, #7
   1c8c4:	2200      	movs	r2, #0
   1c8c6:	701a      	strb	r2, [r3, #0]
   1c8c8:	e00c      	b.n	1c8e4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1c8ca:	1dfb      	adds	r3, r7, #7
   1c8cc:	781b      	ldrb	r3, [r3, #0]
   1c8ce:	4a0c      	ldr	r2, [pc, #48]	; (1c900 <sd_mmc_init+0x44>)
   1c8d0:	015b      	lsls	r3, r3, #5
   1c8d2:	18d3      	adds	r3, r2, r3
   1c8d4:	330a      	adds	r3, #10
   1c8d6:	2204      	movs	r2, #4
   1c8d8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1c8da:	1dfb      	adds	r3, r7, #7
   1c8dc:	781a      	ldrb	r2, [r3, #0]
   1c8de:	1dfb      	adds	r3, r7, #7
   1c8e0:	3201      	adds	r2, #1
   1c8e2:	701a      	strb	r2, [r3, #0]
   1c8e4:	1dfb      	adds	r3, r7, #7
   1c8e6:	781b      	ldrb	r3, [r3, #0]
   1c8e8:	2b00      	cmp	r3, #0
   1c8ea:	d0ee      	beq.n	1c8ca <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1c8ec:	4b05      	ldr	r3, [pc, #20]	; (1c904 <sd_mmc_init+0x48>)
   1c8ee:	22ff      	movs	r2, #255	; 0xff
   1c8f0:	701a      	strb	r2, [r3, #0]
	driver_init();
   1c8f2:	4b05      	ldr	r3, [pc, #20]	; (1c908 <sd_mmc_init+0x4c>)
   1c8f4:	4798      	blx	r3
}
   1c8f6:	46c0      	nop			; (mov r8, r8)
   1c8f8:	46bd      	mov	sp, r7
   1c8fa:	b002      	add	sp, #8
   1c8fc:	bd80      	pop	{r7, pc}
   1c8fe:	46c0      	nop			; (mov r8, r8)
   1c900:	20003c78 	.word	0x20003c78
   1c904:	20003c98 	.word	0x20003c98
   1c908:	0001d665 	.word	0x0001d665

0001c90c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1c90c:	b590      	push	{r4, r7, lr}
   1c90e:	b085      	sub	sp, #20
   1c910:	af00      	add	r7, sp, #0
   1c912:	0002      	movs	r2, r0
   1c914:	1dfb      	adds	r3, r7, #7
   1c916:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1c918:	230f      	movs	r3, #15
   1c91a:	18fc      	adds	r4, r7, r3
   1c91c:	1dfb      	adds	r3, r7, #7
   1c91e:	781b      	ldrb	r3, [r3, #0]
   1c920:	0018      	movs	r0, r3
   1c922:	4b13      	ldr	r3, [pc, #76]	; (1c970 <sd_mmc_check+0x64>)
   1c924:	4798      	blx	r3
   1c926:	0003      	movs	r3, r0
   1c928:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1c92a:	230f      	movs	r3, #15
   1c92c:	18fb      	adds	r3, r7, r3
   1c92e:	781b      	ldrb	r3, [r3, #0]
   1c930:	2b01      	cmp	r3, #1
   1c932:	d005      	beq.n	1c940 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1c934:	4b0f      	ldr	r3, [pc, #60]	; (1c974 <sd_mmc_check+0x68>)
   1c936:	4798      	blx	r3
		return sd_mmc_err;
   1c938:	230f      	movs	r3, #15
   1c93a:	18fb      	adds	r3, r7, r3
   1c93c:	781b      	ldrb	r3, [r3, #0]
   1c93e:	e012      	b.n	1c966 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1c940:	4b0d      	ldr	r3, [pc, #52]	; (1c978 <sd_mmc_check+0x6c>)
   1c942:	4798      	blx	r3
   1c944:	1e03      	subs	r3, r0, #0
   1c946:	d007      	beq.n	1c958 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1c948:	4b0c      	ldr	r3, [pc, #48]	; (1c97c <sd_mmc_check+0x70>)
   1c94a:	681b      	ldr	r3, [r3, #0]
   1c94c:	2200      	movs	r2, #0
   1c94e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1c950:	4b08      	ldr	r3, [pc, #32]	; (1c974 <sd_mmc_check+0x68>)
   1c952:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1c954:	2301      	movs	r3, #1
   1c956:	e006      	b.n	1c966 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1c958:	4b08      	ldr	r3, [pc, #32]	; (1c97c <sd_mmc_check+0x70>)
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	2203      	movs	r2, #3
   1c95e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1c960:	4b04      	ldr	r3, [pc, #16]	; (1c974 <sd_mmc_check+0x68>)
   1c962:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1c964:	2303      	movs	r3, #3
}
   1c966:	0018      	movs	r0, r3
   1c968:	46bd      	mov	sp, r7
   1c96a:	b005      	add	sp, #20
   1c96c:	bd90      	pop	{r4, r7, pc}
   1c96e:	46c0      	nop			; (mov r8, r8)
   1c970:	0001c4f1 	.word	0x0001c4f1
   1c974:	0001c5ed 	.word	0x0001c5ed
   1c978:	0001c611 	.word	0x0001c611
   1c97c:	20003c9c 	.word	0x20003c9c

0001c980 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1c980:	b580      	push	{r7, lr}
   1c982:	b082      	sub	sp, #8
   1c984:	af00      	add	r7, sp, #0
   1c986:	0002      	movs	r2, r0
   1c988:	1dfb      	adds	r3, r7, #7
   1c98a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1c98c:	1dfb      	adds	r3, r7, #7
   1c98e:	781b      	ldrb	r3, [r3, #0]
   1c990:	0018      	movs	r0, r3
   1c992:	4b07      	ldr	r3, [pc, #28]	; (1c9b0 <sd_mmc_get_type+0x30>)
   1c994:	4798      	blx	r3
   1c996:	1e03      	subs	r3, r0, #0
   1c998:	d001      	beq.n	1c99e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1c99a:	2300      	movs	r3, #0
   1c99c:	e004      	b.n	1c9a8 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1c99e:	4b05      	ldr	r3, [pc, #20]	; (1c9b4 <sd_mmc_get_type+0x34>)
   1c9a0:	4798      	blx	r3
	return sd_mmc_card->type;
   1c9a2:	4b05      	ldr	r3, [pc, #20]	; (1c9b8 <sd_mmc_get_type+0x38>)
   1c9a4:	681b      	ldr	r3, [r3, #0]
   1c9a6:	7adb      	ldrb	r3, [r3, #11]
}
   1c9a8:	0018      	movs	r0, r3
   1c9aa:	46bd      	mov	sp, r7
   1c9ac:	b002      	add	sp, #8
   1c9ae:	bd80      	pop	{r7, pc}
   1c9b0:	0001c4f1 	.word	0x0001c4f1
   1c9b4:	0001c5ed 	.word	0x0001c5ed
   1c9b8:	20003c9c 	.word	0x20003c9c

0001c9bc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1c9bc:	b580      	push	{r7, lr}
   1c9be:	b082      	sub	sp, #8
   1c9c0:	af00      	add	r7, sp, #0
   1c9c2:	0002      	movs	r2, r0
   1c9c4:	1dfb      	adds	r3, r7, #7
   1c9c6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1c9c8:	1dfb      	adds	r3, r7, #7
   1c9ca:	781b      	ldrb	r3, [r3, #0]
   1c9cc:	0018      	movs	r0, r3
   1c9ce:	4b07      	ldr	r3, [pc, #28]	; (1c9ec <sd_mmc_get_capacity+0x30>)
   1c9d0:	4798      	blx	r3
   1c9d2:	1e03      	subs	r3, r0, #0
   1c9d4:	d001      	beq.n	1c9da <sd_mmc_get_capacity+0x1e>
		return 0;
   1c9d6:	2300      	movs	r3, #0
   1c9d8:	e004      	b.n	1c9e4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1c9da:	4b05      	ldr	r3, [pc, #20]	; (1c9f0 <sd_mmc_get_capacity+0x34>)
   1c9dc:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1c9de:	4b05      	ldr	r3, [pc, #20]	; (1c9f4 <sd_mmc_get_capacity+0x38>)
   1c9e0:	681b      	ldr	r3, [r3, #0]
   1c9e2:	685b      	ldr	r3, [r3, #4]
}
   1c9e4:	0018      	movs	r0, r3
   1c9e6:	46bd      	mov	sp, r7
   1c9e8:	b002      	add	sp, #8
   1c9ea:	bd80      	pop	{r7, pc}
   1c9ec:	0001c4f1 	.word	0x0001c4f1
   1c9f0:	0001c5ed 	.word	0x0001c5ed
   1c9f4:	20003c9c 	.word	0x20003c9c

0001c9f8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1c9f8:	b580      	push	{r7, lr}
   1c9fa:	b082      	sub	sp, #8
   1c9fc:	af00      	add	r7, sp, #0
   1c9fe:	0002      	movs	r2, r0
   1ca00:	1dfb      	adds	r3, r7, #7
   1ca02:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1ca04:	2300      	movs	r3, #0
}
   1ca06:	0018      	movs	r0, r3
   1ca08:	46bd      	mov	sp, r7
   1ca0a:	b002      	add	sp, #8
   1ca0c:	bd80      	pop	{r7, pc}
	...

0001ca10 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ca10:	b590      	push	{r4, r7, lr}
   1ca12:	b089      	sub	sp, #36	; 0x24
   1ca14:	af02      	add	r7, sp, #8
   1ca16:	6039      	str	r1, [r7, #0]
   1ca18:	0011      	movs	r1, r2
   1ca1a:	1dfb      	adds	r3, r7, #7
   1ca1c:	1c02      	adds	r2, r0, #0
   1ca1e:	701a      	strb	r2, [r3, #0]
   1ca20:	1d3b      	adds	r3, r7, #4
   1ca22:	1c0a      	adds	r2, r1, #0
   1ca24:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ca26:	230f      	movs	r3, #15
   1ca28:	18fc      	adds	r4, r7, r3
   1ca2a:	1dfb      	adds	r3, r7, #7
   1ca2c:	781b      	ldrb	r3, [r3, #0]
   1ca2e:	0018      	movs	r0, r3
   1ca30:	4b29      	ldr	r3, [pc, #164]	; (1cad8 <sd_mmc_init_read_blocks+0xc8>)
   1ca32:	4798      	blx	r3
   1ca34:	0003      	movs	r3, r0
   1ca36:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ca38:	230f      	movs	r3, #15
   1ca3a:	18fb      	adds	r3, r7, r3
   1ca3c:	781b      	ldrb	r3, [r3, #0]
   1ca3e:	2b00      	cmp	r3, #0
   1ca40:	d003      	beq.n	1ca4a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1ca42:	230f      	movs	r3, #15
   1ca44:	18fb      	adds	r3, r7, r3
   1ca46:	781b      	ldrb	r3, [r3, #0]
   1ca48:	e041      	b.n	1cace <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1ca4a:	4b24      	ldr	r3, [pc, #144]	; (1cadc <sd_mmc_init_read_blocks+0xcc>)
   1ca4c:	4798      	blx	r3
   1ca4e:	0003      	movs	r3, r0
   1ca50:	001a      	movs	r2, r3
   1ca52:	2301      	movs	r3, #1
   1ca54:	4053      	eors	r3, r2
   1ca56:	b2db      	uxtb	r3, r3
   1ca58:	2b00      	cmp	r3, #0
   1ca5a:	d003      	beq.n	1ca64 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1ca5c:	4b20      	ldr	r3, [pc, #128]	; (1cae0 <sd_mmc_init_read_blocks+0xd0>)
   1ca5e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ca60:	2305      	movs	r3, #5
   1ca62:	e034      	b.n	1cace <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1ca64:	1d3b      	adds	r3, r7, #4
   1ca66:	881b      	ldrh	r3, [r3, #0]
   1ca68:	2b01      	cmp	r3, #1
   1ca6a:	d902      	bls.n	1ca72 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1ca6c:	4b1d      	ldr	r3, [pc, #116]	; (1cae4 <sd_mmc_init_read_blocks+0xd4>)
   1ca6e:	617b      	str	r3, [r7, #20]
   1ca70:	e001      	b.n	1ca76 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1ca72:	4b1d      	ldr	r3, [pc, #116]	; (1cae8 <sd_mmc_init_read_blocks+0xd8>)
   1ca74:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ca76:	4b1d      	ldr	r3, [pc, #116]	; (1caec <sd_mmc_init_read_blocks+0xdc>)
   1ca78:	681b      	ldr	r3, [r3, #0]
   1ca7a:	7adb      	ldrb	r3, [r3, #11]
   1ca7c:	001a      	movs	r2, r3
   1ca7e:	2308      	movs	r3, #8
   1ca80:	4013      	ands	r3, r2
   1ca82:	d002      	beq.n	1ca8a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1ca84:	683b      	ldr	r3, [r7, #0]
   1ca86:	613b      	str	r3, [r7, #16]
   1ca88:	e002      	b.n	1ca90 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ca8a:	683b      	ldr	r3, [r7, #0]
   1ca8c:	025b      	lsls	r3, r3, #9
   1ca8e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ca90:	1d3b      	adds	r3, r7, #4
   1ca92:	881c      	ldrh	r4, [r3, #0]
   1ca94:	2380      	movs	r3, #128	; 0x80
   1ca96:	009a      	lsls	r2, r3, #2
   1ca98:	6939      	ldr	r1, [r7, #16]
   1ca9a:	6978      	ldr	r0, [r7, #20]
   1ca9c:	2301      	movs	r3, #1
   1ca9e:	9300      	str	r3, [sp, #0]
   1caa0:	0023      	movs	r3, r4
   1caa2:	4c13      	ldr	r4, [pc, #76]	; (1caf0 <sd_mmc_init_read_blocks+0xe0>)
   1caa4:	47a0      	blx	r4
   1caa6:	0003      	movs	r3, r0
   1caa8:	001a      	movs	r2, r3
   1caaa:	2301      	movs	r3, #1
   1caac:	4053      	eors	r3, r2
   1caae:	b2db      	uxtb	r3, r3
   1cab0:	2b00      	cmp	r3, #0
   1cab2:	d003      	beq.n	1cabc <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1cab4:	4b0a      	ldr	r3, [pc, #40]	; (1cae0 <sd_mmc_init_read_blocks+0xd0>)
   1cab6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1cab8:	2305      	movs	r3, #5
   1caba:	e008      	b.n	1cace <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1cabc:	4b0d      	ldr	r3, [pc, #52]	; (1caf4 <sd_mmc_init_read_blocks+0xe4>)
   1cabe:	1d3a      	adds	r2, r7, #4
   1cac0:	8812      	ldrh	r2, [r2, #0]
   1cac2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1cac4:	4b0c      	ldr	r3, [pc, #48]	; (1caf8 <sd_mmc_init_read_blocks+0xe8>)
   1cac6:	1d3a      	adds	r2, r7, #4
   1cac8:	8812      	ldrh	r2, [r2, #0]
   1caca:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cacc:	2300      	movs	r3, #0
}
   1cace:	0018      	movs	r0, r3
   1cad0:	46bd      	mov	sp, r7
   1cad2:	b007      	add	sp, #28
   1cad4:	bd90      	pop	{r4, r7, pc}
   1cad6:	46c0      	nop			; (mov r8, r8)
   1cad8:	0001c4f1 	.word	0x0001c4f1
   1cadc:	0001c38d 	.word	0x0001c38d
   1cae0:	0001c5ed 	.word	0x0001c5ed
   1cae4:	00101112 	.word	0x00101112
   1cae8:	00081111 	.word	0x00081111
   1caec:	20003c9c 	.word	0x20003c9c
   1caf0:	0001d86d 	.word	0x0001d86d
   1caf4:	20003ca2 	.word	0x20003ca2
   1caf8:	20003ca0 	.word	0x20003ca0

0001cafc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1cafc:	b580      	push	{r7, lr}
   1cafe:	b082      	sub	sp, #8
   1cb00:	af00      	add	r7, sp, #0
   1cb02:	6078      	str	r0, [r7, #4]
   1cb04:	000a      	movs	r2, r1
   1cb06:	1cbb      	adds	r3, r7, #2
   1cb08:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1cb0a:	1cbb      	adds	r3, r7, #2
   1cb0c:	881a      	ldrh	r2, [r3, #0]
   1cb0e:	687b      	ldr	r3, [r7, #4]
   1cb10:	0011      	movs	r1, r2
   1cb12:	0018      	movs	r0, r3
   1cb14:	4b0d      	ldr	r3, [pc, #52]	; (1cb4c <sd_mmc_start_read_blocks+0x50>)
   1cb16:	4798      	blx	r3
   1cb18:	0003      	movs	r3, r0
   1cb1a:	001a      	movs	r2, r3
   1cb1c:	2301      	movs	r3, #1
   1cb1e:	4053      	eors	r3, r2
   1cb20:	b2db      	uxtb	r3, r3
   1cb22:	2b00      	cmp	r3, #0
   1cb24:	d004      	beq.n	1cb30 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1cb26:	4b0a      	ldr	r3, [pc, #40]	; (1cb50 <sd_mmc_start_read_blocks+0x54>)
   1cb28:	2200      	movs	r2, #0
   1cb2a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1cb2c:	2305      	movs	r3, #5
   1cb2e:	e008      	b.n	1cb42 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1cb30:	4b07      	ldr	r3, [pc, #28]	; (1cb50 <sd_mmc_start_read_blocks+0x54>)
   1cb32:	881a      	ldrh	r2, [r3, #0]
   1cb34:	1cbb      	adds	r3, r7, #2
   1cb36:	881b      	ldrh	r3, [r3, #0]
   1cb38:	1ad3      	subs	r3, r2, r3
   1cb3a:	b29a      	uxth	r2, r3
   1cb3c:	4b04      	ldr	r3, [pc, #16]	; (1cb50 <sd_mmc_start_read_blocks+0x54>)
   1cb3e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cb40:	2300      	movs	r3, #0
}
   1cb42:	0018      	movs	r0, r3
   1cb44:	46bd      	mov	sp, r7
   1cb46:	b002      	add	sp, #8
   1cb48:	bd80      	pop	{r7, pc}
   1cb4a:	46c0      	nop			; (mov r8, r8)
   1cb4c:	0001db3d 	.word	0x0001db3d
   1cb50:	20003ca2 	.word	0x20003ca2

0001cb54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1cb54:	b580      	push	{r7, lr}
   1cb56:	b082      	sub	sp, #8
   1cb58:	af00      	add	r7, sp, #0
   1cb5a:	0002      	movs	r2, r0
   1cb5c:	1dfb      	adds	r3, r7, #7
   1cb5e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1cb60:	4b1c      	ldr	r3, [pc, #112]	; (1cbd4 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1cb62:	4798      	blx	r3
   1cb64:	0003      	movs	r3, r0
   1cb66:	001a      	movs	r2, r3
   1cb68:	2301      	movs	r3, #1
   1cb6a:	4053      	eors	r3, r2
   1cb6c:	b2db      	uxtb	r3, r3
   1cb6e:	2b00      	cmp	r3, #0
   1cb70:	d001      	beq.n	1cb76 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1cb72:	2305      	movs	r3, #5
   1cb74:	e029      	b.n	1cbca <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1cb76:	1dfb      	adds	r3, r7, #7
   1cb78:	781b      	ldrb	r3, [r3, #0]
   1cb7a:	2b00      	cmp	r3, #0
   1cb7c:	d003      	beq.n	1cb86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1cb7e:	4b16      	ldr	r3, [pc, #88]	; (1cbd8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1cb80:	2200      	movs	r2, #0
   1cb82:	801a      	strh	r2, [r3, #0]
   1cb84:	e005      	b.n	1cb92 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1cb86:	4b14      	ldr	r3, [pc, #80]	; (1cbd8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1cb88:	881b      	ldrh	r3, [r3, #0]
   1cb8a:	2b00      	cmp	r3, #0
   1cb8c:	d001      	beq.n	1cb92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1cb8e:	2300      	movs	r3, #0
   1cb90:	e01b      	b.n	1cbca <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1cb92:	4b12      	ldr	r3, [pc, #72]	; (1cbdc <sd_mmc_wait_end_of_read_blocks+0x88>)
   1cb94:	881b      	ldrh	r3, [r3, #0]
   1cb96:	2b01      	cmp	r3, #1
   1cb98:	d103      	bne.n	1cba2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1cb9a:	4b11      	ldr	r3, [pc, #68]	; (1cbe0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1cb9c:	4798      	blx	r3
		return SD_MMC_OK;
   1cb9e:	2300      	movs	r3, #0
   1cba0:	e013      	b.n	1cbca <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1cba2:	4b10      	ldr	r3, [pc, #64]	; (1cbe4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1cba4:	2100      	movs	r1, #0
   1cba6:	0018      	movs	r0, r3
   1cba8:	4b0f      	ldr	r3, [pc, #60]	; (1cbe8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1cbaa:	4798      	blx	r3
   1cbac:	0003      	movs	r3, r0
   1cbae:	001a      	movs	r2, r3
   1cbb0:	2301      	movs	r3, #1
   1cbb2:	4053      	eors	r3, r2
   1cbb4:	b2db      	uxtb	r3, r3
   1cbb6:	2b00      	cmp	r3, #0
   1cbb8:	d004      	beq.n	1cbc4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1cbba:	4b0a      	ldr	r3, [pc, #40]	; (1cbe4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1cbbc:	2100      	movs	r1, #0
   1cbbe:	0018      	movs	r0, r3
   1cbc0:	4b09      	ldr	r3, [pc, #36]	; (1cbe8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1cbc2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1cbc4:	4b06      	ldr	r3, [pc, #24]	; (1cbe0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1cbc6:	4798      	blx	r3
	return SD_MMC_OK;
   1cbc8:	2300      	movs	r3, #0
}
   1cbca:	0018      	movs	r0, r3
   1cbcc:	46bd      	mov	sp, r7
   1cbce:	b002      	add	sp, #8
   1cbd0:	bd80      	pop	{r7, pc}
   1cbd2:	46c0      	nop			; (mov r8, r8)
   1cbd4:	0001dbe1 	.word	0x0001dbe1
   1cbd8:	20003ca2 	.word	0x20003ca2
   1cbdc:	20003ca0 	.word	0x20003ca0
   1cbe0:	0001c5ed 	.word	0x0001c5ed
   1cbe4:	0000310c 	.word	0x0000310c
   1cbe8:	0001d845 	.word	0x0001d845

0001cbec <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1cbec:	b590      	push	{r4, r7, lr}
   1cbee:	b089      	sub	sp, #36	; 0x24
   1cbf0:	af02      	add	r7, sp, #8
   1cbf2:	6039      	str	r1, [r7, #0]
   1cbf4:	0011      	movs	r1, r2
   1cbf6:	1dfb      	adds	r3, r7, #7
   1cbf8:	1c02      	adds	r2, r0, #0
   1cbfa:	701a      	strb	r2, [r3, #0]
   1cbfc:	1d3b      	adds	r3, r7, #4
   1cbfe:	1c0a      	adds	r2, r1, #0
   1cc00:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1cc02:	230f      	movs	r3, #15
   1cc04:	18fc      	adds	r4, r7, r3
   1cc06:	1dfb      	adds	r3, r7, #7
   1cc08:	781b      	ldrb	r3, [r3, #0]
   1cc0a:	0018      	movs	r0, r3
   1cc0c:	4b28      	ldr	r3, [pc, #160]	; (1ccb0 <sd_mmc_init_write_blocks+0xc4>)
   1cc0e:	4798      	blx	r3
   1cc10:	0003      	movs	r3, r0
   1cc12:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1cc14:	230f      	movs	r3, #15
   1cc16:	18fb      	adds	r3, r7, r3
   1cc18:	781b      	ldrb	r3, [r3, #0]
   1cc1a:	2b00      	cmp	r3, #0
   1cc1c:	d003      	beq.n	1cc26 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1cc1e:	230f      	movs	r3, #15
   1cc20:	18fb      	adds	r3, r7, r3
   1cc22:	781b      	ldrb	r3, [r3, #0]
   1cc24:	e03f      	b.n	1cca6 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1cc26:	1dfb      	adds	r3, r7, #7
   1cc28:	781b      	ldrb	r3, [r3, #0]
   1cc2a:	0018      	movs	r0, r3
   1cc2c:	4b21      	ldr	r3, [pc, #132]	; (1ccb4 <sd_mmc_init_write_blocks+0xc8>)
   1cc2e:	4798      	blx	r3
   1cc30:	1e03      	subs	r3, r0, #0
   1cc32:	d003      	beq.n	1cc3c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1cc34:	4b20      	ldr	r3, [pc, #128]	; (1ccb8 <sd_mmc_init_write_blocks+0xcc>)
   1cc36:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1cc38:	2307      	movs	r3, #7
   1cc3a:	e034      	b.n	1cca6 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1cc3c:	1d3b      	adds	r3, r7, #4
   1cc3e:	881b      	ldrh	r3, [r3, #0]
   1cc40:	2b01      	cmp	r3, #1
   1cc42:	d902      	bls.n	1cc4a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1cc44:	4b1d      	ldr	r3, [pc, #116]	; (1ccbc <sd_mmc_init_write_blocks+0xd0>)
   1cc46:	617b      	str	r3, [r7, #20]
   1cc48:	e001      	b.n	1cc4e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1cc4a:	4b1d      	ldr	r3, [pc, #116]	; (1ccc0 <sd_mmc_init_write_blocks+0xd4>)
   1cc4c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1cc4e:	4b1d      	ldr	r3, [pc, #116]	; (1ccc4 <sd_mmc_init_write_blocks+0xd8>)
   1cc50:	681b      	ldr	r3, [r3, #0]
   1cc52:	7adb      	ldrb	r3, [r3, #11]
   1cc54:	001a      	movs	r2, r3
   1cc56:	2308      	movs	r3, #8
   1cc58:	4013      	ands	r3, r2
   1cc5a:	d002      	beq.n	1cc62 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1cc5c:	683b      	ldr	r3, [r7, #0]
   1cc5e:	613b      	str	r3, [r7, #16]
   1cc60:	e002      	b.n	1cc68 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1cc62:	683b      	ldr	r3, [r7, #0]
   1cc64:	025b      	lsls	r3, r3, #9
   1cc66:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1cc68:	1d3b      	adds	r3, r7, #4
   1cc6a:	881c      	ldrh	r4, [r3, #0]
   1cc6c:	2380      	movs	r3, #128	; 0x80
   1cc6e:	009a      	lsls	r2, r3, #2
   1cc70:	6939      	ldr	r1, [r7, #16]
   1cc72:	6978      	ldr	r0, [r7, #20]
   1cc74:	2301      	movs	r3, #1
   1cc76:	9300      	str	r3, [sp, #0]
   1cc78:	0023      	movs	r3, r4
   1cc7a:	4c13      	ldr	r4, [pc, #76]	; (1ccc8 <sd_mmc_init_write_blocks+0xdc>)
   1cc7c:	47a0      	blx	r4
   1cc7e:	0003      	movs	r3, r0
   1cc80:	001a      	movs	r2, r3
   1cc82:	2301      	movs	r3, #1
   1cc84:	4053      	eors	r3, r2
   1cc86:	b2db      	uxtb	r3, r3
   1cc88:	2b00      	cmp	r3, #0
   1cc8a:	d003      	beq.n	1cc94 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1cc8c:	4b0a      	ldr	r3, [pc, #40]	; (1ccb8 <sd_mmc_init_write_blocks+0xcc>)
   1cc8e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1cc90:	2305      	movs	r3, #5
   1cc92:	e008      	b.n	1cca6 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1cc94:	4b0d      	ldr	r3, [pc, #52]	; (1cccc <sd_mmc_init_write_blocks+0xe0>)
   1cc96:	1d3a      	adds	r2, r7, #4
   1cc98:	8812      	ldrh	r2, [r2, #0]
   1cc9a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1cc9c:	4b0c      	ldr	r3, [pc, #48]	; (1ccd0 <sd_mmc_init_write_blocks+0xe4>)
   1cc9e:	1d3a      	adds	r2, r7, #4
   1cca0:	8812      	ldrh	r2, [r2, #0]
   1cca2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cca4:	2300      	movs	r3, #0
}
   1cca6:	0018      	movs	r0, r3
   1cca8:	46bd      	mov	sp, r7
   1ccaa:	b007      	add	sp, #28
   1ccac:	bd90      	pop	{r4, r7, pc}
   1ccae:	46c0      	nop			; (mov r8, r8)
   1ccb0:	0001c4f1 	.word	0x0001c4f1
   1ccb4:	0001c9f9 	.word	0x0001c9f9
   1ccb8:	0001c5ed 	.word	0x0001c5ed
   1ccbc:	00109119 	.word	0x00109119
   1ccc0:	00089118 	.word	0x00089118
   1ccc4:	20003c9c 	.word	0x20003c9c
   1ccc8:	0001d86d 	.word	0x0001d86d
   1cccc:	20003ca2 	.word	0x20003ca2
   1ccd0:	20003ca0 	.word	0x20003ca0

0001ccd4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ccd4:	b580      	push	{r7, lr}
   1ccd6:	b082      	sub	sp, #8
   1ccd8:	af00      	add	r7, sp, #0
   1ccda:	6078      	str	r0, [r7, #4]
   1ccdc:	000a      	movs	r2, r1
   1ccde:	1cbb      	adds	r3, r7, #2
   1cce0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1cce2:	1cbb      	adds	r3, r7, #2
   1cce4:	881a      	ldrh	r2, [r3, #0]
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	0011      	movs	r1, r2
   1ccea:	0018      	movs	r0, r3
   1ccec:	4b0d      	ldr	r3, [pc, #52]	; (1cd24 <sd_mmc_start_write_blocks+0x50>)
   1ccee:	4798      	blx	r3
   1ccf0:	0003      	movs	r3, r0
   1ccf2:	001a      	movs	r2, r3
   1ccf4:	2301      	movs	r3, #1
   1ccf6:	4053      	eors	r3, r2
   1ccf8:	b2db      	uxtb	r3, r3
   1ccfa:	2b00      	cmp	r3, #0
   1ccfc:	d004      	beq.n	1cd08 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ccfe:	4b0a      	ldr	r3, [pc, #40]	; (1cd28 <sd_mmc_start_write_blocks+0x54>)
   1cd00:	2200      	movs	r2, #0
   1cd02:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1cd04:	2305      	movs	r3, #5
   1cd06:	e008      	b.n	1cd1a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1cd08:	4b07      	ldr	r3, [pc, #28]	; (1cd28 <sd_mmc_start_write_blocks+0x54>)
   1cd0a:	881a      	ldrh	r2, [r3, #0]
   1cd0c:	1cbb      	adds	r3, r7, #2
   1cd0e:	881b      	ldrh	r3, [r3, #0]
   1cd10:	1ad3      	subs	r3, r2, r3
   1cd12:	b29a      	uxth	r2, r3
   1cd14:	4b04      	ldr	r3, [pc, #16]	; (1cd28 <sd_mmc_start_write_blocks+0x54>)
   1cd16:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cd18:	2300      	movs	r3, #0
}
   1cd1a:	0018      	movs	r0, r3
   1cd1c:	46bd      	mov	sp, r7
   1cd1e:	b002      	add	sp, #8
   1cd20:	bd80      	pop	{r7, pc}
   1cd22:	46c0      	nop			; (mov r8, r8)
   1cd24:	0001dbed 	.word	0x0001dbed
   1cd28:	20003ca2 	.word	0x20003ca2

0001cd2c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1cd2c:	b580      	push	{r7, lr}
   1cd2e:	b082      	sub	sp, #8
   1cd30:	af00      	add	r7, sp, #0
   1cd32:	0002      	movs	r2, r0
   1cd34:	1dfb      	adds	r3, r7, #7
   1cd36:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1cd38:	4b13      	ldr	r3, [pc, #76]	; (1cd88 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1cd3a:	4798      	blx	r3
   1cd3c:	0003      	movs	r3, r0
   1cd3e:	001a      	movs	r2, r3
   1cd40:	2301      	movs	r3, #1
   1cd42:	4053      	eors	r3, r2
   1cd44:	b2db      	uxtb	r3, r3
   1cd46:	2b00      	cmp	r3, #0
   1cd48:	d001      	beq.n	1cd4e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1cd4a:	2305      	movs	r3, #5
   1cd4c:	e018      	b.n	1cd80 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1cd4e:	1dfb      	adds	r3, r7, #7
   1cd50:	781b      	ldrb	r3, [r3, #0]
   1cd52:	2b00      	cmp	r3, #0
   1cd54:	d003      	beq.n	1cd5e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1cd56:	4b0d      	ldr	r3, [pc, #52]	; (1cd8c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1cd58:	2200      	movs	r2, #0
   1cd5a:	801a      	strh	r2, [r3, #0]
   1cd5c:	e005      	b.n	1cd6a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1cd5e:	4b0b      	ldr	r3, [pc, #44]	; (1cd8c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1cd60:	881b      	ldrh	r3, [r3, #0]
   1cd62:	2b00      	cmp	r3, #0
   1cd64:	d001      	beq.n	1cd6a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1cd66:	2300      	movs	r3, #0
   1cd68:	e00a      	b.n	1cd80 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1cd6a:	4b09      	ldr	r3, [pc, #36]	; (1cd90 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1cd6c:	881b      	ldrh	r3, [r3, #0]
   1cd6e:	2b01      	cmp	r3, #1
   1cd70:	d103      	bne.n	1cd7a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1cd72:	4b08      	ldr	r3, [pc, #32]	; (1cd94 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1cd74:	4798      	blx	r3
		return SD_MMC_OK;
   1cd76:	2300      	movs	r3, #0
   1cd78:	e002      	b.n	1cd80 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1cd7a:	4b06      	ldr	r3, [pc, #24]	; (1cd94 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1cd7c:	4798      	blx	r3
	return SD_MMC_OK;
   1cd7e:	2300      	movs	r3, #0
}
   1cd80:	0018      	movs	r0, r3
   1cd82:	46bd      	mov	sp, r7
   1cd84:	b002      	add	sp, #8
   1cd86:	bd80      	pop	{r7, pc}
   1cd88:	0001dcad 	.word	0x0001dcad
   1cd8c:	20003ca2 	.word	0x20003ca2
   1cd90:	20003ca0 	.word	0x20003ca0
   1cd94:	0001c5ed 	.word	0x0001c5ed

0001cd98 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1cd98:	b580      	push	{r7, lr}
   1cd9a:	b082      	sub	sp, #8
   1cd9c:	af00      	add	r7, sp, #0
   1cd9e:	0002      	movs	r2, r0
   1cda0:	1dfb      	adds	r3, r7, #7
   1cda2:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1cda4:	1dfb      	adds	r3, r7, #7
   1cda6:	781b      	ldrb	r3, [r3, #0]
   1cda8:	0018      	movs	r0, r3
   1cdaa:	4b16      	ldr	r3, [pc, #88]	; (1ce04 <sd_mmc_test_unit_ready+0x6c>)
   1cdac:	4798      	blx	r3
   1cdae:	0003      	movs	r3, r0
   1cdb0:	2b01      	cmp	r3, #1
   1cdb2:	d019      	beq.n	1cde8 <sd_mmc_test_unit_ready+0x50>
   1cdb4:	2b02      	cmp	r3, #2
   1cdb6:	d019      	beq.n	1cdec <sd_mmc_test_unit_ready+0x54>
   1cdb8:	2b00      	cmp	r3, #0
   1cdba:	d11e      	bne.n	1cdfa <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1cdbc:	1dfb      	adds	r3, r7, #7
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	4a11      	ldr	r2, [pc, #68]	; (1ce08 <sd_mmc_test_unit_ready+0x70>)
   1cdc2:	5cd3      	ldrb	r3, [r2, r3]
   1cdc4:	2b00      	cmp	r3, #0
   1cdc6:	d001      	beq.n	1cdcc <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1cdc8:	2302      	movs	r3, #2
   1cdca:	e017      	b.n	1cdfc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1cdcc:	1dfb      	adds	r3, r7, #7
   1cdce:	781b      	ldrb	r3, [r3, #0]
   1cdd0:	0018      	movs	r0, r3
   1cdd2:	4b0e      	ldr	r3, [pc, #56]	; (1ce0c <sd_mmc_test_unit_ready+0x74>)
   1cdd4:	4798      	blx	r3
   1cdd6:	0003      	movs	r3, r0
   1cdd8:	001a      	movs	r2, r3
   1cdda:	2303      	movs	r3, #3
   1cddc:	4013      	ands	r3, r2
   1cdde:	d001      	beq.n	1cde4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1cde0:	2300      	movs	r3, #0
   1cde2:	e00b      	b.n	1cdfc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1cde4:	2302      	movs	r3, #2
   1cde6:	e009      	b.n	1cdfc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1cde8:	2303      	movs	r3, #3
   1cdea:	e007      	b.n	1cdfc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1cdec:	1dfb      	adds	r3, r7, #7
   1cdee:	781b      	ldrb	r3, [r3, #0]
   1cdf0:	4a05      	ldr	r2, [pc, #20]	; (1ce08 <sd_mmc_test_unit_ready+0x70>)
   1cdf2:	2100      	movs	r1, #0
   1cdf4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1cdf6:	2302      	movs	r3, #2
   1cdf8:	e000      	b.n	1cdfc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1cdfa:	2301      	movs	r3, #1
	}
}
   1cdfc:	0018      	movs	r0, r3
   1cdfe:	46bd      	mov	sp, r7
   1ce00:	b002      	add	sp, #8
   1ce02:	bd80      	pop	{r7, pc}
   1ce04:	0001c90d 	.word	0x0001c90d
   1ce08:	20003ca4 	.word	0x20003ca4
   1ce0c:	0001c981 	.word	0x0001c981

0001ce10 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ce10:	b580      	push	{r7, lr}
   1ce12:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ce14:	2000      	movs	r0, #0
   1ce16:	4b03      	ldr	r3, [pc, #12]	; (1ce24 <sd_mmc_test_unit_ready_0+0x14>)
   1ce18:	4798      	blx	r3
   1ce1a:	0003      	movs	r3, r0
}
   1ce1c:	0018      	movs	r0, r3
   1ce1e:	46bd      	mov	sp, r7
   1ce20:	bd80      	pop	{r7, pc}
   1ce22:	46c0      	nop			; (mov r8, r8)
   1ce24:	0001cd99 	.word	0x0001cd99

0001ce28 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ce28:	b580      	push	{r7, lr}
   1ce2a:	b082      	sub	sp, #8
   1ce2c:	af00      	add	r7, sp, #0
   1ce2e:	0002      	movs	r2, r0
   1ce30:	6039      	str	r1, [r7, #0]
   1ce32:	1dfb      	adds	r3, r7, #7
   1ce34:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ce36:	1dfb      	adds	r3, r7, #7
   1ce38:	781b      	ldrb	r3, [r3, #0]
   1ce3a:	0018      	movs	r0, r3
   1ce3c:	4b08      	ldr	r3, [pc, #32]	; (1ce60 <sd_mmc_read_capacity+0x38>)
   1ce3e:	4798      	blx	r3
   1ce40:	0003      	movs	r3, r0
   1ce42:	005b      	lsls	r3, r3, #1
   1ce44:	1e5a      	subs	r2, r3, #1
   1ce46:	683b      	ldr	r3, [r7, #0]
   1ce48:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ce4a:	1dfb      	adds	r3, r7, #7
   1ce4c:	781b      	ldrb	r3, [r3, #0]
   1ce4e:	0018      	movs	r0, r3
   1ce50:	4b04      	ldr	r3, [pc, #16]	; (1ce64 <sd_mmc_read_capacity+0x3c>)
   1ce52:	4798      	blx	r3
   1ce54:	0003      	movs	r3, r0
}
   1ce56:	0018      	movs	r0, r3
   1ce58:	46bd      	mov	sp, r7
   1ce5a:	b002      	add	sp, #8
   1ce5c:	bd80      	pop	{r7, pc}
   1ce5e:	46c0      	nop			; (mov r8, r8)
   1ce60:	0001c9bd 	.word	0x0001c9bd
   1ce64:	0001cd99 	.word	0x0001cd99

0001ce68 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ce68:	b580      	push	{r7, lr}
   1ce6a:	b082      	sub	sp, #8
   1ce6c:	af00      	add	r7, sp, #0
   1ce6e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ce70:	687b      	ldr	r3, [r7, #4]
   1ce72:	0019      	movs	r1, r3
   1ce74:	2000      	movs	r0, #0
   1ce76:	4b03      	ldr	r3, [pc, #12]	; (1ce84 <sd_mmc_read_capacity_0+0x1c>)
   1ce78:	4798      	blx	r3
   1ce7a:	0003      	movs	r3, r0
}
   1ce7c:	0018      	movs	r0, r3
   1ce7e:	46bd      	mov	sp, r7
   1ce80:	b002      	add	sp, #8
   1ce82:	bd80      	pop	{r7, pc}
   1ce84:	0001ce29 	.word	0x0001ce29

0001ce88 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ce88:	b580      	push	{r7, lr}
   1ce8a:	b082      	sub	sp, #8
   1ce8c:	af00      	add	r7, sp, #0
   1ce8e:	0002      	movs	r2, r0
   1ce90:	1dfb      	adds	r3, r7, #7
   1ce92:	701a      	strb	r2, [r3, #0]
   1ce94:	1dbb      	adds	r3, r7, #6
   1ce96:	1c0a      	adds	r2, r1, #0
   1ce98:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ce9a:	1dfb      	adds	r3, r7, #7
   1ce9c:	781b      	ldrb	r3, [r3, #0]
   1ce9e:	4a04      	ldr	r2, [pc, #16]	; (1ceb0 <sd_mmc_unload+0x28>)
   1cea0:	1db9      	adds	r1, r7, #6
   1cea2:	7809      	ldrb	r1, [r1, #0]
   1cea4:	54d1      	strb	r1, [r2, r3]
	return true;
   1cea6:	2301      	movs	r3, #1
}
   1cea8:	0018      	movs	r0, r3
   1ceaa:	46bd      	mov	sp, r7
   1ceac:	b002      	add	sp, #8
   1ceae:	bd80      	pop	{r7, pc}
   1ceb0:	20003ca4 	.word	0x20003ca4

0001ceb4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1ceb4:	b580      	push	{r7, lr}
   1ceb6:	b082      	sub	sp, #8
   1ceb8:	af00      	add	r7, sp, #0
   1ceba:	0002      	movs	r2, r0
   1cebc:	1dfb      	adds	r3, r7, #7
   1cebe:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1cec0:	1dfb      	adds	r3, r7, #7
   1cec2:	781b      	ldrb	r3, [r3, #0]
   1cec4:	0019      	movs	r1, r3
   1cec6:	2000      	movs	r0, #0
   1cec8:	4b03      	ldr	r3, [pc, #12]	; (1ced8 <sd_mmc_unload_0+0x24>)
   1ceca:	4798      	blx	r3
   1cecc:	0003      	movs	r3, r0
}
   1cece:	0018      	movs	r0, r3
   1ced0:	46bd      	mov	sp, r7
   1ced2:	b002      	add	sp, #8
   1ced4:	bd80      	pop	{r7, pc}
   1ced6:	46c0      	nop			; (mov r8, r8)
   1ced8:	0001ce89 	.word	0x0001ce89

0001cedc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1cedc:	b580      	push	{r7, lr}
   1cede:	b082      	sub	sp, #8
   1cee0:	af00      	add	r7, sp, #0
   1cee2:	0002      	movs	r2, r0
   1cee4:	1dfb      	adds	r3, r7, #7
   1cee6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1cee8:	1dfb      	adds	r3, r7, #7
   1ceea:	781b      	ldrb	r3, [r3, #0]
   1ceec:	0018      	movs	r0, r3
   1ceee:	4b03      	ldr	r3, [pc, #12]	; (1cefc <sd_mmc_wr_protect+0x20>)
   1cef0:	4798      	blx	r3
   1cef2:	0003      	movs	r3, r0
}
   1cef4:	0018      	movs	r0, r3
   1cef6:	46bd      	mov	sp, r7
   1cef8:	b002      	add	sp, #8
   1cefa:	bd80      	pop	{r7, pc}
   1cefc:	0001c9f9 	.word	0x0001c9f9

0001cf00 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1cf00:	b580      	push	{r7, lr}
   1cf02:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1cf04:	2000      	movs	r0, #0
   1cf06:	4b03      	ldr	r3, [pc, #12]	; (1cf14 <sd_mmc_wr_protect_0+0x14>)
   1cf08:	4798      	blx	r3
   1cf0a:	0003      	movs	r3, r0
}
   1cf0c:	0018      	movs	r0, r3
   1cf0e:	46bd      	mov	sp, r7
   1cf10:	bd80      	pop	{r7, pc}
   1cf12:	46c0      	nop			; (mov r8, r8)
   1cf14:	0001cedd 	.word	0x0001cedd

0001cf18 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1cf18:	b580      	push	{r7, lr}
   1cf1a:	b082      	sub	sp, #8
   1cf1c:	af00      	add	r7, sp, #0
   1cf1e:	0002      	movs	r2, r0
   1cf20:	1dfb      	adds	r3, r7, #7
   1cf22:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1cf24:	2301      	movs	r3, #1
}
   1cf26:	0018      	movs	r0, r3
   1cf28:	46bd      	mov	sp, r7
   1cf2a:	b002      	add	sp, #8
   1cf2c:	bd80      	pop	{r7, pc}
	...

0001cf30 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1cf30:	b580      	push	{r7, lr}
   1cf32:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1cf34:	2000      	movs	r0, #0
   1cf36:	4b03      	ldr	r3, [pc, #12]	; (1cf44 <sd_mmc_removal_0+0x14>)
   1cf38:	4798      	blx	r3
   1cf3a:	0003      	movs	r3, r0
}
   1cf3c:	0018      	movs	r0, r3
   1cf3e:	46bd      	mov	sp, r7
   1cf40:	bd80      	pop	{r7, pc}
   1cf42:	46c0      	nop			; (mov r8, r8)
   1cf44:	0001cf19 	.word	0x0001cf19

0001cf48 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1cf48:	b580      	push	{r7, lr}
   1cf4a:	b084      	sub	sp, #16
   1cf4c:	af00      	add	r7, sp, #0
   1cf4e:	60b9      	str	r1, [r7, #8]
   1cf50:	607a      	str	r2, [r7, #4]
   1cf52:	230f      	movs	r3, #15
   1cf54:	18fb      	adds	r3, r7, r3
   1cf56:	1c02      	adds	r2, r0, #0
   1cf58:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1cf5a:	68b9      	ldr	r1, [r7, #8]
   1cf5c:	230f      	movs	r3, #15
   1cf5e:	18fb      	adds	r3, r7, r3
   1cf60:	781b      	ldrb	r3, [r3, #0]
   1cf62:	2201      	movs	r2, #1
   1cf64:	0018      	movs	r0, r3
   1cf66:	4b10      	ldr	r3, [pc, #64]	; (1cfa8 <sd_mmc_mem_2_ram+0x60>)
   1cf68:	4798      	blx	r3
   1cf6a:	1e03      	subs	r3, r0, #0
   1cf6c:	d005      	beq.n	1cf7a <sd_mmc_mem_2_ram+0x32>
   1cf6e:	2b02      	cmp	r3, #2
   1cf70:	d101      	bne.n	1cf76 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1cf72:	2302      	movs	r3, #2
   1cf74:	e013      	b.n	1cf9e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1cf76:	2301      	movs	r3, #1
   1cf78:	e011      	b.n	1cf9e <sd_mmc_mem_2_ram+0x56>
		break;
   1cf7a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1cf7c:	687b      	ldr	r3, [r7, #4]
   1cf7e:	2101      	movs	r1, #1
   1cf80:	0018      	movs	r0, r3
   1cf82:	4b0a      	ldr	r3, [pc, #40]	; (1cfac <sd_mmc_mem_2_ram+0x64>)
   1cf84:	4798      	blx	r3
   1cf86:	1e03      	subs	r3, r0, #0
   1cf88:	d001      	beq.n	1cf8e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1cf8a:	2301      	movs	r3, #1
   1cf8c:	e007      	b.n	1cf9e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1cf8e:	2000      	movs	r0, #0
   1cf90:	4b07      	ldr	r3, [pc, #28]	; (1cfb0 <sd_mmc_mem_2_ram+0x68>)
   1cf92:	4798      	blx	r3
   1cf94:	1e03      	subs	r3, r0, #0
   1cf96:	d001      	beq.n	1cf9c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1cf98:	2301      	movs	r3, #1
   1cf9a:	e000      	b.n	1cf9e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1cf9c:	2300      	movs	r3, #0
}
   1cf9e:	0018      	movs	r0, r3
   1cfa0:	46bd      	mov	sp, r7
   1cfa2:	b004      	add	sp, #16
   1cfa4:	bd80      	pop	{r7, pc}
   1cfa6:	46c0      	nop			; (mov r8, r8)
   1cfa8:	0001ca11 	.word	0x0001ca11
   1cfac:	0001cafd 	.word	0x0001cafd
   1cfb0:	0001cb55 	.word	0x0001cb55

0001cfb4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1cfb4:	b580      	push	{r7, lr}
   1cfb6:	b082      	sub	sp, #8
   1cfb8:	af00      	add	r7, sp, #0
   1cfba:	6078      	str	r0, [r7, #4]
   1cfbc:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1cfbe:	683a      	ldr	r2, [r7, #0]
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	0019      	movs	r1, r3
   1cfc4:	2000      	movs	r0, #0
   1cfc6:	4b03      	ldr	r3, [pc, #12]	; (1cfd4 <sd_mmc_mem_2_ram_0+0x20>)
   1cfc8:	4798      	blx	r3
   1cfca:	0003      	movs	r3, r0
}
   1cfcc:	0018      	movs	r0, r3
   1cfce:	46bd      	mov	sp, r7
   1cfd0:	b002      	add	sp, #8
   1cfd2:	bd80      	pop	{r7, pc}
   1cfd4:	0001cf49 	.word	0x0001cf49

0001cfd8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1cfd8:	b580      	push	{r7, lr}
   1cfda:	b084      	sub	sp, #16
   1cfdc:	af00      	add	r7, sp, #0
   1cfde:	60b9      	str	r1, [r7, #8]
   1cfe0:	607a      	str	r2, [r7, #4]
   1cfe2:	230f      	movs	r3, #15
   1cfe4:	18fb      	adds	r3, r7, r3
   1cfe6:	1c02      	adds	r2, r0, #0
   1cfe8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1cfea:	68b9      	ldr	r1, [r7, #8]
   1cfec:	230f      	movs	r3, #15
   1cfee:	18fb      	adds	r3, r7, r3
   1cff0:	781b      	ldrb	r3, [r3, #0]
   1cff2:	2201      	movs	r2, #1
   1cff4:	0018      	movs	r0, r3
   1cff6:	4b10      	ldr	r3, [pc, #64]	; (1d038 <sd_mmc_ram_2_mem+0x60>)
   1cff8:	4798      	blx	r3
   1cffa:	1e03      	subs	r3, r0, #0
   1cffc:	d005      	beq.n	1d00a <sd_mmc_ram_2_mem+0x32>
   1cffe:	2b02      	cmp	r3, #2
   1d000:	d101      	bne.n	1d006 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1d002:	2302      	movs	r3, #2
   1d004:	e013      	b.n	1d02e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1d006:	2301      	movs	r3, #1
   1d008:	e011      	b.n	1d02e <sd_mmc_ram_2_mem+0x56>
		break;
   1d00a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1d00c:	687b      	ldr	r3, [r7, #4]
   1d00e:	2101      	movs	r1, #1
   1d010:	0018      	movs	r0, r3
   1d012:	4b0a      	ldr	r3, [pc, #40]	; (1d03c <sd_mmc_ram_2_mem+0x64>)
   1d014:	4798      	blx	r3
   1d016:	1e03      	subs	r3, r0, #0
   1d018:	d001      	beq.n	1d01e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1d01a:	2301      	movs	r3, #1
   1d01c:	e007      	b.n	1d02e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1d01e:	2000      	movs	r0, #0
   1d020:	4b07      	ldr	r3, [pc, #28]	; (1d040 <sd_mmc_ram_2_mem+0x68>)
   1d022:	4798      	blx	r3
   1d024:	1e03      	subs	r3, r0, #0
   1d026:	d001      	beq.n	1d02c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1d028:	2301      	movs	r3, #1
   1d02a:	e000      	b.n	1d02e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1d02c:	2300      	movs	r3, #0
}
   1d02e:	0018      	movs	r0, r3
   1d030:	46bd      	mov	sp, r7
   1d032:	b004      	add	sp, #16
   1d034:	bd80      	pop	{r7, pc}
   1d036:	46c0      	nop			; (mov r8, r8)
   1d038:	0001cbed 	.word	0x0001cbed
   1d03c:	0001ccd5 	.word	0x0001ccd5
   1d040:	0001cd2d 	.word	0x0001cd2d

0001d044 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1d044:	b580      	push	{r7, lr}
   1d046:	b082      	sub	sp, #8
   1d048:	af00      	add	r7, sp, #0
   1d04a:	6078      	str	r0, [r7, #4]
   1d04c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1d04e:	683a      	ldr	r2, [r7, #0]
   1d050:	687b      	ldr	r3, [r7, #4]
   1d052:	0019      	movs	r1, r3
   1d054:	2000      	movs	r0, #0
   1d056:	4b03      	ldr	r3, [pc, #12]	; (1d064 <sd_mmc_ram_2_mem_0+0x20>)
   1d058:	4798      	blx	r3
   1d05a:	0003      	movs	r3, r0
}
   1d05c:	0018      	movs	r0, r3
   1d05e:	46bd      	mov	sp, r7
   1d060:	b002      	add	sp, #8
   1d062:	bd80      	pop	{r7, pc}
   1d064:	0001cfd9 	.word	0x0001cfd9

0001d068 <system_pinmux_get_group_from_gpio_pin>:
{
   1d068:	b580      	push	{r7, lr}
   1d06a:	b084      	sub	sp, #16
   1d06c:	af00      	add	r7, sp, #0
   1d06e:	0002      	movs	r2, r0
   1d070:	1dfb      	adds	r3, r7, #7
   1d072:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1d074:	230f      	movs	r3, #15
   1d076:	18fb      	adds	r3, r7, r3
   1d078:	1dfa      	adds	r2, r7, #7
   1d07a:	7812      	ldrb	r2, [r2, #0]
   1d07c:	09d2      	lsrs	r2, r2, #7
   1d07e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1d080:	230e      	movs	r3, #14
   1d082:	18fb      	adds	r3, r7, r3
   1d084:	1dfa      	adds	r2, r7, #7
   1d086:	7812      	ldrb	r2, [r2, #0]
   1d088:	0952      	lsrs	r2, r2, #5
   1d08a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1d08c:	4b0d      	ldr	r3, [pc, #52]	; (1d0c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1d08e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1d090:	230f      	movs	r3, #15
   1d092:	18fb      	adds	r3, r7, r3
   1d094:	781b      	ldrb	r3, [r3, #0]
   1d096:	2b00      	cmp	r3, #0
   1d098:	d10f      	bne.n	1d0ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1d09a:	230f      	movs	r3, #15
   1d09c:	18fb      	adds	r3, r7, r3
   1d09e:	781b      	ldrb	r3, [r3, #0]
   1d0a0:	009b      	lsls	r3, r3, #2
   1d0a2:	2210      	movs	r2, #16
   1d0a4:	4694      	mov	ip, r2
   1d0a6:	44bc      	add	ip, r7
   1d0a8:	4463      	add	r3, ip
   1d0aa:	3b08      	subs	r3, #8
   1d0ac:	681a      	ldr	r2, [r3, #0]
   1d0ae:	230e      	movs	r3, #14
   1d0b0:	18fb      	adds	r3, r7, r3
   1d0b2:	781b      	ldrb	r3, [r3, #0]
   1d0b4:	01db      	lsls	r3, r3, #7
   1d0b6:	18d3      	adds	r3, r2, r3
   1d0b8:	e000      	b.n	1d0bc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1d0ba:	2300      	movs	r3, #0
}
   1d0bc:	0018      	movs	r0, r3
   1d0be:	46bd      	mov	sp, r7
   1d0c0:	b004      	add	sp, #16
   1d0c2:	bd80      	pop	{r7, pc}
   1d0c4:	41004400 	.word	0x41004400

0001d0c8 <system_interrupt_enable>:
{
   1d0c8:	b580      	push	{r7, lr}
   1d0ca:	b082      	sub	sp, #8
   1d0cc:	af00      	add	r7, sp, #0
   1d0ce:	0002      	movs	r2, r0
   1d0d0:	1dfb      	adds	r3, r7, #7
   1d0d2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d0d4:	4b06      	ldr	r3, [pc, #24]	; (1d0f0 <system_interrupt_enable+0x28>)
   1d0d6:	1dfa      	adds	r2, r7, #7
   1d0d8:	7812      	ldrb	r2, [r2, #0]
   1d0da:	0011      	movs	r1, r2
   1d0dc:	221f      	movs	r2, #31
   1d0de:	400a      	ands	r2, r1
   1d0e0:	2101      	movs	r1, #1
   1d0e2:	4091      	lsls	r1, r2
   1d0e4:	000a      	movs	r2, r1
   1d0e6:	601a      	str	r2, [r3, #0]
}
   1d0e8:	46c0      	nop			; (mov r8, r8)
   1d0ea:	46bd      	mov	sp, r7
   1d0ec:	b002      	add	sp, #8
   1d0ee:	bd80      	pop	{r7, pc}
   1d0f0:	e000e100 	.word	0xe000e100

0001d0f4 <port_get_group_from_gpio_pin>:
{
   1d0f4:	b580      	push	{r7, lr}
   1d0f6:	b082      	sub	sp, #8
   1d0f8:	af00      	add	r7, sp, #0
   1d0fa:	0002      	movs	r2, r0
   1d0fc:	1dfb      	adds	r3, r7, #7
   1d0fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1d100:	1dfb      	adds	r3, r7, #7
   1d102:	781b      	ldrb	r3, [r3, #0]
   1d104:	0018      	movs	r0, r3
   1d106:	4b03      	ldr	r3, [pc, #12]	; (1d114 <port_get_group_from_gpio_pin+0x20>)
   1d108:	4798      	blx	r3
   1d10a:	0003      	movs	r3, r0
}
   1d10c:	0018      	movs	r0, r3
   1d10e:	46bd      	mov	sp, r7
   1d110:	b002      	add	sp, #8
   1d112:	bd80      	pop	{r7, pc}
   1d114:	0001d069 	.word	0x0001d069

0001d118 <port_get_config_defaults>:
{
   1d118:	b580      	push	{r7, lr}
   1d11a:	b082      	sub	sp, #8
   1d11c:	af00      	add	r7, sp, #0
   1d11e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1d120:	687b      	ldr	r3, [r7, #4]
   1d122:	2200      	movs	r2, #0
   1d124:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1d126:	687b      	ldr	r3, [r7, #4]
   1d128:	2201      	movs	r2, #1
   1d12a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1d12c:	687b      	ldr	r3, [r7, #4]
   1d12e:	2200      	movs	r2, #0
   1d130:	709a      	strb	r2, [r3, #2]
}
   1d132:	46c0      	nop			; (mov r8, r8)
   1d134:	46bd      	mov	sp, r7
   1d136:	b002      	add	sp, #8
   1d138:	bd80      	pop	{r7, pc}
	...

0001d13c <port_pin_set_output_level>:
{
   1d13c:	b580      	push	{r7, lr}
   1d13e:	b084      	sub	sp, #16
   1d140:	af00      	add	r7, sp, #0
   1d142:	0002      	movs	r2, r0
   1d144:	1dfb      	adds	r3, r7, #7
   1d146:	701a      	strb	r2, [r3, #0]
   1d148:	1dbb      	adds	r3, r7, #6
   1d14a:	1c0a      	adds	r2, r1, #0
   1d14c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1d14e:	1dfb      	adds	r3, r7, #7
   1d150:	781b      	ldrb	r3, [r3, #0]
   1d152:	0018      	movs	r0, r3
   1d154:	4b0d      	ldr	r3, [pc, #52]	; (1d18c <port_pin_set_output_level+0x50>)
   1d156:	4798      	blx	r3
   1d158:	0003      	movs	r3, r0
   1d15a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1d15c:	1dfb      	adds	r3, r7, #7
   1d15e:	781b      	ldrb	r3, [r3, #0]
   1d160:	221f      	movs	r2, #31
   1d162:	4013      	ands	r3, r2
   1d164:	2201      	movs	r2, #1
   1d166:	409a      	lsls	r2, r3
   1d168:	0013      	movs	r3, r2
   1d16a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1d16c:	1dbb      	adds	r3, r7, #6
   1d16e:	781b      	ldrb	r3, [r3, #0]
   1d170:	2b00      	cmp	r3, #0
   1d172:	d003      	beq.n	1d17c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1d174:	68fb      	ldr	r3, [r7, #12]
   1d176:	68ba      	ldr	r2, [r7, #8]
   1d178:	619a      	str	r2, [r3, #24]
}
   1d17a:	e002      	b.n	1d182 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1d17c:	68fb      	ldr	r3, [r7, #12]
   1d17e:	68ba      	ldr	r2, [r7, #8]
   1d180:	615a      	str	r2, [r3, #20]
}
   1d182:	46c0      	nop			; (mov r8, r8)
   1d184:	46bd      	mov	sp, r7
   1d186:	b004      	add	sp, #16
   1d188:	bd80      	pop	{r7, pc}
   1d18a:	46c0      	nop			; (mov r8, r8)
   1d18c:	0001d0f5 	.word	0x0001d0f5

0001d190 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1d190:	b580      	push	{r7, lr}
   1d192:	b084      	sub	sp, #16
   1d194:	af00      	add	r7, sp, #0
   1d196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d198:	687b      	ldr	r3, [r7, #4]
   1d19a:	681b      	ldr	r3, [r3, #0]
   1d19c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1d19e:	68fb      	ldr	r3, [r7, #12]
   1d1a0:	69db      	ldr	r3, [r3, #28]
   1d1a2:	1e5a      	subs	r2, r3, #1
   1d1a4:	4193      	sbcs	r3, r2
   1d1a6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1d1a8:	0018      	movs	r0, r3
   1d1aa:	46bd      	mov	sp, r7
   1d1ac:	b004      	add	sp, #16
   1d1ae:	bd80      	pop	{r7, pc}

0001d1b0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1d1b0:	b580      	push	{r7, lr}
   1d1b2:	b082      	sub	sp, #8
   1d1b4:	af00      	add	r7, sp, #0
   1d1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1d1b8:	687b      	ldr	r3, [r7, #4]
   1d1ba:	2201      	movs	r2, #1
   1d1bc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1d1be:	687b      	ldr	r3, [r7, #4]
   1d1c0:	2200      	movs	r2, #0
   1d1c2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1d1c4:	687b      	ldr	r3, [r7, #4]
   1d1c6:	2200      	movs	r2, #0
   1d1c8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1d1ca:	687b      	ldr	r3, [r7, #4]
   1d1cc:	22c0      	movs	r2, #192	; 0xc0
   1d1ce:	0392      	lsls	r2, r2, #14
   1d1d0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1d1d2:	687b      	ldr	r3, [r7, #4]
   1d1d4:	2200      	movs	r2, #0
   1d1d6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1d1d8:	687b      	ldr	r3, [r7, #4]
   1d1da:	2200      	movs	r2, #0
   1d1dc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1d1de:	687b      	ldr	r3, [r7, #4]
   1d1e0:	2201      	movs	r2, #1
   1d1e2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1d1e4:	687b      	ldr	r3, [r7, #4]
   1d1e6:	2201      	movs	r2, #1
   1d1e8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1d1ea:	687b      	ldr	r3, [r7, #4]
   1d1ec:	2200      	movs	r2, #0
   1d1ee:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1d1f0:	687b      	ldr	r3, [r7, #4]
   1d1f2:	2224      	movs	r2, #36	; 0x24
   1d1f4:	2100      	movs	r1, #0
   1d1f6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1d1f8:	687b      	ldr	r3, [r7, #4]
   1d1fa:	3318      	adds	r3, #24
   1d1fc:	220c      	movs	r2, #12
   1d1fe:	2100      	movs	r1, #0
   1d200:	0018      	movs	r0, r3
   1d202:	4b0a      	ldr	r3, [pc, #40]	; (1d22c <spi_get_config_defaults+0x7c>)
   1d204:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1d206:	687b      	ldr	r3, [r7, #4]
   1d208:	4a09      	ldr	r2, [pc, #36]	; (1d230 <spi_get_config_defaults+0x80>)
   1d20a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1d20c:	687b      	ldr	r3, [r7, #4]
   1d20e:	2200      	movs	r2, #0
   1d210:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1d212:	687b      	ldr	r3, [r7, #4]
   1d214:	2200      	movs	r2, #0
   1d216:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1d218:	687b      	ldr	r3, [r7, #4]
   1d21a:	2200      	movs	r2, #0
   1d21c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1d21e:	687b      	ldr	r3, [r7, #4]
   1d220:	2200      	movs	r2, #0
   1d222:	635a      	str	r2, [r3, #52]	; 0x34

};
   1d224:	46c0      	nop			; (mov r8, r8)
   1d226:	46bd      	mov	sp, r7
   1d228:	b002      	add	sp, #8
   1d22a:	bd80      	pop	{r7, pc}
   1d22c:	00032203 	.word	0x00032203
   1d230:	000186a0 	.word	0x000186a0

0001d234 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1d234:	b580      	push	{r7, lr}
   1d236:	b082      	sub	sp, #8
   1d238:	af00      	add	r7, sp, #0
   1d23a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1d23c:	687b      	ldr	r3, [r7, #4]
   1d23e:	220a      	movs	r2, #10
   1d240:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1d242:	687b      	ldr	r3, [r7, #4]
   1d244:	2200      	movs	r2, #0
   1d246:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1d248:	687b      	ldr	r3, [r7, #4]
   1d24a:	2200      	movs	r2, #0
   1d24c:	709a      	strb	r2, [r3, #2]
}
   1d24e:	46c0      	nop			; (mov r8, r8)
   1d250:	46bd      	mov	sp, r7
   1d252:	b002      	add	sp, #8
   1d254:	bd80      	pop	{r7, pc}
	...

0001d258 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1d258:	b580      	push	{r7, lr}
   1d25a:	b084      	sub	sp, #16
   1d25c:	af00      	add	r7, sp, #0
   1d25e:	6078      	str	r0, [r7, #4]
   1d260:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1d262:	683b      	ldr	r3, [r7, #0]
   1d264:	781a      	ldrb	r2, [r3, #0]
   1d266:	687b      	ldr	r3, [r7, #4]
   1d268:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1d26a:	683b      	ldr	r3, [r7, #0]
   1d26c:	785a      	ldrb	r2, [r3, #1]
   1d26e:	687b      	ldr	r3, [r7, #4]
   1d270:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1d272:	683b      	ldr	r3, [r7, #0]
   1d274:	789a      	ldrb	r2, [r3, #2]
   1d276:	687b      	ldr	r3, [r7, #4]
   1d278:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1d27a:	230c      	movs	r3, #12
   1d27c:	18fb      	adds	r3, r7, r3
   1d27e:	0018      	movs	r0, r3
   1d280:	4b0b      	ldr	r3, [pc, #44]	; (1d2b0 <spi_attach_slave+0x58>)
   1d282:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1d284:	230c      	movs	r3, #12
   1d286:	18fb      	adds	r3, r7, r3
   1d288:	2201      	movs	r2, #1
   1d28a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1d28c:	687b      	ldr	r3, [r7, #4]
   1d28e:	781b      	ldrb	r3, [r3, #0]
   1d290:	220c      	movs	r2, #12
   1d292:	18ba      	adds	r2, r7, r2
   1d294:	0011      	movs	r1, r2
   1d296:	0018      	movs	r0, r3
   1d298:	4b06      	ldr	r3, [pc, #24]	; (1d2b4 <spi_attach_slave+0x5c>)
   1d29a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1d29c:	687b      	ldr	r3, [r7, #4]
   1d29e:	781b      	ldrb	r3, [r3, #0]
   1d2a0:	2101      	movs	r1, #1
   1d2a2:	0018      	movs	r0, r3
   1d2a4:	4b04      	ldr	r3, [pc, #16]	; (1d2b8 <spi_attach_slave+0x60>)
   1d2a6:	4798      	blx	r3
}
   1d2a8:	46c0      	nop			; (mov r8, r8)
   1d2aa:	46bd      	mov	sp, r7
   1d2ac:	b004      	add	sp, #16
   1d2ae:	bd80      	pop	{r7, pc}
   1d2b0:	0001d119 	.word	0x0001d119
   1d2b4:	000245fd 	.word	0x000245fd
   1d2b8:	0001d13d 	.word	0x0001d13d

0001d2bc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1d2bc:	b580      	push	{r7, lr}
   1d2be:	b084      	sub	sp, #16
   1d2c0:	af00      	add	r7, sp, #0
   1d2c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d2c4:	687b      	ldr	r3, [r7, #4]
   1d2c6:	681b      	ldr	r3, [r3, #0]
   1d2c8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d2ca:	687b      	ldr	r3, [r7, #4]
   1d2cc:	681b      	ldr	r3, [r3, #0]
   1d2ce:	0018      	movs	r0, r3
   1d2d0:	4b0b      	ldr	r3, [pc, #44]	; (1d300 <spi_enable+0x44>)
   1d2d2:	4798      	blx	r3
   1d2d4:	0003      	movs	r3, r0
   1d2d6:	0018      	movs	r0, r3
   1d2d8:	4b0a      	ldr	r3, [pc, #40]	; (1d304 <spi_enable+0x48>)
   1d2da:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1d2dc:	46c0      	nop			; (mov r8, r8)
   1d2de:	687b      	ldr	r3, [r7, #4]
   1d2e0:	0018      	movs	r0, r3
   1d2e2:	4b09      	ldr	r3, [pc, #36]	; (1d308 <spi_enable+0x4c>)
   1d2e4:	4798      	blx	r3
   1d2e6:	1e03      	subs	r3, r0, #0
   1d2e8:	d1f9      	bne.n	1d2de <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1d2ea:	68fb      	ldr	r3, [r7, #12]
   1d2ec:	681b      	ldr	r3, [r3, #0]
   1d2ee:	2202      	movs	r2, #2
   1d2f0:	431a      	orrs	r2, r3
   1d2f2:	68fb      	ldr	r3, [r7, #12]
   1d2f4:	601a      	str	r2, [r3, #0]
}
   1d2f6:	46c0      	nop			; (mov r8, r8)
   1d2f8:	46bd      	mov	sp, r7
   1d2fa:	b004      	add	sp, #16
   1d2fc:	bd80      	pop	{r7, pc}
   1d2fe:	46c0      	nop			; (mov r8, r8)
   1d300:	000252cd 	.word	0x000252cd
   1d304:	0001d0c9 	.word	0x0001d0c9
   1d308:	0001d191 	.word	0x0001d191

0001d30c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1d30c:	b580      	push	{r7, lr}
   1d30e:	b084      	sub	sp, #16
   1d310:	af00      	add	r7, sp, #0
   1d312:	6078      	str	r0, [r7, #4]
   1d314:	000a      	movs	r2, r1
   1d316:	1cfb      	adds	r3, r7, #3
   1d318:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1d31a:	230f      	movs	r3, #15
   1d31c:	18fb      	adds	r3, r7, r3
   1d31e:	2200      	movs	r2, #0
   1d320:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1d322:	e038      	b.n	1d396 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1d324:	687b      	ldr	r3, [r7, #4]
   1d326:	1c5a      	adds	r2, r3, #1
   1d328:	607a      	str	r2, [r7, #4]
   1d32a:	220e      	movs	r2, #14
   1d32c:	18ba      	adds	r2, r7, r2
   1d32e:	781b      	ldrb	r3, [r3, #0]
   1d330:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1d332:	230d      	movs	r3, #13
   1d334:	18fb      	adds	r3, r7, r3
   1d336:	2200      	movs	r2, #0
   1d338:	701a      	strb	r2, [r3, #0]
   1d33a:	e027      	b.n	1d38c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1d33c:	230f      	movs	r3, #15
   1d33e:	18fa      	adds	r2, r7, r3
   1d340:	230f      	movs	r3, #15
   1d342:	18fb      	adds	r3, r7, r3
   1d344:	781b      	ldrb	r3, [r3, #0]
   1d346:	18db      	adds	r3, r3, r3
   1d348:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1d34a:	230e      	movs	r3, #14
   1d34c:	18fa      	adds	r2, r7, r3
   1d34e:	230f      	movs	r3, #15
   1d350:	18fb      	adds	r3, r7, r3
   1d352:	7812      	ldrb	r2, [r2, #0]
   1d354:	781b      	ldrb	r3, [r3, #0]
   1d356:	4053      	eors	r3, r2
   1d358:	b2db      	uxtb	r3, r3
   1d35a:	b25b      	sxtb	r3, r3
   1d35c:	2b00      	cmp	r3, #0
   1d35e:	da07      	bge.n	1d370 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1d360:	230f      	movs	r3, #15
   1d362:	18fb      	adds	r3, r7, r3
   1d364:	220f      	movs	r2, #15
   1d366:	18ba      	adds	r2, r7, r2
   1d368:	7812      	ldrb	r2, [r2, #0]
   1d36a:	2109      	movs	r1, #9
   1d36c:	404a      	eors	r2, r1
   1d36e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1d370:	230e      	movs	r3, #14
   1d372:	18fa      	adds	r2, r7, r3
   1d374:	230e      	movs	r3, #14
   1d376:	18fb      	adds	r3, r7, r3
   1d378:	781b      	ldrb	r3, [r3, #0]
   1d37a:	18db      	adds	r3, r3, r3
   1d37c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1d37e:	230d      	movs	r3, #13
   1d380:	18fb      	adds	r3, r7, r3
   1d382:	781a      	ldrb	r2, [r3, #0]
   1d384:	230d      	movs	r3, #13
   1d386:	18fb      	adds	r3, r7, r3
   1d388:	3201      	adds	r2, #1
   1d38a:	701a      	strb	r2, [r3, #0]
   1d38c:	230d      	movs	r3, #13
   1d38e:	18fb      	adds	r3, r7, r3
   1d390:	781b      	ldrb	r3, [r3, #0]
   1d392:	2b07      	cmp	r3, #7
   1d394:	d9d2      	bls.n	1d33c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1d396:	1cfb      	adds	r3, r7, #3
   1d398:	781b      	ldrb	r3, [r3, #0]
   1d39a:	1cfa      	adds	r2, r7, #3
   1d39c:	1e59      	subs	r1, r3, #1
   1d39e:	7011      	strb	r1, [r2, #0]
   1d3a0:	2b00      	cmp	r3, #0
   1d3a2:	d1bf      	bne.n	1d324 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1d3a4:	230f      	movs	r3, #15
   1d3a6:	18fb      	adds	r3, r7, r3
   1d3a8:	781b      	ldrb	r3, [r3, #0]
   1d3aa:	005b      	lsls	r3, r3, #1
   1d3ac:	b25b      	sxtb	r3, r3
   1d3ae:	2201      	movs	r2, #1
   1d3b0:	4313      	orrs	r3, r2
   1d3b2:	b25a      	sxtb	r2, r3
   1d3b4:	230f      	movs	r3, #15
   1d3b6:	18fb      	adds	r3, r7, r3
   1d3b8:	701a      	strb	r2, [r3, #0]
	return crc;
   1d3ba:	230f      	movs	r3, #15
   1d3bc:	18fb      	adds	r3, r7, r3
   1d3be:	781b      	ldrb	r3, [r3, #0]
}
   1d3c0:	0018      	movs	r0, r3
   1d3c2:	46bd      	mov	sp, r7
   1d3c4:	b004      	add	sp, #16
   1d3c6:	bd80      	pop	{r7, pc}

0001d3c8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1d3c8:	b590      	push	{r4, r7, lr}
   1d3ca:	b083      	sub	sp, #12
   1d3cc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1d3ce:	1c7b      	adds	r3, r7, #1
   1d3d0:	22ff      	movs	r2, #255	; 0xff
   1d3d2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1d3d4:	1cbb      	adds	r3, r7, #2
   1d3d6:	22ff      	movs	r2, #255	; 0xff
   1d3d8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3da:	1cbb      	adds	r3, r7, #2
   1d3dc:	881b      	ldrh	r3, [r3, #0]
   1d3de:	1c79      	adds	r1, r7, #1
   1d3e0:	4811      	ldr	r0, [pc, #68]	; (1d428 <sd_mmc_spi_wait_busy+0x60>)
   1d3e2:	2201      	movs	r2, #1
   1d3e4:	4c11      	ldr	r4, [pc, #68]	; (1d42c <sd_mmc_spi_wait_busy+0x64>)
   1d3e6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1d3e8:	4b11      	ldr	r3, [pc, #68]	; (1d430 <sd_mmc_spi_wait_busy+0x68>)
   1d3ea:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3ec:	1cbb      	adds	r3, r7, #2
   1d3ee:	881b      	ldrh	r3, [r3, #0]
   1d3f0:	1c79      	adds	r1, r7, #1
   1d3f2:	480d      	ldr	r0, [pc, #52]	; (1d428 <sd_mmc_spi_wait_busy+0x60>)
   1d3f4:	2201      	movs	r2, #1
   1d3f6:	4c0d      	ldr	r4, [pc, #52]	; (1d42c <sd_mmc_spi_wait_busy+0x64>)
   1d3f8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3fa:	1cbb      	adds	r3, r7, #2
   1d3fc:	881b      	ldrh	r3, [r3, #0]
   1d3fe:	1c79      	adds	r1, r7, #1
   1d400:	4809      	ldr	r0, [pc, #36]	; (1d428 <sd_mmc_spi_wait_busy+0x60>)
   1d402:	2201      	movs	r2, #1
   1d404:	4c09      	ldr	r4, [pc, #36]	; (1d42c <sd_mmc_spi_wait_busy+0x64>)
   1d406:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1d408:	687b      	ldr	r3, [r7, #4]
   1d40a:	1e5a      	subs	r2, r3, #1
   1d40c:	607a      	str	r2, [r7, #4]
   1d40e:	2b00      	cmp	r3, #0
   1d410:	d101      	bne.n	1d416 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1d412:	2300      	movs	r3, #0
   1d414:	e004      	b.n	1d420 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1d416:	1c7b      	adds	r3, r7, #1
   1d418:	781b      	ldrb	r3, [r3, #0]
   1d41a:	2bff      	cmp	r3, #255	; 0xff
   1d41c:	d1ed      	bne.n	1d3fa <sd_mmc_spi_wait_busy+0x32>
	return true;
   1d41e:	2301      	movs	r3, #1
}
   1d420:	0018      	movs	r0, r3
   1d422:	46bd      	mov	sp, r7
   1d424:	b003      	add	sp, #12
   1d426:	bd90      	pop	{r4, r7, pc}
   1d428:	20003ca8 	.word	0x20003ca8
   1d42c:	00025c0d 	.word	0x00025c0d
   1d430:	00030d40 	.word	0x00030d40

0001d434 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1d434:	b590      	push	{r4, r7, lr}
   1d436:	b083      	sub	sp, #12
   1d438:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1d43a:	1cbb      	adds	r3, r7, #2
   1d43c:	22ff      	movs	r2, #255	; 0xff
   1d43e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1d440:	1c7b      	adds	r3, r7, #1
   1d442:	2200      	movs	r2, #0
   1d444:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1d446:	4b18      	ldr	r3, [pc, #96]	; (1d4a8 <sd_mmc_spi_start_read_block+0x74>)
   1d448:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1d44a:	687b      	ldr	r3, [r7, #4]
   1d44c:	1e5a      	subs	r2, r3, #1
   1d44e:	607a      	str	r2, [r7, #4]
   1d450:	2b00      	cmp	r3, #0
   1d452:	d104      	bne.n	1d45e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1d454:	4b15      	ldr	r3, [pc, #84]	; (1d4ac <sd_mmc_spi_start_read_block+0x78>)
   1d456:	2204      	movs	r2, #4
   1d458:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1d45a:	2300      	movs	r3, #0
   1d45c:	e020      	b.n	1d4a0 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1d45e:	1cbb      	adds	r3, r7, #2
   1d460:	881b      	ldrh	r3, [r3, #0]
   1d462:	1c79      	adds	r1, r7, #1
   1d464:	4812      	ldr	r0, [pc, #72]	; (1d4b0 <sd_mmc_spi_start_read_block+0x7c>)
   1d466:	2201      	movs	r2, #1
   1d468:	4c12      	ldr	r4, [pc, #72]	; (1d4b4 <sd_mmc_spi_start_read_block+0x80>)
   1d46a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1d46c:	1c7b      	adds	r3, r7, #1
   1d46e:	781b      	ldrb	r3, [r3, #0]
   1d470:	001a      	movs	r2, r3
   1d472:	23f0      	movs	r3, #240	; 0xf0
   1d474:	4013      	ands	r3, r2
   1d476:	d10e      	bne.n	1d496 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1d478:	1c7b      	adds	r3, r7, #1
   1d47a:	781b      	ldrb	r3, [r3, #0]
   1d47c:	001a      	movs	r2, r3
   1d47e:	2307      	movs	r3, #7
   1d480:	4013      	ands	r3, r2
   1d482:	d003      	beq.n	1d48c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1d484:	4b09      	ldr	r3, [pc, #36]	; (1d4ac <sd_mmc_spi_start_read_block+0x78>)
   1d486:	2207      	movs	r2, #7
   1d488:	701a      	strb	r2, [r3, #0]
   1d48a:	e002      	b.n	1d492 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1d48c:	4b07      	ldr	r3, [pc, #28]	; (1d4ac <sd_mmc_spi_start_read_block+0x78>)
   1d48e:	220b      	movs	r2, #11
   1d490:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1d492:	2300      	movs	r3, #0
   1d494:	e004      	b.n	1d4a0 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1d496:	1c7b      	adds	r3, r7, #1
   1d498:	781b      	ldrb	r3, [r3, #0]
   1d49a:	2bfe      	cmp	r3, #254	; 0xfe
   1d49c:	d1d5      	bne.n	1d44a <sd_mmc_spi_start_read_block+0x16>

	return true;
   1d49e:	2301      	movs	r3, #1
}
   1d4a0:	0018      	movs	r0, r3
   1d4a2:	46bd      	mov	sp, r7
   1d4a4:	b003      	add	sp, #12
   1d4a6:	bd90      	pop	{r4, r7, pc}
   1d4a8:	0007a120 	.word	0x0007a120
   1d4ac:	20003ceb 	.word	0x20003ceb
   1d4b0:	20003ca8 	.word	0x20003ca8
   1d4b4:	00025c0d 	.word	0x00025c0d

0001d4b8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1d4b8:	b590      	push	{r4, r7, lr}
   1d4ba:	b083      	sub	sp, #12
   1d4bc:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1d4be:	1dbb      	adds	r3, r7, #6
   1d4c0:	22ff      	movs	r2, #255	; 0xff
   1d4c2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1d4c4:	1dbb      	adds	r3, r7, #6
   1d4c6:	881b      	ldrh	r3, [r3, #0]
   1d4c8:	1d39      	adds	r1, r7, #4
   1d4ca:	4804      	ldr	r0, [pc, #16]	; (1d4dc <sd_mmc_spi_stop_read_block+0x24>)
   1d4cc:	2202      	movs	r2, #2
   1d4ce:	4c04      	ldr	r4, [pc, #16]	; (1d4e0 <sd_mmc_spi_stop_read_block+0x28>)
   1d4d0:	47a0      	blx	r4
			dummy);
}
   1d4d2:	46c0      	nop			; (mov r8, r8)
   1d4d4:	46bd      	mov	sp, r7
   1d4d6:	b003      	add	sp, #12
   1d4d8:	bd90      	pop	{r4, r7, pc}
   1d4da:	46c0      	nop			; (mov r8, r8)
   1d4dc:	20003ca8 	.word	0x20003ca8
   1d4e0:	00025c0d 	.word	0x00025c0d

0001d4e4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1d4e4:	b580      	push	{r7, lr}
   1d4e6:	b082      	sub	sp, #8
   1d4e8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1d4ea:	1dfb      	adds	r3, r7, #7
   1d4ec:	22ff      	movs	r2, #255	; 0xff
   1d4ee:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1d4f0:	1df9      	adds	r1, r7, #7
   1d4f2:	4b0d      	ldr	r3, [pc, #52]	; (1d528 <sd_mmc_spi_start_write_block+0x44>)
   1d4f4:	2201      	movs	r2, #1
   1d4f6:	0018      	movs	r0, r3
   1d4f8:	4b0c      	ldr	r3, [pc, #48]	; (1d52c <sd_mmc_spi_start_write_block+0x48>)
   1d4fa:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1d4fc:	4b0c      	ldr	r3, [pc, #48]	; (1d530 <sd_mmc_spi_start_write_block+0x4c>)
   1d4fe:	881b      	ldrh	r3, [r3, #0]
   1d500:	2b01      	cmp	r3, #1
   1d502:	d103      	bne.n	1d50c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1d504:	1dbb      	adds	r3, r7, #6
   1d506:	22fe      	movs	r2, #254	; 0xfe
   1d508:	701a      	strb	r2, [r3, #0]
   1d50a:	e002      	b.n	1d512 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1d50c:	1dbb      	adds	r3, r7, #6
   1d50e:	22fc      	movs	r2, #252	; 0xfc
   1d510:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1d512:	1db9      	adds	r1, r7, #6
   1d514:	4b04      	ldr	r3, [pc, #16]	; (1d528 <sd_mmc_spi_start_write_block+0x44>)
   1d516:	2201      	movs	r2, #1
   1d518:	0018      	movs	r0, r3
   1d51a:	4b04      	ldr	r3, [pc, #16]	; (1d52c <sd_mmc_spi_start_write_block+0x48>)
   1d51c:	4798      	blx	r3
}
   1d51e:	46c0      	nop			; (mov r8, r8)
   1d520:	46bd      	mov	sp, r7
   1d522:	b002      	add	sp, #8
   1d524:	bd80      	pop	{r7, pc}
   1d526:	46c0      	nop			; (mov r8, r8)
   1d528:	20003ca8 	.word	0x20003ca8
   1d52c:	00025e31 	.word	0x00025e31
   1d530:	20003cf6 	.word	0x20003cf6

0001d534 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1d534:	b590      	push	{r4, r7, lr}
   1d536:	b083      	sub	sp, #12
   1d538:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1d53a:	1dbb      	adds	r3, r7, #6
   1d53c:	22ff      	movs	r2, #255	; 0xff
   1d53e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1d540:	1cbb      	adds	r3, r7, #2
   1d542:	2201      	movs	r2, #1
   1d544:	4252      	negs	r2, r2
   1d546:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1d548:	1cb9      	adds	r1, r7, #2
   1d54a:	4b1b      	ldr	r3, [pc, #108]	; (1d5b8 <sd_mmc_spi_stop_write_block+0x84>)
   1d54c:	2202      	movs	r2, #2
   1d54e:	0018      	movs	r0, r3
   1d550:	4b1a      	ldr	r3, [pc, #104]	; (1d5bc <sd_mmc_spi_stop_write_block+0x88>)
   1d552:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1d554:	1dbb      	adds	r3, r7, #6
   1d556:	881b      	ldrh	r3, [r3, #0]
   1d558:	1d79      	adds	r1, r7, #5
   1d55a:	4817      	ldr	r0, [pc, #92]	; (1d5b8 <sd_mmc_spi_stop_write_block+0x84>)
   1d55c:	2201      	movs	r2, #1
   1d55e:	4c18      	ldr	r4, [pc, #96]	; (1d5c0 <sd_mmc_spi_stop_write_block+0x8c>)
   1d560:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1d562:	1d7b      	adds	r3, r7, #5
   1d564:	781b      	ldrb	r3, [r3, #0]
   1d566:	001a      	movs	r2, r3
   1d568:	2310      	movs	r3, #16
   1d56a:	4013      	ands	r3, r2
   1d56c:	d105      	bne.n	1d57a <sd_mmc_spi_stop_write_block+0x46>
   1d56e:	1d7b      	adds	r3, r7, #5
   1d570:	781b      	ldrb	r3, [r3, #0]
   1d572:	001a      	movs	r2, r3
   1d574:	2301      	movs	r3, #1
   1d576:	4013      	ands	r3, r2
   1d578:	d104      	bne.n	1d584 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1d57a:	4b12      	ldr	r3, [pc, #72]	; (1d5c4 <sd_mmc_spi_stop_write_block+0x90>)
   1d57c:	2201      	movs	r2, #1
   1d57e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1d580:	2300      	movs	r3, #0
   1d582:	e014      	b.n	1d5ae <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1d584:	1d7b      	adds	r3, r7, #5
   1d586:	781b      	ldrb	r3, [r3, #0]
   1d588:	001a      	movs	r2, r3
   1d58a:	231e      	movs	r3, #30
   1d58c:	4013      	ands	r3, r2
   1d58e:	2b04      	cmp	r3, #4
   1d590:	d00b      	beq.n	1d5aa <sd_mmc_spi_stop_write_block+0x76>
   1d592:	2b0a      	cmp	r3, #10
   1d594:	d104      	bne.n	1d5a0 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1d596:	4b0b      	ldr	r3, [pc, #44]	; (1d5c4 <sd_mmc_spi_stop_write_block+0x90>)
   1d598:	2208      	movs	r2, #8
   1d59a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1d59c:	2300      	movs	r3, #0
   1d59e:	e006      	b.n	1d5ae <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1d5a0:	4b08      	ldr	r3, [pc, #32]	; (1d5c4 <sd_mmc_spi_stop_write_block+0x90>)
   1d5a2:	220a      	movs	r2, #10
   1d5a4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1d5a6:	2300      	movs	r3, #0
   1d5a8:	e001      	b.n	1d5ae <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1d5aa:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d5ac:	2301      	movs	r3, #1
}
   1d5ae:	0018      	movs	r0, r3
   1d5b0:	46bd      	mov	sp, r7
   1d5b2:	b003      	add	sp, #12
   1d5b4:	bd90      	pop	{r4, r7, pc}
   1d5b6:	46c0      	nop			; (mov r8, r8)
   1d5b8:	20003ca8 	.word	0x20003ca8
   1d5bc:	00025e31 	.word	0x00025e31
   1d5c0:	00025c0d 	.word	0x00025c0d
   1d5c4:	20003ceb 	.word	0x20003ceb

0001d5c8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1d5c8:	b590      	push	{r4, r7, lr}
   1d5ca:	b083      	sub	sp, #12
   1d5cc:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1d5ce:	4b1d      	ldr	r3, [pc, #116]	; (1d644 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1d5d0:	881b      	ldrh	r3, [r3, #0]
   1d5d2:	2b01      	cmp	r3, #1
   1d5d4:	d101      	bne.n	1d5da <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1d5d6:	2301      	movs	r3, #1
   1d5d8:	e030      	b.n	1d63c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1d5da:	4b1a      	ldr	r3, [pc, #104]	; (1d644 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1d5dc:	881b      	ldrh	r3, [r3, #0]
   1d5de:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1d5e0:	4b19      	ldr	r3, [pc, #100]	; (1d648 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1d5e2:	681a      	ldr	r2, [r3, #0]
   1d5e4:	4b19      	ldr	r3, [pc, #100]	; (1d64c <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1d5e6:	881b      	ldrh	r3, [r3, #0]
   1d5e8:	0019      	movs	r1, r3
   1d5ea:	4b19      	ldr	r3, [pc, #100]	; (1d650 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1d5ec:	0010      	movs	r0, r2
   1d5ee:	4798      	blx	r3
   1d5f0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1d5f2:	429c      	cmp	r4, r3
   1d5f4:	d901      	bls.n	1d5fa <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1d5f6:	2301      	movs	r3, #1
   1d5f8:	e020      	b.n	1d63c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1d5fa:	1dfb      	adds	r3, r7, #7
   1d5fc:	22ff      	movs	r2, #255	; 0xff
   1d5fe:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1d600:	1df9      	adds	r1, r7, #7
   1d602:	4b14      	ldr	r3, [pc, #80]	; (1d654 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1d604:	2201      	movs	r2, #1
   1d606:	0018      	movs	r0, r3
   1d608:	4b13      	ldr	r3, [pc, #76]	; (1d658 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1d60a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1d60c:	1dfb      	adds	r3, r7, #7
   1d60e:	22fd      	movs	r2, #253	; 0xfd
   1d610:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1d612:	1df9      	adds	r1, r7, #7
   1d614:	4b0f      	ldr	r3, [pc, #60]	; (1d654 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1d616:	2201      	movs	r2, #1
   1d618:	0018      	movs	r0, r3
   1d61a:	4b0f      	ldr	r3, [pc, #60]	; (1d658 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1d61c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1d61e:	4b0f      	ldr	r3, [pc, #60]	; (1d65c <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1d620:	4798      	blx	r3
   1d622:	0003      	movs	r3, r0
   1d624:	001a      	movs	r2, r3
   1d626:	2301      	movs	r3, #1
   1d628:	4053      	eors	r3, r2
   1d62a:	b2db      	uxtb	r3, r3
   1d62c:	2b00      	cmp	r3, #0
   1d62e:	d004      	beq.n	1d63a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1d630:	4b0b      	ldr	r3, [pc, #44]	; (1d660 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1d632:	2205      	movs	r2, #5
   1d634:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1d636:	2300      	movs	r3, #0
   1d638:	e000      	b.n	1d63c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1d63a:	2301      	movs	r3, #1
}
   1d63c:	0018      	movs	r0, r3
   1d63e:	46bd      	mov	sp, r7
   1d640:	b003      	add	sp, #12
   1d642:	bd90      	pop	{r4, r7, pc}
   1d644:	20003cf6 	.word	0x20003cf6
   1d648:	20003cf0 	.word	0x20003cf0
   1d64c:	20003cf4 	.word	0x20003cf4
   1d650:	00030549 	.word	0x00030549
   1d654:	20003ca8 	.word	0x20003ca8
   1d658:	00025e31 	.word	0x00025e31
   1d65c:	0001d3c9 	.word	0x0001d3c9
   1d660:	20003ceb 	.word	0x20003ceb

0001d664 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1d664:	b580      	push	{r7, lr}
   1d666:	b090      	sub	sp, #64	; 0x40
   1d668:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d66a:	4b1f      	ldr	r3, [pc, #124]	; (1d6e8 <sd_mmc_spi_init+0x84>)
   1d66c:	2200      	movs	r2, #0
   1d66e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1d670:	233c      	movs	r3, #60	; 0x3c
   1d672:	18fb      	adds	r3, r7, r3
   1d674:	0018      	movs	r0, r3
   1d676:	4b1d      	ldr	r3, [pc, #116]	; (1d6ec <sd_mmc_spi_init+0x88>)
   1d678:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1d67a:	1d3b      	adds	r3, r7, #4
   1d67c:	0018      	movs	r0, r3
   1d67e:	4b1c      	ldr	r3, [pc, #112]	; (1d6f0 <sd_mmc_spi_init+0x8c>)
   1d680:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1d682:	1d3b      	adds	r3, r7, #4
   1d684:	2280      	movs	r2, #128	; 0x80
   1d686:	0252      	lsls	r2, r2, #9
   1d688:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1d68a:	1d3b      	adds	r3, r7, #4
   1d68c:	4a19      	ldr	r2, [pc, #100]	; (1d6f4 <sd_mmc_spi_init+0x90>)
   1d68e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1d690:	1d3b      	adds	r3, r7, #4
   1d692:	4a19      	ldr	r2, [pc, #100]	; (1d6f8 <sd_mmc_spi_init+0x94>)
   1d694:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1d696:	1d3b      	adds	r3, r7, #4
   1d698:	4a18      	ldr	r2, [pc, #96]	; (1d6fc <sd_mmc_spi_init+0x98>)
   1d69a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1d69c:	1d3b      	adds	r3, r7, #4
   1d69e:	4a18      	ldr	r2, [pc, #96]	; (1d700 <sd_mmc_spi_init+0x9c>)
   1d6a0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1d6a2:	1d3b      	adds	r3, r7, #4
   1d6a4:	2224      	movs	r2, #36	; 0x24
   1d6a6:	2100      	movs	r1, #0
   1d6a8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1d6aa:	1d3b      	adds	r3, r7, #4
   1d6ac:	4a15      	ldr	r2, [pc, #84]	; (1d704 <sd_mmc_spi_init+0xa0>)
   1d6ae:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1d6b0:	1d3a      	adds	r2, r7, #4
   1d6b2:	4915      	ldr	r1, [pc, #84]	; (1d708 <sd_mmc_spi_init+0xa4>)
   1d6b4:	4b15      	ldr	r3, [pc, #84]	; (1d70c <sd_mmc_spi_init+0xa8>)
   1d6b6:	0018      	movs	r0, r3
   1d6b8:	4b15      	ldr	r3, [pc, #84]	; (1d710 <sd_mmc_spi_init+0xac>)
   1d6ba:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1d6bc:	4b13      	ldr	r3, [pc, #76]	; (1d70c <sd_mmc_spi_init+0xa8>)
   1d6be:	0018      	movs	r0, r3
   1d6c0:	4b14      	ldr	r3, [pc, #80]	; (1d714 <sd_mmc_spi_init+0xb0>)
   1d6c2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1d6c4:	4b14      	ldr	r3, [pc, #80]	; (1d718 <sd_mmc_spi_init+0xb4>)
   1d6c6:	0018      	movs	r0, r3
   1d6c8:	4b14      	ldr	r3, [pc, #80]	; (1d71c <sd_mmc_spi_init+0xb8>)
   1d6ca:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1d6cc:	4b14      	ldr	r3, [pc, #80]	; (1d720 <sd_mmc_spi_init+0xbc>)
   1d6ce:	781a      	ldrb	r2, [r3, #0]
   1d6d0:	4b11      	ldr	r3, [pc, #68]	; (1d718 <sd_mmc_spi_init+0xb4>)
   1d6d2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1d6d4:	4a10      	ldr	r2, [pc, #64]	; (1d718 <sd_mmc_spi_init+0xb4>)
   1d6d6:	4b13      	ldr	r3, [pc, #76]	; (1d724 <sd_mmc_spi_init+0xc0>)
   1d6d8:	0011      	movs	r1, r2
   1d6da:	0018      	movs	r0, r3
   1d6dc:	4b12      	ldr	r3, [pc, #72]	; (1d728 <sd_mmc_spi_init+0xc4>)
   1d6de:	4798      	blx	r3
}
   1d6e0:	46c0      	nop			; (mov r8, r8)
   1d6e2:	46bd      	mov	sp, r7
   1d6e4:	b010      	add	sp, #64	; 0x40
   1d6e6:	bd80      	pop	{r7, pc}
   1d6e8:	20003ceb 	.word	0x20003ceb
   1d6ec:	0001d119 	.word	0x0001d119
   1d6f0:	0001d1b1 	.word	0x0001d1b1
   1d6f4:	00100002 	.word	0x00100002
   1d6f8:	00110002 	.word	0x00110002
   1d6fc:	00120002 	.word	0x00120002
   1d700:	00130002 	.word	0x00130002
   1d704:	00061a80 	.word	0x00061a80
   1d708:	42000c00 	.word	0x42000c00
   1d70c:	20003ca8 	.word	0x20003ca8
   1d710:	00025a7d 	.word	0x00025a7d
   1d714:	0001d2bd 	.word	0x0001d2bd
   1d718:	20003ce8 	.word	0x20003ce8
   1d71c:	0001d235 	.word	0x0001d235
   1d720:	200000f8 	.word	0x200000f8
   1d724:	20003ce4 	.word	0x20003ce4
   1d728:	0001d259 	.word	0x0001d259

0001d72c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1d72c:	b590      	push	{r4, r7, lr}
   1d72e:	b083      	sub	sp, #12
   1d730:	af00      	add	r7, sp, #0
   1d732:	0004      	movs	r4, r0
   1d734:	6039      	str	r1, [r7, #0]
   1d736:	0010      	movs	r0, r2
   1d738:	0019      	movs	r1, r3
   1d73a:	1dfb      	adds	r3, r7, #7
   1d73c:	1c22      	adds	r2, r4, #0
   1d73e:	701a      	strb	r2, [r3, #0]
   1d740:	1dbb      	adds	r3, r7, #6
   1d742:	1c02      	adds	r2, r0, #0
   1d744:	701a      	strb	r2, [r3, #0]
   1d746:	1d7b      	adds	r3, r7, #5
   1d748:	1c0a      	adds	r2, r1, #0
   1d74a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d74c:	4b13      	ldr	r3, [pc, #76]	; (1d79c <sd_mmc_spi_select_device+0x70>)
   1d74e:	2200      	movs	r2, #0
   1d750:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1d752:	683b      	ldr	r3, [r7, #0]
   1d754:	4a12      	ldr	r2, [pc, #72]	; (1d7a0 <sd_mmc_spi_select_device+0x74>)
   1d756:	4293      	cmp	r3, r2
   1d758:	d907      	bls.n	1d76a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1d75a:	4b11      	ldr	r3, [pc, #68]	; (1d7a0 <sd_mmc_spi_select_device+0x74>)
   1d75c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1d75e:	e004      	b.n	1d76a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1d760:	683b      	ldr	r3, [r7, #0]
   1d762:	08db      	lsrs	r3, r3, #3
   1d764:	683a      	ldr	r2, [r7, #0]
   1d766:	1ad3      	subs	r3, r2, r3
   1d768:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1d76a:	683a      	ldr	r2, [r7, #0]
   1d76c:	4b0d      	ldr	r3, [pc, #52]	; (1d7a4 <sd_mmc_spi_select_device+0x78>)
   1d76e:	0011      	movs	r1, r2
   1d770:	0018      	movs	r0, r3
   1d772:	4b0d      	ldr	r3, [pc, #52]	; (1d7a8 <sd_mmc_spi_select_device+0x7c>)
   1d774:	4798      	blx	r3
   1d776:	0003      	movs	r3, r0
   1d778:	2b17      	cmp	r3, #23
   1d77a:	d0f1      	beq.n	1d760 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1d77c:	1dfb      	adds	r3, r7, #7
   1d77e:	781a      	ldrb	r2, [r3, #0]
   1d780:	0013      	movs	r3, r2
   1d782:	005b      	lsls	r3, r3, #1
   1d784:	189b      	adds	r3, r3, r2
   1d786:	4a09      	ldr	r2, [pc, #36]	; (1d7ac <sd_mmc_spi_select_device+0x80>)
   1d788:	1899      	adds	r1, r3, r2
   1d78a:	4b06      	ldr	r3, [pc, #24]	; (1d7a4 <sd_mmc_spi_select_device+0x78>)
   1d78c:	2201      	movs	r2, #1
   1d78e:	0018      	movs	r0, r3
   1d790:	4b07      	ldr	r3, [pc, #28]	; (1d7b0 <sd_mmc_spi_select_device+0x84>)
   1d792:	4798      	blx	r3
}
   1d794:	46c0      	nop			; (mov r8, r8)
   1d796:	46bd      	mov	sp, r7
   1d798:	b003      	add	sp, #12
   1d79a:	bd90      	pop	{r4, r7, pc}
   1d79c:	20003ceb 	.word	0x20003ceb
   1d7a0:	00989680 	.word	0x00989680
   1d7a4:	20003ca8 	.word	0x20003ca8
   1d7a8:	000257a5 	.word	0x000257a5
   1d7ac:	20003ce4 	.word	0x20003ce4
   1d7b0:	00025d41 	.word	0x00025d41

0001d7b4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1d7b4:	b580      	push	{r7, lr}
   1d7b6:	b082      	sub	sp, #8
   1d7b8:	af00      	add	r7, sp, #0
   1d7ba:	0002      	movs	r2, r0
   1d7bc:	1dfb      	adds	r3, r7, #7
   1d7be:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d7c0:	4b09      	ldr	r3, [pc, #36]	; (1d7e8 <sd_mmc_spi_deselect_device+0x34>)
   1d7c2:	2200      	movs	r2, #0
   1d7c4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1d7c6:	1dfb      	adds	r3, r7, #7
   1d7c8:	781a      	ldrb	r2, [r3, #0]
   1d7ca:	0013      	movs	r3, r2
   1d7cc:	005b      	lsls	r3, r3, #1
   1d7ce:	189b      	adds	r3, r3, r2
   1d7d0:	4a06      	ldr	r2, [pc, #24]	; (1d7ec <sd_mmc_spi_deselect_device+0x38>)
   1d7d2:	1899      	adds	r1, r3, r2
   1d7d4:	4b06      	ldr	r3, [pc, #24]	; (1d7f0 <sd_mmc_spi_deselect_device+0x3c>)
   1d7d6:	2200      	movs	r2, #0
   1d7d8:	0018      	movs	r0, r3
   1d7da:	4b06      	ldr	r3, [pc, #24]	; (1d7f4 <sd_mmc_spi_deselect_device+0x40>)
   1d7dc:	4798      	blx	r3
}
   1d7de:	46c0      	nop			; (mov r8, r8)
   1d7e0:	46bd      	mov	sp, r7
   1d7e2:	b002      	add	sp, #8
   1d7e4:	bd80      	pop	{r7, pc}
   1d7e6:	46c0      	nop			; (mov r8, r8)
   1d7e8:	20003ceb 	.word	0x20003ceb
   1d7ec:	20003ce4 	.word	0x20003ce4
   1d7f0:	20003ca8 	.word	0x20003ca8
   1d7f4:	00025d41 	.word	0x00025d41

0001d7f8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1d7f8:	b580      	push	{r7, lr}
   1d7fa:	b082      	sub	sp, #8
   1d7fc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1d7fe:	1dbb      	adds	r3, r7, #6
   1d800:	22ff      	movs	r2, #255	; 0xff
   1d802:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d804:	4b0c      	ldr	r3, [pc, #48]	; (1d838 <sd_mmc_spi_send_clock+0x40>)
   1d806:	2200      	movs	r2, #0
   1d808:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1d80a:	1dfb      	adds	r3, r7, #7
   1d80c:	2200      	movs	r2, #0
   1d80e:	701a      	strb	r2, [r3, #0]
   1d810:	e00a      	b.n	1d828 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1d812:	1db9      	adds	r1, r7, #6
   1d814:	4b09      	ldr	r3, [pc, #36]	; (1d83c <sd_mmc_spi_send_clock+0x44>)
   1d816:	2201      	movs	r2, #1
   1d818:	0018      	movs	r0, r3
   1d81a:	4b09      	ldr	r3, [pc, #36]	; (1d840 <sd_mmc_spi_send_clock+0x48>)
   1d81c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1d81e:	1dfb      	adds	r3, r7, #7
   1d820:	781a      	ldrb	r2, [r3, #0]
   1d822:	1dfb      	adds	r3, r7, #7
   1d824:	3201      	adds	r2, #1
   1d826:	701a      	strb	r2, [r3, #0]
   1d828:	1dfb      	adds	r3, r7, #7
   1d82a:	781b      	ldrb	r3, [r3, #0]
   1d82c:	2b09      	cmp	r3, #9
   1d82e:	d9f0      	bls.n	1d812 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1d830:	46c0      	nop			; (mov r8, r8)
   1d832:	46bd      	mov	sp, r7
   1d834:	b002      	add	sp, #8
   1d836:	bd80      	pop	{r7, pc}
   1d838:	20003ceb 	.word	0x20003ceb
   1d83c:	20003ca8 	.word	0x20003ca8
   1d840:	00025e31 	.word	0x00025e31

0001d844 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1d844:	b590      	push	{r4, r7, lr}
   1d846:	b085      	sub	sp, #20
   1d848:	af02      	add	r7, sp, #8
   1d84a:	6078      	str	r0, [r7, #4]
   1d84c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1d84e:	6839      	ldr	r1, [r7, #0]
   1d850:	6878      	ldr	r0, [r7, #4]
   1d852:	2300      	movs	r3, #0
   1d854:	9300      	str	r3, [sp, #0]
   1d856:	2300      	movs	r3, #0
   1d858:	2200      	movs	r2, #0
   1d85a:	4c03      	ldr	r4, [pc, #12]	; (1d868 <sd_mmc_spi_send_cmd+0x24>)
   1d85c:	47a0      	blx	r4
   1d85e:	0003      	movs	r3, r0
}
   1d860:	0018      	movs	r0, r3
   1d862:	46bd      	mov	sp, r7
   1d864:	b003      	add	sp, #12
   1d866:	bd90      	pop	{r4, r7, pc}
   1d868:	0001d86d 	.word	0x0001d86d

0001d86c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1d86c:	b590      	push	{r4, r7, lr}
   1d86e:	b089      	sub	sp, #36	; 0x24
   1d870:	af00      	add	r7, sp, #0
   1d872:	60f8      	str	r0, [r7, #12]
   1d874:	60b9      	str	r1, [r7, #8]
   1d876:	0019      	movs	r1, r3
   1d878:	1dbb      	adds	r3, r7, #6
   1d87a:	801a      	strh	r2, [r3, #0]
   1d87c:	1d3b      	adds	r3, r7, #4
   1d87e:	1c0a      	adds	r2, r1, #0
   1d880:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1d882:	231b      	movs	r3, #27
   1d884:	18fb      	adds	r3, r7, r3
   1d886:	22ff      	movs	r2, #255	; 0xff
   1d888:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1d88a:	231c      	movs	r3, #28
   1d88c:	18fb      	adds	r3, r7, r3
   1d88e:	22ff      	movs	r2, #255	; 0xff
   1d890:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d892:	4b72      	ldr	r3, [pc, #456]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d894:	2200      	movs	r2, #0
   1d896:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1d898:	68fb      	ldr	r3, [r7, #12]
   1d89a:	b2db      	uxtb	r3, r3
   1d89c:	223f      	movs	r2, #63	; 0x3f
   1d89e:	4013      	ands	r3, r2
   1d8a0:	b2db      	uxtb	r3, r3
   1d8a2:	2240      	movs	r2, #64	; 0x40
   1d8a4:	4313      	orrs	r3, r2
   1d8a6:	b2da      	uxtb	r2, r3
   1d8a8:	2314      	movs	r3, #20
   1d8aa:	18fb      	adds	r3, r7, r3
   1d8ac:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1d8ae:	68bb      	ldr	r3, [r7, #8]
   1d8b0:	0e1b      	lsrs	r3, r3, #24
   1d8b2:	b2da      	uxtb	r2, r3
   1d8b4:	2314      	movs	r3, #20
   1d8b6:	18fb      	adds	r3, r7, r3
   1d8b8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1d8ba:	68bb      	ldr	r3, [r7, #8]
   1d8bc:	0c1b      	lsrs	r3, r3, #16
   1d8be:	b2da      	uxtb	r2, r3
   1d8c0:	2314      	movs	r3, #20
   1d8c2:	18fb      	adds	r3, r7, r3
   1d8c4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1d8c6:	68bb      	ldr	r3, [r7, #8]
   1d8c8:	0a1b      	lsrs	r3, r3, #8
   1d8ca:	b2da      	uxtb	r2, r3
   1d8cc:	2314      	movs	r3, #20
   1d8ce:	18fb      	adds	r3, r7, r3
   1d8d0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1d8d2:	68bb      	ldr	r3, [r7, #8]
   1d8d4:	b2da      	uxtb	r2, r3
   1d8d6:	2314      	movs	r3, #20
   1d8d8:	18fb      	adds	r3, r7, r3
   1d8da:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1d8dc:	2314      	movs	r3, #20
   1d8de:	18fb      	adds	r3, r7, r3
   1d8e0:	2105      	movs	r1, #5
   1d8e2:	0018      	movs	r0, r3
   1d8e4:	4b5e      	ldr	r3, [pc, #376]	; (1da60 <sd_mmc_spi_adtc_start+0x1f4>)
   1d8e6:	4798      	blx	r3
   1d8e8:	0003      	movs	r3, r0
   1d8ea:	001a      	movs	r2, r3
   1d8ec:	2314      	movs	r3, #20
   1d8ee:	18fb      	adds	r3, r7, r3
   1d8f0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1d8f2:	231b      	movs	r3, #27
   1d8f4:	18f9      	adds	r1, r7, r3
   1d8f6:	4b5b      	ldr	r3, [pc, #364]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1d8f8:	2201      	movs	r2, #1
   1d8fa:	0018      	movs	r0, r3
   1d8fc:	4b5a      	ldr	r3, [pc, #360]	; (1da68 <sd_mmc_spi_adtc_start+0x1fc>)
   1d8fe:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1d900:	2314      	movs	r3, #20
   1d902:	18f9      	adds	r1, r7, r3
   1d904:	4b57      	ldr	r3, [pc, #348]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1d906:	2206      	movs	r2, #6
   1d908:	0018      	movs	r0, r3
   1d90a:	4b57      	ldr	r3, [pc, #348]	; (1da68 <sd_mmc_spi_adtc_start+0x1fc>)
   1d90c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1d90e:	2313      	movs	r3, #19
   1d910:	18fb      	adds	r3, r7, r3
   1d912:	22ff      	movs	r2, #255	; 0xff
   1d914:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1d916:	231c      	movs	r3, #28
   1d918:	18fb      	adds	r3, r7, r3
   1d91a:	881b      	ldrh	r3, [r3, #0]
   1d91c:	2213      	movs	r2, #19
   1d91e:	18b9      	adds	r1, r7, r2
   1d920:	4850      	ldr	r0, [pc, #320]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1d922:	2201      	movs	r2, #1
   1d924:	4c51      	ldr	r4, [pc, #324]	; (1da6c <sd_mmc_spi_adtc_start+0x200>)
   1d926:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1d928:	231f      	movs	r3, #31
   1d92a:	18fb      	adds	r3, r7, r3
   1d92c:	2207      	movs	r2, #7
   1d92e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1d930:	231c      	movs	r3, #28
   1d932:	18fb      	adds	r3, r7, r3
   1d934:	881b      	ldrh	r3, [r3, #0]
   1d936:	2213      	movs	r2, #19
   1d938:	18b9      	adds	r1, r7, r2
   1d93a:	484a      	ldr	r0, [pc, #296]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1d93c:	2201      	movs	r2, #1
   1d93e:	4c4b      	ldr	r4, [pc, #300]	; (1da6c <sd_mmc_spi_adtc_start+0x200>)
   1d940:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1d942:	2313      	movs	r3, #19
   1d944:	18fb      	adds	r3, r7, r3
   1d946:	781b      	ldrb	r3, [r3, #0]
   1d948:	b25b      	sxtb	r3, r3
   1d94a:	2b00      	cmp	r3, #0
   1d94c:	da10      	bge.n	1d970 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1d94e:	231f      	movs	r3, #31
   1d950:	18fb      	adds	r3, r7, r3
   1d952:	221f      	movs	r2, #31
   1d954:	18ba      	adds	r2, r7, r2
   1d956:	7812      	ldrb	r2, [r2, #0]
   1d958:	3a01      	subs	r2, #1
   1d95a:	701a      	strb	r2, [r3, #0]
   1d95c:	231f      	movs	r3, #31
   1d95e:	18fb      	adds	r3, r7, r3
   1d960:	781b      	ldrb	r3, [r3, #0]
   1d962:	2b00      	cmp	r3, #0
   1d964:	d1e4      	bne.n	1d930 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1d966:	4b3d      	ldr	r3, [pc, #244]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d968:	2202      	movs	r2, #2
   1d96a:	701a      	strb	r2, [r3, #0]
			return false;
   1d96c:	2300      	movs	r3, #0
   1d96e:	e070      	b.n	1da52 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1d970:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1d972:	2313      	movs	r3, #19
   1d974:	18fb      	adds	r3, r7, r3
   1d976:	781b      	ldrb	r3, [r3, #0]
   1d978:	001a      	movs	r2, r3
   1d97a:	4b3d      	ldr	r3, [pc, #244]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1d97c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1d97e:	2313      	movs	r3, #19
   1d980:	18fb      	adds	r3, r7, r3
   1d982:	781b      	ldrb	r3, [r3, #0]
   1d984:	001a      	movs	r2, r3
   1d986:	2308      	movs	r3, #8
   1d988:	4013      	ands	r3, r2
   1d98a:	d004      	beq.n	1d996 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1d98c:	4b33      	ldr	r3, [pc, #204]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d98e:	2206      	movs	r2, #6
   1d990:	701a      	strb	r2, [r3, #0]
		return false;
   1d992:	2300      	movs	r3, #0
   1d994:	e05d      	b.n	1da52 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1d996:	2313      	movs	r3, #19
   1d998:	18fb      	adds	r3, r7, r3
   1d99a:	781b      	ldrb	r3, [r3, #0]
   1d99c:	001a      	movs	r2, r3
   1d99e:	2304      	movs	r3, #4
   1d9a0:	4013      	ands	r3, r2
   1d9a2:	d004      	beq.n	1d9ae <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1d9a4:	4b2d      	ldr	r3, [pc, #180]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d9a6:	2209      	movs	r2, #9
   1d9a8:	701a      	strb	r2, [r3, #0]
		return false;
   1d9aa:	2300      	movs	r3, #0
   1d9ac:	e051      	b.n	1da52 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1d9ae:	2313      	movs	r3, #19
   1d9b0:	18fb      	adds	r3, r7, r3
   1d9b2:	781b      	ldrb	r3, [r3, #0]
   1d9b4:	001a      	movs	r2, r3
   1d9b6:	2301      	movs	r3, #1
   1d9b8:	439a      	bics	r2, r3
   1d9ba:	1e13      	subs	r3, r2, #0
   1d9bc:	d004      	beq.n	1d9c8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1d9be:	4b27      	ldr	r3, [pc, #156]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d9c0:	2201      	movs	r2, #1
   1d9c2:	701a      	strb	r2, [r3, #0]
		return false;
   1d9c4:	2300      	movs	r3, #0
   1d9c6:	e044      	b.n	1da52 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1d9c8:	68fa      	ldr	r2, [r7, #12]
   1d9ca:	2380      	movs	r3, #128	; 0x80
   1d9cc:	019b      	lsls	r3, r3, #6
   1d9ce:	4013      	ands	r3, r2
   1d9d0:	d00d      	beq.n	1d9ee <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1d9d2:	4b28      	ldr	r3, [pc, #160]	; (1da74 <sd_mmc_spi_adtc_start+0x208>)
   1d9d4:	4798      	blx	r3
   1d9d6:	0003      	movs	r3, r0
   1d9d8:	001a      	movs	r2, r3
   1d9da:	2301      	movs	r3, #1
   1d9dc:	4053      	eors	r3, r2
   1d9de:	b2db      	uxtb	r3, r3
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d004      	beq.n	1d9ee <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1d9e4:	4b1d      	ldr	r3, [pc, #116]	; (1da5c <sd_mmc_spi_adtc_start+0x1f0>)
   1d9e6:	2203      	movs	r2, #3
   1d9e8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1d9ea:	2300      	movs	r3, #0
   1d9ec:	e031      	b.n	1da52 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1d9ee:	68fa      	ldr	r2, [r7, #12]
   1d9f0:	2380      	movs	r3, #128	; 0x80
   1d9f2:	009b      	lsls	r3, r3, #2
   1d9f4:	4013      	ands	r3, r2
   1d9f6:	d00e      	beq.n	1da16 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1d9f8:	4b1d      	ldr	r3, [pc, #116]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1d9fa:	2200      	movs	r2, #0
   1d9fc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1d9fe:	231c      	movs	r3, #28
   1da00:	18fb      	adds	r3, r7, r3
   1da02:	881b      	ldrh	r3, [r3, #0]
   1da04:	491a      	ldr	r1, [pc, #104]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da06:	4817      	ldr	r0, [pc, #92]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1da08:	2201      	movs	r2, #1
   1da0a:	4c18      	ldr	r4, [pc, #96]	; (1da6c <sd_mmc_spi_adtc_start+0x200>)
   1da0c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1da0e:	4b18      	ldr	r3, [pc, #96]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da10:	681a      	ldr	r2, [r3, #0]
   1da12:	4b17      	ldr	r3, [pc, #92]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da14:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1da16:	68fa      	ldr	r2, [r7, #12]
   1da18:	2380      	movs	r3, #128	; 0x80
   1da1a:	00db      	lsls	r3, r3, #3
   1da1c:	4013      	ands	r3, r2
   1da1e:	d00c      	beq.n	1da3a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1da20:	231c      	movs	r3, #28
   1da22:	18fb      	adds	r3, r7, r3
   1da24:	881b      	ldrh	r3, [r3, #0]
   1da26:	4912      	ldr	r1, [pc, #72]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da28:	480e      	ldr	r0, [pc, #56]	; (1da64 <sd_mmc_spi_adtc_start+0x1f8>)
   1da2a:	2204      	movs	r2, #4
   1da2c:	4c0f      	ldr	r4, [pc, #60]	; (1da6c <sd_mmc_spi_adtc_start+0x200>)
   1da2e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1da30:	4b0f      	ldr	r3, [pc, #60]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da32:	681b      	ldr	r3, [r3, #0]
   1da34:	ba1a      	rev	r2, r3
   1da36:	4b0e      	ldr	r3, [pc, #56]	; (1da70 <sd_mmc_spi_adtc_start+0x204>)
   1da38:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1da3a:	4b0f      	ldr	r3, [pc, #60]	; (1da78 <sd_mmc_spi_adtc_start+0x20c>)
   1da3c:	1dba      	adds	r2, r7, #6
   1da3e:	8812      	ldrh	r2, [r2, #0]
   1da40:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1da42:	4b0e      	ldr	r3, [pc, #56]	; (1da7c <sd_mmc_spi_adtc_start+0x210>)
   1da44:	1d3a      	adds	r2, r7, #4
   1da46:	8812      	ldrh	r2, [r2, #0]
   1da48:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1da4a:	4b0d      	ldr	r3, [pc, #52]	; (1da80 <sd_mmc_spi_adtc_start+0x214>)
   1da4c:	2200      	movs	r2, #0
   1da4e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1da50:	2301      	movs	r3, #1
}
   1da52:	0018      	movs	r0, r3
   1da54:	46bd      	mov	sp, r7
   1da56:	b009      	add	sp, #36	; 0x24
   1da58:	bd90      	pop	{r4, r7, pc}
   1da5a:	46c0      	nop			; (mov r8, r8)
   1da5c:	20003ceb 	.word	0x20003ceb
   1da60:	0001d30d 	.word	0x0001d30d
   1da64:	20003ca8 	.word	0x20003ca8
   1da68:	00025e31 	.word	0x00025e31
   1da6c:	00025c0d 	.word	0x00025c0d
   1da70:	20003cec 	.word	0x20003cec
   1da74:	0001d3c9 	.word	0x0001d3c9
   1da78:	20003cf4 	.word	0x20003cf4
   1da7c:	20003cf6 	.word	0x20003cf6
   1da80:	20003cf0 	.word	0x20003cf0

0001da84 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1da84:	b580      	push	{r7, lr}
   1da86:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1da88:	4b02      	ldr	r3, [pc, #8]	; (1da94 <sd_mmc_spi_get_response+0x10>)
   1da8a:	681b      	ldr	r3, [r3, #0]
}
   1da8c:	0018      	movs	r0, r3
   1da8e:	46bd      	mov	sp, r7
   1da90:	bd80      	pop	{r7, pc}
   1da92:	46c0      	nop			; (mov r8, r8)
   1da94:	20003cec 	.word	0x20003cec

0001da98 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1da98:	b590      	push	{r4, r7, lr}
   1da9a:	b085      	sub	sp, #20
   1da9c:	af00      	add	r7, sp, #0
   1da9e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1daa0:	230e      	movs	r3, #14
   1daa2:	18fb      	adds	r3, r7, r3
   1daa4:	22ff      	movs	r2, #255	; 0xff
   1daa6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1daa8:	4b1c      	ldr	r3, [pc, #112]	; (1db1c <sd_mmc_spi_read_word+0x84>)
   1daaa:	2200      	movs	r2, #0
   1daac:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1daae:	4b1c      	ldr	r3, [pc, #112]	; (1db20 <sd_mmc_spi_read_word+0x88>)
   1dab0:	681a      	ldr	r2, [r3, #0]
   1dab2:	4b1c      	ldr	r3, [pc, #112]	; (1db24 <sd_mmc_spi_read_word+0x8c>)
   1dab4:	881b      	ldrh	r3, [r3, #0]
   1dab6:	0019      	movs	r1, r3
   1dab8:	4b1b      	ldr	r3, [pc, #108]	; (1db28 <sd_mmc_spi_read_word+0x90>)
   1daba:	0010      	movs	r0, r2
   1dabc:	4798      	blx	r3
   1dabe:	1e0b      	subs	r3, r1, #0
   1dac0:	d10a      	bne.n	1dad8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1dac2:	4b1a      	ldr	r3, [pc, #104]	; (1db2c <sd_mmc_spi_read_word+0x94>)
   1dac4:	4798      	blx	r3
   1dac6:	0003      	movs	r3, r0
   1dac8:	001a      	movs	r2, r3
   1daca:	2301      	movs	r3, #1
   1dacc:	4053      	eors	r3, r2
   1dace:	b2db      	uxtb	r3, r3
   1dad0:	2b00      	cmp	r3, #0
   1dad2:	d001      	beq.n	1dad8 <sd_mmc_spi_read_word+0x40>
			return false;
   1dad4:	2300      	movs	r3, #0
   1dad6:	e01d      	b.n	1db14 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1dad8:	230e      	movs	r3, #14
   1dada:	18fb      	adds	r3, r7, r3
   1dadc:	881b      	ldrh	r3, [r3, #0]
   1dade:	1d39      	adds	r1, r7, #4
   1dae0:	4813      	ldr	r0, [pc, #76]	; (1db30 <sd_mmc_spi_read_word+0x98>)
   1dae2:	2204      	movs	r2, #4
   1dae4:	4c13      	ldr	r4, [pc, #76]	; (1db34 <sd_mmc_spi_read_word+0x9c>)
   1dae6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1dae8:	687b      	ldr	r3, [r7, #4]
   1daea:	687a      	ldr	r2, [r7, #4]
   1daec:	6812      	ldr	r2, [r2, #0]
   1daee:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1daf0:	4b0b      	ldr	r3, [pc, #44]	; (1db20 <sd_mmc_spi_read_word+0x88>)
   1daf2:	681b      	ldr	r3, [r3, #0]
   1daf4:	1d1a      	adds	r2, r3, #4
   1daf6:	4b0a      	ldr	r3, [pc, #40]	; (1db20 <sd_mmc_spi_read_word+0x88>)
   1daf8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1dafa:	4b09      	ldr	r3, [pc, #36]	; (1db20 <sd_mmc_spi_read_word+0x88>)
   1dafc:	681a      	ldr	r2, [r3, #0]
   1dafe:	4b09      	ldr	r3, [pc, #36]	; (1db24 <sd_mmc_spi_read_word+0x8c>)
   1db00:	881b      	ldrh	r3, [r3, #0]
   1db02:	0019      	movs	r1, r3
   1db04:	4b08      	ldr	r3, [pc, #32]	; (1db28 <sd_mmc_spi_read_word+0x90>)
   1db06:	0010      	movs	r0, r2
   1db08:	4798      	blx	r3
   1db0a:	1e0b      	subs	r3, r1, #0
   1db0c:	d101      	bne.n	1db12 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1db0e:	4b0a      	ldr	r3, [pc, #40]	; (1db38 <sd_mmc_spi_read_word+0xa0>)
   1db10:	4798      	blx	r3
	}
	return true;
   1db12:	2301      	movs	r3, #1
}
   1db14:	0018      	movs	r0, r3
   1db16:	46bd      	mov	sp, r7
   1db18:	b005      	add	sp, #20
   1db1a:	bd90      	pop	{r4, r7, pc}
   1db1c:	20003ceb 	.word	0x20003ceb
   1db20:	20003cf0 	.word	0x20003cf0
   1db24:	20003cf4 	.word	0x20003cf4
   1db28:	00030655 	.word	0x00030655
   1db2c:	0001d435 	.word	0x0001d435
   1db30:	20003ca8 	.word	0x20003ca8
   1db34:	00025c0d 	.word	0x00025c0d
   1db38:	0001d4b9 	.word	0x0001d4b9

0001db3c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1db3c:	b590      	push	{r4, r7, lr}
   1db3e:	b085      	sub	sp, #20
   1db40:	af00      	add	r7, sp, #0
   1db42:	6078      	str	r0, [r7, #4]
   1db44:	000a      	movs	r2, r1
   1db46:	1cbb      	adds	r3, r7, #2
   1db48:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1db4a:	230a      	movs	r3, #10
   1db4c:	18fb      	adds	r3, r7, r3
   1db4e:	22ff      	movs	r2, #255	; 0xff
   1db50:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1db52:	4b1c      	ldr	r3, [pc, #112]	; (1dbc4 <sd_mmc_spi_start_read_blocks+0x88>)
   1db54:	2200      	movs	r2, #0
   1db56:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1db58:	2300      	movs	r3, #0
   1db5a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1db5c:	e025      	b.n	1dbaa <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1db5e:	4b1a      	ldr	r3, [pc, #104]	; (1dbc8 <sd_mmc_spi_start_read_blocks+0x8c>)
   1db60:	4798      	blx	r3
   1db62:	0003      	movs	r3, r0
   1db64:	001a      	movs	r2, r3
   1db66:	2301      	movs	r3, #1
   1db68:	4053      	eors	r3, r2
   1db6a:	b2db      	uxtb	r3, r3
   1db6c:	2b00      	cmp	r3, #0
   1db6e:	d001      	beq.n	1db74 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1db70:	2300      	movs	r3, #0
   1db72:	e022      	b.n	1dbba <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1db74:	687a      	ldr	r2, [r7, #4]
   1db76:	68fb      	ldr	r3, [r7, #12]
   1db78:	18d1      	adds	r1, r2, r3
   1db7a:	4b14      	ldr	r3, [pc, #80]	; (1dbcc <sd_mmc_spi_start_read_blocks+0x90>)
   1db7c:	881a      	ldrh	r2, [r3, #0]
   1db7e:	230a      	movs	r3, #10
   1db80:	18fb      	adds	r3, r7, r3
   1db82:	881b      	ldrh	r3, [r3, #0]
   1db84:	4812      	ldr	r0, [pc, #72]	; (1dbd0 <sd_mmc_spi_start_read_blocks+0x94>)
   1db86:	4c13      	ldr	r4, [pc, #76]	; (1dbd4 <sd_mmc_spi_start_read_blocks+0x98>)
   1db88:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1db8a:	4b10      	ldr	r3, [pc, #64]	; (1dbcc <sd_mmc_spi_start_read_blocks+0x90>)
   1db8c:	881b      	ldrh	r3, [r3, #0]
   1db8e:	001a      	movs	r2, r3
   1db90:	68fb      	ldr	r3, [r7, #12]
   1db92:	189b      	adds	r3, r3, r2
   1db94:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1db96:	4b0d      	ldr	r3, [pc, #52]	; (1dbcc <sd_mmc_spi_start_read_blocks+0x90>)
   1db98:	881b      	ldrh	r3, [r3, #0]
   1db9a:	001a      	movs	r2, r3
   1db9c:	4b0e      	ldr	r3, [pc, #56]	; (1dbd8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1db9e:	681b      	ldr	r3, [r3, #0]
   1dba0:	18d2      	adds	r2, r2, r3
   1dba2:	4b0d      	ldr	r3, [pc, #52]	; (1dbd8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1dba4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1dba6:	4b0d      	ldr	r3, [pc, #52]	; (1dbdc <sd_mmc_spi_start_read_blocks+0xa0>)
   1dba8:	4798      	blx	r3
	while (nb_block--) {
   1dbaa:	1cbb      	adds	r3, r7, #2
   1dbac:	881b      	ldrh	r3, [r3, #0]
   1dbae:	1cba      	adds	r2, r7, #2
   1dbb0:	1e59      	subs	r1, r3, #1
   1dbb2:	8011      	strh	r1, [r2, #0]
   1dbb4:	2b00      	cmp	r3, #0
   1dbb6:	d1d2      	bne.n	1db5e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1dbb8:	2301      	movs	r3, #1
}
   1dbba:	0018      	movs	r0, r3
   1dbbc:	46bd      	mov	sp, r7
   1dbbe:	b005      	add	sp, #20
   1dbc0:	bd90      	pop	{r4, r7, pc}
   1dbc2:	46c0      	nop			; (mov r8, r8)
   1dbc4:	20003ceb 	.word	0x20003ceb
   1dbc8:	0001d435 	.word	0x0001d435
   1dbcc:	20003cf4 	.word	0x20003cf4
   1dbd0:	20003ca8 	.word	0x20003ca8
   1dbd4:	00025c0d 	.word	0x00025c0d
   1dbd8:	20003cf0 	.word	0x20003cf0
   1dbdc:	0001d4b9 	.word	0x0001d4b9

0001dbe0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1dbe0:	b580      	push	{r7, lr}
   1dbe2:	af00      	add	r7, sp, #0
	return true;
   1dbe4:	2301      	movs	r3, #1
}
   1dbe6:	0018      	movs	r0, r3
   1dbe8:	46bd      	mov	sp, r7
   1dbea:	bd80      	pop	{r7, pc}

0001dbec <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1dbec:	b580      	push	{r7, lr}
   1dbee:	b084      	sub	sp, #16
   1dbf0:	af00      	add	r7, sp, #0
   1dbf2:	6078      	str	r0, [r7, #4]
   1dbf4:	000a      	movs	r2, r1
   1dbf6:	1cbb      	adds	r3, r7, #2
   1dbf8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1dbfa:	4b24      	ldr	r3, [pc, #144]	; (1dc8c <sd_mmc_spi_start_write_blocks+0xa0>)
   1dbfc:	2200      	movs	r2, #0
   1dbfe:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1dc00:	2300      	movs	r3, #0
   1dc02:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1dc04:	e035      	b.n	1dc72 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1dc06:	4b22      	ldr	r3, [pc, #136]	; (1dc90 <sd_mmc_spi_start_write_blocks+0xa4>)
   1dc08:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1dc0a:	687a      	ldr	r2, [r7, #4]
   1dc0c:	68fb      	ldr	r3, [r7, #12]
   1dc0e:	18d1      	adds	r1, r2, r3
   1dc10:	4b20      	ldr	r3, [pc, #128]	; (1dc94 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc12:	881a      	ldrh	r2, [r3, #0]
   1dc14:	4b20      	ldr	r3, [pc, #128]	; (1dc98 <sd_mmc_spi_start_write_blocks+0xac>)
   1dc16:	0018      	movs	r0, r3
   1dc18:	4b20      	ldr	r3, [pc, #128]	; (1dc9c <sd_mmc_spi_start_write_blocks+0xb0>)
   1dc1a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1dc1c:	4b1d      	ldr	r3, [pc, #116]	; (1dc94 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc1e:	881b      	ldrh	r3, [r3, #0]
   1dc20:	001a      	movs	r2, r3
   1dc22:	68fb      	ldr	r3, [r7, #12]
   1dc24:	189b      	adds	r3, r3, r2
   1dc26:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1dc28:	4b1a      	ldr	r3, [pc, #104]	; (1dc94 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc2a:	881b      	ldrh	r3, [r3, #0]
   1dc2c:	001a      	movs	r2, r3
   1dc2e:	4b1c      	ldr	r3, [pc, #112]	; (1dca0 <sd_mmc_spi_start_write_blocks+0xb4>)
   1dc30:	681b      	ldr	r3, [r3, #0]
   1dc32:	18d2      	adds	r2, r2, r3
   1dc34:	4b1a      	ldr	r3, [pc, #104]	; (1dca0 <sd_mmc_spi_start_write_blocks+0xb4>)
   1dc36:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1dc38:	4b1a      	ldr	r3, [pc, #104]	; (1dca4 <sd_mmc_spi_start_write_blocks+0xb8>)
   1dc3a:	4798      	blx	r3
   1dc3c:	0003      	movs	r3, r0
   1dc3e:	001a      	movs	r2, r3
   1dc40:	2301      	movs	r3, #1
   1dc42:	4053      	eors	r3, r2
   1dc44:	b2db      	uxtb	r3, r3
   1dc46:	2b00      	cmp	r3, #0
   1dc48:	d001      	beq.n	1dc4e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1dc4a:	2300      	movs	r3, #0
   1dc4c:	e019      	b.n	1dc82 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1dc4e:	1cbb      	adds	r3, r7, #2
   1dc50:	881b      	ldrh	r3, [r3, #0]
   1dc52:	2b00      	cmp	r3, #0
   1dc54:	d00d      	beq.n	1dc72 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1dc56:	4b14      	ldr	r3, [pc, #80]	; (1dca8 <sd_mmc_spi_start_write_blocks+0xbc>)
   1dc58:	4798      	blx	r3
   1dc5a:	0003      	movs	r3, r0
   1dc5c:	001a      	movs	r2, r3
   1dc5e:	2301      	movs	r3, #1
   1dc60:	4053      	eors	r3, r2
   1dc62:	b2db      	uxtb	r3, r3
   1dc64:	2b00      	cmp	r3, #0
   1dc66:	d004      	beq.n	1dc72 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1dc68:	4b08      	ldr	r3, [pc, #32]	; (1dc8c <sd_mmc_spi_start_write_blocks+0xa0>)
   1dc6a:	2205      	movs	r2, #5
   1dc6c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1dc6e:	2300      	movs	r3, #0
   1dc70:	e007      	b.n	1dc82 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1dc72:	1cbb      	adds	r3, r7, #2
   1dc74:	881b      	ldrh	r3, [r3, #0]
   1dc76:	1cba      	adds	r2, r7, #2
   1dc78:	1e59      	subs	r1, r3, #1
   1dc7a:	8011      	strh	r1, [r2, #0]
   1dc7c:	2b00      	cmp	r3, #0
   1dc7e:	d1c2      	bne.n	1dc06 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1dc80:	2301      	movs	r3, #1
}
   1dc82:	0018      	movs	r0, r3
   1dc84:	46bd      	mov	sp, r7
   1dc86:	b004      	add	sp, #16
   1dc88:	bd80      	pop	{r7, pc}
   1dc8a:	46c0      	nop			; (mov r8, r8)
   1dc8c:	20003ceb 	.word	0x20003ceb
   1dc90:	0001d4e5 	.word	0x0001d4e5
   1dc94:	20003cf4 	.word	0x20003cf4
   1dc98:	20003ca8 	.word	0x20003ca8
   1dc9c:	00025e31 	.word	0x00025e31
   1dca0:	20003cf0 	.word	0x20003cf0
   1dca4:	0001d535 	.word	0x0001d535
   1dca8:	0001d3c9 	.word	0x0001d3c9

0001dcac <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1dcac:	b580      	push	{r7, lr}
   1dcae:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1dcb0:	4b09      	ldr	r3, [pc, #36]	; (1dcd8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1dcb2:	4798      	blx	r3
   1dcb4:	0003      	movs	r3, r0
   1dcb6:	001a      	movs	r2, r3
   1dcb8:	2301      	movs	r3, #1
   1dcba:	4053      	eors	r3, r2
   1dcbc:	b2db      	uxtb	r3, r3
   1dcbe:	2b00      	cmp	r3, #0
   1dcc0:	d004      	beq.n	1dccc <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1dcc2:	4b06      	ldr	r3, [pc, #24]	; (1dcdc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1dcc4:	2205      	movs	r2, #5
   1dcc6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1dcc8:	2300      	movs	r3, #0
   1dcca:	e002      	b.n	1dcd2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1dccc:	4b04      	ldr	r3, [pc, #16]	; (1dce0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1dcce:	4798      	blx	r3
   1dcd0:	0003      	movs	r3, r0
}
   1dcd2:	0018      	movs	r0, r3
   1dcd4:	46bd      	mov	sp, r7
   1dcd6:	bd80      	pop	{r7, pc}
   1dcd8:	0001d3c9 	.word	0x0001d3c9
   1dcdc:	20003ceb 	.word	0x20003ceb
   1dce0:	0001d5c9 	.word	0x0001d5c9

0001dce4 <delay_init>:
   1dce4:	b580      	push	{r7, lr}
   1dce6:	af00      	add	r7, sp, #0
   1dce8:	2000      	movs	r0, #0
   1dcea:	4b0f      	ldr	r3, [pc, #60]	; (1dd28 <delay_init+0x44>)
   1dcec:	4798      	blx	r3
   1dcee:	0002      	movs	r2, r0
   1dcf0:	4b0e      	ldr	r3, [pc, #56]	; (1dd2c <delay_init+0x48>)
   1dcf2:	601a      	str	r2, [r3, #0]
   1dcf4:	4b0d      	ldr	r3, [pc, #52]	; (1dd2c <delay_init+0x48>)
   1dcf6:	6818      	ldr	r0, [r3, #0]
   1dcf8:	4b0d      	ldr	r3, [pc, #52]	; (1dd30 <delay_init+0x4c>)
   1dcfa:	22fa      	movs	r2, #250	; 0xfa
   1dcfc:	0091      	lsls	r1, r2, #2
   1dcfe:	4798      	blx	r3
   1dd00:	0003      	movs	r3, r0
   1dd02:	001a      	movs	r2, r3
   1dd04:	4b09      	ldr	r3, [pc, #36]	; (1dd2c <delay_init+0x48>)
   1dd06:	601a      	str	r2, [r3, #0]
   1dd08:	4b08      	ldr	r3, [pc, #32]	; (1dd2c <delay_init+0x48>)
   1dd0a:	6818      	ldr	r0, [r3, #0]
   1dd0c:	4b08      	ldr	r3, [pc, #32]	; (1dd30 <delay_init+0x4c>)
   1dd0e:	22fa      	movs	r2, #250	; 0xfa
   1dd10:	0091      	lsls	r1, r2, #2
   1dd12:	4798      	blx	r3
   1dd14:	0003      	movs	r3, r0
   1dd16:	001a      	movs	r2, r3
   1dd18:	4b06      	ldr	r3, [pc, #24]	; (1dd34 <delay_init+0x50>)
   1dd1a:	601a      	str	r2, [r3, #0]
   1dd1c:	4b06      	ldr	r3, [pc, #24]	; (1dd38 <delay_init+0x54>)
   1dd1e:	2205      	movs	r2, #5
   1dd20:	601a      	str	r2, [r3, #0]
   1dd22:	46c0      	nop			; (mov r8, r8)
   1dd24:	46bd      	mov	sp, r7
   1dd26:	bd80      	pop	{r7, pc}
   1dd28:	000279b5 	.word	0x000279b5
   1dd2c:	200000fc 	.word	0x200000fc
   1dd30:	00030549 	.word	0x00030549
   1dd34:	20000100 	.word	0x20000100
   1dd38:	e000e010 	.word	0xe000e010

0001dd3c <system_pinmux_get_group_from_gpio_pin>:
{
   1dd3c:	b580      	push	{r7, lr}
   1dd3e:	b084      	sub	sp, #16
   1dd40:	af00      	add	r7, sp, #0
   1dd42:	0002      	movs	r2, r0
   1dd44:	1dfb      	adds	r3, r7, #7
   1dd46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1dd48:	230f      	movs	r3, #15
   1dd4a:	18fb      	adds	r3, r7, r3
   1dd4c:	1dfa      	adds	r2, r7, #7
   1dd4e:	7812      	ldrb	r2, [r2, #0]
   1dd50:	09d2      	lsrs	r2, r2, #7
   1dd52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1dd54:	230e      	movs	r3, #14
   1dd56:	18fb      	adds	r3, r7, r3
   1dd58:	1dfa      	adds	r2, r7, #7
   1dd5a:	7812      	ldrb	r2, [r2, #0]
   1dd5c:	0952      	lsrs	r2, r2, #5
   1dd5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1dd60:	4b0d      	ldr	r3, [pc, #52]	; (1dd98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1dd62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1dd64:	230f      	movs	r3, #15
   1dd66:	18fb      	adds	r3, r7, r3
   1dd68:	781b      	ldrb	r3, [r3, #0]
   1dd6a:	2b00      	cmp	r3, #0
   1dd6c:	d10f      	bne.n	1dd8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1dd6e:	230f      	movs	r3, #15
   1dd70:	18fb      	adds	r3, r7, r3
   1dd72:	781b      	ldrb	r3, [r3, #0]
   1dd74:	009b      	lsls	r3, r3, #2
   1dd76:	2210      	movs	r2, #16
   1dd78:	4694      	mov	ip, r2
   1dd7a:	44bc      	add	ip, r7
   1dd7c:	4463      	add	r3, ip
   1dd7e:	3b08      	subs	r3, #8
   1dd80:	681a      	ldr	r2, [r3, #0]
   1dd82:	230e      	movs	r3, #14
   1dd84:	18fb      	adds	r3, r7, r3
   1dd86:	781b      	ldrb	r3, [r3, #0]
   1dd88:	01db      	lsls	r3, r3, #7
   1dd8a:	18d3      	adds	r3, r2, r3
   1dd8c:	e000      	b.n	1dd90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1dd8e:	2300      	movs	r3, #0
}
   1dd90:	0018      	movs	r0, r3
   1dd92:	46bd      	mov	sp, r7
   1dd94:	b004      	add	sp, #16
   1dd96:	bd80      	pop	{r7, pc}
   1dd98:	41004400 	.word	0x41004400

0001dd9c <system_interrupt_enable_global>:
{
   1dd9c:	b580      	push	{r7, lr}
   1dd9e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1dda0:	4b04      	ldr	r3, [pc, #16]	; (1ddb4 <system_interrupt_enable_global+0x18>)
   1dda2:	2201      	movs	r2, #1
   1dda4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1dda6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   1ddaa:	b662      	cpsie	i
}
   1ddac:	46c0      	nop			; (mov r8, r8)
   1ddae:	46bd      	mov	sp, r7
   1ddb0:	bd80      	pop	{r7, pc}
   1ddb2:	46c0      	nop			; (mov r8, r8)
   1ddb4:	20000106 	.word	0x20000106

0001ddb8 <port_get_group_from_gpio_pin>:
{
   1ddb8:	b580      	push	{r7, lr}
   1ddba:	b082      	sub	sp, #8
   1ddbc:	af00      	add	r7, sp, #0
   1ddbe:	0002      	movs	r2, r0
   1ddc0:	1dfb      	adds	r3, r7, #7
   1ddc2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ddc4:	1dfb      	adds	r3, r7, #7
   1ddc6:	781b      	ldrb	r3, [r3, #0]
   1ddc8:	0018      	movs	r0, r3
   1ddca:	4b03      	ldr	r3, [pc, #12]	; (1ddd8 <port_get_group_from_gpio_pin+0x20>)
   1ddcc:	4798      	blx	r3
   1ddce:	0003      	movs	r3, r0
}
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	46bd      	mov	sp, r7
   1ddd4:	b002      	add	sp, #8
   1ddd6:	bd80      	pop	{r7, pc}
   1ddd8:	0001dd3d 	.word	0x0001dd3d

0001dddc <port_get_config_defaults>:
{
   1dddc:	b580      	push	{r7, lr}
   1ddde:	b082      	sub	sp, #8
   1dde0:	af00      	add	r7, sp, #0
   1dde2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1dde4:	687b      	ldr	r3, [r7, #4]
   1dde6:	2200      	movs	r2, #0
   1dde8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ddea:	687b      	ldr	r3, [r7, #4]
   1ddec:	2201      	movs	r2, #1
   1ddee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ddf0:	687b      	ldr	r3, [r7, #4]
   1ddf2:	2200      	movs	r2, #0
   1ddf4:	709a      	strb	r2, [r3, #2]
}
   1ddf6:	46c0      	nop			; (mov r8, r8)
   1ddf8:	46bd      	mov	sp, r7
   1ddfa:	b002      	add	sp, #8
   1ddfc:	bd80      	pop	{r7, pc}
	...

0001de00 <port_pin_set_output_level>:
{
   1de00:	b580      	push	{r7, lr}
   1de02:	b084      	sub	sp, #16
   1de04:	af00      	add	r7, sp, #0
   1de06:	0002      	movs	r2, r0
   1de08:	1dfb      	adds	r3, r7, #7
   1de0a:	701a      	strb	r2, [r3, #0]
   1de0c:	1dbb      	adds	r3, r7, #6
   1de0e:	1c0a      	adds	r2, r1, #0
   1de10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1de12:	1dfb      	adds	r3, r7, #7
   1de14:	781b      	ldrb	r3, [r3, #0]
   1de16:	0018      	movs	r0, r3
   1de18:	4b0d      	ldr	r3, [pc, #52]	; (1de50 <port_pin_set_output_level+0x50>)
   1de1a:	4798      	blx	r3
   1de1c:	0003      	movs	r3, r0
   1de1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1de20:	1dfb      	adds	r3, r7, #7
   1de22:	781b      	ldrb	r3, [r3, #0]
   1de24:	221f      	movs	r2, #31
   1de26:	4013      	ands	r3, r2
   1de28:	2201      	movs	r2, #1
   1de2a:	409a      	lsls	r2, r3
   1de2c:	0013      	movs	r3, r2
   1de2e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1de30:	1dbb      	adds	r3, r7, #6
   1de32:	781b      	ldrb	r3, [r3, #0]
   1de34:	2b00      	cmp	r3, #0
   1de36:	d003      	beq.n	1de40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1de38:	68fb      	ldr	r3, [r7, #12]
   1de3a:	68ba      	ldr	r2, [r7, #8]
   1de3c:	619a      	str	r2, [r3, #24]
}
   1de3e:	e002      	b.n	1de46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1de40:	68fb      	ldr	r3, [r7, #12]
   1de42:	68ba      	ldr	r2, [r7, #8]
   1de44:	615a      	str	r2, [r3, #20]
}
   1de46:	46c0      	nop			; (mov r8, r8)
   1de48:	46bd      	mov	sp, r7
   1de4a:	b004      	add	sp, #16
   1de4c:	bd80      	pop	{r7, pc}
   1de4e:	46c0      	nop			; (mov r8, r8)
   1de50:	0001ddb9 	.word	0x0001ddb9

0001de54 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1de54:	b580      	push	{r7, lr}
   1de56:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1de58:	4b04      	ldr	r3, [pc, #16]	; (1de6c <chip_isr+0x18>)
   1de5a:	681b      	ldr	r3, [r3, #0]
   1de5c:	2b00      	cmp	r3, #0
   1de5e:	d002      	beq.n	1de66 <chip_isr+0x12>
		gpfIsr();
   1de60:	4b02      	ldr	r3, [pc, #8]	; (1de6c <chip_isr+0x18>)
   1de62:	681b      	ldr	r3, [r3, #0]
   1de64:	4798      	blx	r3
	}
}
   1de66:	46c0      	nop			; (mov r8, r8)
   1de68:	46bd      	mov	sp, r7
   1de6a:	bd80      	pop	{r7, pc}
   1de6c:	20003cf8 	.word	0x20003cf8

0001de70 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1de70:	b580      	push	{r7, lr}
   1de72:	b082      	sub	sp, #8
   1de74:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1de76:	1d3b      	adds	r3, r7, #4
   1de78:	0018      	movs	r0, r3
   1de7a:	4b10      	ldr	r3, [pc, #64]	; (1debc <init_chip_pins+0x4c>)
   1de7c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1de7e:	1d3b      	adds	r3, r7, #4
   1de80:	2201      	movs	r2, #1
   1de82:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1de84:	1d3b      	adds	r3, r7, #4
   1de86:	0019      	movs	r1, r3
   1de88:	201b      	movs	r0, #27
   1de8a:	4b0d      	ldr	r3, [pc, #52]	; (1dec0 <init_chip_pins+0x50>)
   1de8c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1de8e:	1d3b      	adds	r3, r7, #4
   1de90:	0019      	movs	r1, r3
   1de92:	201c      	movs	r0, #28
   1de94:	4b0a      	ldr	r3, [pc, #40]	; (1dec0 <init_chip_pins+0x50>)
   1de96:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1de98:	1d3b      	adds	r3, r7, #4
   1de9a:	0019      	movs	r1, r3
   1de9c:	2028      	movs	r0, #40	; 0x28
   1de9e:	4b08      	ldr	r3, [pc, #32]	; (1dec0 <init_chip_pins+0x50>)
   1dea0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1dea2:	2100      	movs	r1, #0
   1dea4:	201c      	movs	r0, #28
   1dea6:	4b07      	ldr	r3, [pc, #28]	; (1dec4 <init_chip_pins+0x54>)
   1dea8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1deaa:	2100      	movs	r1, #0
   1deac:	201b      	movs	r0, #27
   1deae:	4b05      	ldr	r3, [pc, #20]	; (1dec4 <init_chip_pins+0x54>)
   1deb0:	4798      	blx	r3
}
   1deb2:	46c0      	nop			; (mov r8, r8)
   1deb4:	46bd      	mov	sp, r7
   1deb6:	b002      	add	sp, #8
   1deb8:	bd80      	pop	{r7, pc}
   1deba:	46c0      	nop			; (mov r8, r8)
   1debc:	0001dddd 	.word	0x0001dddd
   1dec0:	000245fd 	.word	0x000245fd
   1dec4:	0001de01 	.word	0x0001de01

0001dec8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1dec8:	b580      	push	{r7, lr}
   1deca:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1decc:	4b0b      	ldr	r3, [pc, #44]	; (1defc <nm_bsp_init+0x34>)
   1dece:	2200      	movs	r2, #0
   1ded0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1ded2:	4b0b      	ldr	r3, [pc, #44]	; (1df00 <nm_bsp_init+0x38>)
   1ded4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1ded6:	4b0b      	ldr	r3, [pc, #44]	; (1df04 <nm_bsp_init+0x3c>)
   1ded8:	681b      	ldr	r3, [r3, #0]
   1deda:	2201      	movs	r2, #1
   1dedc:	4013      	ands	r3, r2
   1dede:	d004      	beq.n	1deea <nm_bsp_init+0x22>
   1dee0:	4b08      	ldr	r3, [pc, #32]	; (1df04 <nm_bsp_init+0x3c>)
   1dee2:	681b      	ldr	r3, [r3, #0]
   1dee4:	2202      	movs	r2, #2
   1dee6:	4013      	ands	r3, r2
   1dee8:	d101      	bne.n	1deee <nm_bsp_init+0x26>
	    delay_init();
   1deea:	4b07      	ldr	r3, [pc, #28]	; (1df08 <nm_bsp_init+0x40>)
   1deec:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1deee:	4b07      	ldr	r3, [pc, #28]	; (1df0c <nm_bsp_init+0x44>)
   1def0:	4798      	blx	r3

	return M2M_SUCCESS;
   1def2:	2300      	movs	r3, #0
}
   1def4:	0018      	movs	r0, r3
   1def6:	46bd      	mov	sp, r7
   1def8:	bd80      	pop	{r7, pc}
   1defa:	46c0      	nop			; (mov r8, r8)
   1defc:	20003cf8 	.word	0x20003cf8
   1df00:	0001de71 	.word	0x0001de71
   1df04:	e000e010 	.word	0xe000e010
   1df08:	0001dce5 	.word	0x0001dce5
   1df0c:	0001dd9d 	.word	0x0001dd9d

0001df10 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1df10:	b580      	push	{r7, lr}
   1df12:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1df14:	2100      	movs	r1, #0
   1df16:	201c      	movs	r0, #28
   1df18:	4b0b      	ldr	r3, [pc, #44]	; (1df48 <nm_bsp_reset+0x38>)
   1df1a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1df1c:	2100      	movs	r1, #0
   1df1e:	201b      	movs	r0, #27
   1df20:	4b09      	ldr	r3, [pc, #36]	; (1df48 <nm_bsp_reset+0x38>)
   1df22:	4798      	blx	r3
	nm_bsp_sleep(1);
   1df24:	2001      	movs	r0, #1
   1df26:	4b09      	ldr	r3, [pc, #36]	; (1df4c <nm_bsp_reset+0x3c>)
   1df28:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1df2a:	2101      	movs	r1, #1
   1df2c:	201c      	movs	r0, #28
   1df2e:	4b06      	ldr	r3, [pc, #24]	; (1df48 <nm_bsp_reset+0x38>)
   1df30:	4798      	blx	r3
	nm_bsp_sleep(10);
   1df32:	200a      	movs	r0, #10
   1df34:	4b05      	ldr	r3, [pc, #20]	; (1df4c <nm_bsp_reset+0x3c>)
   1df36:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1df38:	2101      	movs	r1, #1
   1df3a:	201b      	movs	r0, #27
   1df3c:	4b02      	ldr	r3, [pc, #8]	; (1df48 <nm_bsp_reset+0x38>)
   1df3e:	4798      	blx	r3
}
   1df40:	46c0      	nop			; (mov r8, r8)
   1df42:	46bd      	mov	sp, r7
   1df44:	bd80      	pop	{r7, pc}
   1df46:	46c0      	nop			; (mov r8, r8)
   1df48:	0001de01 	.word	0x0001de01
   1df4c:	0001df51 	.word	0x0001df51

0001df50 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1df50:	b580      	push	{r7, lr}
   1df52:	b082      	sub	sp, #8
   1df54:	af00      	add	r7, sp, #0
   1df56:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1df58:	687b      	ldr	r3, [r7, #4]
   1df5a:	0018      	movs	r0, r3
   1df5c:	4b02      	ldr	r3, [pc, #8]	; (1df68 <nm_bsp_sleep+0x18>)
   1df5e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1df60:	46c0      	nop			; (mov r8, r8)
   1df62:	46bd      	mov	sp, r7
   1df64:	b002      	add	sp, #8
   1df66:	bd80      	pop	{r7, pc}
   1df68:	00019d65 	.word	0x00019d65

0001df6c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1df6c:	b580      	push	{r7, lr}
   1df6e:	b086      	sub	sp, #24
   1df70:	af00      	add	r7, sp, #0
   1df72:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1df74:	4b15      	ldr	r3, [pc, #84]	; (1dfcc <nm_bsp_register_isr+0x60>)
   1df76:	687a      	ldr	r2, [r7, #4]
   1df78:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1df7a:	230c      	movs	r3, #12
   1df7c:	18fb      	adds	r3, r7, r3
   1df7e:	0018      	movs	r0, r3
   1df80:	4b13      	ldr	r3, [pc, #76]	; (1dfd0 <nm_bsp_register_isr+0x64>)
   1df82:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1df84:	230c      	movs	r3, #12
   1df86:	18fb      	adds	r3, r7, r3
   1df88:	2229      	movs	r2, #41	; 0x29
   1df8a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1df8c:	230c      	movs	r3, #12
   1df8e:	18fb      	adds	r3, r7, r3
   1df90:	2200      	movs	r2, #0
   1df92:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1df94:	230c      	movs	r3, #12
   1df96:	18fb      	adds	r3, r7, r3
   1df98:	2201      	movs	r2, #1
   1df9a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1df9c:	230c      	movs	r3, #12
   1df9e:	18fb      	adds	r3, r7, r3
   1dfa0:	2202      	movs	r2, #2
   1dfa2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1dfa4:	230c      	movs	r3, #12
   1dfa6:	18fb      	adds	r3, r7, r3
   1dfa8:	0019      	movs	r1, r3
   1dfaa:	2009      	movs	r0, #9
   1dfac:	4b09      	ldr	r3, [pc, #36]	; (1dfd4 <nm_bsp_register_isr+0x68>)
   1dfae:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1dfb0:	4b09      	ldr	r3, [pc, #36]	; (1dfd8 <nm_bsp_register_isr+0x6c>)
   1dfb2:	2200      	movs	r2, #0
   1dfb4:	2109      	movs	r1, #9
   1dfb6:	0018      	movs	r0, r3
   1dfb8:	4b08      	ldr	r3, [pc, #32]	; (1dfdc <nm_bsp_register_isr+0x70>)
   1dfba:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1dfbc:	2100      	movs	r1, #0
   1dfbe:	2009      	movs	r0, #9
   1dfc0:	4b07      	ldr	r3, [pc, #28]	; (1dfe0 <nm_bsp_register_isr+0x74>)
   1dfc2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1dfc4:	46c0      	nop			; (mov r8, r8)
   1dfc6:	46bd      	mov	sp, r7
   1dfc8:	b006      	add	sp, #24
   1dfca:	bd80      	pop	{r7, pc}
   1dfcc:	20003cf8 	.word	0x20003cf8
   1dfd0:	000244a5 	.word	0x000244a5
   1dfd4:	000244d9 	.word	0x000244d9
   1dfd8:	0001de55 	.word	0x0001de55
   1dfdc:	000240a5 	.word	0x000240a5
   1dfe0:	00024109 	.word	0x00024109

0001dfe4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1dfe4:	b580      	push	{r7, lr}
   1dfe6:	b082      	sub	sp, #8
   1dfe8:	af00      	add	r7, sp, #0
   1dfea:	0002      	movs	r2, r0
   1dfec:	1dfb      	adds	r3, r7, #7
   1dfee:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1dff0:	1dfb      	adds	r3, r7, #7
   1dff2:	781b      	ldrb	r3, [r3, #0]
   1dff4:	2b00      	cmp	r3, #0
   1dff6:	d004      	beq.n	1e002 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1dff8:	2100      	movs	r1, #0
   1dffa:	2009      	movs	r0, #9
   1dffc:	4b05      	ldr	r3, [pc, #20]	; (1e014 <nm_bsp_interrupt_ctrl+0x30>)
   1dffe:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1e000:	e003      	b.n	1e00a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1e002:	2100      	movs	r1, #0
   1e004:	2009      	movs	r0, #9
   1e006:	4b04      	ldr	r3, [pc, #16]	; (1e018 <nm_bsp_interrupt_ctrl+0x34>)
   1e008:	4798      	blx	r3
}
   1e00a:	46c0      	nop			; (mov r8, r8)
   1e00c:	46bd      	mov	sp, r7
   1e00e:	b002      	add	sp, #8
   1e010:	bd80      	pop	{r7, pc}
   1e012:	46c0      	nop			; (mov r8, r8)
   1e014:	00024109 	.word	0x00024109
   1e018:	00024151 	.word	0x00024151

0001e01c <system_pinmux_get_group_from_gpio_pin>:
{
   1e01c:	b580      	push	{r7, lr}
   1e01e:	b084      	sub	sp, #16
   1e020:	af00      	add	r7, sp, #0
   1e022:	0002      	movs	r2, r0
   1e024:	1dfb      	adds	r3, r7, #7
   1e026:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e028:	230f      	movs	r3, #15
   1e02a:	18fb      	adds	r3, r7, r3
   1e02c:	1dfa      	adds	r2, r7, #7
   1e02e:	7812      	ldrb	r2, [r2, #0]
   1e030:	09d2      	lsrs	r2, r2, #7
   1e032:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e034:	230e      	movs	r3, #14
   1e036:	18fb      	adds	r3, r7, r3
   1e038:	1dfa      	adds	r2, r7, #7
   1e03a:	7812      	ldrb	r2, [r2, #0]
   1e03c:	0952      	lsrs	r2, r2, #5
   1e03e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e040:	4b0d      	ldr	r3, [pc, #52]	; (1e078 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e042:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e044:	230f      	movs	r3, #15
   1e046:	18fb      	adds	r3, r7, r3
   1e048:	781b      	ldrb	r3, [r3, #0]
   1e04a:	2b00      	cmp	r3, #0
   1e04c:	d10f      	bne.n	1e06e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e04e:	230f      	movs	r3, #15
   1e050:	18fb      	adds	r3, r7, r3
   1e052:	781b      	ldrb	r3, [r3, #0]
   1e054:	009b      	lsls	r3, r3, #2
   1e056:	2210      	movs	r2, #16
   1e058:	4694      	mov	ip, r2
   1e05a:	44bc      	add	ip, r7
   1e05c:	4463      	add	r3, ip
   1e05e:	3b08      	subs	r3, #8
   1e060:	681a      	ldr	r2, [r3, #0]
   1e062:	230e      	movs	r3, #14
   1e064:	18fb      	adds	r3, r7, r3
   1e066:	781b      	ldrb	r3, [r3, #0]
   1e068:	01db      	lsls	r3, r3, #7
   1e06a:	18d3      	adds	r3, r2, r3
   1e06c:	e000      	b.n	1e070 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e06e:	2300      	movs	r3, #0
}
   1e070:	0018      	movs	r0, r3
   1e072:	46bd      	mov	sp, r7
   1e074:	b004      	add	sp, #16
   1e076:	bd80      	pop	{r7, pc}
   1e078:	41004400 	.word	0x41004400

0001e07c <system_interrupt_enable>:
{
   1e07c:	b580      	push	{r7, lr}
   1e07e:	b082      	sub	sp, #8
   1e080:	af00      	add	r7, sp, #0
   1e082:	0002      	movs	r2, r0
   1e084:	1dfb      	adds	r3, r7, #7
   1e086:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e088:	4b06      	ldr	r3, [pc, #24]	; (1e0a4 <system_interrupt_enable+0x28>)
   1e08a:	1dfa      	adds	r2, r7, #7
   1e08c:	7812      	ldrb	r2, [r2, #0]
   1e08e:	0011      	movs	r1, r2
   1e090:	221f      	movs	r2, #31
   1e092:	400a      	ands	r2, r1
   1e094:	2101      	movs	r1, #1
   1e096:	4091      	lsls	r1, r2
   1e098:	000a      	movs	r2, r1
   1e09a:	601a      	str	r2, [r3, #0]
}
   1e09c:	46c0      	nop			; (mov r8, r8)
   1e09e:	46bd      	mov	sp, r7
   1e0a0:	b002      	add	sp, #8
   1e0a2:	bd80      	pop	{r7, pc}
   1e0a4:	e000e100 	.word	0xe000e100

0001e0a8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   1e0a8:	b580      	push	{r7, lr}
   1e0aa:	b082      	sub	sp, #8
   1e0ac:	af00      	add	r7, sp, #0
   1e0ae:	0002      	movs	r2, r0
   1e0b0:	1dfb      	adds	r3, r7, #7
   1e0b2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e0b4:	4a07      	ldr	r2, [pc, #28]	; (1e0d4 <system_interrupt_disable+0x2c>)
   1e0b6:	1dfb      	adds	r3, r7, #7
   1e0b8:	781b      	ldrb	r3, [r3, #0]
   1e0ba:	0019      	movs	r1, r3
   1e0bc:	231f      	movs	r3, #31
   1e0be:	400b      	ands	r3, r1
   1e0c0:	2101      	movs	r1, #1
   1e0c2:	4099      	lsls	r1, r3
   1e0c4:	000b      	movs	r3, r1
   1e0c6:	0019      	movs	r1, r3
   1e0c8:	2380      	movs	r3, #128	; 0x80
   1e0ca:	50d1      	str	r1, [r2, r3]
}
   1e0cc:	46c0      	nop			; (mov r8, r8)
   1e0ce:	46bd      	mov	sp, r7
   1e0d0:	b002      	add	sp, #8
   1e0d2:	bd80      	pop	{r7, pc}
   1e0d4:	e000e100 	.word	0xe000e100

0001e0d8 <port_get_group_from_gpio_pin>:
{
   1e0d8:	b580      	push	{r7, lr}
   1e0da:	b082      	sub	sp, #8
   1e0dc:	af00      	add	r7, sp, #0
   1e0de:	0002      	movs	r2, r0
   1e0e0:	1dfb      	adds	r3, r7, #7
   1e0e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e0e4:	1dfb      	adds	r3, r7, #7
   1e0e6:	781b      	ldrb	r3, [r3, #0]
   1e0e8:	0018      	movs	r0, r3
   1e0ea:	4b03      	ldr	r3, [pc, #12]	; (1e0f8 <port_get_group_from_gpio_pin+0x20>)
   1e0ec:	4798      	blx	r3
   1e0ee:	0003      	movs	r3, r0
}
   1e0f0:	0018      	movs	r0, r3
   1e0f2:	46bd      	mov	sp, r7
   1e0f4:	b002      	add	sp, #8
   1e0f6:	bd80      	pop	{r7, pc}
   1e0f8:	0001e01d 	.word	0x0001e01d

0001e0fc <port_get_config_defaults>:
{
   1e0fc:	b580      	push	{r7, lr}
   1e0fe:	b082      	sub	sp, #8
   1e100:	af00      	add	r7, sp, #0
   1e102:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e104:	687b      	ldr	r3, [r7, #4]
   1e106:	2200      	movs	r2, #0
   1e108:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e10a:	687b      	ldr	r3, [r7, #4]
   1e10c:	2201      	movs	r2, #1
   1e10e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e110:	687b      	ldr	r3, [r7, #4]
   1e112:	2200      	movs	r2, #0
   1e114:	709a      	strb	r2, [r3, #2]
}
   1e116:	46c0      	nop			; (mov r8, r8)
   1e118:	46bd      	mov	sp, r7
   1e11a:	b002      	add	sp, #8
   1e11c:	bd80      	pop	{r7, pc}
	...

0001e120 <port_pin_set_output_level>:
{
   1e120:	b580      	push	{r7, lr}
   1e122:	b084      	sub	sp, #16
   1e124:	af00      	add	r7, sp, #0
   1e126:	0002      	movs	r2, r0
   1e128:	1dfb      	adds	r3, r7, #7
   1e12a:	701a      	strb	r2, [r3, #0]
   1e12c:	1dbb      	adds	r3, r7, #6
   1e12e:	1c0a      	adds	r2, r1, #0
   1e130:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e132:	1dfb      	adds	r3, r7, #7
   1e134:	781b      	ldrb	r3, [r3, #0]
   1e136:	0018      	movs	r0, r3
   1e138:	4b0d      	ldr	r3, [pc, #52]	; (1e170 <port_pin_set_output_level+0x50>)
   1e13a:	4798      	blx	r3
   1e13c:	0003      	movs	r3, r0
   1e13e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e140:	1dfb      	adds	r3, r7, #7
   1e142:	781b      	ldrb	r3, [r3, #0]
   1e144:	221f      	movs	r2, #31
   1e146:	4013      	ands	r3, r2
   1e148:	2201      	movs	r2, #1
   1e14a:	409a      	lsls	r2, r3
   1e14c:	0013      	movs	r3, r2
   1e14e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e150:	1dbb      	adds	r3, r7, #6
   1e152:	781b      	ldrb	r3, [r3, #0]
   1e154:	2b00      	cmp	r3, #0
   1e156:	d003      	beq.n	1e160 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e158:	68fb      	ldr	r3, [r7, #12]
   1e15a:	68ba      	ldr	r2, [r7, #8]
   1e15c:	619a      	str	r2, [r3, #24]
}
   1e15e:	e002      	b.n	1e166 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e160:	68fb      	ldr	r3, [r7, #12]
   1e162:	68ba      	ldr	r2, [r7, #8]
   1e164:	615a      	str	r2, [r3, #20]
}
   1e166:	46c0      	nop			; (mov r8, r8)
   1e168:	46bd      	mov	sp, r7
   1e16a:	b004      	add	sp, #16
   1e16c:	bd80      	pop	{r7, pc}
   1e16e:	46c0      	nop			; (mov r8, r8)
   1e170:	0001e0d9 	.word	0x0001e0d9

0001e174 <spi_is_syncing>:
{
   1e174:	b580      	push	{r7, lr}
   1e176:	b084      	sub	sp, #16
   1e178:	af00      	add	r7, sp, #0
   1e17a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e17c:	687b      	ldr	r3, [r7, #4]
   1e17e:	681b      	ldr	r3, [r3, #0]
   1e180:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1e182:	68fb      	ldr	r3, [r7, #12]
   1e184:	69db      	ldr	r3, [r3, #28]
   1e186:	1e5a      	subs	r2, r3, #1
   1e188:	4193      	sbcs	r3, r2
   1e18a:	b2db      	uxtb	r3, r3
}
   1e18c:	0018      	movs	r0, r3
   1e18e:	46bd      	mov	sp, r7
   1e190:	b004      	add	sp, #16
   1e192:	bd80      	pop	{r7, pc}

0001e194 <spi_get_config_defaults>:
{
   1e194:	b580      	push	{r7, lr}
   1e196:	b082      	sub	sp, #8
   1e198:	af00      	add	r7, sp, #0
   1e19a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1e19c:	687b      	ldr	r3, [r7, #4]
   1e19e:	2201      	movs	r2, #1
   1e1a0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	2200      	movs	r2, #0
   1e1a6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e1a8:	687b      	ldr	r3, [r7, #4]
   1e1aa:	2200      	movs	r2, #0
   1e1ac:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e1ae:	687b      	ldr	r3, [r7, #4]
   1e1b0:	22c0      	movs	r2, #192	; 0xc0
   1e1b2:	0392      	lsls	r2, r2, #14
   1e1b4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e1b6:	687b      	ldr	r3, [r7, #4]
   1e1b8:	2200      	movs	r2, #0
   1e1ba:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e1bc:	687b      	ldr	r3, [r7, #4]
   1e1be:	2200      	movs	r2, #0
   1e1c0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e1c2:	687b      	ldr	r3, [r7, #4]
   1e1c4:	2201      	movs	r2, #1
   1e1c6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1e1c8:	687b      	ldr	r3, [r7, #4]
   1e1ca:	2201      	movs	r2, #1
   1e1cc:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1e1ce:	687b      	ldr	r3, [r7, #4]
   1e1d0:	2200      	movs	r2, #0
   1e1d2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1e1d4:	687b      	ldr	r3, [r7, #4]
   1e1d6:	2224      	movs	r2, #36	; 0x24
   1e1d8:	2100      	movs	r1, #0
   1e1da:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e1dc:	687b      	ldr	r3, [r7, #4]
   1e1de:	3318      	adds	r3, #24
   1e1e0:	220c      	movs	r2, #12
   1e1e2:	2100      	movs	r1, #0
   1e1e4:	0018      	movs	r0, r3
   1e1e6:	4b0a      	ldr	r3, [pc, #40]	; (1e210 <spi_get_config_defaults+0x7c>)
   1e1e8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1e1ea:	687b      	ldr	r3, [r7, #4]
   1e1ec:	4a09      	ldr	r2, [pc, #36]	; (1e214 <spi_get_config_defaults+0x80>)
   1e1ee:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e1f0:	687b      	ldr	r3, [r7, #4]
   1e1f2:	2200      	movs	r2, #0
   1e1f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e1f6:	687b      	ldr	r3, [r7, #4]
   1e1f8:	2200      	movs	r2, #0
   1e1fa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e1fc:	687b      	ldr	r3, [r7, #4]
   1e1fe:	2200      	movs	r2, #0
   1e200:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e202:	687b      	ldr	r3, [r7, #4]
   1e204:	2200      	movs	r2, #0
   1e206:	635a      	str	r2, [r3, #52]	; 0x34
};
   1e208:	46c0      	nop			; (mov r8, r8)
   1e20a:	46bd      	mov	sp, r7
   1e20c:	b002      	add	sp, #8
   1e20e:	bd80      	pop	{r7, pc}
   1e210:	00032203 	.word	0x00032203
   1e214:	000186a0 	.word	0x000186a0

0001e218 <spi_slave_inst_get_config_defaults>:
{
   1e218:	b580      	push	{r7, lr}
   1e21a:	b082      	sub	sp, #8
   1e21c:	af00      	add	r7, sp, #0
   1e21e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1e220:	687b      	ldr	r3, [r7, #4]
   1e222:	220a      	movs	r2, #10
   1e224:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e226:	687b      	ldr	r3, [r7, #4]
   1e228:	2200      	movs	r2, #0
   1e22a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e22c:	687b      	ldr	r3, [r7, #4]
   1e22e:	2200      	movs	r2, #0
   1e230:	709a      	strb	r2, [r3, #2]
}
   1e232:	46c0      	nop			; (mov r8, r8)
   1e234:	46bd      	mov	sp, r7
   1e236:	b002      	add	sp, #8
   1e238:	bd80      	pop	{r7, pc}
	...

0001e23c <spi_attach_slave>:
{
   1e23c:	b580      	push	{r7, lr}
   1e23e:	b084      	sub	sp, #16
   1e240:	af00      	add	r7, sp, #0
   1e242:	6078      	str	r0, [r7, #4]
   1e244:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1e246:	683b      	ldr	r3, [r7, #0]
   1e248:	781a      	ldrb	r2, [r3, #0]
   1e24a:	687b      	ldr	r3, [r7, #4]
   1e24c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e24e:	683b      	ldr	r3, [r7, #0]
   1e250:	785a      	ldrb	r2, [r3, #1]
   1e252:	687b      	ldr	r3, [r7, #4]
   1e254:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e256:	683b      	ldr	r3, [r7, #0]
   1e258:	789a      	ldrb	r2, [r3, #2]
   1e25a:	687b      	ldr	r3, [r7, #4]
   1e25c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1e25e:	230c      	movs	r3, #12
   1e260:	18fb      	adds	r3, r7, r3
   1e262:	0018      	movs	r0, r3
   1e264:	4b0b      	ldr	r3, [pc, #44]	; (1e294 <spi_attach_slave+0x58>)
   1e266:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1e268:	230c      	movs	r3, #12
   1e26a:	18fb      	adds	r3, r7, r3
   1e26c:	2201      	movs	r2, #1
   1e26e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1e270:	687b      	ldr	r3, [r7, #4]
   1e272:	781b      	ldrb	r3, [r3, #0]
   1e274:	220c      	movs	r2, #12
   1e276:	18ba      	adds	r2, r7, r2
   1e278:	0011      	movs	r1, r2
   1e27a:	0018      	movs	r0, r3
   1e27c:	4b06      	ldr	r3, [pc, #24]	; (1e298 <spi_attach_slave+0x5c>)
   1e27e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1e280:	687b      	ldr	r3, [r7, #4]
   1e282:	781b      	ldrb	r3, [r3, #0]
   1e284:	2101      	movs	r1, #1
   1e286:	0018      	movs	r0, r3
   1e288:	4b04      	ldr	r3, [pc, #16]	; (1e29c <spi_attach_slave+0x60>)
   1e28a:	4798      	blx	r3
}
   1e28c:	46c0      	nop			; (mov r8, r8)
   1e28e:	46bd      	mov	sp, r7
   1e290:	b004      	add	sp, #16
   1e292:	bd80      	pop	{r7, pc}
   1e294:	0001e0fd 	.word	0x0001e0fd
   1e298:	000245fd 	.word	0x000245fd
   1e29c:	0001e121 	.word	0x0001e121

0001e2a0 <spi_enable>:
{
   1e2a0:	b580      	push	{r7, lr}
   1e2a2:	b084      	sub	sp, #16
   1e2a4:	af00      	add	r7, sp, #0
   1e2a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2a8:	687b      	ldr	r3, [r7, #4]
   1e2aa:	681b      	ldr	r3, [r3, #0]
   1e2ac:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e2ae:	687b      	ldr	r3, [r7, #4]
   1e2b0:	681b      	ldr	r3, [r3, #0]
   1e2b2:	0018      	movs	r0, r3
   1e2b4:	4b0b      	ldr	r3, [pc, #44]	; (1e2e4 <spi_enable+0x44>)
   1e2b6:	4798      	blx	r3
   1e2b8:	0003      	movs	r3, r0
   1e2ba:	0018      	movs	r0, r3
   1e2bc:	4b0a      	ldr	r3, [pc, #40]	; (1e2e8 <spi_enable+0x48>)
   1e2be:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1e2c0:	46c0      	nop			; (mov r8, r8)
   1e2c2:	687b      	ldr	r3, [r7, #4]
   1e2c4:	0018      	movs	r0, r3
   1e2c6:	4b09      	ldr	r3, [pc, #36]	; (1e2ec <spi_enable+0x4c>)
   1e2c8:	4798      	blx	r3
   1e2ca:	1e03      	subs	r3, r0, #0
   1e2cc:	d1f9      	bne.n	1e2c2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1e2ce:	68fb      	ldr	r3, [r7, #12]
   1e2d0:	681b      	ldr	r3, [r3, #0]
   1e2d2:	2202      	movs	r2, #2
   1e2d4:	431a      	orrs	r2, r3
   1e2d6:	68fb      	ldr	r3, [r7, #12]
   1e2d8:	601a      	str	r2, [r3, #0]
}
   1e2da:	46c0      	nop			; (mov r8, r8)
   1e2dc:	46bd      	mov	sp, r7
   1e2de:	b004      	add	sp, #16
   1e2e0:	bd80      	pop	{r7, pc}
   1e2e2:	46c0      	nop			; (mov r8, r8)
   1e2e4:	000252cd 	.word	0x000252cd
   1e2e8:	0001e07d 	.word	0x0001e07d
   1e2ec:	0001e175 	.word	0x0001e175

0001e2f0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1e2f0:	b580      	push	{r7, lr}
   1e2f2:	b084      	sub	sp, #16
   1e2f4:	af00      	add	r7, sp, #0
   1e2f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2f8:	687b      	ldr	r3, [r7, #4]
   1e2fa:	681b      	ldr	r3, [r3, #0]
   1e2fc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1e2fe:	687b      	ldr	r3, [r7, #4]
   1e300:	681b      	ldr	r3, [r3, #0]
   1e302:	0018      	movs	r0, r3
   1e304:	4b0e      	ldr	r3, [pc, #56]	; (1e340 <spi_disable+0x50>)
   1e306:	4798      	blx	r3
   1e308:	0003      	movs	r3, r0
   1e30a:	0018      	movs	r0, r3
   1e30c:	4b0d      	ldr	r3, [pc, #52]	; (1e344 <spi_disable+0x54>)
   1e30e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1e310:	46c0      	nop			; (mov r8, r8)
   1e312:	687b      	ldr	r3, [r7, #4]
   1e314:	0018      	movs	r0, r3
   1e316:	4b0c      	ldr	r3, [pc, #48]	; (1e348 <spi_disable+0x58>)
   1e318:	4798      	blx	r3
   1e31a:	1e03      	subs	r3, r0, #0
   1e31c:	d1f9      	bne.n	1e312 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1e31e:	68fb      	ldr	r3, [r7, #12]
   1e320:	228f      	movs	r2, #143	; 0x8f
   1e322:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1e324:	68fb      	ldr	r3, [r7, #12]
   1e326:	228f      	movs	r2, #143	; 0x8f
   1e328:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1e32a:	68fb      	ldr	r3, [r7, #12]
   1e32c:	681b      	ldr	r3, [r3, #0]
   1e32e:	2202      	movs	r2, #2
   1e330:	4393      	bics	r3, r2
   1e332:	001a      	movs	r2, r3
   1e334:	68fb      	ldr	r3, [r7, #12]
   1e336:	601a      	str	r2, [r3, #0]
}
   1e338:	46c0      	nop			; (mov r8, r8)
   1e33a:	46bd      	mov	sp, r7
   1e33c:	b004      	add	sp, #16
   1e33e:	bd80      	pop	{r7, pc}
   1e340:	000252cd 	.word	0x000252cd
   1e344:	0001e0a9 	.word	0x0001e0a9
   1e348:	0001e175 	.word	0x0001e175

0001e34c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1e34c:	b580      	push	{r7, lr}
   1e34e:	b084      	sub	sp, #16
   1e350:	af00      	add	r7, sp, #0
   1e352:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e354:	687b      	ldr	r3, [r7, #4]
   1e356:	681b      	ldr	r3, [r3, #0]
   1e358:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e35a:	68fb      	ldr	r3, [r7, #12]
   1e35c:	7e1b      	ldrb	r3, [r3, #24]
   1e35e:	b2db      	uxtb	r3, r3
   1e360:	001a      	movs	r2, r3
   1e362:	2302      	movs	r3, #2
   1e364:	4013      	ands	r3, r2
   1e366:	1e5a      	subs	r2, r3, #1
   1e368:	4193      	sbcs	r3, r2
   1e36a:	b2db      	uxtb	r3, r3
}
   1e36c:	0018      	movs	r0, r3
   1e36e:	46bd      	mov	sp, r7
   1e370:	b004      	add	sp, #16
   1e372:	bd80      	pop	{r7, pc}

0001e374 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1e374:	b580      	push	{r7, lr}
   1e376:	b084      	sub	sp, #16
   1e378:	af00      	add	r7, sp, #0
   1e37a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e37c:	687b      	ldr	r3, [r7, #4]
   1e37e:	681b      	ldr	r3, [r3, #0]
   1e380:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e382:	68fb      	ldr	r3, [r7, #12]
   1e384:	7e1b      	ldrb	r3, [r3, #24]
   1e386:	b2db      	uxtb	r3, r3
   1e388:	001a      	movs	r2, r3
   1e38a:	2301      	movs	r3, #1
   1e38c:	4013      	ands	r3, r2
   1e38e:	1e5a      	subs	r2, r3, #1
   1e390:	4193      	sbcs	r3, r2
   1e392:	b2db      	uxtb	r3, r3
}
   1e394:	0018      	movs	r0, r3
   1e396:	46bd      	mov	sp, r7
   1e398:	b004      	add	sp, #16
   1e39a:	bd80      	pop	{r7, pc}

0001e39c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1e39c:	b580      	push	{r7, lr}
   1e39e:	b084      	sub	sp, #16
   1e3a0:	af00      	add	r7, sp, #0
   1e3a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3a4:	687b      	ldr	r3, [r7, #4]
   1e3a6:	681b      	ldr	r3, [r3, #0]
   1e3a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e3aa:	68fb      	ldr	r3, [r7, #12]
   1e3ac:	7e1b      	ldrb	r3, [r3, #24]
   1e3ae:	b2db      	uxtb	r3, r3
   1e3b0:	001a      	movs	r2, r3
   1e3b2:	2304      	movs	r3, #4
   1e3b4:	4013      	ands	r3, r2
   1e3b6:	1e5a      	subs	r2, r3, #1
   1e3b8:	4193      	sbcs	r3, r2
   1e3ba:	b2db      	uxtb	r3, r3
}
   1e3bc:	0018      	movs	r0, r3
   1e3be:	46bd      	mov	sp, r7
   1e3c0:	b004      	add	sp, #16
   1e3c2:	bd80      	pop	{r7, pc}

0001e3c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1e3c4:	b580      	push	{r7, lr}
   1e3c6:	b084      	sub	sp, #16
   1e3c8:	af00      	add	r7, sp, #0
   1e3ca:	6078      	str	r0, [r7, #4]
   1e3cc:	000a      	movs	r2, r1
   1e3ce:	1cbb      	adds	r3, r7, #2
   1e3d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3d2:	687b      	ldr	r3, [r7, #4]
   1e3d4:	681b      	ldr	r3, [r3, #0]
   1e3d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1e3d8:	687b      	ldr	r3, [r7, #4]
   1e3da:	0018      	movs	r0, r3
   1e3dc:	4b0a      	ldr	r3, [pc, #40]	; (1e408 <spi_write+0x44>)
   1e3de:	4798      	blx	r3
   1e3e0:	0003      	movs	r3, r0
   1e3e2:	001a      	movs	r2, r3
   1e3e4:	2301      	movs	r3, #1
   1e3e6:	4053      	eors	r3, r2
   1e3e8:	b2db      	uxtb	r3, r3
   1e3ea:	2b00      	cmp	r3, #0
   1e3ec:	d001      	beq.n	1e3f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1e3ee:	2305      	movs	r3, #5
   1e3f0:	e006      	b.n	1e400 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e3f2:	1cbb      	adds	r3, r7, #2
   1e3f4:	881b      	ldrh	r3, [r3, #0]
   1e3f6:	05db      	lsls	r3, r3, #23
   1e3f8:	0dda      	lsrs	r2, r3, #23
   1e3fa:	68fb      	ldr	r3, [r7, #12]
   1e3fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1e3fe:	2300      	movs	r3, #0
}
   1e400:	0018      	movs	r0, r3
   1e402:	46bd      	mov	sp, r7
   1e404:	b004      	add	sp, #16
   1e406:	bd80      	pop	{r7, pc}
   1e408:	0001e375 	.word	0x0001e375

0001e40c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1e40c:	b580      	push	{r7, lr}
   1e40e:	b084      	sub	sp, #16
   1e410:	af00      	add	r7, sp, #0
   1e412:	6078      	str	r0, [r7, #4]
   1e414:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e416:	687b      	ldr	r3, [r7, #4]
   1e418:	681b      	ldr	r3, [r3, #0]
   1e41a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1e41c:	687b      	ldr	r3, [r7, #4]
   1e41e:	0018      	movs	r0, r3
   1e420:	4b1b      	ldr	r3, [pc, #108]	; (1e490 <spi_read+0x84>)
   1e422:	4798      	blx	r3
   1e424:	0003      	movs	r3, r0
   1e426:	001a      	movs	r2, r3
   1e428:	2301      	movs	r3, #1
   1e42a:	4053      	eors	r3, r2
   1e42c:	b2db      	uxtb	r3, r3
   1e42e:	2b00      	cmp	r3, #0
   1e430:	d001      	beq.n	1e436 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1e432:	2310      	movs	r3, #16
   1e434:	e027      	b.n	1e486 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1e436:	230f      	movs	r3, #15
   1e438:	18fb      	adds	r3, r7, r3
   1e43a:	2200      	movs	r2, #0
   1e43c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e43e:	68bb      	ldr	r3, [r7, #8]
   1e440:	8b5b      	ldrh	r3, [r3, #26]
   1e442:	b29b      	uxth	r3, r3
   1e444:	001a      	movs	r2, r3
   1e446:	2304      	movs	r3, #4
   1e448:	4013      	ands	r3, r2
   1e44a:	d006      	beq.n	1e45a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1e44c:	230f      	movs	r3, #15
   1e44e:	18fb      	adds	r3, r7, r3
   1e450:	221e      	movs	r2, #30
   1e452:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e454:	68bb      	ldr	r3, [r7, #8]
   1e456:	2204      	movs	r2, #4
   1e458:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e45a:	687b      	ldr	r3, [r7, #4]
   1e45c:	799b      	ldrb	r3, [r3, #6]
   1e45e:	2b01      	cmp	r3, #1
   1e460:	d108      	bne.n	1e474 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e462:	68bb      	ldr	r3, [r7, #8]
   1e464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e466:	b29b      	uxth	r3, r3
   1e468:	05db      	lsls	r3, r3, #23
   1e46a:	0ddb      	lsrs	r3, r3, #23
   1e46c:	b29a      	uxth	r2, r3
   1e46e:	683b      	ldr	r3, [r7, #0]
   1e470:	801a      	strh	r2, [r3, #0]
   1e472:	e005      	b.n	1e480 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e474:	68bb      	ldr	r3, [r7, #8]
   1e476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e478:	b2db      	uxtb	r3, r3
   1e47a:	b29a      	uxth	r2, r3
   1e47c:	683b      	ldr	r3, [r7, #0]
   1e47e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1e480:	230f      	movs	r3, #15
   1e482:	18fb      	adds	r3, r7, r3
   1e484:	781b      	ldrb	r3, [r3, #0]
}
   1e486:	0018      	movs	r0, r3
   1e488:	46bd      	mov	sp, r7
   1e48a:	b004      	add	sp, #16
   1e48c:	bd80      	pop	{r7, pc}
   1e48e:	46c0      	nop			; (mov r8, r8)
   1e490:	0001e39d 	.word	0x0001e39d

0001e494 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1e494:	b580      	push	{r7, lr}
   1e496:	b086      	sub	sp, #24
   1e498:	af00      	add	r7, sp, #0
   1e49a:	60f8      	str	r0, [r7, #12]
   1e49c:	60b9      	str	r1, [r7, #8]
   1e49e:	1dbb      	adds	r3, r7, #6
   1e4a0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1e4a2:	2313      	movs	r3, #19
   1e4a4:	18fb      	adds	r3, r7, r3
   1e4a6:	22ff      	movs	r2, #255	; 0xff
   1e4a8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1e4aa:	2317      	movs	r3, #23
   1e4ac:	18fb      	adds	r3, r7, r3
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	701a      	strb	r2, [r3, #0]
   1e4b2:	2316      	movs	r3, #22
   1e4b4:	18fb      	adds	r3, r7, r3
   1e4b6:	2200      	movs	r2, #0
   1e4b8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1e4ba:	2314      	movs	r3, #20
   1e4bc:	18fb      	adds	r3, r7, r3
   1e4be:	2200      	movs	r2, #0
   1e4c0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1e4c2:	2310      	movs	r3, #16
   1e4c4:	18fb      	adds	r3, r7, r3
   1e4c6:	2200      	movs	r2, #0
   1e4c8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1e4ca:	68bb      	ldr	r3, [r7, #8]
   1e4cc:	2b00      	cmp	r3, #0
   1e4ce:	d102      	bne.n	1e4d6 <spi_rw+0x42>
   1e4d0:	68fb      	ldr	r3, [r7, #12]
   1e4d2:	2b00      	cmp	r3, #0
   1e4d4:	d003      	beq.n	1e4de <spi_rw+0x4a>
   1e4d6:	1dbb      	adds	r3, r7, #6
   1e4d8:	881b      	ldrh	r3, [r3, #0]
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	d102      	bne.n	1e4e4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1e4de:	230f      	movs	r3, #15
   1e4e0:	425b      	negs	r3, r3
   1e4e2:	e07e      	b.n	1e5e2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1e4e4:	68fb      	ldr	r3, [r7, #12]
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	d106      	bne.n	1e4f8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1e4ea:	2313      	movs	r3, #19
   1e4ec:	18fb      	adds	r3, r7, r3
   1e4ee:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1e4f0:	2317      	movs	r3, #23
   1e4f2:	18fb      	adds	r3, r7, r3
   1e4f4:	2201      	movs	r2, #1
   1e4f6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1e4f8:	68bb      	ldr	r3, [r7, #8]
   1e4fa:	2b00      	cmp	r3, #0
   1e4fc:	d106      	bne.n	1e50c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1e4fe:	2313      	movs	r3, #19
   1e500:	18fb      	adds	r3, r7, r3
   1e502:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1e504:	2316      	movs	r3, #22
   1e506:	18fb      	adds	r3, r7, r3
   1e508:	2201      	movs	r2, #1
   1e50a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1e50c:	4937      	ldr	r1, [pc, #220]	; (1e5ec <spi_rw+0x158>)
   1e50e:	4b38      	ldr	r3, [pc, #224]	; (1e5f0 <spi_rw+0x15c>)
   1e510:	2201      	movs	r2, #1
   1e512:	0018      	movs	r0, r3
   1e514:	4b37      	ldr	r3, [pc, #220]	; (1e5f4 <spi_rw+0x160>)
   1e516:	4798      	blx	r3

	while (u16Sz) {
   1e518:	e04c      	b.n	1e5b4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1e51a:	68fb      	ldr	r3, [r7, #12]
   1e51c:	781a      	ldrb	r2, [r3, #0]
   1e51e:	2314      	movs	r3, #20
   1e520:	18fb      	adds	r3, r7, r3
   1e522:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1e524:	46c0      	nop			; (mov r8, r8)
   1e526:	4b32      	ldr	r3, [pc, #200]	; (1e5f0 <spi_rw+0x15c>)
   1e528:	0018      	movs	r0, r3
   1e52a:	4b33      	ldr	r3, [pc, #204]	; (1e5f8 <spi_rw+0x164>)
   1e52c:	4798      	blx	r3
   1e52e:	0003      	movs	r3, r0
   1e530:	001a      	movs	r2, r3
   1e532:	2301      	movs	r3, #1
   1e534:	4053      	eors	r3, r2
   1e536:	b2db      	uxtb	r3, r3
   1e538:	2b00      	cmp	r3, #0
   1e53a:	d1f4      	bne.n	1e526 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1e53c:	46c0      	nop			; (mov r8, r8)
   1e53e:	2314      	movs	r3, #20
   1e540:	18fb      	adds	r3, r7, r3
   1e542:	881a      	ldrh	r2, [r3, #0]
   1e544:	4b2a      	ldr	r3, [pc, #168]	; (1e5f0 <spi_rw+0x15c>)
   1e546:	0011      	movs	r1, r2
   1e548:	0018      	movs	r0, r3
   1e54a:	4b2c      	ldr	r3, [pc, #176]	; (1e5fc <spi_rw+0x168>)
   1e54c:	4798      	blx	r3
   1e54e:	1e03      	subs	r3, r0, #0
   1e550:	d1f5      	bne.n	1e53e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1e552:	46c0      	nop			; (mov r8, r8)
   1e554:	4b26      	ldr	r3, [pc, #152]	; (1e5f0 <spi_rw+0x15c>)
   1e556:	0018      	movs	r0, r3
   1e558:	4b29      	ldr	r3, [pc, #164]	; (1e600 <spi_rw+0x16c>)
   1e55a:	4798      	blx	r3
   1e55c:	0003      	movs	r3, r0
   1e55e:	001a      	movs	r2, r3
   1e560:	2301      	movs	r3, #1
   1e562:	4053      	eors	r3, r2
   1e564:	b2db      	uxtb	r3, r3
   1e566:	2b00      	cmp	r3, #0
   1e568:	d1f4      	bne.n	1e554 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1e56a:	46c0      	nop			; (mov r8, r8)
   1e56c:	2310      	movs	r3, #16
   1e56e:	18fa      	adds	r2, r7, r3
   1e570:	4b1f      	ldr	r3, [pc, #124]	; (1e5f0 <spi_rw+0x15c>)
   1e572:	0011      	movs	r1, r2
   1e574:	0018      	movs	r0, r3
   1e576:	4b23      	ldr	r3, [pc, #140]	; (1e604 <spi_rw+0x170>)
   1e578:	4798      	blx	r3
   1e57a:	1e03      	subs	r3, r0, #0
   1e57c:	d1f6      	bne.n	1e56c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1e57e:	2310      	movs	r3, #16
   1e580:	18fb      	adds	r3, r7, r3
   1e582:	881b      	ldrh	r3, [r3, #0]
   1e584:	b2da      	uxtb	r2, r3
   1e586:	68bb      	ldr	r3, [r7, #8]
   1e588:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1e58a:	1dbb      	adds	r3, r7, #6
   1e58c:	881a      	ldrh	r2, [r3, #0]
   1e58e:	1dbb      	adds	r3, r7, #6
   1e590:	3a01      	subs	r2, #1
   1e592:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1e594:	2316      	movs	r3, #22
   1e596:	18fb      	adds	r3, r7, r3
   1e598:	781b      	ldrb	r3, [r3, #0]
   1e59a:	2b00      	cmp	r3, #0
   1e59c:	d102      	bne.n	1e5a4 <spi_rw+0x110>
			pu8Miso++;
   1e59e:	68bb      	ldr	r3, [r7, #8]
   1e5a0:	3301      	adds	r3, #1
   1e5a2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1e5a4:	2317      	movs	r3, #23
   1e5a6:	18fb      	adds	r3, r7, r3
   1e5a8:	781b      	ldrb	r3, [r3, #0]
   1e5aa:	2b00      	cmp	r3, #0
   1e5ac:	d102      	bne.n	1e5b4 <spi_rw+0x120>
			pu8Mosi++;
   1e5ae:	68fb      	ldr	r3, [r7, #12]
   1e5b0:	3301      	adds	r3, #1
   1e5b2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1e5b4:	1dbb      	adds	r3, r7, #6
   1e5b6:	881b      	ldrh	r3, [r3, #0]
   1e5b8:	2b00      	cmp	r3, #0
   1e5ba:	d1ae      	bne.n	1e51a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1e5bc:	46c0      	nop			; (mov r8, r8)
   1e5be:	4b0c      	ldr	r3, [pc, #48]	; (1e5f0 <spi_rw+0x15c>)
   1e5c0:	0018      	movs	r0, r3
   1e5c2:	4b11      	ldr	r3, [pc, #68]	; (1e608 <spi_rw+0x174>)
   1e5c4:	4798      	blx	r3
   1e5c6:	0003      	movs	r3, r0
   1e5c8:	001a      	movs	r2, r3
   1e5ca:	2301      	movs	r3, #1
   1e5cc:	4053      	eors	r3, r2
   1e5ce:	b2db      	uxtb	r3, r3
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	d1f4      	bne.n	1e5be <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1e5d4:	4905      	ldr	r1, [pc, #20]	; (1e5ec <spi_rw+0x158>)
   1e5d6:	4b06      	ldr	r3, [pc, #24]	; (1e5f0 <spi_rw+0x15c>)
   1e5d8:	2200      	movs	r2, #0
   1e5da:	0018      	movs	r0, r3
   1e5dc:	4b05      	ldr	r3, [pc, #20]	; (1e5f4 <spi_rw+0x160>)
   1e5de:	4798      	blx	r3

	return M2M_SUCCESS;
   1e5e0:	2300      	movs	r3, #0
}
   1e5e2:	0018      	movs	r0, r3
   1e5e4:	46bd      	mov	sp, r7
   1e5e6:	b006      	add	sp, #24
   1e5e8:	bd80      	pop	{r7, pc}
   1e5ea:	46c0      	nop			; (mov r8, r8)
   1e5ec:	20005404 	.word	0x20005404
   1e5f0:	20005408 	.word	0x20005408
   1e5f4:	00025d41 	.word	0x00025d41
   1e5f8:	0001e375 	.word	0x0001e375
   1e5fc:	0001e3c5 	.word	0x0001e3c5
   1e600:	0001e39d 	.word	0x0001e39d
   1e604:	0001e40d 	.word	0x0001e40d
   1e608:	0001e34d 	.word	0x0001e34d

0001e60c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1e60c:	b580      	push	{r7, lr}
   1e60e:	b092      	sub	sp, #72	; 0x48
   1e610:	af00      	add	r7, sp, #0
   1e612:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1e614:	2347      	movs	r3, #71	; 0x47
   1e616:	18fb      	adds	r3, r7, r3
   1e618:	2200      	movs	r2, #0
   1e61a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1e61c:	2308      	movs	r3, #8
   1e61e:	18fb      	adds	r3, r7, r3
   1e620:	0018      	movs	r0, r3
   1e622:	4b26      	ldr	r3, [pc, #152]	; (1e6bc <nm_bus_init+0xb0>)
   1e624:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1e626:	2308      	movs	r3, #8
   1e628:	18fb      	adds	r3, r7, r3
   1e62a:	220e      	movs	r2, #14
   1e62c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1e62e:	2308      	movs	r3, #8
   1e630:	18fa      	adds	r2, r7, r3
   1e632:	4b23      	ldr	r3, [pc, #140]	; (1e6c0 <nm_bus_init+0xb4>)
   1e634:	0011      	movs	r1, r2
   1e636:	0018      	movs	r0, r3
   1e638:	4b22      	ldr	r3, [pc, #136]	; (1e6c4 <nm_bus_init+0xb8>)
   1e63a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1e63c:	230c      	movs	r3, #12
   1e63e:	18fb      	adds	r3, r7, r3
   1e640:	0018      	movs	r0, r3
   1e642:	4b21      	ldr	r3, [pc, #132]	; (1e6c8 <nm_bus_init+0xbc>)
   1e644:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1e646:	230c      	movs	r3, #12
   1e648:	18fb      	adds	r3, r7, r3
   1e64a:	22c0      	movs	r2, #192	; 0xc0
   1e64c:	0392      	lsls	r2, r2, #14
   1e64e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1e650:	230c      	movs	r3, #12
   1e652:	18fb      	adds	r3, r7, r3
   1e654:	4a1d      	ldr	r2, [pc, #116]	; (1e6cc <nm_bus_init+0xc0>)
   1e656:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1e658:	230c      	movs	r3, #12
   1e65a:	18fb      	adds	r3, r7, r3
   1e65c:	4a1c      	ldr	r2, [pc, #112]	; (1e6d0 <nm_bus_init+0xc4>)
   1e65e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1e660:	230c      	movs	r3, #12
   1e662:	18fb      	adds	r3, r7, r3
   1e664:	2201      	movs	r2, #1
   1e666:	4252      	negs	r2, r2
   1e668:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1e66a:	230c      	movs	r3, #12
   1e66c:	18fb      	adds	r3, r7, r3
   1e66e:	4a19      	ldr	r2, [pc, #100]	; (1e6d4 <nm_bus_init+0xc8>)
   1e670:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1e672:	230c      	movs	r3, #12
   1e674:	18fb      	adds	r3, r7, r3
   1e676:	2200      	movs	r2, #0
   1e678:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1e67a:	230c      	movs	r3, #12
   1e67c:	18fb      	adds	r3, r7, r3
   1e67e:	4a16      	ldr	r2, [pc, #88]	; (1e6d8 <nm_bus_init+0xcc>)
   1e680:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1e682:	230c      	movs	r3, #12
   1e684:	18fa      	adds	r2, r7, r3
   1e686:	4915      	ldr	r1, [pc, #84]	; (1e6dc <nm_bus_init+0xd0>)
   1e688:	4b15      	ldr	r3, [pc, #84]	; (1e6e0 <nm_bus_init+0xd4>)
   1e68a:	0018      	movs	r0, r3
   1e68c:	4b15      	ldr	r3, [pc, #84]	; (1e6e4 <nm_bus_init+0xd8>)
   1e68e:	4798      	blx	r3
   1e690:	1e03      	subs	r3, r0, #0
   1e692:	d002      	beq.n	1e69a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1e694:	2306      	movs	r3, #6
   1e696:	425b      	negs	r3, r3
   1e698:	e00c      	b.n	1e6b4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1e69a:	4b11      	ldr	r3, [pc, #68]	; (1e6e0 <nm_bus_init+0xd4>)
   1e69c:	0018      	movs	r0, r3
   1e69e:	4b12      	ldr	r3, [pc, #72]	; (1e6e8 <nm_bus_init+0xdc>)
   1e6a0:	4798      	blx	r3

	nm_bsp_reset();
   1e6a2:	4b12      	ldr	r3, [pc, #72]	; (1e6ec <nm_bus_init+0xe0>)
   1e6a4:	4798      	blx	r3
	nm_bsp_sleep(1);
   1e6a6:	2001      	movs	r0, #1
   1e6a8:	4b11      	ldr	r3, [pc, #68]	; (1e6f0 <nm_bus_init+0xe4>)
   1e6aa:	4798      	blx	r3
#endif
	return result;
   1e6ac:	2347      	movs	r3, #71	; 0x47
   1e6ae:	18fb      	adds	r3, r7, r3
   1e6b0:	781b      	ldrb	r3, [r3, #0]
   1e6b2:	b25b      	sxtb	r3, r3
}
   1e6b4:	0018      	movs	r0, r3
   1e6b6:	46bd      	mov	sp, r7
   1e6b8:	b012      	add	sp, #72	; 0x48
   1e6ba:	bd80      	pop	{r7, pc}
   1e6bc:	0001e219 	.word	0x0001e219
   1e6c0:	20005404 	.word	0x20005404
   1e6c4:	0001e23d 	.word	0x0001e23d
   1e6c8:	0001e195 	.word	0x0001e195
   1e6cc:	000c0002 	.word	0x000c0002
   1e6d0:	000d0002 	.word	0x000d0002
   1e6d4:	000f0002 	.word	0x000f0002
   1e6d8:	00124f80 	.word	0x00124f80
   1e6dc:	42001000 	.word	0x42001000
   1e6e0:	20005408 	.word	0x20005408
   1e6e4:	00025a7d 	.word	0x00025a7d
   1e6e8:	0001e2a1 	.word	0x0001e2a1
   1e6ec:	0001df11 	.word	0x0001df11
   1e6f0:	0001df51 	.word	0x0001df51

0001e6f4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1e6f4:	b590      	push	{r4, r7, lr}
   1e6f6:	b085      	sub	sp, #20
   1e6f8:	af00      	add	r7, sp, #0
   1e6fa:	0002      	movs	r2, r0
   1e6fc:	6039      	str	r1, [r7, #0]
   1e6fe:	1dfb      	adds	r3, r7, #7
   1e700:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1e702:	230f      	movs	r3, #15
   1e704:	18fb      	adds	r3, r7, r3
   1e706:	2200      	movs	r2, #0
   1e708:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1e70a:	1dfb      	adds	r3, r7, #7
   1e70c:	781b      	ldrb	r3, [r3, #0]
   1e70e:	2b03      	cmp	r3, #3
   1e710:	d10f      	bne.n	1e732 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1e712:	683b      	ldr	r3, [r7, #0]
   1e714:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1e716:	68bb      	ldr	r3, [r7, #8]
   1e718:	6818      	ldr	r0, [r3, #0]
   1e71a:	68bb      	ldr	r3, [r7, #8]
   1e71c:	6859      	ldr	r1, [r3, #4]
   1e71e:	68bb      	ldr	r3, [r7, #8]
   1e720:	891b      	ldrh	r3, [r3, #8]
   1e722:	220f      	movs	r2, #15
   1e724:	18bc      	adds	r4, r7, r2
   1e726:	001a      	movs	r2, r3
   1e728:	4b10      	ldr	r3, [pc, #64]	; (1e76c <nm_bus_ioctl+0x78>)
   1e72a:	4798      	blx	r3
   1e72c:	0003      	movs	r3, r0
   1e72e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1e730:	e013      	b.n	1e75a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1e732:	230f      	movs	r3, #15
   1e734:	18fb      	adds	r3, r7, r3
   1e736:	22ff      	movs	r2, #255	; 0xff
   1e738:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1e73a:	2383      	movs	r3, #131	; 0x83
   1e73c:	005a      	lsls	r2, r3, #1
   1e73e:	490c      	ldr	r1, [pc, #48]	; (1e770 <nm_bus_ioctl+0x7c>)
   1e740:	4b0c      	ldr	r3, [pc, #48]	; (1e774 <nm_bus_ioctl+0x80>)
   1e742:	0018      	movs	r0, r3
   1e744:	4b0c      	ldr	r3, [pc, #48]	; (1e778 <nm_bus_ioctl+0x84>)
   1e746:	4798      	blx	r3
   1e748:	4b0c      	ldr	r3, [pc, #48]	; (1e77c <nm_bus_ioctl+0x88>)
   1e74a:	0018      	movs	r0, r3
   1e74c:	4b0a      	ldr	r3, [pc, #40]	; (1e778 <nm_bus_ioctl+0x84>)
   1e74e:	4798      	blx	r3
   1e750:	4b0b      	ldr	r3, [pc, #44]	; (1e780 <nm_bus_ioctl+0x8c>)
   1e752:	0018      	movs	r0, r3
   1e754:	4b08      	ldr	r3, [pc, #32]	; (1e778 <nm_bus_ioctl+0x84>)
   1e756:	4798      	blx	r3
			break;
   1e758:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1e75a:	230f      	movs	r3, #15
   1e75c:	18fb      	adds	r3, r7, r3
   1e75e:	781b      	ldrb	r3, [r3, #0]
   1e760:	b25b      	sxtb	r3, r3
}
   1e762:	0018      	movs	r0, r3
   1e764:	46bd      	mov	sp, r7
   1e766:	b005      	add	sp, #20
   1e768:	bd90      	pop	{r4, r7, pc}
   1e76a:	46c0      	nop			; (mov r8, r8)
   1e76c:	0001e495 	.word	0x0001e495
   1e770:	00035828 	.word	0x00035828
   1e774:	000357fc 	.word	0x000357fc
   1e778:	0001bafd 	.word	0x0001bafd
   1e77c:	00035810 	.word	0x00035810
   1e780:	00035824 	.word	0x00035824

0001e784 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1e784:	b580      	push	{r7, lr}
   1e786:	b082      	sub	sp, #8
   1e788:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1e78a:	1dfb      	adds	r3, r7, #7
   1e78c:	2200      	movs	r2, #0
   1e78e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1e790:	1d3b      	adds	r3, r7, #4
   1e792:	0018      	movs	r0, r3
   1e794:	4b13      	ldr	r3, [pc, #76]	; (1e7e4 <nm_bus_deinit+0x60>)
   1e796:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1e798:	1d3b      	adds	r3, r7, #4
   1e79a:	2200      	movs	r2, #0
   1e79c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1e79e:	1d3b      	adds	r3, r7, #4
   1e7a0:	2200      	movs	r2, #0
   1e7a2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1e7a4:	4b10      	ldr	r3, [pc, #64]	; (1e7e8 <nm_bus_deinit+0x64>)
   1e7a6:	0018      	movs	r0, r3
   1e7a8:	4b10      	ldr	r3, [pc, #64]	; (1e7ec <nm_bus_deinit+0x68>)
   1e7aa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1e7ac:	1d3b      	adds	r3, r7, #4
   1e7ae:	0019      	movs	r1, r3
   1e7b0:	200c      	movs	r0, #12
   1e7b2:	4b0f      	ldr	r3, [pc, #60]	; (1e7f0 <nm_bus_deinit+0x6c>)
   1e7b4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1e7b6:	1d3b      	adds	r3, r7, #4
   1e7b8:	0019      	movs	r1, r3
   1e7ba:	200f      	movs	r0, #15
   1e7bc:	4b0c      	ldr	r3, [pc, #48]	; (1e7f0 <nm_bus_deinit+0x6c>)
   1e7be:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1e7c0:	1d3b      	adds	r3, r7, #4
   1e7c2:	0019      	movs	r1, r3
   1e7c4:	200d      	movs	r0, #13
   1e7c6:	4b0a      	ldr	r3, [pc, #40]	; (1e7f0 <nm_bus_deinit+0x6c>)
   1e7c8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1e7ca:	1d3b      	adds	r3, r7, #4
   1e7cc:	0019      	movs	r1, r3
   1e7ce:	200e      	movs	r0, #14
   1e7d0:	4b07      	ldr	r3, [pc, #28]	; (1e7f0 <nm_bus_deinit+0x6c>)
   1e7d2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1e7d4:	1dfb      	adds	r3, r7, #7
   1e7d6:	781b      	ldrb	r3, [r3, #0]
   1e7d8:	b25b      	sxtb	r3, r3
}
   1e7da:	0018      	movs	r0, r3
   1e7dc:	46bd      	mov	sp, r7
   1e7de:	b002      	add	sp, #8
   1e7e0:	bd80      	pop	{r7, pc}
   1e7e2:	46c0      	nop			; (mov r8, r8)
   1e7e4:	0001e0fd 	.word	0x0001e0fd
   1e7e8:	20005408 	.word	0x20005408
   1e7ec:	0001e2f1 	.word	0x0001e2f1
   1e7f0:	000245fd 	.word	0x000245fd

0001e7f4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1e7f4:	b580      	push	{r7, lr}
   1e7f6:	b084      	sub	sp, #16
   1e7f8:	af00      	add	r7, sp, #0
   1e7fa:	60f8      	str	r0, [r7, #12]
   1e7fc:	60b9      	str	r1, [r7, #8]
   1e7fe:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1e800:	687b      	ldr	r3, [r7, #4]
   1e802:	2b00      	cmp	r3, #0
   1e804:	d010      	beq.n	1e828 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1e806:	68bb      	ldr	r3, [r7, #8]
   1e808:	781a      	ldrb	r2, [r3, #0]
   1e80a:	68fb      	ldr	r3, [r7, #12]
   1e80c:	701a      	strb	r2, [r3, #0]
		pDst++;
   1e80e:	68fb      	ldr	r3, [r7, #12]
   1e810:	3301      	adds	r3, #1
   1e812:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1e814:	68bb      	ldr	r3, [r7, #8]
   1e816:	3301      	adds	r3, #1
   1e818:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1e81a:	687b      	ldr	r3, [r7, #4]
   1e81c:	3b01      	subs	r3, #1
   1e81e:	607b      	str	r3, [r7, #4]
   1e820:	687b      	ldr	r3, [r7, #4]
   1e822:	2b00      	cmp	r3, #0
   1e824:	d1ef      	bne.n	1e806 <m2m_memcpy+0x12>
   1e826:	e000      	b.n	1e82a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1e828:	46c0      	nop			; (mov r8, r8)
}
   1e82a:	46bd      	mov	sp, r7
   1e82c:	b004      	add	sp, #16
   1e82e:	bd80      	pop	{r7, pc}

0001e830 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1e830:	b580      	push	{r7, lr}
   1e832:	b084      	sub	sp, #16
   1e834:	af00      	add	r7, sp, #0
   1e836:	60f8      	str	r0, [r7, #12]
   1e838:	607a      	str	r2, [r7, #4]
   1e83a:	230b      	movs	r3, #11
   1e83c:	18fb      	adds	r3, r7, r3
   1e83e:	1c0a      	adds	r2, r1, #0
   1e840:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1e842:	687b      	ldr	r3, [r7, #4]
   1e844:	2b00      	cmp	r3, #0
   1e846:	d00e      	beq.n	1e866 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1e848:	68fb      	ldr	r3, [r7, #12]
   1e84a:	220b      	movs	r2, #11
   1e84c:	18ba      	adds	r2, r7, r2
   1e84e:	7812      	ldrb	r2, [r2, #0]
   1e850:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1e852:	68fb      	ldr	r3, [r7, #12]
   1e854:	3301      	adds	r3, #1
   1e856:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1e858:	687b      	ldr	r3, [r7, #4]
   1e85a:	3b01      	subs	r3, #1
   1e85c:	607b      	str	r3, [r7, #4]
   1e85e:	687b      	ldr	r3, [r7, #4]
   1e860:	2b00      	cmp	r3, #0
   1e862:	d1f1      	bne.n	1e848 <m2m_memset+0x18>
   1e864:	e000      	b.n	1e868 <m2m_memset+0x38>
	if(sz == 0) return;
   1e866:	46c0      	nop			; (mov r8, r8)
}
   1e868:	46bd      	mov	sp, r7
   1e86a:	b004      	add	sp, #16
   1e86c:	bd80      	pop	{r7, pc}

0001e86e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1e86e:	b580      	push	{r7, lr}
   1e870:	b084      	sub	sp, #16
   1e872:	af00      	add	r7, sp, #0
   1e874:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1e876:	230e      	movs	r3, #14
   1e878:	18fb      	adds	r3, r7, r3
   1e87a:	2200      	movs	r2, #0
   1e87c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1e87e:	e009      	b.n	1e894 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1e880:	230e      	movs	r3, #14
   1e882:	18fb      	adds	r3, r7, r3
   1e884:	881a      	ldrh	r2, [r3, #0]
   1e886:	230e      	movs	r3, #14
   1e888:	18fb      	adds	r3, r7, r3
   1e88a:	3201      	adds	r2, #1
   1e88c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1e88e:	687b      	ldr	r3, [r7, #4]
   1e890:	3301      	adds	r3, #1
   1e892:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1e894:	687b      	ldr	r3, [r7, #4]
   1e896:	781b      	ldrb	r3, [r3, #0]
   1e898:	2b00      	cmp	r3, #0
   1e89a:	d1f1      	bne.n	1e880 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1e89c:	230e      	movs	r3, #14
   1e89e:	18fb      	adds	r3, r7, r3
   1e8a0:	881b      	ldrh	r3, [r3, #0]
}
   1e8a2:	0018      	movs	r0, r3
   1e8a4:	46bd      	mov	sp, r7
   1e8a6:	b004      	add	sp, #16
   1e8a8:	bd80      	pop	{r7, pc}
	...

0001e8ac <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1e8ac:	b580      	push	{r7, lr}
   1e8ae:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1e8b0:	4b04      	ldr	r3, [pc, #16]	; (1e8c4 <isr+0x18>)
   1e8b2:	78db      	ldrb	r3, [r3, #3]
   1e8b4:	b2db      	uxtb	r3, r3
   1e8b6:	3301      	adds	r3, #1
   1e8b8:	b2da      	uxtb	r2, r3
   1e8ba:	4b02      	ldr	r3, [pc, #8]	; (1e8c4 <isr+0x18>)
   1e8bc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1e8be:	46c0      	nop			; (mov r8, r8)
   1e8c0:	46bd      	mov	sp, r7
   1e8c2:	bd80      	pop	{r7, pc}
   1e8c4:	20005444 	.word	0x20005444

0001e8c8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1e8c8:	b590      	push	{r4, r7, lr}
   1e8ca:	b083      	sub	sp, #12
   1e8cc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1e8ce:	1dfb      	adds	r3, r7, #7
   1e8d0:	2200      	movs	r2, #0
   1e8d2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1e8d4:	4b14      	ldr	r3, [pc, #80]	; (1e928 <hif_set_rx_done+0x60>)
   1e8d6:	2200      	movs	r2, #0
   1e8d8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1e8da:	2001      	movs	r0, #1
   1e8dc:	4b13      	ldr	r3, [pc, #76]	; (1e92c <hif_set_rx_done+0x64>)
   1e8de:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1e8e0:	1dfc      	adds	r4, r7, #7
   1e8e2:	003b      	movs	r3, r7
   1e8e4:	4a12      	ldr	r2, [pc, #72]	; (1e930 <hif_set_rx_done+0x68>)
   1e8e6:	0019      	movs	r1, r3
   1e8e8:	0010      	movs	r0, r2
   1e8ea:	4b12      	ldr	r3, [pc, #72]	; (1e934 <hif_set_rx_done+0x6c>)
   1e8ec:	4798      	blx	r3
   1e8ee:	0003      	movs	r3, r0
   1e8f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1e8f2:	1dfb      	adds	r3, r7, #7
   1e8f4:	781b      	ldrb	r3, [r3, #0]
   1e8f6:	b25b      	sxtb	r3, r3
   1e8f8:	2b00      	cmp	r3, #0
   1e8fa:	d10d      	bne.n	1e918 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1e8fc:	683b      	ldr	r3, [r7, #0]
   1e8fe:	2202      	movs	r2, #2
   1e900:	4313      	orrs	r3, r2
   1e902:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1e904:	683b      	ldr	r3, [r7, #0]
   1e906:	1dfc      	adds	r4, r7, #7
   1e908:	4a09      	ldr	r2, [pc, #36]	; (1e930 <hif_set_rx_done+0x68>)
   1e90a:	0019      	movs	r1, r3
   1e90c:	0010      	movs	r0, r2
   1e90e:	4b0a      	ldr	r3, [pc, #40]	; (1e938 <hif_set_rx_done+0x70>)
   1e910:	4798      	blx	r3
   1e912:	0003      	movs	r3, r0
   1e914:	7023      	strb	r3, [r4, #0]
   1e916:	e000      	b.n	1e91a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1e918:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1e91a:	1dfb      	adds	r3, r7, #7
   1e91c:	781b      	ldrb	r3, [r3, #0]
   1e91e:	b25b      	sxtb	r3, r3

}
   1e920:	0018      	movs	r0, r3
   1e922:	46bd      	mov	sp, r7
   1e924:	b003      	add	sp, #12
   1e926:	bd90      	pop	{r4, r7, pc}
   1e928:	20005444 	.word	0x20005444
   1e92c:	0001dfe5 	.word	0x0001dfe5
   1e930:	00001070 	.word	0x00001070
   1e934:	000208c1 	.word	0x000208c1
   1e938:	000208e5 	.word	0x000208e5

0001e93c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1e93c:	b580      	push	{r7, lr}
   1e93e:	b082      	sub	sp, #8
   1e940:	af00      	add	r7, sp, #0
   1e942:	603a      	str	r2, [r7, #0]
   1e944:	1dfb      	adds	r3, r7, #7
   1e946:	1c02      	adds	r2, r0, #0
   1e948:	701a      	strb	r2, [r3, #0]
   1e94a:	1d3b      	adds	r3, r7, #4
   1e94c:	1c0a      	adds	r2, r1, #0
   1e94e:	801a      	strh	r2, [r3, #0]


}
   1e950:	46c0      	nop			; (mov r8, r8)
   1e952:	46bd      	mov	sp, r7
   1e954:	b002      	add	sp, #8
   1e956:	bd80      	pop	{r7, pc}

0001e958 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1e958:	b590      	push	{r4, r7, lr}
   1e95a:	b083      	sub	sp, #12
   1e95c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1e95e:	1dfb      	adds	r3, r7, #7
   1e960:	2200      	movs	r2, #0
   1e962:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1e964:	4b16      	ldr	r3, [pc, #88]	; (1e9c0 <hif_chip_wake+0x68>)
   1e966:	789b      	ldrb	r3, [r3, #2]
   1e968:	b2db      	uxtb	r3, r3
   1e96a:	2b00      	cmp	r3, #0
   1e96c:	d003      	beq.n	1e976 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1e96e:	1dfb      	adds	r3, r7, #7
   1e970:	781b      	ldrb	r3, [r3, #0]
   1e972:	b25b      	sxtb	r3, r3
   1e974:	e01f      	b.n	1e9b6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1e976:	4b12      	ldr	r3, [pc, #72]	; (1e9c0 <hif_chip_wake+0x68>)
   1e978:	785b      	ldrb	r3, [r3, #1]
   1e97a:	b2db      	uxtb	r3, r3
   1e97c:	2b00      	cmp	r3, #0
   1e97e:	d10e      	bne.n	1e99e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1e980:	4b0f      	ldr	r3, [pc, #60]	; (1e9c0 <hif_chip_wake+0x68>)
   1e982:	781b      	ldrb	r3, [r3, #0]
   1e984:	b2db      	uxtb	r3, r3
   1e986:	2b00      	cmp	r3, #0
   1e988:	d009      	beq.n	1e99e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1e98a:	1dfc      	adds	r4, r7, #7
   1e98c:	4b0d      	ldr	r3, [pc, #52]	; (1e9c4 <hif_chip_wake+0x6c>)
   1e98e:	4798      	blx	r3
   1e990:	0003      	movs	r3, r0
   1e992:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1e994:	1dfb      	adds	r3, r7, #7
   1e996:	781b      	ldrb	r3, [r3, #0]
   1e998:	b25b      	sxtb	r3, r3
   1e99a:	2b00      	cmp	r3, #0
   1e99c:	d107      	bne.n	1e9ae <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1e99e:	4b08      	ldr	r3, [pc, #32]	; (1e9c0 <hif_chip_wake+0x68>)
   1e9a0:	785b      	ldrb	r3, [r3, #1]
   1e9a2:	b2db      	uxtb	r3, r3
   1e9a4:	3301      	adds	r3, #1
   1e9a6:	b2da      	uxtb	r2, r3
   1e9a8:	4b05      	ldr	r3, [pc, #20]	; (1e9c0 <hif_chip_wake+0x68>)
   1e9aa:	705a      	strb	r2, [r3, #1]
   1e9ac:	e000      	b.n	1e9b0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1e9ae:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1e9b0:	1dfb      	adds	r3, r7, #7
   1e9b2:	781b      	ldrb	r3, [r3, #0]
   1e9b4:	b25b      	sxtb	r3, r3
}
   1e9b6:	0018      	movs	r0, r3
   1e9b8:	46bd      	mov	sp, r7
   1e9ba:	b003      	add	sp, #12
   1e9bc:	bd90      	pop	{r4, r7, pc}
   1e9be:	46c0      	nop			; (mov r8, r8)
   1e9c0:	20005444 	.word	0x20005444
   1e9c4:	00020391 	.word	0x00020391

0001e9c8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1e9c8:	b580      	push	{r7, lr}
   1e9ca:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1e9cc:	4b07      	ldr	r3, [pc, #28]	; (1e9ec <hif_chip_sleep_sc+0x24>)
   1e9ce:	785b      	ldrb	r3, [r3, #1]
   1e9d0:	b2db      	uxtb	r3, r3
   1e9d2:	2b00      	cmp	r3, #0
   1e9d4:	d006      	beq.n	1e9e4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1e9d6:	4b05      	ldr	r3, [pc, #20]	; (1e9ec <hif_chip_sleep_sc+0x24>)
   1e9d8:	785b      	ldrb	r3, [r3, #1]
   1e9da:	b2db      	uxtb	r3, r3
   1e9dc:	3b01      	subs	r3, #1
   1e9de:	b2da      	uxtb	r2, r3
   1e9e0:	4b02      	ldr	r3, [pc, #8]	; (1e9ec <hif_chip_sleep_sc+0x24>)
   1e9e2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1e9e4:	2300      	movs	r3, #0
}
   1e9e6:	0018      	movs	r0, r3
   1e9e8:	46bd      	mov	sp, r7
   1e9ea:	bd80      	pop	{r7, pc}
   1e9ec:	20005444 	.word	0x20005444

0001e9f0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1e9f0:	b590      	push	{r4, r7, lr}
   1e9f2:	b083      	sub	sp, #12
   1e9f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1e9f6:	1dfb      	adds	r3, r7, #7
   1e9f8:	2200      	movs	r2, #0
   1e9fa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1e9fc:	4b10      	ldr	r3, [pc, #64]	; (1ea40 <hif_chip_sleep+0x50>)
   1e9fe:	785b      	ldrb	r3, [r3, #1]
   1ea00:	b2db      	uxtb	r3, r3
   1ea02:	2b00      	cmp	r3, #0
   1ea04:	d006      	beq.n	1ea14 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1ea06:	4b0e      	ldr	r3, [pc, #56]	; (1ea40 <hif_chip_sleep+0x50>)
   1ea08:	785b      	ldrb	r3, [r3, #1]
   1ea0a:	b2db      	uxtb	r3, r3
   1ea0c:	3b01      	subs	r3, #1
   1ea0e:	b2da      	uxtb	r2, r3
   1ea10:	4b0b      	ldr	r3, [pc, #44]	; (1ea40 <hif_chip_sleep+0x50>)
   1ea12:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1ea14:	4b0a      	ldr	r3, [pc, #40]	; (1ea40 <hif_chip_sleep+0x50>)
   1ea16:	785b      	ldrb	r3, [r3, #1]
   1ea18:	b2db      	uxtb	r3, r3
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d109      	bne.n	1ea32 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1ea1e:	4b08      	ldr	r3, [pc, #32]	; (1ea40 <hif_chip_sleep+0x50>)
   1ea20:	781b      	ldrb	r3, [r3, #0]
   1ea22:	b2db      	uxtb	r3, r3
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d004      	beq.n	1ea32 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1ea28:	1dfc      	adds	r4, r7, #7
   1ea2a:	4b06      	ldr	r3, [pc, #24]	; (1ea44 <hif_chip_sleep+0x54>)
   1ea2c:	4798      	blx	r3
   1ea2e:	0003      	movs	r3, r0
   1ea30:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1ea32:	1dfb      	adds	r3, r7, #7
   1ea34:	781b      	ldrb	r3, [r3, #0]
   1ea36:	b25b      	sxtb	r3, r3
}
   1ea38:	0018      	movs	r0, r3
   1ea3a:	46bd      	mov	sp, r7
   1ea3c:	b003      	add	sp, #12
   1ea3e:	bd90      	pop	{r4, r7, pc}
   1ea40:	20005444 	.word	0x20005444
   1ea44:	000202b9 	.word	0x000202b9

0001ea48 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1ea48:	b580      	push	{r7, lr}
   1ea4a:	b082      	sub	sp, #8
   1ea4c:	af00      	add	r7, sp, #0
   1ea4e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ea50:	4b09      	ldr	r3, [pc, #36]	; (1ea78 <hif_init+0x30>)
   1ea52:	222c      	movs	r2, #44	; 0x2c
   1ea54:	2100      	movs	r1, #0
   1ea56:	0018      	movs	r0, r3
   1ea58:	4b08      	ldr	r3, [pc, #32]	; (1ea7c <hif_init+0x34>)
   1ea5a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ea5c:	4b08      	ldr	r3, [pc, #32]	; (1ea80 <hif_init+0x38>)
   1ea5e:	0018      	movs	r0, r3
   1ea60:	4b08      	ldr	r3, [pc, #32]	; (1ea84 <hif_init+0x3c>)
   1ea62:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ea64:	4b08      	ldr	r3, [pc, #32]	; (1ea88 <hif_init+0x40>)
   1ea66:	0019      	movs	r1, r3
   1ea68:	2003      	movs	r0, #3
   1ea6a:	4b08      	ldr	r3, [pc, #32]	; (1ea8c <hif_init+0x44>)
   1ea6c:	4798      	blx	r3
	return M2M_SUCCESS;
   1ea6e:	2300      	movs	r3, #0
}
   1ea70:	0018      	movs	r0, r3
   1ea72:	46bd      	mov	sp, r7
   1ea74:	b002      	add	sp, #8
   1ea76:	bd80      	pop	{r7, pc}
   1ea78:	20005444 	.word	0x20005444
   1ea7c:	0001e831 	.word	0x0001e831
   1ea80:	0001e8ad 	.word	0x0001e8ad
   1ea84:	0001df6d 	.word	0x0001df6d
   1ea88:	0001e93d 	.word	0x0001e93d
   1ea8c:	0001f52d 	.word	0x0001f52d

0001ea90 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1ea90:	b590      	push	{r4, r7, lr}
   1ea92:	b089      	sub	sp, #36	; 0x24
   1ea94:	af00      	add	r7, sp, #0
   1ea96:	0004      	movs	r4, r0
   1ea98:	0008      	movs	r0, r1
   1ea9a:	603a      	str	r2, [r7, #0]
   1ea9c:	0019      	movs	r1, r3
   1ea9e:	1dfb      	adds	r3, r7, #7
   1eaa0:	1c22      	adds	r2, r4, #0
   1eaa2:	701a      	strb	r2, [r3, #0]
   1eaa4:	1dbb      	adds	r3, r7, #6
   1eaa6:	1c02      	adds	r2, r0, #0
   1eaa8:	701a      	strb	r2, [r3, #0]
   1eaaa:	1d3b      	adds	r3, r7, #4
   1eaac:	1c0a      	adds	r2, r1, #0
   1eaae:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1eab0:	231f      	movs	r3, #31
   1eab2:	18fb      	adds	r3, r7, r3
   1eab4:	22ff      	movs	r2, #255	; 0xff
   1eab6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1eab8:	1dbb      	adds	r3, r7, #6
   1eaba:	781b      	ldrb	r3, [r3, #0]
   1eabc:	227f      	movs	r2, #127	; 0x7f
   1eabe:	4013      	ands	r3, r2
   1eac0:	b2da      	uxtb	r2, r3
   1eac2:	2318      	movs	r3, #24
   1eac4:	18fb      	adds	r3, r7, r3
   1eac6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1eac8:	2318      	movs	r3, #24
   1eaca:	18fb      	adds	r3, r7, r3
   1eacc:	1dfa      	adds	r2, r7, #7
   1eace:	7812      	ldrb	r2, [r2, #0]
   1ead0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1ead2:	2318      	movs	r3, #24
   1ead4:	18fb      	adds	r3, r7, r3
   1ead6:	2208      	movs	r2, #8
   1ead8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eadc:	2b00      	cmp	r3, #0
   1eade:	d011      	beq.n	1eb04 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1eae0:	2318      	movs	r3, #24
   1eae2:	18fb      	adds	r3, r7, r3
   1eae4:	885b      	ldrh	r3, [r3, #2]
   1eae6:	b29a      	uxth	r2, r3
   1eae8:	2338      	movs	r3, #56	; 0x38
   1eaea:	18f9      	adds	r1, r7, r3
   1eaec:	2334      	movs	r3, #52	; 0x34
   1eaee:	18fb      	adds	r3, r7, r3
   1eaf0:	8809      	ldrh	r1, [r1, #0]
   1eaf2:	881b      	ldrh	r3, [r3, #0]
   1eaf4:	18cb      	adds	r3, r1, r3
   1eaf6:	b29b      	uxth	r3, r3
   1eaf8:	18d3      	adds	r3, r2, r3
   1eafa:	b29a      	uxth	r2, r3
   1eafc:	2318      	movs	r3, #24
   1eafe:	18fb      	adds	r3, r7, r3
   1eb00:	805a      	strh	r2, [r3, #2]
   1eb02:	e00a      	b.n	1eb1a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1eb04:	2318      	movs	r3, #24
   1eb06:	18fb      	adds	r3, r7, r3
   1eb08:	885b      	ldrh	r3, [r3, #2]
   1eb0a:	b29a      	uxth	r2, r3
   1eb0c:	1d3b      	adds	r3, r7, #4
   1eb0e:	881b      	ldrh	r3, [r3, #0]
   1eb10:	18d3      	adds	r3, r2, r3
   1eb12:	b29a      	uxth	r2, r3
   1eb14:	2318      	movs	r3, #24
   1eb16:	18fb      	adds	r3, r7, r3
   1eb18:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1eb1a:	231f      	movs	r3, #31
   1eb1c:	18fc      	adds	r4, r7, r3
   1eb1e:	4bb2      	ldr	r3, [pc, #712]	; (1ede8 <hif_send+0x358>)
   1eb20:	4798      	blx	r3
   1eb22:	0003      	movs	r3, r0
   1eb24:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1eb26:	231f      	movs	r3, #31
   1eb28:	18fb      	adds	r3, r7, r3
   1eb2a:	781b      	ldrb	r3, [r3, #0]
   1eb2c:	b25b      	sxtb	r3, r3
   1eb2e:	2b00      	cmp	r3, #0
   1eb30:	d000      	beq.n	1eb34 <hif_send+0xa4>
   1eb32:	e129      	b.n	1ed88 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1eb34:	2300      	movs	r3, #0
   1eb36:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1eb38:	230e      	movs	r3, #14
   1eb3a:	18fb      	adds	r3, r7, r3
   1eb3c:	2200      	movs	r2, #0
   1eb3e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1eb40:	2300      	movs	r3, #0
   1eb42:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1eb44:	1dfb      	adds	r3, r7, #7
   1eb46:	781a      	ldrb	r2, [r3, #0]
   1eb48:	697b      	ldr	r3, [r7, #20]
   1eb4a:	4313      	orrs	r3, r2
   1eb4c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1eb4e:	1dbb      	adds	r3, r7, #6
   1eb50:	781b      	ldrb	r3, [r3, #0]
   1eb52:	021a      	lsls	r2, r3, #8
   1eb54:	697b      	ldr	r3, [r7, #20]
   1eb56:	4313      	orrs	r3, r2
   1eb58:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1eb5a:	2318      	movs	r3, #24
   1eb5c:	18fb      	adds	r3, r7, r3
   1eb5e:	885b      	ldrh	r3, [r3, #2]
   1eb60:	b29b      	uxth	r3, r3
   1eb62:	041a      	lsls	r2, r3, #16
   1eb64:	697b      	ldr	r3, [r7, #20]
   1eb66:	4313      	orrs	r3, r2
   1eb68:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1eb6a:	697b      	ldr	r3, [r7, #20]
   1eb6c:	221f      	movs	r2, #31
   1eb6e:	18bc      	adds	r4, r7, r2
   1eb70:	4a9e      	ldr	r2, [pc, #632]	; (1edec <hif_send+0x35c>)
   1eb72:	0019      	movs	r1, r3
   1eb74:	0010      	movs	r0, r2
   1eb76:	4b9e      	ldr	r3, [pc, #632]	; (1edf0 <hif_send+0x360>)
   1eb78:	4798      	blx	r3
   1eb7a:	0003      	movs	r3, r0
   1eb7c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1eb7e:	231f      	movs	r3, #31
   1eb80:	18fb      	adds	r3, r7, r3
   1eb82:	781b      	ldrb	r3, [r3, #0]
   1eb84:	b25b      	sxtb	r3, r3
   1eb86:	2b00      	cmp	r3, #0
   1eb88:	d000      	beq.n	1eb8c <hif_send+0xfc>
   1eb8a:	e119      	b.n	1edc0 <hif_send+0x330>

		reg = 0UL;
   1eb8c:	2300      	movs	r3, #0
   1eb8e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1eb90:	697b      	ldr	r3, [r7, #20]
   1eb92:	2202      	movs	r2, #2
   1eb94:	4313      	orrs	r3, r2
   1eb96:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1eb98:	697b      	ldr	r3, [r7, #20]
   1eb9a:	221f      	movs	r2, #31
   1eb9c:	18bc      	adds	r4, r7, r2
   1eb9e:	4a95      	ldr	r2, [pc, #596]	; (1edf4 <hif_send+0x364>)
   1eba0:	0019      	movs	r1, r3
   1eba2:	0010      	movs	r0, r2
   1eba4:	4b92      	ldr	r3, [pc, #584]	; (1edf0 <hif_send+0x360>)
   1eba6:	4798      	blx	r3
   1eba8:	0003      	movs	r3, r0
   1ebaa:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1ebac:	231f      	movs	r3, #31
   1ebae:	18fb      	adds	r3, r7, r3
   1ebb0:	781b      	ldrb	r3, [r3, #0]
   1ebb2:	b25b      	sxtb	r3, r3
   1ebb4:	2b00      	cmp	r3, #0
   1ebb6:	d000      	beq.n	1ebba <hif_send+0x12a>
   1ebb8:	e104      	b.n	1edc4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1ebba:	2300      	movs	r3, #0
   1ebbc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1ebbe:	230e      	movs	r3, #14
   1ebc0:	18fb      	adds	r3, r7, r3
   1ebc2:	2200      	movs	r2, #0
   1ebc4:	801a      	strh	r2, [r3, #0]
   1ebc6:	e050      	b.n	1ec6a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1ebc8:	231f      	movs	r3, #31
   1ebca:	18fc      	adds	r4, r7, r3
   1ebcc:	2314      	movs	r3, #20
   1ebce:	18fb      	adds	r3, r7, r3
   1ebd0:	4a88      	ldr	r2, [pc, #544]	; (1edf4 <hif_send+0x364>)
   1ebd2:	0019      	movs	r1, r3
   1ebd4:	0010      	movs	r0, r2
   1ebd6:	4b88      	ldr	r3, [pc, #544]	; (1edf8 <hif_send+0x368>)
   1ebd8:	4798      	blx	r3
   1ebda:	0003      	movs	r3, r0
   1ebdc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   1ebde:	231f      	movs	r3, #31
   1ebe0:	18fb      	adds	r3, r7, r3
   1ebe2:	781b      	ldrb	r3, [r3, #0]
   1ebe4:	b25b      	sxtb	r3, r3
   1ebe6:	2b00      	cmp	r3, #0
   1ebe8:	d147      	bne.n	1ec7a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1ebea:	230e      	movs	r3, #14
   1ebec:	18fb      	adds	r3, r7, r3
   1ebee:	881b      	ldrh	r3, [r3, #0]
   1ebf0:	b29a      	uxth	r2, r3
   1ebf2:	23f4      	movs	r3, #244	; 0xf4
   1ebf4:	33ff      	adds	r3, #255	; 0xff
   1ebf6:	429a      	cmp	r2, r3
   1ebf8:	d916      	bls.n	1ec28 <hif_send+0x198>
				if(cnt < 501) {
   1ebfa:	230e      	movs	r3, #14
   1ebfc:	18fb      	adds	r3, r7, r3
   1ebfe:	881b      	ldrh	r3, [r3, #0]
   1ec00:	b29a      	uxth	r2, r3
   1ec02:	23fa      	movs	r3, #250	; 0xfa
   1ec04:	005b      	lsls	r3, r3, #1
   1ec06:	429a      	cmp	r2, r3
   1ec08:	d80b      	bhi.n	1ec22 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   1ec0a:	4b7c      	ldr	r3, [pc, #496]	; (1edfc <hif_send+0x36c>)
   1ec0c:	0018      	movs	r0, r3
   1ec0e:	4b7c      	ldr	r3, [pc, #496]	; (1ee00 <hif_send+0x370>)
   1ec10:	4798      	blx	r3
   1ec12:	4b7c      	ldr	r3, [pc, #496]	; (1ee04 <hif_send+0x374>)
   1ec14:	0018      	movs	r0, r3
   1ec16:	4b7a      	ldr	r3, [pc, #488]	; (1ee00 <hif_send+0x370>)
   1ec18:	4798      	blx	r3
   1ec1a:	4b7b      	ldr	r3, [pc, #492]	; (1ee08 <hif_send+0x378>)
   1ec1c:	0018      	movs	r0, r3
   1ec1e:	4b78      	ldr	r3, [pc, #480]	; (1ee00 <hif_send+0x370>)
   1ec20:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   1ec22:	2001      	movs	r0, #1
   1ec24:	4b79      	ldr	r3, [pc, #484]	; (1ee0c <hif_send+0x37c>)
   1ec26:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   1ec28:	697b      	ldr	r3, [r7, #20]
   1ec2a:	2202      	movs	r2, #2
   1ec2c:	4013      	ands	r3, r2
   1ec2e:	d113      	bne.n	1ec58 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1ec30:	231f      	movs	r3, #31
   1ec32:	18fc      	adds	r4, r7, r3
   1ec34:	2310      	movs	r3, #16
   1ec36:	18fb      	adds	r3, r7, r3
   1ec38:	4a75      	ldr	r2, [pc, #468]	; (1ee10 <hif_send+0x380>)
   1ec3a:	0019      	movs	r1, r3
   1ec3c:	0010      	movs	r0, r2
   1ec3e:	4b6e      	ldr	r3, [pc, #440]	; (1edf8 <hif_send+0x368>)
   1ec40:	4798      	blx	r3
   1ec42:	0003      	movs	r3, r0
   1ec44:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   1ec46:	231f      	movs	r3, #31
   1ec48:	18fb      	adds	r3, r7, r3
   1ec4a:	781b      	ldrb	r3, [r3, #0]
   1ec4c:	b25b      	sxtb	r3, r3
   1ec4e:	2b00      	cmp	r3, #0
   1ec50:	d015      	beq.n	1ec7e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1ec52:	2300      	movs	r3, #0
   1ec54:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1ec56:	e0bc      	b.n	1edd2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1ec58:	230e      	movs	r3, #14
   1ec5a:	18fb      	adds	r3, r7, r3
   1ec5c:	881b      	ldrh	r3, [r3, #0]
   1ec5e:	b29b      	uxth	r3, r3
   1ec60:	3301      	adds	r3, #1
   1ec62:	b29a      	uxth	r2, r3
   1ec64:	230e      	movs	r3, #14
   1ec66:	18fb      	adds	r3, r7, r3
   1ec68:	801a      	strh	r2, [r3, #0]
   1ec6a:	230e      	movs	r3, #14
   1ec6c:	18fb      	adds	r3, r7, r3
   1ec6e:	881b      	ldrh	r3, [r3, #0]
   1ec70:	b29b      	uxth	r3, r3
   1ec72:	4a68      	ldr	r2, [pc, #416]	; (1ee14 <hif_send+0x384>)
   1ec74:	4293      	cmp	r3, r2
   1ec76:	d9a7      	bls.n	1ebc8 <hif_send+0x138>
   1ec78:	e002      	b.n	1ec80 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1ec7a:	46c0      	nop			; (mov r8, r8)
   1ec7c:	e000      	b.n	1ec80 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   1ec7e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   1ec80:	693b      	ldr	r3, [r7, #16]
   1ec82:	2b00      	cmp	r3, #0
   1ec84:	d100      	bne.n	1ec88 <hif_send+0x1f8>
   1ec86:	e074      	b.n	1ed72 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1ec88:	693b      	ldr	r3, [r7, #16]
   1ec8a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1ec8c:	2318      	movs	r3, #24
   1ec8e:	18fb      	adds	r3, r7, r3
   1ec90:	885b      	ldrh	r3, [r3, #2]
   1ec92:	b29a      	uxth	r2, r3
   1ec94:	2318      	movs	r3, #24
   1ec96:	18fb      	adds	r3, r7, r3
   1ec98:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1ec9a:	68bb      	ldr	r3, [r7, #8]
   1ec9c:	221f      	movs	r2, #31
   1ec9e:	18bc      	adds	r4, r7, r2
   1eca0:	2218      	movs	r2, #24
   1eca2:	18b9      	adds	r1, r7, r2
   1eca4:	2208      	movs	r2, #8
   1eca6:	0018      	movs	r0, r3
   1eca8:	4b5b      	ldr	r3, [pc, #364]	; (1ee18 <hif_send+0x388>)
   1ecaa:	4798      	blx	r3
   1ecac:	0003      	movs	r3, r0
   1ecae:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1ecb0:	231f      	movs	r3, #31
   1ecb2:	18fb      	adds	r3, r7, r3
   1ecb4:	781b      	ldrb	r3, [r3, #0]
   1ecb6:	b25b      	sxtb	r3, r3
   1ecb8:	2b00      	cmp	r3, #0
   1ecba:	d000      	beq.n	1ecbe <hif_send+0x22e>
   1ecbc:	e084      	b.n	1edc8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1ecbe:	68bb      	ldr	r3, [r7, #8]
   1ecc0:	3308      	adds	r3, #8
   1ecc2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   1ecc4:	683b      	ldr	r3, [r7, #0]
   1ecc6:	2b00      	cmp	r3, #0
   1ecc8:	d016      	beq.n	1ecf8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1ecca:	68b8      	ldr	r0, [r7, #8]
   1eccc:	1d3b      	adds	r3, r7, #4
   1ecce:	881a      	ldrh	r2, [r3, #0]
   1ecd0:	231f      	movs	r3, #31
   1ecd2:	18fc      	adds	r4, r7, r3
   1ecd4:	683b      	ldr	r3, [r7, #0]
   1ecd6:	0019      	movs	r1, r3
   1ecd8:	4b4f      	ldr	r3, [pc, #316]	; (1ee18 <hif_send+0x388>)
   1ecda:	4798      	blx	r3
   1ecdc:	0003      	movs	r3, r0
   1ecde:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1ece0:	231f      	movs	r3, #31
   1ece2:	18fb      	adds	r3, r7, r3
   1ece4:	781b      	ldrb	r3, [r3, #0]
   1ece6:	b25b      	sxtb	r3, r3
   1ece8:	2b00      	cmp	r3, #0
   1ecea:	d000      	beq.n	1ecee <hif_send+0x25e>
   1ecec:	e06e      	b.n	1edcc <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   1ecee:	1d3b      	adds	r3, r7, #4
   1ecf0:	881a      	ldrh	r2, [r3, #0]
   1ecf2:	68bb      	ldr	r3, [r7, #8]
   1ecf4:	18d3      	adds	r3, r2, r3
   1ecf6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   1ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ecfa:	2b00      	cmp	r3, #0
   1ecfc:	d021      	beq.n	1ed42 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1ecfe:	2338      	movs	r3, #56	; 0x38
   1ed00:	18fb      	adds	r3, r7, r3
   1ed02:	881a      	ldrh	r2, [r3, #0]
   1ed04:	1d3b      	adds	r3, r7, #4
   1ed06:	881b      	ldrh	r3, [r3, #0]
   1ed08:	1ad3      	subs	r3, r2, r3
   1ed0a:	001a      	movs	r2, r3
   1ed0c:	68bb      	ldr	r3, [r7, #8]
   1ed0e:	18d3      	adds	r3, r2, r3
   1ed10:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1ed12:	68b8      	ldr	r0, [r7, #8]
   1ed14:	2334      	movs	r3, #52	; 0x34
   1ed16:	18fb      	adds	r3, r7, r3
   1ed18:	881a      	ldrh	r2, [r3, #0]
   1ed1a:	231f      	movs	r3, #31
   1ed1c:	18fc      	adds	r4, r7, r3
   1ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ed20:	0019      	movs	r1, r3
   1ed22:	4b3d      	ldr	r3, [pc, #244]	; (1ee18 <hif_send+0x388>)
   1ed24:	4798      	blx	r3
   1ed26:	0003      	movs	r3, r0
   1ed28:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1ed2a:	231f      	movs	r3, #31
   1ed2c:	18fb      	adds	r3, r7, r3
   1ed2e:	781b      	ldrb	r3, [r3, #0]
   1ed30:	b25b      	sxtb	r3, r3
   1ed32:	2b00      	cmp	r3, #0
   1ed34:	d14c      	bne.n	1edd0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   1ed36:	2334      	movs	r3, #52	; 0x34
   1ed38:	18fb      	adds	r3, r7, r3
   1ed3a:	881a      	ldrh	r2, [r3, #0]
   1ed3c:	68bb      	ldr	r3, [r7, #8]
   1ed3e:	18d3      	adds	r3, r2, r3
   1ed40:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   1ed42:	693b      	ldr	r3, [r7, #16]
   1ed44:	009b      	lsls	r3, r3, #2
   1ed46:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   1ed48:	697b      	ldr	r3, [r7, #20]
   1ed4a:	2202      	movs	r2, #2
   1ed4c:	4313      	orrs	r3, r2
   1ed4e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1ed50:	697b      	ldr	r3, [r7, #20]
   1ed52:	221f      	movs	r2, #31
   1ed54:	18bc      	adds	r4, r7, r2
   1ed56:	4a31      	ldr	r2, [pc, #196]	; (1ee1c <hif_send+0x38c>)
   1ed58:	0019      	movs	r1, r3
   1ed5a:	0010      	movs	r0, r2
   1ed5c:	4b24      	ldr	r3, [pc, #144]	; (1edf0 <hif_send+0x360>)
   1ed5e:	4798      	blx	r3
   1ed60:	0003      	movs	r3, r0
   1ed62:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1ed64:	231f      	movs	r3, #31
   1ed66:	18fb      	adds	r3, r7, r3
   1ed68:	781b      	ldrb	r3, [r3, #0]
   1ed6a:	b25b      	sxtb	r3, r3
   1ed6c:	2b00      	cmp	r3, #0
   1ed6e:	d01c      	beq.n	1edaa <hif_send+0x31a>
   1ed70:	e02f      	b.n	1edd2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   1ed72:	231f      	movs	r3, #31
   1ed74:	18fc      	adds	r4, r7, r3
   1ed76:	4b2a      	ldr	r3, [pc, #168]	; (1ee20 <hif_send+0x390>)
   1ed78:	4798      	blx	r3
   1ed7a:	0003      	movs	r3, r0
   1ed7c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   1ed7e:	231f      	movs	r3, #31
   1ed80:	18fb      	adds	r3, r7, r3
   1ed82:	22fd      	movs	r2, #253	; 0xfd
   1ed84:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1ed86:	e026      	b.n	1edd6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1ed88:	2398      	movs	r3, #152	; 0x98
   1ed8a:	33ff      	adds	r3, #255	; 0xff
   1ed8c:	001a      	movs	r2, r3
   1ed8e:	4925      	ldr	r1, [pc, #148]	; (1ee24 <hif_send+0x394>)
   1ed90:	4b25      	ldr	r3, [pc, #148]	; (1ee28 <hif_send+0x398>)
   1ed92:	0018      	movs	r0, r3
   1ed94:	4b1a      	ldr	r3, [pc, #104]	; (1ee00 <hif_send+0x370>)
   1ed96:	4798      	blx	r3
   1ed98:	4b24      	ldr	r3, [pc, #144]	; (1ee2c <hif_send+0x39c>)
   1ed9a:	0018      	movs	r0, r3
   1ed9c:	4b18      	ldr	r3, [pc, #96]	; (1ee00 <hif_send+0x370>)
   1ed9e:	4798      	blx	r3
   1eda0:	4b19      	ldr	r3, [pc, #100]	; (1ee08 <hif_send+0x378>)
   1eda2:	0018      	movs	r0, r3
   1eda4:	4b16      	ldr	r3, [pc, #88]	; (1ee00 <hif_send+0x370>)
   1eda6:	4798      	blx	r3
		goto ERR2;
   1eda8:	e015      	b.n	1edd6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1edaa:	231f      	movs	r3, #31
   1edac:	18fc      	adds	r4, r7, r3
   1edae:	4b1c      	ldr	r3, [pc, #112]	; (1ee20 <hif_send+0x390>)
   1edb0:	4798      	blx	r3
   1edb2:	0003      	movs	r3, r0
   1edb4:	7023      	strb	r3, [r4, #0]
	return ret;
   1edb6:	231f      	movs	r3, #31
   1edb8:	18fb      	adds	r3, r7, r3
   1edba:	781b      	ldrb	r3, [r3, #0]
   1edbc:	b25b      	sxtb	r3, r3
   1edbe:	e00e      	b.n	1edde <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   1edc0:	46c0      	nop			; (mov r8, r8)
   1edc2:	e006      	b.n	1edd2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   1edc4:	46c0      	nop			; (mov r8, r8)
   1edc6:	e004      	b.n	1edd2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1edc8:	46c0      	nop			; (mov r8, r8)
   1edca:	e002      	b.n	1edd2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1edcc:	46c0      	nop			; (mov r8, r8)
   1edce:	e000      	b.n	1edd2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1edd0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1edd2:	4b17      	ldr	r3, [pc, #92]	; (1ee30 <hif_send+0x3a0>)
   1edd4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1edd6:	231f      	movs	r3, #31
   1edd8:	18fb      	adds	r3, r7, r3
   1edda:	781b      	ldrb	r3, [r3, #0]
   1eddc:	b25b      	sxtb	r3, r3
}
   1edde:	0018      	movs	r0, r3
   1ede0:	46bd      	mov	sp, r7
   1ede2:	b009      	add	sp, #36	; 0x24
   1ede4:	bd90      	pop	{r4, r7, pc}
   1ede6:	46c0      	nop			; (mov r8, r8)
   1ede8:	0001e959 	.word	0x0001e959
   1edec:	0000108c 	.word	0x0000108c
   1edf0:	000208e5 	.word	0x000208e5
   1edf4:	00001078 	.word	0x00001078
   1edf8:	000208c1 	.word	0x000208c1
   1edfc:	00035838 	.word	0x00035838
   1ee00:	0001bafd 	.word	0x0001bafd
   1ee04:	00035844 	.word	0x00035844
   1ee08:	00035858 	.word	0x00035858
   1ee0c:	0001df51 	.word	0x0001df51
   1ee10:	00150400 	.word	0x00150400
   1ee14:	000003e7 	.word	0x000003e7
   1ee18:	00020a2d 	.word	0x00020a2d
   1ee1c:	0000106c 	.word	0x0000106c
   1ee20:	0001e9f1 	.word	0x0001e9f1
   1ee24:	00035b60 	.word	0x00035b60
   1ee28:	0003585c 	.word	0x0003585c
   1ee2c:	00035870 	.word	0x00035870
   1ee30:	0001e9c9 	.word	0x0001e9c9

0001ee34 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   1ee34:	b590      	push	{r4, r7, lr}
   1ee36:	b087      	sub	sp, #28
   1ee38:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   1ee3a:	230f      	movs	r3, #15
   1ee3c:	18fb      	adds	r3, r7, r3
   1ee3e:	2200      	movs	r2, #0
   1ee40:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1ee42:	230f      	movs	r3, #15
   1ee44:	18fc      	adds	r4, r7, r3
   1ee46:	2308      	movs	r3, #8
   1ee48:	18fb      	adds	r3, r7, r3
   1ee4a:	4adc      	ldr	r2, [pc, #880]	; (1f1bc <hif_isr+0x388>)
   1ee4c:	0019      	movs	r1, r3
   1ee4e:	0010      	movs	r0, r2
   1ee50:	4bdb      	ldr	r3, [pc, #876]	; (1f1c0 <hif_isr+0x38c>)
   1ee52:	4798      	blx	r3
   1ee54:	0003      	movs	r3, r0
   1ee56:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1ee58:	230f      	movs	r3, #15
   1ee5a:	18fb      	adds	r3, r7, r3
   1ee5c:	781b      	ldrb	r3, [r3, #0]
   1ee5e:	b25b      	sxtb	r3, r3
   1ee60:	2b00      	cmp	r3, #0
   1ee62:	d000      	beq.n	1ee66 <hif_isr+0x32>
   1ee64:	e21e      	b.n	1f2a4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1ee66:	68bb      	ldr	r3, [r7, #8]
   1ee68:	2201      	movs	r2, #1
   1ee6a:	4013      	ands	r3, r2
   1ee6c:	d100      	bne.n	1ee70 <hif_isr+0x3c>
   1ee6e:	e204      	b.n	1f27a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   1ee70:	2000      	movs	r0, #0
   1ee72:	4bd4      	ldr	r3, [pc, #848]	; (1f1c4 <hif_isr+0x390>)
   1ee74:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1ee76:	68bb      	ldr	r3, [r7, #8]
   1ee78:	2201      	movs	r2, #1
   1ee7a:	4393      	bics	r3, r2
   1ee7c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1ee7e:	68bb      	ldr	r3, [r7, #8]
   1ee80:	220f      	movs	r2, #15
   1ee82:	18bc      	adds	r4, r7, r2
   1ee84:	4acd      	ldr	r2, [pc, #820]	; (1f1bc <hif_isr+0x388>)
   1ee86:	0019      	movs	r1, r3
   1ee88:	0010      	movs	r0, r2
   1ee8a:	4bcf      	ldr	r3, [pc, #828]	; (1f1c8 <hif_isr+0x394>)
   1ee8c:	4798      	blx	r3
   1ee8e:	0003      	movs	r3, r0
   1ee90:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1ee92:	230f      	movs	r3, #15
   1ee94:	18fb      	adds	r3, r7, r3
   1ee96:	781b      	ldrb	r3, [r3, #0]
   1ee98:	b25b      	sxtb	r3, r3
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d000      	beq.n	1eea0 <hif_isr+0x6c>
   1ee9e:	e210      	b.n	1f2c2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   1eea0:	4bca      	ldr	r3, [pc, #808]	; (1f1cc <hif_isr+0x398>)
   1eea2:	2201      	movs	r2, #1
   1eea4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1eea6:	68bb      	ldr	r3, [r7, #8]
   1eea8:	089b      	lsrs	r3, r3, #2
   1eeaa:	b29a      	uxth	r2, r3
   1eeac:	230c      	movs	r3, #12
   1eeae:	18fb      	adds	r3, r7, r3
   1eeb0:	0512      	lsls	r2, r2, #20
   1eeb2:	0d12      	lsrs	r2, r2, #20
   1eeb4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1eeb6:	230c      	movs	r3, #12
   1eeb8:	18fb      	adds	r3, r7, r3
   1eeba:	881b      	ldrh	r3, [r3, #0]
   1eebc:	2b00      	cmp	r3, #0
   1eebe:	d100      	bne.n	1eec2 <hif_isr+0x8e>
   1eec0:	e1c8      	b.n	1f254 <hif_isr+0x420>
				uint32 address = 0;
   1eec2:	2300      	movs	r3, #0
   1eec4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1eec6:	230f      	movs	r3, #15
   1eec8:	18fc      	adds	r4, r7, r3
   1eeca:	003b      	movs	r3, r7
   1eecc:	4ac0      	ldr	r2, [pc, #768]	; (1f1d0 <hif_isr+0x39c>)
   1eece:	0019      	movs	r1, r3
   1eed0:	0010      	movs	r0, r2
   1eed2:	4bbb      	ldr	r3, [pc, #748]	; (1f1c0 <hif_isr+0x38c>)
   1eed4:	4798      	blx	r3
   1eed6:	0003      	movs	r3, r0
   1eed8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1eeda:	230f      	movs	r3, #15
   1eedc:	18fb      	adds	r3, r7, r3
   1eede:	781b      	ldrb	r3, [r3, #0]
   1eee0:	b25b      	sxtb	r3, r3
   1eee2:	2b00      	cmp	r3, #0
   1eee4:	d012      	beq.n	1ef0c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1eee6:	23e4      	movs	r3, #228	; 0xe4
   1eee8:	005a      	lsls	r2, r3, #1
   1eeea:	49ba      	ldr	r1, [pc, #744]	; (1f1d4 <hif_isr+0x3a0>)
   1eeec:	4bba      	ldr	r3, [pc, #744]	; (1f1d8 <hif_isr+0x3a4>)
   1eeee:	0018      	movs	r0, r3
   1eef0:	4bba      	ldr	r3, [pc, #744]	; (1f1dc <hif_isr+0x3a8>)
   1eef2:	4798      	blx	r3
   1eef4:	4bba      	ldr	r3, [pc, #744]	; (1f1e0 <hif_isr+0x3ac>)
   1eef6:	0018      	movs	r0, r3
   1eef8:	4bb8      	ldr	r3, [pc, #736]	; (1f1dc <hif_isr+0x3a8>)
   1eefa:	4798      	blx	r3
   1eefc:	4bb9      	ldr	r3, [pc, #740]	; (1f1e4 <hif_isr+0x3b0>)
   1eefe:	0018      	movs	r0, r3
   1ef00:	4bb6      	ldr	r3, [pc, #728]	; (1f1dc <hif_isr+0x3a8>)
   1ef02:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1ef04:	2001      	movs	r0, #1
   1ef06:	4baf      	ldr	r3, [pc, #700]	; (1f1c4 <hif_isr+0x390>)
   1ef08:	4798      	blx	r3
					goto ERR1;
   1ef0a:	e1db      	b.n	1f2c4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   1ef0c:	683a      	ldr	r2, [r7, #0]
   1ef0e:	4baf      	ldr	r3, [pc, #700]	; (1f1cc <hif_isr+0x398>)
   1ef10:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1ef12:	230c      	movs	r3, #12
   1ef14:	18fb      	adds	r3, r7, r3
   1ef16:	881a      	ldrh	r2, [r3, #0]
   1ef18:	4bac      	ldr	r3, [pc, #688]	; (1f1cc <hif_isr+0x398>)
   1ef1a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1ef1c:	683b      	ldr	r3, [r7, #0]
   1ef1e:	220f      	movs	r2, #15
   1ef20:	18bc      	adds	r4, r7, r2
   1ef22:	1d39      	adds	r1, r7, #4
   1ef24:	2204      	movs	r2, #4
   1ef26:	0018      	movs	r0, r3
   1ef28:	4baf      	ldr	r3, [pc, #700]	; (1f1e8 <hif_isr+0x3b4>)
   1ef2a:	4798      	blx	r3
   1ef2c:	0003      	movs	r3, r0
   1ef2e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1ef30:	1d3b      	adds	r3, r7, #4
   1ef32:	885b      	ldrh	r3, [r3, #2]
   1ef34:	b29a      	uxth	r2, r3
   1ef36:	1d3b      	adds	r3, r7, #4
   1ef38:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   1ef3a:	230f      	movs	r3, #15
   1ef3c:	18fb      	adds	r3, r7, r3
   1ef3e:	781b      	ldrb	r3, [r3, #0]
   1ef40:	b25b      	sxtb	r3, r3
   1ef42:	2b00      	cmp	r3, #0
   1ef44:	d012      	beq.n	1ef6c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   1ef46:	23e9      	movs	r3, #233	; 0xe9
   1ef48:	005a      	lsls	r2, r3, #1
   1ef4a:	49a2      	ldr	r1, [pc, #648]	; (1f1d4 <hif_isr+0x3a0>)
   1ef4c:	4ba2      	ldr	r3, [pc, #648]	; (1f1d8 <hif_isr+0x3a4>)
   1ef4e:	0018      	movs	r0, r3
   1ef50:	4ba2      	ldr	r3, [pc, #648]	; (1f1dc <hif_isr+0x3a8>)
   1ef52:	4798      	blx	r3
   1ef54:	4ba5      	ldr	r3, [pc, #660]	; (1f1ec <hif_isr+0x3b8>)
   1ef56:	0018      	movs	r0, r3
   1ef58:	4ba0      	ldr	r3, [pc, #640]	; (1f1dc <hif_isr+0x3a8>)
   1ef5a:	4798      	blx	r3
   1ef5c:	4ba1      	ldr	r3, [pc, #644]	; (1f1e4 <hif_isr+0x3b0>)
   1ef5e:	0018      	movs	r0, r3
   1ef60:	4b9e      	ldr	r3, [pc, #632]	; (1f1dc <hif_isr+0x3a8>)
   1ef62:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1ef64:	2001      	movs	r0, #1
   1ef66:	4b97      	ldr	r3, [pc, #604]	; (1f1c4 <hif_isr+0x390>)
   1ef68:	4798      	blx	r3
					goto ERR1;
   1ef6a:	e1ab      	b.n	1f2c4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   1ef6c:	1d3b      	adds	r3, r7, #4
   1ef6e:	885b      	ldrh	r3, [r3, #2]
   1ef70:	b29b      	uxth	r3, r3
   1ef72:	220c      	movs	r2, #12
   1ef74:	18ba      	adds	r2, r7, r2
   1ef76:	8812      	ldrh	r2, [r2, #0]
   1ef78:	429a      	cmp	r2, r3
   1ef7a:	d02f      	beq.n	1efdc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   1ef7c:	230c      	movs	r3, #12
   1ef7e:	18fb      	adds	r3, r7, r3
   1ef80:	881b      	ldrh	r3, [r3, #0]
   1ef82:	1d3a      	adds	r2, r7, #4
   1ef84:	8852      	ldrh	r2, [r2, #2]
   1ef86:	b292      	uxth	r2, r2
   1ef88:	1a9b      	subs	r3, r3, r2
   1ef8a:	2b04      	cmp	r3, #4
   1ef8c:	dd26      	ble.n	1efdc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1ef8e:	23dc      	movs	r3, #220	; 0xdc
   1ef90:	33ff      	adds	r3, #255	; 0xff
   1ef92:	001a      	movs	r2, r3
   1ef94:	498f      	ldr	r1, [pc, #572]	; (1f1d4 <hif_isr+0x3a0>)
   1ef96:	4b90      	ldr	r3, [pc, #576]	; (1f1d8 <hif_isr+0x3a4>)
   1ef98:	0018      	movs	r0, r3
   1ef9a:	4b90      	ldr	r3, [pc, #576]	; (1f1dc <hif_isr+0x3a8>)
   1ef9c:	4798      	blx	r3
   1ef9e:	230c      	movs	r3, #12
   1efa0:	18fb      	adds	r3, r7, r3
   1efa2:	8819      	ldrh	r1, [r3, #0]
   1efa4:	1d3b      	adds	r3, r7, #4
   1efa6:	885b      	ldrh	r3, [r3, #2]
   1efa8:	b29b      	uxth	r3, r3
   1efaa:	001a      	movs	r2, r3
   1efac:	1d3b      	adds	r3, r7, #4
   1efae:	781b      	ldrb	r3, [r3, #0]
   1efb0:	b2db      	uxtb	r3, r3
   1efb2:	001c      	movs	r4, r3
   1efb4:	1d3b      	adds	r3, r7, #4
   1efb6:	785b      	ldrb	r3, [r3, #1]
   1efb8:	b2db      	uxtb	r3, r3
   1efba:	488d      	ldr	r0, [pc, #564]	; (1f1f0 <hif_isr+0x3bc>)
   1efbc:	9300      	str	r3, [sp, #0]
   1efbe:	0023      	movs	r3, r4
   1efc0:	4c86      	ldr	r4, [pc, #536]	; (1f1dc <hif_isr+0x3a8>)
   1efc2:	47a0      	blx	r4
   1efc4:	4b87      	ldr	r3, [pc, #540]	; (1f1e4 <hif_isr+0x3b0>)
   1efc6:	0018      	movs	r0, r3
   1efc8:	4b84      	ldr	r3, [pc, #528]	; (1f1dc <hif_isr+0x3a8>)
   1efca:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   1efcc:	2001      	movs	r0, #1
   1efce:	4b7d      	ldr	r3, [pc, #500]	; (1f1c4 <hif_isr+0x390>)
   1efd0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1efd2:	230f      	movs	r3, #15
   1efd4:	18fb      	adds	r3, r7, r3
   1efd6:	22fa      	movs	r2, #250	; 0xfa
   1efd8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1efda:	e173      	b.n	1f2c4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1efdc:	1d3b      	adds	r3, r7, #4
   1efde:	781b      	ldrb	r3, [r3, #0]
   1efe0:	b2db      	uxtb	r3, r3
   1efe2:	2b01      	cmp	r3, #1
   1efe4:	d122      	bne.n	1f02c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1efe6:	4b79      	ldr	r3, [pc, #484]	; (1f1cc <hif_isr+0x398>)
   1efe8:	691b      	ldr	r3, [r3, #16]
   1efea:	2b00      	cmp	r3, #0
   1efec:	d00d      	beq.n	1f00a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1efee:	4b77      	ldr	r3, [pc, #476]	; (1f1cc <hif_isr+0x398>)
   1eff0:	691b      	ldr	r3, [r3, #16]
   1eff2:	1d3a      	adds	r2, r7, #4
   1eff4:	7852      	ldrb	r2, [r2, #1]
   1eff6:	b2d0      	uxtb	r0, r2
   1eff8:	1d3a      	adds	r2, r7, #4
   1effa:	8852      	ldrh	r2, [r2, #2]
   1effc:	b292      	uxth	r2, r2
   1effe:	3a08      	subs	r2, #8
   1f000:	b291      	uxth	r1, r2
   1f002:	683a      	ldr	r2, [r7, #0]
   1f004:	3208      	adds	r2, #8
   1f006:	4798      	blx	r3
   1f008:	e102      	b.n	1f210 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   1f00a:	23e8      	movs	r3, #232	; 0xe8
   1f00c:	33ff      	adds	r3, #255	; 0xff
   1f00e:	001a      	movs	r2, r3
   1f010:	4970      	ldr	r1, [pc, #448]	; (1f1d4 <hif_isr+0x3a0>)
   1f012:	4b71      	ldr	r3, [pc, #452]	; (1f1d8 <hif_isr+0x3a4>)
   1f014:	0018      	movs	r0, r3
   1f016:	4b71      	ldr	r3, [pc, #452]	; (1f1dc <hif_isr+0x3a8>)
   1f018:	4798      	blx	r3
   1f01a:	4b76      	ldr	r3, [pc, #472]	; (1f1f4 <hif_isr+0x3c0>)
   1f01c:	0018      	movs	r0, r3
   1f01e:	4b6f      	ldr	r3, [pc, #444]	; (1f1dc <hif_isr+0x3a8>)
   1f020:	4798      	blx	r3
   1f022:	4b70      	ldr	r3, [pc, #448]	; (1f1e4 <hif_isr+0x3b0>)
   1f024:	0018      	movs	r0, r3
   1f026:	4b6d      	ldr	r3, [pc, #436]	; (1f1dc <hif_isr+0x3a8>)
   1f028:	4798      	blx	r3
   1f02a:	e0f1      	b.n	1f210 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1f02c:	1d3b      	adds	r3, r7, #4
   1f02e:	781b      	ldrb	r3, [r3, #0]
   1f030:	b2db      	uxtb	r3, r3
   1f032:	2b02      	cmp	r3, #2
   1f034:	d122      	bne.n	1f07c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   1f036:	4b65      	ldr	r3, [pc, #404]	; (1f1cc <hif_isr+0x398>)
   1f038:	695b      	ldr	r3, [r3, #20]
   1f03a:	2b00      	cmp	r3, #0
   1f03c:	d00d      	beq.n	1f05a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f03e:	4b63      	ldr	r3, [pc, #396]	; (1f1cc <hif_isr+0x398>)
   1f040:	695b      	ldr	r3, [r3, #20]
   1f042:	1d3a      	adds	r2, r7, #4
   1f044:	7852      	ldrb	r2, [r2, #1]
   1f046:	b2d0      	uxtb	r0, r2
   1f048:	1d3a      	adds	r2, r7, #4
   1f04a:	8852      	ldrh	r2, [r2, #2]
   1f04c:	b292      	uxth	r2, r2
   1f04e:	3a08      	subs	r2, #8
   1f050:	b291      	uxth	r1, r2
   1f052:	683a      	ldr	r2, [r7, #0]
   1f054:	3208      	adds	r2, #8
   1f056:	4798      	blx	r3
   1f058:	e0da      	b.n	1f210 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1f05a:	23f0      	movs	r3, #240	; 0xf0
   1f05c:	33ff      	adds	r3, #255	; 0xff
   1f05e:	001a      	movs	r2, r3
   1f060:	495c      	ldr	r1, [pc, #368]	; (1f1d4 <hif_isr+0x3a0>)
   1f062:	4b5d      	ldr	r3, [pc, #372]	; (1f1d8 <hif_isr+0x3a4>)
   1f064:	0018      	movs	r0, r3
   1f066:	4b5d      	ldr	r3, [pc, #372]	; (1f1dc <hif_isr+0x3a8>)
   1f068:	4798      	blx	r3
   1f06a:	4b63      	ldr	r3, [pc, #396]	; (1f1f8 <hif_isr+0x3c4>)
   1f06c:	0018      	movs	r0, r3
   1f06e:	4b5b      	ldr	r3, [pc, #364]	; (1f1dc <hif_isr+0x3a8>)
   1f070:	4798      	blx	r3
   1f072:	4b5c      	ldr	r3, [pc, #368]	; (1f1e4 <hif_isr+0x3b0>)
   1f074:	0018      	movs	r0, r3
   1f076:	4b59      	ldr	r3, [pc, #356]	; (1f1dc <hif_isr+0x3a8>)
   1f078:	4798      	blx	r3
   1f07a:	e0c9      	b.n	1f210 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1f07c:	1d3b      	adds	r3, r7, #4
   1f07e:	781b      	ldrb	r3, [r3, #0]
   1f080:	b2db      	uxtb	r3, r3
   1f082:	2b04      	cmp	r3, #4
   1f084:	d122      	bne.n	1f0cc <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1f086:	4b51      	ldr	r3, [pc, #324]	; (1f1cc <hif_isr+0x398>)
   1f088:	699b      	ldr	r3, [r3, #24]
   1f08a:	2b00      	cmp	r3, #0
   1f08c:	d00d      	beq.n	1f0aa <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f08e:	4b4f      	ldr	r3, [pc, #316]	; (1f1cc <hif_isr+0x398>)
   1f090:	699b      	ldr	r3, [r3, #24]
   1f092:	1d3a      	adds	r2, r7, #4
   1f094:	7852      	ldrb	r2, [r2, #1]
   1f096:	b2d0      	uxtb	r0, r2
   1f098:	1d3a      	adds	r2, r7, #4
   1f09a:	8852      	ldrh	r2, [r2, #2]
   1f09c:	b292      	uxth	r2, r2
   1f09e:	3a08      	subs	r2, #8
   1f0a0:	b291      	uxth	r1, r2
   1f0a2:	683a      	ldr	r2, [r7, #0]
   1f0a4:	3208      	adds	r2, #8
   1f0a6:	4798      	blx	r3
   1f0a8:	e0b2      	b.n	1f210 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1f0aa:	23f8      	movs	r3, #248	; 0xf8
   1f0ac:	33ff      	adds	r3, #255	; 0xff
   1f0ae:	001a      	movs	r2, r3
   1f0b0:	4948      	ldr	r1, [pc, #288]	; (1f1d4 <hif_isr+0x3a0>)
   1f0b2:	4b49      	ldr	r3, [pc, #292]	; (1f1d8 <hif_isr+0x3a4>)
   1f0b4:	0018      	movs	r0, r3
   1f0b6:	4b49      	ldr	r3, [pc, #292]	; (1f1dc <hif_isr+0x3a8>)
   1f0b8:	4798      	blx	r3
   1f0ba:	4b50      	ldr	r3, [pc, #320]	; (1f1fc <hif_isr+0x3c8>)
   1f0bc:	0018      	movs	r0, r3
   1f0be:	4b47      	ldr	r3, [pc, #284]	; (1f1dc <hif_isr+0x3a8>)
   1f0c0:	4798      	blx	r3
   1f0c2:	4b48      	ldr	r3, [pc, #288]	; (1f1e4 <hif_isr+0x3b0>)
   1f0c4:	0018      	movs	r0, r3
   1f0c6:	4b45      	ldr	r3, [pc, #276]	; (1f1dc <hif_isr+0x3a8>)
   1f0c8:	4798      	blx	r3
   1f0ca:	e0a1      	b.n	1f210 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1f0cc:	1d3b      	adds	r3, r7, #4
   1f0ce:	781b      	ldrb	r3, [r3, #0]
   1f0d0:	b2db      	uxtb	r3, r3
   1f0d2:	2b06      	cmp	r3, #6
   1f0d4:	d121      	bne.n	1f11a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1f0d6:	4b3d      	ldr	r3, [pc, #244]	; (1f1cc <hif_isr+0x398>)
   1f0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f0da:	2b00      	cmp	r3, #0
   1f0dc:	d00d      	beq.n	1f0fa <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f0de:	4b3b      	ldr	r3, [pc, #236]	; (1f1cc <hif_isr+0x398>)
   1f0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f0e2:	1d3a      	adds	r2, r7, #4
   1f0e4:	7852      	ldrb	r2, [r2, #1]
   1f0e6:	b2d0      	uxtb	r0, r2
   1f0e8:	1d3a      	adds	r2, r7, #4
   1f0ea:	8852      	ldrh	r2, [r2, #2]
   1f0ec:	b292      	uxth	r2, r2
   1f0ee:	3a08      	subs	r2, #8
   1f0f0:	b291      	uxth	r1, r2
   1f0f2:	683a      	ldr	r2, [r7, #0]
   1f0f4:	3208      	adds	r2, #8
   1f0f6:	4798      	blx	r3
   1f0f8:	e08a      	b.n	1f210 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   1f0fa:	2380      	movs	r3, #128	; 0x80
   1f0fc:	009a      	lsls	r2, r3, #2
   1f0fe:	4935      	ldr	r1, [pc, #212]	; (1f1d4 <hif_isr+0x3a0>)
   1f100:	4b35      	ldr	r3, [pc, #212]	; (1f1d8 <hif_isr+0x3a4>)
   1f102:	0018      	movs	r0, r3
   1f104:	4b35      	ldr	r3, [pc, #212]	; (1f1dc <hif_isr+0x3a8>)
   1f106:	4798      	blx	r3
   1f108:	4b3d      	ldr	r3, [pc, #244]	; (1f200 <hif_isr+0x3cc>)
   1f10a:	0018      	movs	r0, r3
   1f10c:	4b33      	ldr	r3, [pc, #204]	; (1f1dc <hif_isr+0x3a8>)
   1f10e:	4798      	blx	r3
   1f110:	4b34      	ldr	r3, [pc, #208]	; (1f1e4 <hif_isr+0x3b0>)
   1f112:	0018      	movs	r0, r3
   1f114:	4b31      	ldr	r3, [pc, #196]	; (1f1dc <hif_isr+0x3a8>)
   1f116:	4798      	blx	r3
   1f118:	e07a      	b.n	1f210 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1f11a:	1d3b      	adds	r3, r7, #4
   1f11c:	781b      	ldrb	r3, [r3, #0]
   1f11e:	b2db      	uxtb	r3, r3
   1f120:	2b07      	cmp	r3, #7
   1f122:	d120      	bne.n	1f166 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   1f124:	4b29      	ldr	r3, [pc, #164]	; (1f1cc <hif_isr+0x398>)
   1f126:	69db      	ldr	r3, [r3, #28]
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d00d      	beq.n	1f148 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f12c:	4b27      	ldr	r3, [pc, #156]	; (1f1cc <hif_isr+0x398>)
   1f12e:	69db      	ldr	r3, [r3, #28]
   1f130:	1d3a      	adds	r2, r7, #4
   1f132:	7852      	ldrb	r2, [r2, #1]
   1f134:	b2d0      	uxtb	r0, r2
   1f136:	1d3a      	adds	r2, r7, #4
   1f138:	8852      	ldrh	r2, [r2, #2]
   1f13a:	b292      	uxth	r2, r2
   1f13c:	3a08      	subs	r2, #8
   1f13e:	b291      	uxth	r1, r2
   1f140:	683a      	ldr	r2, [r7, #0]
   1f142:	3208      	adds	r2, #8
   1f144:	4798      	blx	r3
   1f146:	e063      	b.n	1f210 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   1f148:	4a2e      	ldr	r2, [pc, #184]	; (1f204 <hif_isr+0x3d0>)
   1f14a:	4922      	ldr	r1, [pc, #136]	; (1f1d4 <hif_isr+0x3a0>)
   1f14c:	4b22      	ldr	r3, [pc, #136]	; (1f1d8 <hif_isr+0x3a4>)
   1f14e:	0018      	movs	r0, r3
   1f150:	4b22      	ldr	r3, [pc, #136]	; (1f1dc <hif_isr+0x3a8>)
   1f152:	4798      	blx	r3
   1f154:	4b2c      	ldr	r3, [pc, #176]	; (1f208 <hif_isr+0x3d4>)
   1f156:	0018      	movs	r0, r3
   1f158:	4b20      	ldr	r3, [pc, #128]	; (1f1dc <hif_isr+0x3a8>)
   1f15a:	4798      	blx	r3
   1f15c:	4b21      	ldr	r3, [pc, #132]	; (1f1e4 <hif_isr+0x3b0>)
   1f15e:	0018      	movs	r0, r3
   1f160:	4b1e      	ldr	r3, [pc, #120]	; (1f1dc <hif_isr+0x3a8>)
   1f162:	4798      	blx	r3
   1f164:	e054      	b.n	1f210 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1f166:	1d3b      	adds	r3, r7, #4
   1f168:	781b      	ldrb	r3, [r3, #0]
   1f16a:	b2db      	uxtb	r3, r3
   1f16c:	2b05      	cmp	r3, #5
   1f16e:	d111      	bne.n	1f194 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   1f170:	4b16      	ldr	r3, [pc, #88]	; (1f1cc <hif_isr+0x398>)
   1f172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f174:	2b00      	cmp	r3, #0
   1f176:	d04b      	beq.n	1f210 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f178:	4b14      	ldr	r3, [pc, #80]	; (1f1cc <hif_isr+0x398>)
   1f17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f17c:	1d3a      	adds	r2, r7, #4
   1f17e:	7852      	ldrb	r2, [r2, #1]
   1f180:	b2d0      	uxtb	r0, r2
   1f182:	1d3a      	adds	r2, r7, #4
   1f184:	8852      	ldrh	r2, [r2, #2]
   1f186:	b292      	uxth	r2, r2
   1f188:	3a08      	subs	r2, #8
   1f18a:	b291      	uxth	r1, r2
   1f18c:	683a      	ldr	r2, [r7, #0]
   1f18e:	3208      	adds	r2, #8
   1f190:	4798      	blx	r3
   1f192:	e03d      	b.n	1f210 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   1f194:	2384      	movs	r3, #132	; 0x84
   1f196:	009a      	lsls	r2, r3, #2
   1f198:	490e      	ldr	r1, [pc, #56]	; (1f1d4 <hif_isr+0x3a0>)
   1f19a:	4b0f      	ldr	r3, [pc, #60]	; (1f1d8 <hif_isr+0x3a4>)
   1f19c:	0018      	movs	r0, r3
   1f19e:	4b0f      	ldr	r3, [pc, #60]	; (1f1dc <hif_isr+0x3a8>)
   1f1a0:	4798      	blx	r3
   1f1a2:	4b1a      	ldr	r3, [pc, #104]	; (1f20c <hif_isr+0x3d8>)
   1f1a4:	0018      	movs	r0, r3
   1f1a6:	4b0d      	ldr	r3, [pc, #52]	; (1f1dc <hif_isr+0x3a8>)
   1f1a8:	4798      	blx	r3
   1f1aa:	4b0e      	ldr	r3, [pc, #56]	; (1f1e4 <hif_isr+0x3b0>)
   1f1ac:	0018      	movs	r0, r3
   1f1ae:	4b0b      	ldr	r3, [pc, #44]	; (1f1dc <hif_isr+0x3a8>)
   1f1b0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   1f1b2:	230f      	movs	r3, #15
   1f1b4:	18fb      	adds	r3, r7, r3
   1f1b6:	22fa      	movs	r2, #250	; 0xfa
   1f1b8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1f1ba:	e083      	b.n	1f2c4 <hif_isr+0x490>
   1f1bc:	00001070 	.word	0x00001070
   1f1c0:	000208c1 	.word	0x000208c1
   1f1c4:	0001dfe5 	.word	0x0001dfe5
   1f1c8:	000208e5 	.word	0x000208e5
   1f1cc:	20005444 	.word	0x20005444
   1f1d0:	00001084 	.word	0x00001084
   1f1d4:	00035b6c 	.word	0x00035b6c
   1f1d8:	0003585c 	.word	0x0003585c
   1f1dc:	0001bafd 	.word	0x0001bafd
   1f1e0:	00035890 	.word	0x00035890
   1f1e4:	00035858 	.word	0x00035858
   1f1e8:	00020935 	.word	0x00020935
   1f1ec:	000358b8 	.word	0x000358b8
   1f1f0:	000358d0 	.word	0x000358d0
   1f1f4:	00035910 	.word	0x00035910
   1f1f8:	00035934 	.word	0x00035934
   1f1fc:	00035958 	.word	0x00035958
   1f200:	00035978 	.word	0x00035978
   1f204:	00000207 	.word	0x00000207
   1f208:	0003599c 	.word	0x0003599c
   1f20c:	000359c0 	.word	0x000359c0
				}
				if(gstrHifCxt.u8HifRXDone)
   1f210:	4b30      	ldr	r3, [pc, #192]	; (1f2d4 <hif_isr+0x4a0>)
   1f212:	789b      	ldrb	r3, [r3, #2]
   1f214:	b2db      	uxtb	r3, r3
   1f216:	2b00      	cmp	r3, #0
   1f218:	d054      	beq.n	1f2c4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1f21a:	4a2f      	ldr	r2, [pc, #188]	; (1f2d8 <hif_isr+0x4a4>)
   1f21c:	492f      	ldr	r1, [pc, #188]	; (1f2dc <hif_isr+0x4a8>)
   1f21e:	4b30      	ldr	r3, [pc, #192]	; (1f2e0 <hif_isr+0x4ac>)
   1f220:	0018      	movs	r0, r3
   1f222:	4b30      	ldr	r3, [pc, #192]	; (1f2e4 <hif_isr+0x4b0>)
   1f224:	4798      	blx	r3
   1f226:	1d3b      	adds	r3, r7, #4
   1f228:	781b      	ldrb	r3, [r3, #0]
   1f22a:	b2db      	uxtb	r3, r3
   1f22c:	0019      	movs	r1, r3
   1f22e:	1d3b      	adds	r3, r7, #4
   1f230:	785b      	ldrb	r3, [r3, #1]
   1f232:	b2db      	uxtb	r3, r3
   1f234:	001a      	movs	r2, r3
   1f236:	4b2c      	ldr	r3, [pc, #176]	; (1f2e8 <hif_isr+0x4b4>)
   1f238:	0018      	movs	r0, r3
   1f23a:	4b2a      	ldr	r3, [pc, #168]	; (1f2e4 <hif_isr+0x4b0>)
   1f23c:	4798      	blx	r3
   1f23e:	4b2b      	ldr	r3, [pc, #172]	; (1f2ec <hif_isr+0x4b8>)
   1f240:	0018      	movs	r0, r3
   1f242:	4b28      	ldr	r3, [pc, #160]	; (1f2e4 <hif_isr+0x4b0>)
   1f244:	4798      	blx	r3
					ret = hif_set_rx_done();
   1f246:	230f      	movs	r3, #15
   1f248:	18fc      	adds	r4, r7, r3
   1f24a:	4b29      	ldr	r3, [pc, #164]	; (1f2f0 <hif_isr+0x4bc>)
   1f24c:	4798      	blx	r3
   1f24e:	0003      	movs	r3, r0
   1f250:	7023      	strb	r3, [r4, #0]
   1f252:	e037      	b.n	1f2c4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   1f254:	4a27      	ldr	r2, [pc, #156]	; (1f2f4 <hif_isr+0x4c0>)
   1f256:	4921      	ldr	r1, [pc, #132]	; (1f2dc <hif_isr+0x4a8>)
   1f258:	4b21      	ldr	r3, [pc, #132]	; (1f2e0 <hif_isr+0x4ac>)
   1f25a:	0018      	movs	r0, r3
   1f25c:	4b21      	ldr	r3, [pc, #132]	; (1f2e4 <hif_isr+0x4b0>)
   1f25e:	4798      	blx	r3
   1f260:	4b25      	ldr	r3, [pc, #148]	; (1f2f8 <hif_isr+0x4c4>)
   1f262:	0018      	movs	r0, r3
   1f264:	4b1f      	ldr	r3, [pc, #124]	; (1f2e4 <hif_isr+0x4b0>)
   1f266:	4798      	blx	r3
   1f268:	4b20      	ldr	r3, [pc, #128]	; (1f2ec <hif_isr+0x4b8>)
   1f26a:	0018      	movs	r0, r3
   1f26c:	4b1d      	ldr	r3, [pc, #116]	; (1f2e4 <hif_isr+0x4b0>)
   1f26e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   1f270:	230f      	movs	r3, #15
   1f272:	18fb      	adds	r3, r7, r3
   1f274:	22fe      	movs	r2, #254	; 0xfe
   1f276:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1f278:	e024      	b.n	1f2c4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1f27a:	4a20      	ldr	r2, [pc, #128]	; (1f2fc <hif_isr+0x4c8>)
   1f27c:	4917      	ldr	r1, [pc, #92]	; (1f2dc <hif_isr+0x4a8>)
   1f27e:	4b18      	ldr	r3, [pc, #96]	; (1f2e0 <hif_isr+0x4ac>)
   1f280:	0018      	movs	r0, r3
   1f282:	4b18      	ldr	r3, [pc, #96]	; (1f2e4 <hif_isr+0x4b0>)
   1f284:	4798      	blx	r3
   1f286:	68ba      	ldr	r2, [r7, #8]
   1f288:	4b1d      	ldr	r3, [pc, #116]	; (1f300 <hif_isr+0x4cc>)
   1f28a:	0011      	movs	r1, r2
   1f28c:	0018      	movs	r0, r3
   1f28e:	4b15      	ldr	r3, [pc, #84]	; (1f2e4 <hif_isr+0x4b0>)
   1f290:	4798      	blx	r3
   1f292:	4b16      	ldr	r3, [pc, #88]	; (1f2ec <hif_isr+0x4b8>)
   1f294:	0018      	movs	r0, r3
   1f296:	4b13      	ldr	r3, [pc, #76]	; (1f2e4 <hif_isr+0x4b0>)
   1f298:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1f29a:	230f      	movs	r3, #15
   1f29c:	18fb      	adds	r3, r7, r3
   1f29e:	22f4      	movs	r2, #244	; 0xf4
   1f2a0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1f2a2:	e00f      	b.n	1f2c4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1f2a4:	4a17      	ldr	r2, [pc, #92]	; (1f304 <hif_isr+0x4d0>)
   1f2a6:	490d      	ldr	r1, [pc, #52]	; (1f2dc <hif_isr+0x4a8>)
   1f2a8:	4b0d      	ldr	r3, [pc, #52]	; (1f2e0 <hif_isr+0x4ac>)
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b0d      	ldr	r3, [pc, #52]	; (1f2e4 <hif_isr+0x4b0>)
   1f2ae:	4798      	blx	r3
   1f2b0:	4b15      	ldr	r3, [pc, #84]	; (1f308 <hif_isr+0x4d4>)
   1f2b2:	0018      	movs	r0, r3
   1f2b4:	4b0b      	ldr	r3, [pc, #44]	; (1f2e4 <hif_isr+0x4b0>)
   1f2b6:	4798      	blx	r3
   1f2b8:	4b0c      	ldr	r3, [pc, #48]	; (1f2ec <hif_isr+0x4b8>)
   1f2ba:	0018      	movs	r0, r3
   1f2bc:	4b09      	ldr	r3, [pc, #36]	; (1f2e4 <hif_isr+0x4b0>)
   1f2be:	4798      	blx	r3
		goto ERR1;
   1f2c0:	e000      	b.n	1f2c4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   1f2c2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1f2c4:	230f      	movs	r3, #15
   1f2c6:	18fb      	adds	r3, r7, r3
   1f2c8:	781b      	ldrb	r3, [r3, #0]
   1f2ca:	b25b      	sxtb	r3, r3
}
   1f2cc:	0018      	movs	r0, r3
   1f2ce:	46bd      	mov	sp, r7
   1f2d0:	b005      	add	sp, #20
   1f2d2:	bd90      	pop	{r4, r7, pc}
   1f2d4:	20005444 	.word	0x20005444
   1f2d8:	00000216 	.word	0x00000216
   1f2dc:	00035b6c 	.word	0x00035b6c
   1f2e0:	0003585c 	.word	0x0003585c
   1f2e4:	0001bafd 	.word	0x0001bafd
   1f2e8:	000359d8 	.word	0x000359d8
   1f2ec:	00035858 	.word	0x00035858
   1f2f0:	0001e8c9 	.word	0x0001e8c9
   1f2f4:	0000021d 	.word	0x0000021d
   1f2f8:	00035a04 	.word	0x00035a04
   1f2fc:	00000225 	.word	0x00000225
   1f300:	00035a18 	.word	0x00035a18
   1f304:	0000022e 	.word	0x0000022e
   1f308:	00035a34 	.word	0x00035a34

0001f30c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1f30c:	b590      	push	{r4, r7, lr}
   1f30e:	b083      	sub	sp, #12
   1f310:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   1f312:	1dfb      	adds	r3, r7, #7
   1f314:	2200      	movs	r2, #0
   1f316:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   1f318:	4b1c      	ldr	r3, [pc, #112]	; (1f38c <hif_handle_isr+0x80>)
   1f31a:	2200      	movs	r2, #0
   1f31c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1f31e:	e024      	b.n	1f36a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1f320:	4b1a      	ldr	r3, [pc, #104]	; (1f38c <hif_handle_isr+0x80>)
   1f322:	78db      	ldrb	r3, [r3, #3]
   1f324:	b2db      	uxtb	r3, r3
   1f326:	3b01      	subs	r3, #1
   1f328:	b2da      	uxtb	r2, r3
   1f32a:	4b18      	ldr	r3, [pc, #96]	; (1f38c <hif_handle_isr+0x80>)
   1f32c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   1f32e:	1dfc      	adds	r4, r7, #7
   1f330:	4b17      	ldr	r3, [pc, #92]	; (1f390 <hif_handle_isr+0x84>)
   1f332:	4798      	blx	r3
   1f334:	0003      	movs	r3, r0
   1f336:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   1f338:	1dfb      	adds	r3, r7, #7
   1f33a:	781b      	ldrb	r3, [r3, #0]
   1f33c:	b25b      	sxtb	r3, r3
   1f33e:	2b00      	cmp	r3, #0
   1f340:	d100      	bne.n	1f344 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   1f342:	e012      	b.n	1f36a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1f344:	4a13      	ldr	r2, [pc, #76]	; (1f394 <hif_handle_isr+0x88>)
   1f346:	4914      	ldr	r1, [pc, #80]	; (1f398 <hif_handle_isr+0x8c>)
   1f348:	4b14      	ldr	r3, [pc, #80]	; (1f39c <hif_handle_isr+0x90>)
   1f34a:	0018      	movs	r0, r3
   1f34c:	4b14      	ldr	r3, [pc, #80]	; (1f3a0 <hif_handle_isr+0x94>)
   1f34e:	4798      	blx	r3
   1f350:	1dfb      	adds	r3, r7, #7
   1f352:	2200      	movs	r2, #0
   1f354:	569a      	ldrsb	r2, [r3, r2]
   1f356:	4b13      	ldr	r3, [pc, #76]	; (1f3a4 <hif_handle_isr+0x98>)
   1f358:	0011      	movs	r1, r2
   1f35a:	0018      	movs	r0, r3
   1f35c:	4b10      	ldr	r3, [pc, #64]	; (1f3a0 <hif_handle_isr+0x94>)
   1f35e:	4798      	blx	r3
   1f360:	4b11      	ldr	r3, [pc, #68]	; (1f3a8 <hif_handle_isr+0x9c>)
   1f362:	0018      	movs	r0, r3
   1f364:	4b0e      	ldr	r3, [pc, #56]	; (1f3a0 <hif_handle_isr+0x94>)
   1f366:	4798      	blx	r3
			ret = hif_isr();
   1f368:	e7e1      	b.n	1f32e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1f36a:	4b08      	ldr	r3, [pc, #32]	; (1f38c <hif_handle_isr+0x80>)
   1f36c:	78db      	ldrb	r3, [r3, #3]
   1f36e:	b2db      	uxtb	r3, r3
   1f370:	2b00      	cmp	r3, #0
   1f372:	d004      	beq.n	1f37e <hif_handle_isr+0x72>
   1f374:	4b05      	ldr	r3, [pc, #20]	; (1f38c <hif_handle_isr+0x80>)
   1f376:	791b      	ldrb	r3, [r3, #4]
   1f378:	b2db      	uxtb	r3, r3
   1f37a:	2b00      	cmp	r3, #0
   1f37c:	d0d0      	beq.n	1f320 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   1f37e:	1dfb      	adds	r3, r7, #7
   1f380:	781b      	ldrb	r3, [r3, #0]
   1f382:	b25b      	sxtb	r3, r3
}
   1f384:	0018      	movs	r0, r3
   1f386:	46bd      	mov	sp, r7
   1f388:	b003      	add	sp, #12
   1f38a:	bd90      	pop	{r4, r7, pc}
   1f38c:	20005444 	.word	0x20005444
   1f390:	0001ee35 	.word	0x0001ee35
   1f394:	00000257 	.word	0x00000257
   1f398:	00035b74 	.word	0x00035b74
   1f39c:	0003585c 	.word	0x0003585c
   1f3a0:	0001bafd 	.word	0x0001bafd
   1f3a4:	00035a58 	.word	0x00035a58
   1f3a8:	00035858 	.word	0x00035858

0001f3ac <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1f3ac:	b590      	push	{r4, r7, lr}
   1f3ae:	b087      	sub	sp, #28
   1f3b0:	af00      	add	r7, sp, #0
   1f3b2:	60f8      	str	r0, [r7, #12]
   1f3b4:	60b9      	str	r1, [r7, #8]
   1f3b6:	0019      	movs	r1, r3
   1f3b8:	1dbb      	adds	r3, r7, #6
   1f3ba:	801a      	strh	r2, [r3, #0]
   1f3bc:	1d7b      	adds	r3, r7, #5
   1f3be:	1c0a      	adds	r2, r1, #0
   1f3c0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f3c2:	2317      	movs	r3, #23
   1f3c4:	18fb      	adds	r3, r7, r3
   1f3c6:	2200      	movs	r2, #0
   1f3c8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1f3ca:	68fb      	ldr	r3, [r7, #12]
   1f3cc:	2b00      	cmp	r3, #0
   1f3ce:	d006      	beq.n	1f3de <hif_receive+0x32>
   1f3d0:	68bb      	ldr	r3, [r7, #8]
   1f3d2:	2b00      	cmp	r3, #0
   1f3d4:	d003      	beq.n	1f3de <hif_receive+0x32>
   1f3d6:	1dbb      	adds	r3, r7, #6
   1f3d8:	881b      	ldrh	r3, [r3, #0]
   1f3da:	2b00      	cmp	r3, #0
   1f3dc:	d11e      	bne.n	1f41c <hif_receive+0x70>
	{
		if(isDone)
   1f3de:	1d7b      	adds	r3, r7, #5
   1f3e0:	781b      	ldrb	r3, [r3, #0]
   1f3e2:	2b00      	cmp	r3, #0
   1f3e4:	d006      	beq.n	1f3f4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1f3e6:	2317      	movs	r3, #23
   1f3e8:	18fc      	adds	r4, r7, r3
   1f3ea:	4b45      	ldr	r3, [pc, #276]	; (1f500 <hif_receive+0x154>)
   1f3ec:	4798      	blx	r3
   1f3ee:	0003      	movs	r3, r0
   1f3f0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   1f3f2:	e07c      	b.n	1f4ee <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   1f3f4:	2317      	movs	r3, #23
   1f3f6:	18fb      	adds	r3, r7, r3
   1f3f8:	22f4      	movs	r2, #244	; 0xf4
   1f3fa:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   1f3fc:	239e      	movs	r3, #158	; 0x9e
   1f3fe:	009a      	lsls	r2, r3, #2
   1f400:	4940      	ldr	r1, [pc, #256]	; (1f504 <hif_receive+0x158>)
   1f402:	4b41      	ldr	r3, [pc, #260]	; (1f508 <hif_receive+0x15c>)
   1f404:	0018      	movs	r0, r3
   1f406:	4b41      	ldr	r3, [pc, #260]	; (1f50c <hif_receive+0x160>)
   1f408:	4798      	blx	r3
   1f40a:	4b41      	ldr	r3, [pc, #260]	; (1f510 <hif_receive+0x164>)
   1f40c:	0018      	movs	r0, r3
   1f40e:	4b3f      	ldr	r3, [pc, #252]	; (1f50c <hif_receive+0x160>)
   1f410:	4798      	blx	r3
   1f412:	4b40      	ldr	r3, [pc, #256]	; (1f514 <hif_receive+0x168>)
   1f414:	0018      	movs	r0, r3
   1f416:	4b3d      	ldr	r3, [pc, #244]	; (1f50c <hif_receive+0x160>)
   1f418:	4798      	blx	r3
		goto ERR1;
   1f41a:	e068      	b.n	1f4ee <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   1f41c:	1dbb      	adds	r3, r7, #6
   1f41e:	881a      	ldrh	r2, [r3, #0]
   1f420:	4b3d      	ldr	r3, [pc, #244]	; (1f518 <hif_receive+0x16c>)
   1f422:	68db      	ldr	r3, [r3, #12]
   1f424:	429a      	cmp	r2, r3
   1f426:	d917      	bls.n	1f458 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   1f428:	2317      	movs	r3, #23
   1f42a:	18fb      	adds	r3, r7, r3
   1f42c:	22f4      	movs	r2, #244	; 0xf4
   1f42e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1f430:	23a0      	movs	r3, #160	; 0xa0
   1f432:	009a      	lsls	r2, r3, #2
   1f434:	4933      	ldr	r1, [pc, #204]	; (1f504 <hif_receive+0x158>)
   1f436:	4b34      	ldr	r3, [pc, #208]	; (1f508 <hif_receive+0x15c>)
   1f438:	0018      	movs	r0, r3
   1f43a:	4b34      	ldr	r3, [pc, #208]	; (1f50c <hif_receive+0x160>)
   1f43c:	4798      	blx	r3
   1f43e:	1dbb      	adds	r3, r7, #6
   1f440:	8819      	ldrh	r1, [r3, #0]
   1f442:	4b35      	ldr	r3, [pc, #212]	; (1f518 <hif_receive+0x16c>)
   1f444:	68da      	ldr	r2, [r3, #12]
   1f446:	4b35      	ldr	r3, [pc, #212]	; (1f51c <hif_receive+0x170>)
   1f448:	0018      	movs	r0, r3
   1f44a:	4b30      	ldr	r3, [pc, #192]	; (1f50c <hif_receive+0x160>)
   1f44c:	4798      	blx	r3
   1f44e:	4b31      	ldr	r3, [pc, #196]	; (1f514 <hif_receive+0x168>)
   1f450:	0018      	movs	r0, r3
   1f452:	4b2e      	ldr	r3, [pc, #184]	; (1f50c <hif_receive+0x160>)
   1f454:	4798      	blx	r3
		goto ERR1;
   1f456:	e04a      	b.n	1f4ee <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1f458:	4b2f      	ldr	r3, [pc, #188]	; (1f518 <hif_receive+0x16c>)
   1f45a:	689a      	ldr	r2, [r3, #8]
   1f45c:	68fb      	ldr	r3, [r7, #12]
   1f45e:	429a      	cmp	r2, r3
   1f460:	d80a      	bhi.n	1f478 <hif_receive+0xcc>
   1f462:	1dbb      	adds	r3, r7, #6
   1f464:	881a      	ldrh	r2, [r3, #0]
   1f466:	68fb      	ldr	r3, [r7, #12]
   1f468:	18d2      	adds	r2, r2, r3
   1f46a:	4b2b      	ldr	r3, [pc, #172]	; (1f518 <hif_receive+0x16c>)
   1f46c:	6899      	ldr	r1, [r3, #8]
   1f46e:	4b2a      	ldr	r3, [pc, #168]	; (1f518 <hif_receive+0x16c>)
   1f470:	68db      	ldr	r3, [r3, #12]
   1f472:	18cb      	adds	r3, r1, r3
   1f474:	429a      	cmp	r2, r3
   1f476:	d912      	bls.n	1f49e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   1f478:	2317      	movs	r3, #23
   1f47a:	18fb      	adds	r3, r7, r3
   1f47c:	22f4      	movs	r2, #244	; 0xf4
   1f47e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1f480:	4a27      	ldr	r2, [pc, #156]	; (1f520 <hif_receive+0x174>)
   1f482:	4920      	ldr	r1, [pc, #128]	; (1f504 <hif_receive+0x158>)
   1f484:	4b20      	ldr	r3, [pc, #128]	; (1f508 <hif_receive+0x15c>)
   1f486:	0018      	movs	r0, r3
   1f488:	4b20      	ldr	r3, [pc, #128]	; (1f50c <hif_receive+0x160>)
   1f48a:	4798      	blx	r3
   1f48c:	4b25      	ldr	r3, [pc, #148]	; (1f524 <hif_receive+0x178>)
   1f48e:	0018      	movs	r0, r3
   1f490:	4b1e      	ldr	r3, [pc, #120]	; (1f50c <hif_receive+0x160>)
   1f492:	4798      	blx	r3
   1f494:	4b1f      	ldr	r3, [pc, #124]	; (1f514 <hif_receive+0x168>)
   1f496:	0018      	movs	r0, r3
   1f498:	4b1c      	ldr	r3, [pc, #112]	; (1f50c <hif_receive+0x160>)
   1f49a:	4798      	blx	r3
		goto ERR1;
   1f49c:	e027      	b.n	1f4ee <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1f49e:	1dbb      	adds	r3, r7, #6
   1f4a0:	881a      	ldrh	r2, [r3, #0]
   1f4a2:	2317      	movs	r3, #23
   1f4a4:	18fc      	adds	r4, r7, r3
   1f4a6:	68b9      	ldr	r1, [r7, #8]
   1f4a8:	68fb      	ldr	r3, [r7, #12]
   1f4aa:	0018      	movs	r0, r3
   1f4ac:	4b1e      	ldr	r3, [pc, #120]	; (1f528 <hif_receive+0x17c>)
   1f4ae:	4798      	blx	r3
   1f4b0:	0003      	movs	r3, r0
   1f4b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1f4b4:	2317      	movs	r3, #23
   1f4b6:	18fb      	adds	r3, r7, r3
   1f4b8:	781b      	ldrb	r3, [r3, #0]
   1f4ba:	b25b      	sxtb	r3, r3
   1f4bc:	2b00      	cmp	r3, #0
   1f4be:	d115      	bne.n	1f4ec <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1f4c0:	4b15      	ldr	r3, [pc, #84]	; (1f518 <hif_receive+0x16c>)
   1f4c2:	689a      	ldr	r2, [r3, #8]
   1f4c4:	4b14      	ldr	r3, [pc, #80]	; (1f518 <hif_receive+0x16c>)
   1f4c6:	68db      	ldr	r3, [r3, #12]
   1f4c8:	18d2      	adds	r2, r2, r3
   1f4ca:	1dbb      	adds	r3, r7, #6
   1f4cc:	8819      	ldrh	r1, [r3, #0]
   1f4ce:	68fb      	ldr	r3, [r7, #12]
   1f4d0:	18cb      	adds	r3, r1, r3
   1f4d2:	429a      	cmp	r2, r3
   1f4d4:	d003      	beq.n	1f4de <hif_receive+0x132>
   1f4d6:	1d7b      	adds	r3, r7, #5
   1f4d8:	781b      	ldrb	r3, [r3, #0]
   1f4da:	2b00      	cmp	r3, #0
   1f4dc:	d007      	beq.n	1f4ee <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   1f4de:	2317      	movs	r3, #23
   1f4e0:	18fc      	adds	r4, r7, r3
   1f4e2:	4b07      	ldr	r3, [pc, #28]	; (1f500 <hif_receive+0x154>)
   1f4e4:	4798      	blx	r3
   1f4e6:	0003      	movs	r3, r0
   1f4e8:	7023      	strb	r3, [r4, #0]
   1f4ea:	e000      	b.n	1f4ee <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f4ec:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1f4ee:	2317      	movs	r3, #23
   1f4f0:	18fb      	adds	r3, r7, r3
   1f4f2:	781b      	ldrb	r3, [r3, #0]
   1f4f4:	b25b      	sxtb	r3, r3
}
   1f4f6:	0018      	movs	r0, r3
   1f4f8:	46bd      	mov	sp, r7
   1f4fa:	b007      	add	sp, #28
   1f4fc:	bd90      	pop	{r4, r7, pc}
   1f4fe:	46c0      	nop			; (mov r8, r8)
   1f500:	0001e8c9 	.word	0x0001e8c9
   1f504:	00035b84 	.word	0x00035b84
   1f508:	0003585c 	.word	0x0003585c
   1f50c:	0001bafd 	.word	0x0001bafd
   1f510:	00035a88 	.word	0x00035a88
   1f514:	00035858 	.word	0x00035858
   1f518:	20005444 	.word	0x20005444
   1f51c:	00035aa8 	.word	0x00035aa8
   1f520:	00000286 	.word	0x00000286
   1f524:	00035af0 	.word	0x00035af0
   1f528:	00020935 	.word	0x00020935

0001f52c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1f52c:	b580      	push	{r7, lr}
   1f52e:	b084      	sub	sp, #16
   1f530:	af00      	add	r7, sp, #0
   1f532:	0002      	movs	r2, r0
   1f534:	6039      	str	r1, [r7, #0]
   1f536:	1dfb      	adds	r3, r7, #7
   1f538:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f53a:	230f      	movs	r3, #15
   1f53c:	18fb      	adds	r3, r7, r3
   1f53e:	2200      	movs	r2, #0
   1f540:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   1f542:	1dfb      	adds	r3, r7, #7
   1f544:	781b      	ldrb	r3, [r3, #0]
   1f546:	2b07      	cmp	r3, #7
   1f548:	d820      	bhi.n	1f58c <hif_register_cb+0x60>
   1f54a:	009a      	lsls	r2, r3, #2
   1f54c:	4b1e      	ldr	r3, [pc, #120]	; (1f5c8 <hif_register_cb+0x9c>)
   1f54e:	18d3      	adds	r3, r2, r3
   1f550:	681b      	ldr	r3, [r3, #0]
   1f552:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1f554:	4b1d      	ldr	r3, [pc, #116]	; (1f5cc <hif_register_cb+0xa0>)
   1f556:	683a      	ldr	r2, [r7, #0]
   1f558:	615a      	str	r2, [r3, #20]
			break;
   1f55a:	e02d      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   1f55c:	4b1b      	ldr	r3, [pc, #108]	; (1f5cc <hif_register_cb+0xa0>)
   1f55e:	683a      	ldr	r2, [r7, #0]
   1f560:	611a      	str	r2, [r3, #16]
			break;
   1f562:	e029      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   1f564:	4b19      	ldr	r3, [pc, #100]	; (1f5cc <hif_register_cb+0xa0>)
   1f566:	683a      	ldr	r2, [r7, #0]
   1f568:	619a      	str	r2, [r3, #24]
			break;
   1f56a:	e025      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   1f56c:	4b17      	ldr	r3, [pc, #92]	; (1f5cc <hif_register_cb+0xa0>)
   1f56e:	683a      	ldr	r2, [r7, #0]
   1f570:	621a      	str	r2, [r3, #32]
			break;
   1f572:	e021      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   1f574:	4b15      	ldr	r3, [pc, #84]	; (1f5cc <hif_register_cb+0xa0>)
   1f576:	683a      	ldr	r2, [r7, #0]
   1f578:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   1f57a:	e01d      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   1f57c:	4b13      	ldr	r3, [pc, #76]	; (1f5cc <hif_register_cb+0xa0>)
   1f57e:	683a      	ldr	r2, [r7, #0]
   1f580:	61da      	str	r2, [r3, #28]
			break;
   1f582:	e019      	b.n	1f5b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   1f584:	4b11      	ldr	r3, [pc, #68]	; (1f5cc <hif_register_cb+0xa0>)
   1f586:	683a      	ldr	r2, [r7, #0]
   1f588:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   1f58a:	e015      	b.n	1f5b8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   1f58c:	4a10      	ldr	r2, [pc, #64]	; (1f5d0 <hif_register_cb+0xa4>)
   1f58e:	4911      	ldr	r1, [pc, #68]	; (1f5d4 <hif_register_cb+0xa8>)
   1f590:	4b11      	ldr	r3, [pc, #68]	; (1f5d8 <hif_register_cb+0xac>)
   1f592:	0018      	movs	r0, r3
   1f594:	4b11      	ldr	r3, [pc, #68]	; (1f5dc <hif_register_cb+0xb0>)
   1f596:	4798      	blx	r3
   1f598:	1dfb      	adds	r3, r7, #7
   1f59a:	781a      	ldrb	r2, [r3, #0]
   1f59c:	4b10      	ldr	r3, [pc, #64]	; (1f5e0 <hif_register_cb+0xb4>)
   1f59e:	0011      	movs	r1, r2
   1f5a0:	0018      	movs	r0, r3
   1f5a2:	4b0e      	ldr	r3, [pc, #56]	; (1f5dc <hif_register_cb+0xb0>)
   1f5a4:	4798      	blx	r3
   1f5a6:	4b0f      	ldr	r3, [pc, #60]	; (1f5e4 <hif_register_cb+0xb8>)
   1f5a8:	0018      	movs	r0, r3
   1f5aa:	4b0c      	ldr	r3, [pc, #48]	; (1f5dc <hif_register_cb+0xb0>)
   1f5ac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1f5ae:	230f      	movs	r3, #15
   1f5b0:	18fb      	adds	r3, r7, r3
   1f5b2:	22f4      	movs	r2, #244	; 0xf4
   1f5b4:	701a      	strb	r2, [r3, #0]
			break;
   1f5b6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   1f5b8:	230f      	movs	r3, #15
   1f5ba:	18fb      	adds	r3, r7, r3
   1f5bc:	781b      	ldrb	r3, [r3, #0]
   1f5be:	b25b      	sxtb	r3, r3
}
   1f5c0:	0018      	movs	r0, r3
   1f5c2:	46bd      	mov	sp, r7
   1f5c4:	b004      	add	sp, #16
   1f5c6:	bd80      	pop	{r7, pc}
   1f5c8:	00035b40 	.word	0x00035b40
   1f5cc:	20005444 	.word	0x20005444
   1f5d0:	000002be 	.word	0x000002be
   1f5d4:	00035b90 	.word	0x00035b90
   1f5d8:	0003585c 	.word	0x0003585c
   1f5dc:	0001bafd 	.word	0x0001bafd
   1f5e0:	00035b34 	.word	0x00035b34
   1f5e4:	00035858 	.word	0x00035858

0001f5e8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1f5e8:	b590      	push	{r4, r7, lr}
   1f5ea:	b0af      	sub	sp, #188	; 0xbc
   1f5ec:	af02      	add	r7, sp, #8
   1f5ee:	603a      	str	r2, [r7, #0]
   1f5f0:	1dfb      	adds	r3, r7, #7
   1f5f2:	1c02      	adds	r2, r0, #0
   1f5f4:	701a      	strb	r2, [r3, #0]
   1f5f6:	1d3b      	adds	r3, r7, #4
   1f5f8:	1c0a      	adds	r2, r1, #0
   1f5fa:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1f5fc:	1dfb      	adds	r3, r7, #7
   1f5fe:	781b      	ldrb	r3, [r3, #0]
   1f600:	2b2c      	cmp	r3, #44	; 0x2c
   1f602:	d116      	bne.n	1f632 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1f604:	23a4      	movs	r3, #164	; 0xa4
   1f606:	18f9      	adds	r1, r7, r3
   1f608:	6838      	ldr	r0, [r7, #0]
   1f60a:	2300      	movs	r3, #0
   1f60c:	2204      	movs	r2, #4
   1f60e:	4cca      	ldr	r4, [pc, #808]	; (1f938 <m2m_wifi_cb+0x350>)
   1f610:	47a0      	blx	r4
   1f612:	1e03      	subs	r3, r0, #0
   1f614:	d000      	beq.n	1f618 <m2m_wifi_cb+0x30>
   1f616:	e1b4      	b.n	1f982 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   1f618:	4bc8      	ldr	r3, [pc, #800]	; (1f93c <m2m_wifi_cb+0x354>)
   1f61a:	681b      	ldr	r3, [r3, #0]
   1f61c:	2b00      	cmp	r3, #0
   1f61e:	d100      	bne.n	1f622 <m2m_wifi_cb+0x3a>
   1f620:	e1af      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1f622:	4bc6      	ldr	r3, [pc, #792]	; (1f93c <m2m_wifi_cb+0x354>)
   1f624:	681b      	ldr	r3, [r3, #0]
   1f626:	22a4      	movs	r2, #164	; 0xa4
   1f628:	18ba      	adds	r2, r7, r2
   1f62a:	0011      	movs	r1, r2
   1f62c:	202c      	movs	r0, #44	; 0x2c
   1f62e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   1f630:	e1a7      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1f632:	1dfb      	adds	r3, r7, #7
   1f634:	781b      	ldrb	r3, [r3, #0]
   1f636:	2b1b      	cmp	r3, #27
   1f638:	d116      	bne.n	1f668 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1f63a:	239c      	movs	r3, #156	; 0x9c
   1f63c:	18f9      	adds	r1, r7, r3
   1f63e:	6838      	ldr	r0, [r7, #0]
   1f640:	2300      	movs	r3, #0
   1f642:	2208      	movs	r2, #8
   1f644:	4cbc      	ldr	r4, [pc, #752]	; (1f938 <m2m_wifi_cb+0x350>)
   1f646:	47a0      	blx	r4
   1f648:	1e03      	subs	r3, r0, #0
   1f64a:	d000      	beq.n	1f64e <m2m_wifi_cb+0x66>
   1f64c:	e199      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f64e:	4bbb      	ldr	r3, [pc, #748]	; (1f93c <m2m_wifi_cb+0x354>)
   1f650:	681b      	ldr	r3, [r3, #0]
   1f652:	2b00      	cmp	r3, #0
   1f654:	d100      	bne.n	1f658 <m2m_wifi_cb+0x70>
   1f656:	e194      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1f658:	4bb8      	ldr	r3, [pc, #736]	; (1f93c <m2m_wifi_cb+0x354>)
   1f65a:	681b      	ldr	r3, [r3, #0]
   1f65c:	229c      	movs	r2, #156	; 0x9c
   1f65e:	18ba      	adds	r2, r7, r2
   1f660:	0011      	movs	r1, r2
   1f662:	201b      	movs	r0, #27
   1f664:	4798      	blx	r3
}
   1f666:	e18c      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1f668:	1dfb      	adds	r3, r7, #7
   1f66a:	781b      	ldrb	r3, [r3, #0]
   1f66c:	2b06      	cmp	r3, #6
   1f66e:	d116      	bne.n	1f69e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1f670:	230c      	movs	r3, #12
   1f672:	18f9      	adds	r1, r7, r3
   1f674:	6838      	ldr	r0, [r7, #0]
   1f676:	2301      	movs	r3, #1
   1f678:	2230      	movs	r2, #48	; 0x30
   1f67a:	4caf      	ldr	r4, [pc, #700]	; (1f938 <m2m_wifi_cb+0x350>)
   1f67c:	47a0      	blx	r4
   1f67e:	1e03      	subs	r3, r0, #0
   1f680:	d000      	beq.n	1f684 <m2m_wifi_cb+0x9c>
   1f682:	e17e      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f684:	4bad      	ldr	r3, [pc, #692]	; (1f93c <m2m_wifi_cb+0x354>)
   1f686:	681b      	ldr	r3, [r3, #0]
   1f688:	2b00      	cmp	r3, #0
   1f68a:	d100      	bne.n	1f68e <m2m_wifi_cb+0xa6>
   1f68c:	e179      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1f68e:	4bab      	ldr	r3, [pc, #684]	; (1f93c <m2m_wifi_cb+0x354>)
   1f690:	681b      	ldr	r3, [r3, #0]
   1f692:	220c      	movs	r2, #12
   1f694:	18ba      	adds	r2, r7, r2
   1f696:	0011      	movs	r1, r2
   1f698:	2006      	movs	r0, #6
   1f69a:	4798      	blx	r3
}
   1f69c:	e171      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1f69e:	1dfb      	adds	r3, r7, #7
   1f6a0:	781b      	ldrb	r3, [r3, #0]
   1f6a2:	2b0e      	cmp	r3, #14
   1f6a4:	d100      	bne.n	1f6a8 <m2m_wifi_cb+0xc0>
   1f6a6:	e16c      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1f6a8:	1dfb      	adds	r3, r7, #7
   1f6aa:	781b      	ldrb	r3, [r3, #0]
   1f6ac:	2b32      	cmp	r3, #50	; 0x32
   1f6ae:	d116      	bne.n	1f6de <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1f6b0:	2384      	movs	r3, #132	; 0x84
   1f6b2:	18f9      	adds	r1, r7, r3
   1f6b4:	6838      	ldr	r0, [r7, #0]
   1f6b6:	2300      	movs	r3, #0
   1f6b8:	2218      	movs	r2, #24
   1f6ba:	4c9f      	ldr	r4, [pc, #636]	; (1f938 <m2m_wifi_cb+0x350>)
   1f6bc:	47a0      	blx	r4
   1f6be:	1e03      	subs	r3, r0, #0
   1f6c0:	d000      	beq.n	1f6c4 <m2m_wifi_cb+0xdc>
   1f6c2:	e15e      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f6c4:	4b9d      	ldr	r3, [pc, #628]	; (1f93c <m2m_wifi_cb+0x354>)
   1f6c6:	681b      	ldr	r3, [r3, #0]
   1f6c8:	2b00      	cmp	r3, #0
   1f6ca:	d100      	bne.n	1f6ce <m2m_wifi_cb+0xe6>
   1f6cc:	e159      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1f6ce:	4b9b      	ldr	r3, [pc, #620]	; (1f93c <m2m_wifi_cb+0x354>)
   1f6d0:	681b      	ldr	r3, [r3, #0]
   1f6d2:	2284      	movs	r2, #132	; 0x84
   1f6d4:	18ba      	adds	r2, r7, r2
   1f6d6:	0011      	movs	r1, r2
   1f6d8:	2032      	movs	r0, #50	; 0x32
   1f6da:	4798      	blx	r3
}
   1f6dc:	e151      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1f6de:	1dfb      	adds	r3, r7, #7
   1f6e0:	781b      	ldrb	r3, [r3, #0]
   1f6e2:	2b2f      	cmp	r3, #47	; 0x2f
   1f6e4:	d11d      	bne.n	1f722 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1f6e6:	230c      	movs	r3, #12
   1f6e8:	18fb      	adds	r3, r7, r3
   1f6ea:	2264      	movs	r2, #100	; 0x64
   1f6ec:	2100      	movs	r1, #0
   1f6ee:	0018      	movs	r0, r3
   1f6f0:	4b93      	ldr	r3, [pc, #588]	; (1f940 <m2m_wifi_cb+0x358>)
   1f6f2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1f6f4:	230c      	movs	r3, #12
   1f6f6:	18f9      	adds	r1, r7, r3
   1f6f8:	6838      	ldr	r0, [r7, #0]
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	2264      	movs	r2, #100	; 0x64
   1f6fe:	4c8e      	ldr	r4, [pc, #568]	; (1f938 <m2m_wifi_cb+0x350>)
   1f700:	47a0      	blx	r4
   1f702:	1e03      	subs	r3, r0, #0
   1f704:	d000      	beq.n	1f708 <m2m_wifi_cb+0x120>
   1f706:	e13c      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f708:	4b8c      	ldr	r3, [pc, #560]	; (1f93c <m2m_wifi_cb+0x354>)
   1f70a:	681b      	ldr	r3, [r3, #0]
   1f70c:	2b00      	cmp	r3, #0
   1f70e:	d100      	bne.n	1f712 <m2m_wifi_cb+0x12a>
   1f710:	e137      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1f712:	4b8a      	ldr	r3, [pc, #552]	; (1f93c <m2m_wifi_cb+0x354>)
   1f714:	681b      	ldr	r3, [r3, #0]
   1f716:	220c      	movs	r2, #12
   1f718:	18ba      	adds	r2, r7, r2
   1f71a:	0011      	movs	r1, r2
   1f71c:	202f      	movs	r0, #47	; 0x2f
   1f71e:	4798      	blx	r3
}
   1f720:	e12f      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1f722:	1dfb      	adds	r3, r7, #7
   1f724:	781b      	ldrb	r3, [r3, #0]
   1f726:	2b34      	cmp	r3, #52	; 0x34
   1f728:	d137      	bne.n	1f79a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1f72a:	2380      	movs	r3, #128	; 0x80
   1f72c:	18f9      	adds	r1, r7, r3
   1f72e:	6838      	ldr	r0, [r7, #0]
   1f730:	2300      	movs	r3, #0
   1f732:	2204      	movs	r2, #4
   1f734:	4c80      	ldr	r4, [pc, #512]	; (1f938 <m2m_wifi_cb+0x350>)
   1f736:	47a0      	blx	r4
   1f738:	1e03      	subs	r3, r0, #0
   1f73a:	d000      	beq.n	1f73e <m2m_wifi_cb+0x156>
   1f73c:	e121      	b.n	1f982 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1f73e:	4b81      	ldr	r3, [pc, #516]	; (1f944 <m2m_wifi_cb+0x35c>)
   1f740:	0018      	movs	r0, r3
   1f742:	4b81      	ldr	r3, [pc, #516]	; (1f948 <m2m_wifi_cb+0x360>)
   1f744:	4798      	blx	r3
   1f746:	2380      	movs	r3, #128	; 0x80
   1f748:	18fb      	adds	r3, r7, r3
   1f74a:	681b      	ldr	r3, [r3, #0]
   1f74c:	0e1b      	lsrs	r3, r3, #24
   1f74e:	b2db      	uxtb	r3, r3
   1f750:	0019      	movs	r1, r3
   1f752:	2380      	movs	r3, #128	; 0x80
   1f754:	18fb      	adds	r3, r7, r3
   1f756:	681b      	ldr	r3, [r3, #0]
   1f758:	0c1b      	lsrs	r3, r3, #16
   1f75a:	b2db      	uxtb	r3, r3
   1f75c:	001a      	movs	r2, r3
   1f75e:	2380      	movs	r3, #128	; 0x80
   1f760:	18fb      	adds	r3, r7, r3
   1f762:	681b      	ldr	r3, [r3, #0]
   1f764:	0a1b      	lsrs	r3, r3, #8
   1f766:	b2db      	uxtb	r3, r3
   1f768:	001c      	movs	r4, r3
   1f76a:	2380      	movs	r3, #128	; 0x80
   1f76c:	18fb      	adds	r3, r7, r3
   1f76e:	681b      	ldr	r3, [r3, #0]
   1f770:	b2db      	uxtb	r3, r3
   1f772:	4876      	ldr	r0, [pc, #472]	; (1f94c <m2m_wifi_cb+0x364>)
   1f774:	9300      	str	r3, [sp, #0]
   1f776:	0023      	movs	r3, r4
   1f778:	4c73      	ldr	r4, [pc, #460]	; (1f948 <m2m_wifi_cb+0x360>)
   1f77a:	47a0      	blx	r4
   1f77c:	4b74      	ldr	r3, [pc, #464]	; (1f950 <m2m_wifi_cb+0x368>)
   1f77e:	0018      	movs	r0, r3
   1f780:	4b71      	ldr	r3, [pc, #452]	; (1f948 <m2m_wifi_cb+0x360>)
   1f782:	4798      	blx	r3
			if (gpfAppWifiCb)
   1f784:	4b6d      	ldr	r3, [pc, #436]	; (1f93c <m2m_wifi_cb+0x354>)
   1f786:	681b      	ldr	r3, [r3, #0]
   1f788:	2b00      	cmp	r3, #0
   1f78a:	d100      	bne.n	1f78e <m2m_wifi_cb+0x1a6>
   1f78c:	e0f9      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1f78e:	4b6b      	ldr	r3, [pc, #428]	; (1f93c <m2m_wifi_cb+0x354>)
   1f790:	681b      	ldr	r3, [r3, #0]
   1f792:	2100      	movs	r1, #0
   1f794:	2034      	movs	r0, #52	; 0x34
   1f796:	4798      	blx	r3
}
   1f798:	e0f3      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1f79a:	1dfb      	adds	r3, r7, #7
   1f79c:	781b      	ldrb	r3, [r3, #0]
   1f79e:	2b11      	cmp	r3, #17
   1f7a0:	d11e      	bne.n	1f7e0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   1f7a2:	4b6c      	ldr	r3, [pc, #432]	; (1f954 <m2m_wifi_cb+0x36c>)
   1f7a4:	2200      	movs	r2, #0
   1f7a6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1f7a8:	237c      	movs	r3, #124	; 0x7c
   1f7aa:	18f9      	adds	r1, r7, r3
   1f7ac:	6838      	ldr	r0, [r7, #0]
   1f7ae:	2300      	movs	r3, #0
   1f7b0:	2204      	movs	r2, #4
   1f7b2:	4c61      	ldr	r4, [pc, #388]	; (1f938 <m2m_wifi_cb+0x350>)
   1f7b4:	47a0      	blx	r4
   1f7b6:	1e03      	subs	r3, r0, #0
   1f7b8:	d000      	beq.n	1f7bc <m2m_wifi_cb+0x1d4>
   1f7ba:	e0e2      	b.n	1f982 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   1f7bc:	237c      	movs	r3, #124	; 0x7c
   1f7be:	18fb      	adds	r3, r7, r3
   1f7c0:	781a      	ldrb	r2, [r3, #0]
   1f7c2:	4b65      	ldr	r3, [pc, #404]	; (1f958 <m2m_wifi_cb+0x370>)
   1f7c4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1f7c6:	4b5d      	ldr	r3, [pc, #372]	; (1f93c <m2m_wifi_cb+0x354>)
   1f7c8:	681b      	ldr	r3, [r3, #0]
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d100      	bne.n	1f7d0 <m2m_wifi_cb+0x1e8>
   1f7ce:	e0d8      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1f7d0:	4b5a      	ldr	r3, [pc, #360]	; (1f93c <m2m_wifi_cb+0x354>)
   1f7d2:	681b      	ldr	r3, [r3, #0]
   1f7d4:	227c      	movs	r2, #124	; 0x7c
   1f7d6:	18ba      	adds	r2, r7, r2
   1f7d8:	0011      	movs	r1, r2
   1f7da:	2011      	movs	r0, #17
   1f7dc:	4798      	blx	r3
}
   1f7de:	e0d0      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1f7e0:	1dfb      	adds	r3, r7, #7
   1f7e2:	781b      	ldrb	r3, [r3, #0]
   1f7e4:	2b13      	cmp	r3, #19
   1f7e6:	d116      	bne.n	1f816 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1f7e8:	230c      	movs	r3, #12
   1f7ea:	18f9      	adds	r1, r7, r3
   1f7ec:	6838      	ldr	r0, [r7, #0]
   1f7ee:	2300      	movs	r3, #0
   1f7f0:	222c      	movs	r2, #44	; 0x2c
   1f7f2:	4c51      	ldr	r4, [pc, #324]	; (1f938 <m2m_wifi_cb+0x350>)
   1f7f4:	47a0      	blx	r4
   1f7f6:	1e03      	subs	r3, r0, #0
   1f7f8:	d000      	beq.n	1f7fc <m2m_wifi_cb+0x214>
   1f7fa:	e0c2      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f7fc:	4b4f      	ldr	r3, [pc, #316]	; (1f93c <m2m_wifi_cb+0x354>)
   1f7fe:	681b      	ldr	r3, [r3, #0]
   1f800:	2b00      	cmp	r3, #0
   1f802:	d100      	bne.n	1f806 <m2m_wifi_cb+0x21e>
   1f804:	e0bd      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1f806:	4b4d      	ldr	r3, [pc, #308]	; (1f93c <m2m_wifi_cb+0x354>)
   1f808:	681b      	ldr	r3, [r3, #0]
   1f80a:	220c      	movs	r2, #12
   1f80c:	18ba      	adds	r2, r7, r2
   1f80e:	0011      	movs	r1, r2
   1f810:	2013      	movs	r0, #19
   1f812:	4798      	blx	r3
}
   1f814:	e0b5      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1f816:	1dfb      	adds	r3, r7, #7
   1f818:	781b      	ldrb	r3, [r3, #0]
   1f81a:	2b04      	cmp	r3, #4
   1f81c:	d116      	bne.n	1f84c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1f81e:	23a8      	movs	r3, #168	; 0xa8
   1f820:	18f9      	adds	r1, r7, r3
   1f822:	6838      	ldr	r0, [r7, #0]
   1f824:	2300      	movs	r3, #0
   1f826:	2204      	movs	r2, #4
   1f828:	4c43      	ldr	r4, [pc, #268]	; (1f938 <m2m_wifi_cb+0x350>)
   1f82a:	47a0      	blx	r4
   1f82c:	1e03      	subs	r3, r0, #0
   1f82e:	d000      	beq.n	1f832 <m2m_wifi_cb+0x24a>
   1f830:	e0a7      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f832:	4b42      	ldr	r3, [pc, #264]	; (1f93c <m2m_wifi_cb+0x354>)
   1f834:	681b      	ldr	r3, [r3, #0]
   1f836:	2b00      	cmp	r3, #0
   1f838:	d100      	bne.n	1f83c <m2m_wifi_cb+0x254>
   1f83a:	e0a2      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1f83c:	4b3f      	ldr	r3, [pc, #252]	; (1f93c <m2m_wifi_cb+0x354>)
   1f83e:	681b      	ldr	r3, [r3, #0]
   1f840:	22a8      	movs	r2, #168	; 0xa8
   1f842:	18ba      	adds	r2, r7, r2
   1f844:	0011      	movs	r1, r2
   1f846:	2004      	movs	r0, #4
   1f848:	4798      	blx	r3
}
   1f84a:	e09a      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1f84c:	1dfb      	adds	r3, r7, #7
   1f84e:	781b      	ldrb	r3, [r3, #0]
   1f850:	2b65      	cmp	r3, #101	; 0x65
   1f852:	d116      	bne.n	1f882 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1f854:	23a8      	movs	r3, #168	; 0xa8
   1f856:	18f9      	adds	r1, r7, r3
   1f858:	6838      	ldr	r0, [r7, #0]
   1f85a:	2300      	movs	r3, #0
   1f85c:	2204      	movs	r2, #4
   1f85e:	4c36      	ldr	r4, [pc, #216]	; (1f938 <m2m_wifi_cb+0x350>)
   1f860:	47a0      	blx	r4
   1f862:	1e03      	subs	r3, r0, #0
   1f864:	d000      	beq.n	1f868 <m2m_wifi_cb+0x280>
   1f866:	e08c      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f868:	4b34      	ldr	r3, [pc, #208]	; (1f93c <m2m_wifi_cb+0x354>)
   1f86a:	681b      	ldr	r3, [r3, #0]
   1f86c:	2b00      	cmp	r3, #0
   1f86e:	d100      	bne.n	1f872 <m2m_wifi_cb+0x28a>
   1f870:	e087      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1f872:	4b32      	ldr	r3, [pc, #200]	; (1f93c <m2m_wifi_cb+0x354>)
   1f874:	681b      	ldr	r3, [r3, #0]
   1f876:	22a8      	movs	r2, #168	; 0xa8
   1f878:	18ba      	adds	r2, r7, r2
   1f87a:	0011      	movs	r1, r2
   1f87c:	2065      	movs	r0, #101	; 0x65
   1f87e:	4798      	blx	r3
}
   1f880:	e07f      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1f882:	1dfb      	adds	r3, r7, #7
   1f884:	781b      	ldrb	r3, [r3, #0]
   1f886:	2b09      	cmp	r3, #9
   1f888:	d116      	bne.n	1f8b8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1f88a:	230c      	movs	r3, #12
   1f88c:	18f9      	adds	r1, r7, r3
   1f88e:	6838      	ldr	r0, [r7, #0]
   1f890:	2301      	movs	r3, #1
   1f892:	2264      	movs	r2, #100	; 0x64
   1f894:	4c28      	ldr	r4, [pc, #160]	; (1f938 <m2m_wifi_cb+0x350>)
   1f896:	47a0      	blx	r4
   1f898:	1e03      	subs	r3, r0, #0
   1f89a:	d000      	beq.n	1f89e <m2m_wifi_cb+0x2b6>
   1f89c:	e071      	b.n	1f982 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f89e:	4b27      	ldr	r3, [pc, #156]	; (1f93c <m2m_wifi_cb+0x354>)
   1f8a0:	681b      	ldr	r3, [r3, #0]
   1f8a2:	2b00      	cmp	r3, #0
   1f8a4:	d100      	bne.n	1f8a8 <m2m_wifi_cb+0x2c0>
   1f8a6:	e06c      	b.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1f8a8:	4b24      	ldr	r3, [pc, #144]	; (1f93c <m2m_wifi_cb+0x354>)
   1f8aa:	681b      	ldr	r3, [r3, #0]
   1f8ac:	220c      	movs	r2, #12
   1f8ae:	18ba      	adds	r2, r7, r2
   1f8b0:	0011      	movs	r1, r2
   1f8b2:	2009      	movs	r0, #9
   1f8b4:	4798      	blx	r3
}
   1f8b6:	e064      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1f8b8:	1dfb      	adds	r3, r7, #7
   1f8ba:	781b      	ldrb	r3, [r3, #0]
   1f8bc:	2b2a      	cmp	r3, #42	; 0x2a
   1f8be:	d114      	bne.n	1f8ea <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1f8c0:	2378      	movs	r3, #120	; 0x78
   1f8c2:	18f9      	adds	r1, r7, r3
   1f8c4:	6838      	ldr	r0, [r7, #0]
   1f8c6:	2301      	movs	r3, #1
   1f8c8:	2204      	movs	r2, #4
   1f8ca:	4c1b      	ldr	r4, [pc, #108]	; (1f938 <m2m_wifi_cb+0x350>)
   1f8cc:	47a0      	blx	r4
   1f8ce:	1e03      	subs	r3, r0, #0
   1f8d0:	d157      	bne.n	1f982 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f8d2:	4b1a      	ldr	r3, [pc, #104]	; (1f93c <m2m_wifi_cb+0x354>)
   1f8d4:	681b      	ldr	r3, [r3, #0]
   1f8d6:	2b00      	cmp	r3, #0
   1f8d8:	d053      	beq.n	1f982 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1f8da:	4b18      	ldr	r3, [pc, #96]	; (1f93c <m2m_wifi_cb+0x354>)
   1f8dc:	681b      	ldr	r3, [r3, #0]
   1f8de:	2278      	movs	r2, #120	; 0x78
   1f8e0:	18ba      	adds	r2, r7, r2
   1f8e2:	0011      	movs	r1, r2
   1f8e4:	202a      	movs	r0, #42	; 0x2a
   1f8e6:	4798      	blx	r3
}
   1f8e8:	e04b      	b.n	1f982 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1f8ea:	1dfb      	adds	r3, r7, #7
   1f8ec:	781b      	ldrb	r3, [r3, #0]
   1f8ee:	2b20      	cmp	r3, #32
   1f8f0:	d134      	bne.n	1f95c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1f8f2:	2370      	movs	r3, #112	; 0x70
   1f8f4:	18f9      	adds	r1, r7, r3
   1f8f6:	6838      	ldr	r0, [r7, #0]
   1f8f8:	2300      	movs	r3, #0
   1f8fa:	2208      	movs	r2, #8
   1f8fc:	4c0e      	ldr	r4, [pc, #56]	; (1f938 <m2m_wifi_cb+0x350>)
   1f8fe:	47a0      	blx	r4
   1f900:	1e03      	subs	r3, r0, #0
   1f902:	d13e      	bne.n	1f982 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1f904:	683b      	ldr	r3, [r7, #0]
   1f906:	3308      	adds	r3, #8
   1f908:	0018      	movs	r0, r3
   1f90a:	2370      	movs	r3, #112	; 0x70
   1f90c:	18fb      	adds	r3, r7, r3
   1f90e:	6819      	ldr	r1, [r3, #0]
   1f910:	2370      	movs	r3, #112	; 0x70
   1f912:	18fb      	adds	r3, r7, r3
   1f914:	889a      	ldrh	r2, [r3, #4]
   1f916:	2301      	movs	r3, #1
   1f918:	4c07      	ldr	r4, [pc, #28]	; (1f938 <m2m_wifi_cb+0x350>)
   1f91a:	47a0      	blx	r4
   1f91c:	1e03      	subs	r3, r0, #0
   1f91e:	d130      	bne.n	1f982 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   1f920:	4b06      	ldr	r3, [pc, #24]	; (1f93c <m2m_wifi_cb+0x354>)
   1f922:	681b      	ldr	r3, [r3, #0]
   1f924:	2b00      	cmp	r3, #0
   1f926:	d02c      	beq.n	1f982 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1f928:	4b04      	ldr	r3, [pc, #16]	; (1f93c <m2m_wifi_cb+0x354>)
   1f92a:	681b      	ldr	r3, [r3, #0]
   1f92c:	2270      	movs	r2, #112	; 0x70
   1f92e:	18ba      	adds	r2, r7, r2
   1f930:	0011      	movs	r1, r2
   1f932:	2020      	movs	r0, #32
   1f934:	4798      	blx	r3
}
   1f936:	e024      	b.n	1f982 <m2m_wifi_cb+0x39a>
   1f938:	0001f3ad 	.word	0x0001f3ad
   1f93c:	20003d00 	.word	0x20003d00
   1f940:	0001e831 	.word	0x0001e831
   1f944:	00035ba0 	.word	0x00035ba0
   1f948:	0001bafd 	.word	0x0001bafd
   1f94c:	00035bac 	.word	0x00035bac
   1f950:	00035bcc 	.word	0x00035bcc
   1f954:	20003cfd 	.word	0x20003cfd
   1f958:	20003cfc 	.word	0x20003cfc
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1f95c:	2324      	movs	r3, #36	; 0x24
   1f95e:	33ff      	adds	r3, #255	; 0xff
   1f960:	001a      	movs	r2, r3
   1f962:	490a      	ldr	r1, [pc, #40]	; (1f98c <m2m_wifi_cb+0x3a4>)
   1f964:	4b0a      	ldr	r3, [pc, #40]	; (1f990 <m2m_wifi_cb+0x3a8>)
   1f966:	0018      	movs	r0, r3
   1f968:	4b0a      	ldr	r3, [pc, #40]	; (1f994 <m2m_wifi_cb+0x3ac>)
   1f96a:	4798      	blx	r3
   1f96c:	1dfb      	adds	r3, r7, #7
   1f96e:	781a      	ldrb	r2, [r3, #0]
   1f970:	4b09      	ldr	r3, [pc, #36]	; (1f998 <m2m_wifi_cb+0x3b0>)
   1f972:	0011      	movs	r1, r2
   1f974:	0018      	movs	r0, r3
   1f976:	4b07      	ldr	r3, [pc, #28]	; (1f994 <m2m_wifi_cb+0x3ac>)
   1f978:	4798      	blx	r3
   1f97a:	4b08      	ldr	r3, [pc, #32]	; (1f99c <m2m_wifi_cb+0x3b4>)
   1f97c:	0018      	movs	r0, r3
   1f97e:	4b05      	ldr	r3, [pc, #20]	; (1f994 <m2m_wifi_cb+0x3ac>)
   1f980:	4798      	blx	r3
}
   1f982:	46c0      	nop			; (mov r8, r8)
   1f984:	46bd      	mov	sp, r7
   1f986:	b02d      	add	sp, #180	; 0xb4
   1f988:	bd90      	pop	{r4, r7, pc}
   1f98a:	46c0      	nop			; (mov r8, r8)
   1f98c:	00035f6c 	.word	0x00035f6c
   1f990:	00035bd0 	.word	0x00035bd0
   1f994:	0001bafd 	.word	0x0001bafd
   1f998:	00035be4 	.word	0x00035be4
   1f99c:	00035bcc 	.word	0x00035bcc

0001f9a0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1f9a0:	b590      	push	{r4, r7, lr}
   1f9a2:	b091      	sub	sp, #68	; 0x44
   1f9a4:	af02      	add	r7, sp, #8
   1f9a6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   1f9a8:	2337      	movs	r3, #55	; 0x37
   1f9aa:	18fb      	adds	r3, r7, r3
   1f9ac:	2200      	movs	r2, #0
   1f9ae:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1f9b0:	230b      	movs	r3, #11
   1f9b2:	18fb      	adds	r3, r7, r3
   1f9b4:	2201      	movs	r2, #1
   1f9b6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1f9b8:	687b      	ldr	r3, [r7, #4]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	d104      	bne.n	1f9c8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1f9be:	2337      	movs	r3, #55	; 0x37
   1f9c0:	18fb      	adds	r3, r7, r3
   1f9c2:	22f4      	movs	r2, #244	; 0xf4
   1f9c4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   1f9c6:	e0b3      	b.n	1fb30 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1f9c8:	687b      	ldr	r3, [r7, #4]
   1f9ca:	681a      	ldr	r2, [r3, #0]
   1f9cc:	4b5c      	ldr	r3, [pc, #368]	; (1fb40 <m2m_wifi_init+0x1a0>)
   1f9ce:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1f9d0:	4b5c      	ldr	r3, [pc, #368]	; (1fb44 <m2m_wifi_init+0x1a4>)
   1f9d2:	2200      	movs	r2, #0
   1f9d4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1f9d6:	2337      	movs	r3, #55	; 0x37
   1f9d8:	18fc      	adds	r4, r7, r3
   1f9da:	230b      	movs	r3, #11
   1f9dc:	18fb      	adds	r3, r7, r3
   1f9de:	0018      	movs	r0, r3
   1f9e0:	4b59      	ldr	r3, [pc, #356]	; (1fb48 <m2m_wifi_init+0x1a8>)
   1f9e2:	4798      	blx	r3
   1f9e4:	0003      	movs	r3, r0
   1f9e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1f9e8:	2337      	movs	r3, #55	; 0x37
   1f9ea:	18fb      	adds	r3, r7, r3
   1f9ec:	781b      	ldrb	r3, [r3, #0]
   1f9ee:	b25b      	sxtb	r3, r3
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	d000      	beq.n	1f9f6 <m2m_wifi_init+0x56>
   1f9f4:	e099      	b.n	1fb2a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   1f9f6:	2337      	movs	r3, #55	; 0x37
   1f9f8:	18fc      	adds	r4, r7, r3
   1f9fa:	2000      	movs	r0, #0
   1f9fc:	4b53      	ldr	r3, [pc, #332]	; (1fb4c <m2m_wifi_init+0x1ac>)
   1f9fe:	4798      	blx	r3
   1fa00:	0003      	movs	r3, r0
   1fa02:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1fa04:	2337      	movs	r3, #55	; 0x37
   1fa06:	18fb      	adds	r3, r7, r3
   1fa08:	781b      	ldrb	r3, [r3, #0]
   1fa0a:	b25b      	sxtb	r3, r3
   1fa0c:	2b00      	cmp	r3, #0
   1fa0e:	d000      	beq.n	1fa12 <m2m_wifi_init+0x72>
   1fa10:	e086      	b.n	1fb20 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1fa12:	4b4f      	ldr	r3, [pc, #316]	; (1fb50 <m2m_wifi_init+0x1b0>)
   1fa14:	0019      	movs	r1, r3
   1fa16:	2001      	movs	r0, #1
   1fa18:	4b4e      	ldr	r3, [pc, #312]	; (1fb54 <m2m_wifi_init+0x1b4>)
   1fa1a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   1fa1c:	2337      	movs	r3, #55	; 0x37
   1fa1e:	18fc      	adds	r4, r7, r3
   1fa20:	230c      	movs	r3, #12
   1fa22:	18fb      	adds	r3, r7, r3
   1fa24:	0018      	movs	r0, r3
   1fa26:	4b4c      	ldr	r3, [pc, #304]	; (1fb58 <m2m_wifi_init+0x1b8>)
   1fa28:	4798      	blx	r3
   1fa2a:	0003      	movs	r3, r0
   1fa2c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1fa2e:	4b4b      	ldr	r3, [pc, #300]	; (1fb5c <m2m_wifi_init+0x1bc>)
   1fa30:	0018      	movs	r0, r3
   1fa32:	4b4b      	ldr	r3, [pc, #300]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa34:	4798      	blx	r3
   1fa36:	230c      	movs	r3, #12
   1fa38:	18fb      	adds	r3, r7, r3
   1fa3a:	791b      	ldrb	r3, [r3, #4]
   1fa3c:	0019      	movs	r1, r3
   1fa3e:	230c      	movs	r3, #12
   1fa40:	18fb      	adds	r3, r7, r3
   1fa42:	795b      	ldrb	r3, [r3, #5]
   1fa44:	001a      	movs	r2, r3
   1fa46:	230c      	movs	r3, #12
   1fa48:	18fb      	adds	r3, r7, r3
   1fa4a:	799b      	ldrb	r3, [r3, #6]
   1fa4c:	001c      	movs	r4, r3
   1fa4e:	230c      	movs	r3, #12
   1fa50:	18fb      	adds	r3, r7, r3
   1fa52:	8c1b      	ldrh	r3, [r3, #32]
   1fa54:	4843      	ldr	r0, [pc, #268]	; (1fb64 <m2m_wifi_init+0x1c4>)
   1fa56:	9300      	str	r3, [sp, #0]
   1fa58:	0023      	movs	r3, r4
   1fa5a:	4c41      	ldr	r4, [pc, #260]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa5c:	47a0      	blx	r4
   1fa5e:	4b42      	ldr	r3, [pc, #264]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1fa60:	0018      	movs	r0, r3
   1fa62:	4b3f      	ldr	r3, [pc, #252]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa64:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1fa66:	4b3d      	ldr	r3, [pc, #244]	; (1fb5c <m2m_wifi_init+0x1bc>)
   1fa68:	0018      	movs	r0, r3
   1fa6a:	4b3d      	ldr	r3, [pc, #244]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa6c:	4798      	blx	r3
   1fa6e:	230c      	movs	r3, #12
   1fa70:	18fb      	adds	r3, r7, r3
   1fa72:	3316      	adds	r3, #22
   1fa74:	001a      	movs	r2, r3
   1fa76:	230c      	movs	r3, #12
   1fa78:	18fb      	adds	r3, r7, r3
   1fa7a:	330a      	adds	r3, #10
   1fa7c:	0019      	movs	r1, r3
   1fa7e:	4b3b      	ldr	r3, [pc, #236]	; (1fb6c <m2m_wifi_init+0x1cc>)
   1fa80:	0018      	movs	r0, r3
   1fa82:	4b37      	ldr	r3, [pc, #220]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa84:	4798      	blx	r3
   1fa86:	4b38      	ldr	r3, [pc, #224]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1fa88:	0018      	movs	r0, r3
   1fa8a:	4b35      	ldr	r3, [pc, #212]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa8c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1fa8e:	4b33      	ldr	r3, [pc, #204]	; (1fb5c <m2m_wifi_init+0x1bc>)
   1fa90:	0018      	movs	r0, r3
   1fa92:	4b33      	ldr	r3, [pc, #204]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fa94:	4798      	blx	r3
   1fa96:	230c      	movs	r3, #12
   1fa98:	18fb      	adds	r3, r7, r3
   1fa9a:	79db      	ldrb	r3, [r3, #7]
   1fa9c:	0019      	movs	r1, r3
   1fa9e:	230c      	movs	r3, #12
   1faa0:	18fb      	adds	r3, r7, r3
   1faa2:	7a1b      	ldrb	r3, [r3, #8]
   1faa4:	001a      	movs	r2, r3
   1faa6:	230c      	movs	r3, #12
   1faa8:	18fb      	adds	r3, r7, r3
   1faaa:	7a5b      	ldrb	r3, [r3, #9]
   1faac:	4830      	ldr	r0, [pc, #192]	; (1fb70 <m2m_wifi_init+0x1d0>)
   1faae:	4c2c      	ldr	r4, [pc, #176]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fab0:	47a0      	blx	r4
   1fab2:	4b2d      	ldr	r3, [pc, #180]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1fab4:	0018      	movs	r0, r3
   1fab6:	4b2a      	ldr	r3, [pc, #168]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fab8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1faba:	4b28      	ldr	r3, [pc, #160]	; (1fb5c <m2m_wifi_init+0x1bc>)
   1fabc:	0018      	movs	r0, r3
   1fabe:	4b28      	ldr	r3, [pc, #160]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fac0:	4798      	blx	r3
   1fac2:	482c      	ldr	r0, [pc, #176]	; (1fb74 <m2m_wifi_init+0x1d4>)
   1fac4:	2304      	movs	r3, #4
   1fac6:	2205      	movs	r2, #5
   1fac8:	2113      	movs	r1, #19
   1faca:	4c25      	ldr	r4, [pc, #148]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1facc:	47a0      	blx	r4
   1face:	4b26      	ldr	r3, [pc, #152]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1fad0:	0018      	movs	r0, r3
   1fad2:	4b23      	ldr	r3, [pc, #140]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fad4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1fad6:	4b21      	ldr	r3, [pc, #132]	; (1fb5c <m2m_wifi_init+0x1bc>)
   1fad8:	0018      	movs	r0, r3
   1fada:	4b21      	ldr	r3, [pc, #132]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fadc:	4798      	blx	r3
   1fade:	4a26      	ldr	r2, [pc, #152]	; (1fb78 <m2m_wifi_init+0x1d8>)
   1fae0:	4926      	ldr	r1, [pc, #152]	; (1fb7c <m2m_wifi_init+0x1dc>)
   1fae2:	4b27      	ldr	r3, [pc, #156]	; (1fb80 <m2m_wifi_init+0x1e0>)
   1fae4:	0018      	movs	r0, r3
   1fae6:	4b1e      	ldr	r3, [pc, #120]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fae8:	4798      	blx	r3
   1faea:	4b1f      	ldr	r3, [pc, #124]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1faec:	0018      	movs	r0, r3
   1faee:	4b1c      	ldr	r3, [pc, #112]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1faf0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1faf2:	2337      	movs	r3, #55	; 0x37
   1faf4:	18fb      	adds	r3, r7, r3
   1faf6:	781b      	ldrb	r3, [r3, #0]
   1faf8:	b25b      	sxtb	r3, r3
   1fafa:	330d      	adds	r3, #13
   1fafc:	d117      	bne.n	1fb2e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   1fafe:	23e8      	movs	r3, #232	; 0xe8
   1fb00:	33ff      	adds	r3, #255	; 0xff
   1fb02:	001a      	movs	r2, r3
   1fb04:	491f      	ldr	r1, [pc, #124]	; (1fb84 <m2m_wifi_init+0x1e4>)
   1fb06:	4b20      	ldr	r3, [pc, #128]	; (1fb88 <m2m_wifi_init+0x1e8>)
   1fb08:	0018      	movs	r0, r3
   1fb0a:	4b15      	ldr	r3, [pc, #84]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fb0c:	4798      	blx	r3
   1fb0e:	4b1f      	ldr	r3, [pc, #124]	; (1fb8c <m2m_wifi_init+0x1ec>)
   1fb10:	0018      	movs	r0, r3
   1fb12:	4b13      	ldr	r3, [pc, #76]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fb14:	4798      	blx	r3
   1fb16:	4b14      	ldr	r3, [pc, #80]	; (1fb68 <m2m_wifi_init+0x1c8>)
   1fb18:	0018      	movs	r0, r3
   1fb1a:	4b11      	ldr	r3, [pc, #68]	; (1fb60 <m2m_wifi_init+0x1c0>)
   1fb1c:	4798      	blx	r3
	}

	goto _EXIT0;
   1fb1e:	e006      	b.n	1fb2e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1fb20:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   1fb22:	2000      	movs	r0, #0
   1fb24:	4b1a      	ldr	r3, [pc, #104]	; (1fb90 <m2m_wifi_init+0x1f0>)
   1fb26:	4798      	blx	r3
   1fb28:	e002      	b.n	1fb30 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1fb2a:	46c0      	nop			; (mov r8, r8)
   1fb2c:	e000      	b.n	1fb30 <m2m_wifi_init+0x190>
	goto _EXIT0;
   1fb2e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   1fb30:	2337      	movs	r3, #55	; 0x37
   1fb32:	18fb      	adds	r3, r7, r3
   1fb34:	781b      	ldrb	r3, [r3, #0]
   1fb36:	b25b      	sxtb	r3, r3
}
   1fb38:	0018      	movs	r0, r3
   1fb3a:	46bd      	mov	sp, r7
   1fb3c:	b00f      	add	sp, #60	; 0x3c
   1fb3e:	bd90      	pop	{r4, r7, pc}
   1fb40:	20003d00 	.word	0x20003d00
   1fb44:	20003cfd 	.word	0x20003cfd
   1fb48:	00020cc5 	.word	0x00020cc5
   1fb4c:	0001ea49 	.word	0x0001ea49
   1fb50:	0001f5e9 	.word	0x0001f5e9
   1fb54:	0001f52d 	.word	0x0001f52d
   1fb58:	00020af9 	.word	0x00020af9
   1fb5c:	00035ba0 	.word	0x00035ba0
   1fb60:	0001bafd 	.word	0x0001bafd
   1fb64:	00035d44 	.word	0x00035d44
   1fb68:	00035bcc 	.word	0x00035bcc
   1fb6c:	00035d6c 	.word	0x00035d6c
   1fb70:	00035d88 	.word	0x00035d88
   1fb74:	00035dac 	.word	0x00035dac
   1fb78:	00035dc4 	.word	0x00035dc4
   1fb7c:	00035dd0 	.word	0x00035dd0
   1fb80:	00035ddc 	.word	0x00035ddc
   1fb84:	00035f78 	.word	0x00035f78
   1fb88:	00035bd0 	.word	0x00035bd0
   1fb8c:	00035df4 	.word	0x00035df4
   1fb90:	00020e55 	.word	0x00020e55

0001fb94 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1fb94:	b580      	push	{r7, lr}
   1fb96:	b082      	sub	sp, #8
   1fb98:	af00      	add	r7, sp, #0
   1fb9a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   1fb9c:	4b03      	ldr	r3, [pc, #12]	; (1fbac <m2m_wifi_handle_events+0x18>)
   1fb9e:	4798      	blx	r3
   1fba0:	0003      	movs	r3, r0
}
   1fba2:	0018      	movs	r0, r3
   1fba4:	46bd      	mov	sp, r7
   1fba6:	b002      	add	sp, #8
   1fba8:	bd80      	pop	{r7, pc}
   1fbaa:	46c0      	nop			; (mov r8, r8)
   1fbac:	0001f30d 	.word	0x0001f30d

0001fbb0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   1fbb0:	b590      	push	{r4, r7, lr}
   1fbb2:	b087      	sub	sp, #28
   1fbb4:	af02      	add	r7, sp, #8
   1fbb6:	60f8      	str	r0, [r7, #12]
   1fbb8:	0008      	movs	r0, r1
   1fbba:	0011      	movs	r1, r2
   1fbbc:	607b      	str	r3, [r7, #4]
   1fbbe:	230b      	movs	r3, #11
   1fbc0:	18fb      	adds	r3, r7, r3
   1fbc2:	1c02      	adds	r2, r0, #0
   1fbc4:	701a      	strb	r2, [r3, #0]
   1fbc6:	230a      	movs	r3, #10
   1fbc8:	18fb      	adds	r3, r7, r3
   1fbca:	1c0a      	adds	r2, r1, #0
   1fbcc:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1fbce:	687c      	ldr	r4, [r7, #4]
   1fbd0:	230a      	movs	r3, #10
   1fbd2:	18fb      	adds	r3, r7, r3
   1fbd4:	781a      	ldrb	r2, [r3, #0]
   1fbd6:	230b      	movs	r3, #11
   1fbd8:	18fb      	adds	r3, r7, r3
   1fbda:	7819      	ldrb	r1, [r3, #0]
   1fbdc:	68f8      	ldr	r0, [r7, #12]
   1fbde:	2300      	movs	r3, #0
   1fbe0:	9301      	str	r3, [sp, #4]
   1fbe2:	2320      	movs	r3, #32
   1fbe4:	18fb      	adds	r3, r7, r3
   1fbe6:	881b      	ldrh	r3, [r3, #0]
   1fbe8:	9300      	str	r3, [sp, #0]
   1fbea:	0023      	movs	r3, r4
   1fbec:	4c03      	ldr	r4, [pc, #12]	; (1fbfc <m2m_wifi_connect+0x4c>)
   1fbee:	47a0      	blx	r4
   1fbf0:	0003      	movs	r3, r0
}
   1fbf2:	0018      	movs	r0, r3
   1fbf4:	46bd      	mov	sp, r7
   1fbf6:	b005      	add	sp, #20
   1fbf8:	bd90      	pop	{r4, r7, pc}
   1fbfa:	46c0      	nop			; (mov r8, r8)
   1fbfc:	0001fc01 	.word	0x0001fc01

0001fc00 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1fc00:	b5b0      	push	{r4, r5, r7, lr}
   1fc02:	b0aa      	sub	sp, #168	; 0xa8
   1fc04:	af04      	add	r7, sp, #16
   1fc06:	60f8      	str	r0, [r7, #12]
   1fc08:	0008      	movs	r0, r1
   1fc0a:	0011      	movs	r1, r2
   1fc0c:	607b      	str	r3, [r7, #4]
   1fc0e:	230b      	movs	r3, #11
   1fc10:	18fb      	adds	r3, r7, r3
   1fc12:	1c02      	adds	r2, r0, #0
   1fc14:	701a      	strb	r2, [r3, #0]
   1fc16:	230a      	movs	r3, #10
   1fc18:	18fb      	adds	r3, r7, r3
   1fc1a:	1c0a      	adds	r2, r1, #0
   1fc1c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   1fc1e:	2397      	movs	r3, #151	; 0x97
   1fc20:	18fb      	adds	r3, r7, r3
   1fc22:	2200      	movs	r2, #0
   1fc24:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1fc26:	230a      	movs	r3, #10
   1fc28:	18fb      	adds	r3, r7, r3
   1fc2a:	781b      	ldrb	r3, [r3, #0]
   1fc2c:	2b01      	cmp	r3, #1
   1fc2e:	d100      	bne.n	1fc32 <m2m_wifi_connect_sc+0x32>
   1fc30:	e085      	b.n	1fd3e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   1fc32:	687b      	ldr	r3, [r7, #4]
   1fc34:	2b00      	cmp	r3, #0
   1fc36:	d112      	bne.n	1fc5e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   1fc38:	4ad8      	ldr	r2, [pc, #864]	; (1ff9c <m2m_wifi_connect_sc+0x39c>)
   1fc3a:	49d9      	ldr	r1, [pc, #868]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fc3c:	4bd9      	ldr	r3, [pc, #868]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1fc3e:	0018      	movs	r0, r3
   1fc40:	4bd9      	ldr	r3, [pc, #868]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fc42:	4798      	blx	r3
   1fc44:	4bd9      	ldr	r3, [pc, #868]	; (1ffac <m2m_wifi_connect_sc+0x3ac>)
   1fc46:	0018      	movs	r0, r3
   1fc48:	4bd7      	ldr	r3, [pc, #860]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fc4a:	4798      	blx	r3
   1fc4c:	4bd8      	ldr	r3, [pc, #864]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fc4e:	0018      	movs	r0, r3
   1fc50:	4bd5      	ldr	r3, [pc, #852]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fc52:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fc54:	2397      	movs	r3, #151	; 0x97
   1fc56:	18fb      	adds	r3, r7, r3
   1fc58:	22f4      	movs	r2, #244	; 0xf4
   1fc5a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fc5c:	e1f9      	b.n	20052 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1fc5e:	230a      	movs	r3, #10
   1fc60:	18fb      	adds	r3, r7, r3
   1fc62:	781b      	ldrb	r3, [r3, #0]
   1fc64:	2b02      	cmp	r3, #2
   1fc66:	d16a      	bne.n	1fd3e <m2m_wifi_connect_sc+0x13e>
   1fc68:	687b      	ldr	r3, [r7, #4]
   1fc6a:	0018      	movs	r0, r3
   1fc6c:	4bd1      	ldr	r3, [pc, #836]	; (1ffb4 <m2m_wifi_connect_sc+0x3b4>)
   1fc6e:	4798      	blx	r3
   1fc70:	0003      	movs	r3, r0
   1fc72:	2b40      	cmp	r3, #64	; 0x40
   1fc74:	d163      	bne.n	1fd3e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   1fc76:	2396      	movs	r3, #150	; 0x96
   1fc78:	18fb      	adds	r3, r7, r3
   1fc7a:	2200      	movs	r2, #0
   1fc7c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   1fc7e:	687b      	ldr	r3, [r7, #4]
   1fc80:	2290      	movs	r2, #144	; 0x90
   1fc82:	18ba      	adds	r2, r7, r2
   1fc84:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1fc86:	e055      	b.n	1fd34 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1fc88:	2396      	movs	r3, #150	; 0x96
   1fc8a:	18fb      	adds	r3, r7, r3
   1fc8c:	781b      	ldrb	r3, [r3, #0]
   1fc8e:	2290      	movs	r2, #144	; 0x90
   1fc90:	18ba      	adds	r2, r7, r2
   1fc92:	6812      	ldr	r2, [r2, #0]
   1fc94:	18d3      	adds	r3, r2, r3
   1fc96:	781b      	ldrb	r3, [r3, #0]
   1fc98:	2b2f      	cmp	r3, #47	; 0x2f
   1fc9a:	d931      	bls.n	1fd00 <m2m_wifi_connect_sc+0x100>
   1fc9c:	2396      	movs	r3, #150	; 0x96
   1fc9e:	18fb      	adds	r3, r7, r3
   1fca0:	781b      	ldrb	r3, [r3, #0]
   1fca2:	2290      	movs	r2, #144	; 0x90
   1fca4:	18ba      	adds	r2, r7, r2
   1fca6:	6812      	ldr	r2, [r2, #0]
   1fca8:	18d3      	adds	r3, r2, r3
   1fcaa:	781b      	ldrb	r3, [r3, #0]
   1fcac:	2b39      	cmp	r3, #57	; 0x39
   1fcae:	d909      	bls.n	1fcc4 <m2m_wifi_connect_sc+0xc4>
   1fcb0:	2396      	movs	r3, #150	; 0x96
   1fcb2:	18fb      	adds	r3, r7, r3
   1fcb4:	781b      	ldrb	r3, [r3, #0]
   1fcb6:	2290      	movs	r2, #144	; 0x90
   1fcb8:	18ba      	adds	r2, r7, r2
   1fcba:	6812      	ldr	r2, [r2, #0]
   1fcbc:	18d3      	adds	r3, r2, r3
   1fcbe:	781b      	ldrb	r3, [r3, #0]
   1fcc0:	2b40      	cmp	r3, #64	; 0x40
   1fcc2:	d91d      	bls.n	1fd00 <m2m_wifi_connect_sc+0x100>
   1fcc4:	2396      	movs	r3, #150	; 0x96
   1fcc6:	18fb      	adds	r3, r7, r3
   1fcc8:	781b      	ldrb	r3, [r3, #0]
   1fcca:	2290      	movs	r2, #144	; 0x90
   1fccc:	18ba      	adds	r2, r7, r2
   1fcce:	6812      	ldr	r2, [r2, #0]
   1fcd0:	18d3      	adds	r3, r2, r3
   1fcd2:	781b      	ldrb	r3, [r3, #0]
   1fcd4:	2b46      	cmp	r3, #70	; 0x46
   1fcd6:	d909      	bls.n	1fcec <m2m_wifi_connect_sc+0xec>
   1fcd8:	2396      	movs	r3, #150	; 0x96
   1fcda:	18fb      	adds	r3, r7, r3
   1fcdc:	781b      	ldrb	r3, [r3, #0]
   1fcde:	2290      	movs	r2, #144	; 0x90
   1fce0:	18ba      	adds	r2, r7, r2
   1fce2:	6812      	ldr	r2, [r2, #0]
   1fce4:	18d3      	adds	r3, r2, r3
   1fce6:	781b      	ldrb	r3, [r3, #0]
   1fce8:	2b60      	cmp	r3, #96	; 0x60
   1fcea:	d909      	bls.n	1fd00 <m2m_wifi_connect_sc+0x100>
   1fcec:	2396      	movs	r3, #150	; 0x96
   1fcee:	18fb      	adds	r3, r7, r3
   1fcf0:	781b      	ldrb	r3, [r3, #0]
   1fcf2:	2290      	movs	r2, #144	; 0x90
   1fcf4:	18ba      	adds	r2, r7, r2
   1fcf6:	6812      	ldr	r2, [r2, #0]
   1fcf8:	18d3      	adds	r3, r2, r3
   1fcfa:	781b      	ldrb	r3, [r3, #0]
   1fcfc:	2b66      	cmp	r3, #102	; 0x66
   1fcfe:	d912      	bls.n	1fd26 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   1fd00:	4aad      	ldr	r2, [pc, #692]	; (1ffb8 <m2m_wifi_connect_sc+0x3b8>)
   1fd02:	49a7      	ldr	r1, [pc, #668]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fd04:	4ba7      	ldr	r3, [pc, #668]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1fd06:	0018      	movs	r0, r3
   1fd08:	4ba7      	ldr	r3, [pc, #668]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd0a:	4798      	blx	r3
   1fd0c:	4bab      	ldr	r3, [pc, #684]	; (1ffbc <m2m_wifi_connect_sc+0x3bc>)
   1fd0e:	0018      	movs	r0, r3
   1fd10:	4ba5      	ldr	r3, [pc, #660]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd12:	4798      	blx	r3
   1fd14:	4ba6      	ldr	r3, [pc, #664]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fd16:	0018      	movs	r0, r3
   1fd18:	4ba3      	ldr	r3, [pc, #652]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd1a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   1fd1c:	2397      	movs	r3, #151	; 0x97
   1fd1e:	18fb      	adds	r3, r7, r3
   1fd20:	22f4      	movs	r2, #244	; 0xf4
   1fd22:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1fd24:	e195      	b.n	20052 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   1fd26:	2396      	movs	r3, #150	; 0x96
   1fd28:	18fb      	adds	r3, r7, r3
   1fd2a:	781a      	ldrb	r2, [r3, #0]
   1fd2c:	2396      	movs	r3, #150	; 0x96
   1fd2e:	18fb      	adds	r3, r7, r3
   1fd30:	3201      	adds	r2, #1
   1fd32:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1fd34:	2396      	movs	r3, #150	; 0x96
   1fd36:	18fb      	adds	r3, r7, r3
   1fd38:	781b      	ldrb	r3, [r3, #0]
   1fd3a:	2b3f      	cmp	r3, #63	; 0x3f
   1fd3c:	d9a4      	bls.n	1fc88 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1fd3e:	230b      	movs	r3, #11
   1fd40:	18fb      	adds	r3, r7, r3
   1fd42:	781b      	ldrb	r3, [r3, #0]
   1fd44:	2b00      	cmp	r3, #0
   1fd46:	d004      	beq.n	1fd52 <m2m_wifi_connect_sc+0x152>
   1fd48:	230b      	movs	r3, #11
   1fd4a:	18fb      	adds	r3, r7, r3
   1fd4c:	781b      	ldrb	r3, [r3, #0]
   1fd4e:	2b20      	cmp	r3, #32
   1fd50:	d913      	bls.n	1fd7a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   1fd52:	238c      	movs	r3, #140	; 0x8c
   1fd54:	009a      	lsls	r2, r3, #2
   1fd56:	4992      	ldr	r1, [pc, #584]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fd58:	4b92      	ldr	r3, [pc, #584]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1fd5a:	0018      	movs	r0, r3
   1fd5c:	4b92      	ldr	r3, [pc, #584]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd5e:	4798      	blx	r3
   1fd60:	4b97      	ldr	r3, [pc, #604]	; (1ffc0 <m2m_wifi_connect_sc+0x3c0>)
   1fd62:	0018      	movs	r0, r3
   1fd64:	4b90      	ldr	r3, [pc, #576]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd66:	4798      	blx	r3
   1fd68:	4b91      	ldr	r3, [pc, #580]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fd6a:	0018      	movs	r0, r3
   1fd6c:	4b8e      	ldr	r3, [pc, #568]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fd6e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   1fd70:	2397      	movs	r3, #151	; 0x97
   1fd72:	18fb      	adds	r3, r7, r3
   1fd74:	22f4      	movs	r2, #244	; 0xf4
   1fd76:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   1fd78:	e16b      	b.n	20052 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1fd7a:	23a8      	movs	r3, #168	; 0xa8
   1fd7c:	18fb      	adds	r3, r7, r3
   1fd7e:	881b      	ldrh	r3, [r3, #0]
   1fd80:	2b00      	cmp	r3, #0
   1fd82:	d004      	beq.n	1fd8e <m2m_wifi_connect_sc+0x18e>
   1fd84:	23a8      	movs	r3, #168	; 0xa8
   1fd86:	18fb      	adds	r3, r7, r3
   1fd88:	881b      	ldrh	r3, [r3, #0]
   1fd8a:	2b0e      	cmp	r3, #14
   1fd8c:	d917      	bls.n	1fdbe <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1fd8e:	23a8      	movs	r3, #168	; 0xa8
   1fd90:	18fb      	adds	r3, r7, r3
   1fd92:	881b      	ldrh	r3, [r3, #0]
   1fd94:	2bff      	cmp	r3, #255	; 0xff
   1fd96:	d012      	beq.n	1fdbe <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   1fd98:	4a8a      	ldr	r2, [pc, #552]	; (1ffc4 <m2m_wifi_connect_sc+0x3c4>)
   1fd9a:	4981      	ldr	r1, [pc, #516]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fd9c:	4b81      	ldr	r3, [pc, #516]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1fd9e:	0018      	movs	r0, r3
   1fda0:	4b81      	ldr	r3, [pc, #516]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fda2:	4798      	blx	r3
   1fda4:	4b88      	ldr	r3, [pc, #544]	; (1ffc8 <m2m_wifi_connect_sc+0x3c8>)
   1fda6:	0018      	movs	r0, r3
   1fda8:	4b7f      	ldr	r3, [pc, #508]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fdaa:	4798      	blx	r3
   1fdac:	4b80      	ldr	r3, [pc, #512]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fdae:	0018      	movs	r0, r3
   1fdb0:	4b7d      	ldr	r3, [pc, #500]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fdb2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fdb4:	2397      	movs	r3, #151	; 0x97
   1fdb6:	18fb      	adds	r3, r7, r3
   1fdb8:	22f4      	movs	r2, #244	; 0xf4
   1fdba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fdbc:	e149      	b.n	20052 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1fdbe:	230b      	movs	r3, #11
   1fdc0:	18fb      	adds	r3, r7, r3
   1fdc2:	781a      	ldrb	r2, [r3, #0]
   1fdc4:	68f9      	ldr	r1, [r7, #12]
   1fdc6:	2314      	movs	r3, #20
   1fdc8:	18fb      	adds	r3, r7, r3
   1fdca:	3346      	adds	r3, #70	; 0x46
   1fdcc:	0018      	movs	r0, r3
   1fdce:	4b7f      	ldr	r3, [pc, #508]	; (1ffcc <m2m_wifi_connect_sc+0x3cc>)
   1fdd0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1fdd2:	230b      	movs	r3, #11
   1fdd4:	18fb      	adds	r3, r7, r3
   1fdd6:	781b      	ldrb	r3, [r3, #0]
   1fdd8:	2214      	movs	r2, #20
   1fdda:	18ba      	adds	r2, r7, r2
   1fddc:	2146      	movs	r1, #70	; 0x46
   1fdde:	18d3      	adds	r3, r2, r3
   1fde0:	185b      	adds	r3, r3, r1
   1fde2:	2200      	movs	r2, #0
   1fde4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1fde6:	2314      	movs	r3, #20
   1fde8:	18fb      	adds	r3, r7, r3
   1fdea:	22a8      	movs	r2, #168	; 0xa8
   1fdec:	18ba      	adds	r2, r7, r2
   1fdee:	2144      	movs	r1, #68	; 0x44
   1fdf0:	8812      	ldrh	r2, [r2, #0]
   1fdf2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1fdf4:	23ac      	movs	r3, #172	; 0xac
   1fdf6:	18fb      	adds	r3, r7, r3
   1fdf8:	781b      	ldrb	r3, [r3, #0]
   1fdfa:	1e5a      	subs	r2, r3, #1
   1fdfc:	4193      	sbcs	r3, r2
   1fdfe:	b2db      	uxtb	r3, r3
   1fe00:	0019      	movs	r1, r3
   1fe02:	2314      	movs	r3, #20
   1fe04:	18fb      	adds	r3, r7, r3
   1fe06:	2267      	movs	r2, #103	; 0x67
   1fe08:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   1fe0a:	2314      	movs	r3, #20
   1fe0c:	18fb      	adds	r3, r7, r3
   1fe0e:	228c      	movs	r2, #140	; 0x8c
   1fe10:	18ba      	adds	r2, r7, r2
   1fe12:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   1fe14:	238c      	movs	r3, #140	; 0x8c
   1fe16:	18fb      	adds	r3, r7, r3
   1fe18:	681b      	ldr	r3, [r3, #0]
   1fe1a:	220a      	movs	r2, #10
   1fe1c:	18ba      	adds	r2, r7, r2
   1fe1e:	2141      	movs	r1, #65	; 0x41
   1fe20:	7812      	ldrb	r2, [r2, #0]
   1fe22:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1fe24:	230a      	movs	r3, #10
   1fe26:	18fb      	adds	r3, r7, r3
   1fe28:	781b      	ldrb	r3, [r3, #0]
   1fe2a:	2b03      	cmp	r3, #3
   1fe2c:	d000      	beq.n	1fe30 <m2m_wifi_connect_sc+0x230>
   1fe2e:	e07d      	b.n	1ff2c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   1fe30:	687b      	ldr	r3, [r7, #4]
   1fe32:	2288      	movs	r2, #136	; 0x88
   1fe34:	18ba      	adds	r2, r7, r2
   1fe36:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   1fe38:	238c      	movs	r3, #140	; 0x8c
   1fe3a:	18fb      	adds	r3, r7, r3
   1fe3c:	681b      	ldr	r3, [r3, #0]
   1fe3e:	2284      	movs	r2, #132	; 0x84
   1fe40:	18ba      	adds	r2, r7, r2
   1fe42:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1fe44:	2388      	movs	r3, #136	; 0x88
   1fe46:	18fb      	adds	r3, r7, r3
   1fe48:	681b      	ldr	r3, [r3, #0]
   1fe4a:	781b      	ldrb	r3, [r3, #0]
   1fe4c:	3b01      	subs	r3, #1
   1fe4e:	b2da      	uxtb	r2, r3
   1fe50:	2384      	movs	r3, #132	; 0x84
   1fe52:	18fb      	adds	r3, r7, r3
   1fe54:	681b      	ldr	r3, [r3, #0]
   1fe56:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1fe58:	2384      	movs	r3, #132	; 0x84
   1fe5a:	18fb      	adds	r3, r7, r3
   1fe5c:	681b      	ldr	r3, [r3, #0]
   1fe5e:	781b      	ldrb	r3, [r3, #0]
   1fe60:	2b03      	cmp	r3, #3
   1fe62:	d919      	bls.n	1fe98 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1fe64:	2394      	movs	r3, #148	; 0x94
   1fe66:	009a      	lsls	r2, r3, #2
   1fe68:	494d      	ldr	r1, [pc, #308]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fe6a:	4b4e      	ldr	r3, [pc, #312]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1fe6c:	0018      	movs	r0, r3
   1fe6e:	4b4e      	ldr	r3, [pc, #312]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fe70:	4798      	blx	r3
   1fe72:	2384      	movs	r3, #132	; 0x84
   1fe74:	18fb      	adds	r3, r7, r3
   1fe76:	681b      	ldr	r3, [r3, #0]
   1fe78:	781b      	ldrb	r3, [r3, #0]
   1fe7a:	001a      	movs	r2, r3
   1fe7c:	4b54      	ldr	r3, [pc, #336]	; (1ffd0 <m2m_wifi_connect_sc+0x3d0>)
   1fe7e:	0011      	movs	r1, r2
   1fe80:	0018      	movs	r0, r3
   1fe82:	4b49      	ldr	r3, [pc, #292]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fe84:	4798      	blx	r3
   1fe86:	4b4a      	ldr	r3, [pc, #296]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fe88:	0018      	movs	r0, r3
   1fe8a:	4b47      	ldr	r3, [pc, #284]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fe8c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fe8e:	2397      	movs	r3, #151	; 0x97
   1fe90:	18fb      	adds	r3, r7, r3
   1fe92:	22f4      	movs	r2, #244	; 0xf4
   1fe94:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fe96:	e0dc      	b.n	20052 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1fe98:	2388      	movs	r3, #136	; 0x88
   1fe9a:	18fb      	adds	r3, r7, r3
   1fe9c:	681b      	ldr	r3, [r3, #0]
   1fe9e:	785b      	ldrb	r3, [r3, #1]
   1fea0:	3b01      	subs	r3, #1
   1fea2:	b2da      	uxtb	r2, r3
   1fea4:	2384      	movs	r3, #132	; 0x84
   1fea6:	18fb      	adds	r3, r7, r3
   1fea8:	681b      	ldr	r3, [r3, #0]
   1feaa:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1feac:	2384      	movs	r3, #132	; 0x84
   1feae:	18fb      	adds	r3, r7, r3
   1feb0:	681b      	ldr	r3, [r3, #0]
   1feb2:	785b      	ldrb	r3, [r3, #1]
   1feb4:	2b0a      	cmp	r3, #10
   1feb6:	d01e      	beq.n	1fef6 <m2m_wifi_connect_sc+0x2f6>
   1feb8:	2384      	movs	r3, #132	; 0x84
   1feba:	18fb      	adds	r3, r7, r3
   1febc:	681b      	ldr	r3, [r3, #0]
   1febe:	785b      	ldrb	r3, [r3, #1]
   1fec0:	2b1a      	cmp	r3, #26
   1fec2:	d018      	beq.n	1fef6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1fec4:	4a43      	ldr	r2, [pc, #268]	; (1ffd4 <m2m_wifi_connect_sc+0x3d4>)
   1fec6:	4936      	ldr	r1, [pc, #216]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1fec8:	4b36      	ldr	r3, [pc, #216]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1feca:	0018      	movs	r0, r3
   1fecc:	4b36      	ldr	r3, [pc, #216]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fece:	4798      	blx	r3
   1fed0:	2384      	movs	r3, #132	; 0x84
   1fed2:	18fb      	adds	r3, r7, r3
   1fed4:	681b      	ldr	r3, [r3, #0]
   1fed6:	785b      	ldrb	r3, [r3, #1]
   1fed8:	001a      	movs	r2, r3
   1feda:	4b3f      	ldr	r3, [pc, #252]	; (1ffd8 <m2m_wifi_connect_sc+0x3d8>)
   1fedc:	0011      	movs	r1, r2
   1fede:	0018      	movs	r0, r3
   1fee0:	4b31      	ldr	r3, [pc, #196]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1fee2:	4798      	blx	r3
   1fee4:	4b32      	ldr	r3, [pc, #200]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1fee6:	0018      	movs	r0, r3
   1fee8:	4b2f      	ldr	r3, [pc, #188]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1feea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1feec:	2397      	movs	r3, #151	; 0x97
   1feee:	18fb      	adds	r3, r7, r3
   1fef0:	22f4      	movs	r2, #244	; 0xf4
   1fef2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fef4:	e0ad      	b.n	20052 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1fef6:	2384      	movs	r3, #132	; 0x84
   1fef8:	18fb      	adds	r3, r7, r3
   1fefa:	681b      	ldr	r3, [r3, #0]
   1fefc:	1c98      	adds	r0, r3, #2
   1fefe:	2388      	movs	r3, #136	; 0x88
   1ff00:	18fb      	adds	r3, r7, r3
   1ff02:	681b      	ldr	r3, [r3, #0]
   1ff04:	1c99      	adds	r1, r3, #2
   1ff06:	2388      	movs	r3, #136	; 0x88
   1ff08:	18fb      	adds	r3, r7, r3
   1ff0a:	681b      	ldr	r3, [r3, #0]
   1ff0c:	785b      	ldrb	r3, [r3, #1]
   1ff0e:	001a      	movs	r2, r3
   1ff10:	4b2e      	ldr	r3, [pc, #184]	; (1ffcc <m2m_wifi_connect_sc+0x3cc>)
   1ff12:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1ff14:	2388      	movs	r3, #136	; 0x88
   1ff16:	18fb      	adds	r3, r7, r3
   1ff18:	681b      	ldr	r3, [r3, #0]
   1ff1a:	785b      	ldrb	r3, [r3, #1]
   1ff1c:	001a      	movs	r2, r3
   1ff1e:	2384      	movs	r3, #132	; 0x84
   1ff20:	18fb      	adds	r3, r7, r3
   1ff22:	681b      	ldr	r3, [r3, #0]
   1ff24:	189b      	adds	r3, r3, r2
   1ff26:	2200      	movs	r2, #0
   1ff28:	709a      	strb	r2, [r3, #2]
   1ff2a:	e081      	b.n	20030 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1ff2c:	230a      	movs	r3, #10
   1ff2e:	18fb      	adds	r3, r7, r3
   1ff30:	781b      	ldrb	r3, [r3, #0]
   1ff32:	2b02      	cmp	r3, #2
   1ff34:	d156      	bne.n	1ffe4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1ff36:	2382      	movs	r3, #130	; 0x82
   1ff38:	18fc      	adds	r4, r7, r3
   1ff3a:	687b      	ldr	r3, [r7, #4]
   1ff3c:	0018      	movs	r0, r3
   1ff3e:	4b1d      	ldr	r3, [pc, #116]	; (1ffb4 <m2m_wifi_connect_sc+0x3b4>)
   1ff40:	4798      	blx	r3
   1ff42:	0003      	movs	r3, r0
   1ff44:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1ff46:	2382      	movs	r3, #130	; 0x82
   1ff48:	18fb      	adds	r3, r7, r3
   1ff4a:	881b      	ldrh	r3, [r3, #0]
   1ff4c:	2b00      	cmp	r3, #0
   1ff4e:	d004      	beq.n	1ff5a <m2m_wifi_connect_sc+0x35a>
   1ff50:	2382      	movs	r3, #130	; 0x82
   1ff52:	18fb      	adds	r3, r7, r3
   1ff54:	881b      	ldrh	r3, [r3, #0]
   1ff56:	2b40      	cmp	r3, #64	; 0x40
   1ff58:	d912      	bls.n	1ff80 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   1ff5a:	4a20      	ldr	r2, [pc, #128]	; (1ffdc <m2m_wifi_connect_sc+0x3dc>)
   1ff5c:	4910      	ldr	r1, [pc, #64]	; (1ffa0 <m2m_wifi_connect_sc+0x3a0>)
   1ff5e:	4b11      	ldr	r3, [pc, #68]	; (1ffa4 <m2m_wifi_connect_sc+0x3a4>)
   1ff60:	0018      	movs	r0, r3
   1ff62:	4b11      	ldr	r3, [pc, #68]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1ff64:	4798      	blx	r3
   1ff66:	4b1e      	ldr	r3, [pc, #120]	; (1ffe0 <m2m_wifi_connect_sc+0x3e0>)
   1ff68:	0018      	movs	r0, r3
   1ff6a:	4b0f      	ldr	r3, [pc, #60]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1ff6c:	4798      	blx	r3
   1ff6e:	4b10      	ldr	r3, [pc, #64]	; (1ffb0 <m2m_wifi_connect_sc+0x3b0>)
   1ff70:	0018      	movs	r0, r3
   1ff72:	4b0d      	ldr	r3, [pc, #52]	; (1ffa8 <m2m_wifi_connect_sc+0x3a8>)
   1ff74:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1ff76:	2397      	movs	r3, #151	; 0x97
   1ff78:	18fb      	adds	r3, r7, r3
   1ff7a:	22f4      	movs	r2, #244	; 0xf4
   1ff7c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1ff7e:	e068      	b.n	20052 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1ff80:	238c      	movs	r3, #140	; 0x8c
   1ff82:	18fb      	adds	r3, r7, r3
   1ff84:	6818      	ldr	r0, [r3, #0]
   1ff86:	2382      	movs	r3, #130	; 0x82
   1ff88:	18fb      	adds	r3, r7, r3
   1ff8a:	881b      	ldrh	r3, [r3, #0]
   1ff8c:	3301      	adds	r3, #1
   1ff8e:	001a      	movs	r2, r3
   1ff90:	687b      	ldr	r3, [r7, #4]
   1ff92:	0019      	movs	r1, r3
   1ff94:	4b0d      	ldr	r3, [pc, #52]	; (1ffcc <m2m_wifi_connect_sc+0x3cc>)
   1ff96:	4798      	blx	r3
   1ff98:	e04a      	b.n	20030 <m2m_wifi_connect_sc+0x430>
   1ff9a:	46c0      	nop			; (mov r8, r8)
   1ff9c:	0000021a 	.word	0x0000021a
   1ffa0:	00035f88 	.word	0x00035f88
   1ffa4:	00035bd0 	.word	0x00035bd0
   1ffa8:	0001bafd 	.word	0x0001bafd
   1ffac:	00035e10 	.word	0x00035e10
   1ffb0:	00035bcc 	.word	0x00035bcc
   1ffb4:	0001e86f 	.word	0x0001e86f
   1ffb8:	00000226 	.word	0x00000226
   1ffbc:	00035e24 	.word	0x00035e24
   1ffc0:	00035e34 	.word	0x00035e34
   1ffc4:	00000239 	.word	0x00000239
   1ffc8:	00035e48 	.word	0x00035e48
   1ffcc:	0001e7f5 	.word	0x0001e7f5
   1ffd0:	00035e54 	.word	0x00035e54
   1ffd4:	00000257 	.word	0x00000257
   1ffd8:	00035e70 	.word	0x00035e70
   1ffdc:	00000266 	.word	0x00000266
   1ffe0:	00035e8c 	.word	0x00035e8c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1ffe4:	230a      	movs	r3, #10
   1ffe6:	18fb      	adds	r3, r7, r3
   1ffe8:	781b      	ldrb	r3, [r3, #0]
   1ffea:	2b04      	cmp	r3, #4
   1ffec:	d108      	bne.n	20000 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1ffee:	238c      	movs	r3, #140	; 0x8c
   1fff0:	18fb      	adds	r3, r7, r3
   1fff2:	681b      	ldr	r3, [r3, #0]
   1fff4:	6879      	ldr	r1, [r7, #4]
   1fff6:	223e      	movs	r2, #62	; 0x3e
   1fff8:	0018      	movs	r0, r3
   1fffa:	4b1a      	ldr	r3, [pc, #104]	; (20064 <m2m_wifi_connect_sc+0x464>)
   1fffc:	4798      	blx	r3
   1fffe:	e017      	b.n	20030 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   20000:	230a      	movs	r3, #10
   20002:	18fb      	adds	r3, r7, r3
   20004:	781b      	ldrb	r3, [r3, #0]
   20006:	2b01      	cmp	r3, #1
   20008:	d012      	beq.n	20030 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2000a:	4a17      	ldr	r2, [pc, #92]	; (20068 <m2m_wifi_connect_sc+0x468>)
   2000c:	4917      	ldr	r1, [pc, #92]	; (2006c <m2m_wifi_connect_sc+0x46c>)
   2000e:	4b18      	ldr	r3, [pc, #96]	; (20070 <m2m_wifi_connect_sc+0x470>)
   20010:	0018      	movs	r0, r3
   20012:	4b18      	ldr	r3, [pc, #96]	; (20074 <m2m_wifi_connect_sc+0x474>)
   20014:	4798      	blx	r3
   20016:	4b18      	ldr	r3, [pc, #96]	; (20078 <m2m_wifi_connect_sc+0x478>)
   20018:	0018      	movs	r0, r3
   2001a:	4b16      	ldr	r3, [pc, #88]	; (20074 <m2m_wifi_connect_sc+0x474>)
   2001c:	4798      	blx	r3
   2001e:	4b17      	ldr	r3, [pc, #92]	; (2007c <m2m_wifi_connect_sc+0x47c>)
   20020:	0018      	movs	r0, r3
   20022:	4b14      	ldr	r3, [pc, #80]	; (20074 <m2m_wifi_connect_sc+0x474>)
   20024:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20026:	2397      	movs	r3, #151	; 0x97
   20028:	18fb      	adds	r3, r7, r3
   2002a:	22f4      	movs	r2, #244	; 0xf4
   2002c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2002e:	e010      	b.n	20052 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   20030:	2397      	movs	r3, #151	; 0x97
   20032:	18fc      	adds	r4, r7, r3
   20034:	2314      	movs	r3, #20
   20036:	18fa      	adds	r2, r7, r3
   20038:	2300      	movs	r3, #0
   2003a:	9302      	str	r3, [sp, #8]
   2003c:	2300      	movs	r3, #0
   2003e:	9301      	str	r3, [sp, #4]
   20040:	2300      	movs	r3, #0
   20042:	9300      	str	r3, [sp, #0]
   20044:	236c      	movs	r3, #108	; 0x6c
   20046:	2128      	movs	r1, #40	; 0x28
   20048:	2001      	movs	r0, #1
   2004a:	4d0d      	ldr	r5, [pc, #52]	; (20080 <m2m_wifi_connect_sc+0x480>)
   2004c:	47a8      	blx	r5
   2004e:	0003      	movs	r3, r0
   20050:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   20052:	2397      	movs	r3, #151	; 0x97
   20054:	18fb      	adds	r3, r7, r3
   20056:	781b      	ldrb	r3, [r3, #0]
   20058:	b25b      	sxtb	r3, r3
}
   2005a:	0018      	movs	r0, r3
   2005c:	46bd      	mov	sp, r7
   2005e:	b026      	add	sp, #152	; 0x98
   20060:	bdb0      	pop	{r4, r5, r7, pc}
   20062:	46c0      	nop			; (mov r8, r8)
   20064:	0001e7f5 	.word	0x0001e7f5
   20068:	00000276 	.word	0x00000276
   2006c:	00035f88 	.word	0x00035f88
   20070:	00035bd0 	.word	0x00035bd0
   20074:	0001bafd 	.word	0x0001bafd
   20078:	00035ea8 	.word	0x00035ea8
   2007c:	00035bcc 	.word	0x00035bcc
   20080:	0001ea91 	.word	0x0001ea91

00020084 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   20084:	b580      	push	{r7, lr}
   20086:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   20088:	2300      	movs	r3, #0
}
   2008a:	0018      	movs	r0, r3
   2008c:	46bd      	mov	sp, r7
   2008e:	bd80      	pop	{r7, pc}

00020090 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   20090:	b590      	push	{r4, r7, lr}
   20092:	b087      	sub	sp, #28
   20094:	af00      	add	r7, sp, #0
   20096:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20098:	2317      	movs	r3, #23
   2009a:	18fb      	adds	r3, r7, r3
   2009c:	2200      	movs	r2, #0
   2009e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   200a0:	687b      	ldr	r3, [r7, #4]
   200a2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   200a4:	693b      	ldr	r3, [r7, #16]
   200a6:	2280      	movs	r2, #128	; 0x80
   200a8:	0052      	lsls	r2, r2, #1
   200aa:	4313      	orrs	r3, r2
   200ac:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   200ae:	693a      	ldr	r2, [r7, #16]
   200b0:	23a5      	movs	r3, #165	; 0xa5
   200b2:	015b      	lsls	r3, r3, #5
   200b4:	0011      	movs	r1, r2
   200b6:	0018      	movs	r0, r3
   200b8:	4b12      	ldr	r3, [pc, #72]	; (20104 <chip_apply_conf+0x74>)
   200ba:	4798      	blx	r3
		if(val32 != 0) {		
   200bc:	693b      	ldr	r3, [r7, #16]
   200be:	2b00      	cmp	r3, #0
   200c0:	d018      	beq.n	200f4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   200c2:	2300      	movs	r3, #0
   200c4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   200c6:	2317      	movs	r3, #23
   200c8:	18fc      	adds	r4, r7, r3
   200ca:	230c      	movs	r3, #12
   200cc:	18fa      	adds	r2, r7, r3
   200ce:	23a5      	movs	r3, #165	; 0xa5
   200d0:	015b      	lsls	r3, r3, #5
   200d2:	0011      	movs	r1, r2
   200d4:	0018      	movs	r0, r3
   200d6:	4b0c      	ldr	r3, [pc, #48]	; (20108 <chip_apply_conf+0x78>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
   200dc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   200de:	2317      	movs	r3, #23
   200e0:	18fb      	adds	r3, r7, r3
   200e2:	781b      	ldrb	r3, [r3, #0]
   200e4:	b25b      	sxtb	r3, r3
   200e6:	2b00      	cmp	r3, #0
   200e8:	d1e1      	bne.n	200ae <chip_apply_conf+0x1e>
				if(reg == val32)
   200ea:	68fa      	ldr	r2, [r7, #12]
   200ec:	693b      	ldr	r3, [r7, #16]
   200ee:	429a      	cmp	r2, r3
   200f0:	d002      	beq.n	200f8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   200f2:	e7dc      	b.n	200ae <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   200f4:	46c0      	nop			; (mov r8, r8)
   200f6:	e000      	b.n	200fa <chip_apply_conf+0x6a>
					break;
   200f8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   200fa:	2300      	movs	r3, #0
}
   200fc:	0018      	movs	r0, r3
   200fe:	46bd      	mov	sp, r7
   20100:	b007      	add	sp, #28
   20102:	bd90      	pop	{r4, r7, pc}
   20104:	000208e5 	.word	0x000208e5
   20108:	000208c1 	.word	0x000208c1

0002010c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2010c:	b590      	push	{r4, r7, lr}
   2010e:	b083      	sub	sp, #12
   20110:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   20112:	2300      	movs	r3, #0
   20114:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   20116:	1dfb      	adds	r3, r7, #7
   20118:	2200      	movs	r2, #0
   2011a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2011c:	1dfc      	adds	r4, r7, #7
   2011e:	003b      	movs	r3, r7
   20120:	4a24      	ldr	r2, [pc, #144]	; (201b4 <enable_interrupts+0xa8>)
   20122:	0019      	movs	r1, r3
   20124:	0010      	movs	r0, r2
   20126:	4b24      	ldr	r3, [pc, #144]	; (201b8 <enable_interrupts+0xac>)
   20128:	4798      	blx	r3
   2012a:	0003      	movs	r3, r0
   2012c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2012e:	1dfb      	adds	r3, r7, #7
   20130:	781b      	ldrb	r3, [r3, #0]
   20132:	b25b      	sxtb	r3, r3
   20134:	2b00      	cmp	r3, #0
   20136:	d131      	bne.n	2019c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   20138:	683b      	ldr	r3, [r7, #0]
   2013a:	2280      	movs	r2, #128	; 0x80
   2013c:	0052      	lsls	r2, r2, #1
   2013e:	4313      	orrs	r3, r2
   20140:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   20142:	683b      	ldr	r3, [r7, #0]
   20144:	1dfc      	adds	r4, r7, #7
   20146:	4a1b      	ldr	r2, [pc, #108]	; (201b4 <enable_interrupts+0xa8>)
   20148:	0019      	movs	r1, r3
   2014a:	0010      	movs	r0, r2
   2014c:	4b1b      	ldr	r3, [pc, #108]	; (201bc <enable_interrupts+0xb0>)
   2014e:	4798      	blx	r3
   20150:	0003      	movs	r3, r0
   20152:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20154:	1dfb      	adds	r3, r7, #7
   20156:	781b      	ldrb	r3, [r3, #0]
   20158:	b25b      	sxtb	r3, r3
   2015a:	2b00      	cmp	r3, #0
   2015c:	d120      	bne.n	201a0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2015e:	1dfc      	adds	r4, r7, #7
   20160:	003a      	movs	r2, r7
   20162:	23d0      	movs	r3, #208	; 0xd0
   20164:	015b      	lsls	r3, r3, #5
   20166:	0011      	movs	r1, r2
   20168:	0018      	movs	r0, r3
   2016a:	4b13      	ldr	r3, [pc, #76]	; (201b8 <enable_interrupts+0xac>)
   2016c:	4798      	blx	r3
   2016e:	0003      	movs	r3, r0
   20170:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20172:	1dfb      	adds	r3, r7, #7
   20174:	781b      	ldrb	r3, [r3, #0]
   20176:	b25b      	sxtb	r3, r3
   20178:	2b00      	cmp	r3, #0
   2017a:	d113      	bne.n	201a4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2017c:	683b      	ldr	r3, [r7, #0]
   2017e:	2280      	movs	r2, #128	; 0x80
   20180:	0252      	lsls	r2, r2, #9
   20182:	4313      	orrs	r3, r2
   20184:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   20186:	683a      	ldr	r2, [r7, #0]
   20188:	1dfc      	adds	r4, r7, #7
   2018a:	23d0      	movs	r3, #208	; 0xd0
   2018c:	015b      	lsls	r3, r3, #5
   2018e:	0011      	movs	r1, r2
   20190:	0018      	movs	r0, r3
   20192:	4b0a      	ldr	r3, [pc, #40]	; (201bc <enable_interrupts+0xb0>)
   20194:	4798      	blx	r3
   20196:	0003      	movs	r3, r0
   20198:	7023      	strb	r3, [r4, #0]
   2019a:	e004      	b.n	201a6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2019c:	46c0      	nop			; (mov r8, r8)
   2019e:	e002      	b.n	201a6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   201a0:	46c0      	nop			; (mov r8, r8)
   201a2:	e000      	b.n	201a6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   201a4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   201a6:	1dfb      	adds	r3, r7, #7
   201a8:	781b      	ldrb	r3, [r3, #0]
   201aa:	b25b      	sxtb	r3, r3
}
   201ac:	0018      	movs	r0, r3
   201ae:	46bd      	mov	sp, r7
   201b0:	b003      	add	sp, #12
   201b2:	bd90      	pop	{r4, r7, pc}
   201b4:	00001408 	.word	0x00001408
   201b8:	000208c1 	.word	0x000208c1
   201bc:	000208e5 	.word	0x000208e5

000201c0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   201c0:	b580      	push	{r7, lr}
   201c2:	b082      	sub	sp, #8
   201c4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   201c6:	4b32      	ldr	r3, [pc, #200]	; (20290 <nmi_get_chipid+0xd0>)
   201c8:	681b      	ldr	r3, [r3, #0]
   201ca:	2b00      	cmp	r3, #0
   201cc:	d159      	bne.n	20282 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   201ce:	4a30      	ldr	r2, [pc, #192]	; (20290 <nmi_get_chipid+0xd0>)
   201d0:	2380      	movs	r3, #128	; 0x80
   201d2:	015b      	lsls	r3, r3, #5
   201d4:	0011      	movs	r1, r2
   201d6:	0018      	movs	r0, r3
   201d8:	4b2e      	ldr	r3, [pc, #184]	; (20294 <nmi_get_chipid+0xd4>)
   201da:	4798      	blx	r3
   201dc:	1e03      	subs	r3, r0, #0
   201de:	d004      	beq.n	201ea <nmi_get_chipid+0x2a>
			chipid = 0;
   201e0:	4b2b      	ldr	r3, [pc, #172]	; (20290 <nmi_get_chipid+0xd0>)
   201e2:	2200      	movs	r2, #0
   201e4:	601a      	str	r2, [r3, #0]
			return 0;
   201e6:	2300      	movs	r3, #0
   201e8:	e04d      	b.n	20286 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   201ea:	1d3b      	adds	r3, r7, #4
   201ec:	4a2a      	ldr	r2, [pc, #168]	; (20298 <nmi_get_chipid+0xd8>)
   201ee:	0019      	movs	r1, r3
   201f0:	0010      	movs	r0, r2
   201f2:	4b28      	ldr	r3, [pc, #160]	; (20294 <nmi_get_chipid+0xd4>)
   201f4:	4798      	blx	r3
   201f6:	1e03      	subs	r3, r0, #0
   201f8:	d004      	beq.n	20204 <nmi_get_chipid+0x44>
			chipid = 0;
   201fa:	4b25      	ldr	r3, [pc, #148]	; (20290 <nmi_get_chipid+0xd0>)
   201fc:	2200      	movs	r2, #0
   201fe:	601a      	str	r2, [r3, #0]
			return 0;
   20200:	2300      	movs	r3, #0
   20202:	e040      	b.n	20286 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   20204:	4b22      	ldr	r3, [pc, #136]	; (20290 <nmi_get_chipid+0xd0>)
   20206:	681b      	ldr	r3, [r3, #0]
   20208:	4a24      	ldr	r2, [pc, #144]	; (2029c <nmi_get_chipid+0xdc>)
   2020a:	4293      	cmp	r3, r2
   2020c:	d106      	bne.n	2021c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2020e:	687b      	ldr	r3, [r7, #4]
   20210:	2b01      	cmp	r3, #1
   20212:	d029      	beq.n	20268 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   20214:	4b1e      	ldr	r3, [pc, #120]	; (20290 <nmi_get_chipid+0xd0>)
   20216:	4a22      	ldr	r2, [pc, #136]	; (202a0 <nmi_get_chipid+0xe0>)
   20218:	601a      	str	r2, [r3, #0]
   2021a:	e025      	b.n	20268 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2021c:	4b1c      	ldr	r3, [pc, #112]	; (20290 <nmi_get_chipid+0xd0>)
   2021e:	681b      	ldr	r3, [r3, #0]
   20220:	4a20      	ldr	r2, [pc, #128]	; (202a4 <nmi_get_chipid+0xe4>)
   20222:	4293      	cmp	r3, r2
   20224:	d10d      	bne.n	20242 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   20226:	687b      	ldr	r3, [r7, #4]
   20228:	2b03      	cmp	r3, #3
   2022a:	d01d      	beq.n	20268 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2022c:	687b      	ldr	r3, [r7, #4]
   2022e:	2b04      	cmp	r3, #4
   20230:	d103      	bne.n	2023a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   20232:	4b17      	ldr	r3, [pc, #92]	; (20290 <nmi_get_chipid+0xd0>)
   20234:	4a1c      	ldr	r2, [pc, #112]	; (202a8 <nmi_get_chipid+0xe8>)
   20236:	601a      	str	r2, [r3, #0]
   20238:	e016      	b.n	20268 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2023a:	4b15      	ldr	r3, [pc, #84]	; (20290 <nmi_get_chipid+0xd0>)
   2023c:	4a1b      	ldr	r2, [pc, #108]	; (202ac <nmi_get_chipid+0xec>)
   2023e:	601a      	str	r2, [r3, #0]
   20240:	e012      	b.n	20268 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   20242:	4b13      	ldr	r3, [pc, #76]	; (20290 <nmi_get_chipid+0xd0>)
   20244:	681b      	ldr	r3, [r3, #0]
   20246:	4a1a      	ldr	r2, [pc, #104]	; (202b0 <nmi_get_chipid+0xf0>)
   20248:	4293      	cmp	r3, r2
   2024a:	d10d      	bne.n	20268 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2024c:	4a10      	ldr	r2, [pc, #64]	; (20290 <nmi_get_chipid+0xd0>)
   2024e:	23ec      	movs	r3, #236	; 0xec
   20250:	039b      	lsls	r3, r3, #14
   20252:	0011      	movs	r1, r2
   20254:	0018      	movs	r0, r3
   20256:	4b0f      	ldr	r3, [pc, #60]	; (20294 <nmi_get_chipid+0xd4>)
   20258:	4798      	blx	r3
   2025a:	1e03      	subs	r3, r0, #0
   2025c:	d004      	beq.n	20268 <nmi_get_chipid+0xa8>
			chipid = 0;
   2025e:	4b0c      	ldr	r3, [pc, #48]	; (20290 <nmi_get_chipid+0xd0>)
   20260:	2200      	movs	r2, #0
   20262:	601a      	str	r2, [r3, #0]
			return 0;
   20264:	2300      	movs	r3, #0
   20266:	e00e      	b.n	20286 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   20268:	4b09      	ldr	r3, [pc, #36]	; (20290 <nmi_get_chipid+0xd0>)
   2026a:	681b      	ldr	r3, [r3, #0]
   2026c:	4a11      	ldr	r2, [pc, #68]	; (202b4 <nmi_get_chipid+0xf4>)
   2026e:	401a      	ands	r2, r3
   20270:	4b07      	ldr	r3, [pc, #28]	; (20290 <nmi_get_chipid+0xd0>)
   20272:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   20274:	4b06      	ldr	r3, [pc, #24]	; (20290 <nmi_get_chipid+0xd0>)
   20276:	681b      	ldr	r3, [r3, #0]
   20278:	22a0      	movs	r2, #160	; 0xa0
   2027a:	02d2      	lsls	r2, r2, #11
   2027c:	431a      	orrs	r2, r3
   2027e:	4b04      	ldr	r3, [pc, #16]	; (20290 <nmi_get_chipid+0xd0>)
   20280:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   20282:	4b03      	ldr	r3, [pc, #12]	; (20290 <nmi_get_chipid+0xd0>)
   20284:	681b      	ldr	r3, [r3, #0]
}
   20286:	0018      	movs	r0, r3
   20288:	46bd      	mov	sp, r7
   2028a:	b002      	add	sp, #8
   2028c:	bd80      	pop	{r7, pc}
   2028e:	46c0      	nop			; (mov r8, r8)
   20290:	20003d04 	.word	0x20003d04
   20294:	000208c1 	.word	0x000208c1
   20298:	000013f4 	.word	0x000013f4
   2029c:	001002a0 	.word	0x001002a0
   202a0:	001002a1 	.word	0x001002a1
   202a4:	001002b0 	.word	0x001002b0
   202a8:	001002b1 	.word	0x001002b1
   202ac:	001002b2 	.word	0x001002b2
   202b0:	001000f0 	.word	0x001000f0
   202b4:	fff0ffff 	.word	0xfff0ffff

000202b8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   202b8:	b590      	push	{r4, r7, lr}
   202ba:	b083      	sub	sp, #12
   202bc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   202be:	1dfb      	adds	r3, r7, #7
   202c0:	2200      	movs	r2, #0
   202c2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   202c4:	1dfc      	adds	r4, r7, #7
   202c6:	003b      	movs	r3, r7
   202c8:	0019      	movs	r1, r3
   202ca:	2010      	movs	r0, #16
   202cc:	4b2e      	ldr	r3, [pc, #184]	; (20388 <chip_sleep+0xd0>)
   202ce:	4798      	blx	r3
   202d0:	0003      	movs	r3, r0
   202d2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   202d4:	1dfb      	adds	r3, r7, #7
   202d6:	781b      	ldrb	r3, [r3, #0]
   202d8:	b25b      	sxtb	r3, r3
   202da:	2b00      	cmp	r3, #0
   202dc:	d145      	bne.n	2036a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   202de:	683b      	ldr	r3, [r7, #0]
   202e0:	2201      	movs	r2, #1
   202e2:	4013      	ands	r3, r2
   202e4:	d000      	beq.n	202e8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   202e6:	e7ed      	b.n	202c4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   202e8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   202ea:	1dfc      	adds	r4, r7, #7
   202ec:	003b      	movs	r3, r7
   202ee:	0019      	movs	r1, r3
   202f0:	2001      	movs	r0, #1
   202f2:	4b25      	ldr	r3, [pc, #148]	; (20388 <chip_sleep+0xd0>)
   202f4:	4798      	blx	r3
   202f6:	0003      	movs	r3, r0
   202f8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   202fa:	1dfb      	adds	r3, r7, #7
   202fc:	781b      	ldrb	r3, [r3, #0]
   202fe:	b25b      	sxtb	r3, r3
   20300:	2b00      	cmp	r3, #0
   20302:	d134      	bne.n	2036e <chip_sleep+0xb6>
	if(reg & NBIT1)
   20304:	683b      	ldr	r3, [r7, #0]
   20306:	2202      	movs	r2, #2
   20308:	4013      	ands	r3, r2
   2030a:	d010      	beq.n	2032e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2030c:	683b      	ldr	r3, [r7, #0]
   2030e:	2202      	movs	r2, #2
   20310:	4393      	bics	r3, r2
   20312:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   20314:	683b      	ldr	r3, [r7, #0]
   20316:	1dfc      	adds	r4, r7, #7
   20318:	0019      	movs	r1, r3
   2031a:	2001      	movs	r0, #1
   2031c:	4b1b      	ldr	r3, [pc, #108]	; (2038c <chip_sleep+0xd4>)
   2031e:	4798      	blx	r3
   20320:	0003      	movs	r3, r0
   20322:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   20324:	1dfb      	adds	r3, r7, #7
   20326:	781b      	ldrb	r3, [r3, #0]
   20328:	b25b      	sxtb	r3, r3
   2032a:	2b00      	cmp	r3, #0
   2032c:	d121      	bne.n	20372 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2032e:	1dfc      	adds	r4, r7, #7
   20330:	003b      	movs	r3, r7
   20332:	0019      	movs	r1, r3
   20334:	200b      	movs	r0, #11
   20336:	4b14      	ldr	r3, [pc, #80]	; (20388 <chip_sleep+0xd0>)
   20338:	4798      	blx	r3
   2033a:	0003      	movs	r3, r0
   2033c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2033e:	1dfb      	adds	r3, r7, #7
   20340:	781b      	ldrb	r3, [r3, #0]
   20342:	b25b      	sxtb	r3, r3
   20344:	2b00      	cmp	r3, #0
   20346:	d116      	bne.n	20376 <chip_sleep+0xbe>
	if(reg & NBIT0)
   20348:	683b      	ldr	r3, [r7, #0]
   2034a:	2201      	movs	r2, #1
   2034c:	4013      	ands	r3, r2
   2034e:	d013      	beq.n	20378 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   20350:	683b      	ldr	r3, [r7, #0]
   20352:	2201      	movs	r2, #1
   20354:	4393      	bics	r3, r2
   20356:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   20358:	683b      	ldr	r3, [r7, #0]
   2035a:	1dfc      	adds	r4, r7, #7
   2035c:	0019      	movs	r1, r3
   2035e:	200b      	movs	r0, #11
   20360:	4b0a      	ldr	r3, [pc, #40]	; (2038c <chip_sleep+0xd4>)
   20362:	4798      	blx	r3
   20364:	0003      	movs	r3, r0
   20366:	7023      	strb	r3, [r4, #0]
   20368:	e006      	b.n	20378 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2036a:	46c0      	nop			; (mov r8, r8)
   2036c:	e004      	b.n	20378 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2036e:	46c0      	nop			; (mov r8, r8)
   20370:	e002      	b.n	20378 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   20372:	46c0      	nop			; (mov r8, r8)
   20374:	e000      	b.n	20378 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   20376:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   20378:	1dfb      	adds	r3, r7, #7
   2037a:	781b      	ldrb	r3, [r3, #0]
   2037c:	b25b      	sxtb	r3, r3
}
   2037e:	0018      	movs	r0, r3
   20380:	46bd      	mov	sp, r7
   20382:	b003      	add	sp, #12
   20384:	bd90      	pop	{r4, r7, pc}
   20386:	46c0      	nop			; (mov r8, r8)
   20388:	000208c1 	.word	0x000208c1
   2038c:	000208e5 	.word	0x000208e5

00020390 <chip_wake>:
sint8 chip_wake(void)
{
   20390:	b590      	push	{r4, r7, lr}
   20392:	b085      	sub	sp, #20
   20394:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20396:	230f      	movs	r3, #15
   20398:	18fb      	adds	r3, r7, r3
   2039a:	2200      	movs	r2, #0
   2039c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2039e:	2300      	movs	r3, #0
   203a0:	607b      	str	r3, [r7, #4]
   203a2:	2300      	movs	r3, #0
   203a4:	603b      	str	r3, [r7, #0]
   203a6:	2300      	movs	r3, #0
   203a8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   203aa:	230f      	movs	r3, #15
   203ac:	18fc      	adds	r4, r7, r3
   203ae:	1d3b      	adds	r3, r7, #4
   203b0:	0019      	movs	r1, r3
   203b2:	200b      	movs	r0, #11
   203b4:	4b4e      	ldr	r3, [pc, #312]	; (204f0 <chip_wake+0x160>)
   203b6:	4798      	blx	r3
   203b8:	0003      	movs	r3, r0
   203ba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   203bc:	230f      	movs	r3, #15
   203be:	18fb      	adds	r3, r7, r3
   203c0:	781b      	ldrb	r3, [r3, #0]
   203c2:	b25b      	sxtb	r3, r3
   203c4:	2b00      	cmp	r3, #0
   203c6:	d000      	beq.n	203ca <chip_wake+0x3a>
   203c8:	e082      	b.n	204d0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   203ca:	687b      	ldr	r3, [r7, #4]
   203cc:	2201      	movs	r2, #1
   203ce:	4013      	ands	r3, r2
   203d0:	d111      	bne.n	203f6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   203d2:	687b      	ldr	r3, [r7, #4]
   203d4:	2201      	movs	r2, #1
   203d6:	4313      	orrs	r3, r2
   203d8:	220f      	movs	r2, #15
   203da:	18bc      	adds	r4, r7, r2
   203dc:	0019      	movs	r1, r3
   203de:	200b      	movs	r0, #11
   203e0:	4b44      	ldr	r3, [pc, #272]	; (204f4 <chip_wake+0x164>)
   203e2:	4798      	blx	r3
   203e4:	0003      	movs	r3, r0
   203e6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   203e8:	230f      	movs	r3, #15
   203ea:	18fb      	adds	r3, r7, r3
   203ec:	781b      	ldrb	r3, [r3, #0]
   203ee:	b25b      	sxtb	r3, r3
   203f0:	2b00      	cmp	r3, #0
   203f2:	d000      	beq.n	203f6 <chip_wake+0x66>
   203f4:	e06e      	b.n	204d4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   203f6:	230f      	movs	r3, #15
   203f8:	18fc      	adds	r4, r7, r3
   203fa:	1d3b      	adds	r3, r7, #4
   203fc:	0019      	movs	r1, r3
   203fe:	2001      	movs	r0, #1
   20400:	4b3b      	ldr	r3, [pc, #236]	; (204f0 <chip_wake+0x160>)
   20402:	4798      	blx	r3
   20404:	0003      	movs	r3, r0
   20406:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   20408:	230f      	movs	r3, #15
   2040a:	18fb      	adds	r3, r7, r3
   2040c:	781b      	ldrb	r3, [r3, #0]
   2040e:	b25b      	sxtb	r3, r3
   20410:	2b00      	cmp	r3, #0
   20412:	d161      	bne.n	204d8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   20414:	687b      	ldr	r3, [r7, #4]
   20416:	2202      	movs	r2, #2
   20418:	4013      	ands	r3, r2
   2041a:	d110      	bne.n	2043e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2041c:	687b      	ldr	r3, [r7, #4]
   2041e:	2202      	movs	r2, #2
   20420:	4313      	orrs	r3, r2
   20422:	220f      	movs	r2, #15
   20424:	18bc      	adds	r4, r7, r2
   20426:	0019      	movs	r1, r3
   20428:	2001      	movs	r0, #1
   2042a:	4b32      	ldr	r3, [pc, #200]	; (204f4 <chip_wake+0x164>)
   2042c:	4798      	blx	r3
   2042e:	0003      	movs	r3, r0
   20430:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   20432:	230f      	movs	r3, #15
   20434:	18fb      	adds	r3, r7, r3
   20436:	781b      	ldrb	r3, [r3, #0]
   20438:	b25b      	sxtb	r3, r3
   2043a:	2b00      	cmp	r3, #0
   2043c:	d14e      	bne.n	204dc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2043e:	230f      	movs	r3, #15
   20440:	18fc      	adds	r4, r7, r3
   20442:	003b      	movs	r3, r7
   20444:	0019      	movs	r1, r3
   20446:	200f      	movs	r0, #15
   20448:	4b29      	ldr	r3, [pc, #164]	; (204f0 <chip_wake+0x160>)
   2044a:	4798      	blx	r3
   2044c:	0003      	movs	r3, r0
   2044e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   20450:	230f      	movs	r3, #15
   20452:	18fb      	adds	r3, r7, r3
   20454:	781b      	ldrb	r3, [r3, #0]
   20456:	b25b      	sxtb	r3, r3
   20458:	2b00      	cmp	r3, #0
   2045a:	d014      	beq.n	20486 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2045c:	23a8      	movs	r3, #168	; 0xa8
   2045e:	005a      	lsls	r2, r3, #1
   20460:	4925      	ldr	r1, [pc, #148]	; (204f8 <chip_wake+0x168>)
   20462:	4b26      	ldr	r3, [pc, #152]	; (204fc <chip_wake+0x16c>)
   20464:	0018      	movs	r0, r3
   20466:	4b26      	ldr	r3, [pc, #152]	; (20500 <chip_wake+0x170>)
   20468:	4798      	blx	r3
   2046a:	230f      	movs	r3, #15
   2046c:	18fb      	adds	r3, r7, r3
   2046e:	2100      	movs	r1, #0
   20470:	5659      	ldrsb	r1, [r3, r1]
   20472:	683a      	ldr	r2, [r7, #0]
   20474:	4b23      	ldr	r3, [pc, #140]	; (20504 <chip_wake+0x174>)
   20476:	0018      	movs	r0, r3
   20478:	4b21      	ldr	r3, [pc, #132]	; (20500 <chip_wake+0x170>)
   2047a:	4798      	blx	r3
   2047c:	4b22      	ldr	r3, [pc, #136]	; (20508 <chip_wake+0x178>)
   2047e:	0018      	movs	r0, r3
   20480:	4b1f      	ldr	r3, [pc, #124]	; (20500 <chip_wake+0x170>)
   20482:	4798      	blx	r3
			goto _WAKE_EXIT;
   20484:	e02b      	b.n	204de <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   20486:	683b      	ldr	r3, [r7, #0]
   20488:	2204      	movs	r2, #4
   2048a:	4013      	ands	r3, r2
   2048c:	d11c      	bne.n	204c8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2048e:	2002      	movs	r0, #2
   20490:	4b1e      	ldr	r3, [pc, #120]	; (2050c <chip_wake+0x17c>)
   20492:	4798      	blx	r3
		trials++;
   20494:	68bb      	ldr	r3, [r7, #8]
   20496:	3301      	adds	r3, #1
   20498:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2049a:	68bb      	ldr	r3, [r7, #8]
   2049c:	2b04      	cmp	r3, #4
   2049e:	d9ce      	bls.n	2043e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   204a0:	23ad      	movs	r3, #173	; 0xad
   204a2:	005a      	lsls	r2, r3, #1
   204a4:	4914      	ldr	r1, [pc, #80]	; (204f8 <chip_wake+0x168>)
   204a6:	4b15      	ldr	r3, [pc, #84]	; (204fc <chip_wake+0x16c>)
   204a8:	0018      	movs	r0, r3
   204aa:	4b15      	ldr	r3, [pc, #84]	; (20500 <chip_wake+0x170>)
   204ac:	4798      	blx	r3
   204ae:	4b18      	ldr	r3, [pc, #96]	; (20510 <chip_wake+0x180>)
   204b0:	0018      	movs	r0, r3
   204b2:	4b13      	ldr	r3, [pc, #76]	; (20500 <chip_wake+0x170>)
   204b4:	4798      	blx	r3
   204b6:	4b14      	ldr	r3, [pc, #80]	; (20508 <chip_wake+0x178>)
   204b8:	0018      	movs	r0, r3
   204ba:	4b11      	ldr	r3, [pc, #68]	; (20500 <chip_wake+0x170>)
   204bc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   204be:	230f      	movs	r3, #15
   204c0:	18fb      	adds	r3, r7, r3
   204c2:	22fc      	movs	r2, #252	; 0xfc
   204c4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   204c6:	e00a      	b.n	204de <chip_wake+0x14e>
			break;
   204c8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   204ca:	4b12      	ldr	r3, [pc, #72]	; (20514 <chip_wake+0x184>)
   204cc:	4798      	blx	r3
   204ce:	e006      	b.n	204de <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204d0:	46c0      	nop			; (mov r8, r8)
   204d2:	e004      	b.n	204de <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204d4:	46c0      	nop			; (mov r8, r8)
   204d6:	e002      	b.n	204de <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204d8:	46c0      	nop			; (mov r8, r8)
   204da:	e000      	b.n	204de <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   204dc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   204de:	230f      	movs	r3, #15
   204e0:	18fb      	adds	r3, r7, r3
   204e2:	781b      	ldrb	r3, [r3, #0]
   204e4:	b25b      	sxtb	r3, r3
}
   204e6:	0018      	movs	r0, r3
   204e8:	46bd      	mov	sp, r7
   204ea:	b005      	add	sp, #20
   204ec:	bd90      	pop	{r4, r7, pc}
   204ee:	46c0      	nop			; (mov r8, r8)
   204f0:	000208c1 	.word	0x000208c1
   204f4:	000208e5 	.word	0x000208e5
   204f8:	00036028 	.word	0x00036028
   204fc:	00035f9c 	.word	0x00035f9c
   20500:	0001bafd 	.word	0x0001bafd
   20504:	00035fb0 	.word	0x00035fb0
   20508:	00035fc8 	.word	0x00035fc8
   2050c:	0001df51 	.word	0x0001df51
   20510:	00035fcc 	.word	0x00035fcc
   20514:	00020881 	.word	0x00020881

00020518 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   20518:	b580      	push	{r7, lr}
   2051a:	b088      	sub	sp, #32
   2051c:	af00      	add	r7, sp, #0
   2051e:	0002      	movs	r2, r0
   20520:	1dfb      	adds	r3, r7, #7
   20522:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20524:	2313      	movs	r3, #19
   20526:	18fb      	adds	r3, r7, r3
   20528:	2200      	movs	r2, #0
   2052a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2052c:	2300      	movs	r3, #0
   2052e:	61fb      	str	r3, [r7, #28]
   20530:	2300      	movs	r3, #0
   20532:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   20534:	2300      	movs	r3, #0
   20536:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   20538:	4b4a      	ldr	r3, [pc, #296]	; (20664 <wait_for_bootrom+0x14c>)
   2053a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2053c:	2300      	movs	r3, #0
   2053e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   20540:	4b49      	ldr	r3, [pc, #292]	; (20668 <wait_for_bootrom+0x150>)
   20542:	0018      	movs	r0, r3
   20544:	4b49      	ldr	r3, [pc, #292]	; (2066c <wait_for_bootrom+0x154>)
   20546:	4798      	blx	r3
   20548:	0003      	movs	r3, r0
   2054a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2054c:	69fb      	ldr	r3, [r7, #28]
   2054e:	2b00      	cmp	r3, #0
   20550:	db03      	blt.n	2055a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   20552:	2001      	movs	r0, #1
   20554:	4b46      	ldr	r3, [pc, #280]	; (20670 <wait_for_bootrom+0x158>)
   20556:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   20558:	e7f2      	b.n	20540 <wait_for_bootrom+0x28>
			break;
   2055a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2055c:	4b45      	ldr	r3, [pc, #276]	; (20674 <wait_for_bootrom+0x15c>)
   2055e:	0018      	movs	r0, r3
   20560:	4b42      	ldr	r3, [pc, #264]	; (2066c <wait_for_bootrom+0x154>)
   20562:	4798      	blx	r3
   20564:	0003      	movs	r3, r0
   20566:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   20568:	69fb      	ldr	r3, [r7, #28]
   2056a:	2201      	movs	r2, #1
   2056c:	4013      	ands	r3, r2
   2056e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   20570:	69fb      	ldr	r3, [r7, #28]
   20572:	2b00      	cmp	r3, #0
   20574:	d112      	bne.n	2059c <wait_for_bootrom+0x84>
	{
		reg = 0;
   20576:	2300      	movs	r3, #0
   20578:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2057a:	e00b      	b.n	20594 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2057c:	2001      	movs	r0, #1
   2057e:	4b3c      	ldr	r3, [pc, #240]	; (20670 <wait_for_bootrom+0x158>)
   20580:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   20582:	4b3d      	ldr	r3, [pc, #244]	; (20678 <wait_for_bootrom+0x160>)
   20584:	0018      	movs	r0, r3
   20586:	4b39      	ldr	r3, [pc, #228]	; (2066c <wait_for_bootrom+0x154>)
   20588:	4798      	blx	r3
   2058a:	0003      	movs	r3, r0
   2058c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2058e:	69bb      	ldr	r3, [r7, #24]
   20590:	3301      	adds	r3, #1
   20592:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   20594:	69fb      	ldr	r3, [r7, #28]
   20596:	4a39      	ldr	r2, [pc, #228]	; (2067c <wait_for_bootrom+0x164>)
   20598:	4293      	cmp	r3, r2
   2059a:	d1ef      	bne.n	2057c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2059c:	1dfb      	adds	r3, r7, #7
   2059e:	781b      	ldrb	r3, [r3, #0]
   205a0:	2b02      	cmp	r3, #2
   205a2:	d10d      	bne.n	205c0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   205a4:	4a36      	ldr	r2, [pc, #216]	; (20680 <wait_for_bootrom+0x168>)
   205a6:	4b37      	ldr	r3, [pc, #220]	; (20684 <wait_for_bootrom+0x16c>)
   205a8:	0011      	movs	r1, r2
   205aa:	0018      	movs	r0, r3
   205ac:	4b36      	ldr	r3, [pc, #216]	; (20688 <wait_for_bootrom+0x170>)
   205ae:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   205b0:	2380      	movs	r3, #128	; 0x80
   205b2:	035b      	lsls	r3, r3, #13
   205b4:	4a35      	ldr	r2, [pc, #212]	; (2068c <wait_for_bootrom+0x174>)
   205b6:	0019      	movs	r1, r3
   205b8:	0010      	movs	r0, r2
   205ba:	4b33      	ldr	r3, [pc, #204]	; (20688 <wait_for_bootrom+0x170>)
   205bc:	4798      	blx	r3
   205be:	e022      	b.n	20606 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   205c0:	1dfb      	adds	r3, r7, #7
   205c2:	781b      	ldrb	r3, [r3, #0]
   205c4:	2b03      	cmp	r3, #3
   205c6:	d10b      	bne.n	205e0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   205c8:	4a2d      	ldr	r2, [pc, #180]	; (20680 <wait_for_bootrom+0x168>)
   205ca:	4b2e      	ldr	r3, [pc, #184]	; (20684 <wait_for_bootrom+0x16c>)
   205cc:	0011      	movs	r1, r2
   205ce:	0018      	movs	r0, r3
   205d0:	4b2d      	ldr	r3, [pc, #180]	; (20688 <wait_for_bootrom+0x170>)
   205d2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   205d4:	4b2d      	ldr	r3, [pc, #180]	; (2068c <wait_for_bootrom+0x174>)
   205d6:	2100      	movs	r1, #0
   205d8:	0018      	movs	r0, r3
   205da:	4b2b      	ldr	r3, [pc, #172]	; (20688 <wait_for_bootrom+0x170>)
   205dc:	4798      	blx	r3
   205de:	e012      	b.n	20606 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   205e0:	1dfb      	adds	r3, r7, #7
   205e2:	781b      	ldrb	r3, [r3, #0]
   205e4:	2b04      	cmp	r3, #4
   205e6:	d108      	bne.n	205fa <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   205e8:	2380      	movs	r3, #128	; 0x80
   205ea:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   205ec:	68fb      	ldr	r3, [r7, #12]
   205ee:	4a27      	ldr	r2, [pc, #156]	; (2068c <wait_for_bootrom+0x174>)
   205f0:	0019      	movs	r1, r3
   205f2:	0010      	movs	r0, r2
   205f4:	4b24      	ldr	r3, [pc, #144]	; (20688 <wait_for_bootrom+0x170>)
   205f6:	4798      	blx	r3
   205f8:	e005      	b.n	20606 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   205fa:	68fb      	ldr	r3, [r7, #12]
   205fc:	4a23      	ldr	r2, [pc, #140]	; (2068c <wait_for_bootrom+0x174>)
   205fe:	0019      	movs	r1, r3
   20600:	0010      	movs	r0, r2
   20602:	4b21      	ldr	r3, [pc, #132]	; (20688 <wait_for_bootrom+0x170>)
   20604:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   20606:	4b22      	ldr	r3, [pc, #136]	; (20690 <wait_for_bootrom+0x178>)
   20608:	4798      	blx	r3
   2060a:	0003      	movs	r3, r0
   2060c:	051b      	lsls	r3, r3, #20
   2060e:	0d1b      	lsrs	r3, r3, #20
   20610:	4a20      	ldr	r2, [pc, #128]	; (20694 <wait_for_bootrom+0x17c>)
   20612:	4293      	cmp	r3, r2
   20614:	d906      	bls.n	20624 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   20616:	697b      	ldr	r3, [r7, #20]
   20618:	2202      	movs	r2, #2
   2061a:	4313      	orrs	r3, r2
   2061c:	0018      	movs	r0, r3
   2061e:	4b1e      	ldr	r3, [pc, #120]	; (20698 <wait_for_bootrom+0x180>)
   20620:	4798      	blx	r3
   20622:	e003      	b.n	2062c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   20624:	697b      	ldr	r3, [r7, #20]
   20626:	0018      	movs	r0, r3
   20628:	4b1b      	ldr	r3, [pc, #108]	; (20698 <wait_for_bootrom+0x180>)
   2062a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2062c:	4b1b      	ldr	r3, [pc, #108]	; (2069c <wait_for_bootrom+0x184>)
   2062e:	0018      	movs	r0, r3
   20630:	4b1b      	ldr	r3, [pc, #108]	; (206a0 <wait_for_bootrom+0x188>)
   20632:	4798      	blx	r3
   20634:	68fa      	ldr	r2, [r7, #12]
   20636:	4b1b      	ldr	r3, [pc, #108]	; (206a4 <wait_for_bootrom+0x18c>)
   20638:	0011      	movs	r1, r2
   2063a:	0018      	movs	r0, r3
   2063c:	4b18      	ldr	r3, [pc, #96]	; (206a0 <wait_for_bootrom+0x188>)
   2063e:	4798      	blx	r3
   20640:	4b19      	ldr	r3, [pc, #100]	; (206a8 <wait_for_bootrom+0x190>)
   20642:	0018      	movs	r0, r3
   20644:	4b16      	ldr	r3, [pc, #88]	; (206a0 <wait_for_bootrom+0x188>)
   20646:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   20648:	4a18      	ldr	r2, [pc, #96]	; (206ac <wait_for_bootrom+0x194>)
   2064a:	4b0b      	ldr	r3, [pc, #44]	; (20678 <wait_for_bootrom+0x160>)
   2064c:	0011      	movs	r1, r2
   2064e:	0018      	movs	r0, r3
   20650:	4b0d      	ldr	r3, [pc, #52]	; (20688 <wait_for_bootrom+0x170>)
   20652:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   20654:	2313      	movs	r3, #19
   20656:	18fb      	adds	r3, r7, r3
   20658:	781b      	ldrb	r3, [r3, #0]
   2065a:	b25b      	sxtb	r3, r3
}
   2065c:	0018      	movs	r0, r3
   2065e:	46bd      	mov	sp, r7
   20660:	b008      	add	sp, #32
   20662:	bd80      	pop	{r7, pc}
   20664:	13301354 	.word	0x13301354
   20668:	00001014 	.word	0x00001014
   2066c:	000208a1 	.word	0x000208a1
   20670:	0001df51 	.word	0x0001df51
   20674:	000207bc 	.word	0x000207bc
   20678:	000c000c 	.word	0x000c000c
   2067c:	10add09e 	.word	0x10add09e
   20680:	3c1cd57d 	.word	0x3c1cd57d
   20684:	000207ac 	.word	0x000207ac
   20688:	000208e5 	.word	0x000208e5
   2068c:	0000108c 	.word	0x0000108c
   20690:	000201c1 	.word	0x000201c1
   20694:	0000039f 	.word	0x0000039f
   20698:	00020091 	.word	0x00020091
   2069c:	00035fe8 	.word	0x00035fe8
   206a0:	0001bafd 	.word	0x0001bafd
   206a4:	00035ff4 	.word	0x00035ff4
   206a8:	00035fc8 	.word	0x00035fc8
   206ac:	ef522f61 	.word	0xef522f61

000206b0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   206b0:	b580      	push	{r7, lr}
   206b2:	b088      	sub	sp, #32
   206b4:	af00      	add	r7, sp, #0
   206b6:	0002      	movs	r2, r0
   206b8:	1dfb      	adds	r3, r7, #7
   206ba:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   206bc:	231f      	movs	r3, #31
   206be:	18fb      	adds	r3, r7, r3
   206c0:	2200      	movs	r2, #0
   206c2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   206c4:	2300      	movs	r3, #0
   206c6:	61bb      	str	r3, [r7, #24]
   206c8:	2300      	movs	r3, #0
   206ca:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   206cc:	2301      	movs	r3, #1
   206ce:	425b      	negs	r3, r3
   206d0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   206d2:	4b1d      	ldr	r3, [pc, #116]	; (20748 <wait_for_firmware_start+0x98>)
   206d4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   206d6:	4b1d      	ldr	r3, [pc, #116]	; (2074c <wait_for_firmware_start+0x9c>)
   206d8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   206da:	1dfb      	adds	r3, r7, #7
   206dc:	781b      	ldrb	r3, [r3, #0]
   206de:	2b02      	cmp	r3, #2
   206e0:	d003      	beq.n	206ea <wait_for_firmware_start+0x3a>
   206e2:	1dfb      	adds	r3, r7, #7
   206e4:	781b      	ldrb	r3, [r3, #0]
   206e6:	2b03      	cmp	r3, #3
   206e8:	d119      	bne.n	2071e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   206ea:	4b19      	ldr	r3, [pc, #100]	; (20750 <wait_for_firmware_start+0xa0>)
   206ec:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   206ee:	4b19      	ldr	r3, [pc, #100]	; (20754 <wait_for_firmware_start+0xa4>)
   206f0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   206f2:	e014      	b.n	2071e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   206f4:	2002      	movs	r0, #2
   206f6:	4b18      	ldr	r3, [pc, #96]	; (20758 <wait_for_firmware_start+0xa8>)
   206f8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   206fa:	68fb      	ldr	r3, [r7, #12]
   206fc:	0018      	movs	r0, r3
   206fe:	4b17      	ldr	r3, [pc, #92]	; (2075c <wait_for_firmware_start+0xac>)
   20700:	4798      	blx	r3
   20702:	0003      	movs	r3, r0
   20704:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   20706:	697b      	ldr	r3, [r7, #20]
   20708:	3301      	adds	r3, #1
   2070a:	617b      	str	r3, [r7, #20]
   2070c:	697a      	ldr	r2, [r7, #20]
   2070e:	693b      	ldr	r3, [r7, #16]
   20710:	429a      	cmp	r2, r3
   20712:	d304      	bcc.n	2071e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   20714:	231f      	movs	r3, #31
   20716:	18fb      	adds	r3, r7, r3
   20718:	22fb      	movs	r2, #251	; 0xfb
   2071a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2071c:	e00c      	b.n	20738 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2071e:	68ba      	ldr	r2, [r7, #8]
   20720:	69bb      	ldr	r3, [r7, #24]
   20722:	429a      	cmp	r2, r3
   20724:	d1e6      	bne.n	206f4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   20726:	68bb      	ldr	r3, [r7, #8]
   20728:	4a08      	ldr	r2, [pc, #32]	; (2074c <wait_for_firmware_start+0x9c>)
   2072a:	4293      	cmp	r3, r2
   2072c:	d104      	bne.n	20738 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2072e:	4b06      	ldr	r3, [pc, #24]	; (20748 <wait_for_firmware_start+0x98>)
   20730:	2100      	movs	r1, #0
   20732:	0018      	movs	r0, r3
   20734:	4b0a      	ldr	r3, [pc, #40]	; (20760 <wait_for_firmware_start+0xb0>)
   20736:	4798      	blx	r3
	}
ERR:
	return ret;
   20738:	231f      	movs	r3, #31
   2073a:	18fb      	adds	r3, r7, r3
   2073c:	781b      	ldrb	r3, [r3, #0]
   2073e:	b25b      	sxtb	r3, r3
}
   20740:	0018      	movs	r0, r3
   20742:	46bd      	mov	sp, r7
   20744:	b008      	add	sp, #32
   20746:	bd80      	pop	{r7, pc}
   20748:	0000108c 	.word	0x0000108c
   2074c:	02532636 	.word	0x02532636
   20750:	000207ac 	.word	0x000207ac
   20754:	d75dc1c3 	.word	0xd75dc1c3
   20758:	0001df51 	.word	0x0001df51
   2075c:	000208a1 	.word	0x000208a1
   20760:	000208e5 	.word	0x000208e5

00020764 <chip_deinit>:

sint8 chip_deinit(void)
{
   20764:	b590      	push	{r4, r7, lr}
   20766:	b083      	sub	sp, #12
   20768:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2076a:	2300      	movs	r3, #0
   2076c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2076e:	1dfc      	adds	r4, r7, #7
   20770:	003a      	movs	r2, r7
   20772:	23a0      	movs	r3, #160	; 0xa0
   20774:	015b      	lsls	r3, r3, #5
   20776:	0011      	movs	r1, r2
   20778:	0018      	movs	r0, r3
   2077a:	4b20      	ldr	r3, [pc, #128]	; (207fc <chip_deinit+0x98>)
   2077c:	4798      	blx	r3
   2077e:	0003      	movs	r3, r0
   20780:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   20782:	1dfb      	adds	r3, r7, #7
   20784:	781b      	ldrb	r3, [r3, #0]
   20786:	b25b      	sxtb	r3, r3
   20788:	2b00      	cmp	r3, #0
   2078a:	d00e      	beq.n	207aa <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2078c:	4a1c      	ldr	r2, [pc, #112]	; (20800 <chip_deinit+0x9c>)
   2078e:	491d      	ldr	r1, [pc, #116]	; (20804 <chip_deinit+0xa0>)
   20790:	4b1d      	ldr	r3, [pc, #116]	; (20808 <chip_deinit+0xa4>)
   20792:	0018      	movs	r0, r3
   20794:	4b1d      	ldr	r3, [pc, #116]	; (2080c <chip_deinit+0xa8>)
   20796:	4798      	blx	r3
   20798:	4b1d      	ldr	r3, [pc, #116]	; (20810 <chip_deinit+0xac>)
   2079a:	0018      	movs	r0, r3
   2079c:	4b1b      	ldr	r3, [pc, #108]	; (2080c <chip_deinit+0xa8>)
   2079e:	4798      	blx	r3
   207a0:	4b1c      	ldr	r3, [pc, #112]	; (20814 <chip_deinit+0xb0>)
   207a2:	0018      	movs	r0, r3
   207a4:	4b19      	ldr	r3, [pc, #100]	; (2080c <chip_deinit+0xa8>)
   207a6:	4798      	blx	r3
		goto ERR1;
   207a8:	e021      	b.n	207ee <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   207aa:	683b      	ldr	r3, [r7, #0]
   207ac:	4a1a      	ldr	r2, [pc, #104]	; (20818 <chip_deinit+0xb4>)
   207ae:	4013      	ands	r3, r2
   207b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   207b2:	683a      	ldr	r2, [r7, #0]
   207b4:	1dfc      	adds	r4, r7, #7
   207b6:	23a0      	movs	r3, #160	; 0xa0
   207b8:	015b      	lsls	r3, r3, #5
   207ba:	0011      	movs	r1, r2
   207bc:	0018      	movs	r0, r3
   207be:	4b17      	ldr	r3, [pc, #92]	; (2081c <chip_deinit+0xb8>)
   207c0:	4798      	blx	r3
   207c2:	0003      	movs	r3, r0
   207c4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   207c6:	1dfb      	adds	r3, r7, #7
   207c8:	781b      	ldrb	r3, [r3, #0]
   207ca:	b25b      	sxtb	r3, r3
   207cc:	2b00      	cmp	r3, #0
   207ce:	d00e      	beq.n	207ee <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   207d0:	4a13      	ldr	r2, [pc, #76]	; (20820 <chip_deinit+0xbc>)
   207d2:	490c      	ldr	r1, [pc, #48]	; (20804 <chip_deinit+0xa0>)
   207d4:	4b0c      	ldr	r3, [pc, #48]	; (20808 <chip_deinit+0xa4>)
   207d6:	0018      	movs	r0, r3
   207d8:	4b0c      	ldr	r3, [pc, #48]	; (2080c <chip_deinit+0xa8>)
   207da:	4798      	blx	r3
   207dc:	4b0c      	ldr	r3, [pc, #48]	; (20810 <chip_deinit+0xac>)
   207de:	0018      	movs	r0, r3
   207e0:	4b0a      	ldr	r3, [pc, #40]	; (2080c <chip_deinit+0xa8>)
   207e2:	4798      	blx	r3
   207e4:	4b0b      	ldr	r3, [pc, #44]	; (20814 <chip_deinit+0xb0>)
   207e6:	0018      	movs	r0, r3
   207e8:	4b08      	ldr	r3, [pc, #32]	; (2080c <chip_deinit+0xa8>)
   207ea:	4798      	blx	r3
		goto ERR1;
   207ec:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   207ee:	1dfb      	adds	r3, r7, #7
   207f0:	781b      	ldrb	r3, [r3, #0]
   207f2:	b25b      	sxtb	r3, r3
}
   207f4:	0018      	movs	r0, r3
   207f6:	46bd      	mov	sp, r7
   207f8:	b003      	add	sp, #12
   207fa:	bd90      	pop	{r4, r7, pc}
   207fc:	000208c1 	.word	0x000208c1
   20800:	00000201 	.word	0x00000201
   20804:	00036034 	.word	0x00036034
   20808:	00035f9c 	.word	0x00035f9c
   2080c:	0001bafd 	.word	0x0001bafd
   20810:	0003600c 	.word	0x0003600c
   20814:	00035fc8 	.word	0x00035fc8
   20818:	fffffbff 	.word	0xfffffbff
   2081c:	000208e5 	.word	0x000208e5
   20820:	00000207 	.word	0x00000207

00020824 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   20824:	b590      	push	{r4, r7, lr}
   20826:	b085      	sub	sp, #20
   20828:	af00      	add	r7, sp, #0
   2082a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2082c:	230f      	movs	r3, #15
   2082e:	18fb      	adds	r3, r7, r3
   20830:	2200      	movs	r2, #0
   20832:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   20834:	230f      	movs	r3, #15
   20836:	18fc      	adds	r4, r7, r3
   20838:	687b      	ldr	r3, [r7, #4]
   2083a:	0018      	movs	r0, r3
   2083c:	4b05      	ldr	r3, [pc, #20]	; (20854 <nm_bus_iface_init+0x30>)
   2083e:	4798      	blx	r3
   20840:	0003      	movs	r3, r0
   20842:	7023      	strb	r3, [r4, #0]
	return ret;
   20844:	230f      	movs	r3, #15
   20846:	18fb      	adds	r3, r7, r3
   20848:	781b      	ldrb	r3, [r3, #0]
   2084a:	b25b      	sxtb	r3, r3
}
   2084c:	0018      	movs	r0, r3
   2084e:	46bd      	mov	sp, r7
   20850:	b005      	add	sp, #20
   20852:	bd90      	pop	{r4, r7, pc}
   20854:	0001e60d 	.word	0x0001e60d

00020858 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   20858:	b590      	push	{r4, r7, lr}
   2085a:	b083      	sub	sp, #12
   2085c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2085e:	1dfb      	adds	r3, r7, #7
   20860:	2200      	movs	r2, #0
   20862:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   20864:	1dfc      	adds	r4, r7, #7
   20866:	4b05      	ldr	r3, [pc, #20]	; (2087c <nm_bus_iface_deinit+0x24>)
   20868:	4798      	blx	r3
   2086a:	0003      	movs	r3, r0
   2086c:	7023      	strb	r3, [r4, #0]

	return ret;
   2086e:	1dfb      	adds	r3, r7, #7
   20870:	781b      	ldrb	r3, [r3, #0]
   20872:	b25b      	sxtb	r3, r3
}
   20874:	0018      	movs	r0, r3
   20876:	46bd      	mov	sp, r7
   20878:	b003      	add	sp, #12
   2087a:	bd90      	pop	{r4, r7, pc}
   2087c:	0001e785 	.word	0x0001e785

00020880 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   20880:	b580      	push	{r7, lr}
   20882:	b082      	sub	sp, #8
   20884:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20886:	1dfb      	adds	r3, r7, #7
   20888:	2200      	movs	r2, #0
   2088a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2088c:	4b03      	ldr	r3, [pc, #12]	; (2089c <nm_bus_reset+0x1c>)
   2088e:	4798      	blx	r3
   20890:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   20892:	0018      	movs	r0, r3
   20894:	46bd      	mov	sp, r7
   20896:	b002      	add	sp, #8
   20898:	bd80      	pop	{r7, pc}
   2089a:	46c0      	nop			; (mov r8, r8)
   2089c:	000226ad 	.word	0x000226ad

000208a0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   208a0:	b580      	push	{r7, lr}
   208a2:	b082      	sub	sp, #8
   208a4:	af00      	add	r7, sp, #0
   208a6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   208a8:	687b      	ldr	r3, [r7, #4]
   208aa:	0018      	movs	r0, r3
   208ac:	4b03      	ldr	r3, [pc, #12]	; (208bc <nm_read_reg+0x1c>)
   208ae:	4798      	blx	r3
   208b0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   208b2:	0018      	movs	r0, r3
   208b4:	46bd      	mov	sp, r7
   208b6:	b002      	add	sp, #8
   208b8:	bd80      	pop	{r7, pc}
   208ba:	46c0      	nop			; (mov r8, r8)
   208bc:	00022841 	.word	0x00022841

000208c0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   208c0:	b580      	push	{r7, lr}
   208c2:	b082      	sub	sp, #8
   208c4:	af00      	add	r7, sp, #0
   208c6:	6078      	str	r0, [r7, #4]
   208c8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   208ca:	683a      	ldr	r2, [r7, #0]
   208cc:	687b      	ldr	r3, [r7, #4]
   208ce:	0011      	movs	r1, r2
   208d0:	0018      	movs	r0, r3
   208d2:	4b03      	ldr	r3, [pc, #12]	; (208e0 <nm_read_reg_with_ret+0x20>)
   208d4:	4798      	blx	r3
   208d6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   208d8:	0018      	movs	r0, r3
   208da:	46bd      	mov	sp, r7
   208dc:	b002      	add	sp, #8
   208de:	bd80      	pop	{r7, pc}
   208e0:	00022865 	.word	0x00022865

000208e4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   208e4:	b580      	push	{r7, lr}
   208e6:	b082      	sub	sp, #8
   208e8:	af00      	add	r7, sp, #0
   208ea:	6078      	str	r0, [r7, #4]
   208ec:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   208ee:	683a      	ldr	r2, [r7, #0]
   208f0:	687b      	ldr	r3, [r7, #4]
   208f2:	0011      	movs	r1, r2
   208f4:	0018      	movs	r0, r3
   208f6:	4b03      	ldr	r3, [pc, #12]	; (20904 <nm_write_reg+0x20>)
   208f8:	4798      	blx	r3
   208fa:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   208fc:	0018      	movs	r0, r3
   208fe:	46bd      	mov	sp, r7
   20900:	b002      	add	sp, #8
   20902:	bd80      	pop	{r7, pc}
   20904:	000228b5 	.word	0x000228b5

00020908 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   20908:	b580      	push	{r7, lr}
   2090a:	b084      	sub	sp, #16
   2090c:	af00      	add	r7, sp, #0
   2090e:	60f8      	str	r0, [r7, #12]
   20910:	60b9      	str	r1, [r7, #8]
   20912:	1dbb      	adds	r3, r7, #6
   20914:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   20916:	1dbb      	adds	r3, r7, #6
   20918:	881a      	ldrh	r2, [r3, #0]
   2091a:	68b9      	ldr	r1, [r7, #8]
   2091c:	68fb      	ldr	r3, [r7, #12]
   2091e:	0018      	movs	r0, r3
   20920:	4b03      	ldr	r3, [pc, #12]	; (20930 <p_nm_read_block+0x28>)
   20922:	4798      	blx	r3
   20924:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   20926:	0018      	movs	r0, r3
   20928:	46bd      	mov	sp, r7
   2092a:	b004      	add	sp, #16
   2092c:	bd80      	pop	{r7, pc}
   2092e:	46c0      	nop			; (mov r8, r8)
   20930:	00022905 	.word	0x00022905

00020934 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   20934:	b580      	push	{r7, lr}
   20936:	b086      	sub	sp, #24
   20938:	af00      	add	r7, sp, #0
   2093a:	60f8      	str	r0, [r7, #12]
   2093c:	60b9      	str	r1, [r7, #8]
   2093e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   20940:	4b2d      	ldr	r3, [pc, #180]	; (209f8 <nm_read_block+0xc4>)
   20942:	881a      	ldrh	r2, [r3, #0]
   20944:	2310      	movs	r3, #16
   20946:	18fb      	adds	r3, r7, r3
   20948:	3a08      	subs	r2, #8
   2094a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2094c:	2300      	movs	r3, #0
   2094e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   20950:	2313      	movs	r3, #19
   20952:	18fb      	adds	r3, r7, r3
   20954:	2200      	movs	r2, #0
   20956:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   20958:	2310      	movs	r3, #16
   2095a:	18fb      	adds	r3, r7, r3
   2095c:	881a      	ldrh	r2, [r3, #0]
   2095e:	687b      	ldr	r3, [r7, #4]
   20960:	429a      	cmp	r2, r3
   20962:	d313      	bcc.n	2098c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   20964:	68ba      	ldr	r2, [r7, #8]
   20966:	697b      	ldr	r3, [r7, #20]
   20968:	18d1      	adds	r1, r2, r3
   2096a:	687b      	ldr	r3, [r7, #4]
   2096c:	b29a      	uxth	r2, r3
   2096e:	68fb      	ldr	r3, [r7, #12]
   20970:	0018      	movs	r0, r3
   20972:	4b22      	ldr	r3, [pc, #136]	; (209fc <nm_read_block+0xc8>)
   20974:	4798      	blx	r3
   20976:	0003      	movs	r3, r0
   20978:	b2da      	uxtb	r2, r3
   2097a:	2313      	movs	r3, #19
   2097c:	18fb      	adds	r3, r7, r3
   2097e:	781b      	ldrb	r3, [r3, #0]
   20980:	18d3      	adds	r3, r2, r3
   20982:	b2da      	uxtb	r2, r3
   20984:	2313      	movs	r3, #19
   20986:	18fb      	adds	r3, r7, r3
   20988:	701a      	strb	r2, [r3, #0]
			break;
   2098a:	e02d      	b.n	209e8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2098c:	68ba      	ldr	r2, [r7, #8]
   2098e:	697b      	ldr	r3, [r7, #20]
   20990:	18d1      	adds	r1, r2, r3
   20992:	2310      	movs	r3, #16
   20994:	18fb      	adds	r3, r7, r3
   20996:	881a      	ldrh	r2, [r3, #0]
   20998:	68fb      	ldr	r3, [r7, #12]
   2099a:	0018      	movs	r0, r3
   2099c:	4b17      	ldr	r3, [pc, #92]	; (209fc <nm_read_block+0xc8>)
   2099e:	4798      	blx	r3
   209a0:	0003      	movs	r3, r0
   209a2:	b2da      	uxtb	r2, r3
   209a4:	2313      	movs	r3, #19
   209a6:	18fb      	adds	r3, r7, r3
   209a8:	781b      	ldrb	r3, [r3, #0]
   209aa:	18d3      	adds	r3, r2, r3
   209ac:	b2da      	uxtb	r2, r3
   209ae:	2313      	movs	r3, #19
   209b0:	18fb      	adds	r3, r7, r3
   209b2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   209b4:	2313      	movs	r3, #19
   209b6:	18fb      	adds	r3, r7, r3
   209b8:	781b      	ldrb	r3, [r3, #0]
   209ba:	b25b      	sxtb	r3, r3
   209bc:	2b00      	cmp	r3, #0
   209be:	d112      	bne.n	209e6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   209c0:	2310      	movs	r3, #16
   209c2:	18fb      	adds	r3, r7, r3
   209c4:	881b      	ldrh	r3, [r3, #0]
   209c6:	687a      	ldr	r2, [r7, #4]
   209c8:	1ad3      	subs	r3, r2, r3
   209ca:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   209cc:	2310      	movs	r3, #16
   209ce:	18fb      	adds	r3, r7, r3
   209d0:	881b      	ldrh	r3, [r3, #0]
   209d2:	697a      	ldr	r2, [r7, #20]
   209d4:	18d3      	adds	r3, r2, r3
   209d6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   209d8:	2310      	movs	r3, #16
   209da:	18fb      	adds	r3, r7, r3
   209dc:	881b      	ldrh	r3, [r3, #0]
   209de:	68fa      	ldr	r2, [r7, #12]
   209e0:	18d3      	adds	r3, r2, r3
   209e2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   209e4:	e7b8      	b.n	20958 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   209e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   209e8:	2313      	movs	r3, #19
   209ea:	18fb      	adds	r3, r7, r3
   209ec:	781b      	ldrb	r3, [r3, #0]
   209ee:	b25b      	sxtb	r3, r3
}
   209f0:	0018      	movs	r0, r3
   209f2:	46bd      	mov	sp, r7
   209f4:	b006      	add	sp, #24
   209f6:	bd80      	pop	{r7, pc}
   209f8:	20000104 	.word	0x20000104
   209fc:	00020909 	.word	0x00020909

00020a00 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   20a00:	b580      	push	{r7, lr}
   20a02:	b084      	sub	sp, #16
   20a04:	af00      	add	r7, sp, #0
   20a06:	60f8      	str	r0, [r7, #12]
   20a08:	60b9      	str	r1, [r7, #8]
   20a0a:	1dbb      	adds	r3, r7, #6
   20a0c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   20a0e:	1dbb      	adds	r3, r7, #6
   20a10:	881a      	ldrh	r2, [r3, #0]
   20a12:	68b9      	ldr	r1, [r7, #8]
   20a14:	68fb      	ldr	r3, [r7, #12]
   20a16:	0018      	movs	r0, r3
   20a18:	4b03      	ldr	r3, [pc, #12]	; (20a28 <p_nm_write_block+0x28>)
   20a1a:	4798      	blx	r3
   20a1c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   20a1e:	0018      	movs	r0, r3
   20a20:	46bd      	mov	sp, r7
   20a22:	b004      	add	sp, #16
   20a24:	bd80      	pop	{r7, pc}
   20a26:	46c0      	nop			; (mov r8, r8)
   20a28:	0002295d 	.word	0x0002295d

00020a2c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   20a2c:	b580      	push	{r7, lr}
   20a2e:	b086      	sub	sp, #24
   20a30:	af00      	add	r7, sp, #0
   20a32:	60f8      	str	r0, [r7, #12]
   20a34:	60b9      	str	r1, [r7, #8]
   20a36:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   20a38:	4b2d      	ldr	r3, [pc, #180]	; (20af0 <nm_write_block+0xc4>)
   20a3a:	881a      	ldrh	r2, [r3, #0]
   20a3c:	2310      	movs	r3, #16
   20a3e:	18fb      	adds	r3, r7, r3
   20a40:	3a08      	subs	r2, #8
   20a42:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   20a44:	2300      	movs	r3, #0
   20a46:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   20a48:	2313      	movs	r3, #19
   20a4a:	18fb      	adds	r3, r7, r3
   20a4c:	2200      	movs	r2, #0
   20a4e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   20a50:	2310      	movs	r3, #16
   20a52:	18fb      	adds	r3, r7, r3
   20a54:	881a      	ldrh	r2, [r3, #0]
   20a56:	687b      	ldr	r3, [r7, #4]
   20a58:	429a      	cmp	r2, r3
   20a5a:	d313      	bcc.n	20a84 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   20a5c:	68ba      	ldr	r2, [r7, #8]
   20a5e:	697b      	ldr	r3, [r7, #20]
   20a60:	18d1      	adds	r1, r2, r3
   20a62:	687b      	ldr	r3, [r7, #4]
   20a64:	b29a      	uxth	r2, r3
   20a66:	68fb      	ldr	r3, [r7, #12]
   20a68:	0018      	movs	r0, r3
   20a6a:	4b22      	ldr	r3, [pc, #136]	; (20af4 <nm_write_block+0xc8>)
   20a6c:	4798      	blx	r3
   20a6e:	0003      	movs	r3, r0
   20a70:	b2da      	uxtb	r2, r3
   20a72:	2313      	movs	r3, #19
   20a74:	18fb      	adds	r3, r7, r3
   20a76:	781b      	ldrb	r3, [r3, #0]
   20a78:	18d3      	adds	r3, r2, r3
   20a7a:	b2da      	uxtb	r2, r3
   20a7c:	2313      	movs	r3, #19
   20a7e:	18fb      	adds	r3, r7, r3
   20a80:	701a      	strb	r2, [r3, #0]
			break;
   20a82:	e02d      	b.n	20ae0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   20a84:	68ba      	ldr	r2, [r7, #8]
   20a86:	697b      	ldr	r3, [r7, #20]
   20a88:	18d1      	adds	r1, r2, r3
   20a8a:	2310      	movs	r3, #16
   20a8c:	18fb      	adds	r3, r7, r3
   20a8e:	881a      	ldrh	r2, [r3, #0]
   20a90:	68fb      	ldr	r3, [r7, #12]
   20a92:	0018      	movs	r0, r3
   20a94:	4b17      	ldr	r3, [pc, #92]	; (20af4 <nm_write_block+0xc8>)
   20a96:	4798      	blx	r3
   20a98:	0003      	movs	r3, r0
   20a9a:	b2da      	uxtb	r2, r3
   20a9c:	2313      	movs	r3, #19
   20a9e:	18fb      	adds	r3, r7, r3
   20aa0:	781b      	ldrb	r3, [r3, #0]
   20aa2:	18d3      	adds	r3, r2, r3
   20aa4:	b2da      	uxtb	r2, r3
   20aa6:	2313      	movs	r3, #19
   20aa8:	18fb      	adds	r3, r7, r3
   20aaa:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   20aac:	2313      	movs	r3, #19
   20aae:	18fb      	adds	r3, r7, r3
   20ab0:	781b      	ldrb	r3, [r3, #0]
   20ab2:	b25b      	sxtb	r3, r3
   20ab4:	2b00      	cmp	r3, #0
   20ab6:	d112      	bne.n	20ade <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   20ab8:	2310      	movs	r3, #16
   20aba:	18fb      	adds	r3, r7, r3
   20abc:	881b      	ldrh	r3, [r3, #0]
   20abe:	687a      	ldr	r2, [r7, #4]
   20ac0:	1ad3      	subs	r3, r2, r3
   20ac2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   20ac4:	2310      	movs	r3, #16
   20ac6:	18fb      	adds	r3, r7, r3
   20ac8:	881b      	ldrh	r3, [r3, #0]
   20aca:	697a      	ldr	r2, [r7, #20]
   20acc:	18d3      	adds	r3, r2, r3
   20ace:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   20ad0:	2310      	movs	r3, #16
   20ad2:	18fb      	adds	r3, r7, r3
   20ad4:	881b      	ldrh	r3, [r3, #0]
   20ad6:	68fa      	ldr	r2, [r7, #12]
   20ad8:	18d3      	adds	r3, r2, r3
   20ada:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   20adc:	e7b8      	b.n	20a50 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   20ade:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   20ae0:	2313      	movs	r3, #19
   20ae2:	18fb      	adds	r3, r7, r3
   20ae4:	781b      	ldrb	r3, [r3, #0]
   20ae6:	b25b      	sxtb	r3, r3
}
   20ae8:	0018      	movs	r0, r3
   20aea:	46bd      	mov	sp, r7
   20aec:	b006      	add	sp, #24
   20aee:	bd80      	pop	{r7, pc}
   20af0:	20000104 	.word	0x20000104
   20af4:	00020a01 	.word	0x00020a01

00020af8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   20af8:	b590      	push	{r4, r7, lr}
   20afa:	b089      	sub	sp, #36	; 0x24
   20afc:	af00      	add	r7, sp, #0
   20afe:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   20b00:	2300      	movs	r3, #0
   20b02:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   20b04:	231f      	movs	r3, #31
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	2200      	movs	r2, #0
   20b0a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   20b0c:	230c      	movs	r3, #12
   20b0e:	18fb      	adds	r3, r7, r3
   20b10:	0018      	movs	r0, r3
   20b12:	2308      	movs	r3, #8
   20b14:	001a      	movs	r2, r3
   20b16:	2100      	movs	r1, #0
   20b18:	4b64      	ldr	r3, [pc, #400]	; (20cac <nm_get_firmware_full_info+0x1b4>)
   20b1a:	4798      	blx	r3
	if (pstrRev != NULL)
   20b1c:	687b      	ldr	r3, [r7, #4]
   20b1e:	2b00      	cmp	r3, #0
   20b20:	d100      	bne.n	20b24 <nm_get_firmware_full_info+0x2c>
   20b22:	e0ba      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   20b24:	687b      	ldr	r3, [r7, #4]
   20b26:	2228      	movs	r2, #40	; 0x28
   20b28:	2100      	movs	r1, #0
   20b2a:	0018      	movs	r0, r3
   20b2c:	4b60      	ldr	r3, [pc, #384]	; (20cb0 <nm_get_firmware_full_info+0x1b8>)
   20b2e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   20b30:	231f      	movs	r3, #31
   20b32:	18fc      	adds	r4, r7, r3
   20b34:	2314      	movs	r3, #20
   20b36:	18fb      	adds	r3, r7, r3
   20b38:	4a5e      	ldr	r2, [pc, #376]	; (20cb4 <nm_get_firmware_full_info+0x1bc>)
   20b3a:	0019      	movs	r1, r3
   20b3c:	0010      	movs	r0, r2
   20b3e:	4b5e      	ldr	r3, [pc, #376]	; (20cb8 <nm_get_firmware_full_info+0x1c0>)
   20b40:	4798      	blx	r3
   20b42:	0003      	movs	r3, r0
   20b44:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   20b46:	231f      	movs	r3, #31
   20b48:	18fb      	adds	r3, r7, r3
   20b4a:	781b      	ldrb	r3, [r3, #0]
   20b4c:	b25b      	sxtb	r3, r3
   20b4e:	2b00      	cmp	r3, #0
   20b50:	d000      	beq.n	20b54 <nm_get_firmware_full_info+0x5c>
   20b52:	e0a2      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   20b54:	697b      	ldr	r3, [r7, #20]
   20b56:	2b00      	cmp	r3, #0
   20b58:	d100      	bne.n	20b5c <nm_get_firmware_full_info+0x64>
   20b5a:	e09a      	b.n	20c92 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   20b5c:	697b      	ldr	r3, [r7, #20]
   20b5e:	22c0      	movs	r2, #192	; 0xc0
   20b60:	0292      	lsls	r2, r2, #10
   20b62:	4313      	orrs	r3, r2
   20b64:	221f      	movs	r2, #31
   20b66:	18bc      	adds	r4, r7, r2
   20b68:	220c      	movs	r2, #12
   20b6a:	18b9      	adds	r1, r7, r2
   20b6c:	2208      	movs	r2, #8
   20b6e:	0018      	movs	r0, r3
   20b70:	4b52      	ldr	r3, [pc, #328]	; (20cbc <nm_get_firmware_full_info+0x1c4>)
   20b72:	4798      	blx	r3
   20b74:	0003      	movs	r3, r0
   20b76:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   20b78:	231f      	movs	r3, #31
   20b7a:	18fb      	adds	r3, r7, r3
   20b7c:	781b      	ldrb	r3, [r3, #0]
   20b7e:	b25b      	sxtb	r3, r3
   20b80:	2b00      	cmp	r3, #0
   20b82:	d000      	beq.n	20b86 <nm_get_firmware_full_info+0x8e>
   20b84:	e089      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   20b86:	230c      	movs	r3, #12
   20b88:	18fb      	adds	r3, r7, r3
   20b8a:	685b      	ldr	r3, [r3, #4]
   20b8c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   20b8e:	697b      	ldr	r3, [r7, #20]
   20b90:	041b      	lsls	r3, r3, #16
   20b92:	0c1b      	lsrs	r3, r3, #16
   20b94:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   20b96:	697b      	ldr	r3, [r7, #20]
   20b98:	2b00      	cmp	r3, #0
   20b9a:	d100      	bne.n	20b9e <nm_get_firmware_full_info+0xa6>
   20b9c:	e074      	b.n	20c88 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   20b9e:	697b      	ldr	r3, [r7, #20]
   20ba0:	22c0      	movs	r2, #192	; 0xc0
   20ba2:	0292      	lsls	r2, r2, #10
   20ba4:	4313      	orrs	r3, r2
   20ba6:	221f      	movs	r2, #31
   20ba8:	18bc      	adds	r4, r7, r2
   20baa:	6879      	ldr	r1, [r7, #4]
   20bac:	2228      	movs	r2, #40	; 0x28
   20bae:	0018      	movs	r0, r3
   20bb0:	4b42      	ldr	r3, [pc, #264]	; (20cbc <nm_get_firmware_full_info+0x1c4>)
   20bb2:	4798      	blx	r3
   20bb4:	0003      	movs	r3, r0
   20bb6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   20bb8:	231f      	movs	r3, #31
   20bba:	18fb      	adds	r3, r7, r3
   20bbc:	781b      	ldrb	r3, [r3, #0]
   20bbe:	b25b      	sxtb	r3, r3
   20bc0:	2b00      	cmp	r3, #0
   20bc2:	d16a      	bne.n	20c9a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   20bc4:	687b      	ldr	r3, [r7, #4]
   20bc6:	791b      	ldrb	r3, [r3, #4]
   20bc8:	021b      	lsls	r3, r3, #8
   20bca:	b21a      	sxth	r2, r3
   20bcc:	687b      	ldr	r3, [r7, #4]
   20bce:	795b      	ldrb	r3, [r3, #5]
   20bd0:	011b      	lsls	r3, r3, #4
   20bd2:	b21b      	sxth	r3, r3
   20bd4:	21ff      	movs	r1, #255	; 0xff
   20bd6:	400b      	ands	r3, r1
   20bd8:	b21b      	sxth	r3, r3
   20bda:	4313      	orrs	r3, r2
   20bdc:	b21a      	sxth	r2, r3
   20bde:	687b      	ldr	r3, [r7, #4]
   20be0:	799b      	ldrb	r3, [r3, #6]
   20be2:	b21b      	sxth	r3, r3
   20be4:	210f      	movs	r1, #15
   20be6:	400b      	ands	r3, r1
   20be8:	b21b      	sxth	r3, r3
   20bea:	4313      	orrs	r3, r2
   20bec:	b21a      	sxth	r2, r3
   20bee:	231c      	movs	r3, #28
   20bf0:	18fb      	adds	r3, r7, r3
   20bf2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   20bf4:	231a      	movs	r3, #26
   20bf6:	18fb      	adds	r3, r7, r3
   20bf8:	4a31      	ldr	r2, [pc, #196]	; (20cc0 <nm_get_firmware_full_info+0x1c8>)
   20bfa:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   20bfc:	687b      	ldr	r3, [r7, #4]
   20bfe:	79db      	ldrb	r3, [r3, #7]
   20c00:	021b      	lsls	r3, r3, #8
   20c02:	b21a      	sxth	r2, r3
   20c04:	687b      	ldr	r3, [r7, #4]
   20c06:	7a1b      	ldrb	r3, [r3, #8]
   20c08:	011b      	lsls	r3, r3, #4
   20c0a:	b21b      	sxth	r3, r3
   20c0c:	21ff      	movs	r1, #255	; 0xff
   20c0e:	400b      	ands	r3, r1
   20c10:	b21b      	sxth	r3, r3
   20c12:	4313      	orrs	r3, r2
   20c14:	b21a      	sxth	r2, r3
   20c16:	687b      	ldr	r3, [r7, #4]
   20c18:	7a5b      	ldrb	r3, [r3, #9]
   20c1a:	b21b      	sxth	r3, r3
   20c1c:	210f      	movs	r1, #15
   20c1e:	400b      	ands	r3, r1
   20c20:	b21b      	sxth	r3, r3
   20c22:	4313      	orrs	r3, r2
   20c24:	b21a      	sxth	r2, r3
   20c26:	2318      	movs	r3, #24
   20c28:	18fb      	adds	r3, r7, r3
   20c2a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   20c2c:	231c      	movs	r3, #28
   20c2e:	18fb      	adds	r3, r7, r3
   20c30:	881b      	ldrh	r3, [r3, #0]
   20c32:	2b00      	cmp	r3, #0
   20c34:	d009      	beq.n	20c4a <nm_get_firmware_full_info+0x152>
   20c36:	2318      	movs	r3, #24
   20c38:	18fb      	adds	r3, r7, r3
   20c3a:	881b      	ldrh	r3, [r3, #0]
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	d004      	beq.n	20c4a <nm_get_firmware_full_info+0x152>
   20c40:	2318      	movs	r3, #24
   20c42:	18fb      	adds	r3, r7, r3
   20c44:	881b      	ldrh	r3, [r3, #0]
   20c46:	2b00      	cmp	r3, #0
   20c48:	d104      	bne.n	20c54 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   20c4a:	231f      	movs	r3, #31
   20c4c:	18fb      	adds	r3, r7, r3
   20c4e:	22f4      	movs	r2, #244	; 0xf4
   20c50:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c52:	e022      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   20c54:	231a      	movs	r3, #26
   20c56:	18fa      	adds	r2, r7, r3
   20c58:	2318      	movs	r3, #24
   20c5a:	18fb      	adds	r3, r7, r3
   20c5c:	8812      	ldrh	r2, [r2, #0]
   20c5e:	881b      	ldrh	r3, [r3, #0]
   20c60:	429a      	cmp	r2, r3
   20c62:	d204      	bcs.n	20c6e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   20c64:	231f      	movs	r3, #31
   20c66:	18fb      	adds	r3, r7, r3
   20c68:	22f3      	movs	r2, #243	; 0xf3
   20c6a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c6c:	e015      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   20c6e:	231a      	movs	r3, #26
   20c70:	18fa      	adds	r2, r7, r3
   20c72:	231c      	movs	r3, #28
   20c74:	18fb      	adds	r3, r7, r3
   20c76:	8812      	ldrh	r2, [r2, #0]
   20c78:	881b      	ldrh	r3, [r3, #0]
   20c7a:	429a      	cmp	r2, r3
   20c7c:	d90d      	bls.n	20c9a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   20c7e:	231f      	movs	r3, #31
   20c80:	18fb      	adds	r3, r7, r3
   20c82:	22f3      	movs	r2, #243	; 0xf3
   20c84:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c86:	e008      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   20c88:	231f      	movs	r3, #31
   20c8a:	18fb      	adds	r3, r7, r3
   20c8c:	22f4      	movs	r2, #244	; 0xf4
   20c8e:	701a      	strb	r2, [r3, #0]
   20c90:	e003      	b.n	20c9a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   20c92:	231f      	movs	r3, #31
   20c94:	18fb      	adds	r3, r7, r3
   20c96:	22f4      	movs	r2, #244	; 0xf4
   20c98:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   20c9a:	231f      	movs	r3, #31
   20c9c:	18fb      	adds	r3, r7, r3
   20c9e:	781b      	ldrb	r3, [r3, #0]
   20ca0:	b25b      	sxtb	r3, r3
}
   20ca2:	0018      	movs	r0, r3
   20ca4:	46bd      	mov	sp, r7
   20ca6:	b009      	add	sp, #36	; 0x24
   20ca8:	bd90      	pop	{r4, r7, pc}
   20caa:	46c0      	nop			; (mov r8, r8)
   20cac:	00032203 	.word	0x00032203
   20cb0:	0001e831 	.word	0x0001e831
   20cb4:	000c0008 	.word	0x000c0008
   20cb8:	000208c1 	.word	0x000208c1
   20cbc:	00020935 	.word	0x00020935
   20cc0:	00001354 	.word	0x00001354

00020cc4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   20cc4:	b590      	push	{r4, r7, lr}
   20cc6:	b085      	sub	sp, #20
   20cc8:	af00      	add	r7, sp, #0
   20cca:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20ccc:	230f      	movs	r3, #15
   20cce:	18fb      	adds	r3, r7, r3
   20cd0:	2200      	movs	r2, #0
   20cd2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   20cd4:	687b      	ldr	r3, [r7, #4]
   20cd6:	2b00      	cmp	r3, #0
   20cd8:	d013      	beq.n	20d02 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   20cda:	230e      	movs	r3, #14
   20cdc:	18fb      	adds	r3, r7, r3
   20cde:	687a      	ldr	r2, [r7, #4]
   20ce0:	7812      	ldrb	r2, [r2, #0]
   20ce2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   20ce4:	230e      	movs	r3, #14
   20ce6:	18fb      	adds	r3, r7, r3
   20ce8:	781b      	ldrb	r3, [r3, #0]
   20cea:	2b00      	cmp	r3, #0
   20cec:	d004      	beq.n	20cf8 <nm_drv_init+0x34>
   20cee:	230e      	movs	r3, #14
   20cf0:	18fb      	adds	r3, r7, r3
   20cf2:	781b      	ldrb	r3, [r3, #0]
   20cf4:	2b04      	cmp	r3, #4
   20cf6:	d908      	bls.n	20d0a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   20cf8:	230e      	movs	r3, #14
   20cfa:	18fb      	adds	r3, r7, r3
   20cfc:	2201      	movs	r2, #1
   20cfe:	701a      	strb	r2, [r3, #0]
   20d00:	e003      	b.n	20d0a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   20d02:	230e      	movs	r3, #14
   20d04:	18fb      	adds	r3, r7, r3
   20d06:	2201      	movs	r2, #1
   20d08:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   20d0a:	230f      	movs	r3, #15
   20d0c:	18fc      	adds	r4, r7, r3
   20d0e:	2000      	movs	r0, #0
   20d10:	4b41      	ldr	r3, [pc, #260]	; (20e18 <nm_drv_init+0x154>)
   20d12:	4798      	blx	r3
   20d14:	0003      	movs	r3, r0
   20d16:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d18:	230f      	movs	r3, #15
   20d1a:	18fb      	adds	r3, r7, r3
   20d1c:	781b      	ldrb	r3, [r3, #0]
   20d1e:	b25b      	sxtb	r3, r3
   20d20:	2b00      	cmp	r3, #0
   20d22:	d00f      	beq.n	20d44 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   20d24:	2390      	movs	r3, #144	; 0x90
   20d26:	005a      	lsls	r2, r3, #1
   20d28:	493c      	ldr	r1, [pc, #240]	; (20e1c <nm_drv_init+0x158>)
   20d2a:	4b3d      	ldr	r3, [pc, #244]	; (20e20 <nm_drv_init+0x15c>)
   20d2c:	0018      	movs	r0, r3
   20d2e:	4b3d      	ldr	r3, [pc, #244]	; (20e24 <nm_drv_init+0x160>)
   20d30:	4798      	blx	r3
   20d32:	4b3d      	ldr	r3, [pc, #244]	; (20e28 <nm_drv_init+0x164>)
   20d34:	0018      	movs	r0, r3
   20d36:	4b3b      	ldr	r3, [pc, #236]	; (20e24 <nm_drv_init+0x160>)
   20d38:	4798      	blx	r3
   20d3a:	4b3c      	ldr	r3, [pc, #240]	; (20e2c <nm_drv_init+0x168>)
   20d3c:	0018      	movs	r0, r3
   20d3e:	4b39      	ldr	r3, [pc, #228]	; (20e24 <nm_drv_init+0x160>)
   20d40:	4798      	blx	r3
		goto ERR1;
   20d42:	e061      	b.n	20e08 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   20d44:	4b3a      	ldr	r3, [pc, #232]	; (20e30 <nm_drv_init+0x16c>)
   20d46:	0018      	movs	r0, r3
   20d48:	4b36      	ldr	r3, [pc, #216]	; (20e24 <nm_drv_init+0x160>)
   20d4a:	4798      	blx	r3
   20d4c:	4b39      	ldr	r3, [pc, #228]	; (20e34 <nm_drv_init+0x170>)
   20d4e:	4798      	blx	r3
   20d50:	0002      	movs	r2, r0
   20d52:	4b39      	ldr	r3, [pc, #228]	; (20e38 <nm_drv_init+0x174>)
   20d54:	0011      	movs	r1, r2
   20d56:	0018      	movs	r0, r3
   20d58:	4b32      	ldr	r3, [pc, #200]	; (20e24 <nm_drv_init+0x160>)
   20d5a:	4798      	blx	r3
   20d5c:	4b33      	ldr	r3, [pc, #204]	; (20e2c <nm_drv_init+0x168>)
   20d5e:	0018      	movs	r0, r3
   20d60:	4b30      	ldr	r3, [pc, #192]	; (20e24 <nm_drv_init+0x160>)
   20d62:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   20d64:	4b35      	ldr	r3, [pc, #212]	; (20e3c <nm_drv_init+0x178>)
   20d66:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   20d68:	230f      	movs	r3, #15
   20d6a:	18fc      	adds	r4, r7, r3
   20d6c:	230e      	movs	r3, #14
   20d6e:	18fb      	adds	r3, r7, r3
   20d70:	781b      	ldrb	r3, [r3, #0]
   20d72:	0018      	movs	r0, r3
   20d74:	4b32      	ldr	r3, [pc, #200]	; (20e40 <nm_drv_init+0x17c>)
   20d76:	4798      	blx	r3
   20d78:	0003      	movs	r3, r0
   20d7a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d7c:	230f      	movs	r3, #15
   20d7e:	18fb      	adds	r3, r7, r3
   20d80:	781b      	ldrb	r3, [r3, #0]
   20d82:	b25b      	sxtb	r3, r3
   20d84:	2b00      	cmp	r3, #0
   20d86:	d13a      	bne.n	20dfe <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   20d88:	230f      	movs	r3, #15
   20d8a:	18fc      	adds	r4, r7, r3
   20d8c:	230e      	movs	r3, #14
   20d8e:	18fb      	adds	r3, r7, r3
   20d90:	781b      	ldrb	r3, [r3, #0]
   20d92:	0018      	movs	r0, r3
   20d94:	4b2b      	ldr	r3, [pc, #172]	; (20e44 <nm_drv_init+0x180>)
   20d96:	4798      	blx	r3
   20d98:	0003      	movs	r3, r0
   20d9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d9c:	230f      	movs	r3, #15
   20d9e:	18fb      	adds	r3, r7, r3
   20da0:	781b      	ldrb	r3, [r3, #0]
   20da2:	b25b      	sxtb	r3, r3
   20da4:	2b00      	cmp	r3, #0
   20da6:	d12c      	bne.n	20e02 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   20da8:	230e      	movs	r3, #14
   20daa:	18fb      	adds	r3, r7, r3
   20dac:	781b      	ldrb	r3, [r3, #0]
   20dae:	2b02      	cmp	r3, #2
   20db0:	d02a      	beq.n	20e08 <nm_drv_init+0x144>
   20db2:	230e      	movs	r3, #14
   20db4:	18fb      	adds	r3, r7, r3
   20db6:	781b      	ldrb	r3, [r3, #0]
   20db8:	2b03      	cmp	r3, #3
   20dba:	d025      	beq.n	20e08 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   20dbc:	230f      	movs	r3, #15
   20dbe:	18fc      	adds	r4, r7, r3
   20dc0:	4b21      	ldr	r3, [pc, #132]	; (20e48 <nm_drv_init+0x184>)
   20dc2:	4798      	blx	r3
   20dc4:	0003      	movs	r3, r0
   20dc6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20dc8:	230f      	movs	r3, #15
   20dca:	18fb      	adds	r3, r7, r3
   20dcc:	781b      	ldrb	r3, [r3, #0]
   20dce:	b25b      	sxtb	r3, r3
   20dd0:	2b00      	cmp	r3, #0
   20dd2:	d00f      	beq.n	20df4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   20dd4:	23a7      	movs	r3, #167	; 0xa7
   20dd6:	005a      	lsls	r2, r3, #1
   20dd8:	4910      	ldr	r1, [pc, #64]	; (20e1c <nm_drv_init+0x158>)
   20dda:	4b11      	ldr	r3, [pc, #68]	; (20e20 <nm_drv_init+0x15c>)
   20ddc:	0018      	movs	r0, r3
   20dde:	4b11      	ldr	r3, [pc, #68]	; (20e24 <nm_drv_init+0x160>)
   20de0:	4798      	blx	r3
   20de2:	4b1a      	ldr	r3, [pc, #104]	; (20e4c <nm_drv_init+0x188>)
   20de4:	0018      	movs	r0, r3
   20de6:	4b0f      	ldr	r3, [pc, #60]	; (20e24 <nm_drv_init+0x160>)
   20de8:	4798      	blx	r3
   20dea:	4b10      	ldr	r3, [pc, #64]	; (20e2c <nm_drv_init+0x168>)
   20dec:	0018      	movs	r0, r3
   20dee:	4b0d      	ldr	r3, [pc, #52]	; (20e24 <nm_drv_init+0x160>)
   20df0:	4798      	blx	r3
		goto ERR2;
   20df2:	e007      	b.n	20e04 <nm_drv_init+0x140>
	}
	return ret;
   20df4:	230f      	movs	r3, #15
   20df6:	18fb      	adds	r3, r7, r3
   20df8:	781b      	ldrb	r3, [r3, #0]
   20dfa:	b25b      	sxtb	r3, r3
   20dfc:	e008      	b.n	20e10 <nm_drv_init+0x14c>
		goto ERR2;
   20dfe:	46c0      	nop			; (mov r8, r8)
   20e00:	e000      	b.n	20e04 <nm_drv_init+0x140>
		goto ERR2;
   20e02:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   20e04:	4b12      	ldr	r3, [pc, #72]	; (20e50 <nm_drv_init+0x18c>)
   20e06:	4798      	blx	r3
ERR1:
	return ret;
   20e08:	230f      	movs	r3, #15
   20e0a:	18fb      	adds	r3, r7, r3
   20e0c:	781b      	ldrb	r3, [r3, #0]
   20e0e:	b25b      	sxtb	r3, r3
}
   20e10:	0018      	movs	r0, r3
   20e12:	46bd      	mov	sp, r7
   20e14:	b005      	add	sp, #20
   20e16:	bd90      	pop	{r4, r7, pc}
   20e18:	00020825 	.word	0x00020825
   20e1c:	00036110 	.word	0x00036110
   20e20:	00036040 	.word	0x00036040
   20e24:	0001bafd 	.word	0x0001bafd
   20e28:	00036054 	.word	0x00036054
   20e2c:	00036070 	.word	0x00036070
   20e30:	00036074 	.word	0x00036074
   20e34:	000201c1 	.word	0x000201c1
   20e38:	00036080 	.word	0x00036080
   20e3c:	000226dd 	.word	0x000226dd
   20e40:	00020519 	.word	0x00020519
   20e44:	000206b1 	.word	0x000206b1
   20e48:	0002010d 	.word	0x0002010d
   20e4c:	00036090 	.word	0x00036090
   20e50:	00020859 	.word	0x00020859

00020e54 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   20e54:	b590      	push	{r4, r7, lr}
   20e56:	b085      	sub	sp, #20
   20e58:	af00      	add	r7, sp, #0
   20e5a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   20e5c:	230f      	movs	r3, #15
   20e5e:	18fc      	adds	r4, r7, r3
   20e60:	4b2e      	ldr	r3, [pc, #184]	; (20f1c <nm_drv_deinit+0xc8>)
   20e62:	4798      	blx	r3
   20e64:	0003      	movs	r3, r0
   20e66:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20e68:	230f      	movs	r3, #15
   20e6a:	18fb      	adds	r3, r7, r3
   20e6c:	781b      	ldrb	r3, [r3, #0]
   20e6e:	b25b      	sxtb	r3, r3
   20e70:	2b00      	cmp	r3, #0
   20e72:	d010      	beq.n	20e96 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   20e74:	2366      	movs	r3, #102	; 0x66
   20e76:	33ff      	adds	r3, #255	; 0xff
   20e78:	001a      	movs	r2, r3
   20e7a:	4929      	ldr	r1, [pc, #164]	; (20f20 <nm_drv_deinit+0xcc>)
   20e7c:	4b29      	ldr	r3, [pc, #164]	; (20f24 <nm_drv_deinit+0xd0>)
   20e7e:	0018      	movs	r0, r3
   20e80:	4b29      	ldr	r3, [pc, #164]	; (20f28 <nm_drv_deinit+0xd4>)
   20e82:	4798      	blx	r3
   20e84:	4b29      	ldr	r3, [pc, #164]	; (20f2c <nm_drv_deinit+0xd8>)
   20e86:	0018      	movs	r0, r3
   20e88:	4b27      	ldr	r3, [pc, #156]	; (20f28 <nm_drv_deinit+0xd4>)
   20e8a:	4798      	blx	r3
   20e8c:	4b28      	ldr	r3, [pc, #160]	; (20f30 <nm_drv_deinit+0xdc>)
   20e8e:	0018      	movs	r0, r3
   20e90:	4b25      	ldr	r3, [pc, #148]	; (20f28 <nm_drv_deinit+0xd4>)
   20e92:	4798      	blx	r3
		goto ERR1;
   20e94:	e03a      	b.n	20f0c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   20e96:	230f      	movs	r3, #15
   20e98:	18fc      	adds	r4, r7, r3
   20e9a:	2000      	movs	r0, #0
   20e9c:	4b25      	ldr	r3, [pc, #148]	; (20f34 <nm_drv_deinit+0xe0>)
   20e9e:	4798      	blx	r3
   20ea0:	0003      	movs	r3, r0
   20ea2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20ea4:	230f      	movs	r3, #15
   20ea6:	18fb      	adds	r3, r7, r3
   20ea8:	781b      	ldrb	r3, [r3, #0]
   20eaa:	b25b      	sxtb	r3, r3
   20eac:	2b00      	cmp	r3, #0
   20eae:	d00f      	beq.n	20ed0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   20eb0:	23b6      	movs	r3, #182	; 0xb6
   20eb2:	005a      	lsls	r2, r3, #1
   20eb4:	491a      	ldr	r1, [pc, #104]	; (20f20 <nm_drv_deinit+0xcc>)
   20eb6:	4b1b      	ldr	r3, [pc, #108]	; (20f24 <nm_drv_deinit+0xd0>)
   20eb8:	0018      	movs	r0, r3
   20eba:	4b1b      	ldr	r3, [pc, #108]	; (20f28 <nm_drv_deinit+0xd4>)
   20ebc:	4798      	blx	r3
   20ebe:	4b1e      	ldr	r3, [pc, #120]	; (20f38 <nm_drv_deinit+0xe4>)
   20ec0:	0018      	movs	r0, r3
   20ec2:	4b19      	ldr	r3, [pc, #100]	; (20f28 <nm_drv_deinit+0xd4>)
   20ec4:	4798      	blx	r3
   20ec6:	4b1a      	ldr	r3, [pc, #104]	; (20f30 <nm_drv_deinit+0xdc>)
   20ec8:	0018      	movs	r0, r3
   20eca:	4b17      	ldr	r3, [pc, #92]	; (20f28 <nm_drv_deinit+0xd4>)
   20ecc:	4798      	blx	r3
		goto ERR1;
   20ece:	e01d      	b.n	20f0c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   20ed0:	230f      	movs	r3, #15
   20ed2:	18fc      	adds	r4, r7, r3
   20ed4:	4b19      	ldr	r3, [pc, #100]	; (20f3c <nm_drv_deinit+0xe8>)
   20ed6:	4798      	blx	r3
   20ed8:	0003      	movs	r3, r0
   20eda:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20edc:	230f      	movs	r3, #15
   20ede:	18fb      	adds	r3, r7, r3
   20ee0:	781b      	ldrb	r3, [r3, #0]
   20ee2:	b25b      	sxtb	r3, r3
   20ee4:	2b00      	cmp	r3, #0
   20ee6:	d00f      	beq.n	20f08 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   20ee8:	23b9      	movs	r3, #185	; 0xb9
   20eea:	005a      	lsls	r2, r3, #1
   20eec:	490c      	ldr	r1, [pc, #48]	; (20f20 <nm_drv_deinit+0xcc>)
   20eee:	4b0d      	ldr	r3, [pc, #52]	; (20f24 <nm_drv_deinit+0xd0>)
   20ef0:	0018      	movs	r0, r3
   20ef2:	4b0d      	ldr	r3, [pc, #52]	; (20f28 <nm_drv_deinit+0xd4>)
   20ef4:	4798      	blx	r3
   20ef6:	4b12      	ldr	r3, [pc, #72]	; (20f40 <nm_drv_deinit+0xec>)
   20ef8:	0018      	movs	r0, r3
   20efa:	4b0b      	ldr	r3, [pc, #44]	; (20f28 <nm_drv_deinit+0xd4>)
   20efc:	4798      	blx	r3
   20efe:	4b0c      	ldr	r3, [pc, #48]	; (20f30 <nm_drv_deinit+0xdc>)
   20f00:	0018      	movs	r0, r3
   20f02:	4b09      	ldr	r3, [pc, #36]	; (20f28 <nm_drv_deinit+0xd4>)
   20f04:	4798      	blx	r3
		goto ERR1;
   20f06:	e001      	b.n	20f0c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   20f08:	4b0e      	ldr	r3, [pc, #56]	; (20f44 <nm_drv_deinit+0xf0>)
   20f0a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   20f0c:	230f      	movs	r3, #15
   20f0e:	18fb      	adds	r3, r7, r3
   20f10:	781b      	ldrb	r3, [r3, #0]
   20f12:	b25b      	sxtb	r3, r3
}
   20f14:	0018      	movs	r0, r3
   20f16:	46bd      	mov	sp, r7
   20f18:	b005      	add	sp, #20
   20f1a:	bd90      	pop	{r4, r7, pc}
   20f1c:	00020765 	.word	0x00020765
   20f20:	0003611c 	.word	0x0003611c
   20f24:	00036040 	.word	0x00036040
   20f28:	0001bafd 	.word	0x0001bafd
   20f2c:	000360b0 	.word	0x000360b0
   20f30:	00036070 	.word	0x00036070
   20f34:	00023b85 	.word	0x00023b85
   20f38:	000360d0 	.word	0x000360d0
   20f3c:	00020859 	.word	0x00020859
   20f40:	000360f4 	.word	0x000360f4
   20f44:	00022829 	.word	0x00022829

00020f48 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   20f48:	b580      	push	{r7, lr}
   20f4a:	b086      	sub	sp, #24
   20f4c:	af00      	add	r7, sp, #0
   20f4e:	6078      	str	r0, [r7, #4]
   20f50:	000a      	movs	r2, r1
   20f52:	1cbb      	adds	r3, r7, #2
   20f54:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   20f56:	230c      	movs	r3, #12
   20f58:	18fb      	adds	r3, r7, r3
   20f5a:	2200      	movs	r2, #0
   20f5c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   20f5e:	230c      	movs	r3, #12
   20f60:	18fb      	adds	r3, r7, r3
   20f62:	687a      	ldr	r2, [r7, #4]
   20f64:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20f66:	230c      	movs	r3, #12
   20f68:	18fb      	adds	r3, r7, r3
   20f6a:	1cba      	adds	r2, r7, #2
   20f6c:	8812      	ldrh	r2, [r2, #0]
   20f6e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   20f70:	230c      	movs	r3, #12
   20f72:	18fb      	adds	r3, r7, r3
   20f74:	0019      	movs	r1, r3
   20f76:	2003      	movs	r0, #3
   20f78:	4b03      	ldr	r3, [pc, #12]	; (20f88 <nmi_spi_read+0x40>)
   20f7a:	4798      	blx	r3
   20f7c:	0003      	movs	r3, r0
}
   20f7e:	0018      	movs	r0, r3
   20f80:	46bd      	mov	sp, r7
   20f82:	b006      	add	sp, #24
   20f84:	bd80      	pop	{r7, pc}
   20f86:	46c0      	nop			; (mov r8, r8)
   20f88:	0001e6f5 	.word	0x0001e6f5

00020f8c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   20f8c:	b580      	push	{r7, lr}
   20f8e:	b086      	sub	sp, #24
   20f90:	af00      	add	r7, sp, #0
   20f92:	6078      	str	r0, [r7, #4]
   20f94:	000a      	movs	r2, r1
   20f96:	1cbb      	adds	r3, r7, #2
   20f98:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   20f9a:	230c      	movs	r3, #12
   20f9c:	18fb      	adds	r3, r7, r3
   20f9e:	687a      	ldr	r2, [r7, #4]
   20fa0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   20fa2:	230c      	movs	r3, #12
   20fa4:	18fb      	adds	r3, r7, r3
   20fa6:	2200      	movs	r2, #0
   20fa8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20faa:	230c      	movs	r3, #12
   20fac:	18fb      	adds	r3, r7, r3
   20fae:	1cba      	adds	r2, r7, #2
   20fb0:	8812      	ldrh	r2, [r2, #0]
   20fb2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   20fb4:	230c      	movs	r3, #12
   20fb6:	18fb      	adds	r3, r7, r3
   20fb8:	0019      	movs	r1, r3
   20fba:	2003      	movs	r0, #3
   20fbc:	4b03      	ldr	r3, [pc, #12]	; (20fcc <nmi_spi_write+0x40>)
   20fbe:	4798      	blx	r3
   20fc0:	0003      	movs	r3, r0
}
   20fc2:	0018      	movs	r0, r3
   20fc4:	46bd      	mov	sp, r7
   20fc6:	b006      	add	sp, #24
   20fc8:	bd80      	pop	{r7, pc}
   20fca:	46c0      	nop			; (mov r8, r8)
   20fcc:	0001e6f5 	.word	0x0001e6f5

00020fd0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   20fd0:	b580      	push	{r7, lr}
   20fd2:	b088      	sub	sp, #32
   20fd4:	af00      	add	r7, sp, #0
   20fd6:	60f8      	str	r0, [r7, #12]
   20fd8:	60b9      	str	r1, [r7, #8]
   20fda:	1dbb      	adds	r3, r7, #6
   20fdc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   20fde:	2314      	movs	r3, #20
   20fe0:	18fb      	adds	r3, r7, r3
   20fe2:	68fa      	ldr	r2, [r7, #12]
   20fe4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   20fe6:	2314      	movs	r3, #20
   20fe8:	18fb      	adds	r3, r7, r3
   20fea:	68ba      	ldr	r2, [r7, #8]
   20fec:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20fee:	2314      	movs	r3, #20
   20ff0:	18fb      	adds	r3, r7, r3
   20ff2:	1dba      	adds	r2, r7, #6
   20ff4:	8812      	ldrh	r2, [r2, #0]
   20ff6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   20ff8:	2314      	movs	r3, #20
   20ffa:	18fb      	adds	r3, r7, r3
   20ffc:	0019      	movs	r1, r3
   20ffe:	2003      	movs	r0, #3
   21000:	4b03      	ldr	r3, [pc, #12]	; (21010 <nmi_spi_rw+0x40>)
   21002:	4798      	blx	r3
   21004:	0003      	movs	r3, r0
}
   21006:	0018      	movs	r0, r3
   21008:	46bd      	mov	sp, r7
   2100a:	b008      	add	sp, #32
   2100c:	bd80      	pop	{r7, pc}
   2100e:	46c0      	nop			; (mov r8, r8)
   21010:	0001e6f5 	.word	0x0001e6f5

00021014 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   21014:	b580      	push	{r7, lr}
   21016:	b082      	sub	sp, #8
   21018:	af00      	add	r7, sp, #0
   2101a:	0002      	movs	r2, r0
   2101c:	1dfb      	adds	r3, r7, #7
   2101e:	701a      	strb	r2, [r3, #0]
   21020:	1dbb      	adds	r3, r7, #6
   21022:	1c0a      	adds	r2, r1, #0
   21024:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   21026:	1dfb      	adds	r3, r7, #7
   21028:	781b      	ldrb	r3, [r3, #0]
   2102a:	005a      	lsls	r2, r3, #1
   2102c:	1dbb      	adds	r3, r7, #6
   2102e:	781b      	ldrb	r3, [r3, #0]
   21030:	4053      	eors	r3, r2
   21032:	4a03      	ldr	r2, [pc, #12]	; (21040 <crc7_byte+0x2c>)
   21034:	5cd3      	ldrb	r3, [r2, r3]
}
   21036:	0018      	movs	r0, r3
   21038:	46bd      	mov	sp, r7
   2103a:	b002      	add	sp, #8
   2103c:	bd80      	pop	{r7, pc}
   2103e:	46c0      	nop			; (mov r8, r8)
   21040:	0003612c 	.word	0x0003612c

00021044 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   21044:	b590      	push	{r4, r7, lr}
   21046:	b085      	sub	sp, #20
   21048:	af00      	add	r7, sp, #0
   2104a:	60b9      	str	r1, [r7, #8]
   2104c:	607a      	str	r2, [r7, #4]
   2104e:	230f      	movs	r3, #15
   21050:	18fb      	adds	r3, r7, r3
   21052:	1c02      	adds	r2, r0, #0
   21054:	701a      	strb	r2, [r3, #0]
	while (len--)
   21056:	e00e      	b.n	21076 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   21058:	68bb      	ldr	r3, [r7, #8]
   2105a:	1c5a      	adds	r2, r3, #1
   2105c:	60ba      	str	r2, [r7, #8]
   2105e:	781a      	ldrb	r2, [r3, #0]
   21060:	230f      	movs	r3, #15
   21062:	18fc      	adds	r4, r7, r3
   21064:	230f      	movs	r3, #15
   21066:	18fb      	adds	r3, r7, r3
   21068:	781b      	ldrb	r3, [r3, #0]
   2106a:	0011      	movs	r1, r2
   2106c:	0018      	movs	r0, r3
   2106e:	4b08      	ldr	r3, [pc, #32]	; (21090 <crc7+0x4c>)
   21070:	4798      	blx	r3
   21072:	0003      	movs	r3, r0
   21074:	7023      	strb	r3, [r4, #0]
	while (len--)
   21076:	687b      	ldr	r3, [r7, #4]
   21078:	1e5a      	subs	r2, r3, #1
   2107a:	607a      	str	r2, [r7, #4]
   2107c:	2b00      	cmp	r3, #0
   2107e:	d1eb      	bne.n	21058 <crc7+0x14>
	return crc;
   21080:	230f      	movs	r3, #15
   21082:	18fb      	adds	r3, r7, r3
   21084:	781b      	ldrb	r3, [r3, #0]
}
   21086:	0018      	movs	r0, r3
   21088:	46bd      	mov	sp, r7
   2108a:	b005      	add	sp, #20
   2108c:	bd90      	pop	{r4, r7, pc}
   2108e:	46c0      	nop			; (mov r8, r8)
   21090:	00021015 	.word	0x00021015

00021094 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   21094:	b590      	push	{r4, r7, lr}
   21096:	b089      	sub	sp, #36	; 0x24
   21098:	af00      	add	r7, sp, #0
   2109a:	60b9      	str	r1, [r7, #8]
   2109c:	607a      	str	r2, [r7, #4]
   2109e:	603b      	str	r3, [r7, #0]
   210a0:	230f      	movs	r3, #15
   210a2:	18fb      	adds	r3, r7, r3
   210a4:	1c02      	adds	r2, r0, #0
   210a6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   210a8:	231f      	movs	r3, #31
   210aa:	18fb      	adds	r3, r7, r3
   210ac:	2205      	movs	r2, #5
   210ae:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   210b0:	231e      	movs	r3, #30
   210b2:	18fb      	adds	r3, r7, r3
   210b4:	2201      	movs	r2, #1
   210b6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   210b8:	2314      	movs	r3, #20
   210ba:	18fb      	adds	r3, r7, r3
   210bc:	220f      	movs	r2, #15
   210be:	18ba      	adds	r2, r7, r2
   210c0:	7812      	ldrb	r2, [r2, #0]
   210c2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   210c4:	230f      	movs	r3, #15
   210c6:	18fb      	adds	r3, r7, r3
   210c8:	781b      	ldrb	r3, [r3, #0]
   210ca:	3bc1      	subs	r3, #193	; 0xc1
   210cc:	2b0e      	cmp	r3, #14
   210ce:	d900      	bls.n	210d2 <spi_cmd+0x3e>
   210d0:	e11b      	b.n	2130a <spi_cmd+0x276>
   210d2:	009a      	lsls	r2, r3, #2
   210d4:	4bb6      	ldr	r3, [pc, #728]	; (213b0 <spi_cmd+0x31c>)
   210d6:	18d3      	adds	r3, r2, r3
   210d8:	681b      	ldr	r3, [r3, #0]
   210da:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   210dc:	68bb      	ldr	r3, [r7, #8]
   210de:	0c1b      	lsrs	r3, r3, #16
   210e0:	b2da      	uxtb	r2, r3
   210e2:	2314      	movs	r3, #20
   210e4:	18fb      	adds	r3, r7, r3
   210e6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   210e8:	68bb      	ldr	r3, [r7, #8]
   210ea:	0a1b      	lsrs	r3, r3, #8
   210ec:	b2da      	uxtb	r2, r3
   210ee:	2314      	movs	r3, #20
   210f0:	18fb      	adds	r3, r7, r3
   210f2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   210f4:	68bb      	ldr	r3, [r7, #8]
   210f6:	b2da      	uxtb	r2, r3
   210f8:	2314      	movs	r3, #20
   210fa:	18fb      	adds	r3, r7, r3
   210fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   210fe:	231f      	movs	r3, #31
   21100:	18fb      	adds	r3, r7, r3
   21102:	2205      	movs	r2, #5
   21104:	701a      	strb	r2, [r3, #0]
		break;
   21106:	e105      	b.n	21314 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   21108:	68bb      	ldr	r3, [r7, #8]
   2110a:	0a1b      	lsrs	r3, r3, #8
   2110c:	b2da      	uxtb	r2, r3
   2110e:	2314      	movs	r3, #20
   21110:	18fb      	adds	r3, r7, r3
   21112:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21114:	2330      	movs	r3, #48	; 0x30
   21116:	18fb      	adds	r3, r7, r3
   21118:	781b      	ldrb	r3, [r3, #0]
   2111a:	2b00      	cmp	r3, #0
   2111c:	d009      	beq.n	21132 <spi_cmd+0x9e>
   2111e:	2314      	movs	r3, #20
   21120:	18fb      	adds	r3, r7, r3
   21122:	785b      	ldrb	r3, [r3, #1]
   21124:	2280      	movs	r2, #128	; 0x80
   21126:	4252      	negs	r2, r2
   21128:	4313      	orrs	r3, r2
   2112a:	b2da      	uxtb	r2, r3
   2112c:	2314      	movs	r3, #20
   2112e:	18fb      	adds	r3, r7, r3
   21130:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   21132:	68bb      	ldr	r3, [r7, #8]
   21134:	b2da      	uxtb	r2, r3
   21136:	2314      	movs	r3, #20
   21138:	18fb      	adds	r3, r7, r3
   2113a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2113c:	2314      	movs	r3, #20
   2113e:	18fb      	adds	r3, r7, r3
   21140:	2200      	movs	r2, #0
   21142:	70da      	strb	r2, [r3, #3]
		len = 5;
   21144:	231f      	movs	r3, #31
   21146:	18fb      	adds	r3, r7, r3
   21148:	2205      	movs	r2, #5
   2114a:	701a      	strb	r2, [r3, #0]
		break;
   2114c:	e0e2      	b.n	21314 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2114e:	2314      	movs	r3, #20
   21150:	18fb      	adds	r3, r7, r3
   21152:	2200      	movs	r2, #0
   21154:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21156:	2314      	movs	r3, #20
   21158:	18fb      	adds	r3, r7, r3
   2115a:	2200      	movs	r2, #0
   2115c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2115e:	2314      	movs	r3, #20
   21160:	18fb      	adds	r3, r7, r3
   21162:	2200      	movs	r2, #0
   21164:	70da      	strb	r2, [r3, #3]
		len = 5;
   21166:	231f      	movs	r3, #31
   21168:	18fb      	adds	r3, r7, r3
   2116a:	2205      	movs	r2, #5
   2116c:	701a      	strb	r2, [r3, #0]
		break;
   2116e:	e0d1      	b.n	21314 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   21170:	2314      	movs	r3, #20
   21172:	18fb      	adds	r3, r7, r3
   21174:	2200      	movs	r2, #0
   21176:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21178:	2314      	movs	r3, #20
   2117a:	18fb      	adds	r3, r7, r3
   2117c:	2200      	movs	r2, #0
   2117e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21180:	2314      	movs	r3, #20
   21182:	18fb      	adds	r3, r7, r3
   21184:	2200      	movs	r2, #0
   21186:	70da      	strb	r2, [r3, #3]
		len = 5;
   21188:	231f      	movs	r3, #31
   2118a:	18fb      	adds	r3, r7, r3
   2118c:	2205      	movs	r2, #5
   2118e:	701a      	strb	r2, [r3, #0]
		break;
   21190:	e0c0      	b.n	21314 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   21192:	2314      	movs	r3, #20
   21194:	18fb      	adds	r3, r7, r3
   21196:	22ff      	movs	r2, #255	; 0xff
   21198:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2119a:	2314      	movs	r3, #20
   2119c:	18fb      	adds	r3, r7, r3
   2119e:	22ff      	movs	r2, #255	; 0xff
   211a0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   211a2:	2314      	movs	r3, #20
   211a4:	18fb      	adds	r3, r7, r3
   211a6:	22ff      	movs	r2, #255	; 0xff
   211a8:	70da      	strb	r2, [r3, #3]
		len = 5;
   211aa:	231f      	movs	r3, #31
   211ac:	18fb      	adds	r3, r7, r3
   211ae:	2205      	movs	r2, #5
   211b0:	701a      	strb	r2, [r3, #0]
		break;
   211b2:	e0af      	b.n	21314 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   211b4:	68bb      	ldr	r3, [r7, #8]
   211b6:	0c1b      	lsrs	r3, r3, #16
   211b8:	b2da      	uxtb	r2, r3
   211ba:	2314      	movs	r3, #20
   211bc:	18fb      	adds	r3, r7, r3
   211be:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   211c0:	68bb      	ldr	r3, [r7, #8]
   211c2:	0a1b      	lsrs	r3, r3, #8
   211c4:	b2da      	uxtb	r2, r3
   211c6:	2314      	movs	r3, #20
   211c8:	18fb      	adds	r3, r7, r3
   211ca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   211cc:	68bb      	ldr	r3, [r7, #8]
   211ce:	b2da      	uxtb	r2, r3
   211d0:	2314      	movs	r3, #20
   211d2:	18fb      	adds	r3, r7, r3
   211d4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   211d6:	683b      	ldr	r3, [r7, #0]
   211d8:	0a1b      	lsrs	r3, r3, #8
   211da:	b2da      	uxtb	r2, r3
   211dc:	2314      	movs	r3, #20
   211de:	18fb      	adds	r3, r7, r3
   211e0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   211e2:	683b      	ldr	r3, [r7, #0]
   211e4:	b2da      	uxtb	r2, r3
   211e6:	2314      	movs	r3, #20
   211e8:	18fb      	adds	r3, r7, r3
   211ea:	715a      	strb	r2, [r3, #5]
		len = 7;
   211ec:	231f      	movs	r3, #31
   211ee:	18fb      	adds	r3, r7, r3
   211f0:	2207      	movs	r2, #7
   211f2:	701a      	strb	r2, [r3, #0]
		break;
   211f4:	e08e      	b.n	21314 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   211f6:	68bb      	ldr	r3, [r7, #8]
   211f8:	0c1b      	lsrs	r3, r3, #16
   211fa:	b2da      	uxtb	r2, r3
   211fc:	2314      	movs	r3, #20
   211fe:	18fb      	adds	r3, r7, r3
   21200:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21202:	68bb      	ldr	r3, [r7, #8]
   21204:	0a1b      	lsrs	r3, r3, #8
   21206:	b2da      	uxtb	r2, r3
   21208:	2314      	movs	r3, #20
   2120a:	18fb      	adds	r3, r7, r3
   2120c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2120e:	68bb      	ldr	r3, [r7, #8]
   21210:	b2da      	uxtb	r2, r3
   21212:	2314      	movs	r3, #20
   21214:	18fb      	adds	r3, r7, r3
   21216:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   21218:	683b      	ldr	r3, [r7, #0]
   2121a:	0c1b      	lsrs	r3, r3, #16
   2121c:	b2da      	uxtb	r2, r3
   2121e:	2314      	movs	r3, #20
   21220:	18fb      	adds	r3, r7, r3
   21222:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   21224:	683b      	ldr	r3, [r7, #0]
   21226:	0a1b      	lsrs	r3, r3, #8
   21228:	b2da      	uxtb	r2, r3
   2122a:	2314      	movs	r3, #20
   2122c:	18fb      	adds	r3, r7, r3
   2122e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   21230:	683b      	ldr	r3, [r7, #0]
   21232:	b2da      	uxtb	r2, r3
   21234:	2314      	movs	r3, #20
   21236:	18fb      	adds	r3, r7, r3
   21238:	719a      	strb	r2, [r3, #6]
		len = 8;
   2123a:	231f      	movs	r3, #31
   2123c:	18fb      	adds	r3, r7, r3
   2123e:	2208      	movs	r2, #8
   21240:	701a      	strb	r2, [r3, #0]
		break;
   21242:	e067      	b.n	21314 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   21244:	68bb      	ldr	r3, [r7, #8]
   21246:	0a1b      	lsrs	r3, r3, #8
   21248:	b2da      	uxtb	r2, r3
   2124a:	2314      	movs	r3, #20
   2124c:	18fb      	adds	r3, r7, r3
   2124e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21250:	2330      	movs	r3, #48	; 0x30
   21252:	18fb      	adds	r3, r7, r3
   21254:	781b      	ldrb	r3, [r3, #0]
   21256:	2b00      	cmp	r3, #0
   21258:	d009      	beq.n	2126e <spi_cmd+0x1da>
   2125a:	2314      	movs	r3, #20
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	785b      	ldrb	r3, [r3, #1]
   21260:	2280      	movs	r2, #128	; 0x80
   21262:	4252      	negs	r2, r2
   21264:	4313      	orrs	r3, r2
   21266:	b2da      	uxtb	r2, r3
   21268:	2314      	movs	r3, #20
   2126a:	18fb      	adds	r3, r7, r3
   2126c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2126e:	68bb      	ldr	r3, [r7, #8]
   21270:	b2da      	uxtb	r2, r3
   21272:	2314      	movs	r3, #20
   21274:	18fb      	adds	r3, r7, r3
   21276:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   21278:	687b      	ldr	r3, [r7, #4]
   2127a:	0e1b      	lsrs	r3, r3, #24
   2127c:	b2da      	uxtb	r2, r3
   2127e:	2314      	movs	r3, #20
   21280:	18fb      	adds	r3, r7, r3
   21282:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   21284:	687b      	ldr	r3, [r7, #4]
   21286:	0c1b      	lsrs	r3, r3, #16
   21288:	b2da      	uxtb	r2, r3
   2128a:	2314      	movs	r3, #20
   2128c:	18fb      	adds	r3, r7, r3
   2128e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   21290:	687b      	ldr	r3, [r7, #4]
   21292:	0a1b      	lsrs	r3, r3, #8
   21294:	b2da      	uxtb	r2, r3
   21296:	2314      	movs	r3, #20
   21298:	18fb      	adds	r3, r7, r3
   2129a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2129c:	687b      	ldr	r3, [r7, #4]
   2129e:	b2da      	uxtb	r2, r3
   212a0:	2314      	movs	r3, #20
   212a2:	18fb      	adds	r3, r7, r3
   212a4:	719a      	strb	r2, [r3, #6]
		len = 8;
   212a6:	231f      	movs	r3, #31
   212a8:	18fb      	adds	r3, r7, r3
   212aa:	2208      	movs	r2, #8
   212ac:	701a      	strb	r2, [r3, #0]
		break;
   212ae:	e031      	b.n	21314 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   212b0:	68bb      	ldr	r3, [r7, #8]
   212b2:	0c1b      	lsrs	r3, r3, #16
   212b4:	b2da      	uxtb	r2, r3
   212b6:	2314      	movs	r3, #20
   212b8:	18fb      	adds	r3, r7, r3
   212ba:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   212bc:	68bb      	ldr	r3, [r7, #8]
   212be:	0a1b      	lsrs	r3, r3, #8
   212c0:	b2da      	uxtb	r2, r3
   212c2:	2314      	movs	r3, #20
   212c4:	18fb      	adds	r3, r7, r3
   212c6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   212c8:	68bb      	ldr	r3, [r7, #8]
   212ca:	b2da      	uxtb	r2, r3
   212cc:	2314      	movs	r3, #20
   212ce:	18fb      	adds	r3, r7, r3
   212d0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   212d2:	687b      	ldr	r3, [r7, #4]
   212d4:	0e1b      	lsrs	r3, r3, #24
   212d6:	b2da      	uxtb	r2, r3
   212d8:	2314      	movs	r3, #20
   212da:	18fb      	adds	r3, r7, r3
   212dc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   212de:	687b      	ldr	r3, [r7, #4]
   212e0:	0c1b      	lsrs	r3, r3, #16
   212e2:	b2da      	uxtb	r2, r3
   212e4:	2314      	movs	r3, #20
   212e6:	18fb      	adds	r3, r7, r3
   212e8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   212ea:	687b      	ldr	r3, [r7, #4]
   212ec:	0a1b      	lsrs	r3, r3, #8
   212ee:	b2da      	uxtb	r2, r3
   212f0:	2314      	movs	r3, #20
   212f2:	18fb      	adds	r3, r7, r3
   212f4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   212f6:	687b      	ldr	r3, [r7, #4]
   212f8:	b2da      	uxtb	r2, r3
   212fa:	2314      	movs	r3, #20
   212fc:	18fb      	adds	r3, r7, r3
   212fe:	71da      	strb	r2, [r3, #7]
		len = 9;
   21300:	231f      	movs	r3, #31
   21302:	18fb      	adds	r3, r7, r3
   21304:	2209      	movs	r2, #9
   21306:	701a      	strb	r2, [r3, #0]
		break;
   21308:	e004      	b.n	21314 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2130a:	231e      	movs	r3, #30
   2130c:	18fb      	adds	r3, r7, r3
   2130e:	2200      	movs	r2, #0
   21310:	701a      	strb	r2, [r3, #0]
		break;
   21312:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   21314:	231e      	movs	r3, #30
   21316:	18fb      	adds	r3, r7, r3
   21318:	781b      	ldrb	r3, [r3, #0]
   2131a:	b25b      	sxtb	r3, r3
   2131c:	2b00      	cmp	r3, #0
   2131e:	d03f      	beq.n	213a0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   21320:	4b24      	ldr	r3, [pc, #144]	; (213b4 <spi_cmd+0x320>)
   21322:	781b      	ldrb	r3, [r3, #0]
   21324:	2b00      	cmp	r3, #0
   21326:	d115      	bne.n	21354 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   21328:	231f      	movs	r3, #31
   2132a:	18fb      	adds	r3, r7, r3
   2132c:	781b      	ldrb	r3, [r3, #0]
   2132e:	1e5c      	subs	r4, r3, #1
   21330:	231f      	movs	r3, #31
   21332:	18fb      	adds	r3, r7, r3
   21334:	781b      	ldrb	r3, [r3, #0]
   21336:	3b01      	subs	r3, #1
   21338:	001a      	movs	r2, r3
   2133a:	2314      	movs	r3, #20
   2133c:	18fb      	adds	r3, r7, r3
   2133e:	0019      	movs	r1, r3
   21340:	207f      	movs	r0, #127	; 0x7f
   21342:	4b1d      	ldr	r3, [pc, #116]	; (213b8 <spi_cmd+0x324>)
   21344:	4798      	blx	r3
   21346:	0003      	movs	r3, r0
   21348:	18db      	adds	r3, r3, r3
   2134a:	b2da      	uxtb	r2, r3
   2134c:	2314      	movs	r3, #20
   2134e:	18fb      	adds	r3, r7, r3
   21350:	551a      	strb	r2, [r3, r4]
   21352:	e006      	b.n	21362 <spi_cmd+0x2ce>
		else
			len-=1;
   21354:	231f      	movs	r3, #31
   21356:	18fb      	adds	r3, r7, r3
   21358:	221f      	movs	r2, #31
   2135a:	18ba      	adds	r2, r7, r2
   2135c:	7812      	ldrb	r2, [r2, #0]
   2135e:	3a01      	subs	r2, #1
   21360:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   21362:	231f      	movs	r3, #31
   21364:	18fb      	adds	r3, r7, r3
   21366:	781b      	ldrb	r3, [r3, #0]
   21368:	b29a      	uxth	r2, r3
   2136a:	2314      	movs	r3, #20
   2136c:	18fb      	adds	r3, r7, r3
   2136e:	0011      	movs	r1, r2
   21370:	0018      	movs	r0, r3
   21372:	4b12      	ldr	r3, [pc, #72]	; (213bc <spi_cmd+0x328>)
   21374:	4798      	blx	r3
   21376:	1e03      	subs	r3, r0, #0
   21378:	d012      	beq.n	213a0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2137a:	2390      	movs	r3, #144	; 0x90
   2137c:	005a      	lsls	r2, r3, #1
   2137e:	4910      	ldr	r1, [pc, #64]	; (213c0 <spi_cmd+0x32c>)
   21380:	4b10      	ldr	r3, [pc, #64]	; (213c4 <spi_cmd+0x330>)
   21382:	0018      	movs	r0, r3
   21384:	4b10      	ldr	r3, [pc, #64]	; (213c8 <spi_cmd+0x334>)
   21386:	4798      	blx	r3
   21388:	4b10      	ldr	r3, [pc, #64]	; (213cc <spi_cmd+0x338>)
   2138a:	0018      	movs	r0, r3
   2138c:	4b0e      	ldr	r3, [pc, #56]	; (213c8 <spi_cmd+0x334>)
   2138e:	4798      	blx	r3
   21390:	4b0f      	ldr	r3, [pc, #60]	; (213d0 <spi_cmd+0x33c>)
   21392:	0018      	movs	r0, r3
   21394:	4b0c      	ldr	r3, [pc, #48]	; (213c8 <spi_cmd+0x334>)
   21396:	4798      	blx	r3
			result = N_FAIL;
   21398:	231e      	movs	r3, #30
   2139a:	18fb      	adds	r3, r7, r3
   2139c:	2200      	movs	r2, #0
   2139e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   213a0:	231e      	movs	r3, #30
   213a2:	18fb      	adds	r3, r7, r3
   213a4:	781b      	ldrb	r3, [r3, #0]
   213a6:	b25b      	sxtb	r3, r3
}
   213a8:	0018      	movs	r0, r3
   213aa:	46bd      	mov	sp, r7
   213ac:	b009      	add	sp, #36	; 0x24
   213ae:	bd90      	pop	{r4, r7, pc}
   213b0:	000367a4 	.word	0x000367a4
   213b4:	20003d08 	.word	0x20003d08
   213b8:	00021045 	.word	0x00021045
   213bc:	00020f8d 	.word	0x00020f8d
   213c0:	0003681c 	.word	0x0003681c
   213c4:	0003622c 	.word	0x0003622c
   213c8:	0001bafd 	.word	0x0001bafd
   213cc:	00036240 	.word	0x00036240
   213d0:	0003626c 	.word	0x0003626c

000213d4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   213d4:	b590      	push	{r4, r7, lr}
   213d6:	b085      	sub	sp, #20
   213d8:	af00      	add	r7, sp, #0
   213da:	0002      	movs	r2, r0
   213dc:	1dfb      	adds	r3, r7, #7
   213de:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   213e0:	230e      	movs	r3, #14
   213e2:	18fb      	adds	r3, r7, r3
   213e4:	2201      	movs	r2, #1
   213e6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   213e8:	4b32      	ldr	r3, [pc, #200]	; (214b4 <spi_data_rsp+0xe0>)
   213ea:	781b      	ldrb	r3, [r3, #0]
   213ec:	2b00      	cmp	r3, #0
   213ee:	d104      	bne.n	213fa <spi_data_rsp+0x26>
		len = 2;
   213f0:	230f      	movs	r3, #15
   213f2:	18fb      	adds	r3, r7, r3
   213f4:	2202      	movs	r2, #2
   213f6:	701a      	strb	r2, [r3, #0]
   213f8:	e003      	b.n	21402 <spi_data_rsp+0x2e>
	else
		len = 3;
   213fa:	230f      	movs	r3, #15
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	2203      	movs	r2, #3
   21400:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   21402:	230f      	movs	r3, #15
   21404:	18fb      	adds	r3, r7, r3
   21406:	781b      	ldrb	r3, [r3, #0]
   21408:	b29a      	uxth	r2, r3
   2140a:	2308      	movs	r3, #8
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	0011      	movs	r1, r2
   21410:	0018      	movs	r0, r3
   21412:	4b29      	ldr	r3, [pc, #164]	; (214b8 <spi_data_rsp+0xe4>)
   21414:	4798      	blx	r3
   21416:	1e03      	subs	r3, r0, #0
   21418:	d013      	beq.n	21442 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2141a:	239a      	movs	r3, #154	; 0x9a
   2141c:	005a      	lsls	r2, r3, #1
   2141e:	4927      	ldr	r1, [pc, #156]	; (214bc <spi_data_rsp+0xe8>)
   21420:	4b27      	ldr	r3, [pc, #156]	; (214c0 <spi_data_rsp+0xec>)
   21422:	0018      	movs	r0, r3
   21424:	4b27      	ldr	r3, [pc, #156]	; (214c4 <spi_data_rsp+0xf0>)
   21426:	4798      	blx	r3
   21428:	4b27      	ldr	r3, [pc, #156]	; (214c8 <spi_data_rsp+0xf4>)
   2142a:	0018      	movs	r0, r3
   2142c:	4b25      	ldr	r3, [pc, #148]	; (214c4 <spi_data_rsp+0xf0>)
   2142e:	4798      	blx	r3
   21430:	4b26      	ldr	r3, [pc, #152]	; (214cc <spi_data_rsp+0xf8>)
   21432:	0018      	movs	r0, r3
   21434:	4b23      	ldr	r3, [pc, #140]	; (214c4 <spi_data_rsp+0xf0>)
   21436:	4798      	blx	r3
		result = N_FAIL;
   21438:	230e      	movs	r3, #14
   2143a:	18fb      	adds	r3, r7, r3
   2143c:	2200      	movs	r2, #0
   2143e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   21440:	e030      	b.n	214a4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   21442:	230f      	movs	r3, #15
   21444:	18fb      	adds	r3, r7, r3
   21446:	781b      	ldrb	r3, [r3, #0]
   21448:	3b01      	subs	r3, #1
   2144a:	2208      	movs	r2, #8
   2144c:	18ba      	adds	r2, r7, r2
   2144e:	5cd3      	ldrb	r3, [r2, r3]
   21450:	2b00      	cmp	r3, #0
   21452:	d108      	bne.n	21466 <spi_data_rsp+0x92>
   21454:	230f      	movs	r3, #15
   21456:	18fb      	adds	r3, r7, r3
   21458:	781b      	ldrb	r3, [r3, #0]
   2145a:	3b02      	subs	r3, #2
   2145c:	2208      	movs	r2, #8
   2145e:	18ba      	adds	r2, r7, r2
   21460:	5cd3      	ldrb	r3, [r2, r3]
   21462:	2bc3      	cmp	r3, #195	; 0xc3
   21464:	d01e      	beq.n	214a4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   21466:	233c      	movs	r3, #60	; 0x3c
   21468:	33ff      	adds	r3, #255	; 0xff
   2146a:	001a      	movs	r2, r3
   2146c:	4913      	ldr	r1, [pc, #76]	; (214bc <spi_data_rsp+0xe8>)
   2146e:	4b14      	ldr	r3, [pc, #80]	; (214c0 <spi_data_rsp+0xec>)
   21470:	0018      	movs	r0, r3
   21472:	4b14      	ldr	r3, [pc, #80]	; (214c4 <spi_data_rsp+0xf0>)
   21474:	4798      	blx	r3
   21476:	2308      	movs	r3, #8
   21478:	18fb      	adds	r3, r7, r3
   2147a:	781b      	ldrb	r3, [r3, #0]
   2147c:	0019      	movs	r1, r3
   2147e:	2308      	movs	r3, #8
   21480:	18fb      	adds	r3, r7, r3
   21482:	785b      	ldrb	r3, [r3, #1]
   21484:	001a      	movs	r2, r3
   21486:	2308      	movs	r3, #8
   21488:	18fb      	adds	r3, r7, r3
   2148a:	789b      	ldrb	r3, [r3, #2]
   2148c:	4810      	ldr	r0, [pc, #64]	; (214d0 <spi_data_rsp+0xfc>)
   2148e:	4c0d      	ldr	r4, [pc, #52]	; (214c4 <spi_data_rsp+0xf0>)
   21490:	47a0      	blx	r4
   21492:	4b0e      	ldr	r3, [pc, #56]	; (214cc <spi_data_rsp+0xf8>)
   21494:	0018      	movs	r0, r3
   21496:	4b0b      	ldr	r3, [pc, #44]	; (214c4 <spi_data_rsp+0xf0>)
   21498:	4798      	blx	r3
		result = N_FAIL;
   2149a:	230e      	movs	r3, #14
   2149c:	18fb      	adds	r3, r7, r3
   2149e:	2200      	movs	r2, #0
   214a0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   214a2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   214a4:	230e      	movs	r3, #14
   214a6:	18fb      	adds	r3, r7, r3
   214a8:	781b      	ldrb	r3, [r3, #0]
   214aa:	b25b      	sxtb	r3, r3
}
   214ac:	0018      	movs	r0, r3
   214ae:	46bd      	mov	sp, r7
   214b0:	b005      	add	sp, #20
   214b2:	bd90      	pop	{r4, r7, pc}
   214b4:	20003d08 	.word	0x20003d08
   214b8:	00020f49 	.word	0x00020f49
   214bc:	00036824 	.word	0x00036824
   214c0:	0003622c 	.word	0x0003622c
   214c4:	0001bafd 	.word	0x0001bafd
   214c8:	00036270 	.word	0x00036270
   214cc:	0003626c 	.word	0x0003626c
   214d0:	00036290 	.word	0x00036290

000214d4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   214d4:	b580      	push	{r7, lr}
   214d6:	b084      	sub	sp, #16
   214d8:	af00      	add	r7, sp, #0
   214da:	0002      	movs	r2, r0
   214dc:	1dfb      	adds	r3, r7, #7
   214de:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   214e0:	230f      	movs	r3, #15
   214e2:	18fb      	adds	r3, r7, r3
   214e4:	2201      	movs	r2, #1
   214e6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   214e8:	1dfb      	adds	r3, r7, #7
   214ea:	781b      	ldrb	r3, [r3, #0]
   214ec:	2bcf      	cmp	r3, #207	; 0xcf
   214ee:	d007      	beq.n	21500 <spi_cmd_rsp+0x2c>
   214f0:	1dfb      	adds	r3, r7, #7
   214f2:	781b      	ldrb	r3, [r3, #0]
   214f4:	2bc5      	cmp	r3, #197	; 0xc5
   214f6:	d003      	beq.n	21500 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   214f8:	1dfb      	adds	r3, r7, #7
   214fa:	781b      	ldrb	r3, [r3, #0]
   214fc:	2bc6      	cmp	r3, #198	; 0xc6
   214fe:	d10c      	bne.n	2151a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   21500:	230d      	movs	r3, #13
   21502:	18fb      	adds	r3, r7, r3
   21504:	2101      	movs	r1, #1
   21506:	0018      	movs	r0, r3
   21508:	4b3b      	ldr	r3, [pc, #236]	; (215f8 <spi_cmd_rsp+0x124>)
   2150a:	4798      	blx	r3
   2150c:	1e03      	subs	r3, r0, #0
   2150e:	d004      	beq.n	2151a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   21510:	230f      	movs	r3, #15
   21512:	18fb      	adds	r3, r7, r3
   21514:	2200      	movs	r2, #0
   21516:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   21518:	e065      	b.n	215e6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2151a:	230e      	movs	r3, #14
   2151c:	18fb      	adds	r3, r7, r3
   2151e:	220a      	movs	r2, #10
   21520:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   21522:	230d      	movs	r3, #13
   21524:	18fb      	adds	r3, r7, r3
   21526:	2101      	movs	r1, #1
   21528:	0018      	movs	r0, r3
   2152a:	4b33      	ldr	r3, [pc, #204]	; (215f8 <spi_cmd_rsp+0x124>)
   2152c:	4798      	blx	r3
   2152e:	1e03      	subs	r3, r0, #0
   21530:	d014      	beq.n	2155c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   21532:	235c      	movs	r3, #92	; 0x5c
   21534:	33ff      	adds	r3, #255	; 0xff
   21536:	001a      	movs	r2, r3
   21538:	4930      	ldr	r1, [pc, #192]	; (215fc <spi_cmd_rsp+0x128>)
   2153a:	4b31      	ldr	r3, [pc, #196]	; (21600 <spi_cmd_rsp+0x12c>)
   2153c:	0018      	movs	r0, r3
   2153e:	4b31      	ldr	r3, [pc, #196]	; (21604 <spi_cmd_rsp+0x130>)
   21540:	4798      	blx	r3
   21542:	4b31      	ldr	r3, [pc, #196]	; (21608 <spi_cmd_rsp+0x134>)
   21544:	0018      	movs	r0, r3
   21546:	4b2f      	ldr	r3, [pc, #188]	; (21604 <spi_cmd_rsp+0x130>)
   21548:	4798      	blx	r3
   2154a:	4b30      	ldr	r3, [pc, #192]	; (2160c <spi_cmd_rsp+0x138>)
   2154c:	0018      	movs	r0, r3
   2154e:	4b2d      	ldr	r3, [pc, #180]	; (21604 <spi_cmd_rsp+0x130>)
   21550:	4798      	blx	r3
			result = N_FAIL;
   21552:	230f      	movs	r3, #15
   21554:	18fb      	adds	r3, r7, r3
   21556:	2200      	movs	r2, #0
   21558:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2155a:	e044      	b.n	215e6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2155c:	230d      	movs	r3, #13
   2155e:	18fb      	adds	r3, r7, r3
   21560:	781b      	ldrb	r3, [r3, #0]
   21562:	1dfa      	adds	r2, r7, #7
   21564:	7812      	ldrb	r2, [r2, #0]
   21566:	429a      	cmp	r2, r3
   21568:	d00b      	beq.n	21582 <spi_cmd_rsp+0xae>
   2156a:	230e      	movs	r3, #14
   2156c:	18fb      	adds	r3, r7, r3
   2156e:	781b      	ldrb	r3, [r3, #0]
   21570:	b25b      	sxtb	r3, r3
   21572:	b2da      	uxtb	r2, r3
   21574:	3a01      	subs	r2, #1
   21576:	b2d1      	uxtb	r1, r2
   21578:	220e      	movs	r2, #14
   2157a:	18ba      	adds	r2, r7, r2
   2157c:	7011      	strb	r1, [r2, #0]
   2157e:	2b00      	cmp	r3, #0
   21580:	dccf      	bgt.n	21522 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   21582:	230e      	movs	r3, #14
   21584:	18fb      	adds	r3, r7, r3
   21586:	220a      	movs	r2, #10
   21588:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2158a:	230d      	movs	r3, #13
   2158c:	18fb      	adds	r3, r7, r3
   2158e:	2101      	movs	r1, #1
   21590:	0018      	movs	r0, r3
   21592:	4b19      	ldr	r3, [pc, #100]	; (215f8 <spi_cmd_rsp+0x124>)
   21594:	4798      	blx	r3
   21596:	1e03      	subs	r3, r0, #0
   21598:	d014      	beq.n	215c4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2159a:	236a      	movs	r3, #106	; 0x6a
   2159c:	33ff      	adds	r3, #255	; 0xff
   2159e:	001a      	movs	r2, r3
   215a0:	4916      	ldr	r1, [pc, #88]	; (215fc <spi_cmd_rsp+0x128>)
   215a2:	4b17      	ldr	r3, [pc, #92]	; (21600 <spi_cmd_rsp+0x12c>)
   215a4:	0018      	movs	r0, r3
   215a6:	4b17      	ldr	r3, [pc, #92]	; (21604 <spi_cmd_rsp+0x130>)
   215a8:	4798      	blx	r3
   215aa:	4b17      	ldr	r3, [pc, #92]	; (21608 <spi_cmd_rsp+0x134>)
   215ac:	0018      	movs	r0, r3
   215ae:	4b15      	ldr	r3, [pc, #84]	; (21604 <spi_cmd_rsp+0x130>)
   215b0:	4798      	blx	r3
   215b2:	4b16      	ldr	r3, [pc, #88]	; (2160c <spi_cmd_rsp+0x138>)
   215b4:	0018      	movs	r0, r3
   215b6:	4b13      	ldr	r3, [pc, #76]	; (21604 <spi_cmd_rsp+0x130>)
   215b8:	4798      	blx	r3
			result = N_FAIL;
   215ba:	230f      	movs	r3, #15
   215bc:	18fb      	adds	r3, r7, r3
   215be:	2200      	movs	r2, #0
   215c0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   215c2:	e010      	b.n	215e6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   215c4:	230d      	movs	r3, #13
   215c6:	18fb      	adds	r3, r7, r3
   215c8:	781b      	ldrb	r3, [r3, #0]
   215ca:	2b00      	cmp	r3, #0
   215cc:	d00b      	beq.n	215e6 <spi_cmd_rsp+0x112>
   215ce:	230e      	movs	r3, #14
   215d0:	18fb      	adds	r3, r7, r3
   215d2:	781b      	ldrb	r3, [r3, #0]
   215d4:	b25b      	sxtb	r3, r3
   215d6:	b2da      	uxtb	r2, r3
   215d8:	3a01      	subs	r2, #1
   215da:	b2d1      	uxtb	r1, r2
   215dc:	220e      	movs	r2, #14
   215de:	18ba      	adds	r2, r7, r2
   215e0:	7011      	strb	r1, [r2, #0]
   215e2:	2b00      	cmp	r3, #0
   215e4:	dcd1      	bgt.n	2158a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   215e6:	230f      	movs	r3, #15
   215e8:	18fb      	adds	r3, r7, r3
   215ea:	781b      	ldrb	r3, [r3, #0]
   215ec:	b25b      	sxtb	r3, r3
}
   215ee:	0018      	movs	r0, r3
   215f0:	46bd      	mov	sp, r7
   215f2:	b004      	add	sp, #16
   215f4:	bd80      	pop	{r7, pc}
   215f6:	46c0      	nop			; (mov r8, r8)
   215f8:	00020f49 	.word	0x00020f49
   215fc:	00036834 	.word	0x00036834
   21600:	0003622c 	.word	0x0003622c
   21604:	0001bafd 	.word	0x0001bafd
   21608:	000362c0 	.word	0x000362c0
   2160c:	0003626c 	.word	0x0003626c

00021610 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   21610:	b590      	push	{r4, r7, lr}
   21612:	b09f      	sub	sp, #124	; 0x7c
   21614:	af00      	add	r7, sp, #0
   21616:	60b9      	str	r1, [r7, #8]
   21618:	607a      	str	r2, [r7, #4]
   2161a:	603b      	str	r3, [r7, #0]
   2161c:	230f      	movs	r3, #15
   2161e:	18fb      	adds	r3, r7, r3
   21620:	1c02      	adds	r2, r0, #0
   21622:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   21624:	2300      	movs	r3, #0
   21626:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   21628:	2301      	movs	r3, #1
   2162a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2162c:	2338      	movs	r3, #56	; 0x38
   2162e:	18fb      	adds	r3, r7, r3
   21630:	220f      	movs	r2, #15
   21632:	18ba      	adds	r2, r7, r2
   21634:	7812      	ldrb	r2, [r2, #0]
   21636:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   21638:	230f      	movs	r3, #15
   2163a:	18fb      	adds	r3, r7, r3
   2163c:	781b      	ldrb	r3, [r3, #0]
   2163e:	3bc1      	subs	r3, #193	; 0xc1
   21640:	2b0e      	cmp	r3, #14
   21642:	d900      	bls.n	21646 <spi_cmd_complete+0x36>
   21644:	e103      	b.n	2184e <spi_cmd_complete+0x23e>
   21646:	009a      	lsls	r2, r3, #2
   21648:	4bd1      	ldr	r3, [pc, #836]	; (21990 <spi_cmd_complete+0x380>)
   2164a:	18d3      	adds	r3, r2, r3
   2164c:	681b      	ldr	r3, [r3, #0]
   2164e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   21650:	68bb      	ldr	r3, [r7, #8]
   21652:	0c1b      	lsrs	r3, r3, #16
   21654:	b2da      	uxtb	r2, r3
   21656:	2338      	movs	r3, #56	; 0x38
   21658:	18fb      	adds	r3, r7, r3
   2165a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2165c:	68bb      	ldr	r3, [r7, #8]
   2165e:	0a1b      	lsrs	r3, r3, #8
   21660:	b2da      	uxtb	r2, r3
   21662:	2338      	movs	r3, #56	; 0x38
   21664:	18fb      	adds	r3, r7, r3
   21666:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   21668:	68bb      	ldr	r3, [r7, #8]
   2166a:	b2da      	uxtb	r2, r3
   2166c:	2338      	movs	r3, #56	; 0x38
   2166e:	18fb      	adds	r3, r7, r3
   21670:	70da      	strb	r2, [r3, #3]
		len = 5;
   21672:	2305      	movs	r3, #5
   21674:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   21676:	e0ed      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   21678:	68bb      	ldr	r3, [r7, #8]
   2167a:	0a1b      	lsrs	r3, r3, #8
   2167c:	b2da      	uxtb	r2, r3
   2167e:	2338      	movs	r3, #56	; 0x38
   21680:	18fb      	adds	r3, r7, r3
   21682:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   21684:	2388      	movs	r3, #136	; 0x88
   21686:	18fb      	adds	r3, r7, r3
   21688:	781b      	ldrb	r3, [r3, #0]
   2168a:	2b01      	cmp	r3, #1
   2168c:	d109      	bne.n	216a2 <spi_cmd_complete+0x92>
   2168e:	2338      	movs	r3, #56	; 0x38
   21690:	18fb      	adds	r3, r7, r3
   21692:	785b      	ldrb	r3, [r3, #1]
   21694:	2280      	movs	r2, #128	; 0x80
   21696:	4252      	negs	r2, r2
   21698:	4313      	orrs	r3, r2
   2169a:	b2da      	uxtb	r2, r3
   2169c:	2338      	movs	r3, #56	; 0x38
   2169e:	18fb      	adds	r3, r7, r3
   216a0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   216a2:	68bb      	ldr	r3, [r7, #8]
   216a4:	b2da      	uxtb	r2, r3
   216a6:	2338      	movs	r3, #56	; 0x38
   216a8:	18fb      	adds	r3, r7, r3
   216aa:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   216ac:	2338      	movs	r3, #56	; 0x38
   216ae:	18fb      	adds	r3, r7, r3
   216b0:	2200      	movs	r2, #0
   216b2:	70da      	strb	r2, [r3, #3]
		len = 5;
   216b4:	2305      	movs	r3, #5
   216b6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216b8:	e0cc      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   216ba:	2338      	movs	r3, #56	; 0x38
   216bc:	18fb      	adds	r3, r7, r3
   216be:	2200      	movs	r2, #0
   216c0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   216c2:	2338      	movs	r3, #56	; 0x38
   216c4:	18fb      	adds	r3, r7, r3
   216c6:	2200      	movs	r2, #0
   216c8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   216ca:	2338      	movs	r3, #56	; 0x38
   216cc:	18fb      	adds	r3, r7, r3
   216ce:	2200      	movs	r2, #0
   216d0:	70da      	strb	r2, [r3, #3]
		len = 5;
   216d2:	2305      	movs	r3, #5
   216d4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216d6:	e0bd      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   216d8:	2338      	movs	r3, #56	; 0x38
   216da:	18fb      	adds	r3, r7, r3
   216dc:	2200      	movs	r2, #0
   216de:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   216e0:	2338      	movs	r3, #56	; 0x38
   216e2:	18fb      	adds	r3, r7, r3
   216e4:	2200      	movs	r2, #0
   216e6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   216e8:	2338      	movs	r3, #56	; 0x38
   216ea:	18fb      	adds	r3, r7, r3
   216ec:	2200      	movs	r2, #0
   216ee:	70da      	strb	r2, [r3, #3]
		len = 5;
   216f0:	2305      	movs	r3, #5
   216f2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216f4:	e0ae      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   216f6:	2338      	movs	r3, #56	; 0x38
   216f8:	18fb      	adds	r3, r7, r3
   216fa:	22ff      	movs	r2, #255	; 0xff
   216fc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   216fe:	2338      	movs	r3, #56	; 0x38
   21700:	18fb      	adds	r3, r7, r3
   21702:	22ff      	movs	r2, #255	; 0xff
   21704:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   21706:	2338      	movs	r3, #56	; 0x38
   21708:	18fb      	adds	r3, r7, r3
   2170a:	22ff      	movs	r2, #255	; 0xff
   2170c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2170e:	2305      	movs	r3, #5
   21710:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   21712:	e09f      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   21714:	68bb      	ldr	r3, [r7, #8]
   21716:	0c1b      	lsrs	r3, r3, #16
   21718:	b2da      	uxtb	r2, r3
   2171a:	2338      	movs	r3, #56	; 0x38
   2171c:	18fb      	adds	r3, r7, r3
   2171e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   21720:	68bb      	ldr	r3, [r7, #8]
   21722:	0a1b      	lsrs	r3, r3, #8
   21724:	b2da      	uxtb	r2, r3
   21726:	2338      	movs	r3, #56	; 0x38
   21728:	18fb      	adds	r3, r7, r3
   2172a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2172c:	68bb      	ldr	r3, [r7, #8]
   2172e:	b2da      	uxtb	r2, r3
   21730:	2338      	movs	r3, #56	; 0x38
   21732:	18fb      	adds	r3, r7, r3
   21734:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   21736:	683b      	ldr	r3, [r7, #0]
   21738:	0a1b      	lsrs	r3, r3, #8
   2173a:	b2da      	uxtb	r2, r3
   2173c:	2338      	movs	r3, #56	; 0x38
   2173e:	18fb      	adds	r3, r7, r3
   21740:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   21742:	683b      	ldr	r3, [r7, #0]
   21744:	b2da      	uxtb	r2, r3
   21746:	2338      	movs	r3, #56	; 0x38
   21748:	18fb      	adds	r3, r7, r3
   2174a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2174c:	2307      	movs	r3, #7
   2174e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   21750:	e080      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   21752:	68bb      	ldr	r3, [r7, #8]
   21754:	0c1b      	lsrs	r3, r3, #16
   21756:	b2da      	uxtb	r2, r3
   21758:	2338      	movs	r3, #56	; 0x38
   2175a:	18fb      	adds	r3, r7, r3
   2175c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2175e:	68bb      	ldr	r3, [r7, #8]
   21760:	0a1b      	lsrs	r3, r3, #8
   21762:	b2da      	uxtb	r2, r3
   21764:	2338      	movs	r3, #56	; 0x38
   21766:	18fb      	adds	r3, r7, r3
   21768:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2176a:	68bb      	ldr	r3, [r7, #8]
   2176c:	b2da      	uxtb	r2, r3
   2176e:	2338      	movs	r3, #56	; 0x38
   21770:	18fb      	adds	r3, r7, r3
   21772:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   21774:	683b      	ldr	r3, [r7, #0]
   21776:	0c1b      	lsrs	r3, r3, #16
   21778:	b2da      	uxtb	r2, r3
   2177a:	2338      	movs	r3, #56	; 0x38
   2177c:	18fb      	adds	r3, r7, r3
   2177e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   21780:	683b      	ldr	r3, [r7, #0]
   21782:	0a1b      	lsrs	r3, r3, #8
   21784:	b2da      	uxtb	r2, r3
   21786:	2338      	movs	r3, #56	; 0x38
   21788:	18fb      	adds	r3, r7, r3
   2178a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2178c:	683b      	ldr	r3, [r7, #0]
   2178e:	b2da      	uxtb	r2, r3
   21790:	2338      	movs	r3, #56	; 0x38
   21792:	18fb      	adds	r3, r7, r3
   21794:	719a      	strb	r2, [r3, #6]
		len = 8;
   21796:	2308      	movs	r3, #8
   21798:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2179a:	e05b      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2179c:	68bb      	ldr	r3, [r7, #8]
   2179e:	0a1b      	lsrs	r3, r3, #8
   217a0:	b2da      	uxtb	r2, r3
   217a2:	2338      	movs	r3, #56	; 0x38
   217a4:	18fb      	adds	r3, r7, r3
   217a6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   217a8:	2388      	movs	r3, #136	; 0x88
   217aa:	18fb      	adds	r3, r7, r3
   217ac:	781b      	ldrb	r3, [r3, #0]
   217ae:	2b01      	cmp	r3, #1
   217b0:	d109      	bne.n	217c6 <spi_cmd_complete+0x1b6>
   217b2:	2338      	movs	r3, #56	; 0x38
   217b4:	18fb      	adds	r3, r7, r3
   217b6:	785b      	ldrb	r3, [r3, #1]
   217b8:	2280      	movs	r2, #128	; 0x80
   217ba:	4252      	negs	r2, r2
   217bc:	4313      	orrs	r3, r2
   217be:	b2da      	uxtb	r2, r3
   217c0:	2338      	movs	r3, #56	; 0x38
   217c2:	18fb      	adds	r3, r7, r3
   217c4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   217c6:	68bb      	ldr	r3, [r7, #8]
   217c8:	b2da      	uxtb	r2, r3
   217ca:	2338      	movs	r3, #56	; 0x38
   217cc:	18fb      	adds	r3, r7, r3
   217ce:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   217d0:	687b      	ldr	r3, [r7, #4]
   217d2:	78da      	ldrb	r2, [r3, #3]
   217d4:	2338      	movs	r3, #56	; 0x38
   217d6:	18fb      	adds	r3, r7, r3
   217d8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   217da:	687b      	ldr	r3, [r7, #4]
   217dc:	789a      	ldrb	r2, [r3, #2]
   217de:	2338      	movs	r3, #56	; 0x38
   217e0:	18fb      	adds	r3, r7, r3
   217e2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   217e4:	687b      	ldr	r3, [r7, #4]
   217e6:	785a      	ldrb	r2, [r3, #1]
   217e8:	2338      	movs	r3, #56	; 0x38
   217ea:	18fb      	adds	r3, r7, r3
   217ec:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   217ee:	687b      	ldr	r3, [r7, #4]
   217f0:	781a      	ldrb	r2, [r3, #0]
   217f2:	2338      	movs	r3, #56	; 0x38
   217f4:	18fb      	adds	r3, r7, r3
   217f6:	719a      	strb	r2, [r3, #6]
		len = 8;
   217f8:	2308      	movs	r3, #8
   217fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   217fc:	e02a      	b.n	21854 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   217fe:	68bb      	ldr	r3, [r7, #8]
   21800:	0c1b      	lsrs	r3, r3, #16
   21802:	b2da      	uxtb	r2, r3
   21804:	2338      	movs	r3, #56	; 0x38
   21806:	18fb      	adds	r3, r7, r3
   21808:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2180a:	68bb      	ldr	r3, [r7, #8]
   2180c:	0a1b      	lsrs	r3, r3, #8
   2180e:	b2da      	uxtb	r2, r3
   21810:	2338      	movs	r3, #56	; 0x38
   21812:	18fb      	adds	r3, r7, r3
   21814:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   21816:	68bb      	ldr	r3, [r7, #8]
   21818:	b2da      	uxtb	r2, r3
   2181a:	2338      	movs	r3, #56	; 0x38
   2181c:	18fb      	adds	r3, r7, r3
   2181e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   21820:	687b      	ldr	r3, [r7, #4]
   21822:	78da      	ldrb	r2, [r3, #3]
   21824:	2338      	movs	r3, #56	; 0x38
   21826:	18fb      	adds	r3, r7, r3
   21828:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2182a:	687b      	ldr	r3, [r7, #4]
   2182c:	789a      	ldrb	r2, [r3, #2]
   2182e:	2338      	movs	r3, #56	; 0x38
   21830:	18fb      	adds	r3, r7, r3
   21832:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   21834:	687b      	ldr	r3, [r7, #4]
   21836:	785a      	ldrb	r2, [r3, #1]
   21838:	2338      	movs	r3, #56	; 0x38
   2183a:	18fb      	adds	r3, r7, r3
   2183c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2183e:	687b      	ldr	r3, [r7, #4]
   21840:	781a      	ldrb	r2, [r3, #0]
   21842:	2338      	movs	r3, #56	; 0x38
   21844:	18fb      	adds	r3, r7, r3
   21846:	71da      	strb	r2, [r3, #7]
		len = 9;
   21848:	2309      	movs	r3, #9
   2184a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2184c:	e002      	b.n	21854 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2184e:	2300      	movs	r3, #0
   21850:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   21852:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   21854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21856:	2b01      	cmp	r3, #1
   21858:	d001      	beq.n	2185e <spi_cmd_complete+0x24e>
		return result;
   2185a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2185c:	e33a      	b.n	21ed4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2185e:	4b4d      	ldr	r3, [pc, #308]	; (21994 <spi_cmd_complete+0x384>)
   21860:	781b      	ldrb	r3, [r3, #0]
   21862:	2b00      	cmp	r3, #0
   21864:	d111      	bne.n	2188a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   21866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   21868:	1e5c      	subs	r4, r3, #1
   2186a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2186c:	3b01      	subs	r3, #1
   2186e:	001a      	movs	r2, r3
   21870:	2338      	movs	r3, #56	; 0x38
   21872:	18fb      	adds	r3, r7, r3
   21874:	0019      	movs	r1, r3
   21876:	207f      	movs	r0, #127	; 0x7f
   21878:	4b47      	ldr	r3, [pc, #284]	; (21998 <spi_cmd_complete+0x388>)
   2187a:	4798      	blx	r3
   2187c:	0003      	movs	r3, r0
   2187e:	18db      	adds	r3, r3, r3
   21880:	b2da      	uxtb	r2, r3
   21882:	2338      	movs	r3, #56	; 0x38
   21884:	18fb      	adds	r3, r7, r3
   21886:	551a      	strb	r2, [r3, r4]
   21888:	e002      	b.n	21890 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2188a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2188c:	3b01      	subs	r3, #1
   2188e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   21890:	230f      	movs	r3, #15
   21892:	18fb      	adds	r3, r7, r3
   21894:	781b      	ldrb	r3, [r3, #0]
   21896:	2bcf      	cmp	r3, #207	; 0xcf
   21898:	d009      	beq.n	218ae <spi_cmd_complete+0x29e>
   2189a:	230f      	movs	r3, #15
   2189c:	18fb      	adds	r3, r7, r3
   2189e:	781b      	ldrb	r3, [r3, #0]
   218a0:	2bc5      	cmp	r3, #197	; 0xc5
   218a2:	d004      	beq.n	218ae <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   218a4:	230f      	movs	r3, #15
   218a6:	18fb      	adds	r3, r7, r3
   218a8:	781b      	ldrb	r3, [r3, #0]
   218aa:	2bc6      	cmp	r3, #198	; 0xc6
   218ac:	d103      	bne.n	218b6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   218ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218b0:	3306      	adds	r3, #6
   218b2:	673b      	str	r3, [r7, #112]	; 0x70
   218b4:	e018      	b.n	218e8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   218b6:	230f      	movs	r3, #15
   218b8:	18fb      	adds	r3, r7, r3
   218ba:	781b      	ldrb	r3, [r3, #0]
   218bc:	2bc4      	cmp	r3, #196	; 0xc4
   218be:	d004      	beq.n	218ca <spi_cmd_complete+0x2ba>
   218c0:	230f      	movs	r3, #15
   218c2:	18fb      	adds	r3, r7, r3
   218c4:	781b      	ldrb	r3, [r3, #0]
   218c6:	2bca      	cmp	r3, #202	; 0xca
   218c8:	d10b      	bne.n	218e2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   218ca:	4b32      	ldr	r3, [pc, #200]	; (21994 <spi_cmd_complete+0x384>)
   218cc:	781b      	ldrb	r3, [r3, #0]
   218ce:	2b00      	cmp	r3, #0
   218d0:	d103      	bne.n	218da <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   218d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218d4:	330c      	adds	r3, #12
   218d6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   218d8:	e006      	b.n	218e8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   218da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218dc:	330a      	adds	r3, #10
   218de:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   218e0:	e002      	b.n	218e8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   218e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218e4:	3305      	adds	r3, #5
   218e6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   218e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   218ea:	2b20      	cmp	r3, #32
   218ec:	d914      	bls.n	21918 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   218ee:	23f7      	movs	r3, #247	; 0xf7
   218f0:	005a      	lsls	r2, r3, #1
   218f2:	492a      	ldr	r1, [pc, #168]	; (2199c <spi_cmd_complete+0x38c>)
   218f4:	4b2a      	ldr	r3, [pc, #168]	; (219a0 <spi_cmd_complete+0x390>)
   218f6:	0018      	movs	r0, r3
   218f8:	4b2a      	ldr	r3, [pc, #168]	; (219a4 <spi_cmd_complete+0x394>)
   218fa:	4798      	blx	r3
   218fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   218fe:	4b2a      	ldr	r3, [pc, #168]	; (219a8 <spi_cmd_complete+0x398>)
   21900:	2220      	movs	r2, #32
   21902:	0018      	movs	r0, r3
   21904:	4b27      	ldr	r3, [pc, #156]	; (219a4 <spi_cmd_complete+0x394>)
   21906:	4798      	blx	r3
   21908:	4b28      	ldr	r3, [pc, #160]	; (219ac <spi_cmd_complete+0x39c>)
   2190a:	0018      	movs	r0, r3
   2190c:	4b25      	ldr	r3, [pc, #148]	; (219a4 <spi_cmd_complete+0x394>)
   2190e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   21910:	2300      	movs	r3, #0
   21912:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21916:	e2dd      	b.n	21ed4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   21918:	2377      	movs	r3, #119	; 0x77
   2191a:	18fb      	adds	r3, r7, r3
   2191c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2191e:	701a      	strb	r2, [r3, #0]
   21920:	e00d      	b.n	2193e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   21922:	2377      	movs	r3, #119	; 0x77
   21924:	18fb      	adds	r3, r7, r3
   21926:	781b      	ldrb	r3, [r3, #0]
   21928:	2238      	movs	r2, #56	; 0x38
   2192a:	18ba      	adds	r2, r7, r2
   2192c:	2100      	movs	r1, #0
   2192e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   21930:	2377      	movs	r3, #119	; 0x77
   21932:	18fb      	adds	r3, r7, r3
   21934:	781a      	ldrb	r2, [r3, #0]
   21936:	2377      	movs	r3, #119	; 0x77
   21938:	18fb      	adds	r3, r7, r3
   2193a:	3201      	adds	r2, #1
   2193c:	701a      	strb	r2, [r3, #0]
   2193e:	2377      	movs	r3, #119	; 0x77
   21940:	18fb      	adds	r3, r7, r3
   21942:	781a      	ldrb	r2, [r3, #0]
   21944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21946:	429a      	cmp	r2, r3
   21948:	d3eb      	bcc.n	21922 <spi_cmd_complete+0x312>
	}
	rix = len;
   2194a:	2376      	movs	r3, #118	; 0x76
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   21950:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   21952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21954:	b29a      	uxth	r2, r3
   21956:	2318      	movs	r3, #24
   21958:	18f9      	adds	r1, r7, r3
   2195a:	2338      	movs	r3, #56	; 0x38
   2195c:	18fb      	adds	r3, r7, r3
   2195e:	0018      	movs	r0, r3
   21960:	4b13      	ldr	r3, [pc, #76]	; (219b0 <spi_cmd_complete+0x3a0>)
   21962:	4798      	blx	r3
   21964:	1e03      	subs	r3, r0, #0
   21966:	d027      	beq.n	219b8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   21968:	23fa      	movs	r3, #250	; 0xfa
   2196a:	33ff      	adds	r3, #255	; 0xff
   2196c:	001a      	movs	r2, r3
   2196e:	490b      	ldr	r1, [pc, #44]	; (2199c <spi_cmd_complete+0x38c>)
   21970:	4b0b      	ldr	r3, [pc, #44]	; (219a0 <spi_cmd_complete+0x390>)
   21972:	0018      	movs	r0, r3
   21974:	4b0b      	ldr	r3, [pc, #44]	; (219a4 <spi_cmd_complete+0x394>)
   21976:	4798      	blx	r3
   21978:	4b0e      	ldr	r3, [pc, #56]	; (219b4 <spi_cmd_complete+0x3a4>)
   2197a:	0018      	movs	r0, r3
   2197c:	4b09      	ldr	r3, [pc, #36]	; (219a4 <spi_cmd_complete+0x394>)
   2197e:	4798      	blx	r3
   21980:	4b0a      	ldr	r3, [pc, #40]	; (219ac <spi_cmd_complete+0x39c>)
   21982:	0018      	movs	r0, r3
   21984:	4b07      	ldr	r3, [pc, #28]	; (219a4 <spi_cmd_complete+0x394>)
   21986:	4798      	blx	r3
		result = N_FAIL;
   21988:	2300      	movs	r3, #0
   2198a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2198c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2198e:	e2a1      	b.n	21ed4 <spi_cmd_complete+0x8c4>
   21990:	000367e0 	.word	0x000367e0
   21994:	20003d08 	.word	0x20003d08
   21998:	00021045 	.word	0x00021045
   2199c:	00036840 	.word	0x00036840
   219a0:	0003622c 	.word	0x0003622c
   219a4:	0001bafd 	.word	0x0001bafd
   219a8:	000362f4 	.word	0x000362f4
   219ac:	0003626c 	.word	0x0003626c
   219b0:	00020fd1 	.word	0x00020fd1
   219b4:	00036240 	.word	0x00036240
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   219b8:	230f      	movs	r3, #15
   219ba:	18fb      	adds	r3, r7, r3
   219bc:	781b      	ldrb	r3, [r3, #0]
   219be:	2bcf      	cmp	r3, #207	; 0xcf
   219c0:	d009      	beq.n	219d6 <spi_cmd_complete+0x3c6>
   219c2:	230f      	movs	r3, #15
   219c4:	18fb      	adds	r3, r7, r3
   219c6:	781b      	ldrb	r3, [r3, #0]
   219c8:	2bc5      	cmp	r3, #197	; 0xc5
   219ca:	d004      	beq.n	219d6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   219cc:	230f      	movs	r3, #15
   219ce:	18fb      	adds	r3, r7, r3
   219d0:	781b      	ldrb	r3, [r3, #0]
   219d2:	2bc6      	cmp	r3, #198	; 0xc6
   219d4:	d106      	bne.n	219e4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   219d6:	2376      	movs	r3, #118	; 0x76
   219d8:	18fb      	adds	r3, r7, r3
   219da:	781a      	ldrb	r2, [r3, #0]
   219dc:	2376      	movs	r3, #118	; 0x76
   219de:	18fb      	adds	r3, r7, r3
   219e0:	3201      	adds	r2, #1
   219e2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   219e4:	2376      	movs	r3, #118	; 0x76
   219e6:	18fb      	adds	r3, r7, r3
   219e8:	781b      	ldrb	r3, [r3, #0]
   219ea:	2276      	movs	r2, #118	; 0x76
   219ec:	18ba      	adds	r2, r7, r2
   219ee:	1c59      	adds	r1, r3, #1
   219f0:	7011      	strb	r1, [r2, #0]
   219f2:	001a      	movs	r2, r3
   219f4:	2318      	movs	r3, #24
   219f6:	18fb      	adds	r3, r7, r3
   219f8:	5c9a      	ldrb	r2, [r3, r2]
   219fa:	2317      	movs	r3, #23
   219fc:	18fb      	adds	r3, r7, r3
   219fe:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   21a00:	2317      	movs	r3, #23
   21a02:	18fb      	adds	r3, r7, r3
   21a04:	781b      	ldrb	r3, [r3, #0]
   21a06:	220f      	movs	r2, #15
   21a08:	18ba      	adds	r2, r7, r2
   21a0a:	7812      	ldrb	r2, [r2, #0]
   21a0c:	429a      	cmp	r2, r3
   21a0e:	d018      	beq.n	21a42 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   21a10:	4add      	ldr	r2, [pc, #884]	; (21d88 <spi_cmd_complete+0x778>)
   21a12:	49de      	ldr	r1, [pc, #888]	; (21d8c <spi_cmd_complete+0x77c>)
   21a14:	4bde      	ldr	r3, [pc, #888]	; (21d90 <spi_cmd_complete+0x780>)
   21a16:	0018      	movs	r0, r3
   21a18:	4bde      	ldr	r3, [pc, #888]	; (21d94 <spi_cmd_complete+0x784>)
   21a1a:	4798      	blx	r3
   21a1c:	230f      	movs	r3, #15
   21a1e:	18fb      	adds	r3, r7, r3
   21a20:	7819      	ldrb	r1, [r3, #0]
   21a22:	2317      	movs	r3, #23
   21a24:	18fb      	adds	r3, r7, r3
   21a26:	781b      	ldrb	r3, [r3, #0]
   21a28:	001a      	movs	r2, r3
   21a2a:	4bdb      	ldr	r3, [pc, #876]	; (21d98 <spi_cmd_complete+0x788>)
   21a2c:	0018      	movs	r0, r3
   21a2e:	4bd9      	ldr	r3, [pc, #868]	; (21d94 <spi_cmd_complete+0x784>)
   21a30:	4798      	blx	r3
   21a32:	4bda      	ldr	r3, [pc, #872]	; (21d9c <spi_cmd_complete+0x78c>)
   21a34:	0018      	movs	r0, r3
   21a36:	4bd7      	ldr	r3, [pc, #860]	; (21d94 <spi_cmd_complete+0x784>)
   21a38:	4798      	blx	r3
		result = N_FAIL;
   21a3a:	2300      	movs	r3, #0
   21a3c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21a40:	e248      	b.n	21ed4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   21a42:	2376      	movs	r3, #118	; 0x76
   21a44:	18fb      	adds	r3, r7, r3
   21a46:	781b      	ldrb	r3, [r3, #0]
   21a48:	2276      	movs	r2, #118	; 0x76
   21a4a:	18ba      	adds	r2, r7, r2
   21a4c:	1c59      	adds	r1, r3, #1
   21a4e:	7011      	strb	r1, [r2, #0]
   21a50:	001a      	movs	r2, r3
   21a52:	2318      	movs	r3, #24
   21a54:	18fb      	adds	r3, r7, r3
   21a56:	5c9a      	ldrb	r2, [r3, r2]
   21a58:	2317      	movs	r3, #23
   21a5a:	18fb      	adds	r3, r7, r3
   21a5c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   21a5e:	2317      	movs	r3, #23
   21a60:	18fb      	adds	r3, r7, r3
   21a62:	781b      	ldrb	r3, [r3, #0]
   21a64:	2b00      	cmp	r3, #0
   21a66:	d016      	beq.n	21a96 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   21a68:	4acd      	ldr	r2, [pc, #820]	; (21da0 <spi_cmd_complete+0x790>)
   21a6a:	49c8      	ldr	r1, [pc, #800]	; (21d8c <spi_cmd_complete+0x77c>)
   21a6c:	4bc8      	ldr	r3, [pc, #800]	; (21d90 <spi_cmd_complete+0x780>)
   21a6e:	0018      	movs	r0, r3
   21a70:	4bc8      	ldr	r3, [pc, #800]	; (21d94 <spi_cmd_complete+0x784>)
   21a72:	4798      	blx	r3
   21a74:	2317      	movs	r3, #23
   21a76:	18fb      	adds	r3, r7, r3
   21a78:	781b      	ldrb	r3, [r3, #0]
   21a7a:	001a      	movs	r2, r3
   21a7c:	4bc9      	ldr	r3, [pc, #804]	; (21da4 <spi_cmd_complete+0x794>)
   21a7e:	0011      	movs	r1, r2
   21a80:	0018      	movs	r0, r3
   21a82:	4bc4      	ldr	r3, [pc, #784]	; (21d94 <spi_cmd_complete+0x784>)
   21a84:	4798      	blx	r3
   21a86:	4bc5      	ldr	r3, [pc, #788]	; (21d9c <spi_cmd_complete+0x78c>)
   21a88:	0018      	movs	r0, r3
   21a8a:	4bc2      	ldr	r3, [pc, #776]	; (21d94 <spi_cmd_complete+0x784>)
   21a8c:	4798      	blx	r3
		result = N_FAIL;
   21a8e:	2300      	movs	r3, #0
   21a90:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21a94:	e21e      	b.n	21ed4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   21a96:	230f      	movs	r3, #15
   21a98:	18fb      	adds	r3, r7, r3
   21a9a:	781b      	ldrb	r3, [r3, #0]
   21a9c:	2bc4      	cmp	r3, #196	; 0xc4
   21a9e:	d00f      	beq.n	21ac0 <spi_cmd_complete+0x4b0>
   21aa0:	230f      	movs	r3, #15
   21aa2:	18fb      	adds	r3, r7, r3
   21aa4:	781b      	ldrb	r3, [r3, #0]
   21aa6:	2bca      	cmp	r3, #202	; 0xca
   21aa8:	d00a      	beq.n	21ac0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   21aaa:	230f      	movs	r3, #15
   21aac:	18fb      	adds	r3, r7, r3
   21aae:	781b      	ldrb	r3, [r3, #0]
   21ab0:	2bc2      	cmp	r3, #194	; 0xc2
   21ab2:	d005      	beq.n	21ac0 <spi_cmd_complete+0x4b0>
   21ab4:	230f      	movs	r3, #15
   21ab6:	18fb      	adds	r3, r7, r3
   21ab8:	781b      	ldrb	r3, [r3, #0]
   21aba:	2bc8      	cmp	r3, #200	; 0xc8
   21abc:	d000      	beq.n	21ac0 <spi_cmd_complete+0x4b0>
   21abe:	e208      	b.n	21ed2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   21ac0:	230a      	movs	r3, #10
   21ac2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   21ac4:	2376      	movs	r3, #118	; 0x76
   21ac6:	18fb      	adds	r3, r7, r3
   21ac8:	781a      	ldrb	r2, [r3, #0]
   21aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21acc:	429a      	cmp	r2, r3
   21ace:	d218      	bcs.n	21b02 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   21ad0:	2376      	movs	r3, #118	; 0x76
   21ad2:	18fb      	adds	r3, r7, r3
   21ad4:	781b      	ldrb	r3, [r3, #0]
   21ad6:	2276      	movs	r2, #118	; 0x76
   21ad8:	18ba      	adds	r2, r7, r2
   21ada:	1c59      	adds	r1, r3, #1
   21adc:	7011      	strb	r1, [r2, #0]
   21ade:	001a      	movs	r2, r3
   21ae0:	2318      	movs	r3, #24
   21ae2:	18fb      	adds	r3, r7, r3
   21ae4:	5c9a      	ldrb	r2, [r3, r2]
   21ae6:	2317      	movs	r3, #23
   21ae8:	18fb      	adds	r3, r7, r3
   21aea:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   21aec:	2317      	movs	r3, #23
   21aee:	18fb      	adds	r3, r7, r3
   21af0:	781b      	ldrb	r3, [r3, #0]
   21af2:	091b      	lsrs	r3, r3, #4
   21af4:	b2db      	uxtb	r3, r3
   21af6:	001a      	movs	r2, r3
   21af8:	230f      	movs	r3, #15
   21afa:	4013      	ands	r3, r2
   21afc:	2b0f      	cmp	r3, #15
   21afe:	d103      	bne.n	21b08 <spi_cmd_complete+0x4f8>
					break;
   21b00:	e007      	b.n	21b12 <spi_cmd_complete+0x502>
					retry = 0;
   21b02:	2300      	movs	r3, #0
   21b04:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   21b06:	e004      	b.n	21b12 <spi_cmd_complete+0x502>
			} while (retry--);
   21b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21b0a:	1e5a      	subs	r2, r3, #1
   21b0c:	667a      	str	r2, [r7, #100]	; 0x64
   21b0e:	2b00      	cmp	r3, #0
   21b10:	d1d8      	bne.n	21ac4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   21b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21b14:	2b00      	cmp	r3, #0
   21b16:	dc18      	bgt.n	21b4a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   21b18:	2395      	movs	r3, #149	; 0x95
   21b1a:	009a      	lsls	r2, r3, #2
   21b1c:	499b      	ldr	r1, [pc, #620]	; (21d8c <spi_cmd_complete+0x77c>)
   21b1e:	4b9c      	ldr	r3, [pc, #624]	; (21d90 <spi_cmd_complete+0x780>)
   21b20:	0018      	movs	r0, r3
   21b22:	4b9c      	ldr	r3, [pc, #624]	; (21d94 <spi_cmd_complete+0x784>)
   21b24:	4798      	blx	r3
   21b26:	2317      	movs	r3, #23
   21b28:	18fb      	adds	r3, r7, r3
   21b2a:	781b      	ldrb	r3, [r3, #0]
   21b2c:	001a      	movs	r2, r3
   21b2e:	4b9e      	ldr	r3, [pc, #632]	; (21da8 <spi_cmd_complete+0x798>)
   21b30:	0011      	movs	r1, r2
   21b32:	0018      	movs	r0, r3
   21b34:	4b97      	ldr	r3, [pc, #604]	; (21d94 <spi_cmd_complete+0x784>)
   21b36:	4798      	blx	r3
   21b38:	4b98      	ldr	r3, [pc, #608]	; (21d9c <spi_cmd_complete+0x78c>)
   21b3a:	0018      	movs	r0, r3
   21b3c:	4b95      	ldr	r3, [pc, #596]	; (21d94 <spi_cmd_complete+0x784>)
   21b3e:	4798      	blx	r3
				result = N_RESET;
   21b40:	2301      	movs	r3, #1
   21b42:	425b      	negs	r3, r3
   21b44:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   21b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21b48:	e1c4      	b.n	21ed4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   21b4a:	230f      	movs	r3, #15
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	781b      	ldrb	r3, [r3, #0]
   21b50:	2bc4      	cmp	r3, #196	; 0xc4
   21b52:	d005      	beq.n	21b60 <spi_cmd_complete+0x550>
   21b54:	230f      	movs	r3, #15
   21b56:	18fb      	adds	r3, r7, r3
   21b58:	781b      	ldrb	r3, [r3, #0]
   21b5a:	2bca      	cmp	r3, #202	; 0xca
   21b5c:	d000      	beq.n	21b60 <spi_cmd_complete+0x550>
   21b5e:	e08e      	b.n	21c7e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   21b60:	2376      	movs	r3, #118	; 0x76
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	781b      	ldrb	r3, [r3, #0]
   21b66:	3303      	adds	r3, #3
   21b68:	001a      	movs	r2, r3
   21b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21b6c:	429a      	cmp	r2, r3
   21b6e:	d23c      	bcs.n	21bea <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   21b70:	2376      	movs	r3, #118	; 0x76
   21b72:	18fb      	adds	r3, r7, r3
   21b74:	781b      	ldrb	r3, [r3, #0]
   21b76:	2276      	movs	r2, #118	; 0x76
   21b78:	18ba      	adds	r2, r7, r2
   21b7a:	1c59      	adds	r1, r3, #1
   21b7c:	7011      	strb	r1, [r2, #0]
   21b7e:	001a      	movs	r2, r3
   21b80:	2318      	movs	r3, #24
   21b82:	18fb      	adds	r3, r7, r3
   21b84:	5c9a      	ldrb	r2, [r3, r2]
   21b86:	687b      	ldr	r3, [r7, #4]
   21b88:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   21b8a:	687b      	ldr	r3, [r7, #4]
   21b8c:	1c5a      	adds	r2, r3, #1
   21b8e:	2376      	movs	r3, #118	; 0x76
   21b90:	18fb      	adds	r3, r7, r3
   21b92:	781b      	ldrb	r3, [r3, #0]
   21b94:	2176      	movs	r1, #118	; 0x76
   21b96:	1879      	adds	r1, r7, r1
   21b98:	1c58      	adds	r0, r3, #1
   21b9a:	7008      	strb	r0, [r1, #0]
   21b9c:	0019      	movs	r1, r3
   21b9e:	2318      	movs	r3, #24
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	5c5b      	ldrb	r3, [r3, r1]
   21ba4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   21ba6:	687b      	ldr	r3, [r7, #4]
   21ba8:	1c9a      	adds	r2, r3, #2
   21baa:	2376      	movs	r3, #118	; 0x76
   21bac:	18fb      	adds	r3, r7, r3
   21bae:	781b      	ldrb	r3, [r3, #0]
   21bb0:	2176      	movs	r1, #118	; 0x76
   21bb2:	1879      	adds	r1, r7, r1
   21bb4:	1c58      	adds	r0, r3, #1
   21bb6:	7008      	strb	r0, [r1, #0]
   21bb8:	0019      	movs	r1, r3
   21bba:	2318      	movs	r3, #24
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	5c5b      	ldrb	r3, [r3, r1]
   21bc0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   21bc2:	687b      	ldr	r3, [r7, #4]
   21bc4:	1cda      	adds	r2, r3, #3
   21bc6:	2376      	movs	r3, #118	; 0x76
   21bc8:	18fb      	adds	r3, r7, r3
   21bca:	781b      	ldrb	r3, [r3, #0]
   21bcc:	2176      	movs	r1, #118	; 0x76
   21bce:	1879      	adds	r1, r7, r1
   21bd0:	1c58      	adds	r0, r3, #1
   21bd2:	7008      	strb	r0, [r1, #0]
   21bd4:	0019      	movs	r1, r3
   21bd6:	2318      	movs	r3, #24
   21bd8:	18fb      	adds	r3, r7, r3
   21bda:	5c5b      	ldrb	r3, [r3, r1]
   21bdc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   21bde:	4b73      	ldr	r3, [pc, #460]	; (21dac <spi_cmd_complete+0x79c>)
   21be0:	781b      	ldrb	r3, [r3, #0]
   21be2:	2b00      	cmp	r3, #0
   21be4:	d000      	beq.n	21be8 <spi_cmd_complete+0x5d8>
   21be6:	e174      	b.n	21ed2 <spi_cmd_complete+0x8c2>
   21be8:	e011      	b.n	21c0e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   21bea:	4a71      	ldr	r2, [pc, #452]	; (21db0 <spi_cmd_complete+0x7a0>)
   21bec:	4967      	ldr	r1, [pc, #412]	; (21d8c <spi_cmd_complete+0x77c>)
   21bee:	4b68      	ldr	r3, [pc, #416]	; (21d90 <spi_cmd_complete+0x780>)
   21bf0:	0018      	movs	r0, r3
   21bf2:	4b68      	ldr	r3, [pc, #416]	; (21d94 <spi_cmd_complete+0x784>)
   21bf4:	4798      	blx	r3
   21bf6:	4b6f      	ldr	r3, [pc, #444]	; (21db4 <spi_cmd_complete+0x7a4>)
   21bf8:	0018      	movs	r0, r3
   21bfa:	4b66      	ldr	r3, [pc, #408]	; (21d94 <spi_cmd_complete+0x784>)
   21bfc:	4798      	blx	r3
   21bfe:	4b67      	ldr	r3, [pc, #412]	; (21d9c <spi_cmd_complete+0x78c>)
   21c00:	0018      	movs	r0, r3
   21c02:	4b64      	ldr	r3, [pc, #400]	; (21d94 <spi_cmd_complete+0x784>)
   21c04:	4798      	blx	r3
					result = N_FAIL;
   21c06:	2300      	movs	r3, #0
   21c08:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   21c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21c0c:	e162      	b.n	21ed4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   21c0e:	2376      	movs	r3, #118	; 0x76
   21c10:	18fb      	adds	r3, r7, r3
   21c12:	781b      	ldrb	r3, [r3, #0]
   21c14:	3301      	adds	r3, #1
   21c16:	001a      	movs	r2, r3
   21c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21c1a:	429a      	cmp	r2, r3
   21c1c:	d21c      	bcs.n	21c58 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   21c1e:	2376      	movs	r3, #118	; 0x76
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	781b      	ldrb	r3, [r3, #0]
   21c24:	2276      	movs	r2, #118	; 0x76
   21c26:	18ba      	adds	r2, r7, r2
   21c28:	1c59      	adds	r1, r3, #1
   21c2a:	7011      	strb	r1, [r2, #0]
   21c2c:	001a      	movs	r2, r3
   21c2e:	2318      	movs	r3, #24
   21c30:	18fb      	adds	r3, r7, r3
   21c32:	5c9a      	ldrb	r2, [r3, r2]
   21c34:	2314      	movs	r3, #20
   21c36:	18fb      	adds	r3, r7, r3
   21c38:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   21c3a:	2376      	movs	r3, #118	; 0x76
   21c3c:	18fb      	adds	r3, r7, r3
   21c3e:	781b      	ldrb	r3, [r3, #0]
   21c40:	2276      	movs	r2, #118	; 0x76
   21c42:	18ba      	adds	r2, r7, r2
   21c44:	1c59      	adds	r1, r3, #1
   21c46:	7011      	strb	r1, [r2, #0]
   21c48:	001a      	movs	r2, r3
   21c4a:	2318      	movs	r3, #24
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	5c9a      	ldrb	r2, [r3, r2]
   21c50:	2314      	movs	r3, #20
   21c52:	18fb      	adds	r3, r7, r3
   21c54:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   21c56:	e13c      	b.n	21ed2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   21c58:	239c      	movs	r3, #156	; 0x9c
   21c5a:	009a      	lsls	r2, r3, #2
   21c5c:	494b      	ldr	r1, [pc, #300]	; (21d8c <spi_cmd_complete+0x77c>)
   21c5e:	4b4c      	ldr	r3, [pc, #304]	; (21d90 <spi_cmd_complete+0x780>)
   21c60:	0018      	movs	r0, r3
   21c62:	4b4c      	ldr	r3, [pc, #304]	; (21d94 <spi_cmd_complete+0x784>)
   21c64:	4798      	blx	r3
   21c66:	4b54      	ldr	r3, [pc, #336]	; (21db8 <spi_cmd_complete+0x7a8>)
   21c68:	0018      	movs	r0, r3
   21c6a:	4b4a      	ldr	r3, [pc, #296]	; (21d94 <spi_cmd_complete+0x784>)
   21c6c:	4798      	blx	r3
   21c6e:	4b4b      	ldr	r3, [pc, #300]	; (21d9c <spi_cmd_complete+0x78c>)
   21c70:	0018      	movs	r0, r3
   21c72:	4b48      	ldr	r3, [pc, #288]	; (21d94 <spi_cmd_complete+0x784>)
   21c74:	4798      	blx	r3
						result = N_FAIL;
   21c76:	2300      	movs	r3, #0
   21c78:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   21c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21c7c:	e12a      	b.n	21ed4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   21c7e:	230f      	movs	r3, #15
   21c80:	18fb      	adds	r3, r7, r3
   21c82:	781b      	ldrb	r3, [r3, #0]
   21c84:	2bc2      	cmp	r3, #194	; 0xc2
   21c86:	d005      	beq.n	21c94 <spi_cmd_complete+0x684>
   21c88:	230f      	movs	r3, #15
   21c8a:	18fb      	adds	r3, r7, r3
   21c8c:	781b      	ldrb	r3, [r3, #0]
   21c8e:	2bc8      	cmp	r3, #200	; 0xc8
   21c90:	d000      	beq.n	21c94 <spi_cmd_complete+0x684>
   21c92:	e11e      	b.n	21ed2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   21c94:	2300      	movs	r3, #0
   21c96:	663b      	str	r3, [r7, #96]	; 0x60
   21c98:	e011      	b.n	21cbe <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   21c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21c9c:	1c5a      	adds	r2, r3, #1
   21c9e:	663a      	str	r2, [r7, #96]	; 0x60
   21ca0:	001a      	movs	r2, r3
   21ca2:	687b      	ldr	r3, [r7, #4]
   21ca4:	189a      	adds	r2, r3, r2
   21ca6:	2376      	movs	r3, #118	; 0x76
   21ca8:	18fb      	adds	r3, r7, r3
   21caa:	781b      	ldrb	r3, [r3, #0]
   21cac:	2176      	movs	r1, #118	; 0x76
   21cae:	1879      	adds	r1, r7, r1
   21cb0:	1c58      	adds	r0, r3, #1
   21cb2:	7008      	strb	r0, [r1, #0]
   21cb4:	0019      	movs	r1, r3
   21cb6:	2318      	movs	r3, #24
   21cb8:	18fb      	adds	r3, r7, r3
   21cba:	5c5b      	ldrb	r3, [r3, r1]
   21cbc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   21cbe:	2376      	movs	r3, #118	; 0x76
   21cc0:	18fb      	adds	r3, r7, r3
   21cc2:	781a      	ldrb	r2, [r3, #0]
   21cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21cc6:	429a      	cmp	r2, r3
   21cc8:	d203      	bcs.n	21cd2 <spi_cmd_complete+0x6c2>
   21cca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21ccc:	683b      	ldr	r3, [r7, #0]
   21cce:	429a      	cmp	r2, r3
   21cd0:	d3e3      	bcc.n	21c9a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   21cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cd4:	683a      	ldr	r2, [r7, #0]
   21cd6:	1ad3      	subs	r3, r2, r3
   21cd8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   21cda:	683b      	ldr	r3, [r7, #0]
   21cdc:	2b00      	cmp	r3, #0
   21cde:	d100      	bne.n	21ce2 <spi_cmd_complete+0x6d2>
   21ce0:	e0f1      	b.n	21ec6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   21ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21ce4:	2280      	movs	r2, #128	; 0x80
   21ce6:	0192      	lsls	r2, r2, #6
   21ce8:	1ad3      	subs	r3, r2, r3
   21cea:	001a      	movs	r2, r3
   21cec:	683b      	ldr	r3, [r7, #0]
   21cee:	429a      	cmp	r2, r3
   21cf0:	d302      	bcc.n	21cf8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   21cf2:	683b      	ldr	r3, [r7, #0]
   21cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   21cf6:	e004      	b.n	21d02 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   21cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cfa:	2280      	movs	r2, #128	; 0x80
   21cfc:	0192      	lsls	r2, r2, #6
   21cfe:	1ad3      	subs	r3, r2, r3
   21d00:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   21d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21d04:	687a      	ldr	r2, [r7, #4]
   21d06:	18d3      	adds	r3, r2, r3
   21d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   21d0a:	b292      	uxth	r2, r2
   21d0c:	0011      	movs	r1, r2
   21d0e:	0018      	movs	r0, r3
   21d10:	4b2a      	ldr	r3, [pc, #168]	; (21dbc <spi_cmd_complete+0x7ac>)
   21d12:	4798      	blx	r3
   21d14:	1e03      	subs	r3, r0, #0
   21d16:	d010      	beq.n	21d3a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   21d18:	4a29      	ldr	r2, [pc, #164]	; (21dc0 <spi_cmd_complete+0x7b0>)
   21d1a:	491c      	ldr	r1, [pc, #112]	; (21d8c <spi_cmd_complete+0x77c>)
   21d1c:	4b1c      	ldr	r3, [pc, #112]	; (21d90 <spi_cmd_complete+0x780>)
   21d1e:	0018      	movs	r0, r3
   21d20:	4b1c      	ldr	r3, [pc, #112]	; (21d94 <spi_cmd_complete+0x784>)
   21d22:	4798      	blx	r3
   21d24:	4b27      	ldr	r3, [pc, #156]	; (21dc4 <spi_cmd_complete+0x7b4>)
   21d26:	0018      	movs	r0, r3
   21d28:	4b1a      	ldr	r3, [pc, #104]	; (21d94 <spi_cmd_complete+0x784>)
   21d2a:	4798      	blx	r3
   21d2c:	4b1b      	ldr	r3, [pc, #108]	; (21d9c <spi_cmd_complete+0x78c>)
   21d2e:	0018      	movs	r0, r3
   21d30:	4b18      	ldr	r3, [pc, #96]	; (21d94 <spi_cmd_complete+0x784>)
   21d32:	4798      	blx	r3
						result = N_FAIL;
   21d34:	2300      	movs	r3, #0
   21d36:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   21d38:	e0cb      	b.n	21ed2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   21d3a:	4b1c      	ldr	r3, [pc, #112]	; (21dac <spi_cmd_complete+0x79c>)
   21d3c:	781b      	ldrb	r3, [r3, #0]
   21d3e:	2b00      	cmp	r3, #0
   21d40:	d119      	bne.n	21d76 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   21d42:	2314      	movs	r3, #20
   21d44:	18fb      	adds	r3, r7, r3
   21d46:	2102      	movs	r1, #2
   21d48:	0018      	movs	r0, r3
   21d4a:	4b1c      	ldr	r3, [pc, #112]	; (21dbc <spi_cmd_complete+0x7ac>)
   21d4c:	4798      	blx	r3
   21d4e:	1e03      	subs	r3, r0, #0
   21d50:	d011      	beq.n	21d76 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   21d52:	23a6      	movs	r3, #166	; 0xa6
   21d54:	009a      	lsls	r2, r3, #2
   21d56:	490d      	ldr	r1, [pc, #52]	; (21d8c <spi_cmd_complete+0x77c>)
   21d58:	4b0d      	ldr	r3, [pc, #52]	; (21d90 <spi_cmd_complete+0x780>)
   21d5a:	0018      	movs	r0, r3
   21d5c:	4b0d      	ldr	r3, [pc, #52]	; (21d94 <spi_cmd_complete+0x784>)
   21d5e:	4798      	blx	r3
   21d60:	4b19      	ldr	r3, [pc, #100]	; (21dc8 <spi_cmd_complete+0x7b8>)
   21d62:	0018      	movs	r0, r3
   21d64:	4b0b      	ldr	r3, [pc, #44]	; (21d94 <spi_cmd_complete+0x784>)
   21d66:	4798      	blx	r3
   21d68:	4b0c      	ldr	r3, [pc, #48]	; (21d9c <spi_cmd_complete+0x78c>)
   21d6a:	0018      	movs	r0, r3
   21d6c:	4b09      	ldr	r3, [pc, #36]	; (21d94 <spi_cmd_complete+0x784>)
   21d6e:	4798      	blx	r3
							result = N_FAIL;
   21d70:	2300      	movs	r3, #0
   21d72:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   21d74:	e0ad      	b.n	21ed2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   21d76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   21d7a:	18d3      	adds	r3, r2, r3
   21d7c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   21d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   21d80:	683a      	ldr	r2, [r7, #0]
   21d82:	1ad3      	subs	r3, r2, r3
   21d84:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   21d86:	e09e      	b.n	21ec6 <spi_cmd_complete+0x8b6>
   21d88:	0000022f 	.word	0x0000022f
   21d8c:	00036840 	.word	0x00036840
   21d90:	0003622c 	.word	0x0003622c
   21d94:	0001bafd 	.word	0x0001bafd
   21d98:	00036324 	.word	0x00036324
   21d9c:	0003626c 	.word	0x0003626c
   21da0:	00000239 	.word	0x00000239
   21da4:	00036360 	.word	0x00036360
   21da8:	00036394 	.word	0x00036394
   21dac:	20003d08 	.word	0x20003d08
   21db0:	00000263 	.word	0x00000263
   21db4:	000363c4 	.word	0x000363c4
   21db8:	000363f4 	.word	0x000363f4
   21dbc:	00020f49 	.word	0x00020f49
   21dc0:	0000028e 	.word	0x0000028e
   21dc4:	00036424 	.word	0x00036424
   21dc8:	00036458 	.word	0x00036458
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   21dcc:	683a      	ldr	r2, [r7, #0]
   21dce:	2380      	movs	r3, #128	; 0x80
   21dd0:	019b      	lsls	r3, r3, #6
   21dd2:	429a      	cmp	r2, r3
   21dd4:	d802      	bhi.n	21ddc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   21dd6:	683b      	ldr	r3, [r7, #0]
   21dd8:	65bb      	str	r3, [r7, #88]	; 0x58
   21dda:	e002      	b.n	21de2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   21ddc:	2380      	movs	r3, #128	; 0x80
   21dde:	019b      	lsls	r3, r3, #6
   21de0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   21de2:	230a      	movs	r3, #10
   21de4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   21de6:	2317      	movs	r3, #23
   21de8:	18fb      	adds	r3, r7, r3
   21dea:	2101      	movs	r1, #1
   21dec:	0018      	movs	r0, r3
   21dee:	4b3b      	ldr	r3, [pc, #236]	; (21edc <spi_cmd_complete+0x8cc>)
   21df0:	4798      	blx	r3
   21df2:	1e03      	subs	r3, r0, #0
   21df4:	d011      	beq.n	21e1a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   21df6:	23ae      	movs	r3, #174	; 0xae
   21df8:	009a      	lsls	r2, r3, #2
   21dfa:	4939      	ldr	r1, [pc, #228]	; (21ee0 <spi_cmd_complete+0x8d0>)
   21dfc:	4b39      	ldr	r3, [pc, #228]	; (21ee4 <spi_cmd_complete+0x8d4>)
   21dfe:	0018      	movs	r0, r3
   21e00:	4b39      	ldr	r3, [pc, #228]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e02:	4798      	blx	r3
   21e04:	4b39      	ldr	r3, [pc, #228]	; (21eec <spi_cmd_complete+0x8dc>)
   21e06:	0018      	movs	r0, r3
   21e08:	4b37      	ldr	r3, [pc, #220]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e0a:	4798      	blx	r3
   21e0c:	4b38      	ldr	r3, [pc, #224]	; (21ef0 <spi_cmd_complete+0x8e0>)
   21e0e:	0018      	movs	r0, r3
   21e10:	4b35      	ldr	r3, [pc, #212]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e12:	4798      	blx	r3
							result = N_FAIL;
   21e14:	2300      	movs	r3, #0
   21e16:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   21e18:	e010      	b.n	21e3c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   21e1a:	2317      	movs	r3, #23
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	781b      	ldrb	r3, [r3, #0]
   21e20:	091b      	lsrs	r3, r3, #4
   21e22:	b2db      	uxtb	r3, r3
   21e24:	001a      	movs	r2, r3
   21e26:	230f      	movs	r3, #15
   21e28:	4013      	ands	r3, r2
   21e2a:	2b0f      	cmp	r3, #15
   21e2c:	d005      	beq.n	21e3a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   21e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21e30:	1e5a      	subs	r2, r3, #1
   21e32:	667a      	str	r2, [r7, #100]	; 0x64
   21e34:	2b00      	cmp	r3, #0
   21e36:	d1d6      	bne.n	21de6 <spi_cmd_complete+0x7d6>
   21e38:	e000      	b.n	21e3c <spi_cmd_complete+0x82c>
							break;
   21e3a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   21e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21e3e:	2b00      	cmp	r3, #0
   21e40:	d046      	beq.n	21ed0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   21e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21e44:	687a      	ldr	r2, [r7, #4]
   21e46:	18d3      	adds	r3, r2, r3
   21e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
   21e4a:	b292      	uxth	r2, r2
   21e4c:	0011      	movs	r1, r2
   21e4e:	0018      	movs	r0, r3
   21e50:	4b22      	ldr	r3, [pc, #136]	; (21edc <spi_cmd_complete+0x8cc>)
   21e52:	4798      	blx	r3
   21e54:	1e03      	subs	r3, r0, #0
   21e56:	d011      	beq.n	21e7c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   21e58:	23b2      	movs	r3, #178	; 0xb2
   21e5a:	009a      	lsls	r2, r3, #2
   21e5c:	4920      	ldr	r1, [pc, #128]	; (21ee0 <spi_cmd_complete+0x8d0>)
   21e5e:	4b21      	ldr	r3, [pc, #132]	; (21ee4 <spi_cmd_complete+0x8d4>)
   21e60:	0018      	movs	r0, r3
   21e62:	4b21      	ldr	r3, [pc, #132]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e64:	4798      	blx	r3
   21e66:	4b23      	ldr	r3, [pc, #140]	; (21ef4 <spi_cmd_complete+0x8e4>)
   21e68:	0018      	movs	r0, r3
   21e6a:	4b1f      	ldr	r3, [pc, #124]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e6c:	4798      	blx	r3
   21e6e:	4b20      	ldr	r3, [pc, #128]	; (21ef0 <spi_cmd_complete+0x8e0>)
   21e70:	0018      	movs	r0, r3
   21e72:	4b1d      	ldr	r3, [pc, #116]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e74:	4798      	blx	r3
						result = N_FAIL;
   21e76:	2300      	movs	r3, #0
   21e78:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   21e7a:	e02a      	b.n	21ed2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   21e7c:	4b1e      	ldr	r3, [pc, #120]	; (21ef8 <spi_cmd_complete+0x8e8>)
   21e7e:	781b      	ldrb	r3, [r3, #0]
   21e80:	2b00      	cmp	r3, #0
   21e82:	d118      	bne.n	21eb6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   21e84:	2314      	movs	r3, #20
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	2102      	movs	r1, #2
   21e8a:	0018      	movs	r0, r3
   21e8c:	4b13      	ldr	r3, [pc, #76]	; (21edc <spi_cmd_complete+0x8cc>)
   21e8e:	4798      	blx	r3
   21e90:	1e03      	subs	r3, r0, #0
   21e92:	d010      	beq.n	21eb6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   21e94:	4a19      	ldr	r2, [pc, #100]	; (21efc <spi_cmd_complete+0x8ec>)
   21e96:	4912      	ldr	r1, [pc, #72]	; (21ee0 <spi_cmd_complete+0x8d0>)
   21e98:	4b12      	ldr	r3, [pc, #72]	; (21ee4 <spi_cmd_complete+0x8d4>)
   21e9a:	0018      	movs	r0, r3
   21e9c:	4b12      	ldr	r3, [pc, #72]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21e9e:	4798      	blx	r3
   21ea0:	4b17      	ldr	r3, [pc, #92]	; (21f00 <spi_cmd_complete+0x8f0>)
   21ea2:	0018      	movs	r0, r3
   21ea4:	4b10      	ldr	r3, [pc, #64]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21ea6:	4798      	blx	r3
   21ea8:	4b11      	ldr	r3, [pc, #68]	; (21ef0 <spi_cmd_complete+0x8e0>)
   21eaa:	0018      	movs	r0, r3
   21eac:	4b0e      	ldr	r3, [pc, #56]	; (21ee8 <spi_cmd_complete+0x8d8>)
   21eae:	4798      	blx	r3
							result = N_FAIL;
   21eb0:	2300      	movs	r3, #0
   21eb2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   21eb4:	e00d      	b.n	21ed2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   21eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   21eba:	18d3      	adds	r3, r2, r3
   21ebc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   21ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   21ec0:	683a      	ldr	r2, [r7, #0]
   21ec2:	1ad3      	subs	r3, r2, r3
   21ec4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   21ec6:	683b      	ldr	r3, [r7, #0]
   21ec8:	2b00      	cmp	r3, #0
   21eca:	d000      	beq.n	21ece <spi_cmd_complete+0x8be>
   21ecc:	e77e      	b.n	21dcc <spi_cmd_complete+0x7bc>
   21ece:	e000      	b.n	21ed2 <spi_cmd_complete+0x8c2>
						break;
   21ed0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   21ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   21ed4:	0018      	movs	r0, r3
   21ed6:	46bd      	mov	sp, r7
   21ed8:	b01f      	add	sp, #124	; 0x7c
   21eda:	bd90      	pop	{r4, r7, pc}
   21edc:	00020f49 	.word	0x00020f49
   21ee0:	00036840 	.word	0x00036840
   21ee4:	0003622c 	.word	0x0003622c
   21ee8:	0001bafd 	.word	0x0001bafd
   21eec:	00036490 	.word	0x00036490
   21ef0:	0003626c 	.word	0x0003626c
   21ef4:	00036424 	.word	0x00036424
   21ef8:	20003d08 	.word	0x20003d08
   21efc:	000002d2 	.word	0x000002d2
   21f00:	00036458 	.word	0x00036458

00021f04 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   21f04:	b580      	push	{r7, lr}
   21f06:	b086      	sub	sp, #24
   21f08:	af00      	add	r7, sp, #0
   21f0a:	6078      	str	r0, [r7, #4]
   21f0c:	000a      	movs	r2, r1
   21f0e:	1cbb      	adds	r3, r7, #2
   21f10:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   21f12:	2313      	movs	r3, #19
   21f14:	18fb      	adds	r3, r7, r3
   21f16:	2201      	movs	r2, #1
   21f18:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   21f1a:	230c      	movs	r3, #12
   21f1c:	18fb      	adds	r3, r7, r3
   21f1e:	2200      	movs	r2, #0
   21f20:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   21f22:	2316      	movs	r3, #22
   21f24:	18fb      	adds	r3, r7, r3
   21f26:	2200      	movs	r2, #0
   21f28:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   21f2a:	1cbb      	adds	r3, r7, #2
   21f2c:	881a      	ldrh	r2, [r3, #0]
   21f2e:	2380      	movs	r3, #128	; 0x80
   21f30:	019b      	lsls	r3, r3, #6
   21f32:	429a      	cmp	r2, r3
   21f34:	d805      	bhi.n	21f42 <spi_data_write+0x3e>
			nbytes = sz;
   21f36:	2314      	movs	r3, #20
   21f38:	18fb      	adds	r3, r7, r3
   21f3a:	1cba      	adds	r2, r7, #2
   21f3c:	8812      	ldrh	r2, [r2, #0]
   21f3e:	801a      	strh	r2, [r3, #0]
   21f40:	e004      	b.n	21f4c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   21f42:	2314      	movs	r3, #20
   21f44:	18fb      	adds	r3, r7, r3
   21f46:	2280      	movs	r2, #128	; 0x80
   21f48:	0192      	lsls	r2, r2, #6
   21f4a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   21f4c:	2311      	movs	r3, #17
   21f4e:	18fb      	adds	r3, r7, r3
   21f50:	22f0      	movs	r2, #240	; 0xf0
   21f52:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   21f54:	2316      	movs	r3, #22
   21f56:	18fb      	adds	r3, r7, r3
   21f58:	2200      	movs	r2, #0
   21f5a:	5e9b      	ldrsh	r3, [r3, r2]
   21f5c:	2b00      	cmp	r3, #0
   21f5e:	d10f      	bne.n	21f80 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   21f60:	1cbb      	adds	r3, r7, #2
   21f62:	881a      	ldrh	r2, [r3, #0]
   21f64:	2380      	movs	r3, #128	; 0x80
   21f66:	019b      	lsls	r3, r3, #6
   21f68:	429a      	cmp	r2, r3
   21f6a:	d804      	bhi.n	21f76 <spi_data_write+0x72>
				order = 0x3;
   21f6c:	2312      	movs	r3, #18
   21f6e:	18fb      	adds	r3, r7, r3
   21f70:	2203      	movs	r2, #3
   21f72:	701a      	strb	r2, [r3, #0]
   21f74:	e013      	b.n	21f9e <spi_data_write+0x9a>
			else
				order = 0x1;
   21f76:	2312      	movs	r3, #18
   21f78:	18fb      	adds	r3, r7, r3
   21f7a:	2201      	movs	r2, #1
   21f7c:	701a      	strb	r2, [r3, #0]
   21f7e:	e00e      	b.n	21f9e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   21f80:	1cbb      	adds	r3, r7, #2
   21f82:	881a      	ldrh	r2, [r3, #0]
   21f84:	2380      	movs	r3, #128	; 0x80
   21f86:	019b      	lsls	r3, r3, #6
   21f88:	429a      	cmp	r2, r3
   21f8a:	d804      	bhi.n	21f96 <spi_data_write+0x92>
				order = 0x3;
   21f8c:	2312      	movs	r3, #18
   21f8e:	18fb      	adds	r3, r7, r3
   21f90:	2203      	movs	r2, #3
   21f92:	701a      	strb	r2, [r3, #0]
   21f94:	e003      	b.n	21f9e <spi_data_write+0x9a>
			else
				order = 0x2;
   21f96:	2312      	movs	r3, #18
   21f98:	18fb      	adds	r3, r7, r3
   21f9a:	2202      	movs	r2, #2
   21f9c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   21f9e:	2311      	movs	r3, #17
   21fa0:	18fb      	adds	r3, r7, r3
   21fa2:	781a      	ldrb	r2, [r3, #0]
   21fa4:	2312      	movs	r3, #18
   21fa6:	18fb      	adds	r3, r7, r3
   21fa8:	781b      	ldrb	r3, [r3, #0]
   21faa:	4313      	orrs	r3, r2
   21fac:	b2da      	uxtb	r2, r3
   21fae:	2311      	movs	r3, #17
   21fb0:	18fb      	adds	r3, r7, r3
   21fb2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   21fb4:	2311      	movs	r3, #17
   21fb6:	18fb      	adds	r3, r7, r3
   21fb8:	2101      	movs	r1, #1
   21fba:	0018      	movs	r0, r3
   21fbc:	4b3c      	ldr	r3, [pc, #240]	; (220b0 <spi_data_write+0x1ac>)
   21fbe:	4798      	blx	r3
   21fc0:	1e03      	subs	r3, r0, #0
   21fc2:	d012      	beq.n	21fea <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   21fc4:	4a3b      	ldr	r2, [pc, #236]	; (220b4 <spi_data_write+0x1b0>)
   21fc6:	493c      	ldr	r1, [pc, #240]	; (220b8 <spi_data_write+0x1b4>)
   21fc8:	4b3c      	ldr	r3, [pc, #240]	; (220bc <spi_data_write+0x1b8>)
   21fca:	0018      	movs	r0, r3
   21fcc:	4b3c      	ldr	r3, [pc, #240]	; (220c0 <spi_data_write+0x1bc>)
   21fce:	4798      	blx	r3
   21fd0:	4b3c      	ldr	r3, [pc, #240]	; (220c4 <spi_data_write+0x1c0>)
   21fd2:	0018      	movs	r0, r3
   21fd4:	4b3a      	ldr	r3, [pc, #232]	; (220c0 <spi_data_write+0x1bc>)
   21fd6:	4798      	blx	r3
   21fd8:	4b3b      	ldr	r3, [pc, #236]	; (220c8 <spi_data_write+0x1c4>)
   21fda:	0018      	movs	r0, r3
   21fdc:	4b38      	ldr	r3, [pc, #224]	; (220c0 <spi_data_write+0x1bc>)
   21fde:	4798      	blx	r3
			result = N_FAIL;
   21fe0:	2313      	movs	r3, #19
   21fe2:	18fb      	adds	r3, r7, r3
   21fe4:	2200      	movs	r2, #0
   21fe6:	701a      	strb	r2, [r3, #0]
			break;
   21fe8:	e059      	b.n	2209e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   21fea:	2316      	movs	r3, #22
   21fec:	18fb      	adds	r3, r7, r3
   21fee:	2200      	movs	r2, #0
   21ff0:	5e9b      	ldrsh	r3, [r3, r2]
   21ff2:	687a      	ldr	r2, [r7, #4]
   21ff4:	18d2      	adds	r2, r2, r3
   21ff6:	2314      	movs	r3, #20
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	881b      	ldrh	r3, [r3, #0]
   21ffc:	0019      	movs	r1, r3
   21ffe:	0010      	movs	r0, r2
   22000:	4b2b      	ldr	r3, [pc, #172]	; (220b0 <spi_data_write+0x1ac>)
   22002:	4798      	blx	r3
   22004:	1e03      	subs	r3, r0, #0
   22006:	d012      	beq.n	2202e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   22008:	4a30      	ldr	r2, [pc, #192]	; (220cc <spi_data_write+0x1c8>)
   2200a:	492b      	ldr	r1, [pc, #172]	; (220b8 <spi_data_write+0x1b4>)
   2200c:	4b2b      	ldr	r3, [pc, #172]	; (220bc <spi_data_write+0x1b8>)
   2200e:	0018      	movs	r0, r3
   22010:	4b2b      	ldr	r3, [pc, #172]	; (220c0 <spi_data_write+0x1bc>)
   22012:	4798      	blx	r3
   22014:	4b2e      	ldr	r3, [pc, #184]	; (220d0 <spi_data_write+0x1cc>)
   22016:	0018      	movs	r0, r3
   22018:	4b29      	ldr	r3, [pc, #164]	; (220c0 <spi_data_write+0x1bc>)
   2201a:	4798      	blx	r3
   2201c:	4b2a      	ldr	r3, [pc, #168]	; (220c8 <spi_data_write+0x1c4>)
   2201e:	0018      	movs	r0, r3
   22020:	4b27      	ldr	r3, [pc, #156]	; (220c0 <spi_data_write+0x1bc>)
   22022:	4798      	blx	r3
			result = N_FAIL;
   22024:	2313      	movs	r3, #19
   22026:	18fb      	adds	r3, r7, r3
   22028:	2200      	movs	r2, #0
   2202a:	701a      	strb	r2, [r3, #0]
			break;
   2202c:	e037      	b.n	2209e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2202e:	4b29      	ldr	r3, [pc, #164]	; (220d4 <spi_data_write+0x1d0>)
   22030:	781b      	ldrb	r3, [r3, #0]
   22032:	2b00      	cmp	r3, #0
   22034:	d11b      	bne.n	2206e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   22036:	230c      	movs	r3, #12
   22038:	18fb      	adds	r3, r7, r3
   2203a:	2102      	movs	r1, #2
   2203c:	0018      	movs	r0, r3
   2203e:	4b1c      	ldr	r3, [pc, #112]	; (220b0 <spi_data_write+0x1ac>)
   22040:	4798      	blx	r3
   22042:	1e03      	subs	r3, r0, #0
   22044:	d013      	beq.n	2206e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   22046:	23d7      	movs	r3, #215	; 0xd7
   22048:	009a      	lsls	r2, r3, #2
   2204a:	491b      	ldr	r1, [pc, #108]	; (220b8 <spi_data_write+0x1b4>)
   2204c:	4b1b      	ldr	r3, [pc, #108]	; (220bc <spi_data_write+0x1b8>)
   2204e:	0018      	movs	r0, r3
   22050:	4b1b      	ldr	r3, [pc, #108]	; (220c0 <spi_data_write+0x1bc>)
   22052:	4798      	blx	r3
   22054:	4b20      	ldr	r3, [pc, #128]	; (220d8 <spi_data_write+0x1d4>)
   22056:	0018      	movs	r0, r3
   22058:	4b19      	ldr	r3, [pc, #100]	; (220c0 <spi_data_write+0x1bc>)
   2205a:	4798      	blx	r3
   2205c:	4b1a      	ldr	r3, [pc, #104]	; (220c8 <spi_data_write+0x1c4>)
   2205e:	0018      	movs	r0, r3
   22060:	4b17      	ldr	r3, [pc, #92]	; (220c0 <spi_data_write+0x1bc>)
   22062:	4798      	blx	r3
				result = N_FAIL;
   22064:	2313      	movs	r3, #19
   22066:	18fb      	adds	r3, r7, r3
   22068:	2200      	movs	r2, #0
   2206a:	701a      	strb	r2, [r3, #0]
				break;
   2206c:	e017      	b.n	2209e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2206e:	2316      	movs	r3, #22
   22070:	18fb      	adds	r3, r7, r3
   22072:	881a      	ldrh	r2, [r3, #0]
   22074:	2314      	movs	r3, #20
   22076:	18fb      	adds	r3, r7, r3
   22078:	881b      	ldrh	r3, [r3, #0]
   2207a:	18d3      	adds	r3, r2, r3
   2207c:	b29a      	uxth	r2, r3
   2207e:	2316      	movs	r3, #22
   22080:	18fb      	adds	r3, r7, r3
   22082:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   22084:	1cbb      	adds	r3, r7, #2
   22086:	1cb9      	adds	r1, r7, #2
   22088:	2214      	movs	r2, #20
   2208a:	18ba      	adds	r2, r7, r2
   2208c:	8809      	ldrh	r1, [r1, #0]
   2208e:	8812      	ldrh	r2, [r2, #0]
   22090:	1a8a      	subs	r2, r1, r2
   22092:	801a      	strh	r2, [r3, #0]
	} while (sz);
   22094:	1cbb      	adds	r3, r7, #2
   22096:	881b      	ldrh	r3, [r3, #0]
   22098:	2b00      	cmp	r3, #0
   2209a:	d000      	beq.n	2209e <spi_data_write+0x19a>
   2209c:	e745      	b.n	21f2a <spi_data_write+0x26>


	return result;
   2209e:	2313      	movs	r3, #19
   220a0:	18fb      	adds	r3, r7, r3
   220a2:	781b      	ldrb	r3, [r3, #0]
   220a4:	b25b      	sxtb	r3, r3
}
   220a6:	0018      	movs	r0, r3
   220a8:	46bd      	mov	sp, r7
   220aa:	b006      	add	sp, #24
   220ac:	bd80      	pop	{r7, pc}
   220ae:	46c0      	nop			; (mov r8, r8)
   220b0:	00020f8d 	.word	0x00020f8d
   220b4:	00000349 	.word	0x00000349
   220b8:	00036854 	.word	0x00036854
   220bc:	0003622c 	.word	0x0003622c
   220c0:	0001bafd 	.word	0x0001bafd
   220c4:	000364f4 	.word	0x000364f4
   220c8:	0003626c 	.word	0x0003626c
   220cc:	00000352 	.word	0x00000352
   220d0:	0003652c 	.word	0x0003652c
   220d4:	20003d08 	.word	0x20003d08
   220d8:	00036560 	.word	0x00036560

000220dc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   220dc:	b590      	push	{r4, r7, lr}
   220de:	b087      	sub	sp, #28
   220e0:	af02      	add	r7, sp, #8
   220e2:	6078      	str	r0, [r7, #4]
   220e4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   220e6:	230f      	movs	r3, #15
   220e8:	18fb      	adds	r3, r7, r3
   220ea:	220a      	movs	r2, #10
   220ec:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   220ee:	230c      	movs	r3, #12
   220f0:	18fb      	adds	r3, r7, r3
   220f2:	2201      	movs	r2, #1
   220f4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   220f6:	230e      	movs	r3, #14
   220f8:	18fb      	adds	r3, r7, r3
   220fa:	22c9      	movs	r2, #201	; 0xc9
   220fc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   220fe:	230d      	movs	r3, #13
   22100:	18fb      	adds	r3, r7, r3
   22102:	2200      	movs	r2, #0
   22104:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   22106:	687b      	ldr	r3, [r7, #4]
   22108:	2b30      	cmp	r3, #48	; 0x30
   2210a:	d808      	bhi.n	2211e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2210c:	230e      	movs	r3, #14
   2210e:	18fb      	adds	r3, r7, r3
   22110:	22c3      	movs	r2, #195	; 0xc3
   22112:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   22114:	230d      	movs	r3, #13
   22116:	18fb      	adds	r3, r7, r3
   22118:	2201      	movs	r2, #1
   2211a:	701a      	strb	r2, [r3, #0]
   2211c:	e007      	b.n	2212e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2211e:	230e      	movs	r3, #14
   22120:	18fb      	adds	r3, r7, r3
   22122:	22c9      	movs	r2, #201	; 0xc9
   22124:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   22126:	230d      	movs	r3, #13
   22128:	18fb      	adds	r3, r7, r3
   2212a:	2200      	movs	r2, #0
   2212c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2212e:	003a      	movs	r2, r7
   22130:	6879      	ldr	r1, [r7, #4]
   22132:	230e      	movs	r3, #14
   22134:	18fb      	adds	r3, r7, r3
   22136:	7818      	ldrb	r0, [r3, #0]
   22138:	230d      	movs	r3, #13
   2213a:	18fb      	adds	r3, r7, r3
   2213c:	781b      	ldrb	r3, [r3, #0]
   2213e:	9300      	str	r3, [sp, #0]
   22140:	2304      	movs	r3, #4
   22142:	4c2e      	ldr	r4, [pc, #184]	; (221fc <spi_write_reg+0x120>)
   22144:	47a0      	blx	r4
   22146:	0002      	movs	r2, r0
   22148:	230c      	movs	r3, #12
   2214a:	18fb      	adds	r3, r7, r3
   2214c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2214e:	230c      	movs	r3, #12
   22150:	18fb      	adds	r3, r7, r3
   22152:	781b      	ldrb	r3, [r3, #0]
   22154:	b25b      	sxtb	r3, r3
   22156:	2b01      	cmp	r3, #1
   22158:	d010      	beq.n	2217c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2215a:	4a29      	ldr	r2, [pc, #164]	; (22200 <spi_write_reg+0x124>)
   2215c:	4929      	ldr	r1, [pc, #164]	; (22204 <spi_write_reg+0x128>)
   2215e:	4b2a      	ldr	r3, [pc, #168]	; (22208 <spi_write_reg+0x12c>)
   22160:	0018      	movs	r0, r3
   22162:	4b2a      	ldr	r3, [pc, #168]	; (2220c <spi_write_reg+0x130>)
   22164:	4798      	blx	r3
   22166:	687a      	ldr	r2, [r7, #4]
   22168:	4b29      	ldr	r3, [pc, #164]	; (22210 <spi_write_reg+0x134>)
   2216a:	0011      	movs	r1, r2
   2216c:	0018      	movs	r0, r3
   2216e:	4b27      	ldr	r3, [pc, #156]	; (2220c <spi_write_reg+0x130>)
   22170:	4798      	blx	r3
   22172:	4b28      	ldr	r3, [pc, #160]	; (22214 <spi_write_reg+0x138>)
   22174:	0018      	movs	r0, r3
   22176:	4b25      	ldr	r3, [pc, #148]	; (2220c <spi_write_reg+0x130>)
   22178:	4798      	blx	r3
		goto _FAIL_;
   2217a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2217c:	230c      	movs	r3, #12
   2217e:	18fb      	adds	r3, r7, r3
   22180:	781b      	ldrb	r3, [r3, #0]
   22182:	b25b      	sxtb	r3, r3
   22184:	2b01      	cmp	r3, #1
   22186:	d030      	beq.n	221ea <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   22188:	2001      	movs	r0, #1
   2218a:	4b23      	ldr	r3, [pc, #140]	; (22218 <spi_write_reg+0x13c>)
   2218c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2218e:	2300      	movs	r3, #0
   22190:	9300      	str	r3, [sp, #0]
   22192:	2300      	movs	r3, #0
   22194:	2200      	movs	r2, #0
   22196:	2100      	movs	r1, #0
   22198:	20cf      	movs	r0, #207	; 0xcf
   2219a:	4c20      	ldr	r4, [pc, #128]	; (2221c <spi_write_reg+0x140>)
   2219c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2219e:	20cf      	movs	r0, #207	; 0xcf
   221a0:	4b1f      	ldr	r3, [pc, #124]	; (22220 <spi_write_reg+0x144>)
   221a2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   221a4:	23ea      	movs	r3, #234	; 0xea
   221a6:	009a      	lsls	r2, r3, #2
   221a8:	4916      	ldr	r1, [pc, #88]	; (22204 <spi_write_reg+0x128>)
   221aa:	4b17      	ldr	r3, [pc, #92]	; (22208 <spi_write_reg+0x12c>)
   221ac:	0018      	movs	r0, r3
   221ae:	4b17      	ldr	r3, [pc, #92]	; (2220c <spi_write_reg+0x130>)
   221b0:	4798      	blx	r3
   221b2:	230f      	movs	r3, #15
   221b4:	18fb      	adds	r3, r7, r3
   221b6:	7819      	ldrb	r1, [r3, #0]
   221b8:	683b      	ldr	r3, [r7, #0]
   221ba:	687a      	ldr	r2, [r7, #4]
   221bc:	4819      	ldr	r0, [pc, #100]	; (22224 <spi_write_reg+0x148>)
   221be:	4c13      	ldr	r4, [pc, #76]	; (2220c <spi_write_reg+0x130>)
   221c0:	47a0      	blx	r4
   221c2:	4b14      	ldr	r3, [pc, #80]	; (22214 <spi_write_reg+0x138>)
   221c4:	0018      	movs	r0, r3
   221c6:	4b11      	ldr	r3, [pc, #68]	; (2220c <spi_write_reg+0x130>)
   221c8:	4798      	blx	r3
		nm_bsp_sleep(1);
   221ca:	2001      	movs	r0, #1
   221cc:	4b12      	ldr	r3, [pc, #72]	; (22218 <spi_write_reg+0x13c>)
   221ce:	4798      	blx	r3
		retry--;
   221d0:	230f      	movs	r3, #15
   221d2:	18fb      	adds	r3, r7, r3
   221d4:	781a      	ldrb	r2, [r3, #0]
   221d6:	230f      	movs	r3, #15
   221d8:	18fb      	adds	r3, r7, r3
   221da:	3a01      	subs	r2, #1
   221dc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   221de:	230f      	movs	r3, #15
   221e0:	18fb      	adds	r3, r7, r3
   221e2:	781b      	ldrb	r3, [r3, #0]
   221e4:	2b00      	cmp	r3, #0
   221e6:	d000      	beq.n	221ea <spi_write_reg+0x10e>
   221e8:	e78d      	b.n	22106 <spi_write_reg+0x2a>
	}

	return result;
   221ea:	230c      	movs	r3, #12
   221ec:	18fb      	adds	r3, r7, r3
   221ee:	781b      	ldrb	r3, [r3, #0]
   221f0:	b25b      	sxtb	r3, r3
}
   221f2:	0018      	movs	r0, r3
   221f4:	46bd      	mov	sp, r7
   221f6:	b005      	add	sp, #20
   221f8:	bd90      	pop	{r4, r7, pc}
   221fa:	46c0      	nop			; (mov r8, r8)
   221fc:	00021611 	.word	0x00021611
   22200:	0000039d 	.word	0x0000039d
   22204:	00036864 	.word	0x00036864
   22208:	0003622c 	.word	0x0003622c
   2220c:	0001bafd 	.word	0x0001bafd
   22210:	00036598 	.word	0x00036598
   22214:	0003626c 	.word	0x0003626c
   22218:	0001df51 	.word	0x0001df51
   2221c:	00021095 	.word	0x00021095
   22220:	000214d5 	.word	0x000214d5
   22224:	000365c4 	.word	0x000365c4

00022228 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   22228:	b590      	push	{r4, r7, lr}
   2222a:	b089      	sub	sp, #36	; 0x24
   2222c:	af02      	add	r7, sp, #8
   2222e:	60f8      	str	r0, [r7, #12]
   22230:	60b9      	str	r1, [r7, #8]
   22232:	1dbb      	adds	r3, r7, #6
   22234:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22236:	2316      	movs	r3, #22
   22238:	18fb      	adds	r3, r7, r3
   2223a:	220a      	movs	r2, #10
   2223c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2223e:	2315      	movs	r3, #21
   22240:	18fb      	adds	r3, r7, r3
   22242:	22c7      	movs	r2, #199	; 0xc7
   22244:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   22246:	1dbb      	adds	r3, r7, #6
   22248:	881a      	ldrh	r2, [r3, #0]
   2224a:	68f9      	ldr	r1, [r7, #12]
   2224c:	2315      	movs	r3, #21
   2224e:	18fb      	adds	r3, r7, r3
   22250:	7818      	ldrb	r0, [r3, #0]
   22252:	2300      	movs	r3, #0
   22254:	9300      	str	r3, [sp, #0]
   22256:	0013      	movs	r3, r2
   22258:	2200      	movs	r2, #0
   2225a:	4c4d      	ldr	r4, [pc, #308]	; (22390 <nm_spi_write+0x168>)
   2225c:	47a0      	blx	r4
   2225e:	0002      	movs	r2, r0
   22260:	2317      	movs	r3, #23
   22262:	18fb      	adds	r3, r7, r3
   22264:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22266:	2317      	movs	r3, #23
   22268:	18fb      	adds	r3, r7, r3
   2226a:	781b      	ldrb	r3, [r3, #0]
   2226c:	b25b      	sxtb	r3, r3
   2226e:	2b01      	cmp	r3, #1
   22270:	d010      	beq.n	22294 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   22272:	4a48      	ldr	r2, [pc, #288]	; (22394 <nm_spi_write+0x16c>)
   22274:	4948      	ldr	r1, [pc, #288]	; (22398 <nm_spi_write+0x170>)
   22276:	4b49      	ldr	r3, [pc, #292]	; (2239c <nm_spi_write+0x174>)
   22278:	0018      	movs	r0, r3
   2227a:	4b49      	ldr	r3, [pc, #292]	; (223a0 <nm_spi_write+0x178>)
   2227c:	4798      	blx	r3
   2227e:	68fa      	ldr	r2, [r7, #12]
   22280:	4b48      	ldr	r3, [pc, #288]	; (223a4 <nm_spi_write+0x17c>)
   22282:	0011      	movs	r1, r2
   22284:	0018      	movs	r0, r3
   22286:	4b46      	ldr	r3, [pc, #280]	; (223a0 <nm_spi_write+0x178>)
   22288:	4798      	blx	r3
   2228a:	4b47      	ldr	r3, [pc, #284]	; (223a8 <nm_spi_write+0x180>)
   2228c:	0018      	movs	r0, r3
   2228e:	4b44      	ldr	r3, [pc, #272]	; (223a0 <nm_spi_write+0x178>)
   22290:	4798      	blx	r3
		goto _FAIL_;
   22292:	e03e      	b.n	22312 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   22294:	2317      	movs	r3, #23
   22296:	18fc      	adds	r4, r7, r3
   22298:	1dbb      	adds	r3, r7, #6
   2229a:	881a      	ldrh	r2, [r3, #0]
   2229c:	68bb      	ldr	r3, [r7, #8]
   2229e:	0011      	movs	r1, r2
   222a0:	0018      	movs	r0, r3
   222a2:	4b42      	ldr	r3, [pc, #264]	; (223ac <nm_spi_write+0x184>)
   222a4:	4798      	blx	r3
   222a6:	0003      	movs	r3, r0
   222a8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   222aa:	2317      	movs	r3, #23
   222ac:	18fb      	adds	r3, r7, r3
   222ae:	781b      	ldrb	r3, [r3, #0]
   222b0:	b25b      	sxtb	r3, r3
   222b2:	2b01      	cmp	r3, #1
   222b4:	d00e      	beq.n	222d4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   222b6:	4a3e      	ldr	r2, [pc, #248]	; (223b0 <nm_spi_write+0x188>)
   222b8:	4937      	ldr	r1, [pc, #220]	; (22398 <nm_spi_write+0x170>)
   222ba:	4b38      	ldr	r3, [pc, #224]	; (2239c <nm_spi_write+0x174>)
   222bc:	0018      	movs	r0, r3
   222be:	4b38      	ldr	r3, [pc, #224]	; (223a0 <nm_spi_write+0x178>)
   222c0:	4798      	blx	r3
   222c2:	4b3c      	ldr	r3, [pc, #240]	; (223b4 <nm_spi_write+0x18c>)
   222c4:	0018      	movs	r0, r3
   222c6:	4b36      	ldr	r3, [pc, #216]	; (223a0 <nm_spi_write+0x178>)
   222c8:	4798      	blx	r3
   222ca:	4b37      	ldr	r3, [pc, #220]	; (223a8 <nm_spi_write+0x180>)
   222cc:	0018      	movs	r0, r3
   222ce:	4b34      	ldr	r3, [pc, #208]	; (223a0 <nm_spi_write+0x178>)
   222d0:	4798      	blx	r3
		goto _FAIL_;
   222d2:	e01e      	b.n	22312 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   222d4:	2317      	movs	r3, #23
   222d6:	18fc      	adds	r4, r7, r3
   222d8:	2315      	movs	r3, #21
   222da:	18fb      	adds	r3, r7, r3
   222dc:	781b      	ldrb	r3, [r3, #0]
   222de:	0018      	movs	r0, r3
   222e0:	4b35      	ldr	r3, [pc, #212]	; (223b8 <nm_spi_write+0x190>)
   222e2:	4798      	blx	r3
   222e4:	0003      	movs	r3, r0
   222e6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   222e8:	2317      	movs	r3, #23
   222ea:	18fb      	adds	r3, r7, r3
   222ec:	781b      	ldrb	r3, [r3, #0]
   222ee:	b25b      	sxtb	r3, r3
   222f0:	2b01      	cmp	r3, #1
   222f2:	d00e      	beq.n	22312 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   222f4:	4a31      	ldr	r2, [pc, #196]	; (223bc <nm_spi_write+0x194>)
   222f6:	4928      	ldr	r1, [pc, #160]	; (22398 <nm_spi_write+0x170>)
   222f8:	4b28      	ldr	r3, [pc, #160]	; (2239c <nm_spi_write+0x174>)
   222fa:	0018      	movs	r0, r3
   222fc:	4b28      	ldr	r3, [pc, #160]	; (223a0 <nm_spi_write+0x178>)
   222fe:	4798      	blx	r3
   22300:	4b2c      	ldr	r3, [pc, #176]	; (223b4 <nm_spi_write+0x18c>)
   22302:	0018      	movs	r0, r3
   22304:	4b26      	ldr	r3, [pc, #152]	; (223a0 <nm_spi_write+0x178>)
   22306:	4798      	blx	r3
   22308:	4b27      	ldr	r3, [pc, #156]	; (223a8 <nm_spi_write+0x180>)
   2230a:	0018      	movs	r0, r3
   2230c:	4b24      	ldr	r3, [pc, #144]	; (223a0 <nm_spi_write+0x178>)
   2230e:	4798      	blx	r3
		goto _FAIL_;
   22310:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   22312:	2317      	movs	r3, #23
   22314:	18fb      	adds	r3, r7, r3
   22316:	781b      	ldrb	r3, [r3, #0]
   22318:	b25b      	sxtb	r3, r3
   2231a:	2b01      	cmp	r3, #1
   2231c:	d030      	beq.n	22380 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2231e:	2001      	movs	r0, #1
   22320:	4b27      	ldr	r3, [pc, #156]	; (223c0 <nm_spi_write+0x198>)
   22322:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   22324:	2300      	movs	r3, #0
   22326:	9300      	str	r3, [sp, #0]
   22328:	2300      	movs	r3, #0
   2232a:	2200      	movs	r2, #0
   2232c:	2100      	movs	r1, #0
   2232e:	20cf      	movs	r0, #207	; 0xcf
   22330:	4c24      	ldr	r4, [pc, #144]	; (223c4 <nm_spi_write+0x19c>)
   22332:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   22334:	20cf      	movs	r0, #207	; 0xcf
   22336:	4b24      	ldr	r3, [pc, #144]	; (223c8 <nm_spi_write+0x1a0>)
   22338:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2233a:	4a24      	ldr	r2, [pc, #144]	; (223cc <nm_spi_write+0x1a4>)
   2233c:	4916      	ldr	r1, [pc, #88]	; (22398 <nm_spi_write+0x170>)
   2233e:	4b17      	ldr	r3, [pc, #92]	; (2239c <nm_spi_write+0x174>)
   22340:	0018      	movs	r0, r3
   22342:	4b17      	ldr	r3, [pc, #92]	; (223a0 <nm_spi_write+0x178>)
   22344:	4798      	blx	r3
   22346:	2316      	movs	r3, #22
   22348:	18fb      	adds	r3, r7, r3
   2234a:	7819      	ldrb	r1, [r3, #0]
   2234c:	1dbb      	adds	r3, r7, #6
   2234e:	881b      	ldrh	r3, [r3, #0]
   22350:	68fa      	ldr	r2, [r7, #12]
   22352:	481f      	ldr	r0, [pc, #124]	; (223d0 <nm_spi_write+0x1a8>)
   22354:	4c12      	ldr	r4, [pc, #72]	; (223a0 <nm_spi_write+0x178>)
   22356:	47a0      	blx	r4
   22358:	4b13      	ldr	r3, [pc, #76]	; (223a8 <nm_spi_write+0x180>)
   2235a:	0018      	movs	r0, r3
   2235c:	4b10      	ldr	r3, [pc, #64]	; (223a0 <nm_spi_write+0x178>)
   2235e:	4798      	blx	r3
		nm_bsp_sleep(1);
   22360:	2001      	movs	r0, #1
   22362:	4b17      	ldr	r3, [pc, #92]	; (223c0 <nm_spi_write+0x198>)
   22364:	4798      	blx	r3
		retry--;
   22366:	2316      	movs	r3, #22
   22368:	18fb      	adds	r3, r7, r3
   2236a:	781a      	ldrb	r2, [r3, #0]
   2236c:	2316      	movs	r3, #22
   2236e:	18fb      	adds	r3, r7, r3
   22370:	3a01      	subs	r2, #1
   22372:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22374:	2316      	movs	r3, #22
   22376:	18fb      	adds	r3, r7, r3
   22378:	781b      	ldrb	r3, [r3, #0]
   2237a:	2b00      	cmp	r3, #0
   2237c:	d000      	beq.n	22380 <nm_spi_write+0x158>
   2237e:	e762      	b.n	22246 <nm_spi_write+0x1e>
	}


	return result;
   22380:	2317      	movs	r3, #23
   22382:	18fb      	adds	r3, r7, r3
   22384:	781b      	ldrb	r3, [r3, #0]
   22386:	b25b      	sxtb	r3, r3
}
   22388:	0018      	movs	r0, r3
   2238a:	46bd      	mov	sp, r7
   2238c:	b007      	add	sp, #28
   2238e:	bd90      	pop	{r4, r7, pc}
   22390:	00021611 	.word	0x00021611
   22394:	000003cf 	.word	0x000003cf
   22398:	00036874 	.word	0x00036874
   2239c:	0003622c 	.word	0x0003622c
   223a0:	0001bafd 	.word	0x0001bafd
   223a4:	000365e0 	.word	0x000365e0
   223a8:	0003626c 	.word	0x0003626c
   223ac:	00021f05 	.word	0x00021f05
   223b0:	000003d9 	.word	0x000003d9
   223b4:	00036610 	.word	0x00036610
   223b8:	000213d5 	.word	0x000213d5
   223bc:	000003e1 	.word	0x000003e1
   223c0:	0001df51 	.word	0x0001df51
   223c4:	00021095 	.word	0x00021095
   223c8:	000214d5 	.word	0x000214d5
   223cc:	000003eb 	.word	0x000003eb
   223d0:	00036638 	.word	0x00036638

000223d4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   223d4:	b590      	push	{r4, r7, lr}
   223d6:	b087      	sub	sp, #28
   223d8:	af02      	add	r7, sp, #8
   223da:	6078      	str	r0, [r7, #4]
   223dc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   223de:	230f      	movs	r3, #15
   223e0:	18fb      	adds	r3, r7, r3
   223e2:	220a      	movs	r2, #10
   223e4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   223e6:	230c      	movs	r3, #12
   223e8:	18fb      	adds	r3, r7, r3
   223ea:	2201      	movs	r2, #1
   223ec:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   223ee:	230e      	movs	r3, #14
   223f0:	18fb      	adds	r3, r7, r3
   223f2:	22ca      	movs	r2, #202	; 0xca
   223f4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   223f6:	230d      	movs	r3, #13
   223f8:	18fb      	adds	r3, r7, r3
   223fa:	2200      	movs	r2, #0
   223fc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   223fe:	687b      	ldr	r3, [r7, #4]
   22400:	2bff      	cmp	r3, #255	; 0xff
   22402:	d808      	bhi.n	22416 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   22404:	230e      	movs	r3, #14
   22406:	18fb      	adds	r3, r7, r3
   22408:	22c4      	movs	r2, #196	; 0xc4
   2240a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2240c:	230d      	movs	r3, #13
   2240e:	18fb      	adds	r3, r7, r3
   22410:	2201      	movs	r2, #1
   22412:	701a      	strb	r2, [r3, #0]
   22414:	e007      	b.n	22426 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   22416:	230e      	movs	r3, #14
   22418:	18fb      	adds	r3, r7, r3
   2241a:	22ca      	movs	r2, #202	; 0xca
   2241c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2241e:	230d      	movs	r3, #13
   22420:	18fb      	adds	r3, r7, r3
   22422:	2200      	movs	r2, #0
   22424:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   22426:	2308      	movs	r3, #8
   22428:	18fa      	adds	r2, r7, r3
   2242a:	6879      	ldr	r1, [r7, #4]
   2242c:	230e      	movs	r3, #14
   2242e:	18fb      	adds	r3, r7, r3
   22430:	7818      	ldrb	r0, [r3, #0]
   22432:	230d      	movs	r3, #13
   22434:	18fb      	adds	r3, r7, r3
   22436:	781b      	ldrb	r3, [r3, #0]
   22438:	9300      	str	r3, [sp, #0]
   2243a:	2304      	movs	r3, #4
   2243c:	4c37      	ldr	r4, [pc, #220]	; (2251c <spi_read_reg+0x148>)
   2243e:	47a0      	blx	r4
   22440:	0002      	movs	r2, r0
   22442:	230c      	movs	r3, #12
   22444:	18fb      	adds	r3, r7, r3
   22446:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22448:	230c      	movs	r3, #12
   2244a:	18fb      	adds	r3, r7, r3
   2244c:	781b      	ldrb	r3, [r3, #0]
   2244e:	b25b      	sxtb	r3, r3
   22450:	2b01      	cmp	r3, #1
   22452:	d010      	beq.n	22476 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   22454:	4a32      	ldr	r2, [pc, #200]	; (22520 <spi_read_reg+0x14c>)
   22456:	4933      	ldr	r1, [pc, #204]	; (22524 <spi_read_reg+0x150>)
   22458:	4b33      	ldr	r3, [pc, #204]	; (22528 <spi_read_reg+0x154>)
   2245a:	0018      	movs	r0, r3
   2245c:	4b33      	ldr	r3, [pc, #204]	; (2252c <spi_read_reg+0x158>)
   2245e:	4798      	blx	r3
   22460:	687a      	ldr	r2, [r7, #4]
   22462:	4b33      	ldr	r3, [pc, #204]	; (22530 <spi_read_reg+0x15c>)
   22464:	0011      	movs	r1, r2
   22466:	0018      	movs	r0, r3
   22468:	4b30      	ldr	r3, [pc, #192]	; (2252c <spi_read_reg+0x158>)
   2246a:	4798      	blx	r3
   2246c:	4b31      	ldr	r3, [pc, #196]	; (22534 <spi_read_reg+0x160>)
   2246e:	0018      	movs	r0, r3
   22470:	4b2e      	ldr	r3, [pc, #184]	; (2252c <spi_read_reg+0x158>)
   22472:	4798      	blx	r3
		goto _FAIL_;
   22474:	e014      	b.n	224a0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   22476:	2308      	movs	r3, #8
   22478:	18fb      	adds	r3, r7, r3
   2247a:	781b      	ldrb	r3, [r3, #0]
   2247c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2247e:	2308      	movs	r3, #8
   22480:	18fb      	adds	r3, r7, r3
   22482:	785b      	ldrb	r3, [r3, #1]
   22484:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   22486:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   22488:	2308      	movs	r3, #8
   2248a:	18fb      	adds	r3, r7, r3
   2248c:	789b      	ldrb	r3, [r3, #2]
   2248e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   22490:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   22492:	2308      	movs	r3, #8
   22494:	18fb      	adds	r3, r7, r3
   22496:	78db      	ldrb	r3, [r3, #3]
   22498:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2249a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2249c:	683b      	ldr	r3, [r7, #0]
   2249e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   224a0:	230c      	movs	r3, #12
   224a2:	18fb      	adds	r3, r7, r3
   224a4:	781b      	ldrb	r3, [r3, #0]
   224a6:	b25b      	sxtb	r3, r3
   224a8:	2b01      	cmp	r3, #1
   224aa:	d02f      	beq.n	2250c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   224ac:	2001      	movs	r0, #1
   224ae:	4b22      	ldr	r3, [pc, #136]	; (22538 <spi_read_reg+0x164>)
   224b0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   224b2:	2300      	movs	r3, #0
   224b4:	9300      	str	r3, [sp, #0]
   224b6:	2300      	movs	r3, #0
   224b8:	2200      	movs	r2, #0
   224ba:	2100      	movs	r1, #0
   224bc:	20cf      	movs	r0, #207	; 0xcf
   224be:	4c1f      	ldr	r4, [pc, #124]	; (2253c <spi_read_reg+0x168>)
   224c0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   224c2:	20cf      	movs	r0, #207	; 0xcf
   224c4:	4b1e      	ldr	r3, [pc, #120]	; (22540 <spi_read_reg+0x16c>)
   224c6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   224c8:	4a1e      	ldr	r2, [pc, #120]	; (22544 <spi_read_reg+0x170>)
   224ca:	4916      	ldr	r1, [pc, #88]	; (22524 <spi_read_reg+0x150>)
   224cc:	4b16      	ldr	r3, [pc, #88]	; (22528 <spi_read_reg+0x154>)
   224ce:	0018      	movs	r0, r3
   224d0:	4b16      	ldr	r3, [pc, #88]	; (2252c <spi_read_reg+0x158>)
   224d2:	4798      	blx	r3
   224d4:	230f      	movs	r3, #15
   224d6:	18fb      	adds	r3, r7, r3
   224d8:	7819      	ldrb	r1, [r3, #0]
   224da:	687a      	ldr	r2, [r7, #4]
   224dc:	4b1a      	ldr	r3, [pc, #104]	; (22548 <spi_read_reg+0x174>)
   224de:	0018      	movs	r0, r3
   224e0:	4b12      	ldr	r3, [pc, #72]	; (2252c <spi_read_reg+0x158>)
   224e2:	4798      	blx	r3
   224e4:	4b13      	ldr	r3, [pc, #76]	; (22534 <spi_read_reg+0x160>)
   224e6:	0018      	movs	r0, r3
   224e8:	4b10      	ldr	r3, [pc, #64]	; (2252c <spi_read_reg+0x158>)
   224ea:	4798      	blx	r3
		nm_bsp_sleep(1);
   224ec:	2001      	movs	r0, #1
   224ee:	4b12      	ldr	r3, [pc, #72]	; (22538 <spi_read_reg+0x164>)
   224f0:	4798      	blx	r3
		retry--;
   224f2:	230f      	movs	r3, #15
   224f4:	18fb      	adds	r3, r7, r3
   224f6:	781a      	ldrb	r2, [r3, #0]
   224f8:	230f      	movs	r3, #15
   224fa:	18fb      	adds	r3, r7, r3
   224fc:	3a01      	subs	r2, #1
   224fe:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22500:	230f      	movs	r3, #15
   22502:	18fb      	adds	r3, r7, r3
   22504:	781b      	ldrb	r3, [r3, #0]
   22506:	2b00      	cmp	r3, #0
   22508:	d000      	beq.n	2250c <spi_read_reg+0x138>
   2250a:	e778      	b.n	223fe <spi_read_reg+0x2a>
	}
		
	return result;
   2250c:	230c      	movs	r3, #12
   2250e:	18fb      	adds	r3, r7, r3
   22510:	781b      	ldrb	r3, [r3, #0]
   22512:	b25b      	sxtb	r3, r3
}
   22514:	0018      	movs	r0, r3
   22516:	46bd      	mov	sp, r7
   22518:	b005      	add	sp, #20
   2251a:	bd90      	pop	{r4, r7, pc}
   2251c:	00021611 	.word	0x00021611
   22520:	00000423 	.word	0x00000423
   22524:	00036884 	.word	0x00036884
   22528:	0003622c 	.word	0x0003622c
   2252c:	0001bafd 	.word	0x0001bafd
   22530:	00036654 	.word	0x00036654
   22534:	0003626c 	.word	0x0003626c
   22538:	0001df51 	.word	0x0001df51
   2253c:	00021095 	.word	0x00021095
   22540:	000214d5 	.word	0x000214d5
   22544:	00000435 	.word	0x00000435
   22548:	00036680 	.word	0x00036680

0002254c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2254c:	b590      	push	{r4, r7, lr}
   2254e:	b089      	sub	sp, #36	; 0x24
   22550:	af02      	add	r7, sp, #8
   22552:	60f8      	str	r0, [r7, #12]
   22554:	60b9      	str	r1, [r7, #8]
   22556:	1dbb      	adds	r3, r7, #6
   22558:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2255a:	2316      	movs	r3, #22
   2255c:	18fb      	adds	r3, r7, r3
   2255e:	22c8      	movs	r2, #200	; 0xc8
   22560:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22562:	2317      	movs	r3, #23
   22564:	18fb      	adds	r3, r7, r3
   22566:	220a      	movs	r2, #10
   22568:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2256a:	1dbb      	adds	r3, r7, #6
   2256c:	881c      	ldrh	r4, [r3, #0]
   2256e:	68ba      	ldr	r2, [r7, #8]
   22570:	68f9      	ldr	r1, [r7, #12]
   22572:	2316      	movs	r3, #22
   22574:	18fb      	adds	r3, r7, r3
   22576:	7818      	ldrb	r0, [r3, #0]
   22578:	2300      	movs	r3, #0
   2257a:	9300      	str	r3, [sp, #0]
   2257c:	0023      	movs	r3, r4
   2257e:	4c2e      	ldr	r4, [pc, #184]	; (22638 <nm_spi_read+0xec>)
   22580:	47a0      	blx	r4
   22582:	0002      	movs	r2, r0
   22584:	2315      	movs	r3, #21
   22586:	18fb      	adds	r3, r7, r3
   22588:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2258a:	2315      	movs	r3, #21
   2258c:	18fb      	adds	r3, r7, r3
   2258e:	781b      	ldrb	r3, [r3, #0]
   22590:	b25b      	sxtb	r3, r3
   22592:	2b01      	cmp	r3, #1
   22594:	d010      	beq.n	225b8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   22596:	4a29      	ldr	r2, [pc, #164]	; (2263c <nm_spi_read+0xf0>)
   22598:	4929      	ldr	r1, [pc, #164]	; (22640 <nm_spi_read+0xf4>)
   2259a:	4b2a      	ldr	r3, [pc, #168]	; (22644 <nm_spi_read+0xf8>)
   2259c:	0018      	movs	r0, r3
   2259e:	4b2a      	ldr	r3, [pc, #168]	; (22648 <nm_spi_read+0xfc>)
   225a0:	4798      	blx	r3
   225a2:	68fa      	ldr	r2, [r7, #12]
   225a4:	4b29      	ldr	r3, [pc, #164]	; (2264c <nm_spi_read+0x100>)
   225a6:	0011      	movs	r1, r2
   225a8:	0018      	movs	r0, r3
   225aa:	4b27      	ldr	r3, [pc, #156]	; (22648 <nm_spi_read+0xfc>)
   225ac:	4798      	blx	r3
   225ae:	4b28      	ldr	r3, [pc, #160]	; (22650 <nm_spi_read+0x104>)
   225b0:	0018      	movs	r0, r3
   225b2:	4b25      	ldr	r3, [pc, #148]	; (22648 <nm_spi_read+0xfc>)
   225b4:	4798      	blx	r3
		goto _FAIL_;
   225b6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   225b8:	2315      	movs	r3, #21
   225ba:	18fb      	adds	r3, r7, r3
   225bc:	781b      	ldrb	r3, [r3, #0]
   225be:	b25b      	sxtb	r3, r3
   225c0:	2b01      	cmp	r3, #1
   225c2:	d030      	beq.n	22626 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   225c4:	2001      	movs	r0, #1
   225c6:	4b23      	ldr	r3, [pc, #140]	; (22654 <nm_spi_read+0x108>)
   225c8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   225ca:	2300      	movs	r3, #0
   225cc:	9300      	str	r3, [sp, #0]
   225ce:	2300      	movs	r3, #0
   225d0:	2200      	movs	r2, #0
   225d2:	2100      	movs	r1, #0
   225d4:	20cf      	movs	r0, #207	; 0xcf
   225d6:	4c20      	ldr	r4, [pc, #128]	; (22658 <nm_spi_read+0x10c>)
   225d8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   225da:	20cf      	movs	r0, #207	; 0xcf
   225dc:	4b1f      	ldr	r3, [pc, #124]	; (2265c <nm_spi_read+0x110>)
   225de:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   225e0:	4a1f      	ldr	r2, [pc, #124]	; (22660 <nm_spi_read+0x114>)
   225e2:	4917      	ldr	r1, [pc, #92]	; (22640 <nm_spi_read+0xf4>)
   225e4:	4b17      	ldr	r3, [pc, #92]	; (22644 <nm_spi_read+0xf8>)
   225e6:	0018      	movs	r0, r3
   225e8:	4b17      	ldr	r3, [pc, #92]	; (22648 <nm_spi_read+0xfc>)
   225ea:	4798      	blx	r3
   225ec:	2317      	movs	r3, #23
   225ee:	18fb      	adds	r3, r7, r3
   225f0:	7819      	ldrb	r1, [r3, #0]
   225f2:	1dbb      	adds	r3, r7, #6
   225f4:	881b      	ldrh	r3, [r3, #0]
   225f6:	68fa      	ldr	r2, [r7, #12]
   225f8:	481a      	ldr	r0, [pc, #104]	; (22664 <nm_spi_read+0x118>)
   225fa:	4c13      	ldr	r4, [pc, #76]	; (22648 <nm_spi_read+0xfc>)
   225fc:	47a0      	blx	r4
   225fe:	4b14      	ldr	r3, [pc, #80]	; (22650 <nm_spi_read+0x104>)
   22600:	0018      	movs	r0, r3
   22602:	4b11      	ldr	r3, [pc, #68]	; (22648 <nm_spi_read+0xfc>)
   22604:	4798      	blx	r3
		nm_bsp_sleep(1);
   22606:	2001      	movs	r0, #1
   22608:	4b12      	ldr	r3, [pc, #72]	; (22654 <nm_spi_read+0x108>)
   2260a:	4798      	blx	r3
		retry--;
   2260c:	2317      	movs	r3, #23
   2260e:	18fb      	adds	r3, r7, r3
   22610:	781a      	ldrb	r2, [r3, #0]
   22612:	2317      	movs	r3, #23
   22614:	18fb      	adds	r3, r7, r3
   22616:	3a01      	subs	r2, #1
   22618:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2261a:	2317      	movs	r3, #23
   2261c:	18fb      	adds	r3, r7, r3
   2261e:	781b      	ldrb	r3, [r3, #0]
   22620:	2b00      	cmp	r3, #0
   22622:	d000      	beq.n	22626 <nm_spi_read+0xda>
   22624:	e7a1      	b.n	2256a <nm_spi_read+0x1e>
	}

	return result;
   22626:	2315      	movs	r3, #21
   22628:	18fb      	adds	r3, r7, r3
   2262a:	781b      	ldrb	r3, [r3, #0]
   2262c:	b25b      	sxtb	r3, r3
}
   2262e:	0018      	movs	r0, r3
   22630:	46bd      	mov	sp, r7
   22632:	b007      	add	sp, #28
   22634:	bd90      	pop	{r4, r7, pc}
   22636:	46c0      	nop			; (mov r8, r8)
   22638:	00021611 	.word	0x00021611
   2263c:	00000472 	.word	0x00000472
   22640:	00036894 	.word	0x00036894
   22644:	0003622c 	.word	0x0003622c
   22648:	0001bafd 	.word	0x0001bafd
   2264c:	00036698 	.word	0x00036698
   22650:	0003626c 	.word	0x0003626c
   22654:	0001df51 	.word	0x0001df51
   22658:	00021095 	.word	0x00021095
   2265c:	000214d5 	.word	0x000214d5
   22660:	0000047d 	.word	0x0000047d
   22664:	00036638 	.word	0x00036638

00022668 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   22668:	b580      	push	{r7, lr}
   2266a:	b082      	sub	sp, #8
   2266c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2266e:	4b0c      	ldr	r3, [pc, #48]	; (226a0 <spi_init_pkt_sz+0x38>)
   22670:	0018      	movs	r0, r3
   22672:	4b0c      	ldr	r3, [pc, #48]	; (226a4 <spi_init_pkt_sz+0x3c>)
   22674:	4798      	blx	r3
   22676:	0003      	movs	r3, r0
   22678:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2267a:	687b      	ldr	r3, [r7, #4]
   2267c:	2270      	movs	r2, #112	; 0x70
   2267e:	4393      	bics	r3, r2
   22680:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   22682:	687b      	ldr	r3, [r7, #4]
   22684:	2250      	movs	r2, #80	; 0x50
   22686:	4313      	orrs	r3, r2
   22688:	607b      	str	r3, [r7, #4]
   2268a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2268c:	687b      	ldr	r3, [r7, #4]
   2268e:	4a04      	ldr	r2, [pc, #16]	; (226a0 <spi_init_pkt_sz+0x38>)
   22690:	0019      	movs	r1, r3
   22692:	0010      	movs	r0, r2
   22694:	4b04      	ldr	r3, [pc, #16]	; (226a8 <spi_init_pkt_sz+0x40>)
   22696:	4798      	blx	r3
}
   22698:	46c0      	nop			; (mov r8, r8)
   2269a:	46bd      	mov	sp, r7
   2269c:	b002      	add	sp, #8
   2269e:	bd80      	pop	{r7, pc}
   226a0:	0000e824 	.word	0x0000e824
   226a4:	00022841 	.word	0x00022841
   226a8:	000228b5 	.word	0x000228b5

000226ac <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   226ac:	b590      	push	{r4, r7, lr}
   226ae:	b083      	sub	sp, #12
   226b0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   226b2:	2300      	movs	r3, #0
   226b4:	9300      	str	r3, [sp, #0]
   226b6:	2300      	movs	r3, #0
   226b8:	2200      	movs	r2, #0
   226ba:	2100      	movs	r1, #0
   226bc:	20cf      	movs	r0, #207	; 0xcf
   226be:	4c05      	ldr	r4, [pc, #20]	; (226d4 <nm_spi_reset+0x28>)
   226c0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   226c2:	20cf      	movs	r0, #207	; 0xcf
   226c4:	4b04      	ldr	r3, [pc, #16]	; (226d8 <nm_spi_reset+0x2c>)
   226c6:	4798      	blx	r3
	return M2M_SUCCESS;
   226c8:	2300      	movs	r3, #0
}
   226ca:	0018      	movs	r0, r3
   226cc:	46bd      	mov	sp, r7
   226ce:	b001      	add	sp, #4
   226d0:	bd90      	pop	{r4, r7, pc}
   226d2:	46c0      	nop			; (mov r8, r8)
   226d4:	00021095 	.word	0x00021095
   226d8:	000214d5 	.word	0x000214d5

000226dc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   226dc:	b580      	push	{r7, lr}
   226de:	b082      	sub	sp, #8
   226e0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   226e2:	2300      	movs	r3, #0
   226e4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   226e6:	4b40      	ldr	r3, [pc, #256]	; (227e8 <nm_spi_init+0x10c>)
   226e8:	2200      	movs	r2, #0
   226ea:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   226ec:	003b      	movs	r3, r7
   226ee:	4a3f      	ldr	r2, [pc, #252]	; (227ec <nm_spi_init+0x110>)
   226f0:	0019      	movs	r1, r3
   226f2:	0010      	movs	r0, r2
   226f4:	4b3e      	ldr	r3, [pc, #248]	; (227f0 <nm_spi_init+0x114>)
   226f6:	4798      	blx	r3
   226f8:	1e03      	subs	r3, r0, #0
   226fa:	d129      	bne.n	22750 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   226fc:	4b3a      	ldr	r3, [pc, #232]	; (227e8 <nm_spi_init+0x10c>)
   226fe:	2201      	movs	r2, #1
   22700:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   22702:	2398      	movs	r3, #152	; 0x98
   22704:	00da      	lsls	r2, r3, #3
   22706:	493b      	ldr	r1, [pc, #236]	; (227f4 <nm_spi_init+0x118>)
   22708:	4b3b      	ldr	r3, [pc, #236]	; (227f8 <nm_spi_init+0x11c>)
   2270a:	0018      	movs	r0, r3
   2270c:	4b3b      	ldr	r3, [pc, #236]	; (227fc <nm_spi_init+0x120>)
   2270e:	4798      	blx	r3
   22710:	4b3b      	ldr	r3, [pc, #236]	; (22800 <nm_spi_init+0x124>)
   22712:	0018      	movs	r0, r3
   22714:	4b39      	ldr	r3, [pc, #228]	; (227fc <nm_spi_init+0x120>)
   22716:	4798      	blx	r3
   22718:	4b3a      	ldr	r3, [pc, #232]	; (22804 <nm_spi_init+0x128>)
   2271a:	0018      	movs	r0, r3
   2271c:	4b37      	ldr	r3, [pc, #220]	; (227fc <nm_spi_init+0x120>)
   2271e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   22720:	003b      	movs	r3, r7
   22722:	4a32      	ldr	r2, [pc, #200]	; (227ec <nm_spi_init+0x110>)
   22724:	0019      	movs	r1, r3
   22726:	0010      	movs	r0, r2
   22728:	4b31      	ldr	r3, [pc, #196]	; (227f0 <nm_spi_init+0x114>)
   2272a:	4798      	blx	r3
   2272c:	1e03      	subs	r3, r0, #0
   2272e:	d10f      	bne.n	22750 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   22730:	4a35      	ldr	r2, [pc, #212]	; (22808 <nm_spi_init+0x12c>)
   22732:	4930      	ldr	r1, [pc, #192]	; (227f4 <nm_spi_init+0x118>)
   22734:	4b30      	ldr	r3, [pc, #192]	; (227f8 <nm_spi_init+0x11c>)
   22736:	0018      	movs	r0, r3
   22738:	4b30      	ldr	r3, [pc, #192]	; (227fc <nm_spi_init+0x120>)
   2273a:	4798      	blx	r3
   2273c:	4b33      	ldr	r3, [pc, #204]	; (2280c <nm_spi_init+0x130>)
   2273e:	0018      	movs	r0, r3
   22740:	4b2e      	ldr	r3, [pc, #184]	; (227fc <nm_spi_init+0x120>)
   22742:	4798      	blx	r3
   22744:	4b2f      	ldr	r3, [pc, #188]	; (22804 <nm_spi_init+0x128>)
   22746:	0018      	movs	r0, r3
   22748:	4b2c      	ldr	r3, [pc, #176]	; (227fc <nm_spi_init+0x120>)
   2274a:	4798      	blx	r3
			return 0;
   2274c:	2300      	movs	r3, #0
   2274e:	e047      	b.n	227e0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   22750:	4b25      	ldr	r3, [pc, #148]	; (227e8 <nm_spi_init+0x10c>)
   22752:	781b      	ldrb	r3, [r3, #0]
   22754:	2b00      	cmp	r3, #0
   22756:	d126      	bne.n	227a6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   22758:	683b      	ldr	r3, [r7, #0]
   2275a:	220c      	movs	r2, #12
   2275c:	4393      	bics	r3, r2
   2275e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   22760:	683b      	ldr	r3, [r7, #0]
   22762:	2270      	movs	r2, #112	; 0x70
   22764:	4393      	bics	r3, r2
   22766:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   22768:	683b      	ldr	r3, [r7, #0]
   2276a:	2250      	movs	r2, #80	; 0x50
   2276c:	4313      	orrs	r3, r2
   2276e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   22770:	683b      	ldr	r3, [r7, #0]
   22772:	4a1e      	ldr	r2, [pc, #120]	; (227ec <nm_spi_init+0x110>)
   22774:	0019      	movs	r1, r3
   22776:	0010      	movs	r0, r2
   22778:	4b25      	ldr	r3, [pc, #148]	; (22810 <nm_spi_init+0x134>)
   2277a:	4798      	blx	r3
   2277c:	1e03      	subs	r3, r0, #0
   2277e:	d10f      	bne.n	227a0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   22780:	4a24      	ldr	r2, [pc, #144]	; (22814 <nm_spi_init+0x138>)
   22782:	491c      	ldr	r1, [pc, #112]	; (227f4 <nm_spi_init+0x118>)
   22784:	4b1c      	ldr	r3, [pc, #112]	; (227f8 <nm_spi_init+0x11c>)
   22786:	0018      	movs	r0, r3
   22788:	4b1c      	ldr	r3, [pc, #112]	; (227fc <nm_spi_init+0x120>)
   2278a:	4798      	blx	r3
   2278c:	4b22      	ldr	r3, [pc, #136]	; (22818 <nm_spi_init+0x13c>)
   2278e:	0018      	movs	r0, r3
   22790:	4b1a      	ldr	r3, [pc, #104]	; (227fc <nm_spi_init+0x120>)
   22792:	4798      	blx	r3
   22794:	4b1b      	ldr	r3, [pc, #108]	; (22804 <nm_spi_init+0x128>)
   22796:	0018      	movs	r0, r3
   22798:	4b18      	ldr	r3, [pc, #96]	; (227fc <nm_spi_init+0x120>)
   2279a:	4798      	blx	r3
			return 0;
   2279c:	2300      	movs	r3, #0
   2279e:	e01f      	b.n	227e0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   227a0:	4b11      	ldr	r3, [pc, #68]	; (227e8 <nm_spi_init+0x10c>)
   227a2:	2201      	movs	r2, #1
   227a4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   227a6:	1d3a      	adds	r2, r7, #4
   227a8:	2380      	movs	r3, #128	; 0x80
   227aa:	015b      	lsls	r3, r3, #5
   227ac:	0011      	movs	r1, r2
   227ae:	0018      	movs	r0, r3
   227b0:	4b0f      	ldr	r3, [pc, #60]	; (227f0 <nm_spi_init+0x114>)
   227b2:	4798      	blx	r3
   227b4:	1e03      	subs	r3, r0, #0
   227b6:	d110      	bne.n	227da <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   227b8:	4a18      	ldr	r2, [pc, #96]	; (2281c <nm_spi_init+0x140>)
   227ba:	490e      	ldr	r1, [pc, #56]	; (227f4 <nm_spi_init+0x118>)
   227bc:	4b0e      	ldr	r3, [pc, #56]	; (227f8 <nm_spi_init+0x11c>)
   227be:	0018      	movs	r0, r3
   227c0:	4b0e      	ldr	r3, [pc, #56]	; (227fc <nm_spi_init+0x120>)
   227c2:	4798      	blx	r3
   227c4:	4b16      	ldr	r3, [pc, #88]	; (22820 <nm_spi_init+0x144>)
   227c6:	0018      	movs	r0, r3
   227c8:	4b0c      	ldr	r3, [pc, #48]	; (227fc <nm_spi_init+0x120>)
   227ca:	4798      	blx	r3
   227cc:	4b0d      	ldr	r3, [pc, #52]	; (22804 <nm_spi_init+0x128>)
   227ce:	0018      	movs	r0, r3
   227d0:	4b0a      	ldr	r3, [pc, #40]	; (227fc <nm_spi_init+0x120>)
   227d2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   227d4:	2306      	movs	r3, #6
   227d6:	425b      	negs	r3, r3
   227d8:	e002      	b.n	227e0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   227da:	4b12      	ldr	r3, [pc, #72]	; (22824 <nm_spi_init+0x148>)
   227dc:	4798      	blx	r3


	return M2M_SUCCESS;
   227de:	2300      	movs	r3, #0
}
   227e0:	0018      	movs	r0, r3
   227e2:	46bd      	mov	sp, r7
   227e4:	b002      	add	sp, #8
   227e6:	bd80      	pop	{r7, pc}
   227e8:	20003d08 	.word	0x20003d08
   227ec:	0000e824 	.word	0x0000e824
   227f0:	000223d5 	.word	0x000223d5
   227f4:	000368a0 	.word	0x000368a0
   227f8:	0003622c 	.word	0x0003622c
   227fc:	0001bafd 	.word	0x0001bafd
   22800:	000366c8 	.word	0x000366c8
   22804:	0003626c 	.word	0x0003626c
   22808:	000004c3 	.word	0x000004c3
   2280c:	00036718 	.word	0x00036718
   22810:	000220dd 	.word	0x000220dd
   22814:	000004cd 	.word	0x000004cd
   22818:	00036748 	.word	0x00036748
   2281c:	000004d7 	.word	0x000004d7
   22820:	0003677c 	.word	0x0003677c
   22824:	00022669 	.word	0x00022669

00022828 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   22828:	b580      	push	{r7, lr}
   2282a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2282c:	4b03      	ldr	r3, [pc, #12]	; (2283c <nm_spi_deinit+0x14>)
   2282e:	2200      	movs	r2, #0
   22830:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   22832:	2300      	movs	r3, #0
}
   22834:	0018      	movs	r0, r3
   22836:	46bd      	mov	sp, r7
   22838:	bd80      	pop	{r7, pc}
   2283a:	46c0      	nop			; (mov r8, r8)
   2283c:	20003d08 	.word	0x20003d08

00022840 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   22840:	b580      	push	{r7, lr}
   22842:	b084      	sub	sp, #16
   22844:	af00      	add	r7, sp, #0
   22846:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   22848:	230c      	movs	r3, #12
   2284a:	18fa      	adds	r2, r7, r3
   2284c:	687b      	ldr	r3, [r7, #4]
   2284e:	0011      	movs	r1, r2
   22850:	0018      	movs	r0, r3
   22852:	4b03      	ldr	r3, [pc, #12]	; (22860 <nm_spi_read_reg+0x20>)
   22854:	4798      	blx	r3

	return u32Val;
   22856:	68fb      	ldr	r3, [r7, #12]
}
   22858:	0018      	movs	r0, r3
   2285a:	46bd      	mov	sp, r7
   2285c:	b004      	add	sp, #16
   2285e:	bd80      	pop	{r7, pc}
   22860:	000223d5 	.word	0x000223d5

00022864 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22864:	b590      	push	{r4, r7, lr}
   22866:	b085      	sub	sp, #20
   22868:	af00      	add	r7, sp, #0
   2286a:	6078      	str	r0, [r7, #4]
   2286c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2286e:	230f      	movs	r3, #15
   22870:	18fc      	adds	r4, r7, r3
   22872:	683a      	ldr	r2, [r7, #0]
   22874:	687b      	ldr	r3, [r7, #4]
   22876:	0011      	movs	r1, r2
   22878:	0018      	movs	r0, r3
   2287a:	4b0d      	ldr	r3, [pc, #52]	; (228b0 <nm_spi_read_reg_with_ret+0x4c>)
   2287c:	4798      	blx	r3
   2287e:	0003      	movs	r3, r0
   22880:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22882:	230f      	movs	r3, #15
   22884:	18fb      	adds	r3, r7, r3
   22886:	781b      	ldrb	r3, [r3, #0]
   22888:	b25b      	sxtb	r3, r3
   2288a:	2b01      	cmp	r3, #1
   2288c:	d104      	bne.n	22898 <nm_spi_read_reg_with_ret+0x34>
   2288e:	230f      	movs	r3, #15
   22890:	18fb      	adds	r3, r7, r3
   22892:	2200      	movs	r2, #0
   22894:	701a      	strb	r2, [r3, #0]
   22896:	e003      	b.n	228a0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   22898:	230f      	movs	r3, #15
   2289a:	18fb      	adds	r3, r7, r3
   2289c:	22fa      	movs	r2, #250	; 0xfa
   2289e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   228a0:	230f      	movs	r3, #15
   228a2:	18fb      	adds	r3, r7, r3
   228a4:	781b      	ldrb	r3, [r3, #0]
   228a6:	b25b      	sxtb	r3, r3
}
   228a8:	0018      	movs	r0, r3
   228aa:	46bd      	mov	sp, r7
   228ac:	b005      	add	sp, #20
   228ae:	bd90      	pop	{r4, r7, pc}
   228b0:	000223d5 	.word	0x000223d5

000228b4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   228b4:	b590      	push	{r4, r7, lr}
   228b6:	b085      	sub	sp, #20
   228b8:	af00      	add	r7, sp, #0
   228ba:	6078      	str	r0, [r7, #4]
   228bc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   228be:	230f      	movs	r3, #15
   228c0:	18fc      	adds	r4, r7, r3
   228c2:	683a      	ldr	r2, [r7, #0]
   228c4:	687b      	ldr	r3, [r7, #4]
   228c6:	0011      	movs	r1, r2
   228c8:	0018      	movs	r0, r3
   228ca:	4b0d      	ldr	r3, [pc, #52]	; (22900 <nm_spi_write_reg+0x4c>)
   228cc:	4798      	blx	r3
   228ce:	0003      	movs	r3, r0
   228d0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   228d2:	230f      	movs	r3, #15
   228d4:	18fb      	adds	r3, r7, r3
   228d6:	781b      	ldrb	r3, [r3, #0]
   228d8:	b25b      	sxtb	r3, r3
   228da:	2b01      	cmp	r3, #1
   228dc:	d104      	bne.n	228e8 <nm_spi_write_reg+0x34>
   228de:	230f      	movs	r3, #15
   228e0:	18fb      	adds	r3, r7, r3
   228e2:	2200      	movs	r2, #0
   228e4:	701a      	strb	r2, [r3, #0]
   228e6:	e003      	b.n	228f0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   228e8:	230f      	movs	r3, #15
   228ea:	18fb      	adds	r3, r7, r3
   228ec:	22fa      	movs	r2, #250	; 0xfa
   228ee:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   228f0:	230f      	movs	r3, #15
   228f2:	18fb      	adds	r3, r7, r3
   228f4:	781b      	ldrb	r3, [r3, #0]
   228f6:	b25b      	sxtb	r3, r3
}
   228f8:	0018      	movs	r0, r3
   228fa:	46bd      	mov	sp, r7
   228fc:	b005      	add	sp, #20
   228fe:	bd90      	pop	{r4, r7, pc}
   22900:	000220dd 	.word	0x000220dd

00022904 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22904:	b590      	push	{r4, r7, lr}
   22906:	b087      	sub	sp, #28
   22908:	af00      	add	r7, sp, #0
   2290a:	60f8      	str	r0, [r7, #12]
   2290c:	60b9      	str	r1, [r7, #8]
   2290e:	1dbb      	adds	r3, r7, #6
   22910:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   22912:	2317      	movs	r3, #23
   22914:	18fc      	adds	r4, r7, r3
   22916:	1dbb      	adds	r3, r7, #6
   22918:	881a      	ldrh	r2, [r3, #0]
   2291a:	68b9      	ldr	r1, [r7, #8]
   2291c:	68fb      	ldr	r3, [r7, #12]
   2291e:	0018      	movs	r0, r3
   22920:	4b0d      	ldr	r3, [pc, #52]	; (22958 <nm_spi_read_block+0x54>)
   22922:	4798      	blx	r3
   22924:	0003      	movs	r3, r0
   22926:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22928:	2317      	movs	r3, #23
   2292a:	18fb      	adds	r3, r7, r3
   2292c:	781b      	ldrb	r3, [r3, #0]
   2292e:	b25b      	sxtb	r3, r3
   22930:	2b01      	cmp	r3, #1
   22932:	d104      	bne.n	2293e <nm_spi_read_block+0x3a>
   22934:	2317      	movs	r3, #23
   22936:	18fb      	adds	r3, r7, r3
   22938:	2200      	movs	r2, #0
   2293a:	701a      	strb	r2, [r3, #0]
   2293c:	e003      	b.n	22946 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2293e:	2317      	movs	r3, #23
   22940:	18fb      	adds	r3, r7, r3
   22942:	22fa      	movs	r2, #250	; 0xfa
   22944:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   22946:	2317      	movs	r3, #23
   22948:	18fb      	adds	r3, r7, r3
   2294a:	781b      	ldrb	r3, [r3, #0]
   2294c:	b25b      	sxtb	r3, r3
}
   2294e:	0018      	movs	r0, r3
   22950:	46bd      	mov	sp, r7
   22952:	b007      	add	sp, #28
   22954:	bd90      	pop	{r4, r7, pc}
   22956:	46c0      	nop			; (mov r8, r8)
   22958:	0002254d 	.word	0x0002254d

0002295c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2295c:	b590      	push	{r4, r7, lr}
   2295e:	b087      	sub	sp, #28
   22960:	af00      	add	r7, sp, #0
   22962:	60f8      	str	r0, [r7, #12]
   22964:	60b9      	str	r1, [r7, #8]
   22966:	1dbb      	adds	r3, r7, #6
   22968:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2296a:	2317      	movs	r3, #23
   2296c:	18fc      	adds	r4, r7, r3
   2296e:	1dbb      	adds	r3, r7, #6
   22970:	881a      	ldrh	r2, [r3, #0]
   22972:	68b9      	ldr	r1, [r7, #8]
   22974:	68fb      	ldr	r3, [r7, #12]
   22976:	0018      	movs	r0, r3
   22978:	4b0d      	ldr	r3, [pc, #52]	; (229b0 <nm_spi_write_block+0x54>)
   2297a:	4798      	blx	r3
   2297c:	0003      	movs	r3, r0
   2297e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22980:	2317      	movs	r3, #23
   22982:	18fb      	adds	r3, r7, r3
   22984:	781b      	ldrb	r3, [r3, #0]
   22986:	b25b      	sxtb	r3, r3
   22988:	2b01      	cmp	r3, #1
   2298a:	d104      	bne.n	22996 <nm_spi_write_block+0x3a>
   2298c:	2317      	movs	r3, #23
   2298e:	18fb      	adds	r3, r7, r3
   22990:	2200      	movs	r2, #0
   22992:	701a      	strb	r2, [r3, #0]
   22994:	e003      	b.n	2299e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   22996:	2317      	movs	r3, #23
   22998:	18fb      	adds	r3, r7, r3
   2299a:	22fa      	movs	r2, #250	; 0xfa
   2299c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2299e:	2317      	movs	r3, #23
   229a0:	18fb      	adds	r3, r7, r3
   229a2:	781b      	ldrb	r3, [r3, #0]
   229a4:	b25b      	sxtb	r3, r3
}
   229a6:	0018      	movs	r0, r3
   229a8:	46bd      	mov	sp, r7
   229aa:	b007      	add	sp, #28
   229ac:	bd90      	pop	{r4, r7, pc}
   229ae:	46c0      	nop			; (mov r8, r8)
   229b0:	00022229 	.word	0x00022229

000229b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   229b4:	b590      	push	{r4, r7, lr}
   229b6:	b089      	sub	sp, #36	; 0x24
   229b8:	af00      	add	r7, sp, #0
   229ba:	60b9      	str	r1, [r7, #8]
   229bc:	0011      	movs	r1, r2
   229be:	607b      	str	r3, [r7, #4]
   229c0:	230f      	movs	r3, #15
   229c2:	18fb      	adds	r3, r7, r3
   229c4:	1c02      	adds	r2, r0, #0
   229c6:	701a      	strb	r2, [r3, #0]
   229c8:	230e      	movs	r3, #14
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	1c0a      	adds	r2, r1, #0
   229ce:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   229d0:	2330      	movs	r3, #48	; 0x30
   229d2:	18fb      	adds	r3, r7, r3
   229d4:	881b      	ldrh	r3, [r3, #0]
   229d6:	2b00      	cmp	r3, #0
   229d8:	d100      	bne.n	229dc <Socket_ReadSocketData+0x28>
   229da:	e0d7      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
   229dc:	230f      	movs	r3, #15
   229de:	18fb      	adds	r3, r7, r3
   229e0:	2200      	movs	r2, #0
   229e2:	569a      	ldrsb	r2, [r3, r2]
   229e4:	4b6b      	ldr	r3, [pc, #428]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   229e6:	0112      	lsls	r2, r2, #4
   229e8:	58d3      	ldr	r3, [r2, r3]
   229ea:	2b00      	cmp	r3, #0
   229ec:	d100      	bne.n	229f0 <Socket_ReadSocketData+0x3c>
   229ee:	e0cd      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
   229f0:	230f      	movs	r3, #15
   229f2:	18fb      	adds	r3, r7, r3
   229f4:	781b      	ldrb	r3, [r3, #0]
   229f6:	b25b      	sxtb	r3, r3
   229f8:	4a66      	ldr	r2, [pc, #408]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   229fa:	011b      	lsls	r3, r3, #4
   229fc:	18d3      	adds	r3, r2, r3
   229fe:	3304      	adds	r3, #4
   22a00:	881b      	ldrh	r3, [r3, #0]
   22a02:	b29b      	uxth	r3, r3
   22a04:	2b00      	cmp	r3, #0
   22a06:	d100      	bne.n	22a0a <Socket_ReadSocketData+0x56>
   22a08:	e0c0      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
   22a0a:	230f      	movs	r3, #15
   22a0c:	18fb      	adds	r3, r7, r3
   22a0e:	781b      	ldrb	r3, [r3, #0]
   22a10:	b25b      	sxtb	r3, r3
   22a12:	4a60      	ldr	r2, [pc, #384]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22a14:	011b      	lsls	r3, r3, #4
   22a16:	18d3      	adds	r3, r2, r3
   22a18:	330a      	adds	r3, #10
   22a1a:	781b      	ldrb	r3, [r3, #0]
   22a1c:	b2db      	uxtb	r3, r3
   22a1e:	2b01      	cmp	r3, #1
   22a20:	d000      	beq.n	22a24 <Socket_ReadSocketData+0x70>
   22a22:	e0b3      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   22a24:	687b      	ldr	r3, [r7, #4]
   22a26:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   22a28:	68bb      	ldr	r3, [r7, #8]
   22a2a:	2230      	movs	r2, #48	; 0x30
   22a2c:	18ba      	adds	r2, r7, r2
   22a2e:	8812      	ldrh	r2, [r2, #0]
   22a30:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   22a32:	2319      	movs	r3, #25
   22a34:	18fb      	adds	r3, r7, r3
   22a36:	2201      	movs	r2, #1
   22a38:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   22a3a:	231a      	movs	r3, #26
   22a3c:	18fb      	adds	r3, r7, r3
   22a3e:	2230      	movs	r2, #48	; 0x30
   22a40:	18ba      	adds	r2, r7, r2
   22a42:	8812      	ldrh	r2, [r2, #0]
   22a44:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   22a46:	230f      	movs	r3, #15
   22a48:	18fb      	adds	r3, r7, r3
   22a4a:	781b      	ldrb	r3, [r3, #0]
   22a4c:	b25b      	sxtb	r3, r3
   22a4e:	4a51      	ldr	r2, [pc, #324]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22a50:	011b      	lsls	r3, r3, #4
   22a52:	18d3      	adds	r3, r2, r3
   22a54:	3304      	adds	r3, #4
   22a56:	881b      	ldrh	r3, [r3, #0]
   22a58:	b29b      	uxth	r3, r3
   22a5a:	221a      	movs	r2, #26
   22a5c:	18ba      	adds	r2, r7, r2
   22a5e:	8812      	ldrh	r2, [r2, #0]
   22a60:	1ad3      	subs	r3, r2, r3
   22a62:	b29a      	uxth	r2, r3
   22a64:	2316      	movs	r3, #22
   22a66:	18fb      	adds	r3, r7, r3
   22a68:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   22a6a:	2316      	movs	r3, #22
   22a6c:	18fb      	adds	r3, r7, r3
   22a6e:	2200      	movs	r2, #0
   22a70:	5e9b      	ldrsh	r3, [r3, r2]
   22a72:	2b00      	cmp	r3, #0
   22a74:	dd0f      	ble.n	22a96 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   22a76:	2319      	movs	r3, #25
   22a78:	18fb      	adds	r3, r7, r3
   22a7a:	2200      	movs	r2, #0
   22a7c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   22a7e:	230f      	movs	r3, #15
   22a80:	18fb      	adds	r3, r7, r3
   22a82:	2200      	movs	r2, #0
   22a84:	569a      	ldrsb	r2, [r3, r2]
   22a86:	231a      	movs	r3, #26
   22a88:	18fb      	adds	r3, r7, r3
   22a8a:	4942      	ldr	r1, [pc, #264]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22a8c:	0112      	lsls	r2, r2, #4
   22a8e:	188a      	adds	r2, r1, r2
   22a90:	3204      	adds	r2, #4
   22a92:	8812      	ldrh	r2, [r2, #0]
   22a94:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   22a96:	230f      	movs	r3, #15
   22a98:	18fb      	adds	r3, r7, r3
   22a9a:	2200      	movs	r2, #0
   22a9c:	569a      	ldrsb	r2, [r3, r2]
   22a9e:	4b3d      	ldr	r3, [pc, #244]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22aa0:	0112      	lsls	r2, r2, #4
   22aa2:	58d1      	ldr	r1, [r2, r3]
   22aa4:	2319      	movs	r3, #25
   22aa6:	18fb      	adds	r3, r7, r3
   22aa8:	781c      	ldrb	r4, [r3, #0]
   22aaa:	231a      	movs	r3, #26
   22aac:	18fb      	adds	r3, r7, r3
   22aae:	881a      	ldrh	r2, [r3, #0]
   22ab0:	69f8      	ldr	r0, [r7, #28]
   22ab2:	0023      	movs	r3, r4
   22ab4:	4c38      	ldr	r4, [pc, #224]	; (22b98 <Socket_ReadSocketData+0x1e4>)
   22ab6:	47a0      	blx	r4
   22ab8:	1e03      	subs	r3, r0, #0
   22aba:	d14f      	bne.n	22b5c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   22abc:	230f      	movs	r3, #15
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	2200      	movs	r2, #0
   22ac2:	569a      	ldrsb	r2, [r3, r2]
   22ac4:	4b33      	ldr	r3, [pc, #204]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22ac6:	0112      	lsls	r2, r2, #4
   22ac8:	58d2      	ldr	r2, [r2, r3]
   22aca:	68bb      	ldr	r3, [r7, #8]
   22acc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   22ace:	231a      	movs	r3, #26
   22ad0:	18fb      	adds	r3, r7, r3
   22ad2:	2200      	movs	r2, #0
   22ad4:	5e9a      	ldrsh	r2, [r3, r2]
   22ad6:	68bb      	ldr	r3, [r7, #8]
   22ad8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   22ada:	68bb      	ldr	r3, [r7, #8]
   22adc:	88da      	ldrh	r2, [r3, #6]
   22ade:	231a      	movs	r3, #26
   22ae0:	18fb      	adds	r3, r7, r3
   22ae2:	881b      	ldrh	r3, [r3, #0]
   22ae4:	1ad3      	subs	r3, r2, r3
   22ae6:	b29a      	uxth	r2, r3
   22ae8:	68bb      	ldr	r3, [r7, #8]
   22aea:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   22aec:	4b2b      	ldr	r3, [pc, #172]	; (22b9c <Socket_ReadSocketData+0x1e8>)
   22aee:	681b      	ldr	r3, [r3, #0]
   22af0:	2b00      	cmp	r3, #0
   22af2:	d00b      	beq.n	22b0c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   22af4:	4b29      	ldr	r3, [pc, #164]	; (22b9c <Socket_ReadSocketData+0x1e8>)
   22af6:	681b      	ldr	r3, [r3, #0]
   22af8:	68bc      	ldr	r4, [r7, #8]
   22afa:	220e      	movs	r2, #14
   22afc:	18ba      	adds	r2, r7, r2
   22afe:	7811      	ldrb	r1, [r2, #0]
   22b00:	220f      	movs	r2, #15
   22b02:	18ba      	adds	r2, r7, r2
   22b04:	2000      	movs	r0, #0
   22b06:	5610      	ldrsb	r0, [r2, r0]
   22b08:	0022      	movs	r2, r4
   22b0a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   22b0c:	2330      	movs	r3, #48	; 0x30
   22b0e:	18f9      	adds	r1, r7, r3
   22b10:	2330      	movs	r3, #48	; 0x30
   22b12:	18fa      	adds	r2, r7, r3
   22b14:	231a      	movs	r3, #26
   22b16:	18fb      	adds	r3, r7, r3
   22b18:	8812      	ldrh	r2, [r2, #0]
   22b1a:	881b      	ldrh	r3, [r3, #0]
   22b1c:	1ad3      	subs	r3, r2, r3
   22b1e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   22b20:	231a      	movs	r3, #26
   22b22:	18fb      	adds	r3, r7, r3
   22b24:	881b      	ldrh	r3, [r3, #0]
   22b26:	69fa      	ldr	r2, [r7, #28]
   22b28:	18d3      	adds	r3, r2, r3
   22b2a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   22b2c:	230f      	movs	r3, #15
   22b2e:	18fb      	adds	r3, r7, r3
   22b30:	781b      	ldrb	r3, [r3, #0]
   22b32:	b25b      	sxtb	r3, r3
   22b34:	4a17      	ldr	r2, [pc, #92]	; (22b94 <Socket_ReadSocketData+0x1e0>)
   22b36:	011b      	lsls	r3, r3, #4
   22b38:	18d3      	adds	r3, r2, r3
   22b3a:	330a      	adds	r3, #10
   22b3c:	781b      	ldrb	r3, [r3, #0]
   22b3e:	b2db      	uxtb	r3, r3
   22b40:	2b00      	cmp	r3, #0
   22b42:	d11c      	bne.n	22b7e <Socket_ReadSocketData+0x1ca>
   22b44:	2330      	movs	r3, #48	; 0x30
   22b46:	18fb      	adds	r3, r7, r3
   22b48:	881b      	ldrh	r3, [r3, #0]
   22b4a:	2b00      	cmp	r3, #0
   22b4c:	d017      	beq.n	22b7e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   22b4e:	2301      	movs	r3, #1
   22b50:	2200      	movs	r2, #0
   22b52:	2100      	movs	r1, #0
   22b54:	2000      	movs	r0, #0
   22b56:	4c10      	ldr	r4, [pc, #64]	; (22b98 <Socket_ReadSocketData+0x1e4>)
   22b58:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   22b5a:	e017      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   22b5c:	4b10      	ldr	r3, [pc, #64]	; (22ba0 <Socket_ReadSocketData+0x1ec>)
   22b5e:	0018      	movs	r0, r3
   22b60:	4b10      	ldr	r3, [pc, #64]	; (22ba4 <Socket_ReadSocketData+0x1f0>)
   22b62:	4798      	blx	r3
   22b64:	2330      	movs	r3, #48	; 0x30
   22b66:	18fb      	adds	r3, r7, r3
   22b68:	881a      	ldrh	r2, [r3, #0]
   22b6a:	4b0f      	ldr	r3, [pc, #60]	; (22ba8 <Socket_ReadSocketData+0x1f4>)
   22b6c:	0011      	movs	r1, r2
   22b6e:	0018      	movs	r0, r3
   22b70:	4b0c      	ldr	r3, [pc, #48]	; (22ba4 <Socket_ReadSocketData+0x1f0>)
   22b72:	4798      	blx	r3
   22b74:	4b0d      	ldr	r3, [pc, #52]	; (22bac <Socket_ReadSocketData+0x1f8>)
   22b76:	0018      	movs	r0, r3
   22b78:	4b0a      	ldr	r3, [pc, #40]	; (22ba4 <Socket_ReadSocketData+0x1f0>)
   22b7a:	4798      	blx	r3
				break;
   22b7c:	e006      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   22b7e:	2330      	movs	r3, #48	; 0x30
   22b80:	18fb      	adds	r3, r7, r3
   22b82:	881b      	ldrh	r3, [r3, #0]
   22b84:	2b00      	cmp	r3, #0
   22b86:	d000      	beq.n	22b8a <Socket_ReadSocketData+0x1d6>
   22b88:	e753      	b.n	22a32 <Socket_ReadSocketData+0x7e>
	}
}
   22b8a:	e7ff      	b.n	22b8c <Socket_ReadSocketData+0x1d8>
   22b8c:	46c0      	nop			; (mov r8, r8)
   22b8e:	46bd      	mov	sp, r7
   22b90:	b009      	add	sp, #36	; 0x24
   22b92:	bd90      	pop	{r4, r7, pc}
   22b94:	20005474 	.word	0x20005474
   22b98:	0001f3ad 	.word	0x0001f3ad
   22b9c:	20005524 	.word	0x20005524
   22ba0:	000368ac 	.word	0x000368ac
   22ba4:	0001bafd 	.word	0x0001bafd
   22ba8:	000368b8 	.word	0x000368b8
   22bac:	000368cc 	.word	0x000368cc

00022bb0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   22bb0:	b590      	push	{r4, r7, lr}
   22bb2:	b0bb      	sub	sp, #236	; 0xec
   22bb4:	af02      	add	r7, sp, #8
   22bb6:	603a      	str	r2, [r7, #0]
   22bb8:	1dfb      	adds	r3, r7, #7
   22bba:	1c02      	adds	r2, r0, #0
   22bbc:	701a      	strb	r2, [r3, #0]
   22bbe:	1d3b      	adds	r3, r7, #4
   22bc0:	1c0a      	adds	r2, r1, #0
   22bc2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   22bc4:	1dfb      	adds	r3, r7, #7
   22bc6:	781b      	ldrb	r3, [r3, #0]
   22bc8:	2b41      	cmp	r3, #65	; 0x41
   22bca:	d003      	beq.n	22bd4 <m2m_ip_cb+0x24>
   22bcc:	1dfb      	adds	r3, r7, #7
   22bce:	781b      	ldrb	r3, [r3, #0]
   22bd0:	2b54      	cmp	r3, #84	; 0x54
   22bd2:	d120      	bne.n	22c16 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   22bd4:	23cc      	movs	r3, #204	; 0xcc
   22bd6:	18f9      	adds	r1, r7, r3
   22bd8:	6838      	ldr	r0, [r7, #0]
   22bda:	2300      	movs	r3, #0
   22bdc:	2204      	movs	r2, #4
   22bde:	4c98      	ldr	r4, [pc, #608]	; (22e40 <m2m_ip_cb+0x290>)
   22be0:	47a0      	blx	r4
   22be2:	1e03      	subs	r3, r0, #0
   22be4:	d000      	beq.n	22be8 <m2m_ip_cb+0x38>
   22be6:	e275      	b.n	230d4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   22be8:	23cc      	movs	r3, #204	; 0xcc
   22bea:	18fb      	adds	r3, r7, r3
   22bec:	2201      	movs	r2, #1
   22bee:	569a      	ldrsb	r2, [r3, r2]
   22bf0:	23c8      	movs	r3, #200	; 0xc8
   22bf2:	18fb      	adds	r3, r7, r3
   22bf4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   22bf6:	4b93      	ldr	r3, [pc, #588]	; (22e44 <m2m_ip_cb+0x294>)
   22bf8:	681b      	ldr	r3, [r3, #0]
   22bfa:	2b00      	cmp	r3, #0
   22bfc:	d100      	bne.n	22c00 <m2m_ip_cb+0x50>
   22bfe:	e269      	b.n	230d4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   22c00:	4b90      	ldr	r3, [pc, #576]	; (22e44 <m2m_ip_cb+0x294>)
   22c02:	681b      	ldr	r3, [r3, #0]
   22c04:	22cc      	movs	r2, #204	; 0xcc
   22c06:	18ba      	adds	r2, r7, r2
   22c08:	2000      	movs	r0, #0
   22c0a:	5610      	ldrsb	r0, [r2, r0]
   22c0c:	22c8      	movs	r2, #200	; 0xc8
   22c0e:	18ba      	adds	r2, r7, r2
   22c10:	2101      	movs	r1, #1
   22c12:	4798      	blx	r3
	{
   22c14:	e25e      	b.n	230d4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   22c16:	1dfb      	adds	r3, r7, #7
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	2b42      	cmp	r3, #66	; 0x42
   22c1c:	d120      	bne.n	22c60 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   22c1e:	23c4      	movs	r3, #196	; 0xc4
   22c20:	18f9      	adds	r1, r7, r3
   22c22:	6838      	ldr	r0, [r7, #0]
   22c24:	2300      	movs	r3, #0
   22c26:	2204      	movs	r2, #4
   22c28:	4c85      	ldr	r4, [pc, #532]	; (22e40 <m2m_ip_cb+0x290>)
   22c2a:	47a0      	blx	r4
   22c2c:	1e03      	subs	r3, r0, #0
   22c2e:	d000      	beq.n	22c32 <m2m_ip_cb+0x82>
   22c30:	e257      	b.n	230e2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   22c32:	23c4      	movs	r3, #196	; 0xc4
   22c34:	18fb      	adds	r3, r7, r3
   22c36:	2201      	movs	r2, #1
   22c38:	569a      	ldrsb	r2, [r3, r2]
   22c3a:	23c0      	movs	r3, #192	; 0xc0
   22c3c:	18fb      	adds	r3, r7, r3
   22c3e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   22c40:	4b80      	ldr	r3, [pc, #512]	; (22e44 <m2m_ip_cb+0x294>)
   22c42:	681b      	ldr	r3, [r3, #0]
   22c44:	2b00      	cmp	r3, #0
   22c46:	d100      	bne.n	22c4a <m2m_ip_cb+0x9a>
   22c48:	e24b      	b.n	230e2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   22c4a:	4b7e      	ldr	r3, [pc, #504]	; (22e44 <m2m_ip_cb+0x294>)
   22c4c:	681b      	ldr	r3, [r3, #0]
   22c4e:	22c4      	movs	r2, #196	; 0xc4
   22c50:	18ba      	adds	r2, r7, r2
   22c52:	2000      	movs	r0, #0
   22c54:	5610      	ldrsb	r0, [r2, r0]
   22c56:	22c0      	movs	r2, #192	; 0xc0
   22c58:	18ba      	adds	r2, r7, r2
   22c5a:	2102      	movs	r1, #2
   22c5c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   22c5e:	e240      	b.n	230e2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   22c60:	1dfb      	adds	r3, r7, #7
   22c62:	781b      	ldrb	r3, [r3, #0]
   22c64:	2b43      	cmp	r3, #67	; 0x43
   22c66:	d000      	beq.n	22c6a <m2m_ip_cb+0xba>
   22c68:	e086      	b.n	22d78 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   22c6a:	23b4      	movs	r3, #180	; 0xb4
   22c6c:	18f9      	adds	r1, r7, r3
   22c6e:	6838      	ldr	r0, [r7, #0]
   22c70:	2300      	movs	r3, #0
   22c72:	220c      	movs	r2, #12
   22c74:	4c72      	ldr	r4, [pc, #456]	; (22e40 <m2m_ip_cb+0x290>)
   22c76:	47a0      	blx	r4
   22c78:	1e03      	subs	r3, r0, #0
   22c7a:	d000      	beq.n	22c7e <m2m_ip_cb+0xce>
   22c7c:	e231      	b.n	230e2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   22c7e:	23b4      	movs	r3, #180	; 0xb4
   22c80:	18fb      	adds	r3, r7, r3
   22c82:	7a5b      	ldrb	r3, [r3, #9]
   22c84:	b25b      	sxtb	r3, r3
   22c86:	2b00      	cmp	r3, #0
   22c88:	db4f      	blt.n	22d2a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   22c8a:	23b4      	movs	r3, #180	; 0xb4
   22c8c:	18fb      	adds	r3, r7, r3
   22c8e:	7a5b      	ldrb	r3, [r3, #9]
   22c90:	b25b      	sxtb	r3, r3
   22c92:	0018      	movs	r0, r3
   22c94:	23b4      	movs	r3, #180	; 0xb4
   22c96:	18fb      	adds	r3, r7, r3
   22c98:	7a1b      	ldrb	r3, [r3, #8]
   22c9a:	b25b      	sxtb	r3, r3
   22c9c:	4a6a      	ldr	r2, [pc, #424]	; (22e48 <m2m_ip_cb+0x298>)
   22c9e:	011b      	lsls	r3, r3, #4
   22ca0:	18d3      	adds	r3, r2, r3
   22ca2:	330b      	adds	r3, #11
   22ca4:	781b      	ldrb	r3, [r3, #0]
   22ca6:	b2d9      	uxtb	r1, r3
   22ca8:	4a67      	ldr	r2, [pc, #412]	; (22e48 <m2m_ip_cb+0x298>)
   22caa:	0103      	lsls	r3, r0, #4
   22cac:	18d3      	adds	r3, r2, r3
   22cae:	330b      	adds	r3, #11
   22cb0:	1c0a      	adds	r2, r1, #0
   22cb2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   22cb4:	23b4      	movs	r3, #180	; 0xb4
   22cb6:	18fb      	adds	r3, r7, r3
   22cb8:	7a5b      	ldrb	r3, [r3, #9]
   22cba:	b25b      	sxtb	r3, r3
   22cbc:	4a62      	ldr	r2, [pc, #392]	; (22e48 <m2m_ip_cb+0x298>)
   22cbe:	011b      	lsls	r3, r3, #4
   22cc0:	18d3      	adds	r3, r2, r3
   22cc2:	330a      	adds	r3, #10
   22cc4:	2201      	movs	r2, #1
   22cc6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   22cc8:	23b4      	movs	r3, #180	; 0xb4
   22cca:	18fb      	adds	r3, r7, r3
   22ccc:	7a5b      	ldrb	r3, [r3, #9]
   22cce:	b25b      	sxtb	r3, r3
   22cd0:	0018      	movs	r0, r3
   22cd2:	23b4      	movs	r3, #180	; 0xb4
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	895b      	ldrh	r3, [r3, #10]
   22cd8:	3b08      	subs	r3, #8
   22cda:	b299      	uxth	r1, r3
   22cdc:	4a5a      	ldr	r2, [pc, #360]	; (22e48 <m2m_ip_cb+0x298>)
   22cde:	0103      	lsls	r3, r0, #4
   22ce0:	18d3      	adds	r3, r2, r3
   22ce2:	3308      	adds	r3, #8
   22ce4:	1c0a      	adds	r2, r1, #0
   22ce6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   22ce8:	4b58      	ldr	r3, [pc, #352]	; (22e4c <m2m_ip_cb+0x29c>)
   22cea:	881b      	ldrh	r3, [r3, #0]
   22cec:	b29b      	uxth	r3, r3
   22cee:	3301      	adds	r3, #1
   22cf0:	b29a      	uxth	r2, r3
   22cf2:	4b56      	ldr	r3, [pc, #344]	; (22e4c <m2m_ip_cb+0x29c>)
   22cf4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   22cf6:	4b55      	ldr	r3, [pc, #340]	; (22e4c <m2m_ip_cb+0x29c>)
   22cf8:	881b      	ldrh	r3, [r3, #0]
   22cfa:	b29b      	uxth	r3, r3
   22cfc:	2b00      	cmp	r3, #0
   22cfe:	d106      	bne.n	22d0e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   22d00:	4b52      	ldr	r3, [pc, #328]	; (22e4c <m2m_ip_cb+0x29c>)
   22d02:	881b      	ldrh	r3, [r3, #0]
   22d04:	b29b      	uxth	r3, r3
   22d06:	3301      	adds	r3, #1
   22d08:	b29a      	uxth	r2, r3
   22d0a:	4b50      	ldr	r3, [pc, #320]	; (22e4c <m2m_ip_cb+0x29c>)
   22d0c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   22d0e:	23b4      	movs	r3, #180	; 0xb4
   22d10:	18fb      	adds	r3, r7, r3
   22d12:	7a5b      	ldrb	r3, [r3, #9]
   22d14:	b25b      	sxtb	r3, r3
   22d16:	0018      	movs	r0, r3
   22d18:	4b4c      	ldr	r3, [pc, #304]	; (22e4c <m2m_ip_cb+0x29c>)
   22d1a:	881b      	ldrh	r3, [r3, #0]
   22d1c:	b299      	uxth	r1, r3
   22d1e:	4a4a      	ldr	r2, [pc, #296]	; (22e48 <m2m_ip_cb+0x298>)
   22d20:	0103      	lsls	r3, r0, #4
   22d22:	18d3      	adds	r3, r2, r3
   22d24:	3306      	adds	r3, #6
   22d26:	1c0a      	adds	r2, r1, #0
   22d28:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   22d2a:	23b4      	movs	r3, #180	; 0xb4
   22d2c:	18fb      	adds	r3, r7, r3
   22d2e:	2209      	movs	r2, #9
   22d30:	569a      	ldrsb	r2, [r3, r2]
   22d32:	23a0      	movs	r3, #160	; 0xa0
   22d34:	18fb      	adds	r3, r7, r3
   22d36:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   22d38:	23a0      	movs	r3, #160	; 0xa0
   22d3a:	18fb      	adds	r3, r7, r3
   22d3c:	2202      	movs	r2, #2
   22d3e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   22d40:	23b4      	movs	r3, #180	; 0xb4
   22d42:	18fb      	adds	r3, r7, r3
   22d44:	885a      	ldrh	r2, [r3, #2]
   22d46:	23a0      	movs	r3, #160	; 0xa0
   22d48:	18fb      	adds	r3, r7, r3
   22d4a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   22d4c:	23b4      	movs	r3, #180	; 0xb4
   22d4e:	18fb      	adds	r3, r7, r3
   22d50:	685a      	ldr	r2, [r3, #4]
   22d52:	23a0      	movs	r3, #160	; 0xa0
   22d54:	18fb      	adds	r3, r7, r3
   22d56:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   22d58:	4b3a      	ldr	r3, [pc, #232]	; (22e44 <m2m_ip_cb+0x294>)
   22d5a:	681b      	ldr	r3, [r3, #0]
   22d5c:	2b00      	cmp	r3, #0
   22d5e:	d100      	bne.n	22d62 <m2m_ip_cb+0x1b2>
   22d60:	e1bf      	b.n	230e2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   22d62:	4b38      	ldr	r3, [pc, #224]	; (22e44 <m2m_ip_cb+0x294>)
   22d64:	681b      	ldr	r3, [r3, #0]
   22d66:	22b4      	movs	r2, #180	; 0xb4
   22d68:	18ba      	adds	r2, r7, r2
   22d6a:	2008      	movs	r0, #8
   22d6c:	5610      	ldrsb	r0, [r2, r0]
   22d6e:	22a0      	movs	r2, #160	; 0xa0
   22d70:	18ba      	adds	r2, r7, r2
   22d72:	2104      	movs	r1, #4
   22d74:	4798      	blx	r3
}
   22d76:	e1b4      	b.n	230e2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   22d78:	1dfb      	adds	r3, r7, #7
   22d7a:	781b      	ldrb	r3, [r3, #0]
   22d7c:	2b44      	cmp	r3, #68	; 0x44
   22d7e:	d003      	beq.n	22d88 <m2m_ip_cb+0x1d8>
   22d80:	1dfb      	adds	r3, r7, #7
   22d82:	781b      	ldrb	r3, [r3, #0]
   22d84:	2b4b      	cmp	r3, #75	; 0x4b
   22d86:	d13d      	bne.n	22e04 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   22d88:	239c      	movs	r3, #156	; 0x9c
   22d8a:	18f9      	adds	r1, r7, r3
   22d8c:	6838      	ldr	r0, [r7, #0]
   22d8e:	2300      	movs	r3, #0
   22d90:	2204      	movs	r2, #4
   22d92:	4c2b      	ldr	r4, [pc, #172]	; (22e40 <m2m_ip_cb+0x290>)
   22d94:	47a0      	blx	r4
   22d96:	1e03      	subs	r3, r0, #0
   22d98:	d000      	beq.n	22d9c <m2m_ip_cb+0x1ec>
   22d9a:	e19d      	b.n	230d8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   22d9c:	239c      	movs	r3, #156	; 0x9c
   22d9e:	18fb      	adds	r3, r7, r3
   22da0:	2200      	movs	r2, #0
   22da2:	569a      	ldrsb	r2, [r3, r2]
   22da4:	2398      	movs	r3, #152	; 0x98
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   22daa:	239c      	movs	r3, #156	; 0x9c
   22dac:	18fb      	adds	r3, r7, r3
   22dae:	2201      	movs	r2, #1
   22db0:	569a      	ldrsb	r2, [r3, r2]
   22db2:	2398      	movs	r3, #152	; 0x98
   22db4:	18fb      	adds	r3, r7, r3
   22db6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   22db8:	239c      	movs	r3, #156	; 0x9c
   22dba:	18fb      	adds	r3, r7, r3
   22dbc:	785b      	ldrb	r3, [r3, #1]
   22dbe:	b25b      	sxtb	r3, r3
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	d10f      	bne.n	22de4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   22dc4:	239c      	movs	r3, #156	; 0x9c
   22dc6:	18fb      	adds	r3, r7, r3
   22dc8:	781b      	ldrb	r3, [r3, #0]
   22dca:	b25b      	sxtb	r3, r3
   22dcc:	0018      	movs	r0, r3
   22dce:	239c      	movs	r3, #156	; 0x9c
   22dd0:	18fb      	adds	r3, r7, r3
   22dd2:	885b      	ldrh	r3, [r3, #2]
   22dd4:	3b08      	subs	r3, #8
   22dd6:	b299      	uxth	r1, r3
   22dd8:	4a1b      	ldr	r2, [pc, #108]	; (22e48 <m2m_ip_cb+0x298>)
   22dda:	0103      	lsls	r3, r0, #4
   22ddc:	18d3      	adds	r3, r2, r3
   22dde:	3308      	adds	r3, #8
   22de0:	1c0a      	adds	r2, r1, #0
   22de2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   22de4:	4b17      	ldr	r3, [pc, #92]	; (22e44 <m2m_ip_cb+0x294>)
   22de6:	681b      	ldr	r3, [r3, #0]
   22de8:	2b00      	cmp	r3, #0
   22dea:	d100      	bne.n	22dee <m2m_ip_cb+0x23e>
   22dec:	e174      	b.n	230d8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   22dee:	4b15      	ldr	r3, [pc, #84]	; (22e44 <m2m_ip_cb+0x294>)
   22df0:	681b      	ldr	r3, [r3, #0]
   22df2:	229c      	movs	r2, #156	; 0x9c
   22df4:	18ba      	adds	r2, r7, r2
   22df6:	2000      	movs	r0, #0
   22df8:	5610      	ldrsb	r0, [r2, r0]
   22dfa:	2298      	movs	r2, #152	; 0x98
   22dfc:	18ba      	adds	r2, r7, r2
   22dfe:	2105      	movs	r1, #5
   22e00:	4798      	blx	r3
	{
   22e02:	e169      	b.n	230d8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   22e04:	1dfb      	adds	r3, r7, #7
   22e06:	781b      	ldrb	r3, [r3, #0]
   22e08:	2b4a      	cmp	r3, #74	; 0x4a
   22e0a:	d123      	bne.n	22e54 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   22e0c:	230c      	movs	r3, #12
   22e0e:	18f9      	adds	r1, r7, r3
   22e10:	6838      	ldr	r0, [r7, #0]
   22e12:	2300      	movs	r3, #0
   22e14:	2244      	movs	r2, #68	; 0x44
   22e16:	4c0a      	ldr	r4, [pc, #40]	; (22e40 <m2m_ip_cb+0x290>)
   22e18:	47a0      	blx	r4
   22e1a:	1e03      	subs	r3, r0, #0
   22e1c:	d000      	beq.n	22e20 <m2m_ip_cb+0x270>
   22e1e:	e160      	b.n	230e2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   22e20:	4b0b      	ldr	r3, [pc, #44]	; (22e50 <m2m_ip_cb+0x2a0>)
   22e22:	681b      	ldr	r3, [r3, #0]
   22e24:	2b00      	cmp	r3, #0
   22e26:	d100      	bne.n	22e2a <m2m_ip_cb+0x27a>
   22e28:	e15b      	b.n	230e2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   22e2a:	4b09      	ldr	r3, [pc, #36]	; (22e50 <m2m_ip_cb+0x2a0>)
   22e2c:	681a      	ldr	r2, [r3, #0]
   22e2e:	230c      	movs	r3, #12
   22e30:	18fb      	adds	r3, r7, r3
   22e32:	6c19      	ldr	r1, [r3, #64]	; 0x40
   22e34:	230c      	movs	r3, #12
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	0018      	movs	r0, r3
   22e3a:	4790      	blx	r2
}
   22e3c:	e151      	b.n	230e2 <m2m_ip_cb+0x532>
   22e3e:	46c0      	nop			; (mov r8, r8)
   22e40:	0001f3ad 	.word	0x0001f3ad
   22e44:	20005524 	.word	0x20005524
   22e48:	20005474 	.word	0x20005474
   22e4c:	20003d0a 	.word	0x20003d0a
   22e50:	2000552c 	.word	0x2000552c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   22e54:	1dfb      	adds	r3, r7, #7
   22e56:	781b      	ldrb	r3, [r3, #0]
   22e58:	2b46      	cmp	r3, #70	; 0x46
   22e5a:	d008      	beq.n	22e6e <m2m_ip_cb+0x2be>
   22e5c:	1dfb      	adds	r3, r7, #7
   22e5e:	781b      	ldrb	r3, [r3, #0]
   22e60:	2b48      	cmp	r3, #72	; 0x48
   22e62:	d004      	beq.n	22e6e <m2m_ip_cb+0x2be>
   22e64:	1dfb      	adds	r3, r7, #7
   22e66:	781b      	ldrb	r3, [r3, #0]
   22e68:	2b4d      	cmp	r3, #77	; 0x4d
   22e6a:	d000      	beq.n	22e6e <m2m_ip_cb+0x2be>
   22e6c:	e0b4      	b.n	22fd8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   22e6e:	23df      	movs	r3, #223	; 0xdf
   22e70:	18fb      	adds	r3, r7, r3
   22e72:	2206      	movs	r2, #6
   22e74:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   22e76:	1dfb      	adds	r3, r7, #7
   22e78:	781b      	ldrb	r3, [r3, #0]
   22e7a:	2b48      	cmp	r3, #72	; 0x48
   22e7c:	d103      	bne.n	22e86 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   22e7e:	23df      	movs	r3, #223	; 0xdf
   22e80:	18fb      	adds	r3, r7, r3
   22e82:	2209      	movs	r2, #9
   22e84:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   22e86:	23d8      	movs	r3, #216	; 0xd8
   22e88:	18fb      	adds	r3, r7, r3
   22e8a:	2210      	movs	r2, #16
   22e8c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   22e8e:	23d8      	movs	r3, #216	; 0xd8
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	881a      	ldrh	r2, [r3, #0]
   22e94:	2388      	movs	r3, #136	; 0x88
   22e96:	18f9      	adds	r1, r7, r3
   22e98:	6838      	ldr	r0, [r7, #0]
   22e9a:	2300      	movs	r3, #0
   22e9c:	4c93      	ldr	r4, [pc, #588]	; (230ec <m2m_ip_cb+0x53c>)
   22e9e:	47a0      	blx	r4
   22ea0:	1e03      	subs	r3, r0, #0
   22ea2:	d000      	beq.n	22ea6 <m2m_ip_cb+0x2f6>
   22ea4:	e11a      	b.n	230dc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   22ea6:	23d6      	movs	r3, #214	; 0xd6
   22ea8:	18fb      	adds	r3, r7, r3
   22eaa:	2200      	movs	r2, #0
   22eac:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   22eae:	23d5      	movs	r3, #213	; 0xd5
   22eb0:	18fb      	adds	r3, r7, r3
   22eb2:	2288      	movs	r2, #136	; 0x88
   22eb4:	18ba      	adds	r2, r7, r2
   22eb6:	7b12      	ldrb	r2, [r2, #12]
   22eb8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   22eba:	23d6      	movs	r3, #214	; 0xd6
   22ebc:	18fb      	adds	r3, r7, r3
   22ebe:	2288      	movs	r2, #136	; 0x88
   22ec0:	18ba      	adds	r2, r7, r2
   22ec2:	89d2      	ldrh	r2, [r2, #14]
   22ec4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   22ec6:	23d5      	movs	r3, #213	; 0xd5
   22ec8:	18fb      	adds	r3, r7, r3
   22eca:	781b      	ldrb	r3, [r3, #0]
   22ecc:	b25b      	sxtb	r3, r3
   22ece:	4a88      	ldr	r2, [pc, #544]	; (230f0 <m2m_ip_cb+0x540>)
   22ed0:	011b      	lsls	r3, r3, #4
   22ed2:	18d3      	adds	r3, r2, r3
   22ed4:	330c      	adds	r3, #12
   22ed6:	2200      	movs	r2, #0
   22ed8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   22eda:	23d2      	movs	r3, #210	; 0xd2
   22edc:	18fb      	adds	r3, r7, r3
   22ede:	2288      	movs	r2, #136	; 0x88
   22ee0:	18ba      	adds	r2, r7, r2
   22ee2:	8912      	ldrh	r2, [r2, #8]
   22ee4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   22ee6:	23d0      	movs	r3, #208	; 0xd0
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	2288      	movs	r2, #136	; 0x88
   22eec:	18ba      	adds	r2, r7, r2
   22eee:	8952      	ldrh	r2, [r2, #10]
   22ef0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   22ef2:	2388      	movs	r3, #136	; 0x88
   22ef4:	18fb      	adds	r3, r7, r3
   22ef6:	885a      	ldrh	r2, [r3, #2]
   22ef8:	2370      	movs	r3, #112	; 0x70
   22efa:	18fb      	adds	r3, r7, r3
   22efc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   22efe:	2388      	movs	r3, #136	; 0x88
   22f00:	18fb      	adds	r3, r7, r3
   22f02:	685a      	ldr	r2, [r3, #4]
   22f04:	2370      	movs	r3, #112	; 0x70
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   22f0a:	23d5      	movs	r3, #213	; 0xd5
   22f0c:	18fb      	adds	r3, r7, r3
   22f0e:	781b      	ldrb	r3, [r3, #0]
   22f10:	b25b      	sxtb	r3, r3
   22f12:	4a77      	ldr	r2, [pc, #476]	; (230f0 <m2m_ip_cb+0x540>)
   22f14:	011b      	lsls	r3, r3, #4
   22f16:	18d3      	adds	r3, r2, r3
   22f18:	3306      	adds	r3, #6
   22f1a:	881b      	ldrh	r3, [r3, #0]
   22f1c:	b29b      	uxth	r3, r3
   22f1e:	22d6      	movs	r2, #214	; 0xd6
   22f20:	18ba      	adds	r2, r7, r2
   22f22:	8812      	ldrh	r2, [r2, #0]
   22f24:	429a      	cmp	r2, r3
   22f26:	d148      	bne.n	22fba <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   22f28:	23d2      	movs	r3, #210	; 0xd2
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	2200      	movs	r2, #0
   22f2e:	5e9b      	ldrsh	r3, [r3, r2]
   22f30:	2b00      	cmp	r3, #0
   22f32:	dd25      	ble.n	22f80 <m2m_ip_cb+0x3d0>
   22f34:	23d2      	movs	r3, #210	; 0xd2
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	2200      	movs	r2, #0
   22f3a:	5e9a      	ldrsh	r2, [r3, r2]
   22f3c:	1d3b      	adds	r3, r7, #4
   22f3e:	881b      	ldrh	r3, [r3, #0]
   22f40:	429a      	cmp	r2, r3
   22f42:	da1d      	bge.n	22f80 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   22f44:	23d0      	movs	r3, #208	; 0xd0
   22f46:	18fb      	adds	r3, r7, r3
   22f48:	881b      	ldrh	r3, [r3, #0]
   22f4a:	683a      	ldr	r2, [r7, #0]
   22f4c:	18d3      	adds	r3, r2, r3
   22f4e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   22f50:	23d8      	movs	r3, #216	; 0xd8
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	22d2      	movs	r2, #210	; 0xd2
   22f56:	18ba      	adds	r2, r7, r2
   22f58:	8812      	ldrh	r2, [r2, #0]
   22f5a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   22f5c:	683c      	ldr	r4, [r7, #0]
   22f5e:	23df      	movs	r3, #223	; 0xdf
   22f60:	18fb      	adds	r3, r7, r3
   22f62:	781a      	ldrb	r2, [r3, #0]
   22f64:	2370      	movs	r3, #112	; 0x70
   22f66:	18f9      	adds	r1, r7, r3
   22f68:	23d5      	movs	r3, #213	; 0xd5
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	2000      	movs	r0, #0
   22f6e:	5618      	ldrsb	r0, [r3, r0]
   22f70:	23d8      	movs	r3, #216	; 0xd8
   22f72:	18fb      	adds	r3, r7, r3
   22f74:	881b      	ldrh	r3, [r3, #0]
   22f76:	9300      	str	r3, [sp, #0]
   22f78:	0023      	movs	r3, r4
   22f7a:	4c5e      	ldr	r4, [pc, #376]	; (230f4 <m2m_ip_cb+0x544>)
   22f7c:	47a0      	blx	r4
	{
   22f7e:	e0ad      	b.n	230dc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   22f80:	2370      	movs	r3, #112	; 0x70
   22f82:	18fb      	adds	r3, r7, r3
   22f84:	22d2      	movs	r2, #210	; 0xd2
   22f86:	18ba      	adds	r2, r7, r2
   22f88:	8812      	ldrh	r2, [r2, #0]
   22f8a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   22f8c:	2370      	movs	r3, #112	; 0x70
   22f8e:	18fb      	adds	r3, r7, r3
   22f90:	2200      	movs	r2, #0
   22f92:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   22f94:	4b58      	ldr	r3, [pc, #352]	; (230f8 <m2m_ip_cb+0x548>)
   22f96:	681b      	ldr	r3, [r3, #0]
   22f98:	2b00      	cmp	r3, #0
   22f9a:	d100      	bne.n	22f9e <m2m_ip_cb+0x3ee>
   22f9c:	e09e      	b.n	230dc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   22f9e:	4b56      	ldr	r3, [pc, #344]	; (230f8 <m2m_ip_cb+0x548>)
   22fa0:	681b      	ldr	r3, [r3, #0]
   22fa2:	2270      	movs	r2, #112	; 0x70
   22fa4:	18bc      	adds	r4, r7, r2
   22fa6:	22df      	movs	r2, #223	; 0xdf
   22fa8:	18ba      	adds	r2, r7, r2
   22faa:	7811      	ldrb	r1, [r2, #0]
   22fac:	22d5      	movs	r2, #213	; 0xd5
   22fae:	18ba      	adds	r2, r7, r2
   22fb0:	2000      	movs	r0, #0
   22fb2:	5610      	ldrsb	r0, [r2, r0]
   22fb4:	0022      	movs	r2, r4
   22fb6:	4798      	blx	r3
	{
   22fb8:	e090      	b.n	230dc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   22fba:	23d8      	movs	r3, #216	; 0xd8
   22fbc:	18fa      	adds	r2, r7, r3
   22fbe:	1d3b      	adds	r3, r7, #4
   22fc0:	8812      	ldrh	r2, [r2, #0]
   22fc2:	881b      	ldrh	r3, [r3, #0]
   22fc4:	429a      	cmp	r2, r3
   22fc6:	d300      	bcc.n	22fca <m2m_ip_cb+0x41a>
   22fc8:	e088      	b.n	230dc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   22fca:	2301      	movs	r3, #1
   22fcc:	2200      	movs	r2, #0
   22fce:	2100      	movs	r1, #0
   22fd0:	2000      	movs	r0, #0
   22fd2:	4c46      	ldr	r4, [pc, #280]	; (230ec <m2m_ip_cb+0x53c>)
   22fd4:	47a0      	blx	r4
	{
   22fd6:	e081      	b.n	230dc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   22fd8:	1dfb      	adds	r3, r7, #7
   22fda:	781b      	ldrb	r3, [r3, #0]
   22fdc:	2b45      	cmp	r3, #69	; 0x45
   22fde:	d007      	beq.n	22ff0 <m2m_ip_cb+0x440>
   22fe0:	1dfb      	adds	r3, r7, #7
   22fe2:	781b      	ldrb	r3, [r3, #0]
   22fe4:	2b47      	cmp	r3, #71	; 0x47
   22fe6:	d003      	beq.n	22ff0 <m2m_ip_cb+0x440>
   22fe8:	1dfb      	adds	r3, r7, #7
   22fea:	781b      	ldrb	r3, [r3, #0]
   22fec:	2b4c      	cmp	r3, #76	; 0x4c
   22fee:	d14c      	bne.n	2308a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   22ff0:	23de      	movs	r3, #222	; 0xde
   22ff2:	18fb      	adds	r3, r7, r3
   22ff4:	2207      	movs	r2, #7
   22ff6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   22ff8:	1dfb      	adds	r3, r7, #7
   22ffa:	781b      	ldrb	r3, [r3, #0]
   22ffc:	2b47      	cmp	r3, #71	; 0x47
   22ffe:	d103      	bne.n	23008 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   23000:	23de      	movs	r3, #222	; 0xde
   23002:	18fb      	adds	r3, r7, r3
   23004:	2208      	movs	r2, #8
   23006:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   23008:	2364      	movs	r3, #100	; 0x64
   2300a:	18f9      	adds	r1, r7, r3
   2300c:	6838      	ldr	r0, [r7, #0]
   2300e:	2300      	movs	r3, #0
   23010:	2208      	movs	r2, #8
   23012:	4c36      	ldr	r4, [pc, #216]	; (230ec <m2m_ip_cb+0x53c>)
   23014:	47a0      	blx	r4
   23016:	1e03      	subs	r3, r0, #0
   23018:	d162      	bne.n	230e0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2301a:	23dc      	movs	r3, #220	; 0xdc
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	2200      	movs	r2, #0
   23020:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   23022:	23db      	movs	r3, #219	; 0xdb
   23024:	18fb      	adds	r3, r7, r3
   23026:	2264      	movs	r2, #100	; 0x64
   23028:	18ba      	adds	r2, r7, r2
   2302a:	7812      	ldrb	r2, [r2, #0]
   2302c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2302e:	23dc      	movs	r3, #220	; 0xdc
   23030:	18fb      	adds	r3, r7, r3
   23032:	2264      	movs	r2, #100	; 0x64
   23034:	18ba      	adds	r2, r7, r2
   23036:	8892      	ldrh	r2, [r2, #4]
   23038:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2303a:	2364      	movs	r3, #100	; 0x64
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	2202      	movs	r2, #2
   23040:	5e9a      	ldrsh	r2, [r3, r2]
   23042:	236e      	movs	r3, #110	; 0x6e
   23044:	18fb      	adds	r3, r7, r3
   23046:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23048:	23db      	movs	r3, #219	; 0xdb
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	781b      	ldrb	r3, [r3, #0]
   2304e:	b25b      	sxtb	r3, r3
   23050:	4a27      	ldr	r2, [pc, #156]	; (230f0 <m2m_ip_cb+0x540>)
   23052:	011b      	lsls	r3, r3, #4
   23054:	18d3      	adds	r3, r2, r3
   23056:	3306      	adds	r3, #6
   23058:	881b      	ldrh	r3, [r3, #0]
   2305a:	b29b      	uxth	r3, r3
   2305c:	22dc      	movs	r2, #220	; 0xdc
   2305e:	18ba      	adds	r2, r7, r2
   23060:	8812      	ldrh	r2, [r2, #0]
   23062:	429a      	cmp	r2, r3
   23064:	d13c      	bne.n	230e0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   23066:	4b24      	ldr	r3, [pc, #144]	; (230f8 <m2m_ip_cb+0x548>)
   23068:	681b      	ldr	r3, [r3, #0]
   2306a:	2b00      	cmp	r3, #0
   2306c:	d038      	beq.n	230e0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2306e:	4b22      	ldr	r3, [pc, #136]	; (230f8 <m2m_ip_cb+0x548>)
   23070:	681b      	ldr	r3, [r3, #0]
   23072:	226e      	movs	r2, #110	; 0x6e
   23074:	18bc      	adds	r4, r7, r2
   23076:	22de      	movs	r2, #222	; 0xde
   23078:	18ba      	adds	r2, r7, r2
   2307a:	7811      	ldrb	r1, [r2, #0]
   2307c:	22db      	movs	r2, #219	; 0xdb
   2307e:	18ba      	adds	r2, r7, r2
   23080:	2000      	movs	r0, #0
   23082:	5610      	ldrsb	r0, [r2, r0]
   23084:	0022      	movs	r2, r4
   23086:	4798      	blx	r3
	{
   23088:	e02a      	b.n	230e0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2308a:	1dfb      	adds	r3, r7, #7
   2308c:	781b      	ldrb	r3, [r3, #0]
   2308e:	2b52      	cmp	r3, #82	; 0x52
   23090:	d127      	bne.n	230e2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   23092:	2350      	movs	r3, #80	; 0x50
   23094:	18f9      	adds	r1, r7, r3
   23096:	6838      	ldr	r0, [r7, #0]
   23098:	2301      	movs	r3, #1
   2309a:	2214      	movs	r2, #20
   2309c:	4c13      	ldr	r4, [pc, #76]	; (230ec <m2m_ip_cb+0x53c>)
   2309e:	47a0      	blx	r4
   230a0:	1e03      	subs	r3, r0, #0
   230a2:	d11e      	bne.n	230e2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   230a4:	2350      	movs	r3, #80	; 0x50
   230a6:	18fb      	adds	r3, r7, r3
   230a8:	685b      	ldr	r3, [r3, #4]
   230aa:	001a      	movs	r2, r3
   230ac:	4b13      	ldr	r3, [pc, #76]	; (230fc <m2m_ip_cb+0x54c>)
   230ae:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   230b0:	4b12      	ldr	r3, [pc, #72]	; (230fc <m2m_ip_cb+0x54c>)
   230b2:	681b      	ldr	r3, [r3, #0]
   230b4:	2b00      	cmp	r3, #0
   230b6:	d014      	beq.n	230e2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   230b8:	4b10      	ldr	r3, [pc, #64]	; (230fc <m2m_ip_cb+0x54c>)
   230ba:	681c      	ldr	r4, [r3, #0]
   230bc:	2350      	movs	r3, #80	; 0x50
   230be:	18fb      	adds	r3, r7, r3
   230c0:	6818      	ldr	r0, [r3, #0]
   230c2:	2350      	movs	r3, #80	; 0x50
   230c4:	18fb      	adds	r3, r7, r3
   230c6:	6899      	ldr	r1, [r3, #8]
   230c8:	2350      	movs	r3, #80	; 0x50
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	7c1b      	ldrb	r3, [r3, #16]
   230ce:	001a      	movs	r2, r3
   230d0:	47a0      	blx	r4
}
   230d2:	e006      	b.n	230e2 <m2m_ip_cb+0x532>
	{
   230d4:	46c0      	nop			; (mov r8, r8)
   230d6:	e004      	b.n	230e2 <m2m_ip_cb+0x532>
	{
   230d8:	46c0      	nop			; (mov r8, r8)
   230da:	e002      	b.n	230e2 <m2m_ip_cb+0x532>
	{
   230dc:	46c0      	nop			; (mov r8, r8)
   230de:	e000      	b.n	230e2 <m2m_ip_cb+0x532>
	{
   230e0:	46c0      	nop			; (mov r8, r8)
}
   230e2:	46c0      	nop			; (mov r8, r8)
   230e4:	46bd      	mov	sp, r7
   230e6:	b039      	add	sp, #228	; 0xe4
   230e8:	bd90      	pop	{r4, r7, pc}
   230ea:	46c0      	nop			; (mov r8, r8)
   230ec:	0001f3ad 	.word	0x0001f3ad
   230f0:	20005474 	.word	0x20005474
   230f4:	000229b5 	.word	0x000229b5
   230f8:	20005524 	.word	0x20005524
   230fc:	20005528 	.word	0x20005528

00023100 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   23100:	b580      	push	{r7, lr}
   23102:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   23104:	4b0c      	ldr	r3, [pc, #48]	; (23138 <socketInit+0x38>)
   23106:	781b      	ldrb	r3, [r3, #0]
   23108:	b2db      	uxtb	r3, r3
   2310a:	2b00      	cmp	r3, #0
   2310c:	d110      	bne.n	23130 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2310e:	4b0b      	ldr	r3, [pc, #44]	; (2313c <socketInit+0x3c>)
   23110:	22b0      	movs	r2, #176	; 0xb0
   23112:	2100      	movs	r1, #0
   23114:	0018      	movs	r0, r3
   23116:	4b0a      	ldr	r3, [pc, #40]	; (23140 <socketInit+0x40>)
   23118:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2311a:	4b0a      	ldr	r3, [pc, #40]	; (23144 <socketInit+0x44>)
   2311c:	0019      	movs	r1, r3
   2311e:	2002      	movs	r0, #2
   23120:	4b09      	ldr	r3, [pc, #36]	; (23148 <socketInit+0x48>)
   23122:	4798      	blx	r3
		gbSocketInit	= 1;
   23124:	4b04      	ldr	r3, [pc, #16]	; (23138 <socketInit+0x38>)
   23126:	2201      	movs	r2, #1
   23128:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2312a:	4b08      	ldr	r3, [pc, #32]	; (2314c <socketInit+0x4c>)
   2312c:	2200      	movs	r2, #0
   2312e:	801a      	strh	r2, [r3, #0]
	}
}
   23130:	46c0      	nop			; (mov r8, r8)
   23132:	46bd      	mov	sp, r7
   23134:	bd80      	pop	{r7, pc}
   23136:	46c0      	nop			; (mov r8, r8)
   23138:	20003d0c 	.word	0x20003d0c
   2313c:	20005474 	.word	0x20005474
   23140:	0001e831 	.word	0x0001e831
   23144:	00022bb1 	.word	0x00022bb1
   23148:	0001f52d 	.word	0x0001f52d
   2314c:	20003d0a 	.word	0x20003d0a

00023150 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   23150:	b580      	push	{r7, lr}
   23152:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23154:	4b0a      	ldr	r3, [pc, #40]	; (23180 <socketDeinit+0x30>)
   23156:	22b0      	movs	r2, #176	; 0xb0
   23158:	2100      	movs	r1, #0
   2315a:	0018      	movs	r0, r3
   2315c:	4b09      	ldr	r3, [pc, #36]	; (23184 <socketDeinit+0x34>)
   2315e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   23160:	2100      	movs	r1, #0
   23162:	2002      	movs	r0, #2
   23164:	4b08      	ldr	r3, [pc, #32]	; (23188 <socketDeinit+0x38>)
   23166:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   23168:	4b08      	ldr	r3, [pc, #32]	; (2318c <socketDeinit+0x3c>)
   2316a:	2200      	movs	r2, #0
   2316c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2316e:	4b08      	ldr	r3, [pc, #32]	; (23190 <socketDeinit+0x40>)
   23170:	2200      	movs	r2, #0
   23172:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   23174:	4b07      	ldr	r3, [pc, #28]	; (23194 <socketDeinit+0x44>)
   23176:	2200      	movs	r2, #0
   23178:	701a      	strb	r2, [r3, #0]
}
   2317a:	46c0      	nop			; (mov r8, r8)
   2317c:	46bd      	mov	sp, r7
   2317e:	bd80      	pop	{r7, pc}
   23180:	20005474 	.word	0x20005474
   23184:	0001e831 	.word	0x0001e831
   23188:	0001f52d 	.word	0x0001f52d
   2318c:	20005524 	.word	0x20005524
   23190:	2000552c 	.word	0x2000552c
   23194:	20003d0c 	.word	0x20003d0c

00023198 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   23198:	b580      	push	{r7, lr}
   2319a:	b082      	sub	sp, #8
   2319c:	af00      	add	r7, sp, #0
   2319e:	6078      	str	r0, [r7, #4]
   231a0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   231a2:	4b05      	ldr	r3, [pc, #20]	; (231b8 <registerSocketCallback+0x20>)
   231a4:	687a      	ldr	r2, [r7, #4]
   231a6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   231a8:	4b04      	ldr	r3, [pc, #16]	; (231bc <registerSocketCallback+0x24>)
   231aa:	683a      	ldr	r2, [r7, #0]
   231ac:	601a      	str	r2, [r3, #0]
}
   231ae:	46c0      	nop			; (mov r8, r8)
   231b0:	46bd      	mov	sp, r7
   231b2:	b002      	add	sp, #8
   231b4:	bd80      	pop	{r7, pc}
   231b6:	46c0      	nop			; (mov r8, r8)
   231b8:	20005524 	.word	0x20005524
   231bc:	2000552c 	.word	0x2000552c

000231c0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   231c0:	b590      	push	{r4, r7, lr}
   231c2:	b08d      	sub	sp, #52	; 0x34
   231c4:	af04      	add	r7, sp, #16
   231c6:	0004      	movs	r4, r0
   231c8:	0008      	movs	r0, r1
   231ca:	0011      	movs	r1, r2
   231cc:	1dbb      	adds	r3, r7, #6
   231ce:	1c22      	adds	r2, r4, #0
   231d0:	801a      	strh	r2, [r3, #0]
   231d2:	1d7b      	adds	r3, r7, #5
   231d4:	1c02      	adds	r2, r0, #0
   231d6:	701a      	strb	r2, [r3, #0]
   231d8:	1d3b      	adds	r3, r7, #4
   231da:	1c0a      	adds	r2, r1, #0
   231dc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   231de:	231f      	movs	r3, #31
   231e0:	18fb      	adds	r3, r7, r3
   231e2:	22ff      	movs	r2, #255	; 0xff
   231e4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   231e6:	1dbb      	adds	r3, r7, #6
   231e8:	881b      	ldrh	r3, [r3, #0]
   231ea:	2b02      	cmp	r3, #2
   231ec:	d000      	beq.n	231f0 <socket+0x30>
   231ee:	e0ce      	b.n	2338e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   231f0:	1d7b      	adds	r3, r7, #5
   231f2:	781b      	ldrb	r3, [r3, #0]
   231f4:	2b01      	cmp	r3, #1
   231f6:	d135      	bne.n	23264 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   231f8:	231e      	movs	r3, #30
   231fa:	18fb      	adds	r3, r7, r3
   231fc:	2200      	movs	r2, #0
   231fe:	701a      	strb	r2, [r3, #0]
   23200:	e02a      	b.n	23258 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   23202:	2317      	movs	r3, #23
   23204:	18fb      	adds	r3, r7, r3
   23206:	4a66      	ldr	r2, [pc, #408]	; (233a0 <socket+0x1e0>)
   23208:	7812      	ldrb	r2, [r2, #0]
   2320a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2320c:	4b64      	ldr	r3, [pc, #400]	; (233a0 <socket+0x1e0>)
   2320e:	781b      	ldrb	r3, [r3, #0]
   23210:	b2db      	uxtb	r3, r3
   23212:	011a      	lsls	r2, r3, #4
   23214:	4b63      	ldr	r3, [pc, #396]	; (233a4 <socket+0x1e4>)
   23216:	18d3      	adds	r3, r2, r3
   23218:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2321a:	4b61      	ldr	r3, [pc, #388]	; (233a0 <socket+0x1e0>)
   2321c:	781b      	ldrb	r3, [r3, #0]
   2321e:	b2db      	uxtb	r3, r3
   23220:	1c5a      	adds	r2, r3, #1
   23222:	4b61      	ldr	r3, [pc, #388]	; (233a8 <socket+0x1e8>)
   23224:	2107      	movs	r1, #7
   23226:	0010      	movs	r0, r2
   23228:	4798      	blx	r3
   2322a:	000b      	movs	r3, r1
   2322c:	b2da      	uxtb	r2, r3
   2322e:	4b5c      	ldr	r3, [pc, #368]	; (233a0 <socket+0x1e0>)
   23230:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23232:	69bb      	ldr	r3, [r7, #24]
   23234:	7a9b      	ldrb	r3, [r3, #10]
   23236:	b2db      	uxtb	r3, r3
   23238:	2b00      	cmp	r3, #0
   2323a:	d106      	bne.n	2324a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2323c:	231f      	movs	r3, #31
   2323e:	18fb      	adds	r3, r7, r3
   23240:	2217      	movs	r2, #23
   23242:	18ba      	adds	r2, r7, r2
   23244:	7812      	ldrb	r2, [r2, #0]
   23246:	701a      	strb	r2, [r3, #0]
					break;
   23248:	e04c      	b.n	232e4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2324a:	231e      	movs	r3, #30
   2324c:	18fb      	adds	r3, r7, r3
   2324e:	781a      	ldrb	r2, [r3, #0]
   23250:	231e      	movs	r3, #30
   23252:	18fb      	adds	r3, r7, r3
   23254:	3201      	adds	r2, #1
   23256:	701a      	strb	r2, [r3, #0]
   23258:	231e      	movs	r3, #30
   2325a:	18fb      	adds	r3, r7, r3
   2325c:	781b      	ldrb	r3, [r3, #0]
   2325e:	2b06      	cmp	r3, #6
   23260:	d9cf      	bls.n	23202 <socket+0x42>
   23262:	e03f      	b.n	232e4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   23264:	1d7b      	adds	r3, r7, #5
   23266:	781b      	ldrb	r3, [r3, #0]
   23268:	2b02      	cmp	r3, #2
   2326a:	d13b      	bne.n	232e4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2326c:	4b4f      	ldr	r3, [pc, #316]	; (233ac <socket+0x1ec>)
   2326e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   23270:	231e      	movs	r3, #30
   23272:	18fb      	adds	r3, r7, r3
   23274:	2200      	movs	r2, #0
   23276:	701a      	strb	r2, [r3, #0]
   23278:	e02f      	b.n	232da <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2327a:	2317      	movs	r3, #23
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	4a4c      	ldr	r2, [pc, #304]	; (233b0 <socket+0x1f0>)
   23280:	7812      	ldrb	r2, [r2, #0]
   23282:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   23284:	4b4a      	ldr	r3, [pc, #296]	; (233b0 <socket+0x1f0>)
   23286:	781b      	ldrb	r3, [r3, #0]
   23288:	b2db      	uxtb	r3, r3
   2328a:	011b      	lsls	r3, r3, #4
   2328c:	693a      	ldr	r2, [r7, #16]
   2328e:	18d3      	adds	r3, r2, r3
   23290:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   23292:	4b47      	ldr	r3, [pc, #284]	; (233b0 <socket+0x1f0>)
   23294:	781b      	ldrb	r3, [r3, #0]
   23296:	b2db      	uxtb	r3, r3
   23298:	3301      	adds	r3, #1
   2329a:	4a46      	ldr	r2, [pc, #280]	; (233b4 <socket+0x1f4>)
   2329c:	4013      	ands	r3, r2
   2329e:	d504      	bpl.n	232aa <socket+0xea>
   232a0:	3b01      	subs	r3, #1
   232a2:	2204      	movs	r2, #4
   232a4:	4252      	negs	r2, r2
   232a6:	4313      	orrs	r3, r2
   232a8:	3301      	adds	r3, #1
   232aa:	b2da      	uxtb	r2, r3
   232ac:	4b40      	ldr	r3, [pc, #256]	; (233b0 <socket+0x1f0>)
   232ae:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   232b0:	69bb      	ldr	r3, [r7, #24]
   232b2:	7a9b      	ldrb	r3, [r3, #10]
   232b4:	b2db      	uxtb	r3, r3
   232b6:	2b00      	cmp	r3, #0
   232b8:	d108      	bne.n	232cc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   232ba:	2317      	movs	r3, #23
   232bc:	18fb      	adds	r3, r7, r3
   232be:	781b      	ldrb	r3, [r3, #0]
   232c0:	3307      	adds	r3, #7
   232c2:	b2da      	uxtb	r2, r3
   232c4:	231f      	movs	r3, #31
   232c6:	18fb      	adds	r3, r7, r3
   232c8:	701a      	strb	r2, [r3, #0]
					break;
   232ca:	e00b      	b.n	232e4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   232cc:	231e      	movs	r3, #30
   232ce:	18fb      	adds	r3, r7, r3
   232d0:	781a      	ldrb	r2, [r3, #0]
   232d2:	231e      	movs	r3, #30
   232d4:	18fb      	adds	r3, r7, r3
   232d6:	3201      	adds	r2, #1
   232d8:	701a      	strb	r2, [r3, #0]
   232da:	231e      	movs	r3, #30
   232dc:	18fb      	adds	r3, r7, r3
   232de:	781b      	ldrb	r3, [r3, #0]
   232e0:	2b03      	cmp	r3, #3
   232e2:	d9ca      	bls.n	2327a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   232e4:	231f      	movs	r3, #31
   232e6:	18fb      	adds	r3, r7, r3
   232e8:	781b      	ldrb	r3, [r3, #0]
   232ea:	2b7f      	cmp	r3, #127	; 0x7f
   232ec:	d84f      	bhi.n	2338e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   232ee:	69bb      	ldr	r3, [r7, #24]
   232f0:	2210      	movs	r2, #16
   232f2:	2100      	movs	r1, #0
   232f4:	0018      	movs	r0, r3
   232f6:	4b30      	ldr	r3, [pc, #192]	; (233b8 <socket+0x1f8>)
   232f8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   232fa:	69bb      	ldr	r3, [r7, #24]
   232fc:	2201      	movs	r2, #1
   232fe:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   23300:	4b2e      	ldr	r3, [pc, #184]	; (233bc <socket+0x1fc>)
   23302:	881b      	ldrh	r3, [r3, #0]
   23304:	b29b      	uxth	r3, r3
   23306:	3301      	adds	r3, #1
   23308:	b29a      	uxth	r2, r3
   2330a:	4b2c      	ldr	r3, [pc, #176]	; (233bc <socket+0x1fc>)
   2330c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2330e:	4b2b      	ldr	r3, [pc, #172]	; (233bc <socket+0x1fc>)
   23310:	881b      	ldrh	r3, [r3, #0]
   23312:	b29b      	uxth	r3, r3
   23314:	2b00      	cmp	r3, #0
   23316:	d106      	bne.n	23326 <socket+0x166>
				++gu16SessionID;
   23318:	4b28      	ldr	r3, [pc, #160]	; (233bc <socket+0x1fc>)
   2331a:	881b      	ldrh	r3, [r3, #0]
   2331c:	b29b      	uxth	r3, r3
   2331e:	3301      	adds	r3, #1
   23320:	b29a      	uxth	r2, r3
   23322:	4b26      	ldr	r3, [pc, #152]	; (233bc <socket+0x1fc>)
   23324:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   23326:	4b25      	ldr	r3, [pc, #148]	; (233bc <socket+0x1fc>)
   23328:	881b      	ldrh	r3, [r3, #0]
   2332a:	b29a      	uxth	r2, r3
   2332c:	69bb      	ldr	r3, [r7, #24]
   2332e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   23330:	4b23      	ldr	r3, [pc, #140]	; (233c0 <socket+0x200>)
   23332:	0018      	movs	r0, r3
   23334:	4b23      	ldr	r3, [pc, #140]	; (233c4 <socket+0x204>)
   23336:	4798      	blx	r3
   23338:	231f      	movs	r3, #31
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	2100      	movs	r1, #0
   2333e:	5659      	ldrsb	r1, [r3, r1]
   23340:	4b1e      	ldr	r3, [pc, #120]	; (233bc <socket+0x1fc>)
   23342:	881b      	ldrh	r3, [r3, #0]
   23344:	b29b      	uxth	r3, r3
   23346:	001a      	movs	r2, r3
   23348:	4b1f      	ldr	r3, [pc, #124]	; (233c8 <socket+0x208>)
   2334a:	0018      	movs	r0, r3
   2334c:	4b1d      	ldr	r3, [pc, #116]	; (233c4 <socket+0x204>)
   2334e:	4798      	blx	r3
   23350:	4b1e      	ldr	r3, [pc, #120]	; (233cc <socket+0x20c>)
   23352:	0018      	movs	r0, r3
   23354:	4b1b      	ldr	r3, [pc, #108]	; (233c4 <socket+0x204>)
   23356:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   23358:	1d3b      	adds	r3, r7, #4
   2335a:	781b      	ldrb	r3, [r3, #0]
   2335c:	2201      	movs	r2, #1
   2335e:	4013      	ands	r3, r2
   23360:	d015      	beq.n	2338e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   23362:	230c      	movs	r3, #12
   23364:	18fb      	adds	r3, r7, r3
   23366:	221f      	movs	r2, #31
   23368:	18ba      	adds	r2, r7, r2
   2336a:	7812      	ldrb	r2, [r2, #0]
   2336c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2336e:	69bb      	ldr	r3, [r7, #24]
   23370:	2221      	movs	r2, #33	; 0x21
   23372:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   23374:	230c      	movs	r3, #12
   23376:	18fa      	adds	r2, r7, r3
   23378:	2300      	movs	r3, #0
   2337a:	9302      	str	r3, [sp, #8]
   2337c:	2300      	movs	r3, #0
   2337e:	9301      	str	r3, [sp, #4]
   23380:	2300      	movs	r3, #0
   23382:	9300      	str	r3, [sp, #0]
   23384:	2304      	movs	r3, #4
   23386:	2150      	movs	r1, #80	; 0x50
   23388:	2002      	movs	r0, #2
   2338a:	4c11      	ldr	r4, [pc, #68]	; (233d0 <socket+0x210>)
   2338c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2338e:	231f      	movs	r3, #31
   23390:	18fb      	adds	r3, r7, r3
   23392:	781b      	ldrb	r3, [r3, #0]
   23394:	b25b      	sxtb	r3, r3
}
   23396:	0018      	movs	r0, r3
   23398:	46bd      	mov	sp, r7
   2339a:	b009      	add	sp, #36	; 0x24
   2339c:	bd90      	pop	{r4, r7, pc}
   2339e:	46c0      	nop			; (mov r8, r8)
   233a0:	20003d0d 	.word	0x20003d0d
   233a4:	20005474 	.word	0x20005474
   233a8:	00030829 	.word	0x00030829
   233ac:	200054e4 	.word	0x200054e4
   233b0:	20003d0e 	.word	0x20003d0e
   233b4:	80000003 	.word	0x80000003
   233b8:	0001e831 	.word	0x0001e831
   233bc:	20003d0a 	.word	0x20003d0a
   233c0:	000368ac 	.word	0x000368ac
   233c4:	0001bafd 	.word	0x0001bafd
   233c8:	000368d0 	.word	0x000368d0
   233cc:	000368cc 	.word	0x000368cc
   233d0:	0001ea91 	.word	0x0001ea91

000233d4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   233d4:	b5b0      	push	{r4, r5, r7, lr}
   233d6:	b08a      	sub	sp, #40	; 0x28
   233d8:	af04      	add	r7, sp, #16
   233da:	6039      	str	r1, [r7, #0]
   233dc:	0011      	movs	r1, r2
   233de:	1dfb      	adds	r3, r7, #7
   233e0:	1c02      	adds	r2, r0, #0
   233e2:	701a      	strb	r2, [r3, #0]
   233e4:	1dbb      	adds	r3, r7, #6
   233e6:	1c0a      	adds	r2, r1, #0
   233e8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   233ea:	2317      	movs	r3, #23
   233ec:	18fb      	adds	r3, r7, r3
   233ee:	22fa      	movs	r2, #250	; 0xfa
   233f0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   233f2:	1dfb      	adds	r3, r7, #7
   233f4:	781b      	ldrb	r3, [r3, #0]
   233f6:	2b7f      	cmp	r3, #127	; 0x7f
   233f8:	d867      	bhi.n	234ca <connect+0xf6>
   233fa:	683b      	ldr	r3, [r7, #0]
   233fc:	2b00      	cmp	r3, #0
   233fe:	d064      	beq.n	234ca <connect+0xf6>
   23400:	1dfb      	adds	r3, r7, #7
   23402:	781b      	ldrb	r3, [r3, #0]
   23404:	b25b      	sxtb	r3, r3
   23406:	4a35      	ldr	r2, [pc, #212]	; (234dc <connect+0x108>)
   23408:	011b      	lsls	r3, r3, #4
   2340a:	18d3      	adds	r3, r2, r3
   2340c:	330a      	adds	r3, #10
   2340e:	781b      	ldrb	r3, [r3, #0]
   23410:	b2db      	uxtb	r3, r3
   23412:	2b01      	cmp	r3, #1
   23414:	d159      	bne.n	234ca <connect+0xf6>
   23416:	1dbb      	adds	r3, r7, #6
   23418:	781b      	ldrb	r3, [r3, #0]
   2341a:	2b00      	cmp	r3, #0
   2341c:	d055      	beq.n	234ca <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2341e:	2316      	movs	r3, #22
   23420:	18fb      	adds	r3, r7, r3
   23422:	2244      	movs	r2, #68	; 0x44
   23424:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   23426:	1dfb      	adds	r3, r7, #7
   23428:	781b      	ldrb	r3, [r3, #0]
   2342a:	b25b      	sxtb	r3, r3
   2342c:	4a2b      	ldr	r2, [pc, #172]	; (234dc <connect+0x108>)
   2342e:	011b      	lsls	r3, r3, #4
   23430:	18d3      	adds	r3, r2, r3
   23432:	330b      	adds	r3, #11
   23434:	781b      	ldrb	r3, [r3, #0]
   23436:	b2db      	uxtb	r3, r3
   23438:	001a      	movs	r2, r3
   2343a:	2301      	movs	r3, #1
   2343c:	4013      	ands	r3, r2
   2343e:	d00f      	beq.n	23460 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   23440:	2316      	movs	r3, #22
   23442:	18fb      	adds	r3, r7, r3
   23444:	224b      	movs	r2, #75	; 0x4b
   23446:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   23448:	1dfb      	adds	r3, r7, #7
   2344a:	781b      	ldrb	r3, [r3, #0]
   2344c:	b25b      	sxtb	r3, r3
   2344e:	4a23      	ldr	r2, [pc, #140]	; (234dc <connect+0x108>)
   23450:	011b      	lsls	r3, r3, #4
   23452:	18d3      	adds	r3, r2, r3
   23454:	330b      	adds	r3, #11
   23456:	781b      	ldrb	r3, [r3, #0]
   23458:	b2da      	uxtb	r2, r3
   2345a:	2308      	movs	r3, #8
   2345c:	18fb      	adds	r3, r7, r3
   2345e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   23460:	2308      	movs	r3, #8
   23462:	18fb      	adds	r3, r7, r3
   23464:	1dfa      	adds	r2, r7, #7
   23466:	7812      	ldrb	r2, [r2, #0]
   23468:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2346a:	6839      	ldr	r1, [r7, #0]
   2346c:	2308      	movs	r3, #8
   2346e:	18fb      	adds	r3, r7, r3
   23470:	2208      	movs	r2, #8
   23472:	0018      	movs	r0, r3
   23474:	4b1a      	ldr	r3, [pc, #104]	; (234e0 <connect+0x10c>)
   23476:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   23478:	1dfb      	adds	r3, r7, #7
   2347a:	781b      	ldrb	r3, [r3, #0]
   2347c:	b25b      	sxtb	r3, r3
   2347e:	4a17      	ldr	r2, [pc, #92]	; (234dc <connect+0x108>)
   23480:	011b      	lsls	r3, r3, #4
   23482:	18d3      	adds	r3, r2, r3
   23484:	3306      	adds	r3, #6
   23486:	881b      	ldrh	r3, [r3, #0]
   23488:	b29a      	uxth	r2, r3
   2348a:	2308      	movs	r3, #8
   2348c:	18fb      	adds	r3, r7, r3
   2348e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   23490:	2317      	movs	r3, #23
   23492:	18fc      	adds	r4, r7, r3
   23494:	2308      	movs	r3, #8
   23496:	18fa      	adds	r2, r7, r3
   23498:	2316      	movs	r3, #22
   2349a:	18fb      	adds	r3, r7, r3
   2349c:	7819      	ldrb	r1, [r3, #0]
   2349e:	2300      	movs	r3, #0
   234a0:	9302      	str	r3, [sp, #8]
   234a2:	2300      	movs	r3, #0
   234a4:	9301      	str	r3, [sp, #4]
   234a6:	2300      	movs	r3, #0
   234a8:	9300      	str	r3, [sp, #0]
   234aa:	230c      	movs	r3, #12
   234ac:	2002      	movs	r0, #2
   234ae:	4d0d      	ldr	r5, [pc, #52]	; (234e4 <connect+0x110>)
   234b0:	47a8      	blx	r5
   234b2:	0003      	movs	r3, r0
   234b4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   234b6:	2317      	movs	r3, #23
   234b8:	18fb      	adds	r3, r7, r3
   234ba:	781b      	ldrb	r3, [r3, #0]
   234bc:	b25b      	sxtb	r3, r3
   234be:	2b00      	cmp	r3, #0
   234c0:	d003      	beq.n	234ca <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   234c2:	2317      	movs	r3, #23
   234c4:	18fb      	adds	r3, r7, r3
   234c6:	22f7      	movs	r2, #247	; 0xf7
   234c8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   234ca:	2317      	movs	r3, #23
   234cc:	18fb      	adds	r3, r7, r3
   234ce:	781b      	ldrb	r3, [r3, #0]
   234d0:	b25b      	sxtb	r3, r3
}
   234d2:	0018      	movs	r0, r3
   234d4:	46bd      	mov	sp, r7
   234d6:	b006      	add	sp, #24
   234d8:	bdb0      	pop	{r4, r5, r7, pc}
   234da:	46c0      	nop			; (mov r8, r8)
   234dc:	20005474 	.word	0x20005474
   234e0:	0001e7f5 	.word	0x0001e7f5
   234e4:	0001ea91 	.word	0x0001ea91

000234e8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   234e8:	b590      	push	{r4, r7, lr}
   234ea:	b08f      	sub	sp, #60	; 0x3c
   234ec:	af04      	add	r7, sp, #16
   234ee:	0004      	movs	r4, r0
   234f0:	60b9      	str	r1, [r7, #8]
   234f2:	0010      	movs	r0, r2
   234f4:	0019      	movs	r1, r3
   234f6:	230f      	movs	r3, #15
   234f8:	18fb      	adds	r3, r7, r3
   234fa:	1c22      	adds	r2, r4, #0
   234fc:	701a      	strb	r2, [r3, #0]
   234fe:	230c      	movs	r3, #12
   23500:	18fb      	adds	r3, r7, r3
   23502:	1c02      	adds	r2, r0, #0
   23504:	801a      	strh	r2, [r3, #0]
   23506:	1dbb      	adds	r3, r7, #6
   23508:	1c0a      	adds	r2, r1, #0
   2350a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2350c:	2326      	movs	r3, #38	; 0x26
   2350e:	18fb      	adds	r3, r7, r3
   23510:	2206      	movs	r2, #6
   23512:	4252      	negs	r2, r2
   23514:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   23516:	230f      	movs	r3, #15
   23518:	18fb      	adds	r3, r7, r3
   2351a:	781b      	ldrb	r3, [r3, #0]
   2351c:	2b7f      	cmp	r3, #127	; 0x7f
   2351e:	d900      	bls.n	23522 <send+0x3a>
   23520:	e087      	b.n	23632 <send+0x14a>
   23522:	68bb      	ldr	r3, [r7, #8]
   23524:	2b00      	cmp	r3, #0
   23526:	d100      	bne.n	2352a <send+0x42>
   23528:	e083      	b.n	23632 <send+0x14a>
   2352a:	230c      	movs	r3, #12
   2352c:	18fb      	adds	r3, r7, r3
   2352e:	881a      	ldrh	r2, [r3, #0]
   23530:	23af      	movs	r3, #175	; 0xaf
   23532:	00db      	lsls	r3, r3, #3
   23534:	429a      	cmp	r2, r3
   23536:	d900      	bls.n	2353a <send+0x52>
   23538:	e07b      	b.n	23632 <send+0x14a>
   2353a:	230f      	movs	r3, #15
   2353c:	18fb      	adds	r3, r7, r3
   2353e:	781b      	ldrb	r3, [r3, #0]
   23540:	b25b      	sxtb	r3, r3
   23542:	4a40      	ldr	r2, [pc, #256]	; (23644 <send+0x15c>)
   23544:	011b      	lsls	r3, r3, #4
   23546:	18d3      	adds	r3, r2, r3
   23548:	330a      	adds	r3, #10
   2354a:	781b      	ldrb	r3, [r3, #0]
   2354c:	b2db      	uxtb	r3, r3
   2354e:	2b01      	cmp	r3, #1
   23550:	d16f      	bne.n	23632 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   23552:	2323      	movs	r3, #35	; 0x23
   23554:	18fb      	adds	r3, r7, r3
   23556:	2245      	movs	r2, #69	; 0x45
   23558:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2355a:	2324      	movs	r3, #36	; 0x24
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	2250      	movs	r2, #80	; 0x50
   23560:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   23562:	2310      	movs	r3, #16
   23564:	18fb      	adds	r3, r7, r3
   23566:	220f      	movs	r2, #15
   23568:	18ba      	adds	r2, r7, r2
   2356a:	7812      	ldrb	r2, [r2, #0]
   2356c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2356e:	2310      	movs	r3, #16
   23570:	18fb      	adds	r3, r7, r3
   23572:	220c      	movs	r2, #12
   23574:	18ba      	adds	r2, r7, r2
   23576:	8812      	ldrh	r2, [r2, #0]
   23578:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2357a:	230f      	movs	r3, #15
   2357c:	18fb      	adds	r3, r7, r3
   2357e:	781b      	ldrb	r3, [r3, #0]
   23580:	b25b      	sxtb	r3, r3
   23582:	4a30      	ldr	r2, [pc, #192]	; (23644 <send+0x15c>)
   23584:	011b      	lsls	r3, r3, #4
   23586:	18d3      	adds	r3, r2, r3
   23588:	3306      	adds	r3, #6
   2358a:	881b      	ldrh	r3, [r3, #0]
   2358c:	b29a      	uxth	r2, r3
   2358e:	2310      	movs	r3, #16
   23590:	18fb      	adds	r3, r7, r3
   23592:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   23594:	230f      	movs	r3, #15
   23596:	18fb      	adds	r3, r7, r3
   23598:	781b      	ldrb	r3, [r3, #0]
   2359a:	b25b      	sxtb	r3, r3
   2359c:	2b06      	cmp	r3, #6
   2359e:	dd03      	ble.n	235a8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   235a0:	2324      	movs	r3, #36	; 0x24
   235a2:	18fb      	adds	r3, r7, r3
   235a4:	2244      	movs	r2, #68	; 0x44
   235a6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   235a8:	230f      	movs	r3, #15
   235aa:	18fb      	adds	r3, r7, r3
   235ac:	781b      	ldrb	r3, [r3, #0]
   235ae:	b25b      	sxtb	r3, r3
   235b0:	4a24      	ldr	r2, [pc, #144]	; (23644 <send+0x15c>)
   235b2:	011b      	lsls	r3, r3, #4
   235b4:	18d3      	adds	r3, r2, r3
   235b6:	330b      	adds	r3, #11
   235b8:	781b      	ldrb	r3, [r3, #0]
   235ba:	b2db      	uxtb	r3, r3
   235bc:	001a      	movs	r2, r3
   235be:	2301      	movs	r3, #1
   235c0:	4013      	ands	r3, r2
   235c2:	d00f      	beq.n	235e4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   235c4:	2323      	movs	r3, #35	; 0x23
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	224c      	movs	r2, #76	; 0x4c
   235ca:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   235cc:	230f      	movs	r3, #15
   235ce:	18fb      	adds	r3, r7, r3
   235d0:	2200      	movs	r2, #0
   235d2:	569a      	ldrsb	r2, [r3, r2]
   235d4:	2324      	movs	r3, #36	; 0x24
   235d6:	18fb      	adds	r3, r7, r3
   235d8:	491a      	ldr	r1, [pc, #104]	; (23644 <send+0x15c>)
   235da:	0112      	lsls	r2, r2, #4
   235dc:	188a      	adds	r2, r1, r2
   235de:	3208      	adds	r2, #8
   235e0:	8812      	ldrh	r2, [r2, #0]
   235e2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   235e4:	2323      	movs	r3, #35	; 0x23
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	781b      	ldrb	r3, [r3, #0]
   235ea:	2280      	movs	r2, #128	; 0x80
   235ec:	4252      	negs	r2, r2
   235ee:	4313      	orrs	r3, r2
   235f0:	b2d9      	uxtb	r1, r3
   235f2:	2310      	movs	r3, #16
   235f4:	18fa      	adds	r2, r7, r3
   235f6:	2324      	movs	r3, #36	; 0x24
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	881b      	ldrh	r3, [r3, #0]
   235fc:	9302      	str	r3, [sp, #8]
   235fe:	230c      	movs	r3, #12
   23600:	18fb      	adds	r3, r7, r3
   23602:	881b      	ldrh	r3, [r3, #0]
   23604:	9301      	str	r3, [sp, #4]
   23606:	68bb      	ldr	r3, [r7, #8]
   23608:	9300      	str	r3, [sp, #0]
   2360a:	2310      	movs	r3, #16
   2360c:	2002      	movs	r0, #2
   2360e:	4c0e      	ldr	r4, [pc, #56]	; (23648 <send+0x160>)
   23610:	47a0      	blx	r4
   23612:	0003      	movs	r3, r0
   23614:	001a      	movs	r2, r3
   23616:	2326      	movs	r3, #38	; 0x26
   23618:	18fb      	adds	r3, r7, r3
   2361a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2361c:	2326      	movs	r3, #38	; 0x26
   2361e:	18fb      	adds	r3, r7, r3
   23620:	2200      	movs	r2, #0
   23622:	5e9b      	ldrsh	r3, [r3, r2]
   23624:	2b00      	cmp	r3, #0
   23626:	d004      	beq.n	23632 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   23628:	2326      	movs	r3, #38	; 0x26
   2362a:	18fb      	adds	r3, r7, r3
   2362c:	220e      	movs	r2, #14
   2362e:	4252      	negs	r2, r2
   23630:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   23632:	2326      	movs	r3, #38	; 0x26
   23634:	18fb      	adds	r3, r7, r3
   23636:	2200      	movs	r2, #0
   23638:	5e9b      	ldrsh	r3, [r3, r2]
}
   2363a:	0018      	movs	r0, r3
   2363c:	46bd      	mov	sp, r7
   2363e:	b00b      	add	sp, #44	; 0x2c
   23640:	bd90      	pop	{r4, r7, pc}
   23642:	46c0      	nop			; (mov r8, r8)
   23644:	20005474 	.word	0x20005474
   23648:	0001ea91 	.word	0x0001ea91

0002364c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2364c:	b590      	push	{r4, r7, lr}
   2364e:	b08d      	sub	sp, #52	; 0x34
   23650:	af04      	add	r7, sp, #16
   23652:	60b9      	str	r1, [r7, #8]
   23654:	0011      	movs	r1, r2
   23656:	607b      	str	r3, [r7, #4]
   23658:	230f      	movs	r3, #15
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	1c02      	adds	r2, r0, #0
   2365e:	701a      	strb	r2, [r3, #0]
   23660:	230c      	movs	r3, #12
   23662:	18fb      	adds	r3, r7, r3
   23664:	1c0a      	adds	r2, r1, #0
   23666:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   23668:	231e      	movs	r3, #30
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	2206      	movs	r2, #6
   2366e:	4252      	negs	r2, r2
   23670:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   23672:	230f      	movs	r3, #15
   23674:	18fb      	adds	r3, r7, r3
   23676:	781b      	ldrb	r3, [r3, #0]
   23678:	2b7f      	cmp	r3, #127	; 0x7f
   2367a:	d900      	bls.n	2367e <recv+0x32>
   2367c:	e099      	b.n	237b2 <recv+0x166>
   2367e:	68bb      	ldr	r3, [r7, #8]
   23680:	2b00      	cmp	r3, #0
   23682:	d100      	bne.n	23686 <recv+0x3a>
   23684:	e095      	b.n	237b2 <recv+0x166>
   23686:	230c      	movs	r3, #12
   23688:	18fb      	adds	r3, r7, r3
   2368a:	881b      	ldrh	r3, [r3, #0]
   2368c:	2b00      	cmp	r3, #0
   2368e:	d100      	bne.n	23692 <recv+0x46>
   23690:	e08f      	b.n	237b2 <recv+0x166>
   23692:	230f      	movs	r3, #15
   23694:	18fb      	adds	r3, r7, r3
   23696:	781b      	ldrb	r3, [r3, #0]
   23698:	b25b      	sxtb	r3, r3
   2369a:	4a4a      	ldr	r2, [pc, #296]	; (237c4 <recv+0x178>)
   2369c:	011b      	lsls	r3, r3, #4
   2369e:	18d3      	adds	r3, r2, r3
   236a0:	330a      	adds	r3, #10
   236a2:	781b      	ldrb	r3, [r3, #0]
   236a4:	b2db      	uxtb	r3, r3
   236a6:	2b01      	cmp	r3, #1
   236a8:	d000      	beq.n	236ac <recv+0x60>
   236aa:	e082      	b.n	237b2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   236ac:	231e      	movs	r3, #30
   236ae:	18fb      	adds	r3, r7, r3
   236b0:	2200      	movs	r2, #0
   236b2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   236b4:	230f      	movs	r3, #15
   236b6:	18fb      	adds	r3, r7, r3
   236b8:	2200      	movs	r2, #0
   236ba:	569a      	ldrsb	r2, [r3, r2]
   236bc:	4b41      	ldr	r3, [pc, #260]	; (237c4 <recv+0x178>)
   236be:	0112      	lsls	r2, r2, #4
   236c0:	68b9      	ldr	r1, [r7, #8]
   236c2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   236c4:	230f      	movs	r3, #15
   236c6:	18fb      	adds	r3, r7, r3
   236c8:	781b      	ldrb	r3, [r3, #0]
   236ca:	b25b      	sxtb	r3, r3
   236cc:	4a3d      	ldr	r2, [pc, #244]	; (237c4 <recv+0x178>)
   236ce:	011b      	lsls	r3, r3, #4
   236d0:	18d3      	adds	r3, r2, r3
   236d2:	3304      	adds	r3, #4
   236d4:	220c      	movs	r2, #12
   236d6:	18ba      	adds	r2, r7, r2
   236d8:	8812      	ldrh	r2, [r2, #0]
   236da:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   236dc:	230f      	movs	r3, #15
   236de:	18fb      	adds	r3, r7, r3
   236e0:	781b      	ldrb	r3, [r3, #0]
   236e2:	b25b      	sxtb	r3, r3
   236e4:	4a37      	ldr	r2, [pc, #220]	; (237c4 <recv+0x178>)
   236e6:	011b      	lsls	r3, r3, #4
   236e8:	18d3      	adds	r3, r2, r3
   236ea:	330c      	adds	r3, #12
   236ec:	781b      	ldrb	r3, [r3, #0]
   236ee:	b2db      	uxtb	r3, r3
   236f0:	2b00      	cmp	r3, #0
   236f2:	d15e      	bne.n	237b2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   236f4:	231d      	movs	r3, #29
   236f6:	18fb      	adds	r3, r7, r3
   236f8:	2246      	movs	r2, #70	; 0x46
   236fa:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   236fc:	230f      	movs	r3, #15
   236fe:	18fb      	adds	r3, r7, r3
   23700:	781b      	ldrb	r3, [r3, #0]
   23702:	b25b      	sxtb	r3, r3
   23704:	4a2f      	ldr	r2, [pc, #188]	; (237c4 <recv+0x178>)
   23706:	011b      	lsls	r3, r3, #4
   23708:	18d3      	adds	r3, r2, r3
   2370a:	330c      	adds	r3, #12
   2370c:	2201      	movs	r2, #1
   2370e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   23710:	230f      	movs	r3, #15
   23712:	18fb      	adds	r3, r7, r3
   23714:	781b      	ldrb	r3, [r3, #0]
   23716:	b25b      	sxtb	r3, r3
   23718:	4a2a      	ldr	r2, [pc, #168]	; (237c4 <recv+0x178>)
   2371a:	011b      	lsls	r3, r3, #4
   2371c:	18d3      	adds	r3, r2, r3
   2371e:	330b      	adds	r3, #11
   23720:	781b      	ldrb	r3, [r3, #0]
   23722:	b2db      	uxtb	r3, r3
   23724:	001a      	movs	r2, r3
   23726:	2301      	movs	r3, #1
   23728:	4013      	ands	r3, r2
   2372a:	d003      	beq.n	23734 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2372c:	231d      	movs	r3, #29
   2372e:	18fb      	adds	r3, r7, r3
   23730:	224d      	movs	r2, #77	; 0x4d
   23732:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   23734:	687b      	ldr	r3, [r7, #4]
   23736:	2b00      	cmp	r3, #0
   23738:	d105      	bne.n	23746 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2373a:	2314      	movs	r3, #20
   2373c:	18fb      	adds	r3, r7, r3
   2373e:	2201      	movs	r2, #1
   23740:	4252      	negs	r2, r2
   23742:	601a      	str	r2, [r3, #0]
   23744:	e003      	b.n	2374e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   23746:	2314      	movs	r3, #20
   23748:	18fb      	adds	r3, r7, r3
   2374a:	687a      	ldr	r2, [r7, #4]
   2374c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2374e:	2314      	movs	r3, #20
   23750:	18fb      	adds	r3, r7, r3
   23752:	220f      	movs	r2, #15
   23754:	18ba      	adds	r2, r7, r2
   23756:	7812      	ldrb	r2, [r2, #0]
   23758:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2375a:	230f      	movs	r3, #15
   2375c:	18fb      	adds	r3, r7, r3
   2375e:	781b      	ldrb	r3, [r3, #0]
   23760:	b25b      	sxtb	r3, r3
   23762:	4a18      	ldr	r2, [pc, #96]	; (237c4 <recv+0x178>)
   23764:	011b      	lsls	r3, r3, #4
   23766:	18d3      	adds	r3, r2, r3
   23768:	3306      	adds	r3, #6
   2376a:	881b      	ldrh	r3, [r3, #0]
   2376c:	b29a      	uxth	r2, r3
   2376e:	2314      	movs	r3, #20
   23770:	18fb      	adds	r3, r7, r3
   23772:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   23774:	2314      	movs	r3, #20
   23776:	18fa      	adds	r2, r7, r3
   23778:	231d      	movs	r3, #29
   2377a:	18fb      	adds	r3, r7, r3
   2377c:	7819      	ldrb	r1, [r3, #0]
   2377e:	2300      	movs	r3, #0
   23780:	9302      	str	r3, [sp, #8]
   23782:	2300      	movs	r3, #0
   23784:	9301      	str	r3, [sp, #4]
   23786:	2300      	movs	r3, #0
   23788:	9300      	str	r3, [sp, #0]
   2378a:	2308      	movs	r3, #8
   2378c:	2002      	movs	r0, #2
   2378e:	4c0e      	ldr	r4, [pc, #56]	; (237c8 <recv+0x17c>)
   23790:	47a0      	blx	r4
   23792:	0003      	movs	r3, r0
   23794:	001a      	movs	r2, r3
   23796:	231e      	movs	r3, #30
   23798:	18fb      	adds	r3, r7, r3
   2379a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2379c:	231e      	movs	r3, #30
   2379e:	18fb      	adds	r3, r7, r3
   237a0:	2200      	movs	r2, #0
   237a2:	5e9b      	ldrsh	r3, [r3, r2]
   237a4:	2b00      	cmp	r3, #0
   237a6:	d004      	beq.n	237b2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   237a8:	231e      	movs	r3, #30
   237aa:	18fb      	adds	r3, r7, r3
   237ac:	220e      	movs	r2, #14
   237ae:	4252      	negs	r2, r2
   237b0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   237b2:	231e      	movs	r3, #30
   237b4:	18fb      	adds	r3, r7, r3
   237b6:	2200      	movs	r2, #0
   237b8:	5e9b      	ldrsh	r3, [r3, r2]
}
   237ba:	0018      	movs	r0, r3
   237bc:	46bd      	mov	sp, r7
   237be:	b009      	add	sp, #36	; 0x24
   237c0:	bd90      	pop	{r4, r7, pc}
   237c2:	46c0      	nop			; (mov r8, r8)
   237c4:	20005474 	.word	0x20005474
   237c8:	0001ea91 	.word	0x0001ea91

000237cc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   237cc:	b5b0      	push	{r4, r5, r7, lr}
   237ce:	b088      	sub	sp, #32
   237d0:	af04      	add	r7, sp, #16
   237d2:	0002      	movs	r2, r0
   237d4:	1dfb      	adds	r3, r7, #7
   237d6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   237d8:	230f      	movs	r3, #15
   237da:	18fb      	adds	r3, r7, r3
   237dc:	22fa      	movs	r2, #250	; 0xfa
   237de:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   237e0:	4b43      	ldr	r3, [pc, #268]	; (238f0 <close+0x124>)
   237e2:	0018      	movs	r0, r3
   237e4:	4b43      	ldr	r3, [pc, #268]	; (238f4 <close+0x128>)
   237e6:	4798      	blx	r3
   237e8:	1dfb      	adds	r3, r7, #7
   237ea:	2200      	movs	r2, #0
   237ec:	569a      	ldrsb	r2, [r3, r2]
   237ee:	4b42      	ldr	r3, [pc, #264]	; (238f8 <close+0x12c>)
   237f0:	0011      	movs	r1, r2
   237f2:	0018      	movs	r0, r3
   237f4:	4b3f      	ldr	r3, [pc, #252]	; (238f4 <close+0x128>)
   237f6:	4798      	blx	r3
   237f8:	4b40      	ldr	r3, [pc, #256]	; (238fc <close+0x130>)
   237fa:	0018      	movs	r0, r3
   237fc:	4b3d      	ldr	r3, [pc, #244]	; (238f4 <close+0x128>)
   237fe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   23800:	1dfb      	adds	r3, r7, #7
   23802:	781b      	ldrb	r3, [r3, #0]
   23804:	2b7f      	cmp	r3, #127	; 0x7f
   23806:	d86a      	bhi.n	238de <close+0x112>
   23808:	1dfb      	adds	r3, r7, #7
   2380a:	781b      	ldrb	r3, [r3, #0]
   2380c:	b25b      	sxtb	r3, r3
   2380e:	4a3c      	ldr	r2, [pc, #240]	; (23900 <close+0x134>)
   23810:	011b      	lsls	r3, r3, #4
   23812:	18d3      	adds	r3, r2, r3
   23814:	330a      	adds	r3, #10
   23816:	781b      	ldrb	r3, [r3, #0]
   23818:	b2db      	uxtb	r3, r3
   2381a:	2b01      	cmp	r3, #1
   2381c:	d15f      	bne.n	238de <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2381e:	230e      	movs	r3, #14
   23820:	18fb      	adds	r3, r7, r3
   23822:	2249      	movs	r2, #73	; 0x49
   23824:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   23826:	2308      	movs	r3, #8
   23828:	18fb      	adds	r3, r7, r3
   2382a:	1dfa      	adds	r2, r7, #7
   2382c:	7812      	ldrb	r2, [r2, #0]
   2382e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   23830:	1dfb      	adds	r3, r7, #7
   23832:	781b      	ldrb	r3, [r3, #0]
   23834:	b25b      	sxtb	r3, r3
   23836:	4a32      	ldr	r2, [pc, #200]	; (23900 <close+0x134>)
   23838:	011b      	lsls	r3, r3, #4
   2383a:	18d3      	adds	r3, r2, r3
   2383c:	3306      	adds	r3, #6
   2383e:	881b      	ldrh	r3, [r3, #0]
   23840:	b29a      	uxth	r2, r3
   23842:	2308      	movs	r3, #8
   23844:	18fb      	adds	r3, r7, r3
   23846:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   23848:	1dfb      	adds	r3, r7, #7
   2384a:	781b      	ldrb	r3, [r3, #0]
   2384c:	b25b      	sxtb	r3, r3
   2384e:	4a2c      	ldr	r2, [pc, #176]	; (23900 <close+0x134>)
   23850:	011b      	lsls	r3, r3, #4
   23852:	18d3      	adds	r3, r2, r3
   23854:	330a      	adds	r3, #10
   23856:	2200      	movs	r2, #0
   23858:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2385a:	1dfb      	adds	r3, r7, #7
   2385c:	781b      	ldrb	r3, [r3, #0]
   2385e:	b25b      	sxtb	r3, r3
   23860:	4a27      	ldr	r2, [pc, #156]	; (23900 <close+0x134>)
   23862:	011b      	lsls	r3, r3, #4
   23864:	18d3      	adds	r3, r2, r3
   23866:	3306      	adds	r3, #6
   23868:	2200      	movs	r2, #0
   2386a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2386c:	1dfb      	adds	r3, r7, #7
   2386e:	781b      	ldrb	r3, [r3, #0]
   23870:	b25b      	sxtb	r3, r3
   23872:	4a23      	ldr	r2, [pc, #140]	; (23900 <close+0x134>)
   23874:	011b      	lsls	r3, r3, #4
   23876:	18d3      	adds	r3, r2, r3
   23878:	330b      	adds	r3, #11
   2387a:	781b      	ldrb	r3, [r3, #0]
   2387c:	b2db      	uxtb	r3, r3
   2387e:	001a      	movs	r2, r3
   23880:	2301      	movs	r3, #1
   23882:	4013      	ands	r3, r2
   23884:	d003      	beq.n	2388e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   23886:	230e      	movs	r3, #14
   23888:	18fb      	adds	r3, r7, r3
   2388a:	224e      	movs	r2, #78	; 0x4e
   2388c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2388e:	230f      	movs	r3, #15
   23890:	18fc      	adds	r4, r7, r3
   23892:	2308      	movs	r3, #8
   23894:	18fa      	adds	r2, r7, r3
   23896:	230e      	movs	r3, #14
   23898:	18fb      	adds	r3, r7, r3
   2389a:	7819      	ldrb	r1, [r3, #0]
   2389c:	2300      	movs	r3, #0
   2389e:	9302      	str	r3, [sp, #8]
   238a0:	2300      	movs	r3, #0
   238a2:	9301      	str	r3, [sp, #4]
   238a4:	2300      	movs	r3, #0
   238a6:	9300      	str	r3, [sp, #0]
   238a8:	2304      	movs	r3, #4
   238aa:	2002      	movs	r0, #2
   238ac:	4d15      	ldr	r5, [pc, #84]	; (23904 <close+0x138>)
   238ae:	47a8      	blx	r5
   238b0:	0003      	movs	r3, r0
   238b2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   238b4:	230f      	movs	r3, #15
   238b6:	18fb      	adds	r3, r7, r3
   238b8:	781b      	ldrb	r3, [r3, #0]
   238ba:	b25b      	sxtb	r3, r3
   238bc:	2b00      	cmp	r3, #0
   238be:	d003      	beq.n	238c8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   238c0:	230f      	movs	r3, #15
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	22f7      	movs	r2, #247	; 0xf7
   238c6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   238c8:	1dfb      	adds	r3, r7, #7
   238ca:	781b      	ldrb	r3, [r3, #0]
   238cc:	b25b      	sxtb	r3, r3
   238ce:	011a      	lsls	r2, r3, #4
   238d0:	4b0b      	ldr	r3, [pc, #44]	; (23900 <close+0x134>)
   238d2:	18d3      	adds	r3, r2, r3
   238d4:	2210      	movs	r2, #16
   238d6:	2100      	movs	r1, #0
   238d8:	0018      	movs	r0, r3
   238da:	4b0b      	ldr	r3, [pc, #44]	; (23908 <close+0x13c>)
   238dc:	4798      	blx	r3
	}
	return s8Ret;
   238de:	230f      	movs	r3, #15
   238e0:	18fb      	adds	r3, r7, r3
   238e2:	781b      	ldrb	r3, [r3, #0]
   238e4:	b25b      	sxtb	r3, r3
}
   238e6:	0018      	movs	r0, r3
   238e8:	46bd      	mov	sp, r7
   238ea:	b004      	add	sp, #16
   238ec:	bdb0      	pop	{r4, r5, r7, pc}
   238ee:	46c0      	nop			; (mov r8, r8)
   238f0:	000368ac 	.word	0x000368ac
   238f4:	0001bafd 	.word	0x0001bafd
   238f8:	000368ec 	.word	0x000368ec
   238fc:	000368cc 	.word	0x000368cc
   23900:	20005474 	.word	0x20005474
   23904:	0001ea91 	.word	0x0001ea91
   23908:	0001e831 	.word	0x0001e831

0002390c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2390c:	b580      	push	{r7, lr}
   2390e:	b086      	sub	sp, #24
   23910:	af00      	add	r7, sp, #0
   23912:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   23914:	2300      	movs	r3, #0
   23916:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   23918:	2317      	movs	r3, #23
   2391a:	18fb      	adds	r3, r7, r3
   2391c:	2200      	movs	r2, #0
   2391e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   23920:	2316      	movs	r3, #22
   23922:	18fb      	adds	r3, r7, r3
   23924:	2200      	movs	r2, #0
   23926:	701a      	strb	r2, [r3, #0]
   23928:	e060      	b.n	239ec <nmi_inet_addr+0xe0>
	{
		j = 0;
   2392a:	2315      	movs	r3, #21
   2392c:	18fb      	adds	r3, r7, r3
   2392e:	2200      	movs	r2, #0
   23930:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   23932:	2314      	movs	r3, #20
   23934:	18fb      	adds	r3, r7, r3
   23936:	687a      	ldr	r2, [r7, #4]
   23938:	7812      	ldrb	r2, [r2, #0]
   2393a:	701a      	strb	r2, [r3, #0]
			++j;
   2393c:	2315      	movs	r3, #21
   2393e:	18fb      	adds	r3, r7, r3
   23940:	2215      	movs	r2, #21
   23942:	18ba      	adds	r2, r7, r2
   23944:	7812      	ldrb	r2, [r2, #0]
   23946:	3201      	adds	r2, #1
   23948:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2394a:	2315      	movs	r3, #21
   2394c:	18fb      	adds	r3, r7, r3
   2394e:	781b      	ldrb	r3, [r3, #0]
   23950:	2b04      	cmp	r3, #4
   23952:	d901      	bls.n	23958 <nmi_inet_addr+0x4c>
			{
				return 0;
   23954:	2300      	movs	r3, #0
   23956:	e057      	b.n	23a08 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   23958:	2314      	movs	r3, #20
   2395a:	18fb      	adds	r3, r7, r3
   2395c:	781b      	ldrb	r3, [r3, #0]
   2395e:	2b2e      	cmp	r3, #46	; 0x2e
   23960:	d004      	beq.n	2396c <nmi_inet_addr+0x60>
   23962:	2314      	movs	r3, #20
   23964:	18fb      	adds	r3, r7, r3
   23966:	781b      	ldrb	r3, [r3, #0]
   23968:	2b00      	cmp	r3, #0
   2396a:	d10d      	bne.n	23988 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2396c:	2316      	movs	r3, #22
   2396e:	18fb      	adds	r3, r7, r3
   23970:	781b      	ldrb	r3, [r3, #0]
   23972:	220c      	movs	r2, #12
   23974:	18ba      	adds	r2, r7, r2
   23976:	2117      	movs	r1, #23
   23978:	1879      	adds	r1, r7, r1
   2397a:	7809      	ldrb	r1, [r1, #0]
   2397c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2397e:	2317      	movs	r3, #23
   23980:	18fb      	adds	r3, r7, r3
   23982:	2200      	movs	r2, #0
   23984:	701a      	strb	r2, [r3, #0]
   23986:	e01d      	b.n	239c4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   23988:	2314      	movs	r3, #20
   2398a:	18fb      	adds	r3, r7, r3
   2398c:	781b      	ldrb	r3, [r3, #0]
   2398e:	2b2f      	cmp	r3, #47	; 0x2f
   23990:	d916      	bls.n	239c0 <nmi_inet_addr+0xb4>
   23992:	2314      	movs	r3, #20
   23994:	18fb      	adds	r3, r7, r3
   23996:	781b      	ldrb	r3, [r3, #0]
   23998:	2b39      	cmp	r3, #57	; 0x39
   2399a:	d811      	bhi.n	239c0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2399c:	2317      	movs	r3, #23
   2399e:	18fb      	adds	r3, r7, r3
   239a0:	781b      	ldrb	r3, [r3, #0]
   239a2:	1c1a      	adds	r2, r3, #0
   239a4:	0092      	lsls	r2, r2, #2
   239a6:	18d3      	adds	r3, r2, r3
   239a8:	18db      	adds	r3, r3, r3
   239aa:	b2da      	uxtb	r2, r3
   239ac:	2314      	movs	r3, #20
   239ae:	18fb      	adds	r3, r7, r3
   239b0:	781b      	ldrb	r3, [r3, #0]
   239b2:	18d3      	adds	r3, r2, r3
   239b4:	b2da      	uxtb	r2, r3
   239b6:	2317      	movs	r3, #23
   239b8:	18fb      	adds	r3, r7, r3
   239ba:	3a30      	subs	r2, #48	; 0x30
   239bc:	701a      	strb	r2, [r3, #0]
   239be:	e001      	b.n	239c4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   239c0:	2300      	movs	r3, #0
   239c2:	e021      	b.n	23a08 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   239c4:	687b      	ldr	r3, [r7, #4]
   239c6:	3301      	adds	r3, #1
   239c8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   239ca:	2314      	movs	r3, #20
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	781b      	ldrb	r3, [r3, #0]
   239d0:	2b2e      	cmp	r3, #46	; 0x2e
   239d2:	d004      	beq.n	239de <nmi_inet_addr+0xd2>
   239d4:	2314      	movs	r3, #20
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	781b      	ldrb	r3, [r3, #0]
   239da:	2b00      	cmp	r3, #0
   239dc:	d1a9      	bne.n	23932 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   239de:	2316      	movs	r3, #22
   239e0:	18fb      	adds	r3, r7, r3
   239e2:	2216      	movs	r2, #22
   239e4:	18ba      	adds	r2, r7, r2
   239e6:	7812      	ldrb	r2, [r2, #0]
   239e8:	3201      	adds	r2, #1
   239ea:	701a      	strb	r2, [r3, #0]
   239ec:	2316      	movs	r3, #22
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	781b      	ldrb	r3, [r3, #0]
   239f2:	2b03      	cmp	r3, #3
   239f4:	d999      	bls.n	2392a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   239f6:	230c      	movs	r3, #12
   239f8:	18f9      	adds	r1, r7, r3
   239fa:	2310      	movs	r3, #16
   239fc:	18fb      	adds	r3, r7, r3
   239fe:	2204      	movs	r2, #4
   23a00:	0018      	movs	r0, r3
   23a02:	4b03      	ldr	r3, [pc, #12]	; (23a10 <nmi_inet_addr+0x104>)
   23a04:	4798      	blx	r3
	return u32IP;
   23a06:	693b      	ldr	r3, [r7, #16]
}
   23a08:	0018      	movs	r0, r3
   23a0a:	46bd      	mov	sp, r7
   23a0c:	b006      	add	sp, #24
   23a0e:	bd80      	pop	{r7, pc}
   23a10:	0001e7f5 	.word	0x0001e7f5

00023a14 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   23a14:	b5b0      	push	{r4, r5, r7, lr}
   23a16:	b088      	sub	sp, #32
   23a18:	af04      	add	r7, sp, #16
   23a1a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   23a1c:	230f      	movs	r3, #15
   23a1e:	18fb      	adds	r3, r7, r3
   23a20:	22fa      	movs	r2, #250	; 0xfa
   23a22:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   23a24:	687b      	ldr	r3, [r7, #4]
   23a26:	0018      	movs	r0, r3
   23a28:	4b14      	ldr	r3, [pc, #80]	; (23a7c <gethostbyname+0x68>)
   23a2a:	4798      	blx	r3
   23a2c:	0003      	movs	r3, r0
   23a2e:	001a      	movs	r2, r3
   23a30:	230e      	movs	r3, #14
   23a32:	18fb      	adds	r3, r7, r3
   23a34:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   23a36:	230e      	movs	r3, #14
   23a38:	18fb      	adds	r3, r7, r3
   23a3a:	781b      	ldrb	r3, [r3, #0]
   23a3c:	2b40      	cmp	r3, #64	; 0x40
   23a3e:	d815      	bhi.n	23a6c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   23a40:	230e      	movs	r3, #14
   23a42:	18fb      	adds	r3, r7, r3
   23a44:	781b      	ldrb	r3, [r3, #0]
   23a46:	b29b      	uxth	r3, r3
   23a48:	3301      	adds	r3, #1
   23a4a:	b299      	uxth	r1, r3
   23a4c:	230f      	movs	r3, #15
   23a4e:	18fc      	adds	r4, r7, r3
   23a50:	687a      	ldr	r2, [r7, #4]
   23a52:	2300      	movs	r3, #0
   23a54:	9302      	str	r3, [sp, #8]
   23a56:	2300      	movs	r3, #0
   23a58:	9301      	str	r3, [sp, #4]
   23a5a:	2300      	movs	r3, #0
   23a5c:	9300      	str	r3, [sp, #0]
   23a5e:	000b      	movs	r3, r1
   23a60:	214a      	movs	r1, #74	; 0x4a
   23a62:	2002      	movs	r0, #2
   23a64:	4d06      	ldr	r5, [pc, #24]	; (23a80 <gethostbyname+0x6c>)
   23a66:	47a8      	blx	r5
   23a68:	0003      	movs	r3, r0
   23a6a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   23a6c:	230f      	movs	r3, #15
   23a6e:	18fb      	adds	r3, r7, r3
   23a70:	781b      	ldrb	r3, [r3, #0]
   23a72:	b25b      	sxtb	r3, r3
}
   23a74:	0018      	movs	r0, r3
   23a76:	46bd      	mov	sp, r7
   23a78:	b004      	add	sp, #16
   23a7a:	bdb0      	pop	{r4, r5, r7, pc}
   23a7c:	0001e86f 	.word	0x0001e86f
   23a80:	0001ea91 	.word	0x0001ea91

00023a84 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   23a84:	b580      	push	{r7, lr}
   23a86:	b082      	sub	sp, #8
   23a88:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   23a8a:	003b      	movs	r3, r7
   23a8c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   23a8e:	687b      	ldr	r3, [r7, #4]
   23a90:	22b9      	movs	r2, #185	; 0xb9
   23a92:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   23a94:	4b13      	ldr	r3, [pc, #76]	; (23ae4 <spi_flash_enter_low_power_mode+0x60>)
   23a96:	2100      	movs	r1, #0
   23a98:	0018      	movs	r0, r3
   23a9a:	4b13      	ldr	r3, [pc, #76]	; (23ae8 <spi_flash_enter_low_power_mode+0x64>)
   23a9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   23a9e:	687b      	ldr	r3, [r7, #4]
   23aa0:	781b      	ldrb	r3, [r3, #0]
   23aa2:	001a      	movs	r2, r3
   23aa4:	4b11      	ldr	r3, [pc, #68]	; (23aec <spi_flash_enter_low_power_mode+0x68>)
   23aa6:	0011      	movs	r1, r2
   23aa8:	0018      	movs	r0, r3
   23aaa:	4b0f      	ldr	r3, [pc, #60]	; (23ae8 <spi_flash_enter_low_power_mode+0x64>)
   23aac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   23aae:	4b10      	ldr	r3, [pc, #64]	; (23af0 <spi_flash_enter_low_power_mode+0x6c>)
   23ab0:	2101      	movs	r1, #1
   23ab2:	0018      	movs	r0, r3
   23ab4:	4b0c      	ldr	r3, [pc, #48]	; (23ae8 <spi_flash_enter_low_power_mode+0x64>)
   23ab6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   23ab8:	4b0e      	ldr	r3, [pc, #56]	; (23af4 <spi_flash_enter_low_power_mode+0x70>)
   23aba:	2100      	movs	r1, #0
   23abc:	0018      	movs	r0, r3
   23abe:	4b0a      	ldr	r3, [pc, #40]	; (23ae8 <spi_flash_enter_low_power_mode+0x64>)
   23ac0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   23ac2:	4b0d      	ldr	r3, [pc, #52]	; (23af8 <spi_flash_enter_low_power_mode+0x74>)
   23ac4:	2181      	movs	r1, #129	; 0x81
   23ac6:	0018      	movs	r0, r3
   23ac8:	4b07      	ldr	r3, [pc, #28]	; (23ae8 <spi_flash_enter_low_power_mode+0x64>)
   23aca:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   23acc:	46c0      	nop			; (mov r8, r8)
   23ace:	4b0b      	ldr	r3, [pc, #44]	; (23afc <spi_flash_enter_low_power_mode+0x78>)
   23ad0:	0018      	movs	r0, r3
   23ad2:	4b0b      	ldr	r3, [pc, #44]	; (23b00 <spi_flash_enter_low_power_mode+0x7c>)
   23ad4:	4798      	blx	r3
   23ad6:	0003      	movs	r3, r0
   23ad8:	2b01      	cmp	r3, #1
   23ada:	d1f8      	bne.n	23ace <spi_flash_enter_low_power_mode+0x4a>
}
   23adc:	46c0      	nop			; (mov r8, r8)
   23ade:	46bd      	mov	sp, r7
   23ae0:	b002      	add	sp, #8
   23ae2:	bd80      	pop	{r7, pc}
   23ae4:	00010208 	.word	0x00010208
   23ae8:	000208e5 	.word	0x000208e5
   23aec:	0001020c 	.word	0x0001020c
   23af0:	00010214 	.word	0x00010214
   23af4:	0001021c 	.word	0x0001021c
   23af8:	00010204 	.word	0x00010204
   23afc:	00010218 	.word	0x00010218
   23b00:	000208a1 	.word	0x000208a1

00023b04 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   23b04:	b580      	push	{r7, lr}
   23b06:	b082      	sub	sp, #8
   23b08:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   23b0a:	003b      	movs	r3, r7
   23b0c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   23b0e:	687b      	ldr	r3, [r7, #4]
   23b10:	22ab      	movs	r2, #171	; 0xab
   23b12:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   23b14:	4b13      	ldr	r3, [pc, #76]	; (23b64 <spi_flash_leave_low_power_mode+0x60>)
   23b16:	2100      	movs	r1, #0
   23b18:	0018      	movs	r0, r3
   23b1a:	4b13      	ldr	r3, [pc, #76]	; (23b68 <spi_flash_leave_low_power_mode+0x64>)
   23b1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   23b1e:	687b      	ldr	r3, [r7, #4]
   23b20:	781b      	ldrb	r3, [r3, #0]
   23b22:	001a      	movs	r2, r3
   23b24:	4b11      	ldr	r3, [pc, #68]	; (23b6c <spi_flash_leave_low_power_mode+0x68>)
   23b26:	0011      	movs	r1, r2
   23b28:	0018      	movs	r0, r3
   23b2a:	4b0f      	ldr	r3, [pc, #60]	; (23b68 <spi_flash_leave_low_power_mode+0x64>)
   23b2c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   23b2e:	4b10      	ldr	r3, [pc, #64]	; (23b70 <spi_flash_leave_low_power_mode+0x6c>)
   23b30:	2101      	movs	r1, #1
   23b32:	0018      	movs	r0, r3
   23b34:	4b0c      	ldr	r3, [pc, #48]	; (23b68 <spi_flash_leave_low_power_mode+0x64>)
   23b36:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   23b38:	4b0e      	ldr	r3, [pc, #56]	; (23b74 <spi_flash_leave_low_power_mode+0x70>)
   23b3a:	2100      	movs	r1, #0
   23b3c:	0018      	movs	r0, r3
   23b3e:	4b0a      	ldr	r3, [pc, #40]	; (23b68 <spi_flash_leave_low_power_mode+0x64>)
   23b40:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   23b42:	4b0d      	ldr	r3, [pc, #52]	; (23b78 <spi_flash_leave_low_power_mode+0x74>)
   23b44:	2181      	movs	r1, #129	; 0x81
   23b46:	0018      	movs	r0, r3
   23b48:	4b07      	ldr	r3, [pc, #28]	; (23b68 <spi_flash_leave_low_power_mode+0x64>)
   23b4a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   23b4c:	46c0      	nop			; (mov r8, r8)
   23b4e:	4b0b      	ldr	r3, [pc, #44]	; (23b7c <spi_flash_leave_low_power_mode+0x78>)
   23b50:	0018      	movs	r0, r3
   23b52:	4b0b      	ldr	r3, [pc, #44]	; (23b80 <spi_flash_leave_low_power_mode+0x7c>)
   23b54:	4798      	blx	r3
   23b56:	0003      	movs	r3, r0
   23b58:	2b01      	cmp	r3, #1
   23b5a:	d1f8      	bne.n	23b4e <spi_flash_leave_low_power_mode+0x4a>
}
   23b5c:	46c0      	nop			; (mov r8, r8)
   23b5e:	46bd      	mov	sp, r7
   23b60:	b002      	add	sp, #8
   23b62:	bd80      	pop	{r7, pc}
   23b64:	00010208 	.word	0x00010208
   23b68:	000208e5 	.word	0x000208e5
   23b6c:	0001020c 	.word	0x0001020c
   23b70:	00010214 	.word	0x00010214
   23b74:	0001021c 	.word	0x0001021c
   23b78:	00010204 	.word	0x00010204
   23b7c:	00010218 	.word	0x00010218
   23b80:	000208a1 	.word	0x000208a1

00023b84 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   23b84:	b590      	push	{r4, r7, lr}
   23b86:	b085      	sub	sp, #20
   23b88:	af00      	add	r7, sp, #0
   23b8a:	0002      	movs	r2, r0
   23b8c:	1dfb      	adds	r3, r7, #7
   23b8e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   23b90:	230f      	movs	r3, #15
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	2200      	movs	r2, #0
   23b96:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   23b98:	4b24      	ldr	r3, [pc, #144]	; (23c2c <spi_flash_enable+0xa8>)
   23b9a:	4798      	blx	r3
   23b9c:	0003      	movs	r3, r0
   23b9e:	051b      	lsls	r3, r3, #20
   23ba0:	0d1b      	lsrs	r3, r3, #20
   23ba2:	4a23      	ldr	r2, [pc, #140]	; (23c30 <spi_flash_enable+0xac>)
   23ba4:	4293      	cmp	r3, r2
   23ba6:	d938      	bls.n	23c1a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   23ba8:	230f      	movs	r3, #15
   23baa:	18fc      	adds	r4, r7, r3
   23bac:	2308      	movs	r3, #8
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	4a20      	ldr	r2, [pc, #128]	; (23c34 <spi_flash_enable+0xb0>)
   23bb2:	0019      	movs	r1, r3
   23bb4:	0010      	movs	r0, r2
   23bb6:	4b20      	ldr	r3, [pc, #128]	; (23c38 <spi_flash_enable+0xb4>)
   23bb8:	4798      	blx	r3
   23bba:	0003      	movs	r3, r0
   23bbc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   23bbe:	230f      	movs	r3, #15
   23bc0:	18fb      	adds	r3, r7, r3
   23bc2:	781b      	ldrb	r3, [r3, #0]
   23bc4:	b25b      	sxtb	r3, r3
   23bc6:	2b00      	cmp	r3, #0
   23bc8:	d126      	bne.n	23c18 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   23bca:	68bb      	ldr	r3, [r7, #8]
   23bcc:	4a1b      	ldr	r2, [pc, #108]	; (23c3c <spi_flash_enable+0xb8>)
   23bce:	4013      	ands	r3, r2
   23bd0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   23bd2:	68bb      	ldr	r3, [r7, #8]
   23bd4:	4a1a      	ldr	r2, [pc, #104]	; (23c40 <spi_flash_enable+0xbc>)
   23bd6:	4313      	orrs	r3, r2
   23bd8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   23bda:	68bb      	ldr	r3, [r7, #8]
   23bdc:	4a15      	ldr	r2, [pc, #84]	; (23c34 <spi_flash_enable+0xb0>)
   23bde:	0019      	movs	r1, r3
   23be0:	0010      	movs	r0, r2
   23be2:	4b18      	ldr	r3, [pc, #96]	; (23c44 <spi_flash_enable+0xc0>)
   23be4:	4798      	blx	r3
		if(enable) {
   23be6:	1dfb      	adds	r3, r7, #7
   23be8:	781b      	ldrb	r3, [r3, #0]
   23bea:	2b00      	cmp	r3, #0
   23bec:	d002      	beq.n	23bf4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   23bee:	4b16      	ldr	r3, [pc, #88]	; (23c48 <spi_flash_enable+0xc4>)
   23bf0:	4798      	blx	r3
   23bf2:	e001      	b.n	23bf8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   23bf4:	4b15      	ldr	r3, [pc, #84]	; (23c4c <spi_flash_enable+0xc8>)
   23bf6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   23bf8:	68bb      	ldr	r3, [r7, #8]
   23bfa:	4a10      	ldr	r2, [pc, #64]	; (23c3c <spi_flash_enable+0xb8>)
   23bfc:	4013      	ands	r3, r2
   23bfe:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   23c00:	68bb      	ldr	r3, [r7, #8]
   23c02:	2280      	movs	r2, #128	; 0x80
   23c04:	0252      	lsls	r2, r2, #9
   23c06:	4313      	orrs	r3, r2
   23c08:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   23c0a:	68bb      	ldr	r3, [r7, #8]
   23c0c:	4a09      	ldr	r2, [pc, #36]	; (23c34 <spi_flash_enable+0xb0>)
   23c0e:	0019      	movs	r1, r3
   23c10:	0010      	movs	r0, r2
   23c12:	4b0c      	ldr	r3, [pc, #48]	; (23c44 <spi_flash_enable+0xc0>)
   23c14:	4798      	blx	r3
   23c16:	e000      	b.n	23c1a <spi_flash_enable+0x96>
			goto ERR1;
   23c18:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   23c1a:	230f      	movs	r3, #15
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	781b      	ldrb	r3, [r3, #0]
   23c20:	b25b      	sxtb	r3, r3
}
   23c22:	0018      	movs	r0, r3
   23c24:	46bd      	mov	sp, r7
   23c26:	b005      	add	sp, #20
   23c28:	bd90      	pop	{r4, r7, pc}
   23c2a:	46c0      	nop			; (mov r8, r8)
   23c2c:	000201c1 	.word	0x000201c1
   23c30:	0000039f 	.word	0x0000039f
   23c34:	00001410 	.word	0x00001410
   23c38:	000208c1 	.word	0x000208c1
   23c3c:	f8888fff 	.word	0xf8888fff
   23c40:	01111000 	.word	0x01111000
   23c44:	000208e5 	.word	0x000208e5
   23c48:	00023b05 	.word	0x00023b05
   23c4c:	00023a85 	.word	0x00023a85

00023c50 <mem_test_unit_ready>:
   23c50:	b580      	push	{r7, lr}
   23c52:	b084      	sub	sp, #16
   23c54:	af00      	add	r7, sp, #0
   23c56:	0002      	movs	r2, r0
   23c58:	1dfb      	adds	r3, r7, #7
   23c5a:	701a      	strb	r2, [r3, #0]
   23c5c:	1dfb      	adds	r3, r7, #7
   23c5e:	781b      	ldrb	r3, [r3, #0]
   23c60:	2b00      	cmp	r3, #0
   23c62:	d108      	bne.n	23c76 <mem_test_unit_ready+0x26>
   23c64:	1dfb      	adds	r3, r7, #7
   23c66:	781a      	ldrb	r2, [r3, #0]
   23c68:	4b08      	ldr	r3, [pc, #32]	; (23c8c <mem_test_unit_ready+0x3c>)
   23c6a:	0152      	lsls	r2, r2, #5
   23c6c:	58d3      	ldr	r3, [r2, r3]
   23c6e:	4798      	blx	r3
   23c70:	0003      	movs	r3, r0
   23c72:	001a      	movs	r2, r3
   23c74:	e000      	b.n	23c78 <mem_test_unit_ready+0x28>
   23c76:	2201      	movs	r2, #1
   23c78:	230f      	movs	r3, #15
   23c7a:	18fb      	adds	r3, r7, r3
   23c7c:	701a      	strb	r2, [r3, #0]
   23c7e:	230f      	movs	r3, #15
   23c80:	18fb      	adds	r3, r7, r3
   23c82:	781b      	ldrb	r3, [r3, #0]
   23c84:	0018      	movs	r0, r3
   23c86:	46bd      	mov	sp, r7
   23c88:	b004      	add	sp, #16
   23c8a:	bd80      	pop	{r7, pc}
   23c8c:	00036978 	.word	0x00036978

00023c90 <mem_read_capacity>:
   23c90:	b580      	push	{r7, lr}
   23c92:	b084      	sub	sp, #16
   23c94:	af00      	add	r7, sp, #0
   23c96:	0002      	movs	r2, r0
   23c98:	6039      	str	r1, [r7, #0]
   23c9a:	1dfb      	adds	r3, r7, #7
   23c9c:	701a      	strb	r2, [r3, #0]
   23c9e:	1dfb      	adds	r3, r7, #7
   23ca0:	781b      	ldrb	r3, [r3, #0]
   23ca2:	2b00      	cmp	r3, #0
   23ca4:	d10c      	bne.n	23cc0 <mem_read_capacity+0x30>
   23ca6:	1dfb      	adds	r3, r7, #7
   23ca8:	781b      	ldrb	r3, [r3, #0]
   23caa:	4a0b      	ldr	r2, [pc, #44]	; (23cd8 <mem_read_capacity+0x48>)
   23cac:	015b      	lsls	r3, r3, #5
   23cae:	18d3      	adds	r3, r2, r3
   23cb0:	3304      	adds	r3, #4
   23cb2:	681b      	ldr	r3, [r3, #0]
   23cb4:	683a      	ldr	r2, [r7, #0]
   23cb6:	0010      	movs	r0, r2
   23cb8:	4798      	blx	r3
   23cba:	0003      	movs	r3, r0
   23cbc:	001a      	movs	r2, r3
   23cbe:	e000      	b.n	23cc2 <mem_read_capacity+0x32>
   23cc0:	2201      	movs	r2, #1
   23cc2:	230f      	movs	r3, #15
   23cc4:	18fb      	adds	r3, r7, r3
   23cc6:	701a      	strb	r2, [r3, #0]
   23cc8:	230f      	movs	r3, #15
   23cca:	18fb      	adds	r3, r7, r3
   23ccc:	781b      	ldrb	r3, [r3, #0]
   23cce:	0018      	movs	r0, r3
   23cd0:	46bd      	mov	sp, r7
   23cd2:	b004      	add	sp, #16
   23cd4:	bd80      	pop	{r7, pc}
   23cd6:	46c0      	nop			; (mov r8, r8)
   23cd8:	00036978 	.word	0x00036978

00023cdc <mem_sector_size>:
   23cdc:	b580      	push	{r7, lr}
   23cde:	b084      	sub	sp, #16
   23ce0:	af00      	add	r7, sp, #0
   23ce2:	0002      	movs	r2, r0
   23ce4:	1dfb      	adds	r3, r7, #7
   23ce6:	701a      	strb	r2, [r3, #0]
   23ce8:	1dfb      	adds	r3, r7, #7
   23cea:	781b      	ldrb	r3, [r3, #0]
   23cec:	425a      	negs	r2, r3
   23cee:	4153      	adcs	r3, r2
   23cf0:	b2da      	uxtb	r2, r3
   23cf2:	230f      	movs	r3, #15
   23cf4:	18fb      	adds	r3, r7, r3
   23cf6:	701a      	strb	r2, [r3, #0]
   23cf8:	230f      	movs	r3, #15
   23cfa:	18fb      	adds	r3, r7, r3
   23cfc:	781b      	ldrb	r3, [r3, #0]
   23cfe:	0018      	movs	r0, r3
   23d00:	46bd      	mov	sp, r7
   23d02:	b004      	add	sp, #16
   23d04:	bd80      	pop	{r7, pc}
	...

00023d08 <mem_wr_protect>:
   23d08:	b580      	push	{r7, lr}
   23d0a:	b084      	sub	sp, #16
   23d0c:	af00      	add	r7, sp, #0
   23d0e:	0002      	movs	r2, r0
   23d10:	1dfb      	adds	r3, r7, #7
   23d12:	701a      	strb	r2, [r3, #0]
   23d14:	1dfb      	adds	r3, r7, #7
   23d16:	781b      	ldrb	r3, [r3, #0]
   23d18:	2b00      	cmp	r3, #0
   23d1a:	d109      	bne.n	23d30 <mem_wr_protect+0x28>
   23d1c:	1dfb      	adds	r3, r7, #7
   23d1e:	781b      	ldrb	r3, [r3, #0]
   23d20:	4a0a      	ldr	r2, [pc, #40]	; (23d4c <mem_wr_protect+0x44>)
   23d22:	015b      	lsls	r3, r3, #5
   23d24:	18d3      	adds	r3, r2, r3
   23d26:	330c      	adds	r3, #12
   23d28:	681b      	ldr	r3, [r3, #0]
   23d2a:	4798      	blx	r3
   23d2c:	1e03      	subs	r3, r0, #0
   23d2e:	d001      	beq.n	23d34 <mem_wr_protect+0x2c>
   23d30:	2201      	movs	r2, #1
   23d32:	e000      	b.n	23d36 <mem_wr_protect+0x2e>
   23d34:	2200      	movs	r2, #0
   23d36:	230f      	movs	r3, #15
   23d38:	18fb      	adds	r3, r7, r3
   23d3a:	701a      	strb	r2, [r3, #0]
   23d3c:	230f      	movs	r3, #15
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	781b      	ldrb	r3, [r3, #0]
   23d42:	0018      	movs	r0, r3
   23d44:	46bd      	mov	sp, r7
   23d46:	b004      	add	sp, #16
   23d48:	bd80      	pop	{r7, pc}
   23d4a:	46c0      	nop			; (mov r8, r8)
   23d4c:	00036978 	.word	0x00036978

00023d50 <memory_2_ram>:
   23d50:	b580      	push	{r7, lr}
   23d52:	b086      	sub	sp, #24
   23d54:	af00      	add	r7, sp, #0
   23d56:	60b9      	str	r1, [r7, #8]
   23d58:	607a      	str	r2, [r7, #4]
   23d5a:	230f      	movs	r3, #15
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	1c02      	adds	r2, r0, #0
   23d60:	701a      	strb	r2, [r3, #0]
   23d62:	230f      	movs	r3, #15
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	781b      	ldrb	r3, [r3, #0]
   23d68:	2b00      	cmp	r3, #0
   23d6a:	d10e      	bne.n	23d8a <memory_2_ram+0x3a>
   23d6c:	230f      	movs	r3, #15
   23d6e:	18fb      	adds	r3, r7, r3
   23d70:	781b      	ldrb	r3, [r3, #0]
   23d72:	4a0b      	ldr	r2, [pc, #44]	; (23da0 <memory_2_ram+0x50>)
   23d74:	015b      	lsls	r3, r3, #5
   23d76:	18d3      	adds	r3, r2, r3
   23d78:	3314      	adds	r3, #20
   23d7a:	681b      	ldr	r3, [r3, #0]
   23d7c:	6879      	ldr	r1, [r7, #4]
   23d7e:	68ba      	ldr	r2, [r7, #8]
   23d80:	0010      	movs	r0, r2
   23d82:	4798      	blx	r3
   23d84:	0003      	movs	r3, r0
   23d86:	001a      	movs	r2, r3
   23d88:	e000      	b.n	23d8c <memory_2_ram+0x3c>
   23d8a:	2201      	movs	r2, #1
   23d8c:	2317      	movs	r3, #23
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	701a      	strb	r2, [r3, #0]
   23d92:	2317      	movs	r3, #23
   23d94:	18fb      	adds	r3, r7, r3
   23d96:	781b      	ldrb	r3, [r3, #0]
   23d98:	0018      	movs	r0, r3
   23d9a:	46bd      	mov	sp, r7
   23d9c:	b006      	add	sp, #24
   23d9e:	bd80      	pop	{r7, pc}
   23da0:	00036978 	.word	0x00036978

00023da4 <ram_2_memory>:
   23da4:	b580      	push	{r7, lr}
   23da6:	b086      	sub	sp, #24
   23da8:	af00      	add	r7, sp, #0
   23daa:	60b9      	str	r1, [r7, #8]
   23dac:	607a      	str	r2, [r7, #4]
   23dae:	230f      	movs	r3, #15
   23db0:	18fb      	adds	r3, r7, r3
   23db2:	1c02      	adds	r2, r0, #0
   23db4:	701a      	strb	r2, [r3, #0]
   23db6:	230f      	movs	r3, #15
   23db8:	18fb      	adds	r3, r7, r3
   23dba:	781b      	ldrb	r3, [r3, #0]
   23dbc:	2b00      	cmp	r3, #0
   23dbe:	d10e      	bne.n	23dde <ram_2_memory+0x3a>
   23dc0:	230f      	movs	r3, #15
   23dc2:	18fb      	adds	r3, r7, r3
   23dc4:	781b      	ldrb	r3, [r3, #0]
   23dc6:	4a0b      	ldr	r2, [pc, #44]	; (23df4 <ram_2_memory+0x50>)
   23dc8:	015b      	lsls	r3, r3, #5
   23dca:	18d3      	adds	r3, r2, r3
   23dcc:	3318      	adds	r3, #24
   23dce:	681b      	ldr	r3, [r3, #0]
   23dd0:	6879      	ldr	r1, [r7, #4]
   23dd2:	68ba      	ldr	r2, [r7, #8]
   23dd4:	0010      	movs	r0, r2
   23dd6:	4798      	blx	r3
   23dd8:	0003      	movs	r3, r0
   23dda:	001a      	movs	r2, r3
   23ddc:	e000      	b.n	23de0 <ram_2_memory+0x3c>
   23dde:	2201      	movs	r2, #1
   23de0:	2317      	movs	r3, #23
   23de2:	18fb      	adds	r3, r7, r3
   23de4:	701a      	strb	r2, [r3, #0]
   23de6:	2317      	movs	r3, #23
   23de8:	18fb      	adds	r3, r7, r3
   23dea:	781b      	ldrb	r3, [r3, #0]
   23dec:	0018      	movs	r0, r3
   23dee:	46bd      	mov	sp, r7
   23df0:	b006      	add	sp, #24
   23df2:	bd80      	pop	{r7, pc}
   23df4:	00036978 	.word	0x00036978

00023df8 <cpu_irq_enter_critical>:
   23df8:	b580      	push	{r7, lr}
   23dfa:	b082      	sub	sp, #8
   23dfc:	af00      	add	r7, sp, #0
   23dfe:	4b10      	ldr	r3, [pc, #64]	; (23e40 <cpu_irq_enter_critical+0x48>)
   23e00:	681b      	ldr	r3, [r3, #0]
   23e02:	2b00      	cmp	r3, #0
   23e04:	d112      	bne.n	23e2c <cpu_irq_enter_critical+0x34>
   23e06:	f3ef 8310 	mrs	r3, PRIMASK
   23e0a:	607b      	str	r3, [r7, #4]
   23e0c:	687b      	ldr	r3, [r7, #4]
   23e0e:	2b00      	cmp	r3, #0
   23e10:	d109      	bne.n	23e26 <cpu_irq_enter_critical+0x2e>
   23e12:	b672      	cpsid	i
   23e14:	f3bf 8f5f 	dmb	sy
   23e18:	4b0a      	ldr	r3, [pc, #40]	; (23e44 <cpu_irq_enter_critical+0x4c>)
   23e1a:	2200      	movs	r2, #0
   23e1c:	701a      	strb	r2, [r3, #0]
   23e1e:	4b0a      	ldr	r3, [pc, #40]	; (23e48 <cpu_irq_enter_critical+0x50>)
   23e20:	2201      	movs	r2, #1
   23e22:	701a      	strb	r2, [r3, #0]
   23e24:	e002      	b.n	23e2c <cpu_irq_enter_critical+0x34>
   23e26:	4b08      	ldr	r3, [pc, #32]	; (23e48 <cpu_irq_enter_critical+0x50>)
   23e28:	2200      	movs	r2, #0
   23e2a:	701a      	strb	r2, [r3, #0]
   23e2c:	4b04      	ldr	r3, [pc, #16]	; (23e40 <cpu_irq_enter_critical+0x48>)
   23e2e:	681b      	ldr	r3, [r3, #0]
   23e30:	1c5a      	adds	r2, r3, #1
   23e32:	4b03      	ldr	r3, [pc, #12]	; (23e40 <cpu_irq_enter_critical+0x48>)
   23e34:	601a      	str	r2, [r3, #0]
   23e36:	46c0      	nop			; (mov r8, r8)
   23e38:	46bd      	mov	sp, r7
   23e3a:	b002      	add	sp, #8
   23e3c:	bd80      	pop	{r7, pc}
   23e3e:	46c0      	nop			; (mov r8, r8)
   23e40:	20003d10 	.word	0x20003d10
   23e44:	20000106 	.word	0x20000106
   23e48:	20003d14 	.word	0x20003d14

00023e4c <cpu_irq_leave_critical>:
   23e4c:	b580      	push	{r7, lr}
   23e4e:	af00      	add	r7, sp, #0
   23e50:	4b0b      	ldr	r3, [pc, #44]	; (23e80 <cpu_irq_leave_critical+0x34>)
   23e52:	681b      	ldr	r3, [r3, #0]
   23e54:	1e5a      	subs	r2, r3, #1
   23e56:	4b0a      	ldr	r3, [pc, #40]	; (23e80 <cpu_irq_leave_critical+0x34>)
   23e58:	601a      	str	r2, [r3, #0]
   23e5a:	4b09      	ldr	r3, [pc, #36]	; (23e80 <cpu_irq_leave_critical+0x34>)
   23e5c:	681b      	ldr	r3, [r3, #0]
   23e5e:	2b00      	cmp	r3, #0
   23e60:	d10a      	bne.n	23e78 <cpu_irq_leave_critical+0x2c>
   23e62:	4b08      	ldr	r3, [pc, #32]	; (23e84 <cpu_irq_leave_critical+0x38>)
   23e64:	781b      	ldrb	r3, [r3, #0]
   23e66:	b2db      	uxtb	r3, r3
   23e68:	2b00      	cmp	r3, #0
   23e6a:	d005      	beq.n	23e78 <cpu_irq_leave_critical+0x2c>
   23e6c:	4b06      	ldr	r3, [pc, #24]	; (23e88 <cpu_irq_leave_critical+0x3c>)
   23e6e:	2201      	movs	r2, #1
   23e70:	701a      	strb	r2, [r3, #0]
   23e72:	f3bf 8f5f 	dmb	sy
   23e76:	b662      	cpsie	i
   23e78:	46c0      	nop			; (mov r8, r8)
   23e7a:	46bd      	mov	sp, r7
   23e7c:	bd80      	pop	{r7, pc}
   23e7e:	46c0      	nop			; (mov r8, r8)
   23e80:	20003d10 	.word	0x20003d10
   23e84:	20003d14 	.word	0x20003d14
   23e88:	20000106 	.word	0x20000106

00023e8c <system_pinmux_get_group_from_gpio_pin>:
{
   23e8c:	b580      	push	{r7, lr}
   23e8e:	b084      	sub	sp, #16
   23e90:	af00      	add	r7, sp, #0
   23e92:	0002      	movs	r2, r0
   23e94:	1dfb      	adds	r3, r7, #7
   23e96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   23e98:	230f      	movs	r3, #15
   23e9a:	18fb      	adds	r3, r7, r3
   23e9c:	1dfa      	adds	r2, r7, #7
   23e9e:	7812      	ldrb	r2, [r2, #0]
   23ea0:	09d2      	lsrs	r2, r2, #7
   23ea2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   23ea4:	230e      	movs	r3, #14
   23ea6:	18fb      	adds	r3, r7, r3
   23ea8:	1dfa      	adds	r2, r7, #7
   23eaa:	7812      	ldrb	r2, [r2, #0]
   23eac:	0952      	lsrs	r2, r2, #5
   23eae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   23eb0:	4b0d      	ldr	r3, [pc, #52]	; (23ee8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   23eb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   23eb4:	230f      	movs	r3, #15
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	781b      	ldrb	r3, [r3, #0]
   23eba:	2b00      	cmp	r3, #0
   23ebc:	d10f      	bne.n	23ede <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   23ebe:	230f      	movs	r3, #15
   23ec0:	18fb      	adds	r3, r7, r3
   23ec2:	781b      	ldrb	r3, [r3, #0]
   23ec4:	009b      	lsls	r3, r3, #2
   23ec6:	2210      	movs	r2, #16
   23ec8:	4694      	mov	ip, r2
   23eca:	44bc      	add	ip, r7
   23ecc:	4463      	add	r3, ip
   23ece:	3b08      	subs	r3, #8
   23ed0:	681a      	ldr	r2, [r3, #0]
   23ed2:	230e      	movs	r3, #14
   23ed4:	18fb      	adds	r3, r7, r3
   23ed6:	781b      	ldrb	r3, [r3, #0]
   23ed8:	01db      	lsls	r3, r3, #7
   23eda:	18d3      	adds	r3, r2, r3
   23edc:	e000      	b.n	23ee0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   23ede:	2300      	movs	r3, #0
}
   23ee0:	0018      	movs	r0, r3
   23ee2:	46bd      	mov	sp, r7
   23ee4:	b004      	add	sp, #16
   23ee6:	bd80      	pop	{r7, pc}
   23ee8:	41004400 	.word	0x41004400

00023eec <port_get_group_from_gpio_pin>:
{
   23eec:	b580      	push	{r7, lr}
   23eee:	b082      	sub	sp, #8
   23ef0:	af00      	add	r7, sp, #0
   23ef2:	0002      	movs	r2, r0
   23ef4:	1dfb      	adds	r3, r7, #7
   23ef6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   23ef8:	1dfb      	adds	r3, r7, #7
   23efa:	781b      	ldrb	r3, [r3, #0]
   23efc:	0018      	movs	r0, r3
   23efe:	4b03      	ldr	r3, [pc, #12]	; (23f0c <port_get_group_from_gpio_pin+0x20>)
   23f00:	4798      	blx	r3
   23f02:	0003      	movs	r3, r0
}
   23f04:	0018      	movs	r0, r3
   23f06:	46bd      	mov	sp, r7
   23f08:	b002      	add	sp, #8
   23f0a:	bd80      	pop	{r7, pc}
   23f0c:	00023e8d 	.word	0x00023e8d

00023f10 <port_get_config_defaults>:
{
   23f10:	b580      	push	{r7, lr}
   23f12:	b082      	sub	sp, #8
   23f14:	af00      	add	r7, sp, #0
   23f16:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   23f18:	687b      	ldr	r3, [r7, #4]
   23f1a:	2200      	movs	r2, #0
   23f1c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   23f1e:	687b      	ldr	r3, [r7, #4]
   23f20:	2201      	movs	r2, #1
   23f22:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   23f24:	687b      	ldr	r3, [r7, #4]
   23f26:	2200      	movs	r2, #0
   23f28:	709a      	strb	r2, [r3, #2]
}
   23f2a:	46c0      	nop			; (mov r8, r8)
   23f2c:	46bd      	mov	sp, r7
   23f2e:	b002      	add	sp, #8
   23f30:	bd80      	pop	{r7, pc}
	...

00023f34 <port_pin_set_output_level>:
{
   23f34:	b580      	push	{r7, lr}
   23f36:	b084      	sub	sp, #16
   23f38:	af00      	add	r7, sp, #0
   23f3a:	0002      	movs	r2, r0
   23f3c:	1dfb      	adds	r3, r7, #7
   23f3e:	701a      	strb	r2, [r3, #0]
   23f40:	1dbb      	adds	r3, r7, #6
   23f42:	1c0a      	adds	r2, r1, #0
   23f44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   23f46:	1dfb      	adds	r3, r7, #7
   23f48:	781b      	ldrb	r3, [r3, #0]
   23f4a:	0018      	movs	r0, r3
   23f4c:	4b0d      	ldr	r3, [pc, #52]	; (23f84 <port_pin_set_output_level+0x50>)
   23f4e:	4798      	blx	r3
   23f50:	0003      	movs	r3, r0
   23f52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   23f54:	1dfb      	adds	r3, r7, #7
   23f56:	781b      	ldrb	r3, [r3, #0]
   23f58:	221f      	movs	r2, #31
   23f5a:	4013      	ands	r3, r2
   23f5c:	2201      	movs	r2, #1
   23f5e:	409a      	lsls	r2, r3
   23f60:	0013      	movs	r3, r2
   23f62:	60bb      	str	r3, [r7, #8]
	if (level) {
   23f64:	1dbb      	adds	r3, r7, #6
   23f66:	781b      	ldrb	r3, [r3, #0]
   23f68:	2b00      	cmp	r3, #0
   23f6a:	d003      	beq.n	23f74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   23f6c:	68fb      	ldr	r3, [r7, #12]
   23f6e:	68ba      	ldr	r2, [r7, #8]
   23f70:	619a      	str	r2, [r3, #24]
}
   23f72:	e002      	b.n	23f7a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   23f74:	68fb      	ldr	r3, [r7, #12]
   23f76:	68ba      	ldr	r2, [r7, #8]
   23f78:	615a      	str	r2, [r3, #20]
}
   23f7a:	46c0      	nop			; (mov r8, r8)
   23f7c:	46bd      	mov	sp, r7
   23f7e:	b004      	add	sp, #16
   23f80:	bd80      	pop	{r7, pc}
   23f82:	46c0      	nop			; (mov r8, r8)
   23f84:	00023eed 	.word	0x00023eed

00023f88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23f88:	b580      	push	{r7, lr}
   23f8a:	b082      	sub	sp, #8
   23f8c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   23f8e:	1d3b      	adds	r3, r7, #4
   23f90:	0018      	movs	r0, r3
   23f92:	4b0e      	ldr	r3, [pc, #56]	; (23fcc <system_board_init+0x44>)
   23f94:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   23f96:	1d3b      	adds	r3, r7, #4
   23f98:	2201      	movs	r2, #1
   23f9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   23f9c:	1d3b      	adds	r3, r7, #4
   23f9e:	0019      	movs	r1, r3
   23fa0:	2017      	movs	r0, #23
   23fa2:	4b0b      	ldr	r3, [pc, #44]	; (23fd0 <system_board_init+0x48>)
   23fa4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   23fa6:	2101      	movs	r1, #1
   23fa8:	2017      	movs	r0, #23
   23faa:	4b0a      	ldr	r3, [pc, #40]	; (23fd4 <system_board_init+0x4c>)
   23fac:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   23fae:	1d3b      	adds	r3, r7, #4
   23fb0:	2200      	movs	r2, #0
   23fb2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   23fb4:	1d3b      	adds	r3, r7, #4
   23fb6:	2201      	movs	r2, #1
   23fb8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   23fba:	1d3b      	adds	r3, r7, #4
   23fbc:	0019      	movs	r1, r3
   23fbe:	2037      	movs	r0, #55	; 0x37
   23fc0:	4b03      	ldr	r3, [pc, #12]	; (23fd0 <system_board_init+0x48>)
   23fc2:	4798      	blx	r3
}
   23fc4:	46c0      	nop			; (mov r8, r8)
   23fc6:	46bd      	mov	sp, r7
   23fc8:	b002      	add	sp, #8
   23fca:	bd80      	pop	{r7, pc}
   23fcc:	00023f11 	.word	0x00023f11
   23fd0:	000245fd 	.word	0x000245fd
   23fd4:	00023f35 	.word	0x00023f35

00023fd8 <_extint_get_eic_from_channel>:
   23fd8:	b580      	push	{r7, lr}
   23fda:	b084      	sub	sp, #16
   23fdc:	af00      	add	r7, sp, #0
   23fde:	0002      	movs	r2, r0
   23fe0:	1dfb      	adds	r3, r7, #7
   23fe2:	701a      	strb	r2, [r3, #0]
   23fe4:	230f      	movs	r3, #15
   23fe6:	18fb      	adds	r3, r7, r3
   23fe8:	1dfa      	adds	r2, r7, #7
   23fea:	7812      	ldrb	r2, [r2, #0]
   23fec:	0952      	lsrs	r2, r2, #5
   23fee:	701a      	strb	r2, [r3, #0]
   23ff0:	230f      	movs	r3, #15
   23ff2:	18fb      	adds	r3, r7, r3
   23ff4:	781b      	ldrb	r3, [r3, #0]
   23ff6:	2b00      	cmp	r3, #0
   23ff8:	d10c      	bne.n	24014 <_extint_get_eic_from_channel+0x3c>
   23ffa:	4b09      	ldr	r3, [pc, #36]	; (24020 <_extint_get_eic_from_channel+0x48>)
   23ffc:	60bb      	str	r3, [r7, #8]
   23ffe:	230f      	movs	r3, #15
   24000:	18fb      	adds	r3, r7, r3
   24002:	781b      	ldrb	r3, [r3, #0]
   24004:	009b      	lsls	r3, r3, #2
   24006:	2210      	movs	r2, #16
   24008:	4694      	mov	ip, r2
   2400a:	44bc      	add	ip, r7
   2400c:	4463      	add	r3, ip
   2400e:	3b08      	subs	r3, #8
   24010:	681b      	ldr	r3, [r3, #0]
   24012:	e000      	b.n	24016 <_extint_get_eic_from_channel+0x3e>
   24014:	2300      	movs	r3, #0
   24016:	0018      	movs	r0, r3
   24018:	46bd      	mov	sp, r7
   2401a:	b004      	add	sp, #16
   2401c:	bd80      	pop	{r7, pc}
   2401e:	46c0      	nop			; (mov r8, r8)
   24020:	40001800 	.word	0x40001800

00024024 <extint_chan_is_detected>:
   24024:	b580      	push	{r7, lr}
   24026:	b084      	sub	sp, #16
   24028:	af00      	add	r7, sp, #0
   2402a:	0002      	movs	r2, r0
   2402c:	1dfb      	adds	r3, r7, #7
   2402e:	701a      	strb	r2, [r3, #0]
   24030:	1dfb      	adds	r3, r7, #7
   24032:	781b      	ldrb	r3, [r3, #0]
   24034:	0018      	movs	r0, r3
   24036:	4b0b      	ldr	r3, [pc, #44]	; (24064 <extint_chan_is_detected+0x40>)
   24038:	4798      	blx	r3
   2403a:	0003      	movs	r3, r0
   2403c:	60fb      	str	r3, [r7, #12]
   2403e:	1dfb      	adds	r3, r7, #7
   24040:	781b      	ldrb	r3, [r3, #0]
   24042:	221f      	movs	r2, #31
   24044:	4013      	ands	r3, r2
   24046:	2201      	movs	r2, #1
   24048:	409a      	lsls	r2, r3
   2404a:	0013      	movs	r3, r2
   2404c:	60bb      	str	r3, [r7, #8]
   2404e:	68fb      	ldr	r3, [r7, #12]
   24050:	691b      	ldr	r3, [r3, #16]
   24052:	68ba      	ldr	r2, [r7, #8]
   24054:	4013      	ands	r3, r2
   24056:	1e5a      	subs	r2, r3, #1
   24058:	4193      	sbcs	r3, r2
   2405a:	b2db      	uxtb	r3, r3
   2405c:	0018      	movs	r0, r3
   2405e:	46bd      	mov	sp, r7
   24060:	b004      	add	sp, #16
   24062:	bd80      	pop	{r7, pc}
   24064:	00023fd9 	.word	0x00023fd9

00024068 <extint_chan_clear_detected>:
   24068:	b580      	push	{r7, lr}
   2406a:	b084      	sub	sp, #16
   2406c:	af00      	add	r7, sp, #0
   2406e:	0002      	movs	r2, r0
   24070:	1dfb      	adds	r3, r7, #7
   24072:	701a      	strb	r2, [r3, #0]
   24074:	1dfb      	adds	r3, r7, #7
   24076:	781b      	ldrb	r3, [r3, #0]
   24078:	0018      	movs	r0, r3
   2407a:	4b09      	ldr	r3, [pc, #36]	; (240a0 <extint_chan_clear_detected+0x38>)
   2407c:	4798      	blx	r3
   2407e:	0003      	movs	r3, r0
   24080:	60fb      	str	r3, [r7, #12]
   24082:	1dfb      	adds	r3, r7, #7
   24084:	781b      	ldrb	r3, [r3, #0]
   24086:	221f      	movs	r2, #31
   24088:	4013      	ands	r3, r2
   2408a:	2201      	movs	r2, #1
   2408c:	409a      	lsls	r2, r3
   2408e:	0013      	movs	r3, r2
   24090:	60bb      	str	r3, [r7, #8]
   24092:	68fb      	ldr	r3, [r7, #12]
   24094:	68ba      	ldr	r2, [r7, #8]
   24096:	611a      	str	r2, [r3, #16]
   24098:	46c0      	nop			; (mov r8, r8)
   2409a:	46bd      	mov	sp, r7
   2409c:	b004      	add	sp, #16
   2409e:	bd80      	pop	{r7, pc}
   240a0:	00023fd9 	.word	0x00023fd9

000240a4 <extint_register_callback>:
   240a4:	b580      	push	{r7, lr}
   240a6:	b082      	sub	sp, #8
   240a8:	af00      	add	r7, sp, #0
   240aa:	6078      	str	r0, [r7, #4]
   240ac:	0008      	movs	r0, r1
   240ae:	0011      	movs	r1, r2
   240b0:	1cfb      	adds	r3, r7, #3
   240b2:	1c02      	adds	r2, r0, #0
   240b4:	701a      	strb	r2, [r3, #0]
   240b6:	1cbb      	adds	r3, r7, #2
   240b8:	1c0a      	adds	r2, r1, #0
   240ba:	701a      	strb	r2, [r3, #0]
   240bc:	1cbb      	adds	r3, r7, #2
   240be:	781b      	ldrb	r3, [r3, #0]
   240c0:	2b00      	cmp	r3, #0
   240c2:	d001      	beq.n	240c8 <extint_register_callback+0x24>
   240c4:	2317      	movs	r3, #23
   240c6:	e019      	b.n	240fc <extint_register_callback+0x58>
   240c8:	1cfb      	adds	r3, r7, #3
   240ca:	781a      	ldrb	r2, [r3, #0]
   240cc:	4b0d      	ldr	r3, [pc, #52]	; (24104 <extint_register_callback+0x60>)
   240ce:	0092      	lsls	r2, r2, #2
   240d0:	58d3      	ldr	r3, [r2, r3]
   240d2:	2b00      	cmp	r3, #0
   240d4:	d107      	bne.n	240e6 <extint_register_callback+0x42>
   240d6:	1cfb      	adds	r3, r7, #3
   240d8:	781a      	ldrb	r2, [r3, #0]
   240da:	4b0a      	ldr	r3, [pc, #40]	; (24104 <extint_register_callback+0x60>)
   240dc:	0092      	lsls	r2, r2, #2
   240de:	6879      	ldr	r1, [r7, #4]
   240e0:	50d1      	str	r1, [r2, r3]
   240e2:	2300      	movs	r3, #0
   240e4:	e00a      	b.n	240fc <extint_register_callback+0x58>
   240e6:	1cfb      	adds	r3, r7, #3
   240e8:	781a      	ldrb	r2, [r3, #0]
   240ea:	4b06      	ldr	r3, [pc, #24]	; (24104 <extint_register_callback+0x60>)
   240ec:	0092      	lsls	r2, r2, #2
   240ee:	58d2      	ldr	r2, [r2, r3]
   240f0:	687b      	ldr	r3, [r7, #4]
   240f2:	429a      	cmp	r2, r3
   240f4:	d101      	bne.n	240fa <extint_register_callback+0x56>
   240f6:	2300      	movs	r3, #0
   240f8:	e000      	b.n	240fc <extint_register_callback+0x58>
   240fa:	231d      	movs	r3, #29
   240fc:	0018      	movs	r0, r3
   240fe:	46bd      	mov	sp, r7
   24100:	b002      	add	sp, #8
   24102:	bd80      	pop	{r7, pc}
   24104:	20005534 	.word	0x20005534

00024108 <extint_chan_enable_callback>:
   24108:	b580      	push	{r7, lr}
   2410a:	b084      	sub	sp, #16
   2410c:	af00      	add	r7, sp, #0
   2410e:	0002      	movs	r2, r0
   24110:	1dfb      	adds	r3, r7, #7
   24112:	701a      	strb	r2, [r3, #0]
   24114:	1dbb      	adds	r3, r7, #6
   24116:	1c0a      	adds	r2, r1, #0
   24118:	701a      	strb	r2, [r3, #0]
   2411a:	1dbb      	adds	r3, r7, #6
   2411c:	781b      	ldrb	r3, [r3, #0]
   2411e:	2b00      	cmp	r3, #0
   24120:	d10e      	bne.n	24140 <extint_chan_enable_callback+0x38>
   24122:	1dfb      	adds	r3, r7, #7
   24124:	781b      	ldrb	r3, [r3, #0]
   24126:	0018      	movs	r0, r3
   24128:	4b08      	ldr	r3, [pc, #32]	; (2414c <extint_chan_enable_callback+0x44>)
   2412a:	4798      	blx	r3
   2412c:	0003      	movs	r3, r0
   2412e:	60fb      	str	r3, [r7, #12]
   24130:	1dfb      	adds	r3, r7, #7
   24132:	781b      	ldrb	r3, [r3, #0]
   24134:	2201      	movs	r2, #1
   24136:	409a      	lsls	r2, r3
   24138:	68fb      	ldr	r3, [r7, #12]
   2413a:	60da      	str	r2, [r3, #12]
   2413c:	2300      	movs	r3, #0
   2413e:	e000      	b.n	24142 <extint_chan_enable_callback+0x3a>
   24140:	2317      	movs	r3, #23
   24142:	0018      	movs	r0, r3
   24144:	46bd      	mov	sp, r7
   24146:	b004      	add	sp, #16
   24148:	bd80      	pop	{r7, pc}
   2414a:	46c0      	nop			; (mov r8, r8)
   2414c:	00023fd9 	.word	0x00023fd9

00024150 <extint_chan_disable_callback>:
   24150:	b580      	push	{r7, lr}
   24152:	b084      	sub	sp, #16
   24154:	af00      	add	r7, sp, #0
   24156:	0002      	movs	r2, r0
   24158:	1dfb      	adds	r3, r7, #7
   2415a:	701a      	strb	r2, [r3, #0]
   2415c:	1dbb      	adds	r3, r7, #6
   2415e:	1c0a      	adds	r2, r1, #0
   24160:	701a      	strb	r2, [r3, #0]
   24162:	1dbb      	adds	r3, r7, #6
   24164:	781b      	ldrb	r3, [r3, #0]
   24166:	2b00      	cmp	r3, #0
   24168:	d10e      	bne.n	24188 <extint_chan_disable_callback+0x38>
   2416a:	1dfb      	adds	r3, r7, #7
   2416c:	781b      	ldrb	r3, [r3, #0]
   2416e:	0018      	movs	r0, r3
   24170:	4b08      	ldr	r3, [pc, #32]	; (24194 <extint_chan_disable_callback+0x44>)
   24172:	4798      	blx	r3
   24174:	0003      	movs	r3, r0
   24176:	60fb      	str	r3, [r7, #12]
   24178:	1dfb      	adds	r3, r7, #7
   2417a:	781b      	ldrb	r3, [r3, #0]
   2417c:	2201      	movs	r2, #1
   2417e:	409a      	lsls	r2, r3
   24180:	68fb      	ldr	r3, [r7, #12]
   24182:	609a      	str	r2, [r3, #8]
   24184:	2300      	movs	r3, #0
   24186:	e000      	b.n	2418a <extint_chan_disable_callback+0x3a>
   24188:	2317      	movs	r3, #23
   2418a:	0018      	movs	r0, r3
   2418c:	46bd      	mov	sp, r7
   2418e:	b004      	add	sp, #16
   24190:	bd80      	pop	{r7, pc}
   24192:	46c0      	nop			; (mov r8, r8)
   24194:	00023fd9 	.word	0x00023fd9

00024198 <EIC_Handler>:
   24198:	b580      	push	{r7, lr}
   2419a:	af00      	add	r7, sp, #0
   2419c:	4b15      	ldr	r3, [pc, #84]	; (241f4 <EIC_Handler+0x5c>)
   2419e:	2200      	movs	r2, #0
   241a0:	701a      	strb	r2, [r3, #0]
   241a2:	e020      	b.n	241e6 <EIC_Handler+0x4e>
   241a4:	4b13      	ldr	r3, [pc, #76]	; (241f4 <EIC_Handler+0x5c>)
   241a6:	781b      	ldrb	r3, [r3, #0]
   241a8:	0018      	movs	r0, r3
   241aa:	4b13      	ldr	r3, [pc, #76]	; (241f8 <EIC_Handler+0x60>)
   241ac:	4798      	blx	r3
   241ae:	1e03      	subs	r3, r0, #0
   241b0:	d013      	beq.n	241da <EIC_Handler+0x42>
   241b2:	4b10      	ldr	r3, [pc, #64]	; (241f4 <EIC_Handler+0x5c>)
   241b4:	781b      	ldrb	r3, [r3, #0]
   241b6:	0018      	movs	r0, r3
   241b8:	4b10      	ldr	r3, [pc, #64]	; (241fc <EIC_Handler+0x64>)
   241ba:	4798      	blx	r3
   241bc:	4b0d      	ldr	r3, [pc, #52]	; (241f4 <EIC_Handler+0x5c>)
   241be:	781b      	ldrb	r3, [r3, #0]
   241c0:	001a      	movs	r2, r3
   241c2:	4b0f      	ldr	r3, [pc, #60]	; (24200 <EIC_Handler+0x68>)
   241c4:	0092      	lsls	r2, r2, #2
   241c6:	58d3      	ldr	r3, [r2, r3]
   241c8:	2b00      	cmp	r3, #0
   241ca:	d006      	beq.n	241da <EIC_Handler+0x42>
   241cc:	4b09      	ldr	r3, [pc, #36]	; (241f4 <EIC_Handler+0x5c>)
   241ce:	781b      	ldrb	r3, [r3, #0]
   241d0:	001a      	movs	r2, r3
   241d2:	4b0b      	ldr	r3, [pc, #44]	; (24200 <EIC_Handler+0x68>)
   241d4:	0092      	lsls	r2, r2, #2
   241d6:	58d3      	ldr	r3, [r2, r3]
   241d8:	4798      	blx	r3
   241da:	4b06      	ldr	r3, [pc, #24]	; (241f4 <EIC_Handler+0x5c>)
   241dc:	781b      	ldrb	r3, [r3, #0]
   241de:	3301      	adds	r3, #1
   241e0:	b2da      	uxtb	r2, r3
   241e2:	4b04      	ldr	r3, [pc, #16]	; (241f4 <EIC_Handler+0x5c>)
   241e4:	701a      	strb	r2, [r3, #0]
   241e6:	4b03      	ldr	r3, [pc, #12]	; (241f4 <EIC_Handler+0x5c>)
   241e8:	781b      	ldrb	r3, [r3, #0]
   241ea:	2b0f      	cmp	r3, #15
   241ec:	d9da      	bls.n	241a4 <EIC_Handler+0xc>
   241ee:	46c0      	nop			; (mov r8, r8)
   241f0:	46bd      	mov	sp, r7
   241f2:	bd80      	pop	{r7, pc}
   241f4:	20005530 	.word	0x20005530
   241f8:	00024025 	.word	0x00024025
   241fc:	00024069 	.word	0x00024069
   24200:	20005534 	.word	0x20005534

00024204 <system_gclk_chan_get_config_defaults>:
   24204:	b580      	push	{r7, lr}
   24206:	b082      	sub	sp, #8
   24208:	af00      	add	r7, sp, #0
   2420a:	6078      	str	r0, [r7, #4]
   2420c:	687b      	ldr	r3, [r7, #4]
   2420e:	2200      	movs	r2, #0
   24210:	701a      	strb	r2, [r3, #0]
   24212:	46c0      	nop			; (mov r8, r8)
   24214:	46bd      	mov	sp, r7
   24216:	b002      	add	sp, #8
   24218:	bd80      	pop	{r7, pc}
	...

0002421c <system_apb_clock_set_mask>:
   2421c:	b580      	push	{r7, lr}
   2421e:	b082      	sub	sp, #8
   24220:	af00      	add	r7, sp, #0
   24222:	0002      	movs	r2, r0
   24224:	6039      	str	r1, [r7, #0]
   24226:	1dfb      	adds	r3, r7, #7
   24228:	701a      	strb	r2, [r3, #0]
   2422a:	1dfb      	adds	r3, r7, #7
   2422c:	781b      	ldrb	r3, [r3, #0]
   2422e:	2b01      	cmp	r3, #1
   24230:	d00a      	beq.n	24248 <system_apb_clock_set_mask+0x2c>
   24232:	2b02      	cmp	r3, #2
   24234:	d00f      	beq.n	24256 <system_apb_clock_set_mask+0x3a>
   24236:	2b00      	cmp	r3, #0
   24238:	d114      	bne.n	24264 <system_apb_clock_set_mask+0x48>
   2423a:	4b0e      	ldr	r3, [pc, #56]	; (24274 <system_apb_clock_set_mask+0x58>)
   2423c:	4a0d      	ldr	r2, [pc, #52]	; (24274 <system_apb_clock_set_mask+0x58>)
   2423e:	6991      	ldr	r1, [r2, #24]
   24240:	683a      	ldr	r2, [r7, #0]
   24242:	430a      	orrs	r2, r1
   24244:	619a      	str	r2, [r3, #24]
   24246:	e00f      	b.n	24268 <system_apb_clock_set_mask+0x4c>
   24248:	4b0a      	ldr	r3, [pc, #40]	; (24274 <system_apb_clock_set_mask+0x58>)
   2424a:	4a0a      	ldr	r2, [pc, #40]	; (24274 <system_apb_clock_set_mask+0x58>)
   2424c:	69d1      	ldr	r1, [r2, #28]
   2424e:	683a      	ldr	r2, [r7, #0]
   24250:	430a      	orrs	r2, r1
   24252:	61da      	str	r2, [r3, #28]
   24254:	e008      	b.n	24268 <system_apb_clock_set_mask+0x4c>
   24256:	4b07      	ldr	r3, [pc, #28]	; (24274 <system_apb_clock_set_mask+0x58>)
   24258:	4a06      	ldr	r2, [pc, #24]	; (24274 <system_apb_clock_set_mask+0x58>)
   2425a:	6a11      	ldr	r1, [r2, #32]
   2425c:	683a      	ldr	r2, [r7, #0]
   2425e:	430a      	orrs	r2, r1
   24260:	621a      	str	r2, [r3, #32]
   24262:	e001      	b.n	24268 <system_apb_clock_set_mask+0x4c>
   24264:	2317      	movs	r3, #23
   24266:	e000      	b.n	2426a <system_apb_clock_set_mask+0x4e>
   24268:	2300      	movs	r3, #0
   2426a:	0018      	movs	r0, r3
   2426c:	46bd      	mov	sp, r7
   2426e:	b002      	add	sp, #8
   24270:	bd80      	pop	{r7, pc}
   24272:	46c0      	nop			; (mov r8, r8)
   24274:	40000400 	.word	0x40000400

00024278 <system_pinmux_get_config_defaults>:
   24278:	b580      	push	{r7, lr}
   2427a:	b082      	sub	sp, #8
   2427c:	af00      	add	r7, sp, #0
   2427e:	6078      	str	r0, [r7, #4]
   24280:	687b      	ldr	r3, [r7, #4]
   24282:	2280      	movs	r2, #128	; 0x80
   24284:	701a      	strb	r2, [r3, #0]
   24286:	687b      	ldr	r3, [r7, #4]
   24288:	2200      	movs	r2, #0
   2428a:	705a      	strb	r2, [r3, #1]
   2428c:	687b      	ldr	r3, [r7, #4]
   2428e:	2201      	movs	r2, #1
   24290:	709a      	strb	r2, [r3, #2]
   24292:	687b      	ldr	r3, [r7, #4]
   24294:	2200      	movs	r2, #0
   24296:	70da      	strb	r2, [r3, #3]
   24298:	46c0      	nop			; (mov r8, r8)
   2429a:	46bd      	mov	sp, r7
   2429c:	b002      	add	sp, #8
   2429e:	bd80      	pop	{r7, pc}

000242a0 <system_interrupt_enable>:
   242a0:	b580      	push	{r7, lr}
   242a2:	b082      	sub	sp, #8
   242a4:	af00      	add	r7, sp, #0
   242a6:	0002      	movs	r2, r0
   242a8:	1dfb      	adds	r3, r7, #7
   242aa:	701a      	strb	r2, [r3, #0]
   242ac:	4b06      	ldr	r3, [pc, #24]	; (242c8 <system_interrupt_enable+0x28>)
   242ae:	1dfa      	adds	r2, r7, #7
   242b0:	7812      	ldrb	r2, [r2, #0]
   242b2:	0011      	movs	r1, r2
   242b4:	221f      	movs	r2, #31
   242b6:	400a      	ands	r2, r1
   242b8:	2101      	movs	r1, #1
   242ba:	4091      	lsls	r1, r2
   242bc:	000a      	movs	r2, r1
   242be:	601a      	str	r2, [r3, #0]
   242c0:	46c0      	nop			; (mov r8, r8)
   242c2:	46bd      	mov	sp, r7
   242c4:	b002      	add	sp, #8
   242c6:	bd80      	pop	{r7, pc}
   242c8:	e000e100 	.word	0xe000e100

000242cc <_extint_get_eic_from_channel>:
   242cc:	b580      	push	{r7, lr}
   242ce:	b084      	sub	sp, #16
   242d0:	af00      	add	r7, sp, #0
   242d2:	0002      	movs	r2, r0
   242d4:	1dfb      	adds	r3, r7, #7
   242d6:	701a      	strb	r2, [r3, #0]
   242d8:	230f      	movs	r3, #15
   242da:	18fb      	adds	r3, r7, r3
   242dc:	1dfa      	adds	r2, r7, #7
   242de:	7812      	ldrb	r2, [r2, #0]
   242e0:	0952      	lsrs	r2, r2, #5
   242e2:	701a      	strb	r2, [r3, #0]
   242e4:	230f      	movs	r3, #15
   242e6:	18fb      	adds	r3, r7, r3
   242e8:	781b      	ldrb	r3, [r3, #0]
   242ea:	2b00      	cmp	r3, #0
   242ec:	d10c      	bne.n	24308 <_extint_get_eic_from_channel+0x3c>
   242ee:	4b09      	ldr	r3, [pc, #36]	; (24314 <_extint_get_eic_from_channel+0x48>)
   242f0:	60bb      	str	r3, [r7, #8]
   242f2:	230f      	movs	r3, #15
   242f4:	18fb      	adds	r3, r7, r3
   242f6:	781b      	ldrb	r3, [r3, #0]
   242f8:	009b      	lsls	r3, r3, #2
   242fa:	2210      	movs	r2, #16
   242fc:	4694      	mov	ip, r2
   242fe:	44bc      	add	ip, r7
   24300:	4463      	add	r3, ip
   24302:	3b08      	subs	r3, #8
   24304:	681b      	ldr	r3, [r3, #0]
   24306:	e000      	b.n	2430a <_extint_get_eic_from_channel+0x3e>
   24308:	2300      	movs	r3, #0
   2430a:	0018      	movs	r0, r3
   2430c:	46bd      	mov	sp, r7
   2430e:	b004      	add	sp, #16
   24310:	bd80      	pop	{r7, pc}
   24312:	46c0      	nop			; (mov r8, r8)
   24314:	40001800 	.word	0x40001800

00024318 <extint_is_syncing>:
   24318:	b580      	push	{r7, lr}
   2431a:	b082      	sub	sp, #8
   2431c:	af00      	add	r7, sp, #0
   2431e:	4b0f      	ldr	r3, [pc, #60]	; (2435c <extint_is_syncing+0x44>)
   24320:	603b      	str	r3, [r7, #0]
   24322:	2300      	movs	r3, #0
   24324:	607b      	str	r3, [r7, #4]
   24326:	e011      	b.n	2434c <extint_is_syncing+0x34>
   24328:	687b      	ldr	r3, [r7, #4]
   2432a:	009b      	lsls	r3, r3, #2
   2432c:	2208      	movs	r2, #8
   2432e:	4694      	mov	ip, r2
   24330:	44bc      	add	ip, r7
   24332:	4463      	add	r3, ip
   24334:	3b08      	subs	r3, #8
   24336:	681b      	ldr	r3, [r3, #0]
   24338:	785b      	ldrb	r3, [r3, #1]
   2433a:	b2db      	uxtb	r3, r3
   2433c:	b25b      	sxtb	r3, r3
   2433e:	2b00      	cmp	r3, #0
   24340:	da01      	bge.n	24346 <extint_is_syncing+0x2e>
   24342:	2301      	movs	r3, #1
   24344:	e006      	b.n	24354 <extint_is_syncing+0x3c>
   24346:	687b      	ldr	r3, [r7, #4]
   24348:	3301      	adds	r3, #1
   2434a:	607b      	str	r3, [r7, #4]
   2434c:	687b      	ldr	r3, [r7, #4]
   2434e:	2b00      	cmp	r3, #0
   24350:	d0ea      	beq.n	24328 <extint_is_syncing+0x10>
   24352:	2300      	movs	r3, #0
   24354:	0018      	movs	r0, r3
   24356:	46bd      	mov	sp, r7
   24358:	b002      	add	sp, #8
   2435a:	bd80      	pop	{r7, pc}
   2435c:	40001800 	.word	0x40001800

00024360 <_system_extint_init>:
   24360:	b580      	push	{r7, lr}
   24362:	b084      	sub	sp, #16
   24364:	af00      	add	r7, sp, #0
   24366:	4b2d      	ldr	r3, [pc, #180]	; (2441c <_system_extint_init+0xbc>)
   24368:	607b      	str	r3, [r7, #4]
   2436a:	2140      	movs	r1, #64	; 0x40
   2436c:	2000      	movs	r0, #0
   2436e:	4b2c      	ldr	r3, [pc, #176]	; (24420 <_system_extint_init+0xc0>)
   24370:	4798      	blx	r3
   24372:	003b      	movs	r3, r7
   24374:	0018      	movs	r0, r3
   24376:	4b2b      	ldr	r3, [pc, #172]	; (24424 <_system_extint_init+0xc4>)
   24378:	4798      	blx	r3
   2437a:	003b      	movs	r3, r7
   2437c:	2200      	movs	r2, #0
   2437e:	701a      	strb	r2, [r3, #0]
   24380:	003b      	movs	r3, r7
   24382:	0019      	movs	r1, r3
   24384:	2005      	movs	r0, #5
   24386:	4b28      	ldr	r3, [pc, #160]	; (24428 <_system_extint_init+0xc8>)
   24388:	4798      	blx	r3
   2438a:	2005      	movs	r0, #5
   2438c:	4b27      	ldr	r3, [pc, #156]	; (2442c <_system_extint_init+0xcc>)
   2438e:	4798      	blx	r3
   24390:	2300      	movs	r3, #0
   24392:	60fb      	str	r3, [r7, #12]
   24394:	e018      	b.n	243c8 <_system_extint_init+0x68>
   24396:	68fb      	ldr	r3, [r7, #12]
   24398:	009b      	lsls	r3, r3, #2
   2439a:	2210      	movs	r2, #16
   2439c:	4694      	mov	ip, r2
   2439e:	44bc      	add	ip, r7
   243a0:	4463      	add	r3, ip
   243a2:	3b0c      	subs	r3, #12
   243a4:	681a      	ldr	r2, [r3, #0]
   243a6:	68fb      	ldr	r3, [r7, #12]
   243a8:	009b      	lsls	r3, r3, #2
   243aa:	2110      	movs	r1, #16
   243ac:	468c      	mov	ip, r1
   243ae:	44bc      	add	ip, r7
   243b0:	4463      	add	r3, ip
   243b2:	3b0c      	subs	r3, #12
   243b4:	681b      	ldr	r3, [r3, #0]
   243b6:	781b      	ldrb	r3, [r3, #0]
   243b8:	b2db      	uxtb	r3, r3
   243ba:	2101      	movs	r1, #1
   243bc:	430b      	orrs	r3, r1
   243be:	b2db      	uxtb	r3, r3
   243c0:	7013      	strb	r3, [r2, #0]
   243c2:	68fb      	ldr	r3, [r7, #12]
   243c4:	3301      	adds	r3, #1
   243c6:	60fb      	str	r3, [r7, #12]
   243c8:	68fb      	ldr	r3, [r7, #12]
   243ca:	2b00      	cmp	r3, #0
   243cc:	d0e3      	beq.n	24396 <_system_extint_init+0x36>
   243ce:	46c0      	nop			; (mov r8, r8)
   243d0:	4b17      	ldr	r3, [pc, #92]	; (24430 <_system_extint_init+0xd0>)
   243d2:	4798      	blx	r3
   243d4:	1e03      	subs	r3, r0, #0
   243d6:	d1fb      	bne.n	243d0 <_system_extint_init+0x70>
   243d8:	230b      	movs	r3, #11
   243da:	18fb      	adds	r3, r7, r3
   243dc:	2200      	movs	r2, #0
   243de:	701a      	strb	r2, [r3, #0]
   243e0:	e00d      	b.n	243fe <_system_extint_init+0x9e>
   243e2:	230b      	movs	r3, #11
   243e4:	18fb      	adds	r3, r7, r3
   243e6:	781a      	ldrb	r2, [r3, #0]
   243e8:	4b12      	ldr	r3, [pc, #72]	; (24434 <_system_extint_init+0xd4>)
   243ea:	0092      	lsls	r2, r2, #2
   243ec:	2100      	movs	r1, #0
   243ee:	50d1      	str	r1, [r2, r3]
   243f0:	230b      	movs	r3, #11
   243f2:	18fb      	adds	r3, r7, r3
   243f4:	781a      	ldrb	r2, [r3, #0]
   243f6:	230b      	movs	r3, #11
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	3201      	adds	r2, #1
   243fc:	701a      	strb	r2, [r3, #0]
   243fe:	230b      	movs	r3, #11
   24400:	18fb      	adds	r3, r7, r3
   24402:	781b      	ldrb	r3, [r3, #0]
   24404:	2b0f      	cmp	r3, #15
   24406:	d9ec      	bls.n	243e2 <_system_extint_init+0x82>
   24408:	2004      	movs	r0, #4
   2440a:	4b0b      	ldr	r3, [pc, #44]	; (24438 <_system_extint_init+0xd8>)
   2440c:	4798      	blx	r3
   2440e:	4b0b      	ldr	r3, [pc, #44]	; (2443c <_system_extint_init+0xdc>)
   24410:	4798      	blx	r3
   24412:	46c0      	nop			; (mov r8, r8)
   24414:	46bd      	mov	sp, r7
   24416:	b004      	add	sp, #16
   24418:	bd80      	pop	{r7, pc}
   2441a:	46c0      	nop			; (mov r8, r8)
   2441c:	40001800 	.word	0x40001800
   24420:	0002421d 	.word	0x0002421d
   24424:	00024205 	.word	0x00024205
   24428:	00027a8d 	.word	0x00027a8d
   2442c:	00027ad1 	.word	0x00027ad1
   24430:	00024319 	.word	0x00024319
   24434:	20005534 	.word	0x20005534
   24438:	000242a1 	.word	0x000242a1
   2443c:	00024441 	.word	0x00024441

00024440 <_extint_enable>:
   24440:	b580      	push	{r7, lr}
   24442:	b082      	sub	sp, #8
   24444:	af00      	add	r7, sp, #0
   24446:	4b15      	ldr	r3, [pc, #84]	; (2449c <_extint_enable+0x5c>)
   24448:	603b      	str	r3, [r7, #0]
   2444a:	2300      	movs	r3, #0
   2444c:	607b      	str	r3, [r7, #4]
   2444e:	e018      	b.n	24482 <_extint_enable+0x42>
   24450:	687b      	ldr	r3, [r7, #4]
   24452:	009b      	lsls	r3, r3, #2
   24454:	2208      	movs	r2, #8
   24456:	4694      	mov	ip, r2
   24458:	44bc      	add	ip, r7
   2445a:	4463      	add	r3, ip
   2445c:	3b08      	subs	r3, #8
   2445e:	681a      	ldr	r2, [r3, #0]
   24460:	687b      	ldr	r3, [r7, #4]
   24462:	009b      	lsls	r3, r3, #2
   24464:	2108      	movs	r1, #8
   24466:	468c      	mov	ip, r1
   24468:	44bc      	add	ip, r7
   2446a:	4463      	add	r3, ip
   2446c:	3b08      	subs	r3, #8
   2446e:	681b      	ldr	r3, [r3, #0]
   24470:	781b      	ldrb	r3, [r3, #0]
   24472:	b2db      	uxtb	r3, r3
   24474:	2102      	movs	r1, #2
   24476:	430b      	orrs	r3, r1
   24478:	b2db      	uxtb	r3, r3
   2447a:	7013      	strb	r3, [r2, #0]
   2447c:	687b      	ldr	r3, [r7, #4]
   2447e:	3301      	adds	r3, #1
   24480:	607b      	str	r3, [r7, #4]
   24482:	687b      	ldr	r3, [r7, #4]
   24484:	2b00      	cmp	r3, #0
   24486:	d0e3      	beq.n	24450 <_extint_enable+0x10>
   24488:	46c0      	nop			; (mov r8, r8)
   2448a:	4b05      	ldr	r3, [pc, #20]	; (244a0 <_extint_enable+0x60>)
   2448c:	4798      	blx	r3
   2448e:	1e03      	subs	r3, r0, #0
   24490:	d1fb      	bne.n	2448a <_extint_enable+0x4a>
   24492:	46c0      	nop			; (mov r8, r8)
   24494:	46bd      	mov	sp, r7
   24496:	b002      	add	sp, #8
   24498:	bd80      	pop	{r7, pc}
   2449a:	46c0      	nop			; (mov r8, r8)
   2449c:	40001800 	.word	0x40001800
   244a0:	00024319 	.word	0x00024319

000244a4 <extint_chan_get_config_defaults>:
   244a4:	b580      	push	{r7, lr}
   244a6:	b082      	sub	sp, #8
   244a8:	af00      	add	r7, sp, #0
   244aa:	6078      	str	r0, [r7, #4]
   244ac:	687b      	ldr	r3, [r7, #4]
   244ae:	2200      	movs	r2, #0
   244b0:	601a      	str	r2, [r3, #0]
   244b2:	687b      	ldr	r3, [r7, #4]
   244b4:	2200      	movs	r2, #0
   244b6:	605a      	str	r2, [r3, #4]
   244b8:	687b      	ldr	r3, [r7, #4]
   244ba:	2201      	movs	r2, #1
   244bc:	721a      	strb	r2, [r3, #8]
   244be:	687b      	ldr	r3, [r7, #4]
   244c0:	2201      	movs	r2, #1
   244c2:	725a      	strb	r2, [r3, #9]
   244c4:	687b      	ldr	r3, [r7, #4]
   244c6:	2200      	movs	r2, #0
   244c8:	729a      	strb	r2, [r3, #10]
   244ca:	687b      	ldr	r3, [r7, #4]
   244cc:	2202      	movs	r2, #2
   244ce:	72da      	strb	r2, [r3, #11]
   244d0:	46c0      	nop			; (mov r8, r8)
   244d2:	46bd      	mov	sp, r7
   244d4:	b002      	add	sp, #8
   244d6:	bd80      	pop	{r7, pc}

000244d8 <extint_chan_set_config>:
   244d8:	b580      	push	{r7, lr}
   244da:	b086      	sub	sp, #24
   244dc:	af00      	add	r7, sp, #0
   244de:	0002      	movs	r2, r0
   244e0:	6039      	str	r1, [r7, #0]
   244e2:	1dfb      	adds	r3, r7, #7
   244e4:	701a      	strb	r2, [r3, #0]
   244e6:	2308      	movs	r3, #8
   244e8:	18fb      	adds	r3, r7, r3
   244ea:	0018      	movs	r0, r3
   244ec:	4b36      	ldr	r3, [pc, #216]	; (245c8 <extint_chan_set_config+0xf0>)
   244ee:	4798      	blx	r3
   244f0:	683b      	ldr	r3, [r7, #0]
   244f2:	685b      	ldr	r3, [r3, #4]
   244f4:	b2da      	uxtb	r2, r3
   244f6:	2308      	movs	r3, #8
   244f8:	18fb      	adds	r3, r7, r3
   244fa:	701a      	strb	r2, [r3, #0]
   244fc:	2308      	movs	r3, #8
   244fe:	18fb      	adds	r3, r7, r3
   24500:	2200      	movs	r2, #0
   24502:	705a      	strb	r2, [r3, #1]
   24504:	683b      	ldr	r3, [r7, #0]
   24506:	7a1a      	ldrb	r2, [r3, #8]
   24508:	2308      	movs	r3, #8
   2450a:	18fb      	adds	r3, r7, r3
   2450c:	709a      	strb	r2, [r3, #2]
   2450e:	683b      	ldr	r3, [r7, #0]
   24510:	681b      	ldr	r3, [r3, #0]
   24512:	b2db      	uxtb	r3, r3
   24514:	2208      	movs	r2, #8
   24516:	18ba      	adds	r2, r7, r2
   24518:	0011      	movs	r1, r2
   2451a:	0018      	movs	r0, r3
   2451c:	4b2b      	ldr	r3, [pc, #172]	; (245cc <extint_chan_set_config+0xf4>)
   2451e:	4798      	blx	r3
   24520:	1dfb      	adds	r3, r7, #7
   24522:	781b      	ldrb	r3, [r3, #0]
   24524:	0018      	movs	r0, r3
   24526:	4b2a      	ldr	r3, [pc, #168]	; (245d0 <extint_chan_set_config+0xf8>)
   24528:	4798      	blx	r3
   2452a:	0003      	movs	r3, r0
   2452c:	613b      	str	r3, [r7, #16]
   2452e:	1dfb      	adds	r3, r7, #7
   24530:	781b      	ldrb	r3, [r3, #0]
   24532:	2207      	movs	r2, #7
   24534:	4013      	ands	r3, r2
   24536:	009b      	lsls	r3, r3, #2
   24538:	60fb      	str	r3, [r7, #12]
   2453a:	683b      	ldr	r3, [r7, #0]
   2453c:	7adb      	ldrb	r3, [r3, #11]
   2453e:	617b      	str	r3, [r7, #20]
   24540:	683b      	ldr	r3, [r7, #0]
   24542:	7a9b      	ldrb	r3, [r3, #10]
   24544:	2b00      	cmp	r3, #0
   24546:	d003      	beq.n	24550 <extint_chan_set_config+0x78>
   24548:	697b      	ldr	r3, [r7, #20]
   2454a:	2208      	movs	r2, #8
   2454c:	4313      	orrs	r3, r2
   2454e:	617b      	str	r3, [r7, #20]
   24550:	1dfb      	adds	r3, r7, #7
   24552:	781b      	ldrb	r3, [r3, #0]
   24554:	08db      	lsrs	r3, r3, #3
   24556:	b2db      	uxtb	r3, r3
   24558:	0018      	movs	r0, r3
   2455a:	1dfb      	adds	r3, r7, #7
   2455c:	781b      	ldrb	r3, [r3, #0]
   2455e:	08db      	lsrs	r3, r3, #3
   24560:	b2db      	uxtb	r3, r3
   24562:	001a      	movs	r2, r3
   24564:	693b      	ldr	r3, [r7, #16]
   24566:	3206      	adds	r2, #6
   24568:	0092      	lsls	r2, r2, #2
   2456a:	58d3      	ldr	r3, [r2, r3]
   2456c:	210f      	movs	r1, #15
   2456e:	68fa      	ldr	r2, [r7, #12]
   24570:	4091      	lsls	r1, r2
   24572:	000a      	movs	r2, r1
   24574:	43d2      	mvns	r2, r2
   24576:	401a      	ands	r2, r3
   24578:	6979      	ldr	r1, [r7, #20]
   2457a:	68fb      	ldr	r3, [r7, #12]
   2457c:	4099      	lsls	r1, r3
   2457e:	000b      	movs	r3, r1
   24580:	431a      	orrs	r2, r3
   24582:	0011      	movs	r1, r2
   24584:	693b      	ldr	r3, [r7, #16]
   24586:	1d82      	adds	r2, r0, #6
   24588:	0092      	lsls	r2, r2, #2
   2458a:	50d1      	str	r1, [r2, r3]
   2458c:	683b      	ldr	r3, [r7, #0]
   2458e:	7a5b      	ldrb	r3, [r3, #9]
   24590:	2b00      	cmp	r3, #0
   24592:	d00a      	beq.n	245aa <extint_chan_set_config+0xd2>
   24594:	693b      	ldr	r3, [r7, #16]
   24596:	695a      	ldr	r2, [r3, #20]
   24598:	1dfb      	adds	r3, r7, #7
   2459a:	781b      	ldrb	r3, [r3, #0]
   2459c:	2101      	movs	r1, #1
   2459e:	4099      	lsls	r1, r3
   245a0:	000b      	movs	r3, r1
   245a2:	431a      	orrs	r2, r3
   245a4:	693b      	ldr	r3, [r7, #16]
   245a6:	615a      	str	r2, [r3, #20]
   245a8:	e00a      	b.n	245c0 <extint_chan_set_config+0xe8>
   245aa:	693b      	ldr	r3, [r7, #16]
   245ac:	695b      	ldr	r3, [r3, #20]
   245ae:	1dfa      	adds	r2, r7, #7
   245b0:	7812      	ldrb	r2, [r2, #0]
   245b2:	2101      	movs	r1, #1
   245b4:	4091      	lsls	r1, r2
   245b6:	000a      	movs	r2, r1
   245b8:	43d2      	mvns	r2, r2
   245ba:	401a      	ands	r2, r3
   245bc:	693b      	ldr	r3, [r7, #16]
   245be:	615a      	str	r2, [r3, #20]
   245c0:	46c0      	nop			; (mov r8, r8)
   245c2:	46bd      	mov	sp, r7
   245c4:	b006      	add	sp, #24
   245c6:	bd80      	pop	{r7, pc}
   245c8:	00024279 	.word	0x00024279
   245cc:	00027ded 	.word	0x00027ded
   245d0:	000242cd 	.word	0x000242cd

000245d4 <system_pinmux_get_config_defaults>:
   245d4:	b580      	push	{r7, lr}
   245d6:	b082      	sub	sp, #8
   245d8:	af00      	add	r7, sp, #0
   245da:	6078      	str	r0, [r7, #4]
   245dc:	687b      	ldr	r3, [r7, #4]
   245de:	2280      	movs	r2, #128	; 0x80
   245e0:	701a      	strb	r2, [r3, #0]
   245e2:	687b      	ldr	r3, [r7, #4]
   245e4:	2200      	movs	r2, #0
   245e6:	705a      	strb	r2, [r3, #1]
   245e8:	687b      	ldr	r3, [r7, #4]
   245ea:	2201      	movs	r2, #1
   245ec:	709a      	strb	r2, [r3, #2]
   245ee:	687b      	ldr	r3, [r7, #4]
   245f0:	2200      	movs	r2, #0
   245f2:	70da      	strb	r2, [r3, #3]
   245f4:	46c0      	nop			; (mov r8, r8)
   245f6:	46bd      	mov	sp, r7
   245f8:	b002      	add	sp, #8
   245fa:	bd80      	pop	{r7, pc}

000245fc <port_pin_set_config>:
   245fc:	b580      	push	{r7, lr}
   245fe:	b084      	sub	sp, #16
   24600:	af00      	add	r7, sp, #0
   24602:	0002      	movs	r2, r0
   24604:	6039      	str	r1, [r7, #0]
   24606:	1dfb      	adds	r3, r7, #7
   24608:	701a      	strb	r2, [r3, #0]
   2460a:	230c      	movs	r3, #12
   2460c:	18fb      	adds	r3, r7, r3
   2460e:	0018      	movs	r0, r3
   24610:	4b10      	ldr	r3, [pc, #64]	; (24654 <port_pin_set_config+0x58>)
   24612:	4798      	blx	r3
   24614:	230c      	movs	r3, #12
   24616:	18fb      	adds	r3, r7, r3
   24618:	2280      	movs	r2, #128	; 0x80
   2461a:	701a      	strb	r2, [r3, #0]
   2461c:	683b      	ldr	r3, [r7, #0]
   2461e:	781a      	ldrb	r2, [r3, #0]
   24620:	230c      	movs	r3, #12
   24622:	18fb      	adds	r3, r7, r3
   24624:	705a      	strb	r2, [r3, #1]
   24626:	683b      	ldr	r3, [r7, #0]
   24628:	785a      	ldrb	r2, [r3, #1]
   2462a:	230c      	movs	r3, #12
   2462c:	18fb      	adds	r3, r7, r3
   2462e:	709a      	strb	r2, [r3, #2]
   24630:	683b      	ldr	r3, [r7, #0]
   24632:	789a      	ldrb	r2, [r3, #2]
   24634:	230c      	movs	r3, #12
   24636:	18fb      	adds	r3, r7, r3
   24638:	70da      	strb	r2, [r3, #3]
   2463a:	230c      	movs	r3, #12
   2463c:	18fa      	adds	r2, r7, r3
   2463e:	1dfb      	adds	r3, r7, #7
   24640:	781b      	ldrb	r3, [r3, #0]
   24642:	0011      	movs	r1, r2
   24644:	0018      	movs	r0, r3
   24646:	4b04      	ldr	r3, [pc, #16]	; (24658 <port_pin_set_config+0x5c>)
   24648:	4798      	blx	r3
   2464a:	46c0      	nop			; (mov r8, r8)
   2464c:	46bd      	mov	sp, r7
   2464e:	b004      	add	sp, #16
   24650:	bd80      	pop	{r7, pc}
   24652:	46c0      	nop			; (mov r8, r8)
   24654:	000245d5 	.word	0x000245d5
   24658:	00027ded 	.word	0x00027ded

0002465c <system_gclk_chan_get_config_defaults>:
   2465c:	b580      	push	{r7, lr}
   2465e:	b082      	sub	sp, #8
   24660:	af00      	add	r7, sp, #0
   24662:	6078      	str	r0, [r7, #4]
   24664:	687b      	ldr	r3, [r7, #4]
   24666:	2200      	movs	r2, #0
   24668:	701a      	strb	r2, [r3, #0]
   2466a:	46c0      	nop			; (mov r8, r8)
   2466c:	46bd      	mov	sp, r7
   2466e:	b002      	add	sp, #8
   24670:	bd80      	pop	{r7, pc}
	...

00024674 <system_apb_clock_set_mask>:
   24674:	b580      	push	{r7, lr}
   24676:	b082      	sub	sp, #8
   24678:	af00      	add	r7, sp, #0
   2467a:	0002      	movs	r2, r0
   2467c:	6039      	str	r1, [r7, #0]
   2467e:	1dfb      	adds	r3, r7, #7
   24680:	701a      	strb	r2, [r3, #0]
   24682:	1dfb      	adds	r3, r7, #7
   24684:	781b      	ldrb	r3, [r3, #0]
   24686:	2b01      	cmp	r3, #1
   24688:	d00a      	beq.n	246a0 <system_apb_clock_set_mask+0x2c>
   2468a:	2b02      	cmp	r3, #2
   2468c:	d00f      	beq.n	246ae <system_apb_clock_set_mask+0x3a>
   2468e:	2b00      	cmp	r3, #0
   24690:	d114      	bne.n	246bc <system_apb_clock_set_mask+0x48>
   24692:	4b0e      	ldr	r3, [pc, #56]	; (246cc <system_apb_clock_set_mask+0x58>)
   24694:	4a0d      	ldr	r2, [pc, #52]	; (246cc <system_apb_clock_set_mask+0x58>)
   24696:	6991      	ldr	r1, [r2, #24]
   24698:	683a      	ldr	r2, [r7, #0]
   2469a:	430a      	orrs	r2, r1
   2469c:	619a      	str	r2, [r3, #24]
   2469e:	e00f      	b.n	246c0 <system_apb_clock_set_mask+0x4c>
   246a0:	4b0a      	ldr	r3, [pc, #40]	; (246cc <system_apb_clock_set_mask+0x58>)
   246a2:	4a0a      	ldr	r2, [pc, #40]	; (246cc <system_apb_clock_set_mask+0x58>)
   246a4:	69d1      	ldr	r1, [r2, #28]
   246a6:	683a      	ldr	r2, [r7, #0]
   246a8:	430a      	orrs	r2, r1
   246aa:	61da      	str	r2, [r3, #28]
   246ac:	e008      	b.n	246c0 <system_apb_clock_set_mask+0x4c>
   246ae:	4b07      	ldr	r3, [pc, #28]	; (246cc <system_apb_clock_set_mask+0x58>)
   246b0:	4a06      	ldr	r2, [pc, #24]	; (246cc <system_apb_clock_set_mask+0x58>)
   246b2:	6a11      	ldr	r1, [r2, #32]
   246b4:	683a      	ldr	r2, [r7, #0]
   246b6:	430a      	orrs	r2, r1
   246b8:	621a      	str	r2, [r3, #32]
   246ba:	e001      	b.n	246c0 <system_apb_clock_set_mask+0x4c>
   246bc:	2317      	movs	r3, #23
   246be:	e000      	b.n	246c2 <system_apb_clock_set_mask+0x4e>
   246c0:	2300      	movs	r3, #0
   246c2:	0018      	movs	r0, r3
   246c4:	46bd      	mov	sp, r7
   246c6:	b002      	add	sp, #8
   246c8:	bd80      	pop	{r7, pc}
   246ca:	46c0      	nop			; (mov r8, r8)
   246cc:	40000400 	.word	0x40000400

000246d0 <system_interrupt_enable>:
   246d0:	b580      	push	{r7, lr}
   246d2:	b082      	sub	sp, #8
   246d4:	af00      	add	r7, sp, #0
   246d6:	0002      	movs	r2, r0
   246d8:	1dfb      	adds	r3, r7, #7
   246da:	701a      	strb	r2, [r3, #0]
   246dc:	4b06      	ldr	r3, [pc, #24]	; (246f8 <system_interrupt_enable+0x28>)
   246de:	1dfa      	adds	r2, r7, #7
   246e0:	7812      	ldrb	r2, [r2, #0]
   246e2:	0011      	movs	r1, r2
   246e4:	221f      	movs	r2, #31
   246e6:	400a      	ands	r2, r1
   246e8:	2101      	movs	r1, #1
   246ea:	4091      	lsls	r1, r2
   246ec:	000a      	movs	r2, r1
   246ee:	601a      	str	r2, [r3, #0]
   246f0:	46c0      	nop			; (mov r8, r8)
   246f2:	46bd      	mov	sp, r7
   246f4:	b002      	add	sp, #8
   246f6:	bd80      	pop	{r7, pc}
   246f8:	e000e100 	.word	0xe000e100

000246fc <system_interrupt_disable>:
   246fc:	b580      	push	{r7, lr}
   246fe:	b082      	sub	sp, #8
   24700:	af00      	add	r7, sp, #0
   24702:	0002      	movs	r2, r0
   24704:	1dfb      	adds	r3, r7, #7
   24706:	701a      	strb	r2, [r3, #0]
   24708:	4a07      	ldr	r2, [pc, #28]	; (24728 <system_interrupt_disable+0x2c>)
   2470a:	1dfb      	adds	r3, r7, #7
   2470c:	781b      	ldrb	r3, [r3, #0]
   2470e:	0019      	movs	r1, r3
   24710:	231f      	movs	r3, #31
   24712:	400b      	ands	r3, r1
   24714:	2101      	movs	r1, #1
   24716:	4099      	lsls	r1, r3
   24718:	000b      	movs	r3, r1
   2471a:	0019      	movs	r1, r3
   2471c:	2380      	movs	r3, #128	; 0x80
   2471e:	50d1      	str	r1, [r2, r3]
   24720:	46c0      	nop			; (mov r8, r8)
   24722:	46bd      	mov	sp, r7
   24724:	b002      	add	sp, #8
   24726:	bd80      	pop	{r7, pc}
   24728:	e000e100 	.word	0xe000e100

0002472c <rtc_calendar_is_syncing>:
   2472c:	b580      	push	{r7, lr}
   2472e:	b084      	sub	sp, #16
   24730:	af00      	add	r7, sp, #0
   24732:	6078      	str	r0, [r7, #4]
   24734:	687b      	ldr	r3, [r7, #4]
   24736:	681b      	ldr	r3, [r3, #0]
   24738:	60fb      	str	r3, [r7, #12]
   2473a:	68fb      	ldr	r3, [r7, #12]
   2473c:	7a9b      	ldrb	r3, [r3, #10]
   2473e:	b2db      	uxtb	r3, r3
   24740:	b25b      	sxtb	r3, r3
   24742:	2b00      	cmp	r3, #0
   24744:	da01      	bge.n	2474a <rtc_calendar_is_syncing+0x1e>
   24746:	2301      	movs	r3, #1
   24748:	e000      	b.n	2474c <rtc_calendar_is_syncing+0x20>
   2474a:	2300      	movs	r3, #0
   2474c:	0018      	movs	r0, r3
   2474e:	46bd      	mov	sp, r7
   24750:	b004      	add	sp, #16
   24752:	bd80      	pop	{r7, pc}

00024754 <rtc_calendar_enable>:
   24754:	b580      	push	{r7, lr}
   24756:	b084      	sub	sp, #16
   24758:	af00      	add	r7, sp, #0
   2475a:	6078      	str	r0, [r7, #4]
   2475c:	687b      	ldr	r3, [r7, #4]
   2475e:	681b      	ldr	r3, [r3, #0]
   24760:	60fb      	str	r3, [r7, #12]
   24762:	2003      	movs	r0, #3
   24764:	4b0a      	ldr	r3, [pc, #40]	; (24790 <rtc_calendar_enable+0x3c>)
   24766:	4798      	blx	r3
   24768:	46c0      	nop			; (mov r8, r8)
   2476a:	687b      	ldr	r3, [r7, #4]
   2476c:	0018      	movs	r0, r3
   2476e:	4b09      	ldr	r3, [pc, #36]	; (24794 <rtc_calendar_enable+0x40>)
   24770:	4798      	blx	r3
   24772:	1e03      	subs	r3, r0, #0
   24774:	d1f9      	bne.n	2476a <rtc_calendar_enable+0x16>
   24776:	68fb      	ldr	r3, [r7, #12]
   24778:	881b      	ldrh	r3, [r3, #0]
   2477a:	b29b      	uxth	r3, r3
   2477c:	2202      	movs	r2, #2
   2477e:	4313      	orrs	r3, r2
   24780:	b29a      	uxth	r2, r3
   24782:	68fb      	ldr	r3, [r7, #12]
   24784:	801a      	strh	r2, [r3, #0]
   24786:	46c0      	nop			; (mov r8, r8)
   24788:	46bd      	mov	sp, r7
   2478a:	b004      	add	sp, #16
   2478c:	bd80      	pop	{r7, pc}
   2478e:	46c0      	nop			; (mov r8, r8)
   24790:	000246d1 	.word	0x000246d1
   24794:	0002472d 	.word	0x0002472d

00024798 <rtc_calendar_disable>:
   24798:	b580      	push	{r7, lr}
   2479a:	b084      	sub	sp, #16
   2479c:	af00      	add	r7, sp, #0
   2479e:	6078      	str	r0, [r7, #4]
   247a0:	687b      	ldr	r3, [r7, #4]
   247a2:	681b      	ldr	r3, [r3, #0]
   247a4:	60fb      	str	r3, [r7, #12]
   247a6:	2003      	movs	r0, #3
   247a8:	4b0d      	ldr	r3, [pc, #52]	; (247e0 <rtc_calendar_disable+0x48>)
   247aa:	4798      	blx	r3
   247ac:	46c0      	nop			; (mov r8, r8)
   247ae:	687b      	ldr	r3, [r7, #4]
   247b0:	0018      	movs	r0, r3
   247b2:	4b0c      	ldr	r3, [pc, #48]	; (247e4 <rtc_calendar_disable+0x4c>)
   247b4:	4798      	blx	r3
   247b6:	1e03      	subs	r3, r0, #0
   247b8:	d1f9      	bne.n	247ae <rtc_calendar_disable+0x16>
   247ba:	68fb      	ldr	r3, [r7, #12]
   247bc:	22c1      	movs	r2, #193	; 0xc1
   247be:	719a      	strb	r2, [r3, #6]
   247c0:	68fb      	ldr	r3, [r7, #12]
   247c2:	22c1      	movs	r2, #193	; 0xc1
   247c4:	721a      	strb	r2, [r3, #8]
   247c6:	68fb      	ldr	r3, [r7, #12]
   247c8:	881b      	ldrh	r3, [r3, #0]
   247ca:	b29b      	uxth	r3, r3
   247cc:	2202      	movs	r2, #2
   247ce:	4393      	bics	r3, r2
   247d0:	b29a      	uxth	r2, r3
   247d2:	68fb      	ldr	r3, [r7, #12]
   247d4:	801a      	strh	r2, [r3, #0]
   247d6:	46c0      	nop			; (mov r8, r8)
   247d8:	46bd      	mov	sp, r7
   247da:	b004      	add	sp, #16
   247dc:	bd80      	pop	{r7, pc}
   247de:	46c0      	nop			; (mov r8, r8)
   247e0:	000246fd 	.word	0x000246fd
   247e4:	0002472d 	.word	0x0002472d

000247e8 <rtc_calendar_reset>:
   247e8:	b580      	push	{r7, lr}
   247ea:	b084      	sub	sp, #16
   247ec:	af00      	add	r7, sp, #0
   247ee:	6078      	str	r0, [r7, #4]
   247f0:	687b      	ldr	r3, [r7, #4]
   247f2:	681b      	ldr	r3, [r3, #0]
   247f4:	60fb      	str	r3, [r7, #12]
   247f6:	687b      	ldr	r3, [r7, #4]
   247f8:	0018      	movs	r0, r3
   247fa:	4b0d      	ldr	r3, [pc, #52]	; (24830 <rtc_calendar_reset+0x48>)
   247fc:	4798      	blx	r3
   247fe:	687b      	ldr	r3, [r7, #4]
   24800:	2200      	movs	r2, #0
   24802:	821a      	strh	r2, [r3, #16]
   24804:	687b      	ldr	r3, [r7, #4]
   24806:	2200      	movs	r2, #0
   24808:	825a      	strh	r2, [r3, #18]
   2480a:	46c0      	nop			; (mov r8, r8)
   2480c:	687b      	ldr	r3, [r7, #4]
   2480e:	0018      	movs	r0, r3
   24810:	4b08      	ldr	r3, [pc, #32]	; (24834 <rtc_calendar_reset+0x4c>)
   24812:	4798      	blx	r3
   24814:	1e03      	subs	r3, r0, #0
   24816:	d1f9      	bne.n	2480c <rtc_calendar_reset+0x24>
   24818:	68fb      	ldr	r3, [r7, #12]
   2481a:	881b      	ldrh	r3, [r3, #0]
   2481c:	b29b      	uxth	r3, r3
   2481e:	2201      	movs	r2, #1
   24820:	4313      	orrs	r3, r2
   24822:	b29a      	uxth	r2, r3
   24824:	68fb      	ldr	r3, [r7, #12]
   24826:	801a      	strh	r2, [r3, #0]
   24828:	46c0      	nop			; (mov r8, r8)
   2482a:	46bd      	mov	sp, r7
   2482c:	b004      	add	sp, #16
   2482e:	bd80      	pop	{r7, pc}
   24830:	00024799 	.word	0x00024799
   24834:	0002472d 	.word	0x0002472d

00024838 <rtc_calendar_time_to_register_value>:
   24838:	b580      	push	{r7, lr}
   2483a:	b084      	sub	sp, #16
   2483c:	af00      	add	r7, sp, #0
   2483e:	6078      	str	r0, [r7, #4]
   24840:	6039      	str	r1, [r7, #0]
   24842:	683b      	ldr	r3, [r7, #0]
   24844:	88db      	ldrh	r3, [r3, #6]
   24846:	001a      	movs	r2, r3
   24848:	687b      	ldr	r3, [r7, #4]
   2484a:	88db      	ldrh	r3, [r3, #6]
   2484c:	1ad3      	subs	r3, r2, r3
   2484e:	069b      	lsls	r3, r3, #26
   24850:	60fb      	str	r3, [r7, #12]
   24852:	683b      	ldr	r3, [r7, #0]
   24854:	795b      	ldrb	r3, [r3, #5]
   24856:	059b      	lsls	r3, r3, #22
   24858:	001a      	movs	r2, r3
   2485a:	68fb      	ldr	r3, [r7, #12]
   2485c:	4313      	orrs	r3, r2
   2485e:	60fb      	str	r3, [r7, #12]
   24860:	683b      	ldr	r3, [r7, #0]
   24862:	791b      	ldrb	r3, [r3, #4]
   24864:	045b      	lsls	r3, r3, #17
   24866:	001a      	movs	r2, r3
   24868:	68fb      	ldr	r3, [r7, #12]
   2486a:	4313      	orrs	r3, r2
   2486c:	60fb      	str	r3, [r7, #12]
   2486e:	683b      	ldr	r3, [r7, #0]
   24870:	789b      	ldrb	r3, [r3, #2]
   24872:	031b      	lsls	r3, r3, #12
   24874:	001a      	movs	r2, r3
   24876:	68fb      	ldr	r3, [r7, #12]
   24878:	4313      	orrs	r3, r2
   2487a:	60fb      	str	r3, [r7, #12]
   2487c:	687b      	ldr	r3, [r7, #4]
   2487e:	791b      	ldrb	r3, [r3, #4]
   24880:	2201      	movs	r2, #1
   24882:	4053      	eors	r3, r2
   24884:	b2db      	uxtb	r3, r3
   24886:	2b00      	cmp	r3, #0
   24888:	d008      	beq.n	2489c <rtc_calendar_time_to_register_value+0x64>
   2488a:	683b      	ldr	r3, [r7, #0]
   2488c:	78db      	ldrb	r3, [r3, #3]
   2488e:	2b00      	cmp	r3, #0
   24890:	d004      	beq.n	2489c <rtc_calendar_time_to_register_value+0x64>
   24892:	68fb      	ldr	r3, [r7, #12]
   24894:	2280      	movs	r2, #128	; 0x80
   24896:	0252      	lsls	r2, r2, #9
   24898:	4313      	orrs	r3, r2
   2489a:	60fb      	str	r3, [r7, #12]
   2489c:	683b      	ldr	r3, [r7, #0]
   2489e:	785b      	ldrb	r3, [r3, #1]
   248a0:	019b      	lsls	r3, r3, #6
   248a2:	001a      	movs	r2, r3
   248a4:	68fb      	ldr	r3, [r7, #12]
   248a6:	4313      	orrs	r3, r2
   248a8:	60fb      	str	r3, [r7, #12]
   248aa:	683b      	ldr	r3, [r7, #0]
   248ac:	781b      	ldrb	r3, [r3, #0]
   248ae:	001a      	movs	r2, r3
   248b0:	68fb      	ldr	r3, [r7, #12]
   248b2:	4313      	orrs	r3, r2
   248b4:	60fb      	str	r3, [r7, #12]
   248b6:	68fb      	ldr	r3, [r7, #12]
   248b8:	0018      	movs	r0, r3
   248ba:	46bd      	mov	sp, r7
   248bc:	b004      	add	sp, #16
   248be:	bd80      	pop	{r7, pc}

000248c0 <rtc_calendar_register_value_to_time>:
   248c0:	b580      	push	{r7, lr}
   248c2:	b084      	sub	sp, #16
   248c4:	af00      	add	r7, sp, #0
   248c6:	60f8      	str	r0, [r7, #12]
   248c8:	60b9      	str	r1, [r7, #8]
   248ca:	607a      	str	r2, [r7, #4]
   248cc:	68bb      	ldr	r3, [r7, #8]
   248ce:	0e9b      	lsrs	r3, r3, #26
   248d0:	b29a      	uxth	r2, r3
   248d2:	68fb      	ldr	r3, [r7, #12]
   248d4:	88db      	ldrh	r3, [r3, #6]
   248d6:	18d3      	adds	r3, r2, r3
   248d8:	b29a      	uxth	r2, r3
   248da:	687b      	ldr	r3, [r7, #4]
   248dc:	80da      	strh	r2, [r3, #6]
   248de:	68bb      	ldr	r3, [r7, #8]
   248e0:	0d9b      	lsrs	r3, r3, #22
   248e2:	b2db      	uxtb	r3, r3
   248e4:	220f      	movs	r2, #15
   248e6:	4013      	ands	r3, r2
   248e8:	b2da      	uxtb	r2, r3
   248ea:	687b      	ldr	r3, [r7, #4]
   248ec:	715a      	strb	r2, [r3, #5]
   248ee:	68bb      	ldr	r3, [r7, #8]
   248f0:	0c5b      	lsrs	r3, r3, #17
   248f2:	b2db      	uxtb	r3, r3
   248f4:	221f      	movs	r2, #31
   248f6:	4013      	ands	r3, r2
   248f8:	b2da      	uxtb	r2, r3
   248fa:	687b      	ldr	r3, [r7, #4]
   248fc:	711a      	strb	r2, [r3, #4]
   248fe:	68fb      	ldr	r3, [r7, #12]
   24900:	791b      	ldrb	r3, [r3, #4]
   24902:	2b00      	cmp	r3, #0
   24904:	d008      	beq.n	24918 <rtc_calendar_register_value_to_time+0x58>
   24906:	68bb      	ldr	r3, [r7, #8]
   24908:	0b1b      	lsrs	r3, r3, #12
   2490a:	b2db      	uxtb	r3, r3
   2490c:	221f      	movs	r2, #31
   2490e:	4013      	ands	r3, r2
   24910:	b2da      	uxtb	r2, r3
   24912:	687b      	ldr	r3, [r7, #4]
   24914:	709a      	strb	r2, [r3, #2]
   24916:	e010      	b.n	2493a <rtc_calendar_register_value_to_time+0x7a>
   24918:	68bb      	ldr	r3, [r7, #8]
   2491a:	0b1b      	lsrs	r3, r3, #12
   2491c:	b2db      	uxtb	r3, r3
   2491e:	220f      	movs	r2, #15
   24920:	4013      	ands	r3, r2
   24922:	b2da      	uxtb	r2, r3
   24924:	687b      	ldr	r3, [r7, #4]
   24926:	709a      	strb	r2, [r3, #2]
   24928:	68ba      	ldr	r2, [r7, #8]
   2492a:	2380      	movs	r3, #128	; 0x80
   2492c:	025b      	lsls	r3, r3, #9
   2492e:	4013      	ands	r3, r2
   24930:	1e5a      	subs	r2, r3, #1
   24932:	4193      	sbcs	r3, r2
   24934:	b2da      	uxtb	r2, r3
   24936:	687b      	ldr	r3, [r7, #4]
   24938:	70da      	strb	r2, [r3, #3]
   2493a:	68bb      	ldr	r3, [r7, #8]
   2493c:	099b      	lsrs	r3, r3, #6
   2493e:	b2db      	uxtb	r3, r3
   24940:	223f      	movs	r2, #63	; 0x3f
   24942:	4013      	ands	r3, r2
   24944:	b2da      	uxtb	r2, r3
   24946:	687b      	ldr	r3, [r7, #4]
   24948:	705a      	strb	r2, [r3, #1]
   2494a:	68bb      	ldr	r3, [r7, #8]
   2494c:	b2db      	uxtb	r3, r3
   2494e:	223f      	movs	r2, #63	; 0x3f
   24950:	4013      	ands	r3, r2
   24952:	b2da      	uxtb	r2, r3
   24954:	687b      	ldr	r3, [r7, #4]
   24956:	701a      	strb	r2, [r3, #0]
   24958:	46c0      	nop			; (mov r8, r8)
   2495a:	46bd      	mov	sp, r7
   2495c:	b004      	add	sp, #16
   2495e:	bd80      	pop	{r7, pc}

00024960 <_rtc_calendar_set_config>:
   24960:	b580      	push	{r7, lr}
   24962:	b084      	sub	sp, #16
   24964:	af00      	add	r7, sp, #0
   24966:	6078      	str	r0, [r7, #4]
   24968:	6039      	str	r1, [r7, #0]
   2496a:	687b      	ldr	r3, [r7, #4]
   2496c:	681b      	ldr	r3, [r3, #0]
   2496e:	60bb      	str	r3, [r7, #8]
   24970:	683b      	ldr	r3, [r7, #0]
   24972:	881a      	ldrh	r2, [r3, #0]
   24974:	230e      	movs	r3, #14
   24976:	18fb      	adds	r3, r7, r3
   24978:	2108      	movs	r1, #8
   2497a:	430a      	orrs	r2, r1
   2497c:	801a      	strh	r2, [r3, #0]
   2497e:	683b      	ldr	r3, [r7, #0]
   24980:	791b      	ldrb	r3, [r3, #4]
   24982:	2201      	movs	r2, #1
   24984:	4053      	eors	r3, r2
   24986:	b2db      	uxtb	r3, r3
   24988:	2b00      	cmp	r3, #0
   2498a:	d007      	beq.n	2499c <_rtc_calendar_set_config+0x3c>
   2498c:	230e      	movs	r3, #14
   2498e:	18fb      	adds	r3, r7, r3
   24990:	220e      	movs	r2, #14
   24992:	18ba      	adds	r2, r7, r2
   24994:	8812      	ldrh	r2, [r2, #0]
   24996:	2140      	movs	r1, #64	; 0x40
   24998:	430a      	orrs	r2, r1
   2499a:	801a      	strh	r2, [r3, #0]
   2499c:	683b      	ldr	r3, [r7, #0]
   2499e:	789b      	ldrb	r3, [r3, #2]
   249a0:	2b00      	cmp	r3, #0
   249a2:	d007      	beq.n	249b4 <_rtc_calendar_set_config+0x54>
   249a4:	230e      	movs	r3, #14
   249a6:	18fb      	adds	r3, r7, r3
   249a8:	220e      	movs	r2, #14
   249aa:	18ba      	adds	r2, r7, r2
   249ac:	8812      	ldrh	r2, [r2, #0]
   249ae:	2180      	movs	r1, #128	; 0x80
   249b0:	430a      	orrs	r2, r1
   249b2:	801a      	strh	r2, [r3, #0]
   249b4:	68bb      	ldr	r3, [r7, #8]
   249b6:	220e      	movs	r2, #14
   249b8:	18ba      	adds	r2, r7, r2
   249ba:	8812      	ldrh	r2, [r2, #0]
   249bc:	801a      	strh	r2, [r3, #0]
   249be:	683b      	ldr	r3, [r7, #0]
   249c0:	78db      	ldrb	r3, [r3, #3]
   249c2:	2b00      	cmp	r3, #0
   249c4:	d008      	beq.n	249d8 <_rtc_calendar_set_config+0x78>
   249c6:	68bb      	ldr	r3, [r7, #8]
   249c8:	885b      	ldrh	r3, [r3, #2]
   249ca:	b29b      	uxth	r3, r3
   249cc:	2280      	movs	r2, #128	; 0x80
   249ce:	01d2      	lsls	r2, r2, #7
   249d0:	4313      	orrs	r3, r2
   249d2:	b29a      	uxth	r2, r3
   249d4:	68bb      	ldr	r3, [r7, #8]
   249d6:	805a      	strh	r2, [r3, #2]
   249d8:	230d      	movs	r3, #13
   249da:	18fb      	adds	r3, r7, r3
   249dc:	2200      	movs	r2, #0
   249de:	701a      	strb	r2, [r3, #0]
   249e0:	e017      	b.n	24a12 <_rtc_calendar_set_config+0xb2>
   249e2:	230d      	movs	r3, #13
   249e4:	18fb      	adds	r3, r7, r3
   249e6:	781a      	ldrb	r2, [r3, #0]
   249e8:	0013      	movs	r3, r2
   249ea:	009b      	lsls	r3, r3, #2
   249ec:	189b      	adds	r3, r3, r2
   249ee:	005b      	lsls	r3, r3, #1
   249f0:	3308      	adds	r3, #8
   249f2:	683a      	ldr	r2, [r7, #0]
   249f4:	18d1      	adds	r1, r2, r3
   249f6:	230d      	movs	r3, #13
   249f8:	18fb      	adds	r3, r7, r3
   249fa:	781a      	ldrb	r2, [r3, #0]
   249fc:	687b      	ldr	r3, [r7, #4]
   249fe:	0018      	movs	r0, r3
   24a00:	4b08      	ldr	r3, [pc, #32]	; (24a24 <_rtc_calendar_set_config+0xc4>)
   24a02:	4798      	blx	r3
   24a04:	230d      	movs	r3, #13
   24a06:	18fb      	adds	r3, r7, r3
   24a08:	781a      	ldrb	r2, [r3, #0]
   24a0a:	230d      	movs	r3, #13
   24a0c:	18fb      	adds	r3, r7, r3
   24a0e:	3201      	adds	r2, #1
   24a10:	701a      	strb	r2, [r3, #0]
   24a12:	230d      	movs	r3, #13
   24a14:	18fb      	adds	r3, r7, r3
   24a16:	781b      	ldrb	r3, [r3, #0]
   24a18:	2b00      	cmp	r3, #0
   24a1a:	d0e2      	beq.n	249e2 <_rtc_calendar_set_config+0x82>
   24a1c:	46c0      	nop			; (mov r8, r8)
   24a1e:	46bd      	mov	sp, r7
   24a20:	b004      	add	sp, #16
   24a22:	bd80      	pop	{r7, pc}
   24a24:	00024b49 	.word	0x00024b49

00024a28 <rtc_calendar_init>:
   24a28:	b580      	push	{r7, lr}
   24a2a:	b086      	sub	sp, #24
   24a2c:	af00      	add	r7, sp, #0
   24a2e:	60f8      	str	r0, [r7, #12]
   24a30:	60b9      	str	r1, [r7, #8]
   24a32:	607a      	str	r2, [r7, #4]
   24a34:	68fb      	ldr	r3, [r7, #12]
   24a36:	68ba      	ldr	r2, [r7, #8]
   24a38:	601a      	str	r2, [r3, #0]
   24a3a:	2120      	movs	r1, #32
   24a3c:	2000      	movs	r0, #0
   24a3e:	4b18      	ldr	r3, [pc, #96]	; (24aa0 <rtc_calendar_init+0x78>)
   24a40:	4798      	blx	r3
   24a42:	2314      	movs	r3, #20
   24a44:	18fb      	adds	r3, r7, r3
   24a46:	0018      	movs	r0, r3
   24a48:	4b16      	ldr	r3, [pc, #88]	; (24aa4 <rtc_calendar_init+0x7c>)
   24a4a:	4798      	blx	r3
   24a4c:	2314      	movs	r3, #20
   24a4e:	18fb      	adds	r3, r7, r3
   24a50:	2202      	movs	r2, #2
   24a52:	701a      	strb	r2, [r3, #0]
   24a54:	2314      	movs	r3, #20
   24a56:	18fb      	adds	r3, r7, r3
   24a58:	0019      	movs	r1, r3
   24a5a:	2004      	movs	r0, #4
   24a5c:	4b12      	ldr	r3, [pc, #72]	; (24aa8 <rtc_calendar_init+0x80>)
   24a5e:	4798      	blx	r3
   24a60:	2004      	movs	r0, #4
   24a62:	4b12      	ldr	r3, [pc, #72]	; (24aac <rtc_calendar_init+0x84>)
   24a64:	4798      	blx	r3
   24a66:	68fb      	ldr	r3, [r7, #12]
   24a68:	0018      	movs	r0, r3
   24a6a:	4b11      	ldr	r3, [pc, #68]	; (24ab0 <rtc_calendar_init+0x88>)
   24a6c:	4798      	blx	r3
   24a6e:	687b      	ldr	r3, [r7, #4]
   24a70:	791a      	ldrb	r2, [r3, #4]
   24a72:	68fb      	ldr	r3, [r7, #12]
   24a74:	711a      	strb	r2, [r3, #4]
   24a76:	687b      	ldr	r3, [r7, #4]
   24a78:	78da      	ldrb	r2, [r3, #3]
   24a7a:	68fb      	ldr	r3, [r7, #12]
   24a7c:	715a      	strb	r2, [r3, #5]
   24a7e:	687b      	ldr	r3, [r7, #4]
   24a80:	88da      	ldrh	r2, [r3, #6]
   24a82:	68fb      	ldr	r3, [r7, #12]
   24a84:	80da      	strh	r2, [r3, #6]
   24a86:	4b0b      	ldr	r3, [pc, #44]	; (24ab4 <rtc_calendar_init+0x8c>)
   24a88:	68fa      	ldr	r2, [r7, #12]
   24a8a:	601a      	str	r2, [r3, #0]
   24a8c:	687a      	ldr	r2, [r7, #4]
   24a8e:	68fb      	ldr	r3, [r7, #12]
   24a90:	0011      	movs	r1, r2
   24a92:	0018      	movs	r0, r3
   24a94:	4b08      	ldr	r3, [pc, #32]	; (24ab8 <rtc_calendar_init+0x90>)
   24a96:	4798      	blx	r3
   24a98:	46c0      	nop			; (mov r8, r8)
   24a9a:	46bd      	mov	sp, r7
   24a9c:	b006      	add	sp, #24
   24a9e:	bd80      	pop	{r7, pc}
   24aa0:	00024675 	.word	0x00024675
   24aa4:	0002465d 	.word	0x0002465d
   24aa8:	00027a8d 	.word	0x00027a8d
   24aac:	00027ad1 	.word	0x00027ad1
   24ab0:	000247e9 	.word	0x000247e9
   24ab4:	20005574 	.word	0x20005574
   24ab8:	00024961 	.word	0x00024961

00024abc <rtc_calendar_get_time>:
   24abc:	b580      	push	{r7, lr}
   24abe:	b084      	sub	sp, #16
   24ac0:	af00      	add	r7, sp, #0
   24ac2:	6078      	str	r0, [r7, #4]
   24ac4:	6039      	str	r1, [r7, #0]
   24ac6:	687b      	ldr	r3, [r7, #4]
   24ac8:	681b      	ldr	r3, [r3, #0]
   24aca:	60fb      	str	r3, [r7, #12]
   24acc:	687b      	ldr	r3, [r7, #4]
   24ace:	795b      	ldrb	r3, [r3, #5]
   24ad0:	2201      	movs	r2, #1
   24ad2:	4053      	eors	r3, r2
   24ad4:	b2db      	uxtb	r3, r3
   24ad6:	2b00      	cmp	r3, #0
   24ad8:	d00a      	beq.n	24af0 <rtc_calendar_get_time+0x34>
   24ada:	68fb      	ldr	r3, [r7, #12]
   24adc:	4a16      	ldr	r2, [pc, #88]	; (24b38 <rtc_calendar_get_time+0x7c>)
   24ade:	805a      	strh	r2, [r3, #2]
   24ae0:	46c0      	nop			; (mov r8, r8)
   24ae2:	687b      	ldr	r3, [r7, #4]
   24ae4:	0018      	movs	r0, r3
   24ae6:	4b15      	ldr	r3, [pc, #84]	; (24b3c <rtc_calendar_get_time+0x80>)
   24ae8:	4798      	blx	r3
   24aea:	1e03      	subs	r3, r0, #0
   24aec:	d1f9      	bne.n	24ae2 <rtc_calendar_get_time+0x26>
   24aee:	e016      	b.n	24b1e <rtc_calendar_get_time+0x62>
   24af0:	68fb      	ldr	r3, [r7, #12]
   24af2:	885b      	ldrh	r3, [r3, #2]
   24af4:	b29b      	uxth	r3, r3
   24af6:	001a      	movs	r2, r3
   24af8:	2380      	movs	r3, #128	; 0x80
   24afa:	01db      	lsls	r3, r3, #7
   24afc:	4013      	ands	r3, r2
   24afe:	d10e      	bne.n	24b1e <rtc_calendar_get_time+0x62>
   24b00:	68fb      	ldr	r3, [r7, #12]
   24b02:	885b      	ldrh	r3, [r3, #2]
   24b04:	b29b      	uxth	r3, r3
   24b06:	4a0e      	ldr	r2, [pc, #56]	; (24b40 <rtc_calendar_get_time+0x84>)
   24b08:	4313      	orrs	r3, r2
   24b0a:	b29a      	uxth	r2, r3
   24b0c:	68fb      	ldr	r3, [r7, #12]
   24b0e:	805a      	strh	r2, [r3, #2]
   24b10:	46c0      	nop			; (mov r8, r8)
   24b12:	687b      	ldr	r3, [r7, #4]
   24b14:	0018      	movs	r0, r3
   24b16:	4b09      	ldr	r3, [pc, #36]	; (24b3c <rtc_calendar_get_time+0x80>)
   24b18:	4798      	blx	r3
   24b1a:	1e03      	subs	r3, r0, #0
   24b1c:	d1f9      	bne.n	24b12 <rtc_calendar_get_time+0x56>
   24b1e:	68fb      	ldr	r3, [r7, #12]
   24b20:	691b      	ldr	r3, [r3, #16]
   24b22:	60bb      	str	r3, [r7, #8]
   24b24:	683a      	ldr	r2, [r7, #0]
   24b26:	68b9      	ldr	r1, [r7, #8]
   24b28:	687b      	ldr	r3, [r7, #4]
   24b2a:	0018      	movs	r0, r3
   24b2c:	4b05      	ldr	r3, [pc, #20]	; (24b44 <rtc_calendar_get_time+0x88>)
   24b2e:	4798      	blx	r3
   24b30:	46c0      	nop			; (mov r8, r8)
   24b32:	46bd      	mov	sp, r7
   24b34:	b004      	add	sp, #16
   24b36:	bd80      	pop	{r7, pc}
   24b38:	ffff8000 	.word	0xffff8000
   24b3c:	0002472d 	.word	0x0002472d
   24b40:	ffffc000 	.word	0xffffc000
   24b44:	000248c1 	.word	0x000248c1

00024b48 <rtc_calendar_set_alarm>:
   24b48:	b580      	push	{r7, lr}
   24b4a:	b086      	sub	sp, #24
   24b4c:	af00      	add	r7, sp, #0
   24b4e:	60f8      	str	r0, [r7, #12]
   24b50:	60b9      	str	r1, [r7, #8]
   24b52:	1dfb      	adds	r3, r7, #7
   24b54:	701a      	strb	r2, [r3, #0]
   24b56:	68fb      	ldr	r3, [r7, #12]
   24b58:	681b      	ldr	r3, [r3, #0]
   24b5a:	617b      	str	r3, [r7, #20]
   24b5c:	1dfb      	adds	r3, r7, #7
   24b5e:	781b      	ldrb	r3, [r3, #0]
   24b60:	2b01      	cmp	r3, #1
   24b62:	d901      	bls.n	24b68 <rtc_calendar_set_alarm+0x20>
   24b64:	2317      	movs	r3, #23
   24b66:	e021      	b.n	24bac <rtc_calendar_set_alarm+0x64>
   24b68:	68ba      	ldr	r2, [r7, #8]
   24b6a:	68fb      	ldr	r3, [r7, #12]
   24b6c:	0011      	movs	r1, r2
   24b6e:	0018      	movs	r0, r3
   24b70:	4b10      	ldr	r3, [pc, #64]	; (24bb4 <rtc_calendar_set_alarm+0x6c>)
   24b72:	4798      	blx	r3
   24b74:	0003      	movs	r3, r0
   24b76:	613b      	str	r3, [r7, #16]
   24b78:	46c0      	nop			; (mov r8, r8)
   24b7a:	68fb      	ldr	r3, [r7, #12]
   24b7c:	0018      	movs	r0, r3
   24b7e:	4b0e      	ldr	r3, [pc, #56]	; (24bb8 <rtc_calendar_set_alarm+0x70>)
   24b80:	4798      	blx	r3
   24b82:	1e03      	subs	r3, r0, #0
   24b84:	d1f9      	bne.n	24b7a <rtc_calendar_set_alarm+0x32>
   24b86:	1dfb      	adds	r3, r7, #7
   24b88:	781a      	ldrb	r2, [r3, #0]
   24b8a:	697b      	ldr	r3, [r7, #20]
   24b8c:	3203      	adds	r2, #3
   24b8e:	00d2      	lsls	r2, r2, #3
   24b90:	6939      	ldr	r1, [r7, #16]
   24b92:	50d1      	str	r1, [r2, r3]
   24b94:	1dfb      	adds	r3, r7, #7
   24b96:	781b      	ldrb	r3, [r3, #0]
   24b98:	68ba      	ldr	r2, [r7, #8]
   24b9a:	7a11      	ldrb	r1, [r2, #8]
   24b9c:	697a      	ldr	r2, [r7, #20]
   24b9e:	3303      	adds	r3, #3
   24ba0:	00db      	lsls	r3, r3, #3
   24ba2:	18d3      	adds	r3, r2, r3
   24ba4:	3304      	adds	r3, #4
   24ba6:	1c0a      	adds	r2, r1, #0
   24ba8:	701a      	strb	r2, [r3, #0]
   24baa:	2300      	movs	r3, #0
   24bac:	0018      	movs	r0, r3
   24bae:	46bd      	mov	sp, r7
   24bb0:	b006      	add	sp, #24
   24bb2:	bd80      	pop	{r7, pc}
   24bb4:	00024839 	.word	0x00024839
   24bb8:	0002472d 	.word	0x0002472d

00024bbc <_rtc_interrupt_handler>:
   24bbc:	b580      	push	{r7, lr}
   24bbe:	b086      	sub	sp, #24
   24bc0:	af00      	add	r7, sp, #0
   24bc2:	6078      	str	r0, [r7, #4]
   24bc4:	4b28      	ldr	r3, [pc, #160]	; (24c68 <_rtc_interrupt_handler+0xac>)
   24bc6:	687a      	ldr	r2, [r7, #4]
   24bc8:	0092      	lsls	r2, r2, #2
   24bca:	58d3      	ldr	r3, [r2, r3]
   24bcc:	617b      	str	r3, [r7, #20]
   24bce:	697b      	ldr	r3, [r7, #20]
   24bd0:	681b      	ldr	r3, [r3, #0]
   24bd2:	613b      	str	r3, [r7, #16]
   24bd4:	230e      	movs	r3, #14
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	697a      	ldr	r2, [r7, #20]
   24bda:	8a52      	ldrh	r2, [r2, #18]
   24bdc:	801a      	strh	r2, [r3, #0]
   24bde:	697b      	ldr	r3, [r7, #20]
   24be0:	8a1b      	ldrh	r3, [r3, #16]
   24be2:	b29a      	uxth	r2, r3
   24be4:	230e      	movs	r3, #14
   24be6:	18fb      	adds	r3, r7, r3
   24be8:	210e      	movs	r1, #14
   24bea:	1879      	adds	r1, r7, r1
   24bec:	8809      	ldrh	r1, [r1, #0]
   24bee:	400a      	ands	r2, r1
   24bf0:	801a      	strh	r2, [r3, #0]
   24bf2:	693b      	ldr	r3, [r7, #16]
   24bf4:	7a1b      	ldrb	r3, [r3, #8]
   24bf6:	b2da      	uxtb	r2, r3
   24bf8:	230c      	movs	r3, #12
   24bfa:	18fb      	adds	r3, r7, r3
   24bfc:	801a      	strh	r2, [r3, #0]
   24bfe:	693b      	ldr	r3, [r7, #16]
   24c00:	79db      	ldrb	r3, [r3, #7]
   24c02:	b2db      	uxtb	r3, r3
   24c04:	b29a      	uxth	r2, r3
   24c06:	230c      	movs	r3, #12
   24c08:	18fb      	adds	r3, r7, r3
   24c0a:	210c      	movs	r1, #12
   24c0c:	1879      	adds	r1, r7, r1
   24c0e:	8809      	ldrh	r1, [r1, #0]
   24c10:	400a      	ands	r2, r1
   24c12:	801a      	strh	r2, [r3, #0]
   24c14:	230c      	movs	r3, #12
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	881b      	ldrh	r3, [r3, #0]
   24c1a:	2280      	movs	r2, #128	; 0x80
   24c1c:	4013      	ands	r3, r2
   24c1e:	d00c      	beq.n	24c3a <_rtc_interrupt_handler+0x7e>
   24c20:	230e      	movs	r3, #14
   24c22:	18fb      	adds	r3, r7, r3
   24c24:	881b      	ldrh	r3, [r3, #0]
   24c26:	2202      	movs	r2, #2
   24c28:	4013      	ands	r3, r2
   24c2a:	d002      	beq.n	24c32 <_rtc_interrupt_handler+0x76>
   24c2c:	697b      	ldr	r3, [r7, #20]
   24c2e:	68db      	ldr	r3, [r3, #12]
   24c30:	4798      	blx	r3
   24c32:	693b      	ldr	r3, [r7, #16]
   24c34:	2280      	movs	r2, #128	; 0x80
   24c36:	721a      	strb	r2, [r3, #8]
   24c38:	e011      	b.n	24c5e <_rtc_interrupt_handler+0xa2>
   24c3a:	230c      	movs	r3, #12
   24c3c:	18fb      	adds	r3, r7, r3
   24c3e:	881b      	ldrh	r3, [r3, #0]
   24c40:	2201      	movs	r2, #1
   24c42:	4013      	ands	r3, r2
   24c44:	d00b      	beq.n	24c5e <_rtc_interrupt_handler+0xa2>
   24c46:	230e      	movs	r3, #14
   24c48:	18fb      	adds	r3, r7, r3
   24c4a:	881b      	ldrh	r3, [r3, #0]
   24c4c:	2201      	movs	r2, #1
   24c4e:	4013      	ands	r3, r2
   24c50:	d002      	beq.n	24c58 <_rtc_interrupt_handler+0x9c>
   24c52:	697b      	ldr	r3, [r7, #20]
   24c54:	689b      	ldr	r3, [r3, #8]
   24c56:	4798      	blx	r3
   24c58:	693b      	ldr	r3, [r7, #16]
   24c5a:	2201      	movs	r2, #1
   24c5c:	721a      	strb	r2, [r3, #8]
   24c5e:	46c0      	nop			; (mov r8, r8)
   24c60:	46bd      	mov	sp, r7
   24c62:	b006      	add	sp, #24
   24c64:	bd80      	pop	{r7, pc}
   24c66:	46c0      	nop			; (mov r8, r8)
   24c68:	20005574 	.word	0x20005574

00024c6c <RTC_Handler>:
   24c6c:	b580      	push	{r7, lr}
   24c6e:	af00      	add	r7, sp, #0
   24c70:	2000      	movs	r0, #0
   24c72:	4b02      	ldr	r3, [pc, #8]	; (24c7c <RTC_Handler+0x10>)
   24c74:	4798      	blx	r3
   24c76:	46c0      	nop			; (mov r8, r8)
   24c78:	46bd      	mov	sp, r7
   24c7a:	bd80      	pop	{r7, pc}
   24c7c:	00024bbd 	.word	0x00024bbd

00024c80 <system_gclk_chan_get_config_defaults>:
   24c80:	b580      	push	{r7, lr}
   24c82:	b082      	sub	sp, #8
   24c84:	af00      	add	r7, sp, #0
   24c86:	6078      	str	r0, [r7, #4]
   24c88:	687b      	ldr	r3, [r7, #4]
   24c8a:	2200      	movs	r2, #0
   24c8c:	701a      	strb	r2, [r3, #0]
   24c8e:	46c0      	nop			; (mov r8, r8)
   24c90:	46bd      	mov	sp, r7
   24c92:	b002      	add	sp, #8
   24c94:	bd80      	pop	{r7, pc}

00024c96 <long_division>:
   24c96:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c98:	b08d      	sub	sp, #52	; 0x34
   24c9a:	af00      	add	r7, sp, #0
   24c9c:	60b8      	str	r0, [r7, #8]
   24c9e:	60f9      	str	r1, [r7, #12]
   24ca0:	603a      	str	r2, [r7, #0]
   24ca2:	607b      	str	r3, [r7, #4]
   24ca4:	2300      	movs	r3, #0
   24ca6:	2400      	movs	r4, #0
   24ca8:	623b      	str	r3, [r7, #32]
   24caa:	627c      	str	r4, [r7, #36]	; 0x24
   24cac:	2300      	movs	r3, #0
   24cae:	2400      	movs	r4, #0
   24cb0:	61bb      	str	r3, [r7, #24]
   24cb2:	61fc      	str	r4, [r7, #28]
   24cb4:	233f      	movs	r3, #63	; 0x3f
   24cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   24cb8:	e053      	b.n	24d62 <long_division+0xcc>
   24cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24cbc:	3b20      	subs	r3, #32
   24cbe:	2b00      	cmp	r3, #0
   24cc0:	db04      	blt.n	24ccc <long_division+0x36>
   24cc2:	2201      	movs	r2, #1
   24cc4:	409a      	lsls	r2, r3
   24cc6:	0013      	movs	r3, r2
   24cc8:	617b      	str	r3, [r7, #20]
   24cca:	e00b      	b.n	24ce4 <long_division+0x4e>
   24ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24cce:	2220      	movs	r2, #32
   24cd0:	1ad3      	subs	r3, r2, r3
   24cd2:	2201      	movs	r2, #1
   24cd4:	40da      	lsrs	r2, r3
   24cd6:	0013      	movs	r3, r2
   24cd8:	2100      	movs	r1, #0
   24cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   24cdc:	4091      	lsls	r1, r2
   24cde:	000a      	movs	r2, r1
   24ce0:	4313      	orrs	r3, r2
   24ce2:	617b      	str	r3, [r7, #20]
   24ce4:	2201      	movs	r2, #1
   24ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24ce8:	409a      	lsls	r2, r3
   24cea:	0013      	movs	r3, r2
   24cec:	613b      	str	r3, [r7, #16]
   24cee:	69bb      	ldr	r3, [r7, #24]
   24cf0:	69fc      	ldr	r4, [r7, #28]
   24cf2:	18db      	adds	r3, r3, r3
   24cf4:	4164      	adcs	r4, r4
   24cf6:	61bb      	str	r3, [r7, #24]
   24cf8:	61fc      	str	r4, [r7, #28]
   24cfa:	68bb      	ldr	r3, [r7, #8]
   24cfc:	693a      	ldr	r2, [r7, #16]
   24cfe:	401a      	ands	r2, r3
   24d00:	0015      	movs	r5, r2
   24d02:	68fb      	ldr	r3, [r7, #12]
   24d04:	697a      	ldr	r2, [r7, #20]
   24d06:	401a      	ands	r2, r3
   24d08:	0016      	movs	r6, r2
   24d0a:	002b      	movs	r3, r5
   24d0c:	4333      	orrs	r3, r6
   24d0e:	d007      	beq.n	24d20 <long_division+0x8a>
   24d10:	69bb      	ldr	r3, [r7, #24]
   24d12:	2201      	movs	r2, #1
   24d14:	4313      	orrs	r3, r2
   24d16:	61bb      	str	r3, [r7, #24]
   24d18:	69fb      	ldr	r3, [r7, #28]
   24d1a:	2200      	movs	r2, #0
   24d1c:	4313      	orrs	r3, r2
   24d1e:	61fb      	str	r3, [r7, #28]
   24d20:	687a      	ldr	r2, [r7, #4]
   24d22:	69fb      	ldr	r3, [r7, #28]
   24d24:	429a      	cmp	r2, r3
   24d26:	d819      	bhi.n	24d5c <long_division+0xc6>
   24d28:	687a      	ldr	r2, [r7, #4]
   24d2a:	69fb      	ldr	r3, [r7, #28]
   24d2c:	429a      	cmp	r2, r3
   24d2e:	d103      	bne.n	24d38 <long_division+0xa2>
   24d30:	683a      	ldr	r2, [r7, #0]
   24d32:	69bb      	ldr	r3, [r7, #24]
   24d34:	429a      	cmp	r2, r3
   24d36:	d811      	bhi.n	24d5c <long_division+0xc6>
   24d38:	69b9      	ldr	r1, [r7, #24]
   24d3a:	69fa      	ldr	r2, [r7, #28]
   24d3c:	683b      	ldr	r3, [r7, #0]
   24d3e:	687c      	ldr	r4, [r7, #4]
   24d40:	1ac9      	subs	r1, r1, r3
   24d42:	41a2      	sbcs	r2, r4
   24d44:	000b      	movs	r3, r1
   24d46:	0014      	movs	r4, r2
   24d48:	61bb      	str	r3, [r7, #24]
   24d4a:	61fc      	str	r4, [r7, #28]
   24d4c:	6a3a      	ldr	r2, [r7, #32]
   24d4e:	693b      	ldr	r3, [r7, #16]
   24d50:	4313      	orrs	r3, r2
   24d52:	623b      	str	r3, [r7, #32]
   24d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   24d56:	697b      	ldr	r3, [r7, #20]
   24d58:	4313      	orrs	r3, r2
   24d5a:	627b      	str	r3, [r7, #36]	; 0x24
   24d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24d5e:	3b01      	subs	r3, #1
   24d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   24d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24d64:	2b00      	cmp	r3, #0
   24d66:	daa8      	bge.n	24cba <long_division+0x24>
   24d68:	6a3b      	ldr	r3, [r7, #32]
   24d6a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   24d6c:	0018      	movs	r0, r3
   24d6e:	0021      	movs	r1, r4
   24d70:	46bd      	mov	sp, r7
   24d72:	b00d      	add	sp, #52	; 0x34
   24d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024d76 <_sercom_get_sync_baud_val>:
   24d76:	b580      	push	{r7, lr}
   24d78:	b086      	sub	sp, #24
   24d7a:	af00      	add	r7, sp, #0
   24d7c:	60f8      	str	r0, [r7, #12]
   24d7e:	60b9      	str	r1, [r7, #8]
   24d80:	607a      	str	r2, [r7, #4]
   24d82:	2316      	movs	r3, #22
   24d84:	18fb      	adds	r3, r7, r3
   24d86:	2200      	movs	r2, #0
   24d88:	801a      	strh	r2, [r3, #0]
   24d8a:	68bb      	ldr	r3, [r7, #8]
   24d8c:	613b      	str	r3, [r7, #16]
   24d8e:	68bb      	ldr	r3, [r7, #8]
   24d90:	085a      	lsrs	r2, r3, #1
   24d92:	68fb      	ldr	r3, [r7, #12]
   24d94:	429a      	cmp	r2, r3
   24d96:	d201      	bcs.n	24d9c <_sercom_get_sync_baud_val+0x26>
   24d98:	2340      	movs	r3, #64	; 0x40
   24d9a:	e026      	b.n	24dea <_sercom_get_sync_baud_val+0x74>
   24d9c:	68bb      	ldr	r3, [r7, #8]
   24d9e:	085b      	lsrs	r3, r3, #1
   24da0:	613b      	str	r3, [r7, #16]
   24da2:	e00a      	b.n	24dba <_sercom_get_sync_baud_val+0x44>
   24da4:	693a      	ldr	r2, [r7, #16]
   24da6:	68fb      	ldr	r3, [r7, #12]
   24da8:	1ad3      	subs	r3, r2, r3
   24daa:	613b      	str	r3, [r7, #16]
   24dac:	2316      	movs	r3, #22
   24dae:	18fb      	adds	r3, r7, r3
   24db0:	881a      	ldrh	r2, [r3, #0]
   24db2:	2316      	movs	r3, #22
   24db4:	18fb      	adds	r3, r7, r3
   24db6:	3201      	adds	r2, #1
   24db8:	801a      	strh	r2, [r3, #0]
   24dba:	693a      	ldr	r2, [r7, #16]
   24dbc:	68fb      	ldr	r3, [r7, #12]
   24dbe:	429a      	cmp	r2, r3
   24dc0:	d2f0      	bcs.n	24da4 <_sercom_get_sync_baud_val+0x2e>
   24dc2:	2316      	movs	r3, #22
   24dc4:	18fb      	adds	r3, r7, r3
   24dc6:	2216      	movs	r2, #22
   24dc8:	18ba      	adds	r2, r7, r2
   24dca:	8812      	ldrh	r2, [r2, #0]
   24dcc:	3a01      	subs	r2, #1
   24dce:	801a      	strh	r2, [r3, #0]
   24dd0:	2316      	movs	r3, #22
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	881b      	ldrh	r3, [r3, #0]
   24dd6:	2bff      	cmp	r3, #255	; 0xff
   24dd8:	d901      	bls.n	24dde <_sercom_get_sync_baud_val+0x68>
   24dda:	2340      	movs	r3, #64	; 0x40
   24ddc:	e005      	b.n	24dea <_sercom_get_sync_baud_val+0x74>
   24dde:	687b      	ldr	r3, [r7, #4]
   24de0:	2216      	movs	r2, #22
   24de2:	18ba      	adds	r2, r7, r2
   24de4:	8812      	ldrh	r2, [r2, #0]
   24de6:	801a      	strh	r2, [r3, #0]
   24de8:	2300      	movs	r3, #0
   24dea:	0018      	movs	r0, r3
   24dec:	46bd      	mov	sp, r7
   24dee:	b006      	add	sp, #24
   24df0:	bd80      	pop	{r7, pc}
	...

00024df4 <_sercom_get_async_baud_val>:
   24df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24df6:	b0a1      	sub	sp, #132	; 0x84
   24df8:	af00      	add	r7, sp, #0
   24dfa:	64f8      	str	r0, [r7, #76]	; 0x4c
   24dfc:	64b9      	str	r1, [r7, #72]	; 0x48
   24dfe:	647a      	str	r2, [r7, #68]	; 0x44
   24e00:	2243      	movs	r2, #67	; 0x43
   24e02:	18ba      	adds	r2, r7, r2
   24e04:	7013      	strb	r3, [r2, #0]
   24e06:	2300      	movs	r3, #0
   24e08:	2400      	movs	r4, #0
   24e0a:	673b      	str	r3, [r7, #112]	; 0x70
   24e0c:	677c      	str	r4, [r7, #116]	; 0x74
   24e0e:	2300      	movs	r3, #0
   24e10:	2400      	movs	r4, #0
   24e12:	66bb      	str	r3, [r7, #104]	; 0x68
   24e14:	66fc      	str	r4, [r7, #108]	; 0x6c
   24e16:	2300      	movs	r3, #0
   24e18:	2400      	movs	r4, #0
   24e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   24e1c:	67fc      	str	r4, [r7, #124]	; 0x7c
   24e1e:	2300      	movs	r3, #0
   24e20:	667b      	str	r3, [r7, #100]	; 0x64
   24e22:	2358      	movs	r3, #88	; 0x58
   24e24:	2240      	movs	r2, #64	; 0x40
   24e26:	4694      	mov	ip, r2
   24e28:	44bc      	add	ip, r7
   24e2a:	4463      	add	r3, ip
   24e2c:	781a      	ldrb	r2, [r3, #0]
   24e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24e30:	435a      	muls	r2, r3
   24e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24e34:	429a      	cmp	r2, r3
   24e36:	d901      	bls.n	24e3c <_sercom_get_async_baud_val+0x48>
   24e38:	2340      	movs	r3, #64	; 0x40
   24e3a:	e0b3      	b.n	24fa4 <_sercom_get_async_baud_val+0x1b0>
   24e3c:	2343      	movs	r3, #67	; 0x43
   24e3e:	18fb      	adds	r3, r7, r3
   24e40:	781b      	ldrb	r3, [r3, #0]
   24e42:	2b00      	cmp	r3, #0
   24e44:	d13d      	bne.n	24ec2 <_sercom_get_async_baud_val+0xce>
   24e46:	2358      	movs	r3, #88	; 0x58
   24e48:	2240      	movs	r2, #64	; 0x40
   24e4a:	4694      	mov	ip, r2
   24e4c:	44bc      	add	ip, r7
   24e4e:	4463      	add	r3, ip
   24e50:	781b      	ldrb	r3, [r3, #0]
   24e52:	b2db      	uxtb	r3, r3
   24e54:	613b      	str	r3, [r7, #16]
   24e56:	2300      	movs	r3, #0
   24e58:	617b      	str	r3, [r7, #20]
   24e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24e5c:	60bb      	str	r3, [r7, #8]
   24e5e:	2300      	movs	r3, #0
   24e60:	60fb      	str	r3, [r7, #12]
   24e62:	4c52      	ldr	r4, [pc, #328]	; (24fac <_sercom_get_async_baud_val+0x1b8>)
   24e64:	68ba      	ldr	r2, [r7, #8]
   24e66:	68fb      	ldr	r3, [r7, #12]
   24e68:	6938      	ldr	r0, [r7, #16]
   24e6a:	6979      	ldr	r1, [r7, #20]
   24e6c:	47a0      	blx	r4
   24e6e:	0003      	movs	r3, r0
   24e70:	000c      	movs	r4, r1
   24e72:	001b      	movs	r3, r3
   24e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   24e76:	2300      	movs	r3, #0
   24e78:	65bb      	str	r3, [r7, #88]	; 0x58
   24e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24e7c:	603b      	str	r3, [r7, #0]
   24e7e:	2300      	movs	r3, #0
   24e80:	607b      	str	r3, [r7, #4]
   24e82:	6db8      	ldr	r0, [r7, #88]	; 0x58
   24e84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   24e86:	683a      	ldr	r2, [r7, #0]
   24e88:	687b      	ldr	r3, [r7, #4]
   24e8a:	4c49      	ldr	r4, [pc, #292]	; (24fb0 <_sercom_get_async_baud_val+0x1bc>)
   24e8c:	47a0      	blx	r4
   24e8e:	0003      	movs	r3, r0
   24e90:	000c      	movs	r4, r1
   24e92:	673b      	str	r3, [r7, #112]	; 0x70
   24e94:	677c      	str	r4, [r7, #116]	; 0x74
   24e96:	2100      	movs	r1, #0
   24e98:	2201      	movs	r2, #1
   24e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24e9c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   24e9e:	1ac9      	subs	r1, r1, r3
   24ea0:	41a2      	sbcs	r2, r4
   24ea2:	000b      	movs	r3, r1
   24ea4:	0014      	movs	r4, r2
   24ea6:	66bb      	str	r3, [r7, #104]	; 0x68
   24ea8:	66fc      	str	r4, [r7, #108]	; 0x6c
   24eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24eac:	0c1b      	lsrs	r3, r3, #16
   24eae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24eb0:	0416      	lsls	r6, r2, #16
   24eb2:	431e      	orrs	r6, r3
   24eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24eb6:	041d      	lsls	r5, r3, #16
   24eb8:	0033      	movs	r3, r6
   24eba:	67bb      	str	r3, [r7, #120]	; 0x78
   24ebc:	2300      	movs	r3, #0
   24ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   24ec0:	e06a      	b.n	24f98 <_sercom_get_async_baud_val+0x1a4>
   24ec2:	2343      	movs	r3, #67	; 0x43
   24ec4:	18fb      	adds	r3, r7, r3
   24ec6:	781b      	ldrb	r3, [r3, #0]
   24ec8:	2b01      	cmp	r3, #1
   24eca:	d165      	bne.n	24f98 <_sercom_get_async_baud_val+0x1a4>
   24ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24ece:	633b      	str	r3, [r7, #48]	; 0x30
   24ed0:	2300      	movs	r3, #0
   24ed2:	637b      	str	r3, [r7, #52]	; 0x34
   24ed4:	2358      	movs	r3, #88	; 0x58
   24ed6:	2240      	movs	r2, #64	; 0x40
   24ed8:	4694      	mov	ip, r2
   24eda:	44bc      	add	ip, r7
   24edc:	4463      	add	r3, ip
   24ede:	781b      	ldrb	r3, [r3, #0]
   24ee0:	b2db      	uxtb	r3, r3
   24ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   24ee4:	2300      	movs	r3, #0
   24ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   24ee8:	4c30      	ldr	r4, [pc, #192]	; (24fac <_sercom_get_async_baud_val+0x1b8>)
   24eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   24eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
   24ef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   24ef2:	47a0      	blx	r4
   24ef4:	0003      	movs	r3, r0
   24ef6:	000c      	movs	r4, r1
   24ef8:	65bb      	str	r3, [r7, #88]	; 0x58
   24efa:	65fc      	str	r4, [r7, #92]	; 0x5c
   24efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24efe:	623b      	str	r3, [r7, #32]
   24f00:	2300      	movs	r3, #0
   24f02:	627b      	str	r3, [r7, #36]	; 0x24
   24f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f06:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24f08:	001a      	movs	r2, r3
   24f0a:	0023      	movs	r3, r4
   24f0c:	6a38      	ldr	r0, [r7, #32]
   24f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   24f10:	4c27      	ldr	r4, [pc, #156]	; (24fb0 <_sercom_get_async_baud_val+0x1bc>)
   24f12:	47a0      	blx	r4
   24f14:	0003      	movs	r3, r0
   24f16:	000c      	movs	r4, r1
   24f18:	667b      	str	r3, [r7, #100]	; 0x64
   24f1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   24f1c:	2380      	movs	r3, #128	; 0x80
   24f1e:	019b      	lsls	r3, r3, #6
   24f20:	429a      	cmp	r2, r3
   24f22:	d901      	bls.n	24f28 <_sercom_get_async_baud_val+0x134>
   24f24:	2340      	movs	r3, #64	; 0x40
   24f26:	e03d      	b.n	24fa4 <_sercom_get_async_baud_val+0x1b0>
   24f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24f2a:	61bb      	str	r3, [r7, #24]
   24f2c:	2300      	movs	r3, #0
   24f2e:	61fb      	str	r3, [r7, #28]
   24f30:	69b9      	ldr	r1, [r7, #24]
   24f32:	69fa      	ldr	r2, [r7, #28]
   24f34:	000b      	movs	r3, r1
   24f36:	0f5b      	lsrs	r3, r3, #29
   24f38:	0010      	movs	r0, r2
   24f3a:	00c0      	lsls	r0, r0, #3
   24f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
   24f3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   24f40:	4318      	orrs	r0, r3
   24f42:	63f8      	str	r0, [r7, #60]	; 0x3c
   24f44:	000b      	movs	r3, r1
   24f46:	00db      	lsls	r3, r3, #3
   24f48:	63bb      	str	r3, [r7, #56]	; 0x38
   24f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f4c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24f4e:	001a      	movs	r2, r3
   24f50:	0023      	movs	r3, r4
   24f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   24f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   24f56:	4c16      	ldr	r4, [pc, #88]	; (24fb0 <_sercom_get_async_baud_val+0x1bc>)
   24f58:	47a0      	blx	r4
   24f5a:	0003      	movs	r3, r0
   24f5c:	000c      	movs	r4, r1
   24f5e:	65bb      	str	r3, [r7, #88]	; 0x58
   24f60:	65fc      	str	r4, [r7, #92]	; 0x5c
   24f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f64:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24f66:	b2d9      	uxtb	r1, r3
   24f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f6a:	b2db      	uxtb	r3, r3
   24f6c:	00db      	lsls	r3, r3, #3
   24f6e:	b2da      	uxtb	r2, r3
   24f70:	2317      	movs	r3, #23
   24f72:	2040      	movs	r0, #64	; 0x40
   24f74:	4684      	mov	ip, r0
   24f76:	44bc      	add	ip, r7
   24f78:	4463      	add	r3, ip
   24f7a:	1a8a      	subs	r2, r1, r2
   24f7c:	701a      	strb	r2, [r3, #0]
   24f7e:	2317      	movs	r3, #23
   24f80:	2240      	movs	r2, #64	; 0x40
   24f82:	4694      	mov	ip, r2
   24f84:	44bc      	add	ip, r7
   24f86:	4463      	add	r3, ip
   24f88:	781b      	ldrb	r3, [r3, #0]
   24f8a:	035b      	lsls	r3, r3, #13
   24f8c:	001a      	movs	r2, r3
   24f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f90:	4313      	orrs	r3, r2
   24f92:	67bb      	str	r3, [r7, #120]	; 0x78
   24f94:	2300      	movs	r3, #0
   24f96:	67fb      	str	r3, [r7, #124]	; 0x7c
   24f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   24f9a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   24f9c:	b29a      	uxth	r2, r3
   24f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24fa0:	801a      	strh	r2, [r3, #0]
   24fa2:	2300      	movs	r3, #0
   24fa4:	0018      	movs	r0, r3
   24fa6:	46bd      	mov	sp, r7
   24fa8:	b021      	add	sp, #132	; 0x84
   24faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fac:	00030835 	.word	0x00030835
   24fb0:	00024c97 	.word	0x00024c97

00024fb4 <sercom_set_gclk_generator>:
   24fb4:	b580      	push	{r7, lr}
   24fb6:	b084      	sub	sp, #16
   24fb8:	af00      	add	r7, sp, #0
   24fba:	0002      	movs	r2, r0
   24fbc:	1dfb      	adds	r3, r7, #7
   24fbe:	701a      	strb	r2, [r3, #0]
   24fc0:	1dbb      	adds	r3, r7, #6
   24fc2:	1c0a      	adds	r2, r1, #0
   24fc4:	701a      	strb	r2, [r3, #0]
   24fc6:	4b1a      	ldr	r3, [pc, #104]	; (25030 <sercom_set_gclk_generator+0x7c>)
   24fc8:	781b      	ldrb	r3, [r3, #0]
   24fca:	2201      	movs	r2, #1
   24fcc:	4053      	eors	r3, r2
   24fce:	b2db      	uxtb	r3, r3
   24fd0:	2b00      	cmp	r3, #0
   24fd2:	d103      	bne.n	24fdc <sercom_set_gclk_generator+0x28>
   24fd4:	1dbb      	adds	r3, r7, #6
   24fd6:	781b      	ldrb	r3, [r3, #0]
   24fd8:	2b00      	cmp	r3, #0
   24fda:	d01b      	beq.n	25014 <sercom_set_gclk_generator+0x60>
   24fdc:	230c      	movs	r3, #12
   24fde:	18fb      	adds	r3, r7, r3
   24fe0:	0018      	movs	r0, r3
   24fe2:	4b14      	ldr	r3, [pc, #80]	; (25034 <sercom_set_gclk_generator+0x80>)
   24fe4:	4798      	blx	r3
   24fe6:	230c      	movs	r3, #12
   24fe8:	18fb      	adds	r3, r7, r3
   24fea:	1dfa      	adds	r2, r7, #7
   24fec:	7812      	ldrb	r2, [r2, #0]
   24fee:	701a      	strb	r2, [r3, #0]
   24ff0:	230c      	movs	r3, #12
   24ff2:	18fb      	adds	r3, r7, r3
   24ff4:	0019      	movs	r1, r3
   24ff6:	2013      	movs	r0, #19
   24ff8:	4b0f      	ldr	r3, [pc, #60]	; (25038 <sercom_set_gclk_generator+0x84>)
   24ffa:	4798      	blx	r3
   24ffc:	2013      	movs	r0, #19
   24ffe:	4b0f      	ldr	r3, [pc, #60]	; (2503c <sercom_set_gclk_generator+0x88>)
   25000:	4798      	blx	r3
   25002:	4b0b      	ldr	r3, [pc, #44]	; (25030 <sercom_set_gclk_generator+0x7c>)
   25004:	1dfa      	adds	r2, r7, #7
   25006:	7812      	ldrb	r2, [r2, #0]
   25008:	705a      	strb	r2, [r3, #1]
   2500a:	4b09      	ldr	r3, [pc, #36]	; (25030 <sercom_set_gclk_generator+0x7c>)
   2500c:	2201      	movs	r2, #1
   2500e:	701a      	strb	r2, [r3, #0]
   25010:	2300      	movs	r3, #0
   25012:	e008      	b.n	25026 <sercom_set_gclk_generator+0x72>
   25014:	4b06      	ldr	r3, [pc, #24]	; (25030 <sercom_set_gclk_generator+0x7c>)
   25016:	785b      	ldrb	r3, [r3, #1]
   25018:	1dfa      	adds	r2, r7, #7
   2501a:	7812      	ldrb	r2, [r2, #0]
   2501c:	429a      	cmp	r2, r3
   2501e:	d101      	bne.n	25024 <sercom_set_gclk_generator+0x70>
   25020:	2300      	movs	r3, #0
   25022:	e000      	b.n	25026 <sercom_set_gclk_generator+0x72>
   25024:	231d      	movs	r3, #29
   25026:	0018      	movs	r0, r3
   25028:	46bd      	mov	sp, r7
   2502a:	b004      	add	sp, #16
   2502c:	bd80      	pop	{r7, pc}
   2502e:	46c0      	nop			; (mov r8, r8)
   25030:	20003d18 	.word	0x20003d18
   25034:	00024c81 	.word	0x00024c81
   25038:	00027a8d 	.word	0x00027a8d
   2503c:	00027ad1 	.word	0x00027ad1

00025040 <_sercom_get_default_pad>:
   25040:	b580      	push	{r7, lr}
   25042:	b082      	sub	sp, #8
   25044:	af00      	add	r7, sp, #0
   25046:	6078      	str	r0, [r7, #4]
   25048:	000a      	movs	r2, r1
   2504a:	1cfb      	adds	r3, r7, #3
   2504c:	701a      	strb	r2, [r3, #0]
   2504e:	687b      	ldr	r3, [r7, #4]
   25050:	4a4d      	ldr	r2, [pc, #308]	; (25188 <_sercom_get_default_pad+0x148>)
   25052:	4293      	cmp	r3, r2
   25054:	d03f      	beq.n	250d6 <_sercom_get_default_pad+0x96>
   25056:	4a4c      	ldr	r2, [pc, #304]	; (25188 <_sercom_get_default_pad+0x148>)
   25058:	4293      	cmp	r3, r2
   2505a:	d806      	bhi.n	2506a <_sercom_get_default_pad+0x2a>
   2505c:	4a4b      	ldr	r2, [pc, #300]	; (2518c <_sercom_get_default_pad+0x14c>)
   2505e:	4293      	cmp	r3, r2
   25060:	d00f      	beq.n	25082 <_sercom_get_default_pad+0x42>
   25062:	4a4b      	ldr	r2, [pc, #300]	; (25190 <_sercom_get_default_pad+0x150>)
   25064:	4293      	cmp	r3, r2
   25066:	d021      	beq.n	250ac <_sercom_get_default_pad+0x6c>
   25068:	e089      	b.n	2517e <_sercom_get_default_pad+0x13e>
   2506a:	4a4a      	ldr	r2, [pc, #296]	; (25194 <_sercom_get_default_pad+0x154>)
   2506c:	4293      	cmp	r3, r2
   2506e:	d100      	bne.n	25072 <_sercom_get_default_pad+0x32>
   25070:	e05b      	b.n	2512a <_sercom_get_default_pad+0xea>
   25072:	4a49      	ldr	r2, [pc, #292]	; (25198 <_sercom_get_default_pad+0x158>)
   25074:	4293      	cmp	r3, r2
   25076:	d100      	bne.n	2507a <_sercom_get_default_pad+0x3a>
   25078:	e06c      	b.n	25154 <_sercom_get_default_pad+0x114>
   2507a:	4a48      	ldr	r2, [pc, #288]	; (2519c <_sercom_get_default_pad+0x15c>)
   2507c:	4293      	cmp	r3, r2
   2507e:	d03f      	beq.n	25100 <_sercom_get_default_pad+0xc0>
   25080:	e07d      	b.n	2517e <_sercom_get_default_pad+0x13e>
   25082:	1cfb      	adds	r3, r7, #3
   25084:	781b      	ldrb	r3, [r3, #0]
   25086:	2b01      	cmp	r3, #1
   25088:	d00a      	beq.n	250a0 <_sercom_get_default_pad+0x60>
   2508a:	dc02      	bgt.n	25092 <_sercom_get_default_pad+0x52>
   2508c:	2b00      	cmp	r3, #0
   2508e:	d005      	beq.n	2509c <_sercom_get_default_pad+0x5c>
   25090:	e075      	b.n	2517e <_sercom_get_default_pad+0x13e>
   25092:	2b02      	cmp	r3, #2
   25094:	d006      	beq.n	250a4 <_sercom_get_default_pad+0x64>
   25096:	2b03      	cmp	r3, #3
   25098:	d006      	beq.n	250a8 <_sercom_get_default_pad+0x68>
   2509a:	e070      	b.n	2517e <_sercom_get_default_pad+0x13e>
   2509c:	4b40      	ldr	r3, [pc, #256]	; (251a0 <_sercom_get_default_pad+0x160>)
   2509e:	e06f      	b.n	25180 <_sercom_get_default_pad+0x140>
   250a0:	4b40      	ldr	r3, [pc, #256]	; (251a4 <_sercom_get_default_pad+0x164>)
   250a2:	e06d      	b.n	25180 <_sercom_get_default_pad+0x140>
   250a4:	4b40      	ldr	r3, [pc, #256]	; (251a8 <_sercom_get_default_pad+0x168>)
   250a6:	e06b      	b.n	25180 <_sercom_get_default_pad+0x140>
   250a8:	4b40      	ldr	r3, [pc, #256]	; (251ac <_sercom_get_default_pad+0x16c>)
   250aa:	e069      	b.n	25180 <_sercom_get_default_pad+0x140>
   250ac:	1cfb      	adds	r3, r7, #3
   250ae:	781b      	ldrb	r3, [r3, #0]
   250b0:	2b01      	cmp	r3, #1
   250b2:	d00a      	beq.n	250ca <_sercom_get_default_pad+0x8a>
   250b4:	dc02      	bgt.n	250bc <_sercom_get_default_pad+0x7c>
   250b6:	2b00      	cmp	r3, #0
   250b8:	d005      	beq.n	250c6 <_sercom_get_default_pad+0x86>
   250ba:	e060      	b.n	2517e <_sercom_get_default_pad+0x13e>
   250bc:	2b02      	cmp	r3, #2
   250be:	d006      	beq.n	250ce <_sercom_get_default_pad+0x8e>
   250c0:	2b03      	cmp	r3, #3
   250c2:	d006      	beq.n	250d2 <_sercom_get_default_pad+0x92>
   250c4:	e05b      	b.n	2517e <_sercom_get_default_pad+0x13e>
   250c6:	2303      	movs	r3, #3
   250c8:	e05a      	b.n	25180 <_sercom_get_default_pad+0x140>
   250ca:	4b39      	ldr	r3, [pc, #228]	; (251b0 <_sercom_get_default_pad+0x170>)
   250cc:	e058      	b.n	25180 <_sercom_get_default_pad+0x140>
   250ce:	4b39      	ldr	r3, [pc, #228]	; (251b4 <_sercom_get_default_pad+0x174>)
   250d0:	e056      	b.n	25180 <_sercom_get_default_pad+0x140>
   250d2:	4b39      	ldr	r3, [pc, #228]	; (251b8 <_sercom_get_default_pad+0x178>)
   250d4:	e054      	b.n	25180 <_sercom_get_default_pad+0x140>
   250d6:	1cfb      	adds	r3, r7, #3
   250d8:	781b      	ldrb	r3, [r3, #0]
   250da:	2b01      	cmp	r3, #1
   250dc:	d00a      	beq.n	250f4 <_sercom_get_default_pad+0xb4>
   250de:	dc02      	bgt.n	250e6 <_sercom_get_default_pad+0xa6>
   250e0:	2b00      	cmp	r3, #0
   250e2:	d005      	beq.n	250f0 <_sercom_get_default_pad+0xb0>
   250e4:	e04b      	b.n	2517e <_sercom_get_default_pad+0x13e>
   250e6:	2b02      	cmp	r3, #2
   250e8:	d006      	beq.n	250f8 <_sercom_get_default_pad+0xb8>
   250ea:	2b03      	cmp	r3, #3
   250ec:	d006      	beq.n	250fc <_sercom_get_default_pad+0xbc>
   250ee:	e046      	b.n	2517e <_sercom_get_default_pad+0x13e>
   250f0:	4b32      	ldr	r3, [pc, #200]	; (251bc <_sercom_get_default_pad+0x17c>)
   250f2:	e045      	b.n	25180 <_sercom_get_default_pad+0x140>
   250f4:	4b32      	ldr	r3, [pc, #200]	; (251c0 <_sercom_get_default_pad+0x180>)
   250f6:	e043      	b.n	25180 <_sercom_get_default_pad+0x140>
   250f8:	4b32      	ldr	r3, [pc, #200]	; (251c4 <_sercom_get_default_pad+0x184>)
   250fa:	e041      	b.n	25180 <_sercom_get_default_pad+0x140>
   250fc:	4b32      	ldr	r3, [pc, #200]	; (251c8 <_sercom_get_default_pad+0x188>)
   250fe:	e03f      	b.n	25180 <_sercom_get_default_pad+0x140>
   25100:	1cfb      	adds	r3, r7, #3
   25102:	781b      	ldrb	r3, [r3, #0]
   25104:	2b01      	cmp	r3, #1
   25106:	d00a      	beq.n	2511e <_sercom_get_default_pad+0xde>
   25108:	dc02      	bgt.n	25110 <_sercom_get_default_pad+0xd0>
   2510a:	2b00      	cmp	r3, #0
   2510c:	d005      	beq.n	2511a <_sercom_get_default_pad+0xda>
   2510e:	e036      	b.n	2517e <_sercom_get_default_pad+0x13e>
   25110:	2b02      	cmp	r3, #2
   25112:	d006      	beq.n	25122 <_sercom_get_default_pad+0xe2>
   25114:	2b03      	cmp	r3, #3
   25116:	d006      	beq.n	25126 <_sercom_get_default_pad+0xe6>
   25118:	e031      	b.n	2517e <_sercom_get_default_pad+0x13e>
   2511a:	4b2c      	ldr	r3, [pc, #176]	; (251cc <_sercom_get_default_pad+0x18c>)
   2511c:	e030      	b.n	25180 <_sercom_get_default_pad+0x140>
   2511e:	4b2c      	ldr	r3, [pc, #176]	; (251d0 <_sercom_get_default_pad+0x190>)
   25120:	e02e      	b.n	25180 <_sercom_get_default_pad+0x140>
   25122:	4b2c      	ldr	r3, [pc, #176]	; (251d4 <_sercom_get_default_pad+0x194>)
   25124:	e02c      	b.n	25180 <_sercom_get_default_pad+0x140>
   25126:	4b2c      	ldr	r3, [pc, #176]	; (251d8 <_sercom_get_default_pad+0x198>)
   25128:	e02a      	b.n	25180 <_sercom_get_default_pad+0x140>
   2512a:	1cfb      	adds	r3, r7, #3
   2512c:	781b      	ldrb	r3, [r3, #0]
   2512e:	2b01      	cmp	r3, #1
   25130:	d00a      	beq.n	25148 <_sercom_get_default_pad+0x108>
   25132:	dc02      	bgt.n	2513a <_sercom_get_default_pad+0xfa>
   25134:	2b00      	cmp	r3, #0
   25136:	d005      	beq.n	25144 <_sercom_get_default_pad+0x104>
   25138:	e021      	b.n	2517e <_sercom_get_default_pad+0x13e>
   2513a:	2b02      	cmp	r3, #2
   2513c:	d006      	beq.n	2514c <_sercom_get_default_pad+0x10c>
   2513e:	2b03      	cmp	r3, #3
   25140:	d006      	beq.n	25150 <_sercom_get_default_pad+0x110>
   25142:	e01c      	b.n	2517e <_sercom_get_default_pad+0x13e>
   25144:	4b25      	ldr	r3, [pc, #148]	; (251dc <_sercom_get_default_pad+0x19c>)
   25146:	e01b      	b.n	25180 <_sercom_get_default_pad+0x140>
   25148:	4b25      	ldr	r3, [pc, #148]	; (251e0 <_sercom_get_default_pad+0x1a0>)
   2514a:	e019      	b.n	25180 <_sercom_get_default_pad+0x140>
   2514c:	4b25      	ldr	r3, [pc, #148]	; (251e4 <_sercom_get_default_pad+0x1a4>)
   2514e:	e017      	b.n	25180 <_sercom_get_default_pad+0x140>
   25150:	4b25      	ldr	r3, [pc, #148]	; (251e8 <_sercom_get_default_pad+0x1a8>)
   25152:	e015      	b.n	25180 <_sercom_get_default_pad+0x140>
   25154:	1cfb      	adds	r3, r7, #3
   25156:	781b      	ldrb	r3, [r3, #0]
   25158:	2b01      	cmp	r3, #1
   2515a:	d00a      	beq.n	25172 <_sercom_get_default_pad+0x132>
   2515c:	dc02      	bgt.n	25164 <_sercom_get_default_pad+0x124>
   2515e:	2b00      	cmp	r3, #0
   25160:	d005      	beq.n	2516e <_sercom_get_default_pad+0x12e>
   25162:	e00c      	b.n	2517e <_sercom_get_default_pad+0x13e>
   25164:	2b02      	cmp	r3, #2
   25166:	d006      	beq.n	25176 <_sercom_get_default_pad+0x136>
   25168:	2b03      	cmp	r3, #3
   2516a:	d006      	beq.n	2517a <_sercom_get_default_pad+0x13a>
   2516c:	e007      	b.n	2517e <_sercom_get_default_pad+0x13e>
   2516e:	4b1f      	ldr	r3, [pc, #124]	; (251ec <_sercom_get_default_pad+0x1ac>)
   25170:	e006      	b.n	25180 <_sercom_get_default_pad+0x140>
   25172:	4b1f      	ldr	r3, [pc, #124]	; (251f0 <_sercom_get_default_pad+0x1b0>)
   25174:	e004      	b.n	25180 <_sercom_get_default_pad+0x140>
   25176:	4b1f      	ldr	r3, [pc, #124]	; (251f4 <_sercom_get_default_pad+0x1b4>)
   25178:	e002      	b.n	25180 <_sercom_get_default_pad+0x140>
   2517a:	4b1f      	ldr	r3, [pc, #124]	; (251f8 <_sercom_get_default_pad+0x1b8>)
   2517c:	e000      	b.n	25180 <_sercom_get_default_pad+0x140>
   2517e:	2300      	movs	r3, #0
   25180:	0018      	movs	r0, r3
   25182:	46bd      	mov	sp, r7
   25184:	b002      	add	sp, #8
   25186:	bd80      	pop	{r7, pc}
   25188:	42001000 	.word	0x42001000
   2518c:	42000800 	.word	0x42000800
   25190:	42000c00 	.word	0x42000c00
   25194:	42001800 	.word	0x42001800
   25198:	42001c00 	.word	0x42001c00
   2519c:	42001400 	.word	0x42001400
   251a0:	00040003 	.word	0x00040003
   251a4:	00050003 	.word	0x00050003
   251a8:	00060003 	.word	0x00060003
   251ac:	00070003 	.word	0x00070003
   251b0:	00010003 	.word	0x00010003
   251b4:	001e0003 	.word	0x001e0003
   251b8:	001f0003 	.word	0x001f0003
   251bc:	00080003 	.word	0x00080003
   251c0:	00090003 	.word	0x00090003
   251c4:	000a0003 	.word	0x000a0003
   251c8:	000b0003 	.word	0x000b0003
   251cc:	00100003 	.word	0x00100003
   251d0:	00110003 	.word	0x00110003
   251d4:	00120003 	.word	0x00120003
   251d8:	00130003 	.word	0x00130003
   251dc:	000c0003 	.word	0x000c0003
   251e0:	000d0003 	.word	0x000d0003
   251e4:	000e0003 	.word	0x000e0003
   251e8:	000f0003 	.word	0x000f0003
   251ec:	00160003 	.word	0x00160003
   251f0:	00170003 	.word	0x00170003
   251f4:	00180003 	.word	0x00180003
   251f8:	00190003 	.word	0x00190003

000251fc <_sercom_get_sercom_inst_index>:
   251fc:	b590      	push	{r4, r7, lr}
   251fe:	b08b      	sub	sp, #44	; 0x2c
   25200:	af00      	add	r7, sp, #0
   25202:	6078      	str	r0, [r7, #4]
   25204:	230c      	movs	r3, #12
   25206:	18fb      	adds	r3, r7, r3
   25208:	4a0f      	ldr	r2, [pc, #60]	; (25248 <_sercom_get_sercom_inst_index+0x4c>)
   2520a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2520c:	c313      	stmia	r3!, {r0, r1, r4}
   2520e:	ca13      	ldmia	r2!, {r0, r1, r4}
   25210:	c313      	stmia	r3!, {r0, r1, r4}
   25212:	2300      	movs	r3, #0
   25214:	627b      	str	r3, [r7, #36]	; 0x24
   25216:	e00e      	b.n	25236 <_sercom_get_sercom_inst_index+0x3a>
   25218:	230c      	movs	r3, #12
   2521a:	18fb      	adds	r3, r7, r3
   2521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2521e:	0092      	lsls	r2, r2, #2
   25220:	58d3      	ldr	r3, [r2, r3]
   25222:	001a      	movs	r2, r3
   25224:	687b      	ldr	r3, [r7, #4]
   25226:	429a      	cmp	r2, r3
   25228:	d102      	bne.n	25230 <_sercom_get_sercom_inst_index+0x34>
   2522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2522c:	b2db      	uxtb	r3, r3
   2522e:	e006      	b.n	2523e <_sercom_get_sercom_inst_index+0x42>
   25230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25232:	3301      	adds	r3, #1
   25234:	627b      	str	r3, [r7, #36]	; 0x24
   25236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25238:	2b05      	cmp	r3, #5
   2523a:	d9ed      	bls.n	25218 <_sercom_get_sercom_inst_index+0x1c>
   2523c:	2300      	movs	r3, #0
   2523e:	0018      	movs	r0, r3
   25240:	46bd      	mov	sp, r7
   25242:	b00b      	add	sp, #44	; 0x2c
   25244:	bd90      	pop	{r4, r7, pc}
   25246:	46c0      	nop			; (mov r8, r8)
   25248:	00036998 	.word	0x00036998

0002524c <_sercom_default_handler>:
   2524c:	b580      	push	{r7, lr}
   2524e:	b082      	sub	sp, #8
   25250:	af00      	add	r7, sp, #0
   25252:	0002      	movs	r2, r0
   25254:	1dfb      	adds	r3, r7, #7
   25256:	701a      	strb	r2, [r3, #0]
   25258:	46c0      	nop			; (mov r8, r8)
   2525a:	46bd      	mov	sp, r7
   2525c:	b002      	add	sp, #8
   2525e:	bd80      	pop	{r7, pc}

00025260 <_sercom_set_handler>:
   25260:	b580      	push	{r7, lr}
   25262:	b084      	sub	sp, #16
   25264:	af00      	add	r7, sp, #0
   25266:	0002      	movs	r2, r0
   25268:	6039      	str	r1, [r7, #0]
   2526a:	1dfb      	adds	r3, r7, #7
   2526c:	701a      	strb	r2, [r3, #0]
   2526e:	4b13      	ldr	r3, [pc, #76]	; (252bc <_sercom_set_handler+0x5c>)
   25270:	781b      	ldrb	r3, [r3, #0]
   25272:	2201      	movs	r2, #1
   25274:	4053      	eors	r3, r2
   25276:	b2db      	uxtb	r3, r3
   25278:	2b00      	cmp	r3, #0
   2527a:	d015      	beq.n	252a8 <_sercom_set_handler+0x48>
   2527c:	2300      	movs	r3, #0
   2527e:	60fb      	str	r3, [r7, #12]
   25280:	e00c      	b.n	2529c <_sercom_set_handler+0x3c>
   25282:	4b0f      	ldr	r3, [pc, #60]	; (252c0 <_sercom_set_handler+0x60>)
   25284:	68fa      	ldr	r2, [r7, #12]
   25286:	0092      	lsls	r2, r2, #2
   25288:	490e      	ldr	r1, [pc, #56]	; (252c4 <_sercom_set_handler+0x64>)
   2528a:	50d1      	str	r1, [r2, r3]
   2528c:	4b0e      	ldr	r3, [pc, #56]	; (252c8 <_sercom_set_handler+0x68>)
   2528e:	68fa      	ldr	r2, [r7, #12]
   25290:	0092      	lsls	r2, r2, #2
   25292:	2100      	movs	r1, #0
   25294:	50d1      	str	r1, [r2, r3]
   25296:	68fb      	ldr	r3, [r7, #12]
   25298:	3301      	adds	r3, #1
   2529a:	60fb      	str	r3, [r7, #12]
   2529c:	68fb      	ldr	r3, [r7, #12]
   2529e:	2b05      	cmp	r3, #5
   252a0:	d9ef      	bls.n	25282 <_sercom_set_handler+0x22>
   252a2:	4b06      	ldr	r3, [pc, #24]	; (252bc <_sercom_set_handler+0x5c>)
   252a4:	2201      	movs	r2, #1
   252a6:	701a      	strb	r2, [r3, #0]
   252a8:	1dfb      	adds	r3, r7, #7
   252aa:	781a      	ldrb	r2, [r3, #0]
   252ac:	4b04      	ldr	r3, [pc, #16]	; (252c0 <_sercom_set_handler+0x60>)
   252ae:	0092      	lsls	r2, r2, #2
   252b0:	6839      	ldr	r1, [r7, #0]
   252b2:	50d1      	str	r1, [r2, r3]
   252b4:	46c0      	nop			; (mov r8, r8)
   252b6:	46bd      	mov	sp, r7
   252b8:	b004      	add	sp, #16
   252ba:	bd80      	pop	{r7, pc}
   252bc:	20003d1a 	.word	0x20003d1a
   252c0:	20003d1c 	.word	0x20003d1c
   252c4:	0002524d 	.word	0x0002524d
   252c8:	20005578 	.word	0x20005578

000252cc <_sercom_get_interrupt_vector>:
   252cc:	b590      	push	{r4, r7, lr}
   252ce:	b085      	sub	sp, #20
   252d0:	af00      	add	r7, sp, #0
   252d2:	6078      	str	r0, [r7, #4]
   252d4:	2308      	movs	r3, #8
   252d6:	18fb      	adds	r3, r7, r3
   252d8:	4a0b      	ldr	r2, [pc, #44]	; (25308 <_sercom_get_interrupt_vector+0x3c>)
   252da:	6811      	ldr	r1, [r2, #0]
   252dc:	6019      	str	r1, [r3, #0]
   252de:	8892      	ldrh	r2, [r2, #4]
   252e0:	809a      	strh	r2, [r3, #4]
   252e2:	230f      	movs	r3, #15
   252e4:	18fc      	adds	r4, r7, r3
   252e6:	687b      	ldr	r3, [r7, #4]
   252e8:	0018      	movs	r0, r3
   252ea:	4b08      	ldr	r3, [pc, #32]	; (2530c <_sercom_get_interrupt_vector+0x40>)
   252ec:	4798      	blx	r3
   252ee:	0003      	movs	r3, r0
   252f0:	7023      	strb	r3, [r4, #0]
   252f2:	230f      	movs	r3, #15
   252f4:	18fb      	adds	r3, r7, r3
   252f6:	781b      	ldrb	r3, [r3, #0]
   252f8:	2208      	movs	r2, #8
   252fa:	18ba      	adds	r2, r7, r2
   252fc:	5cd3      	ldrb	r3, [r2, r3]
   252fe:	b25b      	sxtb	r3, r3
   25300:	0018      	movs	r0, r3
   25302:	46bd      	mov	sp, r7
   25304:	b005      	add	sp, #20
   25306:	bd90      	pop	{r4, r7, pc}
   25308:	000369b0 	.word	0x000369b0
   2530c:	000251fd 	.word	0x000251fd

00025310 <SERCOM0_Handler>:
   25310:	b580      	push	{r7, lr}
   25312:	af00      	add	r7, sp, #0
   25314:	4b03      	ldr	r3, [pc, #12]	; (25324 <SERCOM0_Handler+0x14>)
   25316:	681b      	ldr	r3, [r3, #0]
   25318:	2000      	movs	r0, #0
   2531a:	4798      	blx	r3
   2531c:	46c0      	nop			; (mov r8, r8)
   2531e:	46bd      	mov	sp, r7
   25320:	bd80      	pop	{r7, pc}
   25322:	46c0      	nop			; (mov r8, r8)
   25324:	20003d1c 	.word	0x20003d1c

00025328 <SERCOM1_Handler>:
   25328:	b580      	push	{r7, lr}
   2532a:	af00      	add	r7, sp, #0
   2532c:	4b03      	ldr	r3, [pc, #12]	; (2533c <SERCOM1_Handler+0x14>)
   2532e:	685b      	ldr	r3, [r3, #4]
   25330:	2001      	movs	r0, #1
   25332:	4798      	blx	r3
   25334:	46c0      	nop			; (mov r8, r8)
   25336:	46bd      	mov	sp, r7
   25338:	bd80      	pop	{r7, pc}
   2533a:	46c0      	nop			; (mov r8, r8)
   2533c:	20003d1c 	.word	0x20003d1c

00025340 <SERCOM2_Handler>:
   25340:	b580      	push	{r7, lr}
   25342:	af00      	add	r7, sp, #0
   25344:	4b03      	ldr	r3, [pc, #12]	; (25354 <SERCOM2_Handler+0x14>)
   25346:	689b      	ldr	r3, [r3, #8]
   25348:	2002      	movs	r0, #2
   2534a:	4798      	blx	r3
   2534c:	46c0      	nop			; (mov r8, r8)
   2534e:	46bd      	mov	sp, r7
   25350:	bd80      	pop	{r7, pc}
   25352:	46c0      	nop			; (mov r8, r8)
   25354:	20003d1c 	.word	0x20003d1c

00025358 <SERCOM3_Handler>:
   25358:	b580      	push	{r7, lr}
   2535a:	af00      	add	r7, sp, #0
   2535c:	4b03      	ldr	r3, [pc, #12]	; (2536c <SERCOM3_Handler+0x14>)
   2535e:	68db      	ldr	r3, [r3, #12]
   25360:	2003      	movs	r0, #3
   25362:	4798      	blx	r3
   25364:	46c0      	nop			; (mov r8, r8)
   25366:	46bd      	mov	sp, r7
   25368:	bd80      	pop	{r7, pc}
   2536a:	46c0      	nop			; (mov r8, r8)
   2536c:	20003d1c 	.word	0x20003d1c

00025370 <SERCOM4_Handler>:
   25370:	b580      	push	{r7, lr}
   25372:	af00      	add	r7, sp, #0
   25374:	4b03      	ldr	r3, [pc, #12]	; (25384 <SERCOM4_Handler+0x14>)
   25376:	691b      	ldr	r3, [r3, #16]
   25378:	2004      	movs	r0, #4
   2537a:	4798      	blx	r3
   2537c:	46c0      	nop			; (mov r8, r8)
   2537e:	46bd      	mov	sp, r7
   25380:	bd80      	pop	{r7, pc}
   25382:	46c0      	nop			; (mov r8, r8)
   25384:	20003d1c 	.word	0x20003d1c

00025388 <SERCOM5_Handler>:
   25388:	b580      	push	{r7, lr}
   2538a:	af00      	add	r7, sp, #0
   2538c:	4b03      	ldr	r3, [pc, #12]	; (2539c <SERCOM5_Handler+0x14>)
   2538e:	695b      	ldr	r3, [r3, #20]
   25390:	2005      	movs	r0, #5
   25392:	4798      	blx	r3
   25394:	46c0      	nop			; (mov r8, r8)
   25396:	46bd      	mov	sp, r7
   25398:	bd80      	pop	{r7, pc}
   2539a:	46c0      	nop			; (mov r8, r8)
   2539c:	20003d1c 	.word	0x20003d1c

000253a0 <system_pinmux_get_config_defaults>:
   253a0:	b580      	push	{r7, lr}
   253a2:	b082      	sub	sp, #8
   253a4:	af00      	add	r7, sp, #0
   253a6:	6078      	str	r0, [r7, #4]
   253a8:	687b      	ldr	r3, [r7, #4]
   253aa:	2280      	movs	r2, #128	; 0x80
   253ac:	701a      	strb	r2, [r3, #0]
   253ae:	687b      	ldr	r3, [r7, #4]
   253b0:	2200      	movs	r2, #0
   253b2:	705a      	strb	r2, [r3, #1]
   253b4:	687b      	ldr	r3, [r7, #4]
   253b6:	2201      	movs	r2, #1
   253b8:	709a      	strb	r2, [r3, #2]
   253ba:	687b      	ldr	r3, [r7, #4]
   253bc:	2200      	movs	r2, #0
   253be:	70da      	strb	r2, [r3, #3]
   253c0:	46c0      	nop			; (mov r8, r8)
   253c2:	46bd      	mov	sp, r7
   253c4:	b002      	add	sp, #8
   253c6:	bd80      	pop	{r7, pc}

000253c8 <system_pinmux_get_group_from_gpio_pin>:
   253c8:	b580      	push	{r7, lr}
   253ca:	b084      	sub	sp, #16
   253cc:	af00      	add	r7, sp, #0
   253ce:	0002      	movs	r2, r0
   253d0:	1dfb      	adds	r3, r7, #7
   253d2:	701a      	strb	r2, [r3, #0]
   253d4:	230f      	movs	r3, #15
   253d6:	18fb      	adds	r3, r7, r3
   253d8:	1dfa      	adds	r2, r7, #7
   253da:	7812      	ldrb	r2, [r2, #0]
   253dc:	09d2      	lsrs	r2, r2, #7
   253de:	701a      	strb	r2, [r3, #0]
   253e0:	230e      	movs	r3, #14
   253e2:	18fb      	adds	r3, r7, r3
   253e4:	1dfa      	adds	r2, r7, #7
   253e6:	7812      	ldrb	r2, [r2, #0]
   253e8:	0952      	lsrs	r2, r2, #5
   253ea:	701a      	strb	r2, [r3, #0]
   253ec:	4b0d      	ldr	r3, [pc, #52]	; (25424 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   253ee:	60bb      	str	r3, [r7, #8]
   253f0:	230f      	movs	r3, #15
   253f2:	18fb      	adds	r3, r7, r3
   253f4:	781b      	ldrb	r3, [r3, #0]
   253f6:	2b00      	cmp	r3, #0
   253f8:	d10f      	bne.n	2541a <system_pinmux_get_group_from_gpio_pin+0x52>
   253fa:	230f      	movs	r3, #15
   253fc:	18fb      	adds	r3, r7, r3
   253fe:	781b      	ldrb	r3, [r3, #0]
   25400:	009b      	lsls	r3, r3, #2
   25402:	2210      	movs	r2, #16
   25404:	4694      	mov	ip, r2
   25406:	44bc      	add	ip, r7
   25408:	4463      	add	r3, ip
   2540a:	3b08      	subs	r3, #8
   2540c:	681a      	ldr	r2, [r3, #0]
   2540e:	230e      	movs	r3, #14
   25410:	18fb      	adds	r3, r7, r3
   25412:	781b      	ldrb	r3, [r3, #0]
   25414:	01db      	lsls	r3, r3, #7
   25416:	18d3      	adds	r3, r2, r3
   25418:	e000      	b.n	2541c <system_pinmux_get_group_from_gpio_pin+0x54>
   2541a:	2300      	movs	r3, #0
   2541c:	0018      	movs	r0, r3
   2541e:	46bd      	mov	sp, r7
   25420:	b004      	add	sp, #16
   25422:	bd80      	pop	{r7, pc}
   25424:	41004400 	.word	0x41004400

00025428 <port_get_group_from_gpio_pin>:
   25428:	b580      	push	{r7, lr}
   2542a:	b082      	sub	sp, #8
   2542c:	af00      	add	r7, sp, #0
   2542e:	0002      	movs	r2, r0
   25430:	1dfb      	adds	r3, r7, #7
   25432:	701a      	strb	r2, [r3, #0]
   25434:	1dfb      	adds	r3, r7, #7
   25436:	781b      	ldrb	r3, [r3, #0]
   25438:	0018      	movs	r0, r3
   2543a:	4b03      	ldr	r3, [pc, #12]	; (25448 <port_get_group_from_gpio_pin+0x20>)
   2543c:	4798      	blx	r3
   2543e:	0003      	movs	r3, r0
   25440:	0018      	movs	r0, r3
   25442:	46bd      	mov	sp, r7
   25444:	b002      	add	sp, #8
   25446:	bd80      	pop	{r7, pc}
   25448:	000253c9 	.word	0x000253c9

0002544c <port_pin_set_output_level>:
   2544c:	b580      	push	{r7, lr}
   2544e:	b084      	sub	sp, #16
   25450:	af00      	add	r7, sp, #0
   25452:	0002      	movs	r2, r0
   25454:	1dfb      	adds	r3, r7, #7
   25456:	701a      	strb	r2, [r3, #0]
   25458:	1dbb      	adds	r3, r7, #6
   2545a:	1c0a      	adds	r2, r1, #0
   2545c:	701a      	strb	r2, [r3, #0]
   2545e:	1dfb      	adds	r3, r7, #7
   25460:	781b      	ldrb	r3, [r3, #0]
   25462:	0018      	movs	r0, r3
   25464:	4b0d      	ldr	r3, [pc, #52]	; (2549c <port_pin_set_output_level+0x50>)
   25466:	4798      	blx	r3
   25468:	0003      	movs	r3, r0
   2546a:	60fb      	str	r3, [r7, #12]
   2546c:	1dfb      	adds	r3, r7, #7
   2546e:	781b      	ldrb	r3, [r3, #0]
   25470:	221f      	movs	r2, #31
   25472:	4013      	ands	r3, r2
   25474:	2201      	movs	r2, #1
   25476:	409a      	lsls	r2, r3
   25478:	0013      	movs	r3, r2
   2547a:	60bb      	str	r3, [r7, #8]
   2547c:	1dbb      	adds	r3, r7, #6
   2547e:	781b      	ldrb	r3, [r3, #0]
   25480:	2b00      	cmp	r3, #0
   25482:	d003      	beq.n	2548c <port_pin_set_output_level+0x40>
   25484:	68fb      	ldr	r3, [r7, #12]
   25486:	68ba      	ldr	r2, [r7, #8]
   25488:	619a      	str	r2, [r3, #24]
   2548a:	e002      	b.n	25492 <port_pin_set_output_level+0x46>
   2548c:	68fb      	ldr	r3, [r7, #12]
   2548e:	68ba      	ldr	r2, [r7, #8]
   25490:	615a      	str	r2, [r3, #20]
   25492:	46c0      	nop			; (mov r8, r8)
   25494:	46bd      	mov	sp, r7
   25496:	b004      	add	sp, #16
   25498:	bd80      	pop	{r7, pc}
   2549a:	46c0      	nop			; (mov r8, r8)
   2549c:	00025429 	.word	0x00025429

000254a0 <system_gclk_chan_get_config_defaults>:
   254a0:	b580      	push	{r7, lr}
   254a2:	b082      	sub	sp, #8
   254a4:	af00      	add	r7, sp, #0
   254a6:	6078      	str	r0, [r7, #4]
   254a8:	687b      	ldr	r3, [r7, #4]
   254aa:	2200      	movs	r2, #0
   254ac:	701a      	strb	r2, [r3, #0]
   254ae:	46c0      	nop			; (mov r8, r8)
   254b0:	46bd      	mov	sp, r7
   254b2:	b002      	add	sp, #8
   254b4:	bd80      	pop	{r7, pc}
	...

000254b8 <system_apb_clock_set_mask>:
   254b8:	b580      	push	{r7, lr}
   254ba:	b082      	sub	sp, #8
   254bc:	af00      	add	r7, sp, #0
   254be:	0002      	movs	r2, r0
   254c0:	6039      	str	r1, [r7, #0]
   254c2:	1dfb      	adds	r3, r7, #7
   254c4:	701a      	strb	r2, [r3, #0]
   254c6:	1dfb      	adds	r3, r7, #7
   254c8:	781b      	ldrb	r3, [r3, #0]
   254ca:	2b01      	cmp	r3, #1
   254cc:	d00a      	beq.n	254e4 <system_apb_clock_set_mask+0x2c>
   254ce:	2b02      	cmp	r3, #2
   254d0:	d00f      	beq.n	254f2 <system_apb_clock_set_mask+0x3a>
   254d2:	2b00      	cmp	r3, #0
   254d4:	d114      	bne.n	25500 <system_apb_clock_set_mask+0x48>
   254d6:	4b0e      	ldr	r3, [pc, #56]	; (25510 <system_apb_clock_set_mask+0x58>)
   254d8:	4a0d      	ldr	r2, [pc, #52]	; (25510 <system_apb_clock_set_mask+0x58>)
   254da:	6991      	ldr	r1, [r2, #24]
   254dc:	683a      	ldr	r2, [r7, #0]
   254de:	430a      	orrs	r2, r1
   254e0:	619a      	str	r2, [r3, #24]
   254e2:	e00f      	b.n	25504 <system_apb_clock_set_mask+0x4c>
   254e4:	4b0a      	ldr	r3, [pc, #40]	; (25510 <system_apb_clock_set_mask+0x58>)
   254e6:	4a0a      	ldr	r2, [pc, #40]	; (25510 <system_apb_clock_set_mask+0x58>)
   254e8:	69d1      	ldr	r1, [r2, #28]
   254ea:	683a      	ldr	r2, [r7, #0]
   254ec:	430a      	orrs	r2, r1
   254ee:	61da      	str	r2, [r3, #28]
   254f0:	e008      	b.n	25504 <system_apb_clock_set_mask+0x4c>
   254f2:	4b07      	ldr	r3, [pc, #28]	; (25510 <system_apb_clock_set_mask+0x58>)
   254f4:	4a06      	ldr	r2, [pc, #24]	; (25510 <system_apb_clock_set_mask+0x58>)
   254f6:	6a11      	ldr	r1, [r2, #32]
   254f8:	683a      	ldr	r2, [r7, #0]
   254fa:	430a      	orrs	r2, r1
   254fc:	621a      	str	r2, [r3, #32]
   254fe:	e001      	b.n	25504 <system_apb_clock_set_mask+0x4c>
   25500:	2317      	movs	r3, #23
   25502:	e000      	b.n	25506 <system_apb_clock_set_mask+0x4e>
   25504:	2300      	movs	r3, #0
   25506:	0018      	movs	r0, r3
   25508:	46bd      	mov	sp, r7
   2550a:	b002      	add	sp, #8
   2550c:	bd80      	pop	{r7, pc}
   2550e:	46c0      	nop			; (mov r8, r8)
   25510:	40000400 	.word	0x40000400

00025514 <system_is_debugger_present>:
   25514:	b580      	push	{r7, lr}
   25516:	af00      	add	r7, sp, #0
   25518:	4b05      	ldr	r3, [pc, #20]	; (25530 <system_is_debugger_present+0x1c>)
   2551a:	789b      	ldrb	r3, [r3, #2]
   2551c:	b2db      	uxtb	r3, r3
   2551e:	001a      	movs	r2, r3
   25520:	2302      	movs	r3, #2
   25522:	4013      	ands	r3, r2
   25524:	1e5a      	subs	r2, r3, #1
   25526:	4193      	sbcs	r3, r2
   25528:	b2db      	uxtb	r3, r3
   2552a:	0018      	movs	r0, r3
   2552c:	46bd      	mov	sp, r7
   2552e:	bd80      	pop	{r7, pc}
   25530:	41002000 	.word	0x41002000

00025534 <system_interrupt_enable>:
   25534:	b580      	push	{r7, lr}
   25536:	b082      	sub	sp, #8
   25538:	af00      	add	r7, sp, #0
   2553a:	0002      	movs	r2, r0
   2553c:	1dfb      	adds	r3, r7, #7
   2553e:	701a      	strb	r2, [r3, #0]
   25540:	4b06      	ldr	r3, [pc, #24]	; (2555c <system_interrupt_enable+0x28>)
   25542:	1dfa      	adds	r2, r7, #7
   25544:	7812      	ldrb	r2, [r2, #0]
   25546:	0011      	movs	r1, r2
   25548:	221f      	movs	r2, #31
   2554a:	400a      	ands	r2, r1
   2554c:	2101      	movs	r1, #1
   2554e:	4091      	lsls	r1, r2
   25550:	000a      	movs	r2, r1
   25552:	601a      	str	r2, [r3, #0]
   25554:	46c0      	nop			; (mov r8, r8)
   25556:	46bd      	mov	sp, r7
   25558:	b002      	add	sp, #8
   2555a:	bd80      	pop	{r7, pc}
   2555c:	e000e100 	.word	0xe000e100

00025560 <system_interrupt_disable>:
   25560:	b580      	push	{r7, lr}
   25562:	b082      	sub	sp, #8
   25564:	af00      	add	r7, sp, #0
   25566:	0002      	movs	r2, r0
   25568:	1dfb      	adds	r3, r7, #7
   2556a:	701a      	strb	r2, [r3, #0]
   2556c:	4a07      	ldr	r2, [pc, #28]	; (2558c <system_interrupt_disable+0x2c>)
   2556e:	1dfb      	adds	r3, r7, #7
   25570:	781b      	ldrb	r3, [r3, #0]
   25572:	0019      	movs	r1, r3
   25574:	231f      	movs	r3, #31
   25576:	400b      	ands	r3, r1
   25578:	2101      	movs	r1, #1
   2557a:	4099      	lsls	r1, r3
   2557c:	000b      	movs	r3, r1
   2557e:	0019      	movs	r1, r3
   25580:	2380      	movs	r3, #128	; 0x80
   25582:	50d1      	str	r1, [r2, r3]
   25584:	46c0      	nop			; (mov r8, r8)
   25586:	46bd      	mov	sp, r7
   25588:	b002      	add	sp, #8
   2558a:	bd80      	pop	{r7, pc}
   2558c:	e000e100 	.word	0xe000e100

00025590 <spi_is_syncing>:
   25590:	b580      	push	{r7, lr}
   25592:	b084      	sub	sp, #16
   25594:	af00      	add	r7, sp, #0
   25596:	6078      	str	r0, [r7, #4]
   25598:	687b      	ldr	r3, [r7, #4]
   2559a:	681b      	ldr	r3, [r3, #0]
   2559c:	60fb      	str	r3, [r7, #12]
   2559e:	68fb      	ldr	r3, [r7, #12]
   255a0:	69db      	ldr	r3, [r3, #28]
   255a2:	1e5a      	subs	r2, r3, #1
   255a4:	4193      	sbcs	r3, r2
   255a6:	b2db      	uxtb	r3, r3
   255a8:	0018      	movs	r0, r3
   255aa:	46bd      	mov	sp, r7
   255ac:	b004      	add	sp, #16
   255ae:	bd80      	pop	{r7, pc}

000255b0 <spi_enable>:
   255b0:	b580      	push	{r7, lr}
   255b2:	b084      	sub	sp, #16
   255b4:	af00      	add	r7, sp, #0
   255b6:	6078      	str	r0, [r7, #4]
   255b8:	687b      	ldr	r3, [r7, #4]
   255ba:	681b      	ldr	r3, [r3, #0]
   255bc:	60fb      	str	r3, [r7, #12]
   255be:	687b      	ldr	r3, [r7, #4]
   255c0:	681b      	ldr	r3, [r3, #0]
   255c2:	0018      	movs	r0, r3
   255c4:	4b0b      	ldr	r3, [pc, #44]	; (255f4 <spi_enable+0x44>)
   255c6:	4798      	blx	r3
   255c8:	0003      	movs	r3, r0
   255ca:	0018      	movs	r0, r3
   255cc:	4b0a      	ldr	r3, [pc, #40]	; (255f8 <spi_enable+0x48>)
   255ce:	4798      	blx	r3
   255d0:	46c0      	nop			; (mov r8, r8)
   255d2:	687b      	ldr	r3, [r7, #4]
   255d4:	0018      	movs	r0, r3
   255d6:	4b09      	ldr	r3, [pc, #36]	; (255fc <spi_enable+0x4c>)
   255d8:	4798      	blx	r3
   255da:	1e03      	subs	r3, r0, #0
   255dc:	d1f9      	bne.n	255d2 <spi_enable+0x22>
   255de:	68fb      	ldr	r3, [r7, #12]
   255e0:	681b      	ldr	r3, [r3, #0]
   255e2:	2202      	movs	r2, #2
   255e4:	431a      	orrs	r2, r3
   255e6:	68fb      	ldr	r3, [r7, #12]
   255e8:	601a      	str	r2, [r3, #0]
   255ea:	46c0      	nop			; (mov r8, r8)
   255ec:	46bd      	mov	sp, r7
   255ee:	b004      	add	sp, #16
   255f0:	bd80      	pop	{r7, pc}
   255f2:	46c0      	nop			; (mov r8, r8)
   255f4:	000252cd 	.word	0x000252cd
   255f8:	00025535 	.word	0x00025535
   255fc:	00025591 	.word	0x00025591

00025600 <spi_disable>:
   25600:	b580      	push	{r7, lr}
   25602:	b084      	sub	sp, #16
   25604:	af00      	add	r7, sp, #0
   25606:	6078      	str	r0, [r7, #4]
   25608:	687b      	ldr	r3, [r7, #4]
   2560a:	681b      	ldr	r3, [r3, #0]
   2560c:	60fb      	str	r3, [r7, #12]
   2560e:	687b      	ldr	r3, [r7, #4]
   25610:	681b      	ldr	r3, [r3, #0]
   25612:	0018      	movs	r0, r3
   25614:	4b0e      	ldr	r3, [pc, #56]	; (25650 <spi_disable+0x50>)
   25616:	4798      	blx	r3
   25618:	0003      	movs	r3, r0
   2561a:	0018      	movs	r0, r3
   2561c:	4b0d      	ldr	r3, [pc, #52]	; (25654 <spi_disable+0x54>)
   2561e:	4798      	blx	r3
   25620:	46c0      	nop			; (mov r8, r8)
   25622:	687b      	ldr	r3, [r7, #4]
   25624:	0018      	movs	r0, r3
   25626:	4b0c      	ldr	r3, [pc, #48]	; (25658 <spi_disable+0x58>)
   25628:	4798      	blx	r3
   2562a:	1e03      	subs	r3, r0, #0
   2562c:	d1f9      	bne.n	25622 <spi_disable+0x22>
   2562e:	68fb      	ldr	r3, [r7, #12]
   25630:	228f      	movs	r2, #143	; 0x8f
   25632:	751a      	strb	r2, [r3, #20]
   25634:	68fb      	ldr	r3, [r7, #12]
   25636:	228f      	movs	r2, #143	; 0x8f
   25638:	761a      	strb	r2, [r3, #24]
   2563a:	68fb      	ldr	r3, [r7, #12]
   2563c:	681b      	ldr	r3, [r3, #0]
   2563e:	2202      	movs	r2, #2
   25640:	4393      	bics	r3, r2
   25642:	001a      	movs	r2, r3
   25644:	68fb      	ldr	r3, [r7, #12]
   25646:	601a      	str	r2, [r3, #0]
   25648:	46c0      	nop			; (mov r8, r8)
   2564a:	46bd      	mov	sp, r7
   2564c:	b004      	add	sp, #16
   2564e:	bd80      	pop	{r7, pc}
   25650:	000252cd 	.word	0x000252cd
   25654:	00025561 	.word	0x00025561
   25658:	00025591 	.word	0x00025591

0002565c <spi_is_write_complete>:
   2565c:	b580      	push	{r7, lr}
   2565e:	b084      	sub	sp, #16
   25660:	af00      	add	r7, sp, #0
   25662:	6078      	str	r0, [r7, #4]
   25664:	687b      	ldr	r3, [r7, #4]
   25666:	681b      	ldr	r3, [r3, #0]
   25668:	60fb      	str	r3, [r7, #12]
   2566a:	68fb      	ldr	r3, [r7, #12]
   2566c:	7e1b      	ldrb	r3, [r3, #24]
   2566e:	b2db      	uxtb	r3, r3
   25670:	001a      	movs	r2, r3
   25672:	2302      	movs	r3, #2
   25674:	4013      	ands	r3, r2
   25676:	1e5a      	subs	r2, r3, #1
   25678:	4193      	sbcs	r3, r2
   2567a:	b2db      	uxtb	r3, r3
   2567c:	0018      	movs	r0, r3
   2567e:	46bd      	mov	sp, r7
   25680:	b004      	add	sp, #16
   25682:	bd80      	pop	{r7, pc}

00025684 <spi_is_ready_to_write>:
   25684:	b580      	push	{r7, lr}
   25686:	b084      	sub	sp, #16
   25688:	af00      	add	r7, sp, #0
   2568a:	6078      	str	r0, [r7, #4]
   2568c:	687b      	ldr	r3, [r7, #4]
   2568e:	681b      	ldr	r3, [r3, #0]
   25690:	60fb      	str	r3, [r7, #12]
   25692:	68fb      	ldr	r3, [r7, #12]
   25694:	7e1b      	ldrb	r3, [r3, #24]
   25696:	b2db      	uxtb	r3, r3
   25698:	001a      	movs	r2, r3
   2569a:	2301      	movs	r3, #1
   2569c:	4013      	ands	r3, r2
   2569e:	1e5a      	subs	r2, r3, #1
   256a0:	4193      	sbcs	r3, r2
   256a2:	b2db      	uxtb	r3, r3
   256a4:	0018      	movs	r0, r3
   256a6:	46bd      	mov	sp, r7
   256a8:	b004      	add	sp, #16
   256aa:	bd80      	pop	{r7, pc}

000256ac <spi_is_ready_to_read>:
   256ac:	b580      	push	{r7, lr}
   256ae:	b084      	sub	sp, #16
   256b0:	af00      	add	r7, sp, #0
   256b2:	6078      	str	r0, [r7, #4]
   256b4:	687b      	ldr	r3, [r7, #4]
   256b6:	681b      	ldr	r3, [r3, #0]
   256b8:	60fb      	str	r3, [r7, #12]
   256ba:	68fb      	ldr	r3, [r7, #12]
   256bc:	7e1b      	ldrb	r3, [r3, #24]
   256be:	b2db      	uxtb	r3, r3
   256c0:	001a      	movs	r2, r3
   256c2:	2304      	movs	r3, #4
   256c4:	4013      	ands	r3, r2
   256c6:	1e5a      	subs	r2, r3, #1
   256c8:	4193      	sbcs	r3, r2
   256ca:	b2db      	uxtb	r3, r3
   256cc:	0018      	movs	r0, r3
   256ce:	46bd      	mov	sp, r7
   256d0:	b004      	add	sp, #16
   256d2:	bd80      	pop	{r7, pc}

000256d4 <spi_write>:
   256d4:	b580      	push	{r7, lr}
   256d6:	b084      	sub	sp, #16
   256d8:	af00      	add	r7, sp, #0
   256da:	6078      	str	r0, [r7, #4]
   256dc:	000a      	movs	r2, r1
   256de:	1cbb      	adds	r3, r7, #2
   256e0:	801a      	strh	r2, [r3, #0]
   256e2:	687b      	ldr	r3, [r7, #4]
   256e4:	681b      	ldr	r3, [r3, #0]
   256e6:	60fb      	str	r3, [r7, #12]
   256e8:	687b      	ldr	r3, [r7, #4]
   256ea:	0018      	movs	r0, r3
   256ec:	4b0a      	ldr	r3, [pc, #40]	; (25718 <spi_write+0x44>)
   256ee:	4798      	blx	r3
   256f0:	0003      	movs	r3, r0
   256f2:	001a      	movs	r2, r3
   256f4:	2301      	movs	r3, #1
   256f6:	4053      	eors	r3, r2
   256f8:	b2db      	uxtb	r3, r3
   256fa:	2b00      	cmp	r3, #0
   256fc:	d001      	beq.n	25702 <spi_write+0x2e>
   256fe:	2305      	movs	r3, #5
   25700:	e006      	b.n	25710 <spi_write+0x3c>
   25702:	1cbb      	adds	r3, r7, #2
   25704:	881b      	ldrh	r3, [r3, #0]
   25706:	05db      	lsls	r3, r3, #23
   25708:	0dda      	lsrs	r2, r3, #23
   2570a:	68fb      	ldr	r3, [r7, #12]
   2570c:	629a      	str	r2, [r3, #40]	; 0x28
   2570e:	2300      	movs	r3, #0
   25710:	0018      	movs	r0, r3
   25712:	46bd      	mov	sp, r7
   25714:	b004      	add	sp, #16
   25716:	bd80      	pop	{r7, pc}
   25718:	00025685 	.word	0x00025685

0002571c <spi_read>:
   2571c:	b580      	push	{r7, lr}
   2571e:	b084      	sub	sp, #16
   25720:	af00      	add	r7, sp, #0
   25722:	6078      	str	r0, [r7, #4]
   25724:	6039      	str	r1, [r7, #0]
   25726:	687b      	ldr	r3, [r7, #4]
   25728:	681b      	ldr	r3, [r3, #0]
   2572a:	60bb      	str	r3, [r7, #8]
   2572c:	687b      	ldr	r3, [r7, #4]
   2572e:	0018      	movs	r0, r3
   25730:	4b1b      	ldr	r3, [pc, #108]	; (257a0 <spi_read+0x84>)
   25732:	4798      	blx	r3
   25734:	0003      	movs	r3, r0
   25736:	001a      	movs	r2, r3
   25738:	2301      	movs	r3, #1
   2573a:	4053      	eors	r3, r2
   2573c:	b2db      	uxtb	r3, r3
   2573e:	2b00      	cmp	r3, #0
   25740:	d001      	beq.n	25746 <spi_read+0x2a>
   25742:	2310      	movs	r3, #16
   25744:	e027      	b.n	25796 <spi_read+0x7a>
   25746:	230f      	movs	r3, #15
   25748:	18fb      	adds	r3, r7, r3
   2574a:	2200      	movs	r2, #0
   2574c:	701a      	strb	r2, [r3, #0]
   2574e:	68bb      	ldr	r3, [r7, #8]
   25750:	8b5b      	ldrh	r3, [r3, #26]
   25752:	b29b      	uxth	r3, r3
   25754:	001a      	movs	r2, r3
   25756:	2304      	movs	r3, #4
   25758:	4013      	ands	r3, r2
   2575a:	d006      	beq.n	2576a <spi_read+0x4e>
   2575c:	230f      	movs	r3, #15
   2575e:	18fb      	adds	r3, r7, r3
   25760:	221e      	movs	r2, #30
   25762:	701a      	strb	r2, [r3, #0]
   25764:	68bb      	ldr	r3, [r7, #8]
   25766:	2204      	movs	r2, #4
   25768:	835a      	strh	r2, [r3, #26]
   2576a:	687b      	ldr	r3, [r7, #4]
   2576c:	799b      	ldrb	r3, [r3, #6]
   2576e:	2b01      	cmp	r3, #1
   25770:	d108      	bne.n	25784 <spi_read+0x68>
   25772:	68bb      	ldr	r3, [r7, #8]
   25774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25776:	b29b      	uxth	r3, r3
   25778:	05db      	lsls	r3, r3, #23
   2577a:	0ddb      	lsrs	r3, r3, #23
   2577c:	b29a      	uxth	r2, r3
   2577e:	683b      	ldr	r3, [r7, #0]
   25780:	801a      	strh	r2, [r3, #0]
   25782:	e005      	b.n	25790 <spi_read+0x74>
   25784:	68bb      	ldr	r3, [r7, #8]
   25786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25788:	b2db      	uxtb	r3, r3
   2578a:	b29a      	uxth	r2, r3
   2578c:	683b      	ldr	r3, [r7, #0]
   2578e:	801a      	strh	r2, [r3, #0]
   25790:	230f      	movs	r3, #15
   25792:	18fb      	adds	r3, r7, r3
   25794:	781b      	ldrb	r3, [r3, #0]
   25796:	0018      	movs	r0, r3
   25798:	46bd      	mov	sp, r7
   2579a:	b004      	add	sp, #16
   2579c:	bd80      	pop	{r7, pc}
   2579e:	46c0      	nop			; (mov r8, r8)
   257a0:	000256ad 	.word	0x000256ad

000257a4 <spi_set_baudrate>:
   257a4:	b590      	push	{r4, r7, lr}
   257a6:	b089      	sub	sp, #36	; 0x24
   257a8:	af00      	add	r7, sp, #0
   257aa:	6078      	str	r0, [r7, #4]
   257ac:	6039      	str	r1, [r7, #0]
   257ae:	230c      	movs	r3, #12
   257b0:	18fb      	adds	r3, r7, r3
   257b2:	2200      	movs	r2, #0
   257b4:	801a      	strh	r2, [r3, #0]
   257b6:	687b      	ldr	r3, [r7, #4]
   257b8:	681b      	ldr	r3, [r3, #0]
   257ba:	61fb      	str	r3, [r7, #28]
   257bc:	687b      	ldr	r3, [r7, #4]
   257be:	0018      	movs	r0, r3
   257c0:	4b24      	ldr	r3, [pc, #144]	; (25854 <spi_set_baudrate+0xb0>)
   257c2:	4798      	blx	r3
   257c4:	46c0      	nop			; (mov r8, r8)
   257c6:	687b      	ldr	r3, [r7, #4]
   257c8:	0018      	movs	r0, r3
   257ca:	4b23      	ldr	r3, [pc, #140]	; (25858 <spi_set_baudrate+0xb4>)
   257cc:	4798      	blx	r3
   257ce:	1e03      	subs	r3, r0, #0
   257d0:	d1f9      	bne.n	257c6 <spi_set_baudrate+0x22>
   257d2:	687b      	ldr	r3, [r7, #4]
   257d4:	681b      	ldr	r3, [r3, #0]
   257d6:	0018      	movs	r0, r3
   257d8:	4b20      	ldr	r3, [pc, #128]	; (2585c <spi_set_baudrate+0xb8>)
   257da:	4798      	blx	r3
   257dc:	0003      	movs	r3, r0
   257de:	61bb      	str	r3, [r7, #24]
   257e0:	69bb      	ldr	r3, [r7, #24]
   257e2:	3314      	adds	r3, #20
   257e4:	617b      	str	r3, [r7, #20]
   257e6:	697b      	ldr	r3, [r7, #20]
   257e8:	b2db      	uxtb	r3, r3
   257ea:	0018      	movs	r0, r3
   257ec:	4b1c      	ldr	r3, [pc, #112]	; (25860 <spi_set_baudrate+0xbc>)
   257ee:	4798      	blx	r3
   257f0:	0003      	movs	r3, r0
   257f2:	613b      	str	r3, [r7, #16]
   257f4:	230f      	movs	r3, #15
   257f6:	18fc      	adds	r4, r7, r3
   257f8:	230c      	movs	r3, #12
   257fa:	18fa      	adds	r2, r7, r3
   257fc:	6939      	ldr	r1, [r7, #16]
   257fe:	683b      	ldr	r3, [r7, #0]
   25800:	0018      	movs	r0, r3
   25802:	4b18      	ldr	r3, [pc, #96]	; (25864 <spi_set_baudrate+0xc0>)
   25804:	4798      	blx	r3
   25806:	0003      	movs	r3, r0
   25808:	7023      	strb	r3, [r4, #0]
   2580a:	230f      	movs	r3, #15
   2580c:	18fb      	adds	r3, r7, r3
   2580e:	781b      	ldrb	r3, [r3, #0]
   25810:	2b00      	cmp	r3, #0
   25812:	d001      	beq.n	25818 <spi_set_baudrate+0x74>
   25814:	2317      	movs	r3, #23
   25816:	e018      	b.n	2584a <spi_set_baudrate+0xa6>
   25818:	230c      	movs	r3, #12
   2581a:	18fb      	adds	r3, r7, r3
   2581c:	881b      	ldrh	r3, [r3, #0]
   2581e:	b2da      	uxtb	r2, r3
   25820:	69fb      	ldr	r3, [r7, #28]
   25822:	731a      	strb	r2, [r3, #12]
   25824:	46c0      	nop			; (mov r8, r8)
   25826:	687b      	ldr	r3, [r7, #4]
   25828:	0018      	movs	r0, r3
   2582a:	4b0b      	ldr	r3, [pc, #44]	; (25858 <spi_set_baudrate+0xb4>)
   2582c:	4798      	blx	r3
   2582e:	1e03      	subs	r3, r0, #0
   25830:	d1f9      	bne.n	25826 <spi_set_baudrate+0x82>
   25832:	687b      	ldr	r3, [r7, #4]
   25834:	0018      	movs	r0, r3
   25836:	4b0c      	ldr	r3, [pc, #48]	; (25868 <spi_set_baudrate+0xc4>)
   25838:	4798      	blx	r3
   2583a:	46c0      	nop			; (mov r8, r8)
   2583c:	687b      	ldr	r3, [r7, #4]
   2583e:	0018      	movs	r0, r3
   25840:	4b05      	ldr	r3, [pc, #20]	; (25858 <spi_set_baudrate+0xb4>)
   25842:	4798      	blx	r3
   25844:	1e03      	subs	r3, r0, #0
   25846:	d1f9      	bne.n	2583c <spi_set_baudrate+0x98>
   25848:	2300      	movs	r3, #0
   2584a:	0018      	movs	r0, r3
   2584c:	46bd      	mov	sp, r7
   2584e:	b009      	add	sp, #36	; 0x24
   25850:	bd90      	pop	{r4, r7, pc}
   25852:	46c0      	nop			; (mov r8, r8)
   25854:	00025601 	.word	0x00025601
   25858:	00025591 	.word	0x00025591
   2585c:	000251fd 	.word	0x000251fd
   25860:	00027bb1 	.word	0x00027bb1
   25864:	00024d77 	.word	0x00024d77
   25868:	000255b1 	.word	0x000255b1

0002586c <_spi_set_config>:
   2586c:	b590      	push	{r4, r7, lr}
   2586e:	b093      	sub	sp, #76	; 0x4c
   25870:	af00      	add	r7, sp, #0
   25872:	6078      	str	r0, [r7, #4]
   25874:	6039      	str	r1, [r7, #0]
   25876:	687b      	ldr	r3, [r7, #4]
   25878:	681b      	ldr	r3, [r3, #0]
   2587a:	637b      	str	r3, [r7, #52]	; 0x34
   2587c:	687b      	ldr	r3, [r7, #4]
   2587e:	681b      	ldr	r3, [r3, #0]
   25880:	633b      	str	r3, [r7, #48]	; 0x30
   25882:	231c      	movs	r3, #28
   25884:	18fb      	adds	r3, r7, r3
   25886:	0018      	movs	r0, r3
   25888:	4b75      	ldr	r3, [pc, #468]	; (25a60 <_spi_set_config+0x1f4>)
   2588a:	4798      	blx	r3
   2588c:	231c      	movs	r3, #28
   2588e:	18fb      	adds	r3, r7, r3
   25890:	2200      	movs	r2, #0
   25892:	705a      	strb	r2, [r3, #1]
   25894:	683b      	ldr	r3, [r7, #0]
   25896:	781b      	ldrb	r3, [r3, #0]
   25898:	2b00      	cmp	r3, #0
   2589a:	d103      	bne.n	258a4 <_spi_set_config+0x38>
   2589c:	231c      	movs	r3, #28
   2589e:	18fb      	adds	r3, r7, r3
   258a0:	2200      	movs	r2, #0
   258a2:	709a      	strb	r2, [r3, #2]
   258a4:	683b      	ldr	r3, [r7, #0]
   258a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   258a8:	230c      	movs	r3, #12
   258aa:	18fb      	adds	r3, r7, r3
   258ac:	601a      	str	r2, [r3, #0]
   258ae:	683b      	ldr	r3, [r7, #0]
   258b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   258b2:	230c      	movs	r3, #12
   258b4:	18fb      	adds	r3, r7, r3
   258b6:	605a      	str	r2, [r3, #4]
   258b8:	683b      	ldr	r3, [r7, #0]
   258ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   258bc:	230c      	movs	r3, #12
   258be:	18fb      	adds	r3, r7, r3
   258c0:	609a      	str	r2, [r3, #8]
   258c2:	683b      	ldr	r3, [r7, #0]
   258c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   258c6:	230c      	movs	r3, #12
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	60da      	str	r2, [r3, #12]
   258cc:	2347      	movs	r3, #71	; 0x47
   258ce:	18fb      	adds	r3, r7, r3
   258d0:	2200      	movs	r2, #0
   258d2:	701a      	strb	r2, [r3, #0]
   258d4:	e02c      	b.n	25930 <_spi_set_config+0xc4>
   258d6:	2347      	movs	r3, #71	; 0x47
   258d8:	18fb      	adds	r3, r7, r3
   258da:	781a      	ldrb	r2, [r3, #0]
   258dc:	230c      	movs	r3, #12
   258de:	18fb      	adds	r3, r7, r3
   258e0:	0092      	lsls	r2, r2, #2
   258e2:	58d3      	ldr	r3, [r2, r3]
   258e4:	643b      	str	r3, [r7, #64]	; 0x40
   258e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   258e8:	2b00      	cmp	r3, #0
   258ea:	d109      	bne.n	25900 <_spi_set_config+0x94>
   258ec:	2347      	movs	r3, #71	; 0x47
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	781a      	ldrb	r2, [r3, #0]
   258f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   258f4:	0011      	movs	r1, r2
   258f6:	0018      	movs	r0, r3
   258f8:	4b5a      	ldr	r3, [pc, #360]	; (25a64 <_spi_set_config+0x1f8>)
   258fa:	4798      	blx	r3
   258fc:	0003      	movs	r3, r0
   258fe:	643b      	str	r3, [r7, #64]	; 0x40
   25900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25902:	3301      	adds	r3, #1
   25904:	d00d      	beq.n	25922 <_spi_set_config+0xb6>
   25906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25908:	b2da      	uxtb	r2, r3
   2590a:	231c      	movs	r3, #28
   2590c:	18fb      	adds	r3, r7, r3
   2590e:	701a      	strb	r2, [r3, #0]
   25910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25912:	0c1b      	lsrs	r3, r3, #16
   25914:	b2db      	uxtb	r3, r3
   25916:	221c      	movs	r2, #28
   25918:	18ba      	adds	r2, r7, r2
   2591a:	0011      	movs	r1, r2
   2591c:	0018      	movs	r0, r3
   2591e:	4b52      	ldr	r3, [pc, #328]	; (25a68 <_spi_set_config+0x1fc>)
   25920:	4798      	blx	r3
   25922:	2347      	movs	r3, #71	; 0x47
   25924:	18fb      	adds	r3, r7, r3
   25926:	781a      	ldrb	r2, [r3, #0]
   25928:	2347      	movs	r3, #71	; 0x47
   2592a:	18fb      	adds	r3, r7, r3
   2592c:	3201      	adds	r2, #1
   2592e:	701a      	strb	r2, [r3, #0]
   25930:	2347      	movs	r3, #71	; 0x47
   25932:	18fb      	adds	r3, r7, r3
   25934:	781b      	ldrb	r3, [r3, #0]
   25936:	2b03      	cmp	r3, #3
   25938:	d9cd      	bls.n	258d6 <_spi_set_config+0x6a>
   2593a:	683b      	ldr	r3, [r7, #0]
   2593c:	781a      	ldrb	r2, [r3, #0]
   2593e:	687b      	ldr	r3, [r7, #4]
   25940:	715a      	strb	r2, [r3, #5]
   25942:	683b      	ldr	r3, [r7, #0]
   25944:	7c1a      	ldrb	r2, [r3, #16]
   25946:	687b      	ldr	r3, [r7, #4]
   25948:	719a      	strb	r2, [r3, #6]
   2594a:	683b      	ldr	r3, [r7, #0]
   2594c:	7c9a      	ldrb	r2, [r3, #18]
   2594e:	687b      	ldr	r3, [r7, #4]
   25950:	71da      	strb	r2, [r3, #7]
   25952:	683b      	ldr	r3, [r7, #0]
   25954:	7d1a      	ldrb	r2, [r3, #20]
   25956:	687b      	ldr	r3, [r7, #4]
   25958:	721a      	strb	r2, [r3, #8]
   2595a:	230a      	movs	r3, #10
   2595c:	18fb      	adds	r3, r7, r3
   2595e:	2200      	movs	r2, #0
   25960:	801a      	strh	r2, [r3, #0]
   25962:	2300      	movs	r3, #0
   25964:	63fb      	str	r3, [r7, #60]	; 0x3c
   25966:	2300      	movs	r3, #0
   25968:	63bb      	str	r3, [r7, #56]	; 0x38
   2596a:	683b      	ldr	r3, [r7, #0]
   2596c:	781b      	ldrb	r3, [r3, #0]
   2596e:	2b01      	cmp	r3, #1
   25970:	d129      	bne.n	259c6 <_spi_set_config+0x15a>
   25972:	687b      	ldr	r3, [r7, #4]
   25974:	681b      	ldr	r3, [r3, #0]
   25976:	0018      	movs	r0, r3
   25978:	4b3c      	ldr	r3, [pc, #240]	; (25a6c <_spi_set_config+0x200>)
   2597a:	4798      	blx	r3
   2597c:	0003      	movs	r3, r0
   2597e:	62fb      	str	r3, [r7, #44]	; 0x2c
   25980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25982:	3314      	adds	r3, #20
   25984:	62bb      	str	r3, [r7, #40]	; 0x28
   25986:	6abb      	ldr	r3, [r7, #40]	; 0x28
   25988:	b2db      	uxtb	r3, r3
   2598a:	0018      	movs	r0, r3
   2598c:	4b38      	ldr	r3, [pc, #224]	; (25a70 <_spi_set_config+0x204>)
   2598e:	4798      	blx	r3
   25990:	0003      	movs	r3, r0
   25992:	627b      	str	r3, [r7, #36]	; 0x24
   25994:	683b      	ldr	r3, [r7, #0]
   25996:	699b      	ldr	r3, [r3, #24]
   25998:	2223      	movs	r2, #35	; 0x23
   2599a:	18bc      	adds	r4, r7, r2
   2599c:	220a      	movs	r2, #10
   2599e:	18ba      	adds	r2, r7, r2
   259a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   259a2:	0018      	movs	r0, r3
   259a4:	4b33      	ldr	r3, [pc, #204]	; (25a74 <_spi_set_config+0x208>)
   259a6:	4798      	blx	r3
   259a8:	0003      	movs	r3, r0
   259aa:	7023      	strb	r3, [r4, #0]
   259ac:	2323      	movs	r3, #35	; 0x23
   259ae:	18fb      	adds	r3, r7, r3
   259b0:	781b      	ldrb	r3, [r3, #0]
   259b2:	2b00      	cmp	r3, #0
   259b4:	d001      	beq.n	259ba <_spi_set_config+0x14e>
   259b6:	2317      	movs	r3, #23
   259b8:	e04e      	b.n	25a58 <_spi_set_config+0x1ec>
   259ba:	230a      	movs	r3, #10
   259bc:	18fb      	adds	r3, r7, r3
   259be:	881b      	ldrh	r3, [r3, #0]
   259c0:	b2da      	uxtb	r2, r3
   259c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   259c4:	731a      	strb	r2, [r3, #12]
   259c6:	683b      	ldr	r3, [r7, #0]
   259c8:	685b      	ldr	r3, [r3, #4]
   259ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259cc:	4313      	orrs	r3, r2
   259ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   259d0:	683b      	ldr	r3, [r7, #0]
   259d2:	689b      	ldr	r3, [r3, #8]
   259d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259d6:	4313      	orrs	r3, r2
   259d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   259da:	683b      	ldr	r3, [r7, #0]
   259dc:	68db      	ldr	r3, [r3, #12]
   259de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259e0:	4313      	orrs	r3, r2
   259e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   259e4:	683b      	ldr	r3, [r7, #0]
   259e6:	7c1b      	ldrb	r3, [r3, #16]
   259e8:	001a      	movs	r2, r3
   259ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   259ec:	4313      	orrs	r3, r2
   259ee:	63bb      	str	r3, [r7, #56]	; 0x38
   259f0:	683b      	ldr	r3, [r7, #0]
   259f2:	7c5b      	ldrb	r3, [r3, #17]
   259f4:	2b00      	cmp	r3, #0
   259f6:	d103      	bne.n	25a00 <_spi_set_config+0x194>
   259f8:	4b1f      	ldr	r3, [pc, #124]	; (25a78 <_spi_set_config+0x20c>)
   259fa:	4798      	blx	r3
   259fc:	1e03      	subs	r3, r0, #0
   259fe:	d003      	beq.n	25a08 <_spi_set_config+0x19c>
   25a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   25a02:	2280      	movs	r2, #128	; 0x80
   25a04:	4313      	orrs	r3, r2
   25a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   25a08:	683b      	ldr	r3, [r7, #0]
   25a0a:	7c9b      	ldrb	r3, [r3, #18]
   25a0c:	2b00      	cmp	r3, #0
   25a0e:	d004      	beq.n	25a1a <_spi_set_config+0x1ae>
   25a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a12:	2280      	movs	r2, #128	; 0x80
   25a14:	0292      	lsls	r2, r2, #10
   25a16:	4313      	orrs	r3, r2
   25a18:	63bb      	str	r3, [r7, #56]	; 0x38
   25a1a:	683b      	ldr	r3, [r7, #0]
   25a1c:	7cdb      	ldrb	r3, [r3, #19]
   25a1e:	2b00      	cmp	r3, #0
   25a20:	d004      	beq.n	25a2c <_spi_set_config+0x1c0>
   25a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a24:	2280      	movs	r2, #128	; 0x80
   25a26:	0092      	lsls	r2, r2, #2
   25a28:	4313      	orrs	r3, r2
   25a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   25a2c:	683b      	ldr	r3, [r7, #0]
   25a2e:	7d1b      	ldrb	r3, [r3, #20]
   25a30:	2b00      	cmp	r3, #0
   25a32:	d004      	beq.n	25a3e <_spi_set_config+0x1d2>
   25a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a36:	2280      	movs	r2, #128	; 0x80
   25a38:	0192      	lsls	r2, r2, #6
   25a3a:	4313      	orrs	r3, r2
   25a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   25a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a40:	681a      	ldr	r2, [r3, #0]
   25a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   25a44:	431a      	orrs	r2, r3
   25a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a48:	601a      	str	r2, [r3, #0]
   25a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a4c:	685a      	ldr	r2, [r3, #4]
   25a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a50:	431a      	orrs	r2, r3
   25a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a54:	605a      	str	r2, [r3, #4]
   25a56:	2300      	movs	r3, #0
   25a58:	0018      	movs	r0, r3
   25a5a:	46bd      	mov	sp, r7
   25a5c:	b013      	add	sp, #76	; 0x4c
   25a5e:	bd90      	pop	{r4, r7, pc}
   25a60:	000253a1 	.word	0x000253a1
   25a64:	00025041 	.word	0x00025041
   25a68:	00027ded 	.word	0x00027ded
   25a6c:	000251fd 	.word	0x000251fd
   25a70:	00027bb1 	.word	0x00027bb1
   25a74:	00024d77 	.word	0x00024d77
   25a78:	00025515 	.word	0x00025515

00025a7c <spi_init>:
   25a7c:	b590      	push	{r4, r7, lr}
   25a7e:	b08b      	sub	sp, #44	; 0x2c
   25a80:	af00      	add	r7, sp, #0
   25a82:	60f8      	str	r0, [r7, #12]
   25a84:	60b9      	str	r1, [r7, #8]
   25a86:	607a      	str	r2, [r7, #4]
   25a88:	68fb      	ldr	r3, [r7, #12]
   25a8a:	68ba      	ldr	r2, [r7, #8]
   25a8c:	601a      	str	r2, [r3, #0]
   25a8e:	68fb      	ldr	r3, [r7, #12]
   25a90:	681b      	ldr	r3, [r3, #0]
   25a92:	623b      	str	r3, [r7, #32]
   25a94:	6a3b      	ldr	r3, [r7, #32]
   25a96:	681b      	ldr	r3, [r3, #0]
   25a98:	2202      	movs	r2, #2
   25a9a:	4013      	ands	r3, r2
   25a9c:	d001      	beq.n	25aa2 <spi_init+0x26>
   25a9e:	231c      	movs	r3, #28
   25aa0:	e09c      	b.n	25bdc <spi_init+0x160>
   25aa2:	6a3b      	ldr	r3, [r7, #32]
   25aa4:	681b      	ldr	r3, [r3, #0]
   25aa6:	2201      	movs	r2, #1
   25aa8:	4013      	ands	r3, r2
   25aaa:	d001      	beq.n	25ab0 <spi_init+0x34>
   25aac:	2305      	movs	r3, #5
   25aae:	e095      	b.n	25bdc <spi_init+0x160>
   25ab0:	68fb      	ldr	r3, [r7, #12]
   25ab2:	681b      	ldr	r3, [r3, #0]
   25ab4:	0018      	movs	r0, r3
   25ab6:	4b4b      	ldr	r3, [pc, #300]	; (25be4 <spi_init+0x168>)
   25ab8:	4798      	blx	r3
   25aba:	0003      	movs	r3, r0
   25abc:	61fb      	str	r3, [r7, #28]
   25abe:	69fb      	ldr	r3, [r7, #28]
   25ac0:	3302      	adds	r3, #2
   25ac2:	61bb      	str	r3, [r7, #24]
   25ac4:	69fb      	ldr	r3, [r7, #28]
   25ac6:	3314      	adds	r3, #20
   25ac8:	617b      	str	r3, [r7, #20]
   25aca:	2201      	movs	r2, #1
   25acc:	69bb      	ldr	r3, [r7, #24]
   25ace:	409a      	lsls	r2, r3
   25ad0:	0013      	movs	r3, r2
   25ad2:	0019      	movs	r1, r3
   25ad4:	2002      	movs	r0, #2
   25ad6:	4b44      	ldr	r3, [pc, #272]	; (25be8 <spi_init+0x16c>)
   25ad8:	4798      	blx	r3
   25ada:	2310      	movs	r3, #16
   25adc:	18fb      	adds	r3, r7, r3
   25ade:	0018      	movs	r0, r3
   25ae0:	4b42      	ldr	r3, [pc, #264]	; (25bec <spi_init+0x170>)
   25ae2:	4798      	blx	r3
   25ae4:	687b      	ldr	r3, [r7, #4]
   25ae6:	2224      	movs	r2, #36	; 0x24
   25ae8:	5c9a      	ldrb	r2, [r3, r2]
   25aea:	2310      	movs	r3, #16
   25aec:	18fb      	adds	r3, r7, r3
   25aee:	701a      	strb	r2, [r3, #0]
   25af0:	697b      	ldr	r3, [r7, #20]
   25af2:	b2db      	uxtb	r3, r3
   25af4:	2210      	movs	r2, #16
   25af6:	18ba      	adds	r2, r7, r2
   25af8:	0011      	movs	r1, r2
   25afa:	0018      	movs	r0, r3
   25afc:	4b3c      	ldr	r3, [pc, #240]	; (25bf0 <spi_init+0x174>)
   25afe:	4798      	blx	r3
   25b00:	697b      	ldr	r3, [r7, #20]
   25b02:	b2db      	uxtb	r3, r3
   25b04:	0018      	movs	r0, r3
   25b06:	4b3b      	ldr	r3, [pc, #236]	; (25bf4 <spi_init+0x178>)
   25b08:	4798      	blx	r3
   25b0a:	687b      	ldr	r3, [r7, #4]
   25b0c:	2224      	movs	r2, #36	; 0x24
   25b0e:	5c9b      	ldrb	r3, [r3, r2]
   25b10:	2100      	movs	r1, #0
   25b12:	0018      	movs	r0, r3
   25b14:	4b38      	ldr	r3, [pc, #224]	; (25bf8 <spi_init+0x17c>)
   25b16:	4798      	blx	r3
   25b18:	687b      	ldr	r3, [r7, #4]
   25b1a:	781b      	ldrb	r3, [r3, #0]
   25b1c:	2b01      	cmp	r3, #1
   25b1e:	d105      	bne.n	25b2c <spi_init+0xb0>
   25b20:	6a3b      	ldr	r3, [r7, #32]
   25b22:	681b      	ldr	r3, [r3, #0]
   25b24:	220c      	movs	r2, #12
   25b26:	431a      	orrs	r2, r3
   25b28:	6a3b      	ldr	r3, [r7, #32]
   25b2a:	601a      	str	r2, [r3, #0]
   25b2c:	2327      	movs	r3, #39	; 0x27
   25b2e:	18fb      	adds	r3, r7, r3
   25b30:	2200      	movs	r2, #0
   25b32:	701a      	strb	r2, [r3, #0]
   25b34:	e010      	b.n	25b58 <spi_init+0xdc>
   25b36:	2327      	movs	r3, #39	; 0x27
   25b38:	18fb      	adds	r3, r7, r3
   25b3a:	781b      	ldrb	r3, [r3, #0]
   25b3c:	68fa      	ldr	r2, [r7, #12]
   25b3e:	3302      	adds	r3, #2
   25b40:	009b      	lsls	r3, r3, #2
   25b42:	18d3      	adds	r3, r2, r3
   25b44:	3304      	adds	r3, #4
   25b46:	2200      	movs	r2, #0
   25b48:	601a      	str	r2, [r3, #0]
   25b4a:	2327      	movs	r3, #39	; 0x27
   25b4c:	18fb      	adds	r3, r7, r3
   25b4e:	781a      	ldrb	r2, [r3, #0]
   25b50:	2327      	movs	r3, #39	; 0x27
   25b52:	18fb      	adds	r3, r7, r3
   25b54:	3201      	adds	r2, #1
   25b56:	701a      	strb	r2, [r3, #0]
   25b58:	2327      	movs	r3, #39	; 0x27
   25b5a:	18fb      	adds	r3, r7, r3
   25b5c:	781b      	ldrb	r3, [r3, #0]
   25b5e:	2b06      	cmp	r3, #6
   25b60:	d9e9      	bls.n	25b36 <spi_init+0xba>
   25b62:	68fb      	ldr	r3, [r7, #12]
   25b64:	2200      	movs	r2, #0
   25b66:	62da      	str	r2, [r3, #44]	; 0x2c
   25b68:	68fb      	ldr	r3, [r7, #12]
   25b6a:	2200      	movs	r2, #0
   25b6c:	629a      	str	r2, [r3, #40]	; 0x28
   25b6e:	68fb      	ldr	r3, [r7, #12]
   25b70:	2200      	movs	r2, #0
   25b72:	869a      	strh	r2, [r3, #52]	; 0x34
   25b74:	68fb      	ldr	r3, [r7, #12]
   25b76:	2200      	movs	r2, #0
   25b78:	861a      	strh	r2, [r3, #48]	; 0x30
   25b7a:	68fb      	ldr	r3, [r7, #12]
   25b7c:	2236      	movs	r2, #54	; 0x36
   25b7e:	2100      	movs	r1, #0
   25b80:	5499      	strb	r1, [r3, r2]
   25b82:	68fb      	ldr	r3, [r7, #12]
   25b84:	2237      	movs	r2, #55	; 0x37
   25b86:	2100      	movs	r1, #0
   25b88:	5499      	strb	r1, [r3, r2]
   25b8a:	68fb      	ldr	r3, [r7, #12]
   25b8c:	2238      	movs	r2, #56	; 0x38
   25b8e:	2100      	movs	r1, #0
   25b90:	5499      	strb	r1, [r3, r2]
   25b92:	68fb      	ldr	r3, [r7, #12]
   25b94:	2203      	movs	r2, #3
   25b96:	725a      	strb	r2, [r3, #9]
   25b98:	68fb      	ldr	r3, [r7, #12]
   25b9a:	2200      	movs	r2, #0
   25b9c:	711a      	strb	r2, [r3, #4]
   25b9e:	68fb      	ldr	r3, [r7, #12]
   25ba0:	681b      	ldr	r3, [r3, #0]
   25ba2:	2213      	movs	r2, #19
   25ba4:	18bc      	adds	r4, r7, r2
   25ba6:	0018      	movs	r0, r3
   25ba8:	4b0e      	ldr	r3, [pc, #56]	; (25be4 <spi_init+0x168>)
   25baa:	4798      	blx	r3
   25bac:	0003      	movs	r3, r0
   25bae:	7023      	strb	r3, [r4, #0]
   25bb0:	4a12      	ldr	r2, [pc, #72]	; (25bfc <spi_init+0x180>)
   25bb2:	2313      	movs	r3, #19
   25bb4:	18fb      	adds	r3, r7, r3
   25bb6:	781b      	ldrb	r3, [r3, #0]
   25bb8:	0011      	movs	r1, r2
   25bba:	0018      	movs	r0, r3
   25bbc:	4b10      	ldr	r3, [pc, #64]	; (25c00 <spi_init+0x184>)
   25bbe:	4798      	blx	r3
   25bc0:	2313      	movs	r3, #19
   25bc2:	18fb      	adds	r3, r7, r3
   25bc4:	781a      	ldrb	r2, [r3, #0]
   25bc6:	4b0f      	ldr	r3, [pc, #60]	; (25c04 <spi_init+0x188>)
   25bc8:	0092      	lsls	r2, r2, #2
   25bca:	68f9      	ldr	r1, [r7, #12]
   25bcc:	50d1      	str	r1, [r2, r3]
   25bce:	687a      	ldr	r2, [r7, #4]
   25bd0:	68fb      	ldr	r3, [r7, #12]
   25bd2:	0011      	movs	r1, r2
   25bd4:	0018      	movs	r0, r3
   25bd6:	4b0c      	ldr	r3, [pc, #48]	; (25c08 <spi_init+0x18c>)
   25bd8:	4798      	blx	r3
   25bda:	0003      	movs	r3, r0
   25bdc:	0018      	movs	r0, r3
   25bde:	46bd      	mov	sp, r7
   25be0:	b00b      	add	sp, #44	; 0x2c
   25be2:	bd90      	pop	{r4, r7, pc}
   25be4:	000251fd 	.word	0x000251fd
   25be8:	000254b9 	.word	0x000254b9
   25bec:	000254a1 	.word	0x000254a1
   25bf0:	00027a8d 	.word	0x00027a8d
   25bf4:	00027ad1 	.word	0x00027ad1
   25bf8:	00024fb5 	.word	0x00024fb5
   25bfc:	000260d5 	.word	0x000260d5
   25c00:	00025261 	.word	0x00025261
   25c04:	20005578 	.word	0x20005578
   25c08:	0002586d 	.word	0x0002586d

00025c0c <spi_read_buffer_wait>:
   25c0c:	b590      	push	{r4, r7, lr}
   25c0e:	b087      	sub	sp, #28
   25c10:	af00      	add	r7, sp, #0
   25c12:	60f8      	str	r0, [r7, #12]
   25c14:	60b9      	str	r1, [r7, #8]
   25c16:	0019      	movs	r1, r3
   25c18:	1dbb      	adds	r3, r7, #6
   25c1a:	801a      	strh	r2, [r3, #0]
   25c1c:	1d3b      	adds	r3, r7, #4
   25c1e:	1c0a      	adds	r2, r1, #0
   25c20:	801a      	strh	r2, [r3, #0]
   25c22:	68fb      	ldr	r3, [r7, #12]
   25c24:	2238      	movs	r2, #56	; 0x38
   25c26:	5c9b      	ldrb	r3, [r3, r2]
   25c28:	b2db      	uxtb	r3, r3
   25c2a:	2b05      	cmp	r3, #5
   25c2c:	d101      	bne.n	25c32 <spi_read_buffer_wait+0x26>
   25c2e:	2305      	movs	r3, #5
   25c30:	e07a      	b.n	25d28 <spi_read_buffer_wait+0x11c>
   25c32:	1dbb      	adds	r3, r7, #6
   25c34:	881b      	ldrh	r3, [r3, #0]
   25c36:	2b00      	cmp	r3, #0
   25c38:	d101      	bne.n	25c3e <spi_read_buffer_wait+0x32>
   25c3a:	2317      	movs	r3, #23
   25c3c:	e074      	b.n	25d28 <spi_read_buffer_wait+0x11c>
   25c3e:	68fb      	ldr	r3, [r7, #12]
   25c40:	79db      	ldrb	r3, [r3, #7]
   25c42:	2201      	movs	r2, #1
   25c44:	4053      	eors	r3, r2
   25c46:	b2db      	uxtb	r3, r3
   25c48:	2b00      	cmp	r3, #0
   25c4a:	d001      	beq.n	25c50 <spi_read_buffer_wait+0x44>
   25c4c:	231c      	movs	r3, #28
   25c4e:	e06b      	b.n	25d28 <spi_read_buffer_wait+0x11c>
   25c50:	2316      	movs	r3, #22
   25c52:	18fb      	adds	r3, r7, r3
   25c54:	2200      	movs	r2, #0
   25c56:	801a      	strh	r2, [r3, #0]
   25c58:	e05e      	b.n	25d18 <spi_read_buffer_wait+0x10c>
   25c5a:	68fb      	ldr	r3, [r7, #12]
   25c5c:	795b      	ldrb	r3, [r3, #5]
   25c5e:	2b01      	cmp	r3, #1
   25c60:	d112      	bne.n	25c88 <spi_read_buffer_wait+0x7c>
   25c62:	46c0      	nop			; (mov r8, r8)
   25c64:	68fb      	ldr	r3, [r7, #12]
   25c66:	0018      	movs	r0, r3
   25c68:	4b31      	ldr	r3, [pc, #196]	; (25d30 <spi_read_buffer_wait+0x124>)
   25c6a:	4798      	blx	r3
   25c6c:	0003      	movs	r3, r0
   25c6e:	001a      	movs	r2, r3
   25c70:	2301      	movs	r3, #1
   25c72:	4053      	eors	r3, r2
   25c74:	b2db      	uxtb	r3, r3
   25c76:	2b00      	cmp	r3, #0
   25c78:	d1f4      	bne.n	25c64 <spi_read_buffer_wait+0x58>
   25c7a:	1d3b      	adds	r3, r7, #4
   25c7c:	881a      	ldrh	r2, [r3, #0]
   25c7e:	68fb      	ldr	r3, [r7, #12]
   25c80:	0011      	movs	r1, r2
   25c82:	0018      	movs	r0, r3
   25c84:	4b2b      	ldr	r3, [pc, #172]	; (25d34 <spi_read_buffer_wait+0x128>)
   25c86:	4798      	blx	r3
   25c88:	46c0      	nop			; (mov r8, r8)
   25c8a:	68fb      	ldr	r3, [r7, #12]
   25c8c:	0018      	movs	r0, r3
   25c8e:	4b2a      	ldr	r3, [pc, #168]	; (25d38 <spi_read_buffer_wait+0x12c>)
   25c90:	4798      	blx	r3
   25c92:	0003      	movs	r3, r0
   25c94:	001a      	movs	r2, r3
   25c96:	2301      	movs	r3, #1
   25c98:	4053      	eors	r3, r2
   25c9a:	b2db      	uxtb	r3, r3
   25c9c:	2b00      	cmp	r3, #0
   25c9e:	d1f4      	bne.n	25c8a <spi_read_buffer_wait+0x7e>
   25ca0:	2312      	movs	r3, #18
   25ca2:	18fb      	adds	r3, r7, r3
   25ca4:	2200      	movs	r2, #0
   25ca6:	801a      	strh	r2, [r3, #0]
   25ca8:	2315      	movs	r3, #21
   25caa:	18fc      	adds	r4, r7, r3
   25cac:	2312      	movs	r3, #18
   25cae:	18fa      	adds	r2, r7, r3
   25cb0:	68fb      	ldr	r3, [r7, #12]
   25cb2:	0011      	movs	r1, r2
   25cb4:	0018      	movs	r0, r3
   25cb6:	4b21      	ldr	r3, [pc, #132]	; (25d3c <spi_read_buffer_wait+0x130>)
   25cb8:	4798      	blx	r3
   25cba:	0003      	movs	r3, r0
   25cbc:	7023      	strb	r3, [r4, #0]
   25cbe:	2315      	movs	r3, #21
   25cc0:	18fb      	adds	r3, r7, r3
   25cc2:	781b      	ldrb	r3, [r3, #0]
   25cc4:	2b00      	cmp	r3, #0
   25cc6:	d003      	beq.n	25cd0 <spi_read_buffer_wait+0xc4>
   25cc8:	2315      	movs	r3, #21
   25cca:	18fb      	adds	r3, r7, r3
   25ccc:	781b      	ldrb	r3, [r3, #0]
   25cce:	e02b      	b.n	25d28 <spi_read_buffer_wait+0x11c>
   25cd0:	2316      	movs	r3, #22
   25cd2:	18fb      	adds	r3, r7, r3
   25cd4:	881b      	ldrh	r3, [r3, #0]
   25cd6:	2216      	movs	r2, #22
   25cd8:	18ba      	adds	r2, r7, r2
   25cda:	1c59      	adds	r1, r3, #1
   25cdc:	8011      	strh	r1, [r2, #0]
   25cde:	001a      	movs	r2, r3
   25ce0:	68bb      	ldr	r3, [r7, #8]
   25ce2:	189b      	adds	r3, r3, r2
   25ce4:	2212      	movs	r2, #18
   25ce6:	18ba      	adds	r2, r7, r2
   25ce8:	8812      	ldrh	r2, [r2, #0]
   25cea:	b2d2      	uxtb	r2, r2
   25cec:	701a      	strb	r2, [r3, #0]
   25cee:	68fb      	ldr	r3, [r7, #12]
   25cf0:	799b      	ldrb	r3, [r3, #6]
   25cf2:	2b01      	cmp	r3, #1
   25cf4:	d110      	bne.n	25d18 <spi_read_buffer_wait+0x10c>
   25cf6:	2316      	movs	r3, #22
   25cf8:	18fb      	adds	r3, r7, r3
   25cfa:	881b      	ldrh	r3, [r3, #0]
   25cfc:	2216      	movs	r2, #22
   25cfe:	18ba      	adds	r2, r7, r2
   25d00:	1c59      	adds	r1, r3, #1
   25d02:	8011      	strh	r1, [r2, #0]
   25d04:	001a      	movs	r2, r3
   25d06:	68bb      	ldr	r3, [r7, #8]
   25d08:	189b      	adds	r3, r3, r2
   25d0a:	2212      	movs	r2, #18
   25d0c:	18ba      	adds	r2, r7, r2
   25d0e:	8812      	ldrh	r2, [r2, #0]
   25d10:	0a12      	lsrs	r2, r2, #8
   25d12:	b292      	uxth	r2, r2
   25d14:	b2d2      	uxtb	r2, r2
   25d16:	701a      	strb	r2, [r3, #0]
   25d18:	1dbb      	adds	r3, r7, #6
   25d1a:	881b      	ldrh	r3, [r3, #0]
   25d1c:	1dba      	adds	r2, r7, #6
   25d1e:	1e59      	subs	r1, r3, #1
   25d20:	8011      	strh	r1, [r2, #0]
   25d22:	2b00      	cmp	r3, #0
   25d24:	d199      	bne.n	25c5a <spi_read_buffer_wait+0x4e>
   25d26:	2300      	movs	r3, #0
   25d28:	0018      	movs	r0, r3
   25d2a:	46bd      	mov	sp, r7
   25d2c:	b007      	add	sp, #28
   25d2e:	bd90      	pop	{r4, r7, pc}
   25d30:	00025685 	.word	0x00025685
   25d34:	000256d5 	.word	0x000256d5
   25d38:	000256ad 	.word	0x000256ad
   25d3c:	0002571d 	.word	0x0002571d

00025d40 <spi_select_slave>:
   25d40:	b580      	push	{r7, lr}
   25d42:	b086      	sub	sp, #24
   25d44:	af00      	add	r7, sp, #0
   25d46:	60f8      	str	r0, [r7, #12]
   25d48:	60b9      	str	r1, [r7, #8]
   25d4a:	1dfb      	adds	r3, r7, #7
   25d4c:	701a      	strb	r2, [r3, #0]
   25d4e:	68fb      	ldr	r3, [r7, #12]
   25d50:	795b      	ldrb	r3, [r3, #5]
   25d52:	2b01      	cmp	r3, #1
   25d54:	d001      	beq.n	25d5a <spi_select_slave+0x1a>
   25d56:	2315      	movs	r3, #21
   25d58:	e05c      	b.n	25e14 <spi_select_slave+0xd4>
   25d5a:	68fb      	ldr	r3, [r7, #12]
   25d5c:	7a1b      	ldrb	r3, [r3, #8]
   25d5e:	2201      	movs	r2, #1
   25d60:	4053      	eors	r3, r2
   25d62:	b2db      	uxtb	r3, r3
   25d64:	2b00      	cmp	r3, #0
   25d66:	d054      	beq.n	25e12 <spi_select_slave+0xd2>
   25d68:	1dfb      	adds	r3, r7, #7
   25d6a:	781b      	ldrb	r3, [r3, #0]
   25d6c:	2b00      	cmp	r3, #0
   25d6e:	d04a      	beq.n	25e06 <spi_select_slave+0xc6>
   25d70:	68bb      	ldr	r3, [r7, #8]
   25d72:	785b      	ldrb	r3, [r3, #1]
   25d74:	2b00      	cmp	r3, #0
   25d76:	d03f      	beq.n	25df8 <spi_select_slave+0xb8>
   25d78:	68fb      	ldr	r3, [r7, #12]
   25d7a:	0018      	movs	r0, r3
   25d7c:	4b27      	ldr	r3, [pc, #156]	; (25e1c <spi_select_slave+0xdc>)
   25d7e:	4798      	blx	r3
   25d80:	0003      	movs	r3, r0
   25d82:	001a      	movs	r2, r3
   25d84:	2301      	movs	r3, #1
   25d86:	4053      	eors	r3, r2
   25d88:	b2db      	uxtb	r3, r3
   25d8a:	2b00      	cmp	r3, #0
   25d8c:	d007      	beq.n	25d9e <spi_select_slave+0x5e>
   25d8e:	68bb      	ldr	r3, [r7, #8]
   25d90:	781b      	ldrb	r3, [r3, #0]
   25d92:	2101      	movs	r1, #1
   25d94:	0018      	movs	r0, r3
   25d96:	4b22      	ldr	r3, [pc, #136]	; (25e20 <spi_select_slave+0xe0>)
   25d98:	4798      	blx	r3
   25d9a:	2305      	movs	r3, #5
   25d9c:	e03a      	b.n	25e14 <spi_select_slave+0xd4>
   25d9e:	68bb      	ldr	r3, [r7, #8]
   25da0:	781b      	ldrb	r3, [r3, #0]
   25da2:	2100      	movs	r1, #0
   25da4:	0018      	movs	r0, r3
   25da6:	4b1e      	ldr	r3, [pc, #120]	; (25e20 <spi_select_slave+0xe0>)
   25da8:	4798      	blx	r3
   25daa:	68bb      	ldr	r3, [r7, #8]
   25dac:	789b      	ldrb	r3, [r3, #2]
   25dae:	b29a      	uxth	r2, r3
   25db0:	68fb      	ldr	r3, [r7, #12]
   25db2:	0011      	movs	r1, r2
   25db4:	0018      	movs	r0, r3
   25db6:	4b1b      	ldr	r3, [pc, #108]	; (25e24 <spi_select_slave+0xe4>)
   25db8:	4798      	blx	r3
   25dba:	68fb      	ldr	r3, [r7, #12]
   25dbc:	79db      	ldrb	r3, [r3, #7]
   25dbe:	2201      	movs	r2, #1
   25dc0:	4053      	eors	r3, r2
   25dc2:	b2db      	uxtb	r3, r3
   25dc4:	2b00      	cmp	r3, #0
   25dc6:	d024      	beq.n	25e12 <spi_select_slave+0xd2>
   25dc8:	46c0      	nop			; (mov r8, r8)
   25dca:	68fb      	ldr	r3, [r7, #12]
   25dcc:	0018      	movs	r0, r3
   25dce:	4b16      	ldr	r3, [pc, #88]	; (25e28 <spi_select_slave+0xe8>)
   25dd0:	4798      	blx	r3
   25dd2:	0003      	movs	r3, r0
   25dd4:	001a      	movs	r2, r3
   25dd6:	2301      	movs	r3, #1
   25dd8:	4053      	eors	r3, r2
   25dda:	b2db      	uxtb	r3, r3
   25ddc:	2b00      	cmp	r3, #0
   25dde:	d1f4      	bne.n	25dca <spi_select_slave+0x8a>
   25de0:	2316      	movs	r3, #22
   25de2:	18fb      	adds	r3, r7, r3
   25de4:	2200      	movs	r2, #0
   25de6:	801a      	strh	r2, [r3, #0]
   25de8:	2316      	movs	r3, #22
   25dea:	18fa      	adds	r2, r7, r3
   25dec:	68fb      	ldr	r3, [r7, #12]
   25dee:	0011      	movs	r1, r2
   25df0:	0018      	movs	r0, r3
   25df2:	4b0e      	ldr	r3, [pc, #56]	; (25e2c <spi_select_slave+0xec>)
   25df4:	4798      	blx	r3
   25df6:	e00c      	b.n	25e12 <spi_select_slave+0xd2>
   25df8:	68bb      	ldr	r3, [r7, #8]
   25dfa:	781b      	ldrb	r3, [r3, #0]
   25dfc:	2100      	movs	r1, #0
   25dfe:	0018      	movs	r0, r3
   25e00:	4b07      	ldr	r3, [pc, #28]	; (25e20 <spi_select_slave+0xe0>)
   25e02:	4798      	blx	r3
   25e04:	e005      	b.n	25e12 <spi_select_slave+0xd2>
   25e06:	68bb      	ldr	r3, [r7, #8]
   25e08:	781b      	ldrb	r3, [r3, #0]
   25e0a:	2101      	movs	r1, #1
   25e0c:	0018      	movs	r0, r3
   25e0e:	4b04      	ldr	r3, [pc, #16]	; (25e20 <spi_select_slave+0xe0>)
   25e10:	4798      	blx	r3
   25e12:	2300      	movs	r3, #0
   25e14:	0018      	movs	r0, r3
   25e16:	46bd      	mov	sp, r7
   25e18:	b006      	add	sp, #24
   25e1a:	bd80      	pop	{r7, pc}
   25e1c:	00025685 	.word	0x00025685
   25e20:	0002544d 	.word	0x0002544d
   25e24:	000256d5 	.word	0x000256d5
   25e28:	000256ad 	.word	0x000256ad
   25e2c:	0002571d 	.word	0x0002571d

00025e30 <spi_write_buffer_wait>:
   25e30:	b580      	push	{r7, lr}
   25e32:	b086      	sub	sp, #24
   25e34:	af00      	add	r7, sp, #0
   25e36:	60f8      	str	r0, [r7, #12]
   25e38:	60b9      	str	r1, [r7, #8]
   25e3a:	1dbb      	adds	r3, r7, #6
   25e3c:	801a      	strh	r2, [r3, #0]
   25e3e:	68fb      	ldr	r3, [r7, #12]
   25e40:	2238      	movs	r2, #56	; 0x38
   25e42:	5c9b      	ldrb	r3, [r3, r2]
   25e44:	b2db      	uxtb	r3, r3
   25e46:	2b05      	cmp	r3, #5
   25e48:	d101      	bne.n	25e4e <spi_write_buffer_wait+0x1e>
   25e4a:	2305      	movs	r3, #5
   25e4c:	e087      	b.n	25f5e <spi_write_buffer_wait+0x12e>
   25e4e:	1dbb      	adds	r3, r7, #6
   25e50:	881b      	ldrh	r3, [r3, #0]
   25e52:	2b00      	cmp	r3, #0
   25e54:	d101      	bne.n	25e5a <spi_write_buffer_wait+0x2a>
   25e56:	2317      	movs	r3, #23
   25e58:	e081      	b.n	25f5e <spi_write_buffer_wait+0x12e>
   25e5a:	2316      	movs	r3, #22
   25e5c:	18fb      	adds	r3, r7, r3
   25e5e:	2200      	movs	r2, #0
   25e60:	801a      	strh	r2, [r3, #0]
   25e62:	2314      	movs	r3, #20
   25e64:	18fb      	adds	r3, r7, r3
   25e66:	1dba      	adds	r2, r7, #6
   25e68:	8812      	ldrh	r2, [r2, #0]
   25e6a:	801a      	strh	r2, [r3, #0]
   25e6c:	e05f      	b.n	25f2e <spi_write_buffer_wait+0xfe>
   25e6e:	46c0      	nop			; (mov r8, r8)
   25e70:	68fb      	ldr	r3, [r7, #12]
   25e72:	0018      	movs	r0, r3
   25e74:	4b3c      	ldr	r3, [pc, #240]	; (25f68 <spi_write_buffer_wait+0x138>)
   25e76:	4798      	blx	r3
   25e78:	0003      	movs	r3, r0
   25e7a:	001a      	movs	r2, r3
   25e7c:	2301      	movs	r3, #1
   25e7e:	4053      	eors	r3, r2
   25e80:	b2db      	uxtb	r3, r3
   25e82:	2b00      	cmp	r3, #0
   25e84:	d1f4      	bne.n	25e70 <spi_write_buffer_wait+0x40>
   25e86:	2316      	movs	r3, #22
   25e88:	18fb      	adds	r3, r7, r3
   25e8a:	881b      	ldrh	r3, [r3, #0]
   25e8c:	2216      	movs	r2, #22
   25e8e:	18ba      	adds	r2, r7, r2
   25e90:	1c59      	adds	r1, r3, #1
   25e92:	8011      	strh	r1, [r2, #0]
   25e94:	001a      	movs	r2, r3
   25e96:	68bb      	ldr	r3, [r7, #8]
   25e98:	189b      	adds	r3, r3, r2
   25e9a:	781a      	ldrb	r2, [r3, #0]
   25e9c:	2312      	movs	r3, #18
   25e9e:	18fb      	adds	r3, r7, r3
   25ea0:	801a      	strh	r2, [r3, #0]
   25ea2:	68fb      	ldr	r3, [r7, #12]
   25ea4:	799b      	ldrb	r3, [r3, #6]
   25ea6:	2b01      	cmp	r3, #1
   25ea8:	d115      	bne.n	25ed6 <spi_write_buffer_wait+0xa6>
   25eaa:	2316      	movs	r3, #22
   25eac:	18fb      	adds	r3, r7, r3
   25eae:	881b      	ldrh	r3, [r3, #0]
   25eb0:	2216      	movs	r2, #22
   25eb2:	18ba      	adds	r2, r7, r2
   25eb4:	1c59      	adds	r1, r3, #1
   25eb6:	8011      	strh	r1, [r2, #0]
   25eb8:	001a      	movs	r2, r3
   25eba:	68bb      	ldr	r3, [r7, #8]
   25ebc:	189b      	adds	r3, r3, r2
   25ebe:	781b      	ldrb	r3, [r3, #0]
   25ec0:	021b      	lsls	r3, r3, #8
   25ec2:	b21a      	sxth	r2, r3
   25ec4:	2312      	movs	r3, #18
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	2100      	movs	r1, #0
   25eca:	5e5b      	ldrsh	r3, [r3, r1]
   25ecc:	4313      	orrs	r3, r2
   25ece:	b21a      	sxth	r2, r3
   25ed0:	2312      	movs	r3, #18
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	801a      	strh	r2, [r3, #0]
   25ed6:	2312      	movs	r3, #18
   25ed8:	18fb      	adds	r3, r7, r3
   25eda:	881a      	ldrh	r2, [r3, #0]
   25edc:	68fb      	ldr	r3, [r7, #12]
   25ede:	0011      	movs	r1, r2
   25ee0:	0018      	movs	r0, r3
   25ee2:	4b22      	ldr	r3, [pc, #136]	; (25f6c <spi_write_buffer_wait+0x13c>)
   25ee4:	4798      	blx	r3
   25ee6:	68fb      	ldr	r3, [r7, #12]
   25ee8:	79db      	ldrb	r3, [r3, #7]
   25eea:	2214      	movs	r2, #20
   25eec:	18ba      	adds	r2, r7, r2
   25eee:	2114      	movs	r1, #20
   25ef0:	1879      	adds	r1, r7, r1
   25ef2:	8809      	ldrh	r1, [r1, #0]
   25ef4:	8011      	strh	r1, [r2, #0]
   25ef6:	2b00      	cmp	r3, #0
   25ef8:	d019      	beq.n	25f2e <spi_write_buffer_wait+0xfe>
   25efa:	46c0      	nop			; (mov r8, r8)
   25efc:	68fb      	ldr	r3, [r7, #12]
   25efe:	0018      	movs	r0, r3
   25f00:	4b1b      	ldr	r3, [pc, #108]	; (25f70 <spi_write_buffer_wait+0x140>)
   25f02:	4798      	blx	r3
   25f04:	0003      	movs	r3, r0
   25f06:	001a      	movs	r2, r3
   25f08:	2301      	movs	r3, #1
   25f0a:	4053      	eors	r3, r2
   25f0c:	b2db      	uxtb	r3, r3
   25f0e:	2b00      	cmp	r3, #0
   25f10:	d1f4      	bne.n	25efc <spi_write_buffer_wait+0xcc>
   25f12:	2310      	movs	r3, #16
   25f14:	18fa      	adds	r2, r7, r3
   25f16:	68fb      	ldr	r3, [r7, #12]
   25f18:	0011      	movs	r1, r2
   25f1a:	0018      	movs	r0, r3
   25f1c:	4b15      	ldr	r3, [pc, #84]	; (25f74 <spi_write_buffer_wait+0x144>)
   25f1e:	4798      	blx	r3
   25f20:	2314      	movs	r3, #20
   25f22:	18fb      	adds	r3, r7, r3
   25f24:	881a      	ldrh	r2, [r3, #0]
   25f26:	2314      	movs	r3, #20
   25f28:	18fb      	adds	r3, r7, r3
   25f2a:	3a01      	subs	r2, #1
   25f2c:	801a      	strh	r2, [r3, #0]
   25f2e:	1dbb      	adds	r3, r7, #6
   25f30:	881b      	ldrh	r3, [r3, #0]
   25f32:	1dba      	adds	r2, r7, #6
   25f34:	1e59      	subs	r1, r3, #1
   25f36:	8011      	strh	r1, [r2, #0]
   25f38:	2b00      	cmp	r3, #0
   25f3a:	d198      	bne.n	25e6e <spi_write_buffer_wait+0x3e>
   25f3c:	68fb      	ldr	r3, [r7, #12]
   25f3e:	795b      	ldrb	r3, [r3, #5]
   25f40:	2b01      	cmp	r3, #1
   25f42:	d10b      	bne.n	25f5c <spi_write_buffer_wait+0x12c>
   25f44:	46c0      	nop			; (mov r8, r8)
   25f46:	68fb      	ldr	r3, [r7, #12]
   25f48:	0018      	movs	r0, r3
   25f4a:	4b0b      	ldr	r3, [pc, #44]	; (25f78 <spi_write_buffer_wait+0x148>)
   25f4c:	4798      	blx	r3
   25f4e:	0003      	movs	r3, r0
   25f50:	001a      	movs	r2, r3
   25f52:	2301      	movs	r3, #1
   25f54:	4053      	eors	r3, r2
   25f56:	b2db      	uxtb	r3, r3
   25f58:	2b00      	cmp	r3, #0
   25f5a:	d1f4      	bne.n	25f46 <spi_write_buffer_wait+0x116>
   25f5c:	2300      	movs	r3, #0
   25f5e:	0018      	movs	r0, r3
   25f60:	46bd      	mov	sp, r7
   25f62:	b006      	add	sp, #24
   25f64:	bd80      	pop	{r7, pc}
   25f66:	46c0      	nop			; (mov r8, r8)
   25f68:	00025685 	.word	0x00025685
   25f6c:	000256d5 	.word	0x000256d5
   25f70:	000256ad 	.word	0x000256ad
   25f74:	0002571d 	.word	0x0002571d
   25f78:	0002565d 	.word	0x0002565d

00025f7c <_spi_write>:
   25f7c:	b580      	push	{r7, lr}
   25f7e:	b084      	sub	sp, #16
   25f80:	af00      	add	r7, sp, #0
   25f82:	6078      	str	r0, [r7, #4]
   25f84:	687b      	ldr	r3, [r7, #4]
   25f86:	681b      	ldr	r3, [r3, #0]
   25f88:	60bb      	str	r3, [r7, #8]
   25f8a:	687b      	ldr	r3, [r7, #4]
   25f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25f8e:	781b      	ldrb	r3, [r3, #0]
   25f90:	b2da      	uxtb	r2, r3
   25f92:	230e      	movs	r3, #14
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	801a      	strh	r2, [r3, #0]
   25f98:	687b      	ldr	r3, [r7, #4]
   25f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25f9c:	1c5a      	adds	r2, r3, #1
   25f9e:	687b      	ldr	r3, [r7, #4]
   25fa0:	62da      	str	r2, [r3, #44]	; 0x2c
   25fa2:	687b      	ldr	r3, [r7, #4]
   25fa4:	799b      	ldrb	r3, [r3, #6]
   25fa6:	2b01      	cmp	r3, #1
   25fa8:	d113      	bne.n	25fd2 <_spi_write+0x56>
   25faa:	687b      	ldr	r3, [r7, #4]
   25fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	b2db      	uxtb	r3, r3
   25fb2:	021b      	lsls	r3, r3, #8
   25fb4:	b21a      	sxth	r2, r3
   25fb6:	230e      	movs	r3, #14
   25fb8:	18fb      	adds	r3, r7, r3
   25fba:	2100      	movs	r1, #0
   25fbc:	5e5b      	ldrsh	r3, [r3, r1]
   25fbe:	4313      	orrs	r3, r2
   25fc0:	b21a      	sxth	r2, r3
   25fc2:	230e      	movs	r3, #14
   25fc4:	18fb      	adds	r3, r7, r3
   25fc6:	801a      	strh	r2, [r3, #0]
   25fc8:	687b      	ldr	r3, [r7, #4]
   25fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25fcc:	1c5a      	adds	r2, r3, #1
   25fce:	687b      	ldr	r3, [r7, #4]
   25fd0:	62da      	str	r2, [r3, #44]	; 0x2c
   25fd2:	230e      	movs	r3, #14
   25fd4:	18fb      	adds	r3, r7, r3
   25fd6:	881b      	ldrh	r3, [r3, #0]
   25fd8:	05db      	lsls	r3, r3, #23
   25fda:	0dda      	lsrs	r2, r3, #23
   25fdc:	68bb      	ldr	r3, [r7, #8]
   25fde:	629a      	str	r2, [r3, #40]	; 0x28
   25fe0:	687b      	ldr	r3, [r7, #4]
   25fe2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   25fe4:	b29b      	uxth	r3, r3
   25fe6:	3b01      	subs	r3, #1
   25fe8:	b29a      	uxth	r2, r3
   25fea:	687b      	ldr	r3, [r7, #4]
   25fec:	869a      	strh	r2, [r3, #52]	; 0x34
   25fee:	46c0      	nop			; (mov r8, r8)
   25ff0:	46bd      	mov	sp, r7
   25ff2:	b004      	add	sp, #16
   25ff4:	bd80      	pop	{r7, pc}
	...

00025ff8 <_spi_write_dummy>:
   25ff8:	b580      	push	{r7, lr}
   25ffa:	b084      	sub	sp, #16
   25ffc:	af00      	add	r7, sp, #0
   25ffe:	6078      	str	r0, [r7, #4]
   26000:	687b      	ldr	r3, [r7, #4]
   26002:	681b      	ldr	r3, [r3, #0]
   26004:	60fb      	str	r3, [r7, #12]
   26006:	4b08      	ldr	r3, [pc, #32]	; (26028 <_spi_write_dummy+0x30>)
   26008:	881b      	ldrh	r3, [r3, #0]
   2600a:	001a      	movs	r2, r3
   2600c:	68fb      	ldr	r3, [r7, #12]
   2600e:	629a      	str	r2, [r3, #40]	; 0x28
   26010:	687b      	ldr	r3, [r7, #4]
   26012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26014:	b29b      	uxth	r3, r3
   26016:	3b01      	subs	r3, #1
   26018:	b29a      	uxth	r2, r3
   2601a:	687b      	ldr	r3, [r7, #4]
   2601c:	865a      	strh	r2, [r3, #50]	; 0x32
   2601e:	46c0      	nop			; (mov r8, r8)
   26020:	46bd      	mov	sp, r7
   26022:	b004      	add	sp, #16
   26024:	bd80      	pop	{r7, pc}
   26026:	46c0      	nop			; (mov r8, r8)
   26028:	20005590 	.word	0x20005590

0002602c <_spi_read_dummy>:
   2602c:	b580      	push	{r7, lr}
   2602e:	b084      	sub	sp, #16
   26030:	af00      	add	r7, sp, #0
   26032:	6078      	str	r0, [r7, #4]
   26034:	687b      	ldr	r3, [r7, #4]
   26036:	681b      	ldr	r3, [r3, #0]
   26038:	60fb      	str	r3, [r7, #12]
   2603a:	230a      	movs	r3, #10
   2603c:	18fb      	adds	r3, r7, r3
   2603e:	2200      	movs	r2, #0
   26040:	801a      	strh	r2, [r3, #0]
   26042:	68fb      	ldr	r3, [r7, #12]
   26044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26046:	230a      	movs	r3, #10
   26048:	18fb      	adds	r3, r7, r3
   2604a:	801a      	strh	r2, [r3, #0]
   2604c:	687b      	ldr	r3, [r7, #4]
   2604e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26050:	b29b      	uxth	r3, r3
   26052:	3b01      	subs	r3, #1
   26054:	b29a      	uxth	r2, r3
   26056:	687b      	ldr	r3, [r7, #4]
   26058:	865a      	strh	r2, [r3, #50]	; 0x32
   2605a:	46c0      	nop			; (mov r8, r8)
   2605c:	46bd      	mov	sp, r7
   2605e:	b004      	add	sp, #16
   26060:	bd80      	pop	{r7, pc}

00026062 <_spi_read>:
   26062:	b580      	push	{r7, lr}
   26064:	b084      	sub	sp, #16
   26066:	af00      	add	r7, sp, #0
   26068:	6078      	str	r0, [r7, #4]
   2606a:	687b      	ldr	r3, [r7, #4]
   2606c:	681b      	ldr	r3, [r3, #0]
   2606e:	60fb      	str	r3, [r7, #12]
   26070:	68fb      	ldr	r3, [r7, #12]
   26072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26074:	b29a      	uxth	r2, r3
   26076:	230a      	movs	r3, #10
   26078:	18fb      	adds	r3, r7, r3
   2607a:	05d2      	lsls	r2, r2, #23
   2607c:	0dd2      	lsrs	r2, r2, #23
   2607e:	801a      	strh	r2, [r3, #0]
   26080:	687b      	ldr	r3, [r7, #4]
   26082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26084:	220a      	movs	r2, #10
   26086:	18ba      	adds	r2, r7, r2
   26088:	8812      	ldrh	r2, [r2, #0]
   2608a:	b2d2      	uxtb	r2, r2
   2608c:	701a      	strb	r2, [r3, #0]
   2608e:	687b      	ldr	r3, [r7, #4]
   26090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26092:	1c5a      	adds	r2, r3, #1
   26094:	687b      	ldr	r3, [r7, #4]
   26096:	629a      	str	r2, [r3, #40]	; 0x28
   26098:	687b      	ldr	r3, [r7, #4]
   2609a:	799b      	ldrb	r3, [r3, #6]
   2609c:	2b01      	cmp	r3, #1
   2609e:	d10d      	bne.n	260bc <_spi_read+0x5a>
   260a0:	687b      	ldr	r3, [r7, #4]
   260a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   260a4:	220a      	movs	r2, #10
   260a6:	18ba      	adds	r2, r7, r2
   260a8:	8812      	ldrh	r2, [r2, #0]
   260aa:	0a12      	lsrs	r2, r2, #8
   260ac:	b292      	uxth	r2, r2
   260ae:	b2d2      	uxtb	r2, r2
   260b0:	701a      	strb	r2, [r3, #0]
   260b2:	687b      	ldr	r3, [r7, #4]
   260b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   260b6:	1c5a      	adds	r2, r3, #1
   260b8:	687b      	ldr	r3, [r7, #4]
   260ba:	629a      	str	r2, [r3, #40]	; 0x28
   260bc:	687b      	ldr	r3, [r7, #4]
   260be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   260c0:	b29b      	uxth	r3, r3
   260c2:	3b01      	subs	r3, #1
   260c4:	b29a      	uxth	r2, r3
   260c6:	687b      	ldr	r3, [r7, #4]
   260c8:	861a      	strh	r2, [r3, #48]	; 0x30
   260ca:	46c0      	nop			; (mov r8, r8)
   260cc:	46bd      	mov	sp, r7
   260ce:	b004      	add	sp, #16
   260d0:	bd80      	pop	{r7, pc}
	...

000260d4 <_spi_interrupt_handler>:
   260d4:	b580      	push	{r7, lr}
   260d6:	b086      	sub	sp, #24
   260d8:	af00      	add	r7, sp, #0
   260da:	0002      	movs	r2, r0
   260dc:	1dfb      	adds	r3, r7, #7
   260de:	701a      	strb	r2, [r3, #0]
   260e0:	1dfb      	adds	r3, r7, #7
   260e2:	781a      	ldrb	r2, [r3, #0]
   260e4:	4b96      	ldr	r3, [pc, #600]	; (26340 <_spi_interrupt_handler+0x26c>)
   260e6:	0092      	lsls	r2, r2, #2
   260e8:	58d3      	ldr	r3, [r2, r3]
   260ea:	617b      	str	r3, [r7, #20]
   260ec:	697b      	ldr	r3, [r7, #20]
   260ee:	681b      	ldr	r3, [r3, #0]
   260f0:	613b      	str	r3, [r7, #16]
   260f2:	697b      	ldr	r3, [r7, #20]
   260f4:	2237      	movs	r2, #55	; 0x37
   260f6:	5c9a      	ldrb	r2, [r3, r2]
   260f8:	697b      	ldr	r3, [r7, #20]
   260fa:	2136      	movs	r1, #54	; 0x36
   260fc:	5c59      	ldrb	r1, [r3, r1]
   260fe:	230f      	movs	r3, #15
   26100:	18fb      	adds	r3, r7, r3
   26102:	400a      	ands	r2, r1
   26104:	701a      	strb	r2, [r3, #0]
   26106:	693b      	ldr	r3, [r7, #16]
   26108:	7e1b      	ldrb	r3, [r3, #24]
   2610a:	b2da      	uxtb	r2, r3
   2610c:	230c      	movs	r3, #12
   2610e:	18fb      	adds	r3, r7, r3
   26110:	801a      	strh	r2, [r3, #0]
   26112:	693b      	ldr	r3, [r7, #16]
   26114:	7d9b      	ldrb	r3, [r3, #22]
   26116:	b2db      	uxtb	r3, r3
   26118:	b29a      	uxth	r2, r3
   2611a:	230c      	movs	r3, #12
   2611c:	18fb      	adds	r3, r7, r3
   2611e:	210c      	movs	r1, #12
   26120:	1879      	adds	r1, r7, r1
   26122:	8809      	ldrh	r1, [r1, #0]
   26124:	400a      	ands	r2, r1
   26126:	801a      	strh	r2, [r3, #0]
   26128:	230c      	movs	r3, #12
   2612a:	18fb      	adds	r3, r7, r3
   2612c:	881b      	ldrh	r3, [r3, #0]
   2612e:	2201      	movs	r2, #1
   26130:	4013      	ands	r3, r2
   26132:	d038      	beq.n	261a6 <_spi_interrupt_handler+0xd2>
   26134:	697b      	ldr	r3, [r7, #20]
   26136:	795b      	ldrb	r3, [r3, #5]
   26138:	2b01      	cmp	r3, #1
   2613a:	d110      	bne.n	2615e <_spi_interrupt_handler+0x8a>
   2613c:	697b      	ldr	r3, [r7, #20]
   2613e:	7a5b      	ldrb	r3, [r3, #9]
   26140:	b2db      	uxtb	r3, r3
   26142:	2b00      	cmp	r3, #0
   26144:	d10b      	bne.n	2615e <_spi_interrupt_handler+0x8a>
   26146:	697b      	ldr	r3, [r7, #20]
   26148:	0018      	movs	r0, r3
   2614a:	4b7e      	ldr	r3, [pc, #504]	; (26344 <_spi_interrupt_handler+0x270>)
   2614c:	4798      	blx	r3
   2614e:	697b      	ldr	r3, [r7, #20]
   26150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26152:	b29b      	uxth	r3, r3
   26154:	2b00      	cmp	r3, #0
   26156:	d102      	bne.n	2615e <_spi_interrupt_handler+0x8a>
   26158:	693b      	ldr	r3, [r7, #16]
   2615a:	2201      	movs	r2, #1
   2615c:	751a      	strb	r2, [r3, #20]
   2615e:	697b      	ldr	r3, [r7, #20]
   26160:	795b      	ldrb	r3, [r3, #5]
   26162:	2b01      	cmp	r3, #1
   26164:	d11f      	bne.n	261a6 <_spi_interrupt_handler+0xd2>
   26166:	697b      	ldr	r3, [r7, #20]
   26168:	7a5b      	ldrb	r3, [r3, #9]
   2616a:	b2db      	uxtb	r3, r3
   2616c:	2b00      	cmp	r3, #0
   2616e:	d01a      	beq.n	261a6 <_spi_interrupt_handler+0xd2>
   26170:	697b      	ldr	r3, [r7, #20]
   26172:	0018      	movs	r0, r3
   26174:	4b74      	ldr	r3, [pc, #464]	; (26348 <_spi_interrupt_handler+0x274>)
   26176:	4798      	blx	r3
   26178:	697b      	ldr	r3, [r7, #20]
   2617a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2617c:	b29b      	uxth	r3, r3
   2617e:	2b00      	cmp	r3, #0
   26180:	d111      	bne.n	261a6 <_spi_interrupt_handler+0xd2>
   26182:	693b      	ldr	r3, [r7, #16]
   26184:	2201      	movs	r2, #1
   26186:	751a      	strb	r2, [r3, #20]
   26188:	697b      	ldr	r3, [r7, #20]
   2618a:	7a5b      	ldrb	r3, [r3, #9]
   2618c:	b2db      	uxtb	r3, r3
   2618e:	2b01      	cmp	r3, #1
   26190:	d109      	bne.n	261a6 <_spi_interrupt_handler+0xd2>
   26192:	697b      	ldr	r3, [r7, #20]
   26194:	79db      	ldrb	r3, [r3, #7]
   26196:	2201      	movs	r2, #1
   26198:	4053      	eors	r3, r2
   2619a:	b2db      	uxtb	r3, r3
   2619c:	2b00      	cmp	r3, #0
   2619e:	d002      	beq.n	261a6 <_spi_interrupt_handler+0xd2>
   261a0:	693b      	ldr	r3, [r7, #16]
   261a2:	2202      	movs	r2, #2
   261a4:	759a      	strb	r2, [r3, #22]
   261a6:	230c      	movs	r3, #12
   261a8:	18fb      	adds	r3, r7, r3
   261aa:	881b      	ldrh	r3, [r3, #0]
   261ac:	2204      	movs	r2, #4
   261ae:	4013      	ands	r3, r2
   261b0:	d100      	bne.n	261b4 <_spi_interrupt_handler+0xe0>
   261b2:	e07e      	b.n	262b2 <_spi_interrupt_handler+0x1de>
   261b4:	693b      	ldr	r3, [r7, #16]
   261b6:	8b5b      	ldrh	r3, [r3, #26]
   261b8:	b29b      	uxth	r3, r3
   261ba:	001a      	movs	r2, r3
   261bc:	2304      	movs	r3, #4
   261be:	4013      	ands	r3, r2
   261c0:	d022      	beq.n	26208 <_spi_interrupt_handler+0x134>
   261c2:	697b      	ldr	r3, [r7, #20]
   261c4:	7a5b      	ldrb	r3, [r3, #9]
   261c6:	b2db      	uxtb	r3, r3
   261c8:	2b01      	cmp	r3, #1
   261ca:	d014      	beq.n	261f6 <_spi_interrupt_handler+0x122>
   261cc:	697b      	ldr	r3, [r7, #20]
   261ce:	2238      	movs	r2, #56	; 0x38
   261d0:	211e      	movs	r1, #30
   261d2:	5499      	strb	r1, [r3, r2]
   261d4:	697b      	ldr	r3, [r7, #20]
   261d6:	2203      	movs	r2, #3
   261d8:	725a      	strb	r2, [r3, #9]
   261da:	693b      	ldr	r3, [r7, #16]
   261dc:	2205      	movs	r2, #5
   261de:	751a      	strb	r2, [r3, #20]
   261e0:	230f      	movs	r3, #15
   261e2:	18fb      	adds	r3, r7, r3
   261e4:	781b      	ldrb	r3, [r3, #0]
   261e6:	2208      	movs	r2, #8
   261e8:	4013      	ands	r3, r2
   261ea:	d004      	beq.n	261f6 <_spi_interrupt_handler+0x122>
   261ec:	697b      	ldr	r3, [r7, #20]
   261ee:	699b      	ldr	r3, [r3, #24]
   261f0:	697a      	ldr	r2, [r7, #20]
   261f2:	0010      	movs	r0, r2
   261f4:	4798      	blx	r3
   261f6:	693b      	ldr	r3, [r7, #16]
   261f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   261fa:	230a      	movs	r3, #10
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	801a      	strh	r2, [r3, #0]
   26200:	693b      	ldr	r3, [r7, #16]
   26202:	2204      	movs	r2, #4
   26204:	835a      	strh	r2, [r3, #26]
   26206:	e054      	b.n	262b2 <_spi_interrupt_handler+0x1de>
   26208:	697b      	ldr	r3, [r7, #20]
   2620a:	7a5b      	ldrb	r3, [r3, #9]
   2620c:	b2db      	uxtb	r3, r3
   2620e:	2b01      	cmp	r3, #1
   26210:	d11e      	bne.n	26250 <_spi_interrupt_handler+0x17c>
   26212:	697b      	ldr	r3, [r7, #20]
   26214:	0018      	movs	r0, r3
   26216:	4b4d      	ldr	r3, [pc, #308]	; (2634c <_spi_interrupt_handler+0x278>)
   26218:	4798      	blx	r3
   2621a:	697b      	ldr	r3, [r7, #20]
   2621c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2621e:	b29b      	uxth	r3, r3
   26220:	2b00      	cmp	r3, #0
   26222:	d146      	bne.n	262b2 <_spi_interrupt_handler+0x1de>
   26224:	693b      	ldr	r3, [r7, #16]
   26226:	2204      	movs	r2, #4
   26228:	751a      	strb	r2, [r3, #20]
   2622a:	697b      	ldr	r3, [r7, #20]
   2622c:	2238      	movs	r2, #56	; 0x38
   2622e:	2100      	movs	r1, #0
   26230:	5499      	strb	r1, [r3, r2]
   26232:	697b      	ldr	r3, [r7, #20]
   26234:	2203      	movs	r2, #3
   26236:	725a      	strb	r2, [r3, #9]
   26238:	230f      	movs	r3, #15
   2623a:	18fb      	adds	r3, r7, r3
   2623c:	781b      	ldrb	r3, [r3, #0]
   2623e:	2201      	movs	r2, #1
   26240:	4013      	ands	r3, r2
   26242:	d036      	beq.n	262b2 <_spi_interrupt_handler+0x1de>
   26244:	697b      	ldr	r3, [r7, #20]
   26246:	68db      	ldr	r3, [r3, #12]
   26248:	697a      	ldr	r2, [r7, #20]
   2624a:	0010      	movs	r0, r2
   2624c:	4798      	blx	r3
   2624e:	e030      	b.n	262b2 <_spi_interrupt_handler+0x1de>
   26250:	697b      	ldr	r3, [r7, #20]
   26252:	0018      	movs	r0, r3
   26254:	4b3e      	ldr	r3, [pc, #248]	; (26350 <_spi_interrupt_handler+0x27c>)
   26256:	4798      	blx	r3
   26258:	697b      	ldr	r3, [r7, #20]
   2625a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2625c:	b29b      	uxth	r3, r3
   2625e:	2b00      	cmp	r3, #0
   26260:	d127      	bne.n	262b2 <_spi_interrupt_handler+0x1de>
   26262:	697b      	ldr	r3, [r7, #20]
   26264:	2238      	movs	r2, #56	; 0x38
   26266:	2100      	movs	r1, #0
   26268:	5499      	strb	r1, [r3, r2]
   2626a:	693b      	ldr	r3, [r7, #16]
   2626c:	2204      	movs	r2, #4
   2626e:	751a      	strb	r2, [r3, #20]
   26270:	697b      	ldr	r3, [r7, #20]
   26272:	7a5b      	ldrb	r3, [r3, #9]
   26274:	b2db      	uxtb	r3, r3
   26276:	2b02      	cmp	r3, #2
   26278:	d10b      	bne.n	26292 <_spi_interrupt_handler+0x1be>
   2627a:	230f      	movs	r3, #15
   2627c:	18fb      	adds	r3, r7, r3
   2627e:	781b      	ldrb	r3, [r3, #0]
   26280:	2204      	movs	r2, #4
   26282:	4013      	ands	r3, r2
   26284:	d015      	beq.n	262b2 <_spi_interrupt_handler+0x1de>
   26286:	697b      	ldr	r3, [r7, #20]
   26288:	695b      	ldr	r3, [r3, #20]
   2628a:	697a      	ldr	r2, [r7, #20]
   2628c:	0010      	movs	r0, r2
   2628e:	4798      	blx	r3
   26290:	e00f      	b.n	262b2 <_spi_interrupt_handler+0x1de>
   26292:	697b      	ldr	r3, [r7, #20]
   26294:	7a5b      	ldrb	r3, [r3, #9]
   26296:	b2db      	uxtb	r3, r3
   26298:	2b00      	cmp	r3, #0
   2629a:	d10a      	bne.n	262b2 <_spi_interrupt_handler+0x1de>
   2629c:	230f      	movs	r3, #15
   2629e:	18fb      	adds	r3, r7, r3
   262a0:	781b      	ldrb	r3, [r3, #0]
   262a2:	2202      	movs	r2, #2
   262a4:	4013      	ands	r3, r2
   262a6:	d004      	beq.n	262b2 <_spi_interrupt_handler+0x1de>
   262a8:	697b      	ldr	r3, [r7, #20]
   262aa:	691b      	ldr	r3, [r3, #16]
   262ac:	697a      	ldr	r2, [r7, #20]
   262ae:	0010      	movs	r0, r2
   262b0:	4798      	blx	r3
   262b2:	230c      	movs	r3, #12
   262b4:	18fb      	adds	r3, r7, r3
   262b6:	881b      	ldrh	r3, [r3, #0]
   262b8:	2202      	movs	r2, #2
   262ba:	4013      	ands	r3, r2
   262bc:	d024      	beq.n	26308 <_spi_interrupt_handler+0x234>
   262be:	697b      	ldr	r3, [r7, #20]
   262c0:	795b      	ldrb	r3, [r3, #5]
   262c2:	2b01      	cmp	r3, #1
   262c4:	d120      	bne.n	26308 <_spi_interrupt_handler+0x234>
   262c6:	697b      	ldr	r3, [r7, #20]
   262c8:	7a5b      	ldrb	r3, [r3, #9]
   262ca:	b2db      	uxtb	r3, r3
   262cc:	2b01      	cmp	r3, #1
   262ce:	d11b      	bne.n	26308 <_spi_interrupt_handler+0x234>
   262d0:	697b      	ldr	r3, [r7, #20]
   262d2:	79db      	ldrb	r3, [r3, #7]
   262d4:	2201      	movs	r2, #1
   262d6:	4053      	eors	r3, r2
   262d8:	b2db      	uxtb	r3, r3
   262da:	2b00      	cmp	r3, #0
   262dc:	d014      	beq.n	26308 <_spi_interrupt_handler+0x234>
   262de:	693b      	ldr	r3, [r7, #16]
   262e0:	2202      	movs	r2, #2
   262e2:	751a      	strb	r2, [r3, #20]
   262e4:	697b      	ldr	r3, [r7, #20]
   262e6:	2203      	movs	r2, #3
   262e8:	725a      	strb	r2, [r3, #9]
   262ea:	697b      	ldr	r3, [r7, #20]
   262ec:	2238      	movs	r2, #56	; 0x38
   262ee:	2100      	movs	r1, #0
   262f0:	5499      	strb	r1, [r3, r2]
   262f2:	230f      	movs	r3, #15
   262f4:	18fb      	adds	r3, r7, r3
   262f6:	781b      	ldrb	r3, [r3, #0]
   262f8:	2201      	movs	r2, #1
   262fa:	4013      	ands	r3, r2
   262fc:	d004      	beq.n	26308 <_spi_interrupt_handler+0x234>
   262fe:	697b      	ldr	r3, [r7, #20]
   26300:	68db      	ldr	r3, [r3, #12]
   26302:	697a      	ldr	r2, [r7, #20]
   26304:	0010      	movs	r0, r2
   26306:	4798      	blx	r3
   26308:	230c      	movs	r3, #12
   2630a:	18fb      	adds	r3, r7, r3
   2630c:	881b      	ldrh	r3, [r3, #0]
   2630e:	2280      	movs	r2, #128	; 0x80
   26310:	4013      	ands	r3, r2
   26312:	d010      	beq.n	26336 <_spi_interrupt_handler+0x262>
   26314:	693b      	ldr	r3, [r7, #16]
   26316:	2280      	movs	r2, #128	; 0x80
   26318:	751a      	strb	r2, [r3, #20]
   2631a:	693b      	ldr	r3, [r7, #16]
   2631c:	2280      	movs	r2, #128	; 0x80
   2631e:	761a      	strb	r2, [r3, #24]
   26320:	230f      	movs	r3, #15
   26322:	18fb      	adds	r3, r7, r3
   26324:	781b      	ldrb	r3, [r3, #0]
   26326:	2240      	movs	r2, #64	; 0x40
   26328:	4013      	ands	r3, r2
   2632a:	d004      	beq.n	26336 <_spi_interrupt_handler+0x262>
   2632c:	697b      	ldr	r3, [r7, #20]
   2632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26330:	697a      	ldr	r2, [r7, #20]
   26332:	0010      	movs	r0, r2
   26334:	4798      	blx	r3
   26336:	46c0      	nop			; (mov r8, r8)
   26338:	46bd      	mov	sp, r7
   2633a:	b006      	add	sp, #24
   2633c:	bd80      	pop	{r7, pc}
   2633e:	46c0      	nop			; (mov r8, r8)
   26340:	20005578 	.word	0x20005578
   26344:	00025ff9 	.word	0x00025ff9
   26348:	00025f7d 	.word	0x00025f7d
   2634c:	0002602d 	.word	0x0002602d
   26350:	00026063 	.word	0x00026063

00026354 <system_gclk_chan_get_config_defaults>:
   26354:	b580      	push	{r7, lr}
   26356:	b082      	sub	sp, #8
   26358:	af00      	add	r7, sp, #0
   2635a:	6078      	str	r0, [r7, #4]
   2635c:	687b      	ldr	r3, [r7, #4]
   2635e:	2200      	movs	r2, #0
   26360:	701a      	strb	r2, [r3, #0]
   26362:	46c0      	nop			; (mov r8, r8)
   26364:	46bd      	mov	sp, r7
   26366:	b002      	add	sp, #8
   26368:	bd80      	pop	{r7, pc}
	...

0002636c <system_apb_clock_set_mask>:
   2636c:	b580      	push	{r7, lr}
   2636e:	b082      	sub	sp, #8
   26370:	af00      	add	r7, sp, #0
   26372:	0002      	movs	r2, r0
   26374:	6039      	str	r1, [r7, #0]
   26376:	1dfb      	adds	r3, r7, #7
   26378:	701a      	strb	r2, [r3, #0]
   2637a:	1dfb      	adds	r3, r7, #7
   2637c:	781b      	ldrb	r3, [r3, #0]
   2637e:	2b01      	cmp	r3, #1
   26380:	d00a      	beq.n	26398 <system_apb_clock_set_mask+0x2c>
   26382:	2b02      	cmp	r3, #2
   26384:	d00f      	beq.n	263a6 <system_apb_clock_set_mask+0x3a>
   26386:	2b00      	cmp	r3, #0
   26388:	d114      	bne.n	263b4 <system_apb_clock_set_mask+0x48>
   2638a:	4b0e      	ldr	r3, [pc, #56]	; (263c4 <system_apb_clock_set_mask+0x58>)
   2638c:	4a0d      	ldr	r2, [pc, #52]	; (263c4 <system_apb_clock_set_mask+0x58>)
   2638e:	6991      	ldr	r1, [r2, #24]
   26390:	683a      	ldr	r2, [r7, #0]
   26392:	430a      	orrs	r2, r1
   26394:	619a      	str	r2, [r3, #24]
   26396:	e00f      	b.n	263b8 <system_apb_clock_set_mask+0x4c>
   26398:	4b0a      	ldr	r3, [pc, #40]	; (263c4 <system_apb_clock_set_mask+0x58>)
   2639a:	4a0a      	ldr	r2, [pc, #40]	; (263c4 <system_apb_clock_set_mask+0x58>)
   2639c:	69d1      	ldr	r1, [r2, #28]
   2639e:	683a      	ldr	r2, [r7, #0]
   263a0:	430a      	orrs	r2, r1
   263a2:	61da      	str	r2, [r3, #28]
   263a4:	e008      	b.n	263b8 <system_apb_clock_set_mask+0x4c>
   263a6:	4b07      	ldr	r3, [pc, #28]	; (263c4 <system_apb_clock_set_mask+0x58>)
   263a8:	4a06      	ldr	r2, [pc, #24]	; (263c4 <system_apb_clock_set_mask+0x58>)
   263aa:	6a11      	ldr	r1, [r2, #32]
   263ac:	683a      	ldr	r2, [r7, #0]
   263ae:	430a      	orrs	r2, r1
   263b0:	621a      	str	r2, [r3, #32]
   263b2:	e001      	b.n	263b8 <system_apb_clock_set_mask+0x4c>
   263b4:	2317      	movs	r3, #23
   263b6:	e000      	b.n	263ba <system_apb_clock_set_mask+0x4e>
   263b8:	2300      	movs	r3, #0
   263ba:	0018      	movs	r0, r3
   263bc:	46bd      	mov	sp, r7
   263be:	b002      	add	sp, #8
   263c0:	bd80      	pop	{r7, pc}
   263c2:	46c0      	nop			; (mov r8, r8)
   263c4:	40000400 	.word	0x40000400

000263c8 <system_pinmux_get_config_defaults>:
   263c8:	b580      	push	{r7, lr}
   263ca:	b082      	sub	sp, #8
   263cc:	af00      	add	r7, sp, #0
   263ce:	6078      	str	r0, [r7, #4]
   263d0:	687b      	ldr	r3, [r7, #4]
   263d2:	2280      	movs	r2, #128	; 0x80
   263d4:	701a      	strb	r2, [r3, #0]
   263d6:	687b      	ldr	r3, [r7, #4]
   263d8:	2200      	movs	r2, #0
   263da:	705a      	strb	r2, [r3, #1]
   263dc:	687b      	ldr	r3, [r7, #4]
   263de:	2201      	movs	r2, #1
   263e0:	709a      	strb	r2, [r3, #2]
   263e2:	687b      	ldr	r3, [r7, #4]
   263e4:	2200      	movs	r2, #0
   263e6:	70da      	strb	r2, [r3, #3]
   263e8:	46c0      	nop			; (mov r8, r8)
   263ea:	46bd      	mov	sp, r7
   263ec:	b002      	add	sp, #8
   263ee:	bd80      	pop	{r7, pc}

000263f0 <system_is_debugger_present>:
   263f0:	b580      	push	{r7, lr}
   263f2:	af00      	add	r7, sp, #0
   263f4:	4b05      	ldr	r3, [pc, #20]	; (2640c <system_is_debugger_present+0x1c>)
   263f6:	789b      	ldrb	r3, [r3, #2]
   263f8:	b2db      	uxtb	r3, r3
   263fa:	001a      	movs	r2, r3
   263fc:	2302      	movs	r3, #2
   263fe:	4013      	ands	r3, r2
   26400:	1e5a      	subs	r2, r3, #1
   26402:	4193      	sbcs	r3, r2
   26404:	b2db      	uxtb	r3, r3
   26406:	0018      	movs	r0, r3
   26408:	46bd      	mov	sp, r7
   2640a:	bd80      	pop	{r7, pc}
   2640c:	41002000 	.word	0x41002000

00026410 <usart_is_syncing>:
   26410:	b580      	push	{r7, lr}
   26412:	b084      	sub	sp, #16
   26414:	af00      	add	r7, sp, #0
   26416:	6078      	str	r0, [r7, #4]
   26418:	687b      	ldr	r3, [r7, #4]
   2641a:	681b      	ldr	r3, [r3, #0]
   2641c:	60fb      	str	r3, [r7, #12]
   2641e:	68fb      	ldr	r3, [r7, #12]
   26420:	69db      	ldr	r3, [r3, #28]
   26422:	1e5a      	subs	r2, r3, #1
   26424:	4193      	sbcs	r3, r2
   26426:	b2db      	uxtb	r3, r3
   26428:	0018      	movs	r0, r3
   2642a:	46bd      	mov	sp, r7
   2642c:	b004      	add	sp, #16
   2642e:	bd80      	pop	{r7, pc}

00026430 <_usart_wait_for_sync>:
   26430:	b580      	push	{r7, lr}
   26432:	b082      	sub	sp, #8
   26434:	af00      	add	r7, sp, #0
   26436:	6078      	str	r0, [r7, #4]
   26438:	46c0      	nop			; (mov r8, r8)
   2643a:	687b      	ldr	r3, [r7, #4]
   2643c:	0018      	movs	r0, r3
   2643e:	4b04      	ldr	r3, [pc, #16]	; (26450 <_usart_wait_for_sync+0x20>)
   26440:	4798      	blx	r3
   26442:	1e03      	subs	r3, r0, #0
   26444:	d1f9      	bne.n	2643a <_usart_wait_for_sync+0xa>
   26446:	46c0      	nop			; (mov r8, r8)
   26448:	46bd      	mov	sp, r7
   2644a:	b002      	add	sp, #8
   2644c:	bd80      	pop	{r7, pc}
   2644e:	46c0      	nop			; (mov r8, r8)
   26450:	00026411 	.word	0x00026411

00026454 <_usart_set_config>:
   26454:	b5b0      	push	{r4, r5, r7, lr}
   26456:	b08c      	sub	sp, #48	; 0x30
   26458:	af02      	add	r7, sp, #8
   2645a:	6078      	str	r0, [r7, #4]
   2645c:	6039      	str	r1, [r7, #0]
   2645e:	687b      	ldr	r3, [r7, #4]
   26460:	681b      	ldr	r3, [r3, #0]
   26462:	61bb      	str	r3, [r7, #24]
   26464:	687b      	ldr	r3, [r7, #4]
   26466:	681b      	ldr	r3, [r3, #0]
   26468:	0018      	movs	r0, r3
   2646a:	4bab      	ldr	r3, [pc, #684]	; (26718 <_usart_set_config+0x2c4>)
   2646c:	4798      	blx	r3
   2646e:	0003      	movs	r3, r0
   26470:	617b      	str	r3, [r7, #20]
   26472:	697b      	ldr	r3, [r7, #20]
   26474:	3314      	adds	r3, #20
   26476:	613b      	str	r3, [r7, #16]
   26478:	2300      	movs	r3, #0
   2647a:	627b      	str	r3, [r7, #36]	; 0x24
   2647c:	2300      	movs	r3, #0
   2647e:	623b      	str	r3, [r7, #32]
   26480:	230a      	movs	r3, #10
   26482:	18fb      	adds	r3, r7, r3
   26484:	2200      	movs	r2, #0
   26486:	801a      	strh	r2, [r3, #0]
   26488:	231f      	movs	r3, #31
   2648a:	18fb      	adds	r3, r7, r3
   2648c:	2200      	movs	r2, #0
   2648e:	701a      	strb	r2, [r3, #0]
   26490:	231e      	movs	r3, #30
   26492:	18fb      	adds	r3, r7, r3
   26494:	2210      	movs	r2, #16
   26496:	701a      	strb	r2, [r3, #0]
   26498:	683b      	ldr	r3, [r7, #0]
   2649a:	8a1b      	ldrh	r3, [r3, #16]
   2649c:	2280      	movs	r2, #128	; 0x80
   2649e:	01d2      	lsls	r2, r2, #7
   264a0:	4293      	cmp	r3, r2
   264a2:	d01c      	beq.n	264de <_usart_set_config+0x8a>
   264a4:	2280      	movs	r2, #128	; 0x80
   264a6:	01d2      	lsls	r2, r2, #7
   264a8:	4293      	cmp	r3, r2
   264aa:	dc06      	bgt.n	264ba <_usart_set_config+0x66>
   264ac:	2b00      	cmp	r3, #0
   264ae:	d00d      	beq.n	264cc <_usart_set_config+0x78>
   264b0:	2280      	movs	r2, #128	; 0x80
   264b2:	0192      	lsls	r2, r2, #6
   264b4:	4293      	cmp	r3, r2
   264b6:	d024      	beq.n	26502 <_usart_set_config+0xae>
   264b8:	e035      	b.n	26526 <_usart_set_config+0xd2>
   264ba:	22c0      	movs	r2, #192	; 0xc0
   264bc:	01d2      	lsls	r2, r2, #7
   264be:	4293      	cmp	r3, r2
   264c0:	d028      	beq.n	26514 <_usart_set_config+0xc0>
   264c2:	2280      	movs	r2, #128	; 0x80
   264c4:	0212      	lsls	r2, r2, #8
   264c6:	4293      	cmp	r3, r2
   264c8:	d012      	beq.n	264f0 <_usart_set_config+0x9c>
   264ca:	e02c      	b.n	26526 <_usart_set_config+0xd2>
   264cc:	231f      	movs	r3, #31
   264ce:	18fb      	adds	r3, r7, r3
   264d0:	2200      	movs	r2, #0
   264d2:	701a      	strb	r2, [r3, #0]
   264d4:	231e      	movs	r3, #30
   264d6:	18fb      	adds	r3, r7, r3
   264d8:	2210      	movs	r2, #16
   264da:	701a      	strb	r2, [r3, #0]
   264dc:	e023      	b.n	26526 <_usart_set_config+0xd2>
   264de:	231f      	movs	r3, #31
   264e0:	18fb      	adds	r3, r7, r3
   264e2:	2200      	movs	r2, #0
   264e4:	701a      	strb	r2, [r3, #0]
   264e6:	231e      	movs	r3, #30
   264e8:	18fb      	adds	r3, r7, r3
   264ea:	2208      	movs	r2, #8
   264ec:	701a      	strb	r2, [r3, #0]
   264ee:	e01a      	b.n	26526 <_usart_set_config+0xd2>
   264f0:	231f      	movs	r3, #31
   264f2:	18fb      	adds	r3, r7, r3
   264f4:	2200      	movs	r2, #0
   264f6:	701a      	strb	r2, [r3, #0]
   264f8:	231e      	movs	r3, #30
   264fa:	18fb      	adds	r3, r7, r3
   264fc:	2203      	movs	r2, #3
   264fe:	701a      	strb	r2, [r3, #0]
   26500:	e011      	b.n	26526 <_usart_set_config+0xd2>
   26502:	231f      	movs	r3, #31
   26504:	18fb      	adds	r3, r7, r3
   26506:	2201      	movs	r2, #1
   26508:	701a      	strb	r2, [r3, #0]
   2650a:	231e      	movs	r3, #30
   2650c:	18fb      	adds	r3, r7, r3
   2650e:	2210      	movs	r2, #16
   26510:	701a      	strb	r2, [r3, #0]
   26512:	e008      	b.n	26526 <_usart_set_config+0xd2>
   26514:	231f      	movs	r3, #31
   26516:	18fb      	adds	r3, r7, r3
   26518:	2201      	movs	r2, #1
   2651a:	701a      	strb	r2, [r3, #0]
   2651c:	231e      	movs	r3, #30
   2651e:	18fb      	adds	r3, r7, r3
   26520:	2208      	movs	r2, #8
   26522:	701a      	strb	r2, [r3, #0]
   26524:	46c0      	nop			; (mov r8, r8)
   26526:	683b      	ldr	r3, [r7, #0]
   26528:	681a      	ldr	r2, [r3, #0]
   2652a:	683b      	ldr	r3, [r7, #0]
   2652c:	68db      	ldr	r3, [r3, #12]
   2652e:	431a      	orrs	r2, r3
   26530:	683b      	ldr	r3, [r7, #0]
   26532:	695b      	ldr	r3, [r3, #20]
   26534:	4313      	orrs	r3, r2
   26536:	683a      	ldr	r2, [r7, #0]
   26538:	8a12      	ldrh	r2, [r2, #16]
   2653a:	4313      	orrs	r3, r2
   2653c:	683a      	ldr	r2, [r7, #0]
   2653e:	7e12      	ldrb	r2, [r2, #24]
   26540:	0212      	lsls	r2, r2, #8
   26542:	4313      	orrs	r3, r2
   26544:	683a      	ldr	r2, [r7, #0]
   26546:	2126      	movs	r1, #38	; 0x26
   26548:	5c52      	ldrb	r2, [r2, r1]
   2654a:	0752      	lsls	r2, r2, #29
   2654c:	4313      	orrs	r3, r2
   2654e:	627b      	str	r3, [r7, #36]	; 0x24
   26550:	231d      	movs	r3, #29
   26552:	18fb      	adds	r3, r7, r3
   26554:	2200      	movs	r2, #0
   26556:	701a      	strb	r2, [r3, #0]
   26558:	683b      	ldr	r3, [r7, #0]
   2655a:	685b      	ldr	r3, [r3, #4]
   2655c:	60fb      	str	r3, [r7, #12]
   2655e:	68fb      	ldr	r3, [r7, #12]
   26560:	2b00      	cmp	r3, #0
   26562:	d01e      	beq.n	265a2 <_usart_set_config+0x14e>
   26564:	2280      	movs	r2, #128	; 0x80
   26566:	0552      	lsls	r2, r2, #21
   26568:	4293      	cmp	r3, r2
   2656a:	d14f      	bne.n	2660c <_usart_set_config+0x1b8>
   2656c:	683b      	ldr	r3, [r7, #0]
   2656e:	2227      	movs	r2, #39	; 0x27
   26570:	5c9b      	ldrb	r3, [r3, r2]
   26572:	2201      	movs	r2, #1
   26574:	4053      	eors	r3, r2
   26576:	b2db      	uxtb	r3, r3
   26578:	2b00      	cmp	r3, #0
   2657a:	d046      	beq.n	2660a <_usart_set_config+0x1b6>
   2657c:	683b      	ldr	r3, [r7, #0]
   2657e:	6a1d      	ldr	r5, [r3, #32]
   26580:	693b      	ldr	r3, [r7, #16]
   26582:	b2db      	uxtb	r3, r3
   26584:	0018      	movs	r0, r3
   26586:	4b65      	ldr	r3, [pc, #404]	; (2671c <_usart_set_config+0x2c8>)
   26588:	4798      	blx	r3
   2658a:	0001      	movs	r1, r0
   2658c:	231d      	movs	r3, #29
   2658e:	18fc      	adds	r4, r7, r3
   26590:	230a      	movs	r3, #10
   26592:	18fb      	adds	r3, r7, r3
   26594:	001a      	movs	r2, r3
   26596:	0028      	movs	r0, r5
   26598:	4b61      	ldr	r3, [pc, #388]	; (26720 <_usart_set_config+0x2cc>)
   2659a:	4798      	blx	r3
   2659c:	0003      	movs	r3, r0
   2659e:	7023      	strb	r3, [r4, #0]
   265a0:	e033      	b.n	2660a <_usart_set_config+0x1b6>
   265a2:	683b      	ldr	r3, [r7, #0]
   265a4:	2227      	movs	r2, #39	; 0x27
   265a6:	5c9b      	ldrb	r3, [r3, r2]
   265a8:	2b00      	cmp	r3, #0
   265aa:	d014      	beq.n	265d6 <_usart_set_config+0x182>
   265ac:	683b      	ldr	r3, [r7, #0]
   265ae:	6a18      	ldr	r0, [r3, #32]
   265b0:	683b      	ldr	r3, [r7, #0]
   265b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   265b4:	231d      	movs	r3, #29
   265b6:	18fc      	adds	r4, r7, r3
   265b8:	231f      	movs	r3, #31
   265ba:	18fb      	adds	r3, r7, r3
   265bc:	781d      	ldrb	r5, [r3, #0]
   265be:	230a      	movs	r3, #10
   265c0:	18fa      	adds	r2, r7, r3
   265c2:	231e      	movs	r3, #30
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	9300      	str	r3, [sp, #0]
   265ca:	002b      	movs	r3, r5
   265cc:	4d55      	ldr	r5, [pc, #340]	; (26724 <_usart_set_config+0x2d0>)
   265ce:	47a8      	blx	r5
   265d0:	0003      	movs	r3, r0
   265d2:	7023      	strb	r3, [r4, #0]
   265d4:	e01a      	b.n	2660c <_usart_set_config+0x1b8>
   265d6:	683b      	ldr	r3, [r7, #0]
   265d8:	6a1d      	ldr	r5, [r3, #32]
   265da:	693b      	ldr	r3, [r7, #16]
   265dc:	b2db      	uxtb	r3, r3
   265de:	0018      	movs	r0, r3
   265e0:	4b4e      	ldr	r3, [pc, #312]	; (2671c <_usart_set_config+0x2c8>)
   265e2:	4798      	blx	r3
   265e4:	231d      	movs	r3, #29
   265e6:	18fc      	adds	r4, r7, r3
   265e8:	231f      	movs	r3, #31
   265ea:	18fb      	adds	r3, r7, r3
   265ec:	7819      	ldrb	r1, [r3, #0]
   265ee:	230a      	movs	r3, #10
   265f0:	18fa      	adds	r2, r7, r3
   265f2:	231e      	movs	r3, #30
   265f4:	18fb      	adds	r3, r7, r3
   265f6:	781b      	ldrb	r3, [r3, #0]
   265f8:	9300      	str	r3, [sp, #0]
   265fa:	000b      	movs	r3, r1
   265fc:	0001      	movs	r1, r0
   265fe:	0028      	movs	r0, r5
   26600:	4d48      	ldr	r5, [pc, #288]	; (26724 <_usart_set_config+0x2d0>)
   26602:	47a8      	blx	r5
   26604:	0003      	movs	r3, r0
   26606:	7023      	strb	r3, [r4, #0]
   26608:	e000      	b.n	2660c <_usart_set_config+0x1b8>
   2660a:	46c0      	nop			; (mov r8, r8)
   2660c:	231d      	movs	r3, #29
   2660e:	18fb      	adds	r3, r7, r3
   26610:	781b      	ldrb	r3, [r3, #0]
   26612:	2b00      	cmp	r3, #0
   26614:	d003      	beq.n	2661e <_usart_set_config+0x1ca>
   26616:	231d      	movs	r3, #29
   26618:	18fb      	adds	r3, r7, r3
   2661a:	781b      	ldrb	r3, [r3, #0]
   2661c:	e077      	b.n	2670e <_usart_set_config+0x2ba>
   2661e:	683b      	ldr	r3, [r7, #0]
   26620:	7e5b      	ldrb	r3, [r3, #25]
   26622:	2b00      	cmp	r3, #0
   26624:	d003      	beq.n	2662e <_usart_set_config+0x1da>
   26626:	683b      	ldr	r3, [r7, #0]
   26628:	7e9a      	ldrb	r2, [r3, #26]
   2662a:	69bb      	ldr	r3, [r7, #24]
   2662c:	739a      	strb	r2, [r3, #14]
   2662e:	687b      	ldr	r3, [r7, #4]
   26630:	0018      	movs	r0, r3
   26632:	4b3d      	ldr	r3, [pc, #244]	; (26728 <_usart_set_config+0x2d4>)
   26634:	4798      	blx	r3
   26636:	230a      	movs	r3, #10
   26638:	18fb      	adds	r3, r7, r3
   2663a:	881a      	ldrh	r2, [r3, #0]
   2663c:	69bb      	ldr	r3, [r7, #24]
   2663e:	819a      	strh	r2, [r3, #12]
   26640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26642:	68fb      	ldr	r3, [r7, #12]
   26644:	4313      	orrs	r3, r2
   26646:	627b      	str	r3, [r7, #36]	; 0x24
   26648:	683b      	ldr	r3, [r7, #0]
   2664a:	2227      	movs	r2, #39	; 0x27
   2664c:	5c9b      	ldrb	r3, [r3, r2]
   2664e:	2201      	movs	r2, #1
   26650:	4053      	eors	r3, r2
   26652:	b2db      	uxtb	r3, r3
   26654:	2b00      	cmp	r3, #0
   26656:	d003      	beq.n	26660 <_usart_set_config+0x20c>
   26658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2665a:	2204      	movs	r2, #4
   2665c:	4313      	orrs	r3, r2
   2665e:	627b      	str	r3, [r7, #36]	; 0x24
   26660:	683b      	ldr	r3, [r7, #0]
   26662:	7e5b      	ldrb	r3, [r3, #25]
   26664:	029a      	lsls	r2, r3, #10
   26666:	683b      	ldr	r3, [r7, #0]
   26668:	7f1b      	ldrb	r3, [r3, #28]
   2666a:	025b      	lsls	r3, r3, #9
   2666c:	431a      	orrs	r2, r3
   2666e:	683b      	ldr	r3, [r7, #0]
   26670:	7f5b      	ldrb	r3, [r3, #29]
   26672:	021b      	lsls	r3, r3, #8
   26674:	431a      	orrs	r2, r3
   26676:	683b      	ldr	r3, [r7, #0]
   26678:	2124      	movs	r1, #36	; 0x24
   2667a:	5c5b      	ldrb	r3, [r3, r1]
   2667c:	045b      	lsls	r3, r3, #17
   2667e:	431a      	orrs	r2, r3
   26680:	683b      	ldr	r3, [r7, #0]
   26682:	2125      	movs	r1, #37	; 0x25
   26684:	5c5b      	ldrb	r3, [r3, r1]
   26686:	041b      	lsls	r3, r3, #16
   26688:	4313      	orrs	r3, r2
   2668a:	623b      	str	r3, [r7, #32]
   2668c:	683b      	ldr	r3, [r7, #0]
   2668e:	7a9b      	ldrb	r3, [r3, #10]
   26690:	001a      	movs	r2, r3
   26692:	6a3b      	ldr	r3, [r7, #32]
   26694:	4313      	orrs	r3, r2
   26696:	623b      	str	r3, [r7, #32]
   26698:	683b      	ldr	r3, [r7, #0]
   2669a:	7adb      	ldrb	r3, [r3, #11]
   2669c:	001a      	movs	r2, r3
   2669e:	6a3b      	ldr	r3, [r7, #32]
   266a0:	4313      	orrs	r3, r2
   266a2:	623b      	str	r3, [r7, #32]
   266a4:	683b      	ldr	r3, [r7, #0]
   266a6:	891b      	ldrh	r3, [r3, #8]
   266a8:	2bff      	cmp	r3, #255	; 0xff
   266aa:	d00b      	beq.n	266c4 <_usart_set_config+0x270>
   266ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266ae:	2280      	movs	r2, #128	; 0x80
   266b0:	0452      	lsls	r2, r2, #17
   266b2:	4313      	orrs	r3, r2
   266b4:	627b      	str	r3, [r7, #36]	; 0x24
   266b6:	683b      	ldr	r3, [r7, #0]
   266b8:	891b      	ldrh	r3, [r3, #8]
   266ba:	001a      	movs	r2, r3
   266bc:	6a3b      	ldr	r3, [r7, #32]
   266be:	4313      	orrs	r3, r2
   266c0:	623b      	str	r3, [r7, #32]
   266c2:	e008      	b.n	266d6 <_usart_set_config+0x282>
   266c4:	683b      	ldr	r3, [r7, #0]
   266c6:	7edb      	ldrb	r3, [r3, #27]
   266c8:	2b00      	cmp	r3, #0
   266ca:	d004      	beq.n	266d6 <_usart_set_config+0x282>
   266cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266ce:	2280      	movs	r2, #128	; 0x80
   266d0:	04d2      	lsls	r2, r2, #19
   266d2:	4313      	orrs	r3, r2
   266d4:	627b      	str	r3, [r7, #36]	; 0x24
   266d6:	683b      	ldr	r3, [r7, #0]
   266d8:	222c      	movs	r2, #44	; 0x2c
   266da:	5c9b      	ldrb	r3, [r3, r2]
   266dc:	2b00      	cmp	r3, #0
   266de:	d103      	bne.n	266e8 <_usart_set_config+0x294>
   266e0:	4b12      	ldr	r3, [pc, #72]	; (2672c <_usart_set_config+0x2d8>)
   266e2:	4798      	blx	r3
   266e4:	1e03      	subs	r3, r0, #0
   266e6:	d003      	beq.n	266f0 <_usart_set_config+0x29c>
   266e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266ea:	2280      	movs	r2, #128	; 0x80
   266ec:	4313      	orrs	r3, r2
   266ee:	627b      	str	r3, [r7, #36]	; 0x24
   266f0:	687b      	ldr	r3, [r7, #4]
   266f2:	0018      	movs	r0, r3
   266f4:	4b0c      	ldr	r3, [pc, #48]	; (26728 <_usart_set_config+0x2d4>)
   266f6:	4798      	blx	r3
   266f8:	69bb      	ldr	r3, [r7, #24]
   266fa:	6a3a      	ldr	r2, [r7, #32]
   266fc:	605a      	str	r2, [r3, #4]
   266fe:	687b      	ldr	r3, [r7, #4]
   26700:	0018      	movs	r0, r3
   26702:	4b09      	ldr	r3, [pc, #36]	; (26728 <_usart_set_config+0x2d4>)
   26704:	4798      	blx	r3
   26706:	69bb      	ldr	r3, [r7, #24]
   26708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2670a:	601a      	str	r2, [r3, #0]
   2670c:	2300      	movs	r3, #0
   2670e:	0018      	movs	r0, r3
   26710:	46bd      	mov	sp, r7
   26712:	b00a      	add	sp, #40	; 0x28
   26714:	bdb0      	pop	{r4, r5, r7, pc}
   26716:	46c0      	nop			; (mov r8, r8)
   26718:	000251fd 	.word	0x000251fd
   2671c:	00027bb1 	.word	0x00027bb1
   26720:	00024d77 	.word	0x00024d77
   26724:	00024df5 	.word	0x00024df5
   26728:	00026431 	.word	0x00026431
   2672c:	000263f1 	.word	0x000263f1

00026730 <usart_init>:
   26730:	b590      	push	{r4, r7, lr}
   26732:	b093      	sub	sp, #76	; 0x4c
   26734:	af00      	add	r7, sp, #0
   26736:	60f8      	str	r0, [r7, #12]
   26738:	60b9      	str	r1, [r7, #8]
   2673a:	607a      	str	r2, [r7, #4]
   2673c:	233b      	movs	r3, #59	; 0x3b
   2673e:	18fb      	adds	r3, r7, r3
   26740:	2200      	movs	r2, #0
   26742:	701a      	strb	r2, [r3, #0]
   26744:	68fb      	ldr	r3, [r7, #12]
   26746:	68ba      	ldr	r2, [r7, #8]
   26748:	601a      	str	r2, [r3, #0]
   2674a:	68fb      	ldr	r3, [r7, #12]
   2674c:	681b      	ldr	r3, [r3, #0]
   2674e:	637b      	str	r3, [r7, #52]	; 0x34
   26750:	68fb      	ldr	r3, [r7, #12]
   26752:	681b      	ldr	r3, [r3, #0]
   26754:	0018      	movs	r0, r3
   26756:	4b86      	ldr	r3, [pc, #536]	; (26970 <usart_init+0x240>)
   26758:	4798      	blx	r3
   2675a:	0003      	movs	r3, r0
   2675c:	633b      	str	r3, [r7, #48]	; 0x30
   2675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26760:	3302      	adds	r3, #2
   26762:	62fb      	str	r3, [r7, #44]	; 0x2c
   26764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26766:	3314      	adds	r3, #20
   26768:	62bb      	str	r3, [r7, #40]	; 0x28
   2676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2676c:	681b      	ldr	r3, [r3, #0]
   2676e:	2201      	movs	r2, #1
   26770:	4013      	ands	r3, r2
   26772:	d001      	beq.n	26778 <usart_init+0x48>
   26774:	2305      	movs	r3, #5
   26776:	e0f6      	b.n	26966 <usart_init+0x236>
   26778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2677a:	681b      	ldr	r3, [r3, #0]
   2677c:	2202      	movs	r2, #2
   2677e:	4013      	ands	r3, r2
   26780:	d001      	beq.n	26786 <usart_init+0x56>
   26782:	231c      	movs	r3, #28
   26784:	e0ef      	b.n	26966 <usart_init+0x236>
   26786:	2201      	movs	r2, #1
   26788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2678a:	409a      	lsls	r2, r3
   2678c:	0013      	movs	r3, r2
   2678e:	0019      	movs	r1, r3
   26790:	2002      	movs	r0, #2
   26792:	4b78      	ldr	r3, [pc, #480]	; (26974 <usart_init+0x244>)
   26794:	4798      	blx	r3
   26796:	2324      	movs	r3, #36	; 0x24
   26798:	18fb      	adds	r3, r7, r3
   2679a:	0018      	movs	r0, r3
   2679c:	4b76      	ldr	r3, [pc, #472]	; (26978 <usart_init+0x248>)
   2679e:	4798      	blx	r3
   267a0:	687b      	ldr	r3, [r7, #4]
   267a2:	222d      	movs	r2, #45	; 0x2d
   267a4:	5c9a      	ldrb	r2, [r3, r2]
   267a6:	2324      	movs	r3, #36	; 0x24
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	701a      	strb	r2, [r3, #0]
   267ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   267ae:	b2db      	uxtb	r3, r3
   267b0:	2224      	movs	r2, #36	; 0x24
   267b2:	18ba      	adds	r2, r7, r2
   267b4:	0011      	movs	r1, r2
   267b6:	0018      	movs	r0, r3
   267b8:	4b70      	ldr	r3, [pc, #448]	; (2697c <usart_init+0x24c>)
   267ba:	4798      	blx	r3
   267bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   267be:	b2db      	uxtb	r3, r3
   267c0:	0018      	movs	r0, r3
   267c2:	4b6f      	ldr	r3, [pc, #444]	; (26980 <usart_init+0x250>)
   267c4:	4798      	blx	r3
   267c6:	687b      	ldr	r3, [r7, #4]
   267c8:	222d      	movs	r2, #45	; 0x2d
   267ca:	5c9b      	ldrb	r3, [r3, r2]
   267cc:	2100      	movs	r1, #0
   267ce:	0018      	movs	r0, r3
   267d0:	4b6c      	ldr	r3, [pc, #432]	; (26984 <usart_init+0x254>)
   267d2:	4798      	blx	r3
   267d4:	687b      	ldr	r3, [r7, #4]
   267d6:	7ada      	ldrb	r2, [r3, #11]
   267d8:	68fb      	ldr	r3, [r7, #12]
   267da:	715a      	strb	r2, [r3, #5]
   267dc:	687b      	ldr	r3, [r7, #4]
   267de:	2224      	movs	r2, #36	; 0x24
   267e0:	5c9a      	ldrb	r2, [r3, r2]
   267e2:	68fb      	ldr	r3, [r7, #12]
   267e4:	719a      	strb	r2, [r3, #6]
   267e6:	687b      	ldr	r3, [r7, #4]
   267e8:	2225      	movs	r2, #37	; 0x25
   267ea:	5c9a      	ldrb	r2, [r3, r2]
   267ec:	68fb      	ldr	r3, [r7, #12]
   267ee:	71da      	strb	r2, [r3, #7]
   267f0:	687b      	ldr	r3, [r7, #4]
   267f2:	7eda      	ldrb	r2, [r3, #27]
   267f4:	68fb      	ldr	r3, [r7, #12]
   267f6:	721a      	strb	r2, [r3, #8]
   267f8:	687b      	ldr	r3, [r7, #4]
   267fa:	7f1a      	ldrb	r2, [r3, #28]
   267fc:	68fb      	ldr	r3, [r7, #12]
   267fe:	725a      	strb	r2, [r3, #9]
   26800:	233b      	movs	r3, #59	; 0x3b
   26802:	18fc      	adds	r4, r7, r3
   26804:	687a      	ldr	r2, [r7, #4]
   26806:	68fb      	ldr	r3, [r7, #12]
   26808:	0011      	movs	r1, r2
   2680a:	0018      	movs	r0, r3
   2680c:	4b5e      	ldr	r3, [pc, #376]	; (26988 <usart_init+0x258>)
   2680e:	4798      	blx	r3
   26810:	0003      	movs	r3, r0
   26812:	7023      	strb	r3, [r4, #0]
   26814:	233b      	movs	r3, #59	; 0x3b
   26816:	18fb      	adds	r3, r7, r3
   26818:	781b      	ldrb	r3, [r3, #0]
   2681a:	2b00      	cmp	r3, #0
   2681c:	d003      	beq.n	26826 <usart_init+0xf6>
   2681e:	233b      	movs	r3, #59	; 0x3b
   26820:	18fb      	adds	r3, r7, r3
   26822:	781b      	ldrb	r3, [r3, #0]
   26824:	e09f      	b.n	26966 <usart_init+0x236>
   26826:	2320      	movs	r3, #32
   26828:	18fb      	adds	r3, r7, r3
   2682a:	0018      	movs	r0, r3
   2682c:	4b57      	ldr	r3, [pc, #348]	; (2698c <usart_init+0x25c>)
   2682e:	4798      	blx	r3
   26830:	2320      	movs	r3, #32
   26832:	18fb      	adds	r3, r7, r3
   26834:	2200      	movs	r2, #0
   26836:	705a      	strb	r2, [r3, #1]
   26838:	2320      	movs	r3, #32
   2683a:	18fb      	adds	r3, r7, r3
   2683c:	2200      	movs	r2, #0
   2683e:	709a      	strb	r2, [r3, #2]
   26840:	687b      	ldr	r3, [r7, #4]
   26842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   26844:	2310      	movs	r3, #16
   26846:	18fb      	adds	r3, r7, r3
   26848:	601a      	str	r2, [r3, #0]
   2684a:	687b      	ldr	r3, [r7, #4]
   2684c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2684e:	2310      	movs	r3, #16
   26850:	18fb      	adds	r3, r7, r3
   26852:	605a      	str	r2, [r3, #4]
   26854:	687b      	ldr	r3, [r7, #4]
   26856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   26858:	2310      	movs	r3, #16
   2685a:	18fb      	adds	r3, r7, r3
   2685c:	609a      	str	r2, [r3, #8]
   2685e:	687b      	ldr	r3, [r7, #4]
   26860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   26862:	2310      	movs	r3, #16
   26864:	18fb      	adds	r3, r7, r3
   26866:	60da      	str	r2, [r3, #12]
   26868:	2347      	movs	r3, #71	; 0x47
   2686a:	18fb      	adds	r3, r7, r3
   2686c:	2200      	movs	r2, #0
   2686e:	701a      	strb	r2, [r3, #0]
   26870:	e02c      	b.n	268cc <usart_init+0x19c>
   26872:	2347      	movs	r3, #71	; 0x47
   26874:	18fb      	adds	r3, r7, r3
   26876:	781a      	ldrb	r2, [r3, #0]
   26878:	2310      	movs	r3, #16
   2687a:	18fb      	adds	r3, r7, r3
   2687c:	0092      	lsls	r2, r2, #2
   2687e:	58d3      	ldr	r3, [r2, r3]
   26880:	643b      	str	r3, [r7, #64]	; 0x40
   26882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26884:	2b00      	cmp	r3, #0
   26886:	d109      	bne.n	2689c <usart_init+0x16c>
   26888:	2347      	movs	r3, #71	; 0x47
   2688a:	18fb      	adds	r3, r7, r3
   2688c:	781a      	ldrb	r2, [r3, #0]
   2688e:	68bb      	ldr	r3, [r7, #8]
   26890:	0011      	movs	r1, r2
   26892:	0018      	movs	r0, r3
   26894:	4b3e      	ldr	r3, [pc, #248]	; (26990 <usart_init+0x260>)
   26896:	4798      	blx	r3
   26898:	0003      	movs	r3, r0
   2689a:	643b      	str	r3, [r7, #64]	; 0x40
   2689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2689e:	3301      	adds	r3, #1
   268a0:	d00d      	beq.n	268be <usart_init+0x18e>
   268a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   268a4:	b2da      	uxtb	r2, r3
   268a6:	2320      	movs	r3, #32
   268a8:	18fb      	adds	r3, r7, r3
   268aa:	701a      	strb	r2, [r3, #0]
   268ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   268ae:	0c1b      	lsrs	r3, r3, #16
   268b0:	b2db      	uxtb	r3, r3
   268b2:	2220      	movs	r2, #32
   268b4:	18ba      	adds	r2, r7, r2
   268b6:	0011      	movs	r1, r2
   268b8:	0018      	movs	r0, r3
   268ba:	4b36      	ldr	r3, [pc, #216]	; (26994 <usart_init+0x264>)
   268bc:	4798      	blx	r3
   268be:	2347      	movs	r3, #71	; 0x47
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	781a      	ldrb	r2, [r3, #0]
   268c4:	2347      	movs	r3, #71	; 0x47
   268c6:	18fb      	adds	r3, r7, r3
   268c8:	3201      	adds	r2, #1
   268ca:	701a      	strb	r2, [r3, #0]
   268cc:	2347      	movs	r3, #71	; 0x47
   268ce:	18fb      	adds	r3, r7, r3
   268d0:	781b      	ldrb	r3, [r3, #0]
   268d2:	2b03      	cmp	r3, #3
   268d4:	d9cd      	bls.n	26872 <usart_init+0x142>
   268d6:	2300      	movs	r3, #0
   268d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   268da:	e00a      	b.n	268f2 <usart_init+0x1c2>
   268dc:	68fa      	ldr	r2, [r7, #12]
   268de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268e0:	3302      	adds	r3, #2
   268e2:	009b      	lsls	r3, r3, #2
   268e4:	18d3      	adds	r3, r2, r3
   268e6:	3304      	adds	r3, #4
   268e8:	2200      	movs	r2, #0
   268ea:	601a      	str	r2, [r3, #0]
   268ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268ee:	3301      	adds	r3, #1
   268f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   268f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268f4:	2b05      	cmp	r3, #5
   268f6:	d9f1      	bls.n	268dc <usart_init+0x1ac>
   268f8:	68fb      	ldr	r3, [r7, #12]
   268fa:	2200      	movs	r2, #0
   268fc:	629a      	str	r2, [r3, #40]	; 0x28
   268fe:	68fb      	ldr	r3, [r7, #12]
   26900:	2200      	movs	r2, #0
   26902:	625a      	str	r2, [r3, #36]	; 0x24
   26904:	68fb      	ldr	r3, [r7, #12]
   26906:	2200      	movs	r2, #0
   26908:	85da      	strh	r2, [r3, #46]	; 0x2e
   2690a:	68fb      	ldr	r3, [r7, #12]
   2690c:	2200      	movs	r2, #0
   2690e:	859a      	strh	r2, [r3, #44]	; 0x2c
   26910:	68fb      	ldr	r3, [r7, #12]
   26912:	2230      	movs	r2, #48	; 0x30
   26914:	2100      	movs	r1, #0
   26916:	5499      	strb	r1, [r3, r2]
   26918:	68fb      	ldr	r3, [r7, #12]
   2691a:	2231      	movs	r2, #49	; 0x31
   2691c:	2100      	movs	r1, #0
   2691e:	5499      	strb	r1, [r3, r2]
   26920:	68fb      	ldr	r3, [r7, #12]
   26922:	2232      	movs	r2, #50	; 0x32
   26924:	2100      	movs	r1, #0
   26926:	5499      	strb	r1, [r3, r2]
   26928:	68fb      	ldr	r3, [r7, #12]
   2692a:	2233      	movs	r2, #51	; 0x33
   2692c:	2100      	movs	r1, #0
   2692e:	5499      	strb	r1, [r3, r2]
   26930:	68fb      	ldr	r3, [r7, #12]
   26932:	681b      	ldr	r3, [r3, #0]
   26934:	2227      	movs	r2, #39	; 0x27
   26936:	18bc      	adds	r4, r7, r2
   26938:	0018      	movs	r0, r3
   2693a:	4b0d      	ldr	r3, [pc, #52]	; (26970 <usart_init+0x240>)
   2693c:	4798      	blx	r3
   2693e:	0003      	movs	r3, r0
   26940:	7023      	strb	r3, [r4, #0]
   26942:	4a15      	ldr	r2, [pc, #84]	; (26998 <usart_init+0x268>)
   26944:	2327      	movs	r3, #39	; 0x27
   26946:	18fb      	adds	r3, r7, r3
   26948:	781b      	ldrb	r3, [r3, #0]
   2694a:	0011      	movs	r1, r2
   2694c:	0018      	movs	r0, r3
   2694e:	4b13      	ldr	r3, [pc, #76]	; (2699c <usart_init+0x26c>)
   26950:	4798      	blx	r3
   26952:	2327      	movs	r3, #39	; 0x27
   26954:	18fb      	adds	r3, r7, r3
   26956:	781a      	ldrb	r2, [r3, #0]
   26958:	4b11      	ldr	r3, [pc, #68]	; (269a0 <usart_init+0x270>)
   2695a:	0092      	lsls	r2, r2, #2
   2695c:	68f9      	ldr	r1, [r7, #12]
   2695e:	50d1      	str	r1, [r2, r3]
   26960:	233b      	movs	r3, #59	; 0x3b
   26962:	18fb      	adds	r3, r7, r3
   26964:	781b      	ldrb	r3, [r3, #0]
   26966:	0018      	movs	r0, r3
   26968:	46bd      	mov	sp, r7
   2696a:	b013      	add	sp, #76	; 0x4c
   2696c:	bd90      	pop	{r4, r7, pc}
   2696e:	46c0      	nop			; (mov r8, r8)
   26970:	000251fd 	.word	0x000251fd
   26974:	0002636d 	.word	0x0002636d
   26978:	00026355 	.word	0x00026355
   2697c:	00027a8d 	.word	0x00027a8d
   26980:	00027ad1 	.word	0x00027ad1
   26984:	00024fb5 	.word	0x00024fb5
   26988:	00026455 	.word	0x00026455
   2698c:	000263c9 	.word	0x000263c9
   26990:	00025041 	.word	0x00025041
   26994:	00027ded 	.word	0x00027ded
   26998:	00026c0d 	.word	0x00026c0d
   2699c:	00025261 	.word	0x00025261
   269a0:	20005578 	.word	0x20005578

000269a4 <system_interrupt_enter_critical_section>:
   269a4:	b580      	push	{r7, lr}
   269a6:	af00      	add	r7, sp, #0
   269a8:	4b02      	ldr	r3, [pc, #8]	; (269b4 <system_interrupt_enter_critical_section+0x10>)
   269aa:	4798      	blx	r3
   269ac:	46c0      	nop			; (mov r8, r8)
   269ae:	46bd      	mov	sp, r7
   269b0:	bd80      	pop	{r7, pc}
   269b2:	46c0      	nop			; (mov r8, r8)
   269b4:	00023df9 	.word	0x00023df9

000269b8 <system_interrupt_leave_critical_section>:
   269b8:	b580      	push	{r7, lr}
   269ba:	af00      	add	r7, sp, #0
   269bc:	4b02      	ldr	r3, [pc, #8]	; (269c8 <system_interrupt_leave_critical_section+0x10>)
   269be:	4798      	blx	r3
   269c0:	46c0      	nop			; (mov r8, r8)
   269c2:	46bd      	mov	sp, r7
   269c4:	bd80      	pop	{r7, pc}
   269c6:	46c0      	nop			; (mov r8, r8)
   269c8:	00023e4d 	.word	0x00023e4d

000269cc <usart_is_syncing>:
   269cc:	b580      	push	{r7, lr}
   269ce:	b084      	sub	sp, #16
   269d0:	af00      	add	r7, sp, #0
   269d2:	6078      	str	r0, [r7, #4]
   269d4:	687b      	ldr	r3, [r7, #4]
   269d6:	681b      	ldr	r3, [r3, #0]
   269d8:	60fb      	str	r3, [r7, #12]
   269da:	68fb      	ldr	r3, [r7, #12]
   269dc:	69db      	ldr	r3, [r3, #28]
   269de:	1e5a      	subs	r2, r3, #1
   269e0:	4193      	sbcs	r3, r2
   269e2:	b2db      	uxtb	r3, r3
   269e4:	0018      	movs	r0, r3
   269e6:	46bd      	mov	sp, r7
   269e8:	b004      	add	sp, #16
   269ea:	bd80      	pop	{r7, pc}

000269ec <_usart_wait_for_sync>:
   269ec:	b580      	push	{r7, lr}
   269ee:	b082      	sub	sp, #8
   269f0:	af00      	add	r7, sp, #0
   269f2:	6078      	str	r0, [r7, #4]
   269f4:	46c0      	nop			; (mov r8, r8)
   269f6:	687b      	ldr	r3, [r7, #4]
   269f8:	0018      	movs	r0, r3
   269fa:	4b04      	ldr	r3, [pc, #16]	; (26a0c <_usart_wait_for_sync+0x20>)
   269fc:	4798      	blx	r3
   269fe:	1e03      	subs	r3, r0, #0
   26a00:	d1f9      	bne.n	269f6 <_usart_wait_for_sync+0xa>
   26a02:	46c0      	nop			; (mov r8, r8)
   26a04:	46bd      	mov	sp, r7
   26a06:	b002      	add	sp, #8
   26a08:	bd80      	pop	{r7, pc}
   26a0a:	46c0      	nop			; (mov r8, r8)
   26a0c:	000269cd 	.word	0x000269cd

00026a10 <_usart_write_buffer>:
   26a10:	b580      	push	{r7, lr}
   26a12:	b086      	sub	sp, #24
   26a14:	af00      	add	r7, sp, #0
   26a16:	60f8      	str	r0, [r7, #12]
   26a18:	60b9      	str	r1, [r7, #8]
   26a1a:	1dbb      	adds	r3, r7, #6
   26a1c:	801a      	strh	r2, [r3, #0]
   26a1e:	68fb      	ldr	r3, [r7, #12]
   26a20:	681b      	ldr	r3, [r3, #0]
   26a22:	617b      	str	r3, [r7, #20]
   26a24:	4b0f      	ldr	r3, [pc, #60]	; (26a64 <_usart_write_buffer+0x54>)
   26a26:	4798      	blx	r3
   26a28:	68fb      	ldr	r3, [r7, #12]
   26a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26a2c:	b29b      	uxth	r3, r3
   26a2e:	2b00      	cmp	r3, #0
   26a30:	d003      	beq.n	26a3a <_usart_write_buffer+0x2a>
   26a32:	4b0d      	ldr	r3, [pc, #52]	; (26a68 <_usart_write_buffer+0x58>)
   26a34:	4798      	blx	r3
   26a36:	2305      	movs	r3, #5
   26a38:	e010      	b.n	26a5c <_usart_write_buffer+0x4c>
   26a3a:	68fb      	ldr	r3, [r7, #12]
   26a3c:	1dba      	adds	r2, r7, #6
   26a3e:	8812      	ldrh	r2, [r2, #0]
   26a40:	85da      	strh	r2, [r3, #46]	; 0x2e
   26a42:	4b09      	ldr	r3, [pc, #36]	; (26a68 <_usart_write_buffer+0x58>)
   26a44:	4798      	blx	r3
   26a46:	68fb      	ldr	r3, [r7, #12]
   26a48:	68ba      	ldr	r2, [r7, #8]
   26a4a:	629a      	str	r2, [r3, #40]	; 0x28
   26a4c:	68fb      	ldr	r3, [r7, #12]
   26a4e:	2233      	movs	r2, #51	; 0x33
   26a50:	2105      	movs	r1, #5
   26a52:	5499      	strb	r1, [r3, r2]
   26a54:	697b      	ldr	r3, [r7, #20]
   26a56:	2201      	movs	r2, #1
   26a58:	759a      	strb	r2, [r3, #22]
   26a5a:	2300      	movs	r3, #0
   26a5c:	0018      	movs	r0, r3
   26a5e:	46bd      	mov	sp, r7
   26a60:	b006      	add	sp, #24
   26a62:	bd80      	pop	{r7, pc}
   26a64:	000269a5 	.word	0x000269a5
   26a68:	000269b9 	.word	0x000269b9

00026a6c <_usart_read_buffer>:
   26a6c:	b580      	push	{r7, lr}
   26a6e:	b086      	sub	sp, #24
   26a70:	af00      	add	r7, sp, #0
   26a72:	60f8      	str	r0, [r7, #12]
   26a74:	60b9      	str	r1, [r7, #8]
   26a76:	1dbb      	adds	r3, r7, #6
   26a78:	801a      	strh	r2, [r3, #0]
   26a7a:	68fb      	ldr	r3, [r7, #12]
   26a7c:	681b      	ldr	r3, [r3, #0]
   26a7e:	617b      	str	r3, [r7, #20]
   26a80:	4b16      	ldr	r3, [pc, #88]	; (26adc <_usart_read_buffer+0x70>)
   26a82:	4798      	blx	r3
   26a84:	68fb      	ldr	r3, [r7, #12]
   26a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26a88:	b29b      	uxth	r3, r3
   26a8a:	2b00      	cmp	r3, #0
   26a8c:	d003      	beq.n	26a96 <_usart_read_buffer+0x2a>
   26a8e:	4b14      	ldr	r3, [pc, #80]	; (26ae0 <_usart_read_buffer+0x74>)
   26a90:	4798      	blx	r3
   26a92:	2305      	movs	r3, #5
   26a94:	e01e      	b.n	26ad4 <_usart_read_buffer+0x68>
   26a96:	68fb      	ldr	r3, [r7, #12]
   26a98:	1dba      	adds	r2, r7, #6
   26a9a:	8812      	ldrh	r2, [r2, #0]
   26a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
   26a9e:	4b10      	ldr	r3, [pc, #64]	; (26ae0 <_usart_read_buffer+0x74>)
   26aa0:	4798      	blx	r3
   26aa2:	68fb      	ldr	r3, [r7, #12]
   26aa4:	68ba      	ldr	r2, [r7, #8]
   26aa6:	625a      	str	r2, [r3, #36]	; 0x24
   26aa8:	68fb      	ldr	r3, [r7, #12]
   26aaa:	2232      	movs	r2, #50	; 0x32
   26aac:	2105      	movs	r1, #5
   26aae:	5499      	strb	r1, [r3, r2]
   26ab0:	697b      	ldr	r3, [r7, #20]
   26ab2:	2204      	movs	r2, #4
   26ab4:	759a      	strb	r2, [r3, #22]
   26ab6:	68fb      	ldr	r3, [r7, #12]
   26ab8:	7a1b      	ldrb	r3, [r3, #8]
   26aba:	2b00      	cmp	r3, #0
   26abc:	d002      	beq.n	26ac4 <_usart_read_buffer+0x58>
   26abe:	697b      	ldr	r3, [r7, #20]
   26ac0:	2220      	movs	r2, #32
   26ac2:	759a      	strb	r2, [r3, #22]
   26ac4:	68fb      	ldr	r3, [r7, #12]
   26ac6:	7a5b      	ldrb	r3, [r3, #9]
   26ac8:	2b00      	cmp	r3, #0
   26aca:	d002      	beq.n	26ad2 <_usart_read_buffer+0x66>
   26acc:	697b      	ldr	r3, [r7, #20]
   26ace:	2208      	movs	r2, #8
   26ad0:	759a      	strb	r2, [r3, #22]
   26ad2:	2300      	movs	r3, #0
   26ad4:	0018      	movs	r0, r3
   26ad6:	46bd      	mov	sp, r7
   26ad8:	b006      	add	sp, #24
   26ada:	bd80      	pop	{r7, pc}
   26adc:	000269a5 	.word	0x000269a5
   26ae0:	000269b9 	.word	0x000269b9

00026ae4 <usart_register_callback>:
   26ae4:	b580      	push	{r7, lr}
   26ae6:	b084      	sub	sp, #16
   26ae8:	af00      	add	r7, sp, #0
   26aea:	60f8      	str	r0, [r7, #12]
   26aec:	60b9      	str	r1, [r7, #8]
   26aee:	1dfb      	adds	r3, r7, #7
   26af0:	701a      	strb	r2, [r3, #0]
   26af2:	1dfb      	adds	r3, r7, #7
   26af4:	781b      	ldrb	r3, [r3, #0]
   26af6:	68fa      	ldr	r2, [r7, #12]
   26af8:	3302      	adds	r3, #2
   26afa:	009b      	lsls	r3, r3, #2
   26afc:	18d3      	adds	r3, r2, r3
   26afe:	3304      	adds	r3, #4
   26b00:	68ba      	ldr	r2, [r7, #8]
   26b02:	601a      	str	r2, [r3, #0]
   26b04:	68fb      	ldr	r3, [r7, #12]
   26b06:	2230      	movs	r2, #48	; 0x30
   26b08:	5c9b      	ldrb	r3, [r3, r2]
   26b0a:	b25a      	sxtb	r2, r3
   26b0c:	1dfb      	adds	r3, r7, #7
   26b0e:	781b      	ldrb	r3, [r3, #0]
   26b10:	2101      	movs	r1, #1
   26b12:	4099      	lsls	r1, r3
   26b14:	000b      	movs	r3, r1
   26b16:	b25b      	sxtb	r3, r3
   26b18:	4313      	orrs	r3, r2
   26b1a:	b25b      	sxtb	r3, r3
   26b1c:	b2d9      	uxtb	r1, r3
   26b1e:	68fb      	ldr	r3, [r7, #12]
   26b20:	2230      	movs	r2, #48	; 0x30
   26b22:	5499      	strb	r1, [r3, r2]
   26b24:	46c0      	nop			; (mov r8, r8)
   26b26:	46bd      	mov	sp, r7
   26b28:	b004      	add	sp, #16
   26b2a:	bd80      	pop	{r7, pc}

00026b2c <usart_write_buffer_job>:
   26b2c:	b580      	push	{r7, lr}
   26b2e:	b084      	sub	sp, #16
   26b30:	af00      	add	r7, sp, #0
   26b32:	60f8      	str	r0, [r7, #12]
   26b34:	60b9      	str	r1, [r7, #8]
   26b36:	1dbb      	adds	r3, r7, #6
   26b38:	801a      	strh	r2, [r3, #0]
   26b3a:	1dbb      	adds	r3, r7, #6
   26b3c:	881b      	ldrh	r3, [r3, #0]
   26b3e:	2b00      	cmp	r3, #0
   26b40:	d101      	bne.n	26b46 <usart_write_buffer_job+0x1a>
   26b42:	2317      	movs	r3, #23
   26b44:	e010      	b.n	26b68 <usart_write_buffer_job+0x3c>
   26b46:	68fb      	ldr	r3, [r7, #12]
   26b48:	79db      	ldrb	r3, [r3, #7]
   26b4a:	2201      	movs	r2, #1
   26b4c:	4053      	eors	r3, r2
   26b4e:	b2db      	uxtb	r3, r3
   26b50:	2b00      	cmp	r3, #0
   26b52:	d001      	beq.n	26b58 <usart_write_buffer_job+0x2c>
   26b54:	231c      	movs	r3, #28
   26b56:	e007      	b.n	26b68 <usart_write_buffer_job+0x3c>
   26b58:	1dbb      	adds	r3, r7, #6
   26b5a:	881a      	ldrh	r2, [r3, #0]
   26b5c:	68b9      	ldr	r1, [r7, #8]
   26b5e:	68fb      	ldr	r3, [r7, #12]
   26b60:	0018      	movs	r0, r3
   26b62:	4b03      	ldr	r3, [pc, #12]	; (26b70 <usart_write_buffer_job+0x44>)
   26b64:	4798      	blx	r3
   26b66:	0003      	movs	r3, r0
   26b68:	0018      	movs	r0, r3
   26b6a:	46bd      	mov	sp, r7
   26b6c:	b004      	add	sp, #16
   26b6e:	bd80      	pop	{r7, pc}
   26b70:	00026a11 	.word	0x00026a11

00026b74 <usart_read_buffer_job>:
   26b74:	b580      	push	{r7, lr}
   26b76:	b084      	sub	sp, #16
   26b78:	af00      	add	r7, sp, #0
   26b7a:	60f8      	str	r0, [r7, #12]
   26b7c:	60b9      	str	r1, [r7, #8]
   26b7e:	1dbb      	adds	r3, r7, #6
   26b80:	801a      	strh	r2, [r3, #0]
   26b82:	1dbb      	adds	r3, r7, #6
   26b84:	881b      	ldrh	r3, [r3, #0]
   26b86:	2b00      	cmp	r3, #0
   26b88:	d101      	bne.n	26b8e <usart_read_buffer_job+0x1a>
   26b8a:	2317      	movs	r3, #23
   26b8c:	e010      	b.n	26bb0 <usart_read_buffer_job+0x3c>
   26b8e:	68fb      	ldr	r3, [r7, #12]
   26b90:	799b      	ldrb	r3, [r3, #6]
   26b92:	2201      	movs	r2, #1
   26b94:	4053      	eors	r3, r2
   26b96:	b2db      	uxtb	r3, r3
   26b98:	2b00      	cmp	r3, #0
   26b9a:	d001      	beq.n	26ba0 <usart_read_buffer_job+0x2c>
   26b9c:	231c      	movs	r3, #28
   26b9e:	e007      	b.n	26bb0 <usart_read_buffer_job+0x3c>
   26ba0:	1dbb      	adds	r3, r7, #6
   26ba2:	881a      	ldrh	r2, [r3, #0]
   26ba4:	68b9      	ldr	r1, [r7, #8]
   26ba6:	68fb      	ldr	r3, [r7, #12]
   26ba8:	0018      	movs	r0, r3
   26baa:	4b03      	ldr	r3, [pc, #12]	; (26bb8 <usart_read_buffer_job+0x44>)
   26bac:	4798      	blx	r3
   26bae:	0003      	movs	r3, r0
   26bb0:	0018      	movs	r0, r3
   26bb2:	46bd      	mov	sp, r7
   26bb4:	b004      	add	sp, #16
   26bb6:	bd80      	pop	{r7, pc}
   26bb8:	00026a6d 	.word	0x00026a6d

00026bbc <usart_get_job_status>:
   26bbc:	b580      	push	{r7, lr}
   26bbe:	b084      	sub	sp, #16
   26bc0:	af00      	add	r7, sp, #0
   26bc2:	6078      	str	r0, [r7, #4]
   26bc4:	000a      	movs	r2, r1
   26bc6:	1cfb      	adds	r3, r7, #3
   26bc8:	701a      	strb	r2, [r3, #0]
   26bca:	1cfb      	adds	r3, r7, #3
   26bcc:	781b      	ldrb	r3, [r3, #0]
   26bce:	2b00      	cmp	r3, #0
   26bd0:	d002      	beq.n	26bd8 <usart_get_job_status+0x1c>
   26bd2:	2b01      	cmp	r3, #1
   26bd4:	d007      	beq.n	26be6 <usart_get_job_status+0x2a>
   26bd6:	e00d      	b.n	26bf4 <usart_get_job_status+0x38>
   26bd8:	230f      	movs	r3, #15
   26bda:	18fb      	adds	r3, r7, r3
   26bdc:	687a      	ldr	r2, [r7, #4]
   26bde:	2132      	movs	r1, #50	; 0x32
   26be0:	5c52      	ldrb	r2, [r2, r1]
   26be2:	701a      	strb	r2, [r3, #0]
   26be4:	e00b      	b.n	26bfe <usart_get_job_status+0x42>
   26be6:	230f      	movs	r3, #15
   26be8:	18fb      	adds	r3, r7, r3
   26bea:	687a      	ldr	r2, [r7, #4]
   26bec:	2133      	movs	r1, #51	; 0x33
   26bee:	5c52      	ldrb	r2, [r2, r1]
   26bf0:	701a      	strb	r2, [r3, #0]
   26bf2:	e004      	b.n	26bfe <usart_get_job_status+0x42>
   26bf4:	230f      	movs	r3, #15
   26bf6:	18fb      	adds	r3, r7, r3
   26bf8:	2217      	movs	r2, #23
   26bfa:	701a      	strb	r2, [r3, #0]
   26bfc:	46c0      	nop			; (mov r8, r8)
   26bfe:	230f      	movs	r3, #15
   26c00:	18fb      	adds	r3, r7, r3
   26c02:	781b      	ldrb	r3, [r3, #0]
   26c04:	0018      	movs	r0, r3
   26c06:	46bd      	mov	sp, r7
   26c08:	b004      	add	sp, #16
   26c0a:	bd80      	pop	{r7, pc}

00026c0c <_usart_interrupt_handler>:
   26c0c:	b580      	push	{r7, lr}
   26c0e:	b088      	sub	sp, #32
   26c10:	af00      	add	r7, sp, #0
   26c12:	0002      	movs	r2, r0
   26c14:	1dfb      	adds	r3, r7, #7
   26c16:	701a      	strb	r2, [r3, #0]
   26c18:	1dfb      	adds	r3, r7, #7
   26c1a:	781a      	ldrb	r2, [r3, #0]
   26c1c:	4ba3      	ldr	r3, [pc, #652]	; (26eac <_usart_interrupt_handler+0x2a0>)
   26c1e:	0092      	lsls	r2, r2, #2
   26c20:	58d3      	ldr	r3, [r2, r3]
   26c22:	61bb      	str	r3, [r7, #24]
   26c24:	69bb      	ldr	r3, [r7, #24]
   26c26:	681b      	ldr	r3, [r3, #0]
   26c28:	617b      	str	r3, [r7, #20]
   26c2a:	69bb      	ldr	r3, [r7, #24]
   26c2c:	0018      	movs	r0, r3
   26c2e:	4ba0      	ldr	r3, [pc, #640]	; (26eb0 <_usart_interrupt_handler+0x2a4>)
   26c30:	4798      	blx	r3
   26c32:	697b      	ldr	r3, [r7, #20]
   26c34:	7e1b      	ldrb	r3, [r3, #24]
   26c36:	b2da      	uxtb	r2, r3
   26c38:	2312      	movs	r3, #18
   26c3a:	18fb      	adds	r3, r7, r3
   26c3c:	801a      	strh	r2, [r3, #0]
   26c3e:	697b      	ldr	r3, [r7, #20]
   26c40:	7d9b      	ldrb	r3, [r3, #22]
   26c42:	b2db      	uxtb	r3, r3
   26c44:	b29a      	uxth	r2, r3
   26c46:	2312      	movs	r3, #18
   26c48:	18fb      	adds	r3, r7, r3
   26c4a:	2112      	movs	r1, #18
   26c4c:	1879      	adds	r1, r7, r1
   26c4e:	8809      	ldrh	r1, [r1, #0]
   26c50:	400a      	ands	r2, r1
   26c52:	801a      	strh	r2, [r3, #0]
   26c54:	69bb      	ldr	r3, [r7, #24]
   26c56:	2230      	movs	r2, #48	; 0x30
   26c58:	5c9b      	ldrb	r3, [r3, r2]
   26c5a:	69ba      	ldr	r2, [r7, #24]
   26c5c:	2131      	movs	r1, #49	; 0x31
   26c5e:	5c52      	ldrb	r2, [r2, r1]
   26c60:	4013      	ands	r3, r2
   26c62:	b2da      	uxtb	r2, r3
   26c64:	2310      	movs	r3, #16
   26c66:	18fb      	adds	r3, r7, r3
   26c68:	801a      	strh	r2, [r3, #0]
   26c6a:	2312      	movs	r3, #18
   26c6c:	18fb      	adds	r3, r7, r3
   26c6e:	881b      	ldrh	r3, [r3, #0]
   26c70:	2201      	movs	r2, #1
   26c72:	4013      	ands	r3, r2
   26c74:	d044      	beq.n	26d00 <_usart_interrupt_handler+0xf4>
   26c76:	69bb      	ldr	r3, [r7, #24]
   26c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26c7a:	b29b      	uxth	r3, r3
   26c7c:	2b00      	cmp	r3, #0
   26c7e:	d03c      	beq.n	26cfa <_usart_interrupt_handler+0xee>
   26c80:	69bb      	ldr	r3, [r7, #24]
   26c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c84:	781b      	ldrb	r3, [r3, #0]
   26c86:	b2da      	uxtb	r2, r3
   26c88:	231c      	movs	r3, #28
   26c8a:	18fb      	adds	r3, r7, r3
   26c8c:	801a      	strh	r2, [r3, #0]
   26c8e:	69bb      	ldr	r3, [r7, #24]
   26c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c92:	1c5a      	adds	r2, r3, #1
   26c94:	69bb      	ldr	r3, [r7, #24]
   26c96:	629a      	str	r2, [r3, #40]	; 0x28
   26c98:	69bb      	ldr	r3, [r7, #24]
   26c9a:	795b      	ldrb	r3, [r3, #5]
   26c9c:	2b01      	cmp	r3, #1
   26c9e:	d113      	bne.n	26cc8 <_usart_interrupt_handler+0xbc>
   26ca0:	69bb      	ldr	r3, [r7, #24]
   26ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ca4:	781b      	ldrb	r3, [r3, #0]
   26ca6:	b2db      	uxtb	r3, r3
   26ca8:	021b      	lsls	r3, r3, #8
   26caa:	b21a      	sxth	r2, r3
   26cac:	231c      	movs	r3, #28
   26cae:	18fb      	adds	r3, r7, r3
   26cb0:	2100      	movs	r1, #0
   26cb2:	5e5b      	ldrsh	r3, [r3, r1]
   26cb4:	4313      	orrs	r3, r2
   26cb6:	b21a      	sxth	r2, r3
   26cb8:	231c      	movs	r3, #28
   26cba:	18fb      	adds	r3, r7, r3
   26cbc:	801a      	strh	r2, [r3, #0]
   26cbe:	69bb      	ldr	r3, [r7, #24]
   26cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cc2:	1c5a      	adds	r2, r3, #1
   26cc4:	69bb      	ldr	r3, [r7, #24]
   26cc6:	629a      	str	r2, [r3, #40]	; 0x28
   26cc8:	231c      	movs	r3, #28
   26cca:	18fb      	adds	r3, r7, r3
   26ccc:	881b      	ldrh	r3, [r3, #0]
   26cce:	05db      	lsls	r3, r3, #23
   26cd0:	0ddb      	lsrs	r3, r3, #23
   26cd2:	b29a      	uxth	r2, r3
   26cd4:	697b      	ldr	r3, [r7, #20]
   26cd6:	851a      	strh	r2, [r3, #40]	; 0x28
   26cd8:	69bb      	ldr	r3, [r7, #24]
   26cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26cdc:	b29b      	uxth	r3, r3
   26cde:	3b01      	subs	r3, #1
   26ce0:	b29b      	uxth	r3, r3
   26ce2:	69ba      	ldr	r2, [r7, #24]
   26ce4:	1c19      	adds	r1, r3, #0
   26ce6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   26ce8:	2b00      	cmp	r3, #0
   26cea:	d109      	bne.n	26d00 <_usart_interrupt_handler+0xf4>
   26cec:	697b      	ldr	r3, [r7, #20]
   26cee:	2201      	movs	r2, #1
   26cf0:	751a      	strb	r2, [r3, #20]
   26cf2:	697b      	ldr	r3, [r7, #20]
   26cf4:	2202      	movs	r2, #2
   26cf6:	759a      	strb	r2, [r3, #22]
   26cf8:	e002      	b.n	26d00 <_usart_interrupt_handler+0xf4>
   26cfa:	697b      	ldr	r3, [r7, #20]
   26cfc:	2201      	movs	r2, #1
   26cfe:	751a      	strb	r2, [r3, #20]
   26d00:	2312      	movs	r3, #18
   26d02:	18fb      	adds	r3, r7, r3
   26d04:	881b      	ldrh	r3, [r3, #0]
   26d06:	2202      	movs	r2, #2
   26d08:	4013      	ands	r3, r2
   26d0a:	d011      	beq.n	26d30 <_usart_interrupt_handler+0x124>
   26d0c:	697b      	ldr	r3, [r7, #20]
   26d0e:	2202      	movs	r2, #2
   26d10:	751a      	strb	r2, [r3, #20]
   26d12:	69bb      	ldr	r3, [r7, #24]
   26d14:	2233      	movs	r2, #51	; 0x33
   26d16:	2100      	movs	r1, #0
   26d18:	5499      	strb	r1, [r3, r2]
   26d1a:	2310      	movs	r3, #16
   26d1c:	18fb      	adds	r3, r7, r3
   26d1e:	881b      	ldrh	r3, [r3, #0]
   26d20:	2201      	movs	r2, #1
   26d22:	4013      	ands	r3, r2
   26d24:	d004      	beq.n	26d30 <_usart_interrupt_handler+0x124>
   26d26:	69bb      	ldr	r3, [r7, #24]
   26d28:	68db      	ldr	r3, [r3, #12]
   26d2a:	69ba      	ldr	r2, [r7, #24]
   26d2c:	0010      	movs	r0, r2
   26d2e:	4798      	blx	r3
   26d30:	2312      	movs	r3, #18
   26d32:	18fb      	adds	r3, r7, r3
   26d34:	881b      	ldrh	r3, [r3, #0]
   26d36:	2204      	movs	r2, #4
   26d38:	4013      	ands	r3, r2
   26d3a:	d100      	bne.n	26d3e <_usart_interrupt_handler+0x132>
   26d3c:	e0bd      	b.n	26eba <_usart_interrupt_handler+0x2ae>
   26d3e:	69bb      	ldr	r3, [r7, #24]
   26d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26d42:	b29b      	uxth	r3, r3
   26d44:	2b00      	cmp	r3, #0
   26d46:	d100      	bne.n	26d4a <_usart_interrupt_handler+0x13e>
   26d48:	e0b4      	b.n	26eb4 <_usart_interrupt_handler+0x2a8>
   26d4a:	697b      	ldr	r3, [r7, #20]
   26d4c:	8b5b      	ldrh	r3, [r3, #26]
   26d4e:	b29b      	uxth	r3, r3
   26d50:	b2da      	uxtb	r2, r3
   26d52:	231f      	movs	r3, #31
   26d54:	18fb      	adds	r3, r7, r3
   26d56:	213f      	movs	r1, #63	; 0x3f
   26d58:	400a      	ands	r2, r1
   26d5a:	701a      	strb	r2, [r3, #0]
   26d5c:	231f      	movs	r3, #31
   26d5e:	18fb      	adds	r3, r7, r3
   26d60:	781b      	ldrb	r3, [r3, #0]
   26d62:	2208      	movs	r2, #8
   26d64:	4013      	ands	r3, r2
   26d66:	d007      	beq.n	26d78 <_usart_interrupt_handler+0x16c>
   26d68:	231f      	movs	r3, #31
   26d6a:	18fb      	adds	r3, r7, r3
   26d6c:	221f      	movs	r2, #31
   26d6e:	18ba      	adds	r2, r7, r2
   26d70:	7812      	ldrb	r2, [r2, #0]
   26d72:	2108      	movs	r1, #8
   26d74:	438a      	bics	r2, r1
   26d76:	701a      	strb	r2, [r3, #0]
   26d78:	231f      	movs	r3, #31
   26d7a:	18fb      	adds	r3, r7, r3
   26d7c:	781b      	ldrb	r3, [r3, #0]
   26d7e:	2b00      	cmp	r3, #0
   26d80:	d050      	beq.n	26e24 <_usart_interrupt_handler+0x218>
   26d82:	231f      	movs	r3, #31
   26d84:	18fb      	adds	r3, r7, r3
   26d86:	781b      	ldrb	r3, [r3, #0]
   26d88:	2202      	movs	r2, #2
   26d8a:	4013      	ands	r3, r2
   26d8c:	d007      	beq.n	26d9e <_usart_interrupt_handler+0x192>
   26d8e:	69bb      	ldr	r3, [r7, #24]
   26d90:	2232      	movs	r2, #50	; 0x32
   26d92:	211a      	movs	r1, #26
   26d94:	5499      	strb	r1, [r3, r2]
   26d96:	697b      	ldr	r3, [r7, #20]
   26d98:	2202      	movs	r2, #2
   26d9a:	835a      	strh	r2, [r3, #26]
   26d9c:	e036      	b.n	26e0c <_usart_interrupt_handler+0x200>
   26d9e:	231f      	movs	r3, #31
   26da0:	18fb      	adds	r3, r7, r3
   26da2:	781b      	ldrb	r3, [r3, #0]
   26da4:	2204      	movs	r2, #4
   26da6:	4013      	ands	r3, r2
   26da8:	d007      	beq.n	26dba <_usart_interrupt_handler+0x1ae>
   26daa:	69bb      	ldr	r3, [r7, #24]
   26dac:	2232      	movs	r2, #50	; 0x32
   26dae:	211e      	movs	r1, #30
   26db0:	5499      	strb	r1, [r3, r2]
   26db2:	697b      	ldr	r3, [r7, #20]
   26db4:	2204      	movs	r2, #4
   26db6:	835a      	strh	r2, [r3, #26]
   26db8:	e028      	b.n	26e0c <_usart_interrupt_handler+0x200>
   26dba:	231f      	movs	r3, #31
   26dbc:	18fb      	adds	r3, r7, r3
   26dbe:	781b      	ldrb	r3, [r3, #0]
   26dc0:	2201      	movs	r2, #1
   26dc2:	4013      	ands	r3, r2
   26dc4:	d007      	beq.n	26dd6 <_usart_interrupt_handler+0x1ca>
   26dc6:	69bb      	ldr	r3, [r7, #24]
   26dc8:	2232      	movs	r2, #50	; 0x32
   26dca:	2113      	movs	r1, #19
   26dcc:	5499      	strb	r1, [r3, r2]
   26dce:	697b      	ldr	r3, [r7, #20]
   26dd0:	2201      	movs	r2, #1
   26dd2:	835a      	strh	r2, [r3, #26]
   26dd4:	e01a      	b.n	26e0c <_usart_interrupt_handler+0x200>
   26dd6:	231f      	movs	r3, #31
   26dd8:	18fb      	adds	r3, r7, r3
   26dda:	781b      	ldrb	r3, [r3, #0]
   26ddc:	2210      	movs	r2, #16
   26dde:	4013      	ands	r3, r2
   26de0:	d007      	beq.n	26df2 <_usart_interrupt_handler+0x1e6>
   26de2:	69bb      	ldr	r3, [r7, #24]
   26de4:	2232      	movs	r2, #50	; 0x32
   26de6:	2142      	movs	r1, #66	; 0x42
   26de8:	5499      	strb	r1, [r3, r2]
   26dea:	697b      	ldr	r3, [r7, #20]
   26dec:	2210      	movs	r2, #16
   26dee:	835a      	strh	r2, [r3, #26]
   26df0:	e00c      	b.n	26e0c <_usart_interrupt_handler+0x200>
   26df2:	231f      	movs	r3, #31
   26df4:	18fb      	adds	r3, r7, r3
   26df6:	781b      	ldrb	r3, [r3, #0]
   26df8:	2220      	movs	r2, #32
   26dfa:	4013      	ands	r3, r2
   26dfc:	d006      	beq.n	26e0c <_usart_interrupt_handler+0x200>
   26dfe:	69bb      	ldr	r3, [r7, #24]
   26e00:	2232      	movs	r2, #50	; 0x32
   26e02:	2141      	movs	r1, #65	; 0x41
   26e04:	5499      	strb	r1, [r3, r2]
   26e06:	697b      	ldr	r3, [r7, #20]
   26e08:	2220      	movs	r2, #32
   26e0a:	835a      	strh	r2, [r3, #26]
   26e0c:	2310      	movs	r3, #16
   26e0e:	18fb      	adds	r3, r7, r3
   26e10:	881b      	ldrh	r3, [r3, #0]
   26e12:	2204      	movs	r2, #4
   26e14:	4013      	ands	r3, r2
   26e16:	d050      	beq.n	26eba <_usart_interrupt_handler+0x2ae>
   26e18:	69bb      	ldr	r3, [r7, #24]
   26e1a:	695b      	ldr	r3, [r3, #20]
   26e1c:	69ba      	ldr	r2, [r7, #24]
   26e1e:	0010      	movs	r0, r2
   26e20:	4798      	blx	r3
   26e22:	e04a      	b.n	26eba <_usart_interrupt_handler+0x2ae>
   26e24:	697b      	ldr	r3, [r7, #20]
   26e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   26e28:	b29a      	uxth	r2, r3
   26e2a:	230e      	movs	r3, #14
   26e2c:	18fb      	adds	r3, r7, r3
   26e2e:	05d2      	lsls	r2, r2, #23
   26e30:	0dd2      	lsrs	r2, r2, #23
   26e32:	801a      	strh	r2, [r3, #0]
   26e34:	69bb      	ldr	r3, [r7, #24]
   26e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e38:	220e      	movs	r2, #14
   26e3a:	18ba      	adds	r2, r7, r2
   26e3c:	8812      	ldrh	r2, [r2, #0]
   26e3e:	b2d2      	uxtb	r2, r2
   26e40:	701a      	strb	r2, [r3, #0]
   26e42:	69bb      	ldr	r3, [r7, #24]
   26e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e46:	1c5a      	adds	r2, r3, #1
   26e48:	69bb      	ldr	r3, [r7, #24]
   26e4a:	625a      	str	r2, [r3, #36]	; 0x24
   26e4c:	69bb      	ldr	r3, [r7, #24]
   26e4e:	795b      	ldrb	r3, [r3, #5]
   26e50:	2b01      	cmp	r3, #1
   26e52:	d10d      	bne.n	26e70 <_usart_interrupt_handler+0x264>
   26e54:	69bb      	ldr	r3, [r7, #24]
   26e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e58:	220e      	movs	r2, #14
   26e5a:	18ba      	adds	r2, r7, r2
   26e5c:	8812      	ldrh	r2, [r2, #0]
   26e5e:	0a12      	lsrs	r2, r2, #8
   26e60:	b292      	uxth	r2, r2
   26e62:	b2d2      	uxtb	r2, r2
   26e64:	701a      	strb	r2, [r3, #0]
   26e66:	69bb      	ldr	r3, [r7, #24]
   26e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e6a:	1c5a      	adds	r2, r3, #1
   26e6c:	69bb      	ldr	r3, [r7, #24]
   26e6e:	625a      	str	r2, [r3, #36]	; 0x24
   26e70:	69bb      	ldr	r3, [r7, #24]
   26e72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26e74:	b29b      	uxth	r3, r3
   26e76:	3b01      	subs	r3, #1
   26e78:	b29b      	uxth	r3, r3
   26e7a:	69ba      	ldr	r2, [r7, #24]
   26e7c:	1c19      	adds	r1, r3, #0
   26e7e:	8591      	strh	r1, [r2, #44]	; 0x2c
   26e80:	2b00      	cmp	r3, #0
   26e82:	d11a      	bne.n	26eba <_usart_interrupt_handler+0x2ae>
   26e84:	697b      	ldr	r3, [r7, #20]
   26e86:	2204      	movs	r2, #4
   26e88:	751a      	strb	r2, [r3, #20]
   26e8a:	69bb      	ldr	r3, [r7, #24]
   26e8c:	2232      	movs	r2, #50	; 0x32
   26e8e:	2100      	movs	r1, #0
   26e90:	5499      	strb	r1, [r3, r2]
   26e92:	2310      	movs	r3, #16
   26e94:	18fb      	adds	r3, r7, r3
   26e96:	881b      	ldrh	r3, [r3, #0]
   26e98:	2202      	movs	r2, #2
   26e9a:	4013      	ands	r3, r2
   26e9c:	d00d      	beq.n	26eba <_usart_interrupt_handler+0x2ae>
   26e9e:	69bb      	ldr	r3, [r7, #24]
   26ea0:	691b      	ldr	r3, [r3, #16]
   26ea2:	69ba      	ldr	r2, [r7, #24]
   26ea4:	0010      	movs	r0, r2
   26ea6:	4798      	blx	r3
   26ea8:	e007      	b.n	26eba <_usart_interrupt_handler+0x2ae>
   26eaa:	46c0      	nop			; (mov r8, r8)
   26eac:	20005578 	.word	0x20005578
   26eb0:	000269ed 	.word	0x000269ed
   26eb4:	697b      	ldr	r3, [r7, #20]
   26eb6:	2204      	movs	r2, #4
   26eb8:	751a      	strb	r2, [r3, #20]
   26eba:	2312      	movs	r3, #18
   26ebc:	18fb      	adds	r3, r7, r3
   26ebe:	881b      	ldrh	r3, [r3, #0]
   26ec0:	2210      	movs	r2, #16
   26ec2:	4013      	ands	r3, r2
   26ec4:	d010      	beq.n	26ee8 <_usart_interrupt_handler+0x2dc>
   26ec6:	697b      	ldr	r3, [r7, #20]
   26ec8:	2210      	movs	r2, #16
   26eca:	751a      	strb	r2, [r3, #20]
   26ecc:	697b      	ldr	r3, [r7, #20]
   26ece:	2210      	movs	r2, #16
   26ed0:	761a      	strb	r2, [r3, #24]
   26ed2:	2310      	movs	r3, #16
   26ed4:	18fb      	adds	r3, r7, r3
   26ed6:	881b      	ldrh	r3, [r3, #0]
   26ed8:	2210      	movs	r2, #16
   26eda:	4013      	ands	r3, r2
   26edc:	d004      	beq.n	26ee8 <_usart_interrupt_handler+0x2dc>
   26ede:	69bb      	ldr	r3, [r7, #24]
   26ee0:	69db      	ldr	r3, [r3, #28]
   26ee2:	69ba      	ldr	r2, [r7, #24]
   26ee4:	0010      	movs	r0, r2
   26ee6:	4798      	blx	r3
   26ee8:	2312      	movs	r3, #18
   26eea:	18fb      	adds	r3, r7, r3
   26eec:	881b      	ldrh	r3, [r3, #0]
   26eee:	2220      	movs	r2, #32
   26ef0:	4013      	ands	r3, r2
   26ef2:	d010      	beq.n	26f16 <_usart_interrupt_handler+0x30a>
   26ef4:	697b      	ldr	r3, [r7, #20]
   26ef6:	2220      	movs	r2, #32
   26ef8:	751a      	strb	r2, [r3, #20]
   26efa:	697b      	ldr	r3, [r7, #20]
   26efc:	2220      	movs	r2, #32
   26efe:	761a      	strb	r2, [r3, #24]
   26f00:	2310      	movs	r3, #16
   26f02:	18fb      	adds	r3, r7, r3
   26f04:	881b      	ldrh	r3, [r3, #0]
   26f06:	2208      	movs	r2, #8
   26f08:	4013      	ands	r3, r2
   26f0a:	d004      	beq.n	26f16 <_usart_interrupt_handler+0x30a>
   26f0c:	69bb      	ldr	r3, [r7, #24]
   26f0e:	699b      	ldr	r3, [r3, #24]
   26f10:	69ba      	ldr	r2, [r7, #24]
   26f12:	0010      	movs	r0, r2
   26f14:	4798      	blx	r3
   26f16:	2312      	movs	r3, #18
   26f18:	18fb      	adds	r3, r7, r3
   26f1a:	881b      	ldrh	r3, [r3, #0]
   26f1c:	2208      	movs	r2, #8
   26f1e:	4013      	ands	r3, r2
   26f20:	d010      	beq.n	26f44 <_usart_interrupt_handler+0x338>
   26f22:	697b      	ldr	r3, [r7, #20]
   26f24:	2208      	movs	r2, #8
   26f26:	751a      	strb	r2, [r3, #20]
   26f28:	697b      	ldr	r3, [r7, #20]
   26f2a:	2208      	movs	r2, #8
   26f2c:	761a      	strb	r2, [r3, #24]
   26f2e:	2310      	movs	r3, #16
   26f30:	18fb      	adds	r3, r7, r3
   26f32:	881b      	ldrh	r3, [r3, #0]
   26f34:	2220      	movs	r2, #32
   26f36:	4013      	ands	r3, r2
   26f38:	d004      	beq.n	26f44 <_usart_interrupt_handler+0x338>
   26f3a:	69bb      	ldr	r3, [r7, #24]
   26f3c:	6a1b      	ldr	r3, [r3, #32]
   26f3e:	69ba      	ldr	r2, [r7, #24]
   26f40:	0010      	movs	r0, r2
   26f42:	4798      	blx	r3
   26f44:	46c0      	nop			; (mov r8, r8)
   26f46:	46bd      	mov	sp, r7
   26f48:	b008      	add	sp, #32
   26f4a:	bd80      	pop	{r7, pc}

00026f4c <system_gclk_gen_get_config_defaults>:
   26f4c:	b580      	push	{r7, lr}
   26f4e:	b082      	sub	sp, #8
   26f50:	af00      	add	r7, sp, #0
   26f52:	6078      	str	r0, [r7, #4]
   26f54:	687b      	ldr	r3, [r7, #4]
   26f56:	2201      	movs	r2, #1
   26f58:	605a      	str	r2, [r3, #4]
   26f5a:	687b      	ldr	r3, [r7, #4]
   26f5c:	2200      	movs	r2, #0
   26f5e:	705a      	strb	r2, [r3, #1]
   26f60:	687b      	ldr	r3, [r7, #4]
   26f62:	2206      	movs	r2, #6
   26f64:	701a      	strb	r2, [r3, #0]
   26f66:	687b      	ldr	r3, [r7, #4]
   26f68:	2200      	movs	r2, #0
   26f6a:	721a      	strb	r2, [r3, #8]
   26f6c:	687b      	ldr	r3, [r7, #4]
   26f6e:	2200      	movs	r2, #0
   26f70:	725a      	strb	r2, [r3, #9]
   26f72:	46c0      	nop			; (mov r8, r8)
   26f74:	46bd      	mov	sp, r7
   26f76:	b002      	add	sp, #8
   26f78:	bd80      	pop	{r7, pc}

00026f7a <system_gclk_chan_get_config_defaults>:
   26f7a:	b580      	push	{r7, lr}
   26f7c:	b082      	sub	sp, #8
   26f7e:	af00      	add	r7, sp, #0
   26f80:	6078      	str	r0, [r7, #4]
   26f82:	687b      	ldr	r3, [r7, #4]
   26f84:	2200      	movs	r2, #0
   26f86:	701a      	strb	r2, [r3, #0]
   26f88:	46c0      	nop			; (mov r8, r8)
   26f8a:	46bd      	mov	sp, r7
   26f8c:	b002      	add	sp, #8
   26f8e:	bd80      	pop	{r7, pc}

00026f90 <system_clock_source_osc8m_get_config_defaults>:
   26f90:	b580      	push	{r7, lr}
   26f92:	b082      	sub	sp, #8
   26f94:	af00      	add	r7, sp, #0
   26f96:	6078      	str	r0, [r7, #4]
   26f98:	687b      	ldr	r3, [r7, #4]
   26f9a:	2203      	movs	r2, #3
   26f9c:	701a      	strb	r2, [r3, #0]
   26f9e:	687b      	ldr	r3, [r7, #4]
   26fa0:	2200      	movs	r2, #0
   26fa2:	705a      	strb	r2, [r3, #1]
   26fa4:	687b      	ldr	r3, [r7, #4]
   26fa6:	2201      	movs	r2, #1
   26fa8:	709a      	strb	r2, [r3, #2]
   26faa:	46c0      	nop			; (mov r8, r8)
   26fac:	46bd      	mov	sp, r7
   26fae:	b002      	add	sp, #8
   26fb0:	bd80      	pop	{r7, pc}
	...

00026fb4 <system_cpu_clock_set_divider>:
   26fb4:	b580      	push	{r7, lr}
   26fb6:	b082      	sub	sp, #8
   26fb8:	af00      	add	r7, sp, #0
   26fba:	0002      	movs	r2, r0
   26fbc:	1dfb      	adds	r3, r7, #7
   26fbe:	701a      	strb	r2, [r3, #0]
   26fc0:	4a03      	ldr	r2, [pc, #12]	; (26fd0 <system_cpu_clock_set_divider+0x1c>)
   26fc2:	1dfb      	adds	r3, r7, #7
   26fc4:	781b      	ldrb	r3, [r3, #0]
   26fc6:	7213      	strb	r3, [r2, #8]
   26fc8:	46c0      	nop			; (mov r8, r8)
   26fca:	46bd      	mov	sp, r7
   26fcc:	b002      	add	sp, #8
   26fce:	bd80      	pop	{r7, pc}
   26fd0:	40000400 	.word	0x40000400

00026fd4 <system_apb_clock_set_divider>:
   26fd4:	b580      	push	{r7, lr}
   26fd6:	b082      	sub	sp, #8
   26fd8:	af00      	add	r7, sp, #0
   26fda:	0002      	movs	r2, r0
   26fdc:	1dfb      	adds	r3, r7, #7
   26fde:	701a      	strb	r2, [r3, #0]
   26fe0:	1dbb      	adds	r3, r7, #6
   26fe2:	1c0a      	adds	r2, r1, #0
   26fe4:	701a      	strb	r2, [r3, #0]
   26fe6:	1dfb      	adds	r3, r7, #7
   26fe8:	781b      	ldrb	r3, [r3, #0]
   26fea:	2b01      	cmp	r3, #1
   26fec:	d008      	beq.n	27000 <system_apb_clock_set_divider+0x2c>
   26fee:	2b02      	cmp	r3, #2
   26ff0:	d00b      	beq.n	2700a <system_apb_clock_set_divider+0x36>
   26ff2:	2b00      	cmp	r3, #0
   26ff4:	d10e      	bne.n	27014 <system_apb_clock_set_divider+0x40>
   26ff6:	4a0b      	ldr	r2, [pc, #44]	; (27024 <system_apb_clock_set_divider+0x50>)
   26ff8:	1dbb      	adds	r3, r7, #6
   26ffa:	781b      	ldrb	r3, [r3, #0]
   26ffc:	7253      	strb	r3, [r2, #9]
   26ffe:	e00b      	b.n	27018 <system_apb_clock_set_divider+0x44>
   27000:	4a08      	ldr	r2, [pc, #32]	; (27024 <system_apb_clock_set_divider+0x50>)
   27002:	1dbb      	adds	r3, r7, #6
   27004:	781b      	ldrb	r3, [r3, #0]
   27006:	7293      	strb	r3, [r2, #10]
   27008:	e006      	b.n	27018 <system_apb_clock_set_divider+0x44>
   2700a:	4a06      	ldr	r2, [pc, #24]	; (27024 <system_apb_clock_set_divider+0x50>)
   2700c:	1dbb      	adds	r3, r7, #6
   2700e:	781b      	ldrb	r3, [r3, #0]
   27010:	72d3      	strb	r3, [r2, #11]
   27012:	e001      	b.n	27018 <system_apb_clock_set_divider+0x44>
   27014:	2317      	movs	r3, #23
   27016:	e000      	b.n	2701a <system_apb_clock_set_divider+0x46>
   27018:	2300      	movs	r3, #0
   2701a:	0018      	movs	r0, r3
   2701c:	46bd      	mov	sp, r7
   2701e:	b002      	add	sp, #8
   27020:	bd80      	pop	{r7, pc}
   27022:	46c0      	nop			; (mov r8, r8)
   27024:	40000400 	.word	0x40000400

00027028 <system_clock_source_dpll_get_config_defaults>:
   27028:	b580      	push	{r7, lr}
   2702a:	b082      	sub	sp, #8
   2702c:	af00      	add	r7, sp, #0
   2702e:	6078      	str	r0, [r7, #4]
   27030:	687b      	ldr	r3, [r7, #4]
   27032:	2201      	movs	r2, #1
   27034:	701a      	strb	r2, [r3, #0]
   27036:	687b      	ldr	r3, [r7, #4]
   27038:	2200      	movs	r2, #0
   2703a:	705a      	strb	r2, [r3, #1]
   2703c:	687b      	ldr	r3, [r7, #4]
   2703e:	2200      	movs	r2, #0
   27040:	709a      	strb	r2, [r3, #2]
   27042:	687b      	ldr	r3, [r7, #4]
   27044:	2200      	movs	r2, #0
   27046:	70da      	strb	r2, [r3, #3]
   27048:	687b      	ldr	r3, [r7, #4]
   2704a:	2200      	movs	r2, #0
   2704c:	711a      	strb	r2, [r3, #4]
   2704e:	687b      	ldr	r3, [r7, #4]
   27050:	4a0a      	ldr	r2, [pc, #40]	; (2707c <system_clock_source_dpll_get_config_defaults+0x54>)
   27052:	609a      	str	r2, [r3, #8]
   27054:	687b      	ldr	r3, [r7, #4]
   27056:	2280      	movs	r2, #128	; 0x80
   27058:	0212      	lsls	r2, r2, #8
   2705a:	60da      	str	r2, [r3, #12]
   2705c:	687b      	ldr	r3, [r7, #4]
   2705e:	2201      	movs	r2, #1
   27060:	821a      	strh	r2, [r3, #16]
   27062:	687b      	ldr	r3, [r7, #4]
   27064:	2200      	movs	r2, #0
   27066:	751a      	strb	r2, [r3, #20]
   27068:	687b      	ldr	r3, [r7, #4]
   2706a:	2200      	movs	r2, #0
   2706c:	74da      	strb	r2, [r3, #19]
   2706e:	687b      	ldr	r3, [r7, #4]
   27070:	2200      	movs	r2, #0
   27072:	749a      	strb	r2, [r3, #18]
   27074:	46c0      	nop			; (mov r8, r8)
   27076:	46bd      	mov	sp, r7
   27078:	b002      	add	sp, #8
   2707a:	bd80      	pop	{r7, pc}
   2707c:	02dc6c00 	.word	0x02dc6c00

00027080 <system_flash_set_waitstates>:
   27080:	b580      	push	{r7, lr}
   27082:	b082      	sub	sp, #8
   27084:	af00      	add	r7, sp, #0
   27086:	0002      	movs	r2, r0
   27088:	1dfb      	adds	r3, r7, #7
   2708a:	701a      	strb	r2, [r3, #0]
   2708c:	4a08      	ldr	r2, [pc, #32]	; (270b0 <system_flash_set_waitstates+0x30>)
   2708e:	1dfb      	adds	r3, r7, #7
   27090:	781b      	ldrb	r3, [r3, #0]
   27092:	210f      	movs	r1, #15
   27094:	400b      	ands	r3, r1
   27096:	b2d9      	uxtb	r1, r3
   27098:	6853      	ldr	r3, [r2, #4]
   2709a:	200f      	movs	r0, #15
   2709c:	4001      	ands	r1, r0
   2709e:	0049      	lsls	r1, r1, #1
   270a0:	201e      	movs	r0, #30
   270a2:	4383      	bics	r3, r0
   270a4:	430b      	orrs	r3, r1
   270a6:	6053      	str	r3, [r2, #4]
   270a8:	46c0      	nop			; (mov r8, r8)
   270aa:	46bd      	mov	sp, r7
   270ac:	b002      	add	sp, #8
   270ae:	bd80      	pop	{r7, pc}
   270b0:	41004000 	.word	0x41004000

000270b4 <_system_dfll_wait_for_sync>:
   270b4:	b580      	push	{r7, lr}
   270b6:	af00      	add	r7, sp, #0
   270b8:	46c0      	nop			; (mov r8, r8)
   270ba:	4b04      	ldr	r3, [pc, #16]	; (270cc <_system_dfll_wait_for_sync+0x18>)
   270bc:	68db      	ldr	r3, [r3, #12]
   270be:	2210      	movs	r2, #16
   270c0:	4013      	ands	r3, r2
   270c2:	d0fa      	beq.n	270ba <_system_dfll_wait_for_sync+0x6>
   270c4:	46c0      	nop			; (mov r8, r8)
   270c6:	46bd      	mov	sp, r7
   270c8:	bd80      	pop	{r7, pc}
   270ca:	46c0      	nop			; (mov r8, r8)
   270cc:	40000800 	.word	0x40000800

000270d0 <_system_clock_source_dfll_set_config_errata_9905>:
   270d0:	b580      	push	{r7, lr}
   270d2:	af00      	add	r7, sp, #0
   270d4:	4b0c      	ldr	r3, [pc, #48]	; (27108 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270d6:	2202      	movs	r2, #2
   270d8:	849a      	strh	r2, [r3, #36]	; 0x24
   270da:	4b0c      	ldr	r3, [pc, #48]	; (2710c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   270dc:	4798      	blx	r3
   270de:	4a0a      	ldr	r2, [pc, #40]	; (27108 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270e0:	4b0b      	ldr	r3, [pc, #44]	; (27110 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270e2:	689b      	ldr	r3, [r3, #8]
   270e4:	62d3      	str	r3, [r2, #44]	; 0x2c
   270e6:	4a08      	ldr	r2, [pc, #32]	; (27108 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270e8:	4b09      	ldr	r3, [pc, #36]	; (27110 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270ea:	685b      	ldr	r3, [r3, #4]
   270ec:	6293      	str	r3, [r2, #40]	; 0x28
   270ee:	4b06      	ldr	r3, [pc, #24]	; (27108 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270f0:	2200      	movs	r2, #0
   270f2:	849a      	strh	r2, [r3, #36]	; 0x24
   270f4:	4b05      	ldr	r3, [pc, #20]	; (2710c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   270f6:	4798      	blx	r3
   270f8:	4a03      	ldr	r2, [pc, #12]	; (27108 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270fa:	4b05      	ldr	r3, [pc, #20]	; (27110 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270fc:	681b      	ldr	r3, [r3, #0]
   270fe:	b29b      	uxth	r3, r3
   27100:	8493      	strh	r3, [r2, #36]	; 0x24
   27102:	46c0      	nop			; (mov r8, r8)
   27104:	46bd      	mov	sp, r7
   27106:	bd80      	pop	{r7, pc}
   27108:	40000800 	.word	0x40000800
   2710c:	000270b5 	.word	0x000270b5
   27110:	20003d34 	.word	0x20003d34

00027114 <system_clock_source_get_hz>:
   27114:	b580      	push	{r7, lr}
   27116:	b082      	sub	sp, #8
   27118:	af00      	add	r7, sp, #0
   2711a:	0002      	movs	r2, r0
   2711c:	1dfb      	adds	r3, r7, #7
   2711e:	701a      	strb	r2, [r3, #0]
   27120:	1dfb      	adds	r3, r7, #7
   27122:	781b      	ldrb	r3, [r3, #0]
   27124:	2b08      	cmp	r3, #8
   27126:	d841      	bhi.n	271ac <system_clock_source_get_hz+0x98>
   27128:	009a      	lsls	r2, r3, #2
   2712a:	4b23      	ldr	r3, [pc, #140]	; (271b8 <system_clock_source_get_hz+0xa4>)
   2712c:	18d3      	adds	r3, r2, r3
   2712e:	681b      	ldr	r3, [r3, #0]
   27130:	469f      	mov	pc, r3
   27132:	4b22      	ldr	r3, [pc, #136]	; (271bc <system_clock_source_get_hz+0xa8>)
   27134:	691b      	ldr	r3, [r3, #16]
   27136:	e03a      	b.n	271ae <system_clock_source_get_hz+0x9a>
   27138:	4b21      	ldr	r3, [pc, #132]	; (271c0 <system_clock_source_get_hz+0xac>)
   2713a:	6a1b      	ldr	r3, [r3, #32]
   2713c:	059b      	lsls	r3, r3, #22
   2713e:	0f9b      	lsrs	r3, r3, #30
   27140:	b2db      	uxtb	r3, r3
   27142:	001a      	movs	r2, r3
   27144:	4b1f      	ldr	r3, [pc, #124]	; (271c4 <system_clock_source_get_hz+0xb0>)
   27146:	40d3      	lsrs	r3, r2
   27148:	e031      	b.n	271ae <system_clock_source_get_hz+0x9a>
   2714a:	2380      	movs	r3, #128	; 0x80
   2714c:	021b      	lsls	r3, r3, #8
   2714e:	e02e      	b.n	271ae <system_clock_source_get_hz+0x9a>
   27150:	2380      	movs	r3, #128	; 0x80
   27152:	021b      	lsls	r3, r3, #8
   27154:	e02b      	b.n	271ae <system_clock_source_get_hz+0x9a>
   27156:	4b19      	ldr	r3, [pc, #100]	; (271bc <system_clock_source_get_hz+0xa8>)
   27158:	695b      	ldr	r3, [r3, #20]
   2715a:	e028      	b.n	271ae <system_clock_source_get_hz+0x9a>
   2715c:	4b17      	ldr	r3, [pc, #92]	; (271bc <system_clock_source_get_hz+0xa8>)
   2715e:	681b      	ldr	r3, [r3, #0]
   27160:	2202      	movs	r2, #2
   27162:	4013      	ands	r3, r2
   27164:	d101      	bne.n	2716a <system_clock_source_get_hz+0x56>
   27166:	2300      	movs	r3, #0
   27168:	e021      	b.n	271ae <system_clock_source_get_hz+0x9a>
   2716a:	4b17      	ldr	r3, [pc, #92]	; (271c8 <system_clock_source_get_hz+0xb4>)
   2716c:	4798      	blx	r3
   2716e:	4b13      	ldr	r3, [pc, #76]	; (271bc <system_clock_source_get_hz+0xa8>)
   27170:	681b      	ldr	r3, [r3, #0]
   27172:	2224      	movs	r2, #36	; 0x24
   27174:	4013      	ands	r3, r2
   27176:	2b04      	cmp	r3, #4
   27178:	d109      	bne.n	2718e <system_clock_source_get_hz+0x7a>
   2717a:	2000      	movs	r0, #0
   2717c:	4b13      	ldr	r3, [pc, #76]	; (271cc <system_clock_source_get_hz+0xb8>)
   2717e:	4798      	blx	r3
   27180:	0002      	movs	r2, r0
   27182:	4b0e      	ldr	r3, [pc, #56]	; (271bc <system_clock_source_get_hz+0xa8>)
   27184:	689b      	ldr	r3, [r3, #8]
   27186:	041b      	lsls	r3, r3, #16
   27188:	0c1b      	lsrs	r3, r3, #16
   2718a:	4353      	muls	r3, r2
   2718c:	e00f      	b.n	271ae <system_clock_source_get_hz+0x9a>
   2718e:	4b10      	ldr	r3, [pc, #64]	; (271d0 <system_clock_source_get_hz+0xbc>)
   27190:	e00d      	b.n	271ae <system_clock_source_get_hz+0x9a>
   27192:	4a0b      	ldr	r2, [pc, #44]	; (271c0 <system_clock_source_get_hz+0xac>)
   27194:	2350      	movs	r3, #80	; 0x50
   27196:	5cd3      	ldrb	r3, [r2, r3]
   27198:	b2db      	uxtb	r3, r3
   2719a:	001a      	movs	r2, r3
   2719c:	2304      	movs	r3, #4
   2719e:	4013      	ands	r3, r2
   271a0:	d101      	bne.n	271a6 <system_clock_source_get_hz+0x92>
   271a2:	2300      	movs	r3, #0
   271a4:	e003      	b.n	271ae <system_clock_source_get_hz+0x9a>
   271a6:	4b05      	ldr	r3, [pc, #20]	; (271bc <system_clock_source_get_hz+0xa8>)
   271a8:	68db      	ldr	r3, [r3, #12]
   271aa:	e000      	b.n	271ae <system_clock_source_get_hz+0x9a>
   271ac:	2300      	movs	r3, #0
   271ae:	0018      	movs	r0, r3
   271b0:	46bd      	mov	sp, r7
   271b2:	b002      	add	sp, #8
   271b4:	bd80      	pop	{r7, pc}
   271b6:	46c0      	nop			; (mov r8, r8)
   271b8:	000369b8 	.word	0x000369b8
   271bc:	20003d34 	.word	0x20003d34
   271c0:	40000800 	.word	0x40000800
   271c4:	007a1200 	.word	0x007a1200
   271c8:	000270b5 	.word	0x000270b5
   271cc:	00027bb1 	.word	0x00027bb1
   271d0:	02dc6c00 	.word	0x02dc6c00

000271d4 <system_clock_source_osc8m_set_config>:
   271d4:	b580      	push	{r7, lr}
   271d6:	b084      	sub	sp, #16
   271d8:	af00      	add	r7, sp, #0
   271da:	6078      	str	r0, [r7, #4]
   271dc:	4b1a      	ldr	r3, [pc, #104]	; (27248 <system_clock_source_osc8m_set_config+0x74>)
   271de:	6a1b      	ldr	r3, [r3, #32]
   271e0:	60fb      	str	r3, [r7, #12]
   271e2:	687b      	ldr	r3, [r7, #4]
   271e4:	781b      	ldrb	r3, [r3, #0]
   271e6:	1c1a      	adds	r2, r3, #0
   271e8:	2303      	movs	r3, #3
   271ea:	4013      	ands	r3, r2
   271ec:	b2da      	uxtb	r2, r3
   271ee:	230d      	movs	r3, #13
   271f0:	18fb      	adds	r3, r7, r3
   271f2:	2103      	movs	r1, #3
   271f4:	400a      	ands	r2, r1
   271f6:	0010      	movs	r0, r2
   271f8:	781a      	ldrb	r2, [r3, #0]
   271fa:	2103      	movs	r1, #3
   271fc:	438a      	bics	r2, r1
   271fe:	1c11      	adds	r1, r2, #0
   27200:	1c02      	adds	r2, r0, #0
   27202:	430a      	orrs	r2, r1
   27204:	701a      	strb	r2, [r3, #0]
   27206:	687b      	ldr	r3, [r7, #4]
   27208:	789a      	ldrb	r2, [r3, #2]
   2720a:	230c      	movs	r3, #12
   2720c:	18fb      	adds	r3, r7, r3
   2720e:	01d0      	lsls	r0, r2, #7
   27210:	781a      	ldrb	r2, [r3, #0]
   27212:	217f      	movs	r1, #127	; 0x7f
   27214:	400a      	ands	r2, r1
   27216:	1c11      	adds	r1, r2, #0
   27218:	1c02      	adds	r2, r0, #0
   2721a:	430a      	orrs	r2, r1
   2721c:	701a      	strb	r2, [r3, #0]
   2721e:	687b      	ldr	r3, [r7, #4]
   27220:	785a      	ldrb	r2, [r3, #1]
   27222:	230c      	movs	r3, #12
   27224:	18fb      	adds	r3, r7, r3
   27226:	2101      	movs	r1, #1
   27228:	400a      	ands	r2, r1
   2722a:	0190      	lsls	r0, r2, #6
   2722c:	781a      	ldrb	r2, [r3, #0]
   2722e:	2140      	movs	r1, #64	; 0x40
   27230:	438a      	bics	r2, r1
   27232:	1c11      	adds	r1, r2, #0
   27234:	1c02      	adds	r2, r0, #0
   27236:	430a      	orrs	r2, r1
   27238:	701a      	strb	r2, [r3, #0]
   2723a:	4b03      	ldr	r3, [pc, #12]	; (27248 <system_clock_source_osc8m_set_config+0x74>)
   2723c:	68fa      	ldr	r2, [r7, #12]
   2723e:	621a      	str	r2, [r3, #32]
   27240:	46c0      	nop			; (mov r8, r8)
   27242:	46bd      	mov	sp, r7
   27244:	b004      	add	sp, #16
   27246:	bd80      	pop	{r7, pc}
   27248:	40000800 	.word	0x40000800

0002724c <system_clock_source_dpll_set_config>:
   2724c:	b580      	push	{r7, lr}
   2724e:	b086      	sub	sp, #24
   27250:	af00      	add	r7, sp, #0
   27252:	6078      	str	r0, [r7, #4]
   27254:	687b      	ldr	r3, [r7, #4]
   27256:	68db      	ldr	r3, [r3, #12]
   27258:	617b      	str	r3, [r7, #20]
   2725a:	687b      	ldr	r3, [r7, #4]
   2725c:	7d1b      	ldrb	r3, [r3, #20]
   2725e:	2b01      	cmp	r3, #1
   27260:	d10a      	bne.n	27278 <system_clock_source_dpll_set_config+0x2c>
   27262:	687b      	ldr	r3, [r7, #4]
   27264:	8a1b      	ldrh	r3, [r3, #16]
   27266:	3301      	adds	r3, #1
   27268:	005b      	lsls	r3, r3, #1
   2726a:	001a      	movs	r2, r3
   2726c:	4b36      	ldr	r3, [pc, #216]	; (27348 <system_clock_source_dpll_set_config+0xfc>)
   2726e:	0011      	movs	r1, r2
   27270:	6978      	ldr	r0, [r7, #20]
   27272:	4798      	blx	r3
   27274:	0003      	movs	r3, r0
   27276:	617b      	str	r3, [r7, #20]
   27278:	687b      	ldr	r3, [r7, #4]
   2727a:	689b      	ldr	r3, [r3, #8]
   2727c:	011a      	lsls	r2, r3, #4
   2727e:	4b32      	ldr	r3, [pc, #200]	; (27348 <system_clock_source_dpll_set_config+0xfc>)
   27280:	6979      	ldr	r1, [r7, #20]
   27282:	0010      	movs	r0, r2
   27284:	4798      	blx	r3
   27286:	0003      	movs	r3, r0
   27288:	613b      	str	r3, [r7, #16]
   2728a:	693b      	ldr	r3, [r7, #16]
   2728c:	b2da      	uxtb	r2, r3
   2728e:	230f      	movs	r3, #15
   27290:	18fb      	adds	r3, r7, r3
   27292:	210f      	movs	r1, #15
   27294:	400a      	ands	r2, r1
   27296:	701a      	strb	r2, [r3, #0]
   27298:	693b      	ldr	r3, [r7, #16]
   2729a:	091b      	lsrs	r3, r3, #4
   2729c:	3b01      	subs	r3, #1
   2729e:	613b      	str	r3, [r7, #16]
   272a0:	492a      	ldr	r1, [pc, #168]	; (2734c <system_clock_source_dpll_set_config+0x100>)
   272a2:	687b      	ldr	r3, [r7, #4]
   272a4:	781b      	ldrb	r3, [r3, #0]
   272a6:	01db      	lsls	r3, r3, #7
   272a8:	b2da      	uxtb	r2, r3
   272aa:	687b      	ldr	r3, [r7, #4]
   272ac:	785b      	ldrb	r3, [r3, #1]
   272ae:	019b      	lsls	r3, r3, #6
   272b0:	b2db      	uxtb	r3, r3
   272b2:	4313      	orrs	r3, r2
   272b4:	b2da      	uxtb	r2, r3
   272b6:	2344      	movs	r3, #68	; 0x44
   272b8:	54ca      	strb	r2, [r1, r3]
   272ba:	4b24      	ldr	r3, [pc, #144]	; (2734c <system_clock_source_dpll_set_config+0x100>)
   272bc:	220f      	movs	r2, #15
   272be:	18ba      	adds	r2, r7, r2
   272c0:	7812      	ldrb	r2, [r2, #0]
   272c2:	0412      	lsls	r2, r2, #16
   272c4:	0011      	movs	r1, r2
   272c6:	22f0      	movs	r2, #240	; 0xf0
   272c8:	0312      	lsls	r2, r2, #12
   272ca:	4011      	ands	r1, r2
   272cc:	693a      	ldr	r2, [r7, #16]
   272ce:	0512      	lsls	r2, r2, #20
   272d0:	0d12      	lsrs	r2, r2, #20
   272d2:	430a      	orrs	r2, r1
   272d4:	649a      	str	r2, [r3, #72]	; 0x48
   272d6:	4b1d      	ldr	r3, [pc, #116]	; (2734c <system_clock_source_dpll_set_config+0x100>)
   272d8:	687a      	ldr	r2, [r7, #4]
   272da:	8a12      	ldrh	r2, [r2, #16]
   272dc:	0412      	lsls	r2, r2, #16
   272de:	0011      	movs	r1, r2
   272e0:	4a1b      	ldr	r2, [pc, #108]	; (27350 <system_clock_source_dpll_set_config+0x104>)
   272e2:	4011      	ands	r1, r2
   272e4:	687a      	ldr	r2, [r7, #4]
   272e6:	7892      	ldrb	r2, [r2, #2]
   272e8:	0312      	lsls	r2, r2, #12
   272ea:	4311      	orrs	r1, r2
   272ec:	687a      	ldr	r2, [r7, #4]
   272ee:	7cd2      	ldrb	r2, [r2, #19]
   272f0:	0212      	lsls	r2, r2, #8
   272f2:	0010      	movs	r0, r2
   272f4:	22e0      	movs	r2, #224	; 0xe0
   272f6:	00d2      	lsls	r2, r2, #3
   272f8:	4002      	ands	r2, r0
   272fa:	4311      	orrs	r1, r2
   272fc:	687a      	ldr	r2, [r7, #4]
   272fe:	7d12      	ldrb	r2, [r2, #20]
   27300:	0112      	lsls	r2, r2, #4
   27302:	0010      	movs	r0, r2
   27304:	2230      	movs	r2, #48	; 0x30
   27306:	4002      	ands	r2, r0
   27308:	4311      	orrs	r1, r2
   2730a:	687a      	ldr	r2, [r7, #4]
   2730c:	78d2      	ldrb	r2, [r2, #3]
   2730e:	00d2      	lsls	r2, r2, #3
   27310:	4311      	orrs	r1, r2
   27312:	687a      	ldr	r2, [r7, #4]
   27314:	7912      	ldrb	r2, [r2, #4]
   27316:	0092      	lsls	r2, r2, #2
   27318:	4311      	orrs	r1, r2
   2731a:	687a      	ldr	r2, [r7, #4]
   2731c:	7c92      	ldrb	r2, [r2, #18]
   2731e:	0010      	movs	r0, r2
   27320:	2203      	movs	r2, #3
   27322:	4002      	ands	r2, r0
   27324:	430a      	orrs	r2, r1
   27326:	64da      	str	r2, [r3, #76]	; 0x4c
   27328:	693b      	ldr	r3, [r7, #16]
   2732a:	3301      	adds	r3, #1
   2732c:	011a      	lsls	r2, r3, #4
   2732e:	230f      	movs	r3, #15
   27330:	18fb      	adds	r3, r7, r3
   27332:	781b      	ldrb	r3, [r3, #0]
   27334:	18d3      	adds	r3, r2, r3
   27336:	697a      	ldr	r2, [r7, #20]
   27338:	4353      	muls	r3, r2
   2733a:	091a      	lsrs	r2, r3, #4
   2733c:	4b05      	ldr	r3, [pc, #20]	; (27354 <system_clock_source_dpll_set_config+0x108>)
   2733e:	60da      	str	r2, [r3, #12]
   27340:	46c0      	nop			; (mov r8, r8)
   27342:	46bd      	mov	sp, r7
   27344:	b006      	add	sp, #24
   27346:	bd80      	pop	{r7, pc}
   27348:	00030549 	.word	0x00030549
   2734c:	40000800 	.word	0x40000800
   27350:	07ff0000 	.word	0x07ff0000
   27354:	20003d34 	.word	0x20003d34

00027358 <system_clock_source_enable>:
   27358:	b580      	push	{r7, lr}
   2735a:	b082      	sub	sp, #8
   2735c:	af00      	add	r7, sp, #0
   2735e:	0002      	movs	r2, r0
   27360:	1dfb      	adds	r3, r7, #7
   27362:	701a      	strb	r2, [r3, #0]
   27364:	1dfb      	adds	r3, r7, #7
   27366:	781b      	ldrb	r3, [r3, #0]
   27368:	2b08      	cmp	r3, #8
   2736a:	d83b      	bhi.n	273e4 <system_clock_source_enable+0x8c>
   2736c:	009a      	lsls	r2, r3, #2
   2736e:	4b21      	ldr	r3, [pc, #132]	; (273f4 <system_clock_source_enable+0x9c>)
   27370:	18d3      	adds	r3, r2, r3
   27372:	681b      	ldr	r3, [r3, #0]
   27374:	469f      	mov	pc, r3
   27376:	4b20      	ldr	r3, [pc, #128]	; (273f8 <system_clock_source_enable+0xa0>)
   27378:	4a1f      	ldr	r2, [pc, #124]	; (273f8 <system_clock_source_enable+0xa0>)
   2737a:	6a12      	ldr	r2, [r2, #32]
   2737c:	2102      	movs	r1, #2
   2737e:	430a      	orrs	r2, r1
   27380:	621a      	str	r2, [r3, #32]
   27382:	2300      	movs	r3, #0
   27384:	e031      	b.n	273ea <system_clock_source_enable+0x92>
   27386:	4b1c      	ldr	r3, [pc, #112]	; (273f8 <system_clock_source_enable+0xa0>)
   27388:	4a1b      	ldr	r2, [pc, #108]	; (273f8 <system_clock_source_enable+0xa0>)
   2738a:	6992      	ldr	r2, [r2, #24]
   2738c:	2102      	movs	r1, #2
   2738e:	430a      	orrs	r2, r1
   27390:	619a      	str	r2, [r3, #24]
   27392:	e029      	b.n	273e8 <system_clock_source_enable+0x90>
   27394:	4a18      	ldr	r2, [pc, #96]	; (273f8 <system_clock_source_enable+0xa0>)
   27396:	4b18      	ldr	r3, [pc, #96]	; (273f8 <system_clock_source_enable+0xa0>)
   27398:	8a1b      	ldrh	r3, [r3, #16]
   2739a:	b29b      	uxth	r3, r3
   2739c:	2102      	movs	r1, #2
   2739e:	430b      	orrs	r3, r1
   273a0:	b29b      	uxth	r3, r3
   273a2:	8213      	strh	r3, [r2, #16]
   273a4:	e020      	b.n	273e8 <system_clock_source_enable+0x90>
   273a6:	4a14      	ldr	r2, [pc, #80]	; (273f8 <system_clock_source_enable+0xa0>)
   273a8:	4b13      	ldr	r3, [pc, #76]	; (273f8 <system_clock_source_enable+0xa0>)
   273aa:	8a9b      	ldrh	r3, [r3, #20]
   273ac:	b29b      	uxth	r3, r3
   273ae:	2102      	movs	r1, #2
   273b0:	430b      	orrs	r3, r1
   273b2:	b29b      	uxth	r3, r3
   273b4:	8293      	strh	r3, [r2, #20]
   273b6:	e017      	b.n	273e8 <system_clock_source_enable+0x90>
   273b8:	4b10      	ldr	r3, [pc, #64]	; (273fc <system_clock_source_enable+0xa4>)
   273ba:	681b      	ldr	r3, [r3, #0]
   273bc:	2202      	movs	r2, #2
   273be:	431a      	orrs	r2, r3
   273c0:	4b0e      	ldr	r3, [pc, #56]	; (273fc <system_clock_source_enable+0xa4>)
   273c2:	601a      	str	r2, [r3, #0]
   273c4:	4b0e      	ldr	r3, [pc, #56]	; (27400 <system_clock_source_enable+0xa8>)
   273c6:	4798      	blx	r3
   273c8:	e00e      	b.n	273e8 <system_clock_source_enable+0x90>
   273ca:	4a0b      	ldr	r2, [pc, #44]	; (273f8 <system_clock_source_enable+0xa0>)
   273cc:	490a      	ldr	r1, [pc, #40]	; (273f8 <system_clock_source_enable+0xa0>)
   273ce:	2344      	movs	r3, #68	; 0x44
   273d0:	5ccb      	ldrb	r3, [r1, r3]
   273d2:	b2db      	uxtb	r3, r3
   273d4:	2102      	movs	r1, #2
   273d6:	430b      	orrs	r3, r1
   273d8:	b2d9      	uxtb	r1, r3
   273da:	2344      	movs	r3, #68	; 0x44
   273dc:	54d1      	strb	r1, [r2, r3]
   273de:	e003      	b.n	273e8 <system_clock_source_enable+0x90>
   273e0:	2300      	movs	r3, #0
   273e2:	e002      	b.n	273ea <system_clock_source_enable+0x92>
   273e4:	2317      	movs	r3, #23
   273e6:	e000      	b.n	273ea <system_clock_source_enable+0x92>
   273e8:	2300      	movs	r3, #0
   273ea:	0018      	movs	r0, r3
   273ec:	46bd      	mov	sp, r7
   273ee:	b002      	add	sp, #8
   273f0:	bd80      	pop	{r7, pc}
   273f2:	46c0      	nop			; (mov r8, r8)
   273f4:	000369dc 	.word	0x000369dc
   273f8:	40000800 	.word	0x40000800
   273fc:	20003d34 	.word	0x20003d34
   27400:	000270d1 	.word	0x000270d1

00027404 <system_clock_source_is_ready>:
   27404:	b580      	push	{r7, lr}
   27406:	b084      	sub	sp, #16
   27408:	af00      	add	r7, sp, #0
   2740a:	0002      	movs	r2, r0
   2740c:	1dfb      	adds	r3, r7, #7
   2740e:	701a      	strb	r2, [r3, #0]
   27410:	2300      	movs	r3, #0
   27412:	60fb      	str	r3, [r7, #12]
   27414:	1dfb      	adds	r3, r7, #7
   27416:	781b      	ldrb	r3, [r3, #0]
   27418:	2b08      	cmp	r3, #8
   2741a:	d821      	bhi.n	27460 <system_clock_source_is_ready+0x5c>
   2741c:	009a      	lsls	r2, r3, #2
   2741e:	4b18      	ldr	r3, [pc, #96]	; (27480 <system_clock_source_is_ready+0x7c>)
   27420:	18d3      	adds	r3, r2, r3
   27422:	681b      	ldr	r3, [r3, #0]
   27424:	469f      	mov	pc, r3
   27426:	2308      	movs	r3, #8
   27428:	60fb      	str	r3, [r7, #12]
   2742a:	e01b      	b.n	27464 <system_clock_source_is_ready+0x60>
   2742c:	2304      	movs	r3, #4
   2742e:	60fb      	str	r3, [r7, #12]
   27430:	e018      	b.n	27464 <system_clock_source_is_ready+0x60>
   27432:	2301      	movs	r3, #1
   27434:	60fb      	str	r3, [r7, #12]
   27436:	e015      	b.n	27464 <system_clock_source_is_ready+0x60>
   27438:	2302      	movs	r3, #2
   2743a:	60fb      	str	r3, [r7, #12]
   2743c:	e012      	b.n	27464 <system_clock_source_is_ready+0x60>
   2743e:	2310      	movs	r3, #16
   27440:	60fb      	str	r3, [r7, #12]
   27442:	e00f      	b.n	27464 <system_clock_source_is_ready+0x60>
   27444:	4a0f      	ldr	r2, [pc, #60]	; (27484 <system_clock_source_is_ready+0x80>)
   27446:	2350      	movs	r3, #80	; 0x50
   27448:	5cd3      	ldrb	r3, [r2, r3]
   2744a:	b2db      	uxtb	r3, r3
   2744c:	001a      	movs	r2, r3
   2744e:	2303      	movs	r3, #3
   27450:	4013      	ands	r3, r2
   27452:	3b03      	subs	r3, #3
   27454:	425a      	negs	r2, r3
   27456:	4153      	adcs	r3, r2
   27458:	b2db      	uxtb	r3, r3
   2745a:	e00c      	b.n	27476 <system_clock_source_is_ready+0x72>
   2745c:	2301      	movs	r3, #1
   2745e:	e00a      	b.n	27476 <system_clock_source_is_ready+0x72>
   27460:	2300      	movs	r3, #0
   27462:	e008      	b.n	27476 <system_clock_source_is_ready+0x72>
   27464:	4b07      	ldr	r3, [pc, #28]	; (27484 <system_clock_source_is_ready+0x80>)
   27466:	68db      	ldr	r3, [r3, #12]
   27468:	68fa      	ldr	r2, [r7, #12]
   2746a:	401a      	ands	r2, r3
   2746c:	68fb      	ldr	r3, [r7, #12]
   2746e:	1ad3      	subs	r3, r2, r3
   27470:	425a      	negs	r2, r3
   27472:	4153      	adcs	r3, r2
   27474:	b2db      	uxtb	r3, r3
   27476:	0018      	movs	r0, r3
   27478:	46bd      	mov	sp, r7
   2747a:	b004      	add	sp, #16
   2747c:	bd80      	pop	{r7, pc}
   2747e:	46c0      	nop			; (mov r8, r8)
   27480:	00036a00 	.word	0x00036a00
   27484:	40000800 	.word	0x40000800

00027488 <_switch_peripheral_gclk>:
   27488:	b580      	push	{r7, lr}
   2748a:	b082      	sub	sp, #8
   2748c:	af00      	add	r7, sp, #0
   2748e:	003b      	movs	r3, r7
   27490:	2203      	movs	r2, #3
   27492:	701a      	strb	r2, [r3, #0]
   27494:	2300      	movs	r3, #0
   27496:	607b      	str	r3, [r7, #4]
   27498:	e009      	b.n	274ae <_switch_peripheral_gclk+0x26>
   2749a:	687b      	ldr	r3, [r7, #4]
   2749c:	b2db      	uxtb	r3, r3
   2749e:	003a      	movs	r2, r7
   274a0:	0011      	movs	r1, r2
   274a2:	0018      	movs	r0, r3
   274a4:	4b05      	ldr	r3, [pc, #20]	; (274bc <_switch_peripheral_gclk+0x34>)
   274a6:	4798      	blx	r3
   274a8:	687b      	ldr	r3, [r7, #4]
   274aa:	3301      	adds	r3, #1
   274ac:	607b      	str	r3, [r7, #4]
   274ae:	687b      	ldr	r3, [r7, #4]
   274b0:	2b24      	cmp	r3, #36	; 0x24
   274b2:	d9f2      	bls.n	2749a <_switch_peripheral_gclk+0x12>
   274b4:	46c0      	nop			; (mov r8, r8)
   274b6:	46bd      	mov	sp, r7
   274b8:	b002      	add	sp, #8
   274ba:	bd80      	pop	{r7, pc}
   274bc:	00027a8d 	.word	0x00027a8d

000274c0 <system_clock_init>:
   274c0:	b580      	push	{r7, lr}
   274c2:	b0a6      	sub	sp, #152	; 0x98
   274c4:	af00      	add	r7, sp, #0
   274c6:	4b92      	ldr	r3, [pc, #584]	; (27710 <system_clock_init+0x250>)
   274c8:	22c2      	movs	r2, #194	; 0xc2
   274ca:	00d2      	lsls	r2, r2, #3
   274cc:	609a      	str	r2, [r3, #8]
   274ce:	2003      	movs	r0, #3
   274d0:	4b90      	ldr	r3, [pc, #576]	; (27714 <system_clock_init+0x254>)
   274d2:	4798      	blx	r3
   274d4:	4b90      	ldr	r3, [pc, #576]	; (27718 <system_clock_init+0x258>)
   274d6:	4798      	blx	r3
   274d8:	2394      	movs	r3, #148	; 0x94
   274da:	18fb      	adds	r3, r7, r3
   274dc:	0018      	movs	r0, r3
   274de:	4b8f      	ldr	r3, [pc, #572]	; (2771c <system_clock_init+0x25c>)
   274e0:	4798      	blx	r3
   274e2:	2394      	movs	r3, #148	; 0x94
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	2200      	movs	r2, #0
   274e8:	701a      	strb	r2, [r3, #0]
   274ea:	2394      	movs	r3, #148	; 0x94
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	2201      	movs	r2, #1
   274f0:	709a      	strb	r2, [r3, #2]
   274f2:	2394      	movs	r3, #148	; 0x94
   274f4:	18fb      	adds	r3, r7, r3
   274f6:	2200      	movs	r2, #0
   274f8:	705a      	strb	r2, [r3, #1]
   274fa:	2394      	movs	r3, #148	; 0x94
   274fc:	18fb      	adds	r3, r7, r3
   274fe:	0018      	movs	r0, r3
   27500:	4b87      	ldr	r3, [pc, #540]	; (27720 <system_clock_init+0x260>)
   27502:	4798      	blx	r3
   27504:	2006      	movs	r0, #6
   27506:	4b87      	ldr	r3, [pc, #540]	; (27724 <system_clock_init+0x264>)
   27508:	4798      	blx	r3
   2750a:	4b87      	ldr	r3, [pc, #540]	; (27728 <system_clock_init+0x268>)
   2750c:	4798      	blx	r3
   2750e:	2360      	movs	r3, #96	; 0x60
   27510:	18fb      	adds	r3, r7, r3
   27512:	0018      	movs	r0, r3
   27514:	4b85      	ldr	r3, [pc, #532]	; (2772c <system_clock_init+0x26c>)
   27516:	4798      	blx	r3
   27518:	2360      	movs	r3, #96	; 0x60
   2751a:	18fb      	adds	r3, r7, r3
   2751c:	2206      	movs	r2, #6
   2751e:	701a      	strb	r2, [r3, #0]
   27520:	2360      	movs	r3, #96	; 0x60
   27522:	18fb      	adds	r3, r7, r3
   27524:	2208      	movs	r2, #8
   27526:	605a      	str	r2, [r3, #4]
   27528:	2360      	movs	r3, #96	; 0x60
   2752a:	18fb      	adds	r3, r7, r3
   2752c:	2200      	movs	r2, #0
   2752e:	721a      	strb	r2, [r3, #8]
   27530:	2360      	movs	r3, #96	; 0x60
   27532:	18fb      	adds	r3, r7, r3
   27534:	2200      	movs	r2, #0
   27536:	725a      	strb	r2, [r3, #9]
   27538:	2360      	movs	r3, #96	; 0x60
   2753a:	18fb      	adds	r3, r7, r3
   2753c:	0019      	movs	r1, r3
   2753e:	2001      	movs	r0, #1
   27540:	4b7b      	ldr	r3, [pc, #492]	; (27730 <system_clock_init+0x270>)
   27542:	4798      	blx	r3
   27544:	2001      	movs	r0, #1
   27546:	4b7b      	ldr	r3, [pc, #492]	; (27734 <system_clock_init+0x274>)
   27548:	4798      	blx	r3
   2754a:	2354      	movs	r3, #84	; 0x54
   2754c:	18fb      	adds	r3, r7, r3
   2754e:	0018      	movs	r0, r3
   27550:	4b76      	ldr	r3, [pc, #472]	; (2772c <system_clock_init+0x26c>)
   27552:	4798      	blx	r3
   27554:	2354      	movs	r3, #84	; 0x54
   27556:	18fb      	adds	r3, r7, r3
   27558:	2203      	movs	r2, #3
   2755a:	701a      	strb	r2, [r3, #0]
   2755c:	2354      	movs	r3, #84	; 0x54
   2755e:	18fb      	adds	r3, r7, r3
   27560:	2201      	movs	r2, #1
   27562:	605a      	str	r2, [r3, #4]
   27564:	2354      	movs	r3, #84	; 0x54
   27566:	18fb      	adds	r3, r7, r3
   27568:	2201      	movs	r2, #1
   2756a:	721a      	strb	r2, [r3, #8]
   2756c:	2354      	movs	r3, #84	; 0x54
   2756e:	18fb      	adds	r3, r7, r3
   27570:	2200      	movs	r2, #0
   27572:	725a      	strb	r2, [r3, #9]
   27574:	2354      	movs	r3, #84	; 0x54
   27576:	18fb      	adds	r3, r7, r3
   27578:	0019      	movs	r1, r3
   2757a:	2002      	movs	r0, #2
   2757c:	4b6c      	ldr	r3, [pc, #432]	; (27730 <system_clock_init+0x270>)
   2757e:	4798      	blx	r3
   27580:	2002      	movs	r0, #2
   27582:	4b6c      	ldr	r3, [pc, #432]	; (27734 <system_clock_init+0x274>)
   27584:	4798      	blx	r3
   27586:	233c      	movs	r3, #60	; 0x3c
   27588:	18fb      	adds	r3, r7, r3
   2758a:	0018      	movs	r0, r3
   2758c:	4b67      	ldr	r3, [pc, #412]	; (2772c <system_clock_init+0x26c>)
   2758e:	4798      	blx	r3
   27590:	233c      	movs	r3, #60	; 0x3c
   27592:	18fb      	adds	r3, r7, r3
   27594:	2203      	movs	r2, #3
   27596:	701a      	strb	r2, [r3, #0]
   27598:	233c      	movs	r3, #60	; 0x3c
   2759a:	18fb      	adds	r3, r7, r3
   2759c:	2220      	movs	r2, #32
   2759e:	605a      	str	r2, [r3, #4]
   275a0:	233c      	movs	r3, #60	; 0x3c
   275a2:	18fb      	adds	r3, r7, r3
   275a4:	2200      	movs	r2, #0
   275a6:	721a      	strb	r2, [r3, #8]
   275a8:	233c      	movs	r3, #60	; 0x3c
   275aa:	18fb      	adds	r3, r7, r3
   275ac:	2200      	movs	r2, #0
   275ae:	725a      	strb	r2, [r3, #9]
   275b0:	233c      	movs	r3, #60	; 0x3c
   275b2:	18fb      	adds	r3, r7, r3
   275b4:	0019      	movs	r1, r3
   275b6:	2004      	movs	r0, #4
   275b8:	4b5d      	ldr	r3, [pc, #372]	; (27730 <system_clock_init+0x270>)
   275ba:	4798      	blx	r3
   275bc:	2004      	movs	r0, #4
   275be:	4b5d      	ldr	r3, [pc, #372]	; (27734 <system_clock_init+0x274>)
   275c0:	4798      	blx	r3
   275c2:	2330      	movs	r3, #48	; 0x30
   275c4:	18fb      	adds	r3, r7, r3
   275c6:	0018      	movs	r0, r3
   275c8:	4b58      	ldr	r3, [pc, #352]	; (2772c <system_clock_init+0x26c>)
   275ca:	4798      	blx	r3
   275cc:	2330      	movs	r3, #48	; 0x30
   275ce:	18fb      	adds	r3, r7, r3
   275d0:	2206      	movs	r2, #6
   275d2:	701a      	strb	r2, [r3, #0]
   275d4:	2330      	movs	r3, #48	; 0x30
   275d6:	18fb      	adds	r3, r7, r3
   275d8:	2201      	movs	r2, #1
   275da:	605a      	str	r2, [r3, #4]
   275dc:	2330      	movs	r3, #48	; 0x30
   275de:	18fb      	adds	r3, r7, r3
   275e0:	2200      	movs	r2, #0
   275e2:	721a      	strb	r2, [r3, #8]
   275e4:	2330      	movs	r3, #48	; 0x30
   275e6:	18fb      	adds	r3, r7, r3
   275e8:	2200      	movs	r2, #0
   275ea:	725a      	strb	r2, [r3, #9]
   275ec:	2330      	movs	r3, #48	; 0x30
   275ee:	18fb      	adds	r3, r7, r3
   275f0:	0019      	movs	r1, r3
   275f2:	2005      	movs	r0, #5
   275f4:	4b4e      	ldr	r3, [pc, #312]	; (27730 <system_clock_init+0x270>)
   275f6:	4798      	blx	r3
   275f8:	2005      	movs	r0, #5
   275fa:	4b4e      	ldr	r3, [pc, #312]	; (27734 <system_clock_init+0x274>)
   275fc:	4798      	blx	r3
   275fe:	2390      	movs	r3, #144	; 0x90
   27600:	18fb      	adds	r3, r7, r3
   27602:	0018      	movs	r0, r3
   27604:	4b4c      	ldr	r3, [pc, #304]	; (27738 <system_clock_init+0x278>)
   27606:	4798      	blx	r3
   27608:	2390      	movs	r3, #144	; 0x90
   2760a:	18fb      	adds	r3, r7, r3
   2760c:	2201      	movs	r2, #1
   2760e:	701a      	strb	r2, [r3, #0]
   27610:	2390      	movs	r3, #144	; 0x90
   27612:	18fb      	adds	r3, r7, r3
   27614:	0019      	movs	r1, r3
   27616:	2001      	movs	r0, #1
   27618:	4b48      	ldr	r3, [pc, #288]	; (2773c <system_clock_init+0x27c>)
   2761a:	4798      	blx	r3
   2761c:	2001      	movs	r0, #1
   2761e:	4b48      	ldr	r3, [pc, #288]	; (27740 <system_clock_init+0x280>)
   27620:	4798      	blx	r3
   27622:	2378      	movs	r3, #120	; 0x78
   27624:	18fb      	adds	r3, r7, r3
   27626:	0018      	movs	r0, r3
   27628:	4b46      	ldr	r3, [pc, #280]	; (27744 <system_clock_init+0x284>)
   2762a:	4798      	blx	r3
   2762c:	2378      	movs	r3, #120	; 0x78
   2762e:	18fb      	adds	r3, r7, r3
   27630:	2200      	movs	r2, #0
   27632:	701a      	strb	r2, [r3, #0]
   27634:	2378      	movs	r3, #120	; 0x78
   27636:	18fb      	adds	r3, r7, r3
   27638:	2200      	movs	r2, #0
   2763a:	705a      	strb	r2, [r3, #1]
   2763c:	2378      	movs	r3, #120	; 0x78
   2763e:	18fb      	adds	r3, r7, r3
   27640:	2200      	movs	r2, #0
   27642:	709a      	strb	r2, [r3, #2]
   27644:	2378      	movs	r3, #120	; 0x78
   27646:	18fb      	adds	r3, r7, r3
   27648:	2200      	movs	r2, #0
   2764a:	70da      	strb	r2, [r3, #3]
   2764c:	2378      	movs	r3, #120	; 0x78
   2764e:	18fb      	adds	r3, r7, r3
   27650:	2200      	movs	r2, #0
   27652:	711a      	strb	r2, [r3, #4]
   27654:	2378      	movs	r3, #120	; 0x78
   27656:	18fb      	adds	r3, r7, r3
   27658:	2200      	movs	r2, #0
   2765a:	749a      	strb	r2, [r3, #18]
   2765c:	2378      	movs	r3, #120	; 0x78
   2765e:	18fb      	adds	r3, r7, r3
   27660:	2200      	movs	r2, #0
   27662:	74da      	strb	r2, [r3, #19]
   27664:	2378      	movs	r3, #120	; 0x78
   27666:	18fb      	adds	r3, r7, r3
   27668:	2202      	movs	r2, #2
   2766a:	751a      	strb	r2, [r3, #20]
   2766c:	2378      	movs	r3, #120	; 0x78
   2766e:	18fb      	adds	r3, r7, r3
   27670:	4a35      	ldr	r2, [pc, #212]	; (27748 <system_clock_init+0x288>)
   27672:	60da      	str	r2, [r3, #12]
   27674:	2378      	movs	r3, #120	; 0x78
   27676:	18fb      	adds	r3, r7, r3
   27678:	2201      	movs	r2, #1
   2767a:	821a      	strh	r2, [r3, #16]
   2767c:	2378      	movs	r3, #120	; 0x78
   2767e:	18fb      	adds	r3, r7, r3
   27680:	4a32      	ldr	r2, [pc, #200]	; (2774c <system_clock_init+0x28c>)
   27682:	609a      	str	r2, [r3, #8]
   27684:	2378      	movs	r3, #120	; 0x78
   27686:	18fb      	adds	r3, r7, r3
   27688:	0018      	movs	r0, r3
   2768a:	4b31      	ldr	r3, [pc, #196]	; (27750 <system_clock_init+0x290>)
   2768c:	4798      	blx	r3
   2768e:	2008      	movs	r0, #8
   27690:	4b24      	ldr	r3, [pc, #144]	; (27724 <system_clock_init+0x264>)
   27692:	4798      	blx	r3
   27694:	46c0      	nop			; (mov r8, r8)
   27696:	2008      	movs	r0, #8
   27698:	4b2e      	ldr	r3, [pc, #184]	; (27754 <system_clock_init+0x294>)
   2769a:	4798      	blx	r3
   2769c:	0003      	movs	r3, r0
   2769e:	001a      	movs	r2, r3
   276a0:	2301      	movs	r3, #1
   276a2:	4053      	eors	r3, r2
   276a4:	b2db      	uxtb	r3, r3
   276a6:	2b00      	cmp	r3, #0
   276a8:	d1f5      	bne.n	27696 <system_clock_init+0x1d6>
   276aa:	4919      	ldr	r1, [pc, #100]	; (27710 <system_clock_init+0x250>)
   276ac:	2244      	movs	r2, #68	; 0x44
   276ae:	5c8b      	ldrb	r3, [r1, r2]
   276b0:	2080      	movs	r0, #128	; 0x80
   276b2:	4240      	negs	r0, r0
   276b4:	4303      	orrs	r3, r0
   276b6:	548b      	strb	r3, [r1, r2]
   276b8:	2000      	movs	r0, #0
   276ba:	4b27      	ldr	r3, [pc, #156]	; (27758 <system_clock_init+0x298>)
   276bc:	4798      	blx	r3
   276be:	2100      	movs	r1, #0
   276c0:	2000      	movs	r0, #0
   276c2:	4b26      	ldr	r3, [pc, #152]	; (2775c <system_clock_init+0x29c>)
   276c4:	4798      	blx	r3
   276c6:	2100      	movs	r1, #0
   276c8:	2001      	movs	r0, #1
   276ca:	4b24      	ldr	r3, [pc, #144]	; (2775c <system_clock_init+0x29c>)
   276cc:	4798      	blx	r3
   276ce:	2100      	movs	r1, #0
   276d0:	2002      	movs	r0, #2
   276d2:	4b22      	ldr	r3, [pc, #136]	; (2775c <system_clock_init+0x29c>)
   276d4:	4798      	blx	r3
   276d6:	003b      	movs	r3, r7
   276d8:	0018      	movs	r0, r3
   276da:	4b14      	ldr	r3, [pc, #80]	; (2772c <system_clock_init+0x26c>)
   276dc:	4798      	blx	r3
   276de:	003b      	movs	r3, r7
   276e0:	2208      	movs	r2, #8
   276e2:	701a      	strb	r2, [r3, #0]
   276e4:	003b      	movs	r3, r7
   276e6:	2201      	movs	r2, #1
   276e8:	605a      	str	r2, [r3, #4]
   276ea:	003b      	movs	r3, r7
   276ec:	2200      	movs	r2, #0
   276ee:	721a      	strb	r2, [r3, #8]
   276f0:	003b      	movs	r3, r7
   276f2:	2201      	movs	r2, #1
   276f4:	725a      	strb	r2, [r3, #9]
   276f6:	003b      	movs	r3, r7
   276f8:	0019      	movs	r1, r3
   276fa:	2000      	movs	r0, #0
   276fc:	4b0c      	ldr	r3, [pc, #48]	; (27730 <system_clock_init+0x270>)
   276fe:	4798      	blx	r3
   27700:	2000      	movs	r0, #0
   27702:	4b0c      	ldr	r3, [pc, #48]	; (27734 <system_clock_init+0x274>)
   27704:	4798      	blx	r3
   27706:	46c0      	nop			; (mov r8, r8)
   27708:	46bd      	mov	sp, r7
   2770a:	b026      	add	sp, #152	; 0x98
   2770c:	bd80      	pop	{r7, pc}
   2770e:	46c0      	nop			; (mov r8, r8)
   27710:	40000800 	.word	0x40000800
   27714:	00027081 	.word	0x00027081
   27718:	00027489 	.word	0x00027489
   2771c:	00026f91 	.word	0x00026f91
   27720:	000271d5 	.word	0x000271d5
   27724:	00027359 	.word	0x00027359
   27728:	00027805 	.word	0x00027805
   2772c:	00026f4d 	.word	0x00026f4d
   27730:	00027835 	.word	0x00027835
   27734:	00027959 	.word	0x00027959
   27738:	00026f7b 	.word	0x00026f7b
   2773c:	00027a8d 	.word	0x00027a8d
   27740:	00027ad1 	.word	0x00027ad1
   27744:	00027029 	.word	0x00027029
   27748:	000f4240 	.word	0x000f4240
   2774c:	02dc6c00 	.word	0x02dc6c00
   27750:	0002724d 	.word	0x0002724d
   27754:	00027405 	.word	0x00027405
   27758:	00026fb5 	.word	0x00026fb5
   2775c:	00026fd5 	.word	0x00026fd5

00027760 <system_apb_clock_set_mask>:
   27760:	b580      	push	{r7, lr}
   27762:	b082      	sub	sp, #8
   27764:	af00      	add	r7, sp, #0
   27766:	0002      	movs	r2, r0
   27768:	6039      	str	r1, [r7, #0]
   2776a:	1dfb      	adds	r3, r7, #7
   2776c:	701a      	strb	r2, [r3, #0]
   2776e:	1dfb      	adds	r3, r7, #7
   27770:	781b      	ldrb	r3, [r3, #0]
   27772:	2b01      	cmp	r3, #1
   27774:	d00a      	beq.n	2778c <system_apb_clock_set_mask+0x2c>
   27776:	2b02      	cmp	r3, #2
   27778:	d00f      	beq.n	2779a <system_apb_clock_set_mask+0x3a>
   2777a:	2b00      	cmp	r3, #0
   2777c:	d114      	bne.n	277a8 <system_apb_clock_set_mask+0x48>
   2777e:	4b0e      	ldr	r3, [pc, #56]	; (277b8 <system_apb_clock_set_mask+0x58>)
   27780:	4a0d      	ldr	r2, [pc, #52]	; (277b8 <system_apb_clock_set_mask+0x58>)
   27782:	6991      	ldr	r1, [r2, #24]
   27784:	683a      	ldr	r2, [r7, #0]
   27786:	430a      	orrs	r2, r1
   27788:	619a      	str	r2, [r3, #24]
   2778a:	e00f      	b.n	277ac <system_apb_clock_set_mask+0x4c>
   2778c:	4b0a      	ldr	r3, [pc, #40]	; (277b8 <system_apb_clock_set_mask+0x58>)
   2778e:	4a0a      	ldr	r2, [pc, #40]	; (277b8 <system_apb_clock_set_mask+0x58>)
   27790:	69d1      	ldr	r1, [r2, #28]
   27792:	683a      	ldr	r2, [r7, #0]
   27794:	430a      	orrs	r2, r1
   27796:	61da      	str	r2, [r3, #28]
   27798:	e008      	b.n	277ac <system_apb_clock_set_mask+0x4c>
   2779a:	4b07      	ldr	r3, [pc, #28]	; (277b8 <system_apb_clock_set_mask+0x58>)
   2779c:	4a06      	ldr	r2, [pc, #24]	; (277b8 <system_apb_clock_set_mask+0x58>)
   2779e:	6a11      	ldr	r1, [r2, #32]
   277a0:	683a      	ldr	r2, [r7, #0]
   277a2:	430a      	orrs	r2, r1
   277a4:	621a      	str	r2, [r3, #32]
   277a6:	e001      	b.n	277ac <system_apb_clock_set_mask+0x4c>
   277a8:	2317      	movs	r3, #23
   277aa:	e000      	b.n	277ae <system_apb_clock_set_mask+0x4e>
   277ac:	2300      	movs	r3, #0
   277ae:	0018      	movs	r0, r3
   277b0:	46bd      	mov	sp, r7
   277b2:	b002      	add	sp, #8
   277b4:	bd80      	pop	{r7, pc}
   277b6:	46c0      	nop			; (mov r8, r8)
   277b8:	40000400 	.word	0x40000400

000277bc <system_interrupt_enter_critical_section>:
   277bc:	b580      	push	{r7, lr}
   277be:	af00      	add	r7, sp, #0
   277c0:	4b02      	ldr	r3, [pc, #8]	; (277cc <system_interrupt_enter_critical_section+0x10>)
   277c2:	4798      	blx	r3
   277c4:	46c0      	nop			; (mov r8, r8)
   277c6:	46bd      	mov	sp, r7
   277c8:	bd80      	pop	{r7, pc}
   277ca:	46c0      	nop			; (mov r8, r8)
   277cc:	00023df9 	.word	0x00023df9

000277d0 <system_interrupt_leave_critical_section>:
   277d0:	b580      	push	{r7, lr}
   277d2:	af00      	add	r7, sp, #0
   277d4:	4b02      	ldr	r3, [pc, #8]	; (277e0 <system_interrupt_leave_critical_section+0x10>)
   277d6:	4798      	blx	r3
   277d8:	46c0      	nop			; (mov r8, r8)
   277da:	46bd      	mov	sp, r7
   277dc:	bd80      	pop	{r7, pc}
   277de:	46c0      	nop			; (mov r8, r8)
   277e0:	00023e4d 	.word	0x00023e4d

000277e4 <system_gclk_is_syncing>:
   277e4:	b580      	push	{r7, lr}
   277e6:	af00      	add	r7, sp, #0
   277e8:	4b05      	ldr	r3, [pc, #20]	; (27800 <system_gclk_is_syncing+0x1c>)
   277ea:	785b      	ldrb	r3, [r3, #1]
   277ec:	b2db      	uxtb	r3, r3
   277ee:	b25b      	sxtb	r3, r3
   277f0:	2b00      	cmp	r3, #0
   277f2:	da01      	bge.n	277f8 <system_gclk_is_syncing+0x14>
   277f4:	2301      	movs	r3, #1
   277f6:	e000      	b.n	277fa <system_gclk_is_syncing+0x16>
   277f8:	2300      	movs	r3, #0
   277fa:	0018      	movs	r0, r3
   277fc:	46bd      	mov	sp, r7
   277fe:	bd80      	pop	{r7, pc}
   27800:	40000c00 	.word	0x40000c00

00027804 <system_gclk_init>:
   27804:	b580      	push	{r7, lr}
   27806:	af00      	add	r7, sp, #0
   27808:	2108      	movs	r1, #8
   2780a:	2000      	movs	r0, #0
   2780c:	4b07      	ldr	r3, [pc, #28]	; (2782c <system_gclk_init+0x28>)
   2780e:	4798      	blx	r3
   27810:	4b07      	ldr	r3, [pc, #28]	; (27830 <system_gclk_init+0x2c>)
   27812:	2201      	movs	r2, #1
   27814:	701a      	strb	r2, [r3, #0]
   27816:	46c0      	nop			; (mov r8, r8)
   27818:	4b05      	ldr	r3, [pc, #20]	; (27830 <system_gclk_init+0x2c>)
   2781a:	781b      	ldrb	r3, [r3, #0]
   2781c:	b2db      	uxtb	r3, r3
   2781e:	001a      	movs	r2, r3
   27820:	2301      	movs	r3, #1
   27822:	4013      	ands	r3, r2
   27824:	d1f8      	bne.n	27818 <system_gclk_init+0x14>
   27826:	46c0      	nop			; (mov r8, r8)
   27828:	46bd      	mov	sp, r7
   2782a:	bd80      	pop	{r7, pc}
   2782c:	00027761 	.word	0x00027761
   27830:	40000c00 	.word	0x40000c00

00027834 <system_gclk_gen_set_config>:
   27834:	b580      	push	{r7, lr}
   27836:	b086      	sub	sp, #24
   27838:	af00      	add	r7, sp, #0
   2783a:	0002      	movs	r2, r0
   2783c:	6039      	str	r1, [r7, #0]
   2783e:	1dfb      	adds	r3, r7, #7
   27840:	701a      	strb	r2, [r3, #0]
   27842:	1dfb      	adds	r3, r7, #7
   27844:	781b      	ldrb	r3, [r3, #0]
   27846:	617b      	str	r3, [r7, #20]
   27848:	1dfb      	adds	r3, r7, #7
   2784a:	781b      	ldrb	r3, [r3, #0]
   2784c:	613b      	str	r3, [r7, #16]
   2784e:	683b      	ldr	r3, [r7, #0]
   27850:	781b      	ldrb	r3, [r3, #0]
   27852:	021b      	lsls	r3, r3, #8
   27854:	001a      	movs	r2, r3
   27856:	697b      	ldr	r3, [r7, #20]
   27858:	4313      	orrs	r3, r2
   2785a:	617b      	str	r3, [r7, #20]
   2785c:	683b      	ldr	r3, [r7, #0]
   2785e:	785b      	ldrb	r3, [r3, #1]
   27860:	2b00      	cmp	r3, #0
   27862:	d004      	beq.n	2786e <system_gclk_gen_set_config+0x3a>
   27864:	697b      	ldr	r3, [r7, #20]
   27866:	2280      	movs	r2, #128	; 0x80
   27868:	02d2      	lsls	r2, r2, #11
   2786a:	4313      	orrs	r3, r2
   2786c:	617b      	str	r3, [r7, #20]
   2786e:	683b      	ldr	r3, [r7, #0]
   27870:	7a5b      	ldrb	r3, [r3, #9]
   27872:	2b00      	cmp	r3, #0
   27874:	d004      	beq.n	27880 <system_gclk_gen_set_config+0x4c>
   27876:	697b      	ldr	r3, [r7, #20]
   27878:	2280      	movs	r2, #128	; 0x80
   2787a:	0312      	lsls	r2, r2, #12
   2787c:	4313      	orrs	r3, r2
   2787e:	617b      	str	r3, [r7, #20]
   27880:	683b      	ldr	r3, [r7, #0]
   27882:	685b      	ldr	r3, [r3, #4]
   27884:	2b01      	cmp	r3, #1
   27886:	d92c      	bls.n	278e2 <system_gclk_gen_set_config+0xae>
   27888:	683b      	ldr	r3, [r7, #0]
   2788a:	685a      	ldr	r2, [r3, #4]
   2788c:	683b      	ldr	r3, [r7, #0]
   2788e:	685b      	ldr	r3, [r3, #4]
   27890:	3b01      	subs	r3, #1
   27892:	4013      	ands	r3, r2
   27894:	d11a      	bne.n	278cc <system_gclk_gen_set_config+0x98>
   27896:	2300      	movs	r3, #0
   27898:	60fb      	str	r3, [r7, #12]
   2789a:	2302      	movs	r3, #2
   2789c:	60bb      	str	r3, [r7, #8]
   2789e:	e005      	b.n	278ac <system_gclk_gen_set_config+0x78>
   278a0:	68fb      	ldr	r3, [r7, #12]
   278a2:	3301      	adds	r3, #1
   278a4:	60fb      	str	r3, [r7, #12]
   278a6:	68bb      	ldr	r3, [r7, #8]
   278a8:	005b      	lsls	r3, r3, #1
   278aa:	60bb      	str	r3, [r7, #8]
   278ac:	683b      	ldr	r3, [r7, #0]
   278ae:	685a      	ldr	r2, [r3, #4]
   278b0:	68bb      	ldr	r3, [r7, #8]
   278b2:	429a      	cmp	r2, r3
   278b4:	d8f4      	bhi.n	278a0 <system_gclk_gen_set_config+0x6c>
   278b6:	68fb      	ldr	r3, [r7, #12]
   278b8:	021b      	lsls	r3, r3, #8
   278ba:	693a      	ldr	r2, [r7, #16]
   278bc:	4313      	orrs	r3, r2
   278be:	613b      	str	r3, [r7, #16]
   278c0:	697b      	ldr	r3, [r7, #20]
   278c2:	2280      	movs	r2, #128	; 0x80
   278c4:	0352      	lsls	r2, r2, #13
   278c6:	4313      	orrs	r3, r2
   278c8:	617b      	str	r3, [r7, #20]
   278ca:	e00a      	b.n	278e2 <system_gclk_gen_set_config+0xae>
   278cc:	683b      	ldr	r3, [r7, #0]
   278ce:	685b      	ldr	r3, [r3, #4]
   278d0:	021b      	lsls	r3, r3, #8
   278d2:	693a      	ldr	r2, [r7, #16]
   278d4:	4313      	orrs	r3, r2
   278d6:	613b      	str	r3, [r7, #16]
   278d8:	697b      	ldr	r3, [r7, #20]
   278da:	2280      	movs	r2, #128	; 0x80
   278dc:	0292      	lsls	r2, r2, #10
   278de:	4313      	orrs	r3, r2
   278e0:	617b      	str	r3, [r7, #20]
   278e2:	683b      	ldr	r3, [r7, #0]
   278e4:	7a1b      	ldrb	r3, [r3, #8]
   278e6:	2b00      	cmp	r3, #0
   278e8:	d004      	beq.n	278f4 <system_gclk_gen_set_config+0xc0>
   278ea:	697b      	ldr	r3, [r7, #20]
   278ec:	2280      	movs	r2, #128	; 0x80
   278ee:	0392      	lsls	r2, r2, #14
   278f0:	4313      	orrs	r3, r2
   278f2:	617b      	str	r3, [r7, #20]
   278f4:	46c0      	nop			; (mov r8, r8)
   278f6:	4b13      	ldr	r3, [pc, #76]	; (27944 <system_gclk_gen_set_config+0x110>)
   278f8:	4798      	blx	r3
   278fa:	1e03      	subs	r3, r0, #0
   278fc:	d1fb      	bne.n	278f6 <system_gclk_gen_set_config+0xc2>
   278fe:	4b12      	ldr	r3, [pc, #72]	; (27948 <system_gclk_gen_set_config+0x114>)
   27900:	4798      	blx	r3
   27902:	4a12      	ldr	r2, [pc, #72]	; (2794c <system_gclk_gen_set_config+0x118>)
   27904:	1dfb      	adds	r3, r7, #7
   27906:	781b      	ldrb	r3, [r3, #0]
   27908:	7013      	strb	r3, [r2, #0]
   2790a:	46c0      	nop			; (mov r8, r8)
   2790c:	4b0d      	ldr	r3, [pc, #52]	; (27944 <system_gclk_gen_set_config+0x110>)
   2790e:	4798      	blx	r3
   27910:	1e03      	subs	r3, r0, #0
   27912:	d1fb      	bne.n	2790c <system_gclk_gen_set_config+0xd8>
   27914:	4b0e      	ldr	r3, [pc, #56]	; (27950 <system_gclk_gen_set_config+0x11c>)
   27916:	693a      	ldr	r2, [r7, #16]
   27918:	609a      	str	r2, [r3, #8]
   2791a:	46c0      	nop			; (mov r8, r8)
   2791c:	4b09      	ldr	r3, [pc, #36]	; (27944 <system_gclk_gen_set_config+0x110>)
   2791e:	4798      	blx	r3
   27920:	1e03      	subs	r3, r0, #0
   27922:	d1fb      	bne.n	2791c <system_gclk_gen_set_config+0xe8>
   27924:	4b0a      	ldr	r3, [pc, #40]	; (27950 <system_gclk_gen_set_config+0x11c>)
   27926:	4a0a      	ldr	r2, [pc, #40]	; (27950 <system_gclk_gen_set_config+0x11c>)
   27928:	6851      	ldr	r1, [r2, #4]
   2792a:	2280      	movs	r2, #128	; 0x80
   2792c:	0252      	lsls	r2, r2, #9
   2792e:	4011      	ands	r1, r2
   27930:	697a      	ldr	r2, [r7, #20]
   27932:	430a      	orrs	r2, r1
   27934:	605a      	str	r2, [r3, #4]
   27936:	4b07      	ldr	r3, [pc, #28]	; (27954 <system_gclk_gen_set_config+0x120>)
   27938:	4798      	blx	r3
   2793a:	46c0      	nop			; (mov r8, r8)
   2793c:	46bd      	mov	sp, r7
   2793e:	b006      	add	sp, #24
   27940:	bd80      	pop	{r7, pc}
   27942:	46c0      	nop			; (mov r8, r8)
   27944:	000277e5 	.word	0x000277e5
   27948:	000277bd 	.word	0x000277bd
   2794c:	40000c08 	.word	0x40000c08
   27950:	40000c00 	.word	0x40000c00
   27954:	000277d1 	.word	0x000277d1

00027958 <system_gclk_gen_enable>:
   27958:	b580      	push	{r7, lr}
   2795a:	b082      	sub	sp, #8
   2795c:	af00      	add	r7, sp, #0
   2795e:	0002      	movs	r2, r0
   27960:	1dfb      	adds	r3, r7, #7
   27962:	701a      	strb	r2, [r3, #0]
   27964:	46c0      	nop			; (mov r8, r8)
   27966:	4b0e      	ldr	r3, [pc, #56]	; (279a0 <system_gclk_gen_enable+0x48>)
   27968:	4798      	blx	r3
   2796a:	1e03      	subs	r3, r0, #0
   2796c:	d1fb      	bne.n	27966 <system_gclk_gen_enable+0xe>
   2796e:	4b0d      	ldr	r3, [pc, #52]	; (279a4 <system_gclk_gen_enable+0x4c>)
   27970:	4798      	blx	r3
   27972:	4a0d      	ldr	r2, [pc, #52]	; (279a8 <system_gclk_gen_enable+0x50>)
   27974:	1dfb      	adds	r3, r7, #7
   27976:	781b      	ldrb	r3, [r3, #0]
   27978:	7013      	strb	r3, [r2, #0]
   2797a:	46c0      	nop			; (mov r8, r8)
   2797c:	4b08      	ldr	r3, [pc, #32]	; (279a0 <system_gclk_gen_enable+0x48>)
   2797e:	4798      	blx	r3
   27980:	1e03      	subs	r3, r0, #0
   27982:	d1fb      	bne.n	2797c <system_gclk_gen_enable+0x24>
   27984:	4b09      	ldr	r3, [pc, #36]	; (279ac <system_gclk_gen_enable+0x54>)
   27986:	4a09      	ldr	r2, [pc, #36]	; (279ac <system_gclk_gen_enable+0x54>)
   27988:	6852      	ldr	r2, [r2, #4]
   2798a:	2180      	movs	r1, #128	; 0x80
   2798c:	0249      	lsls	r1, r1, #9
   2798e:	430a      	orrs	r2, r1
   27990:	605a      	str	r2, [r3, #4]
   27992:	4b07      	ldr	r3, [pc, #28]	; (279b0 <system_gclk_gen_enable+0x58>)
   27994:	4798      	blx	r3
   27996:	46c0      	nop			; (mov r8, r8)
   27998:	46bd      	mov	sp, r7
   2799a:	b002      	add	sp, #8
   2799c:	bd80      	pop	{r7, pc}
   2799e:	46c0      	nop			; (mov r8, r8)
   279a0:	000277e5 	.word	0x000277e5
   279a4:	000277bd 	.word	0x000277bd
   279a8:	40000c04 	.word	0x40000c04
   279ac:	40000c00 	.word	0x40000c00
   279b0:	000277d1 	.word	0x000277d1

000279b4 <system_gclk_gen_get_hz>:
   279b4:	b580      	push	{r7, lr}
   279b6:	b086      	sub	sp, #24
   279b8:	af00      	add	r7, sp, #0
   279ba:	0002      	movs	r2, r0
   279bc:	1dfb      	adds	r3, r7, #7
   279be:	701a      	strb	r2, [r3, #0]
   279c0:	46c0      	nop			; (mov r8, r8)
   279c2:	4b2a      	ldr	r3, [pc, #168]	; (27a6c <system_gclk_gen_get_hz+0xb8>)
   279c4:	4798      	blx	r3
   279c6:	1e03      	subs	r3, r0, #0
   279c8:	d1fb      	bne.n	279c2 <system_gclk_gen_get_hz+0xe>
   279ca:	4b29      	ldr	r3, [pc, #164]	; (27a70 <system_gclk_gen_get_hz+0xbc>)
   279cc:	4798      	blx	r3
   279ce:	4a29      	ldr	r2, [pc, #164]	; (27a74 <system_gclk_gen_get_hz+0xc0>)
   279d0:	1dfb      	adds	r3, r7, #7
   279d2:	781b      	ldrb	r3, [r3, #0]
   279d4:	7013      	strb	r3, [r2, #0]
   279d6:	46c0      	nop			; (mov r8, r8)
   279d8:	4b24      	ldr	r3, [pc, #144]	; (27a6c <system_gclk_gen_get_hz+0xb8>)
   279da:	4798      	blx	r3
   279dc:	1e03      	subs	r3, r0, #0
   279de:	d1fb      	bne.n	279d8 <system_gclk_gen_get_hz+0x24>
   279e0:	4b25      	ldr	r3, [pc, #148]	; (27a78 <system_gclk_gen_get_hz+0xc4>)
   279e2:	685b      	ldr	r3, [r3, #4]
   279e4:	04db      	lsls	r3, r3, #19
   279e6:	0edb      	lsrs	r3, r3, #27
   279e8:	b2db      	uxtb	r3, r3
   279ea:	0018      	movs	r0, r3
   279ec:	4b23      	ldr	r3, [pc, #140]	; (27a7c <system_gclk_gen_get_hz+0xc8>)
   279ee:	4798      	blx	r3
   279f0:	0003      	movs	r3, r0
   279f2:	617b      	str	r3, [r7, #20]
   279f4:	4a1f      	ldr	r2, [pc, #124]	; (27a74 <system_gclk_gen_get_hz+0xc0>)
   279f6:	1dfb      	adds	r3, r7, #7
   279f8:	781b      	ldrb	r3, [r3, #0]
   279fa:	7013      	strb	r3, [r2, #0]
   279fc:	4b1e      	ldr	r3, [pc, #120]	; (27a78 <system_gclk_gen_get_hz+0xc4>)
   279fe:	685b      	ldr	r3, [r3, #4]
   27a00:	02db      	lsls	r3, r3, #11
   27a02:	0fdb      	lsrs	r3, r3, #31
   27a04:	b2da      	uxtb	r2, r3
   27a06:	2313      	movs	r3, #19
   27a08:	18fb      	adds	r3, r7, r3
   27a0a:	701a      	strb	r2, [r3, #0]
   27a0c:	4a1c      	ldr	r2, [pc, #112]	; (27a80 <system_gclk_gen_get_hz+0xcc>)
   27a0e:	1dfb      	adds	r3, r7, #7
   27a10:	781b      	ldrb	r3, [r3, #0]
   27a12:	7013      	strb	r3, [r2, #0]
   27a14:	46c0      	nop			; (mov r8, r8)
   27a16:	4b15      	ldr	r3, [pc, #84]	; (27a6c <system_gclk_gen_get_hz+0xb8>)
   27a18:	4798      	blx	r3
   27a1a:	1e03      	subs	r3, r0, #0
   27a1c:	d1fb      	bne.n	27a16 <system_gclk_gen_get_hz+0x62>
   27a1e:	4b16      	ldr	r3, [pc, #88]	; (27a78 <system_gclk_gen_get_hz+0xc4>)
   27a20:	689b      	ldr	r3, [r3, #8]
   27a22:	021b      	lsls	r3, r3, #8
   27a24:	0c1b      	lsrs	r3, r3, #16
   27a26:	b29b      	uxth	r3, r3
   27a28:	60fb      	str	r3, [r7, #12]
   27a2a:	4b16      	ldr	r3, [pc, #88]	; (27a84 <system_gclk_gen_get_hz+0xd0>)
   27a2c:	4798      	blx	r3
   27a2e:	2313      	movs	r3, #19
   27a30:	18fb      	adds	r3, r7, r3
   27a32:	781b      	ldrb	r3, [r3, #0]
   27a34:	2b00      	cmp	r3, #0
   27a36:	d109      	bne.n	27a4c <system_gclk_gen_get_hz+0x98>
   27a38:	68fb      	ldr	r3, [r7, #12]
   27a3a:	2b01      	cmp	r3, #1
   27a3c:	d906      	bls.n	27a4c <system_gclk_gen_get_hz+0x98>
   27a3e:	4b12      	ldr	r3, [pc, #72]	; (27a88 <system_gclk_gen_get_hz+0xd4>)
   27a40:	68f9      	ldr	r1, [r7, #12]
   27a42:	6978      	ldr	r0, [r7, #20]
   27a44:	4798      	blx	r3
   27a46:	0003      	movs	r3, r0
   27a48:	617b      	str	r3, [r7, #20]
   27a4a:	e00a      	b.n	27a62 <system_gclk_gen_get_hz+0xae>
   27a4c:	2313      	movs	r3, #19
   27a4e:	18fb      	adds	r3, r7, r3
   27a50:	781b      	ldrb	r3, [r3, #0]
   27a52:	2b00      	cmp	r3, #0
   27a54:	d005      	beq.n	27a62 <system_gclk_gen_get_hz+0xae>
   27a56:	68fb      	ldr	r3, [r7, #12]
   27a58:	3301      	adds	r3, #1
   27a5a:	697a      	ldr	r2, [r7, #20]
   27a5c:	40da      	lsrs	r2, r3
   27a5e:	0013      	movs	r3, r2
   27a60:	617b      	str	r3, [r7, #20]
   27a62:	697b      	ldr	r3, [r7, #20]
   27a64:	0018      	movs	r0, r3
   27a66:	46bd      	mov	sp, r7
   27a68:	b006      	add	sp, #24
   27a6a:	bd80      	pop	{r7, pc}
   27a6c:	000277e5 	.word	0x000277e5
   27a70:	000277bd 	.word	0x000277bd
   27a74:	40000c04 	.word	0x40000c04
   27a78:	40000c00 	.word	0x40000c00
   27a7c:	00027115 	.word	0x00027115
   27a80:	40000c08 	.word	0x40000c08
   27a84:	000277d1 	.word	0x000277d1
   27a88:	00030549 	.word	0x00030549

00027a8c <system_gclk_chan_set_config>:
   27a8c:	b580      	push	{r7, lr}
   27a8e:	b084      	sub	sp, #16
   27a90:	af00      	add	r7, sp, #0
   27a92:	0002      	movs	r2, r0
   27a94:	6039      	str	r1, [r7, #0]
   27a96:	1dfb      	adds	r3, r7, #7
   27a98:	701a      	strb	r2, [r3, #0]
   27a9a:	1dfb      	adds	r3, r7, #7
   27a9c:	781b      	ldrb	r3, [r3, #0]
   27a9e:	60fb      	str	r3, [r7, #12]
   27aa0:	683b      	ldr	r3, [r7, #0]
   27aa2:	781b      	ldrb	r3, [r3, #0]
   27aa4:	021b      	lsls	r3, r3, #8
   27aa6:	001a      	movs	r2, r3
   27aa8:	68fb      	ldr	r3, [r7, #12]
   27aaa:	4313      	orrs	r3, r2
   27aac:	60fb      	str	r3, [r7, #12]
   27aae:	1dfb      	adds	r3, r7, #7
   27ab0:	781b      	ldrb	r3, [r3, #0]
   27ab2:	0018      	movs	r0, r3
   27ab4:	4b04      	ldr	r3, [pc, #16]	; (27ac8 <system_gclk_chan_set_config+0x3c>)
   27ab6:	4798      	blx	r3
   27ab8:	4b04      	ldr	r3, [pc, #16]	; (27acc <system_gclk_chan_set_config+0x40>)
   27aba:	68fa      	ldr	r2, [r7, #12]
   27abc:	b292      	uxth	r2, r2
   27abe:	805a      	strh	r2, [r3, #2]
   27ac0:	46c0      	nop			; (mov r8, r8)
   27ac2:	46bd      	mov	sp, r7
   27ac4:	b004      	add	sp, #16
   27ac6:	bd80      	pop	{r7, pc}
   27ac8:	00027b19 	.word	0x00027b19
   27acc:	40000c00 	.word	0x40000c00

00027ad0 <system_gclk_chan_enable>:
   27ad0:	b580      	push	{r7, lr}
   27ad2:	b082      	sub	sp, #8
   27ad4:	af00      	add	r7, sp, #0
   27ad6:	0002      	movs	r2, r0
   27ad8:	1dfb      	adds	r3, r7, #7
   27ada:	701a      	strb	r2, [r3, #0]
   27adc:	4b0a      	ldr	r3, [pc, #40]	; (27b08 <system_gclk_chan_enable+0x38>)
   27ade:	4798      	blx	r3
   27ae0:	4a0a      	ldr	r2, [pc, #40]	; (27b0c <system_gclk_chan_enable+0x3c>)
   27ae2:	1dfb      	adds	r3, r7, #7
   27ae4:	781b      	ldrb	r3, [r3, #0]
   27ae6:	7013      	strb	r3, [r2, #0]
   27ae8:	4909      	ldr	r1, [pc, #36]	; (27b10 <system_gclk_chan_enable+0x40>)
   27aea:	4b09      	ldr	r3, [pc, #36]	; (27b10 <system_gclk_chan_enable+0x40>)
   27aec:	885b      	ldrh	r3, [r3, #2]
   27aee:	b29b      	uxth	r3, r3
   27af0:	2280      	movs	r2, #128	; 0x80
   27af2:	01d2      	lsls	r2, r2, #7
   27af4:	4313      	orrs	r3, r2
   27af6:	b29b      	uxth	r3, r3
   27af8:	804b      	strh	r3, [r1, #2]
   27afa:	4b06      	ldr	r3, [pc, #24]	; (27b14 <system_gclk_chan_enable+0x44>)
   27afc:	4798      	blx	r3
   27afe:	46c0      	nop			; (mov r8, r8)
   27b00:	46bd      	mov	sp, r7
   27b02:	b002      	add	sp, #8
   27b04:	bd80      	pop	{r7, pc}
   27b06:	46c0      	nop			; (mov r8, r8)
   27b08:	000277bd 	.word	0x000277bd
   27b0c:	40000c02 	.word	0x40000c02
   27b10:	40000c00 	.word	0x40000c00
   27b14:	000277d1 	.word	0x000277d1

00027b18 <system_gclk_chan_disable>:
   27b18:	b580      	push	{r7, lr}
   27b1a:	b084      	sub	sp, #16
   27b1c:	af00      	add	r7, sp, #0
   27b1e:	0002      	movs	r2, r0
   27b20:	1dfb      	adds	r3, r7, #7
   27b22:	701a      	strb	r2, [r3, #0]
   27b24:	4b1c      	ldr	r3, [pc, #112]	; (27b98 <system_gclk_chan_disable+0x80>)
   27b26:	4798      	blx	r3
   27b28:	4a1c      	ldr	r2, [pc, #112]	; (27b9c <system_gclk_chan_disable+0x84>)
   27b2a:	1dfb      	adds	r3, r7, #7
   27b2c:	781b      	ldrb	r3, [r3, #0]
   27b2e:	7013      	strb	r3, [r2, #0]
   27b30:	4b1b      	ldr	r3, [pc, #108]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b32:	885b      	ldrh	r3, [r3, #2]
   27b34:	051b      	lsls	r3, r3, #20
   27b36:	0f1b      	lsrs	r3, r3, #28
   27b38:	b2db      	uxtb	r3, r3
   27b3a:	60fb      	str	r3, [r7, #12]
   27b3c:	4a18      	ldr	r2, [pc, #96]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b3e:	8853      	ldrh	r3, [r2, #2]
   27b40:	4918      	ldr	r1, [pc, #96]	; (27ba4 <system_gclk_chan_disable+0x8c>)
   27b42:	400b      	ands	r3, r1
   27b44:	8053      	strh	r3, [r2, #2]
   27b46:	4a16      	ldr	r2, [pc, #88]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b48:	4b15      	ldr	r3, [pc, #84]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b4a:	885b      	ldrh	r3, [r3, #2]
   27b4c:	b29b      	uxth	r3, r3
   27b4e:	4916      	ldr	r1, [pc, #88]	; (27ba8 <system_gclk_chan_disable+0x90>)
   27b50:	400b      	ands	r3, r1
   27b52:	b29b      	uxth	r3, r3
   27b54:	8053      	strh	r3, [r2, #2]
   27b56:	46c0      	nop			; (mov r8, r8)
   27b58:	4b11      	ldr	r3, [pc, #68]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b5a:	885b      	ldrh	r3, [r3, #2]
   27b5c:	b29b      	uxth	r3, r3
   27b5e:	001a      	movs	r2, r3
   27b60:	2380      	movs	r3, #128	; 0x80
   27b62:	01db      	lsls	r3, r3, #7
   27b64:	4013      	ands	r3, r2
   27b66:	d1f7      	bne.n	27b58 <system_gclk_chan_disable+0x40>
   27b68:	4a0d      	ldr	r2, [pc, #52]	; (27ba0 <system_gclk_chan_disable+0x88>)
   27b6a:	68fb      	ldr	r3, [r7, #12]
   27b6c:	b2db      	uxtb	r3, r3
   27b6e:	1c19      	adds	r1, r3, #0
   27b70:	230f      	movs	r3, #15
   27b72:	400b      	ands	r3, r1
   27b74:	b2d9      	uxtb	r1, r3
   27b76:	8853      	ldrh	r3, [r2, #2]
   27b78:	1c08      	adds	r0, r1, #0
   27b7a:	210f      	movs	r1, #15
   27b7c:	4001      	ands	r1, r0
   27b7e:	0208      	lsls	r0, r1, #8
   27b80:	4908      	ldr	r1, [pc, #32]	; (27ba4 <system_gclk_chan_disable+0x8c>)
   27b82:	400b      	ands	r3, r1
   27b84:	1c19      	adds	r1, r3, #0
   27b86:	1c03      	adds	r3, r0, #0
   27b88:	430b      	orrs	r3, r1
   27b8a:	8053      	strh	r3, [r2, #2]
   27b8c:	4b07      	ldr	r3, [pc, #28]	; (27bac <system_gclk_chan_disable+0x94>)
   27b8e:	4798      	blx	r3
   27b90:	46c0      	nop			; (mov r8, r8)
   27b92:	46bd      	mov	sp, r7
   27b94:	b004      	add	sp, #16
   27b96:	bd80      	pop	{r7, pc}
   27b98:	000277bd 	.word	0x000277bd
   27b9c:	40000c02 	.word	0x40000c02
   27ba0:	40000c00 	.word	0x40000c00
   27ba4:	fffff0ff 	.word	0xfffff0ff
   27ba8:	ffffbfff 	.word	0xffffbfff
   27bac:	000277d1 	.word	0x000277d1

00027bb0 <system_gclk_chan_get_hz>:
   27bb0:	b580      	push	{r7, lr}
   27bb2:	b084      	sub	sp, #16
   27bb4:	af00      	add	r7, sp, #0
   27bb6:	0002      	movs	r2, r0
   27bb8:	1dfb      	adds	r3, r7, #7
   27bba:	701a      	strb	r2, [r3, #0]
   27bbc:	4b0d      	ldr	r3, [pc, #52]	; (27bf4 <system_gclk_chan_get_hz+0x44>)
   27bbe:	4798      	blx	r3
   27bc0:	4a0d      	ldr	r2, [pc, #52]	; (27bf8 <system_gclk_chan_get_hz+0x48>)
   27bc2:	1dfb      	adds	r3, r7, #7
   27bc4:	781b      	ldrb	r3, [r3, #0]
   27bc6:	7013      	strb	r3, [r2, #0]
   27bc8:	4b0c      	ldr	r3, [pc, #48]	; (27bfc <system_gclk_chan_get_hz+0x4c>)
   27bca:	885b      	ldrh	r3, [r3, #2]
   27bcc:	051b      	lsls	r3, r3, #20
   27bce:	0f1b      	lsrs	r3, r3, #28
   27bd0:	b2da      	uxtb	r2, r3
   27bd2:	230f      	movs	r3, #15
   27bd4:	18fb      	adds	r3, r7, r3
   27bd6:	701a      	strb	r2, [r3, #0]
   27bd8:	4b09      	ldr	r3, [pc, #36]	; (27c00 <system_gclk_chan_get_hz+0x50>)
   27bda:	4798      	blx	r3
   27bdc:	230f      	movs	r3, #15
   27bde:	18fb      	adds	r3, r7, r3
   27be0:	781b      	ldrb	r3, [r3, #0]
   27be2:	0018      	movs	r0, r3
   27be4:	4b07      	ldr	r3, [pc, #28]	; (27c04 <system_gclk_chan_get_hz+0x54>)
   27be6:	4798      	blx	r3
   27be8:	0003      	movs	r3, r0
   27bea:	0018      	movs	r0, r3
   27bec:	46bd      	mov	sp, r7
   27bee:	b004      	add	sp, #16
   27bf0:	bd80      	pop	{r7, pc}
   27bf2:	46c0      	nop			; (mov r8, r8)
   27bf4:	000277bd 	.word	0x000277bd
   27bf8:	40000c02 	.word	0x40000c02
   27bfc:	40000c00 	.word	0x40000c00
   27c00:	000277d1 	.word	0x000277d1
   27c04:	000279b5 	.word	0x000279b5

00027c08 <system_interrupt_clear_pending>:
   27c08:	b580      	push	{r7, lr}
   27c0a:	b084      	sub	sp, #16
   27c0c:	af00      	add	r7, sp, #0
   27c0e:	0002      	movs	r2, r0
   27c10:	1dfb      	adds	r3, r7, #7
   27c12:	701a      	strb	r2, [r3, #0]
   27c14:	230f      	movs	r3, #15
   27c16:	18fb      	adds	r3, r7, r3
   27c18:	2200      	movs	r2, #0
   27c1a:	701a      	strb	r2, [r3, #0]
   27c1c:	1dfb      	adds	r3, r7, #7
   27c1e:	781b      	ldrb	r3, [r3, #0]
   27c20:	2b7f      	cmp	r3, #127	; 0x7f
   27c22:	d80b      	bhi.n	27c3c <system_interrupt_clear_pending+0x34>
   27c24:	4a13      	ldr	r2, [pc, #76]	; (27c74 <system_interrupt_clear_pending+0x6c>)
   27c26:	1dfb      	adds	r3, r7, #7
   27c28:	781b      	ldrb	r3, [r3, #0]
   27c2a:	b25b      	sxtb	r3, r3
   27c2c:	2101      	movs	r1, #1
   27c2e:	4099      	lsls	r1, r3
   27c30:	000b      	movs	r3, r1
   27c32:	0019      	movs	r1, r3
   27c34:	23c0      	movs	r3, #192	; 0xc0
   27c36:	005b      	lsls	r3, r3, #1
   27c38:	50d1      	str	r1, [r2, r3]
   27c3a:	e014      	b.n	27c66 <system_interrupt_clear_pending+0x5e>
   27c3c:	1dfb      	adds	r3, r7, #7
   27c3e:	781b      	ldrb	r3, [r3, #0]
   27c40:	b25b      	sxtb	r3, r3
   27c42:	330e      	adds	r3, #14
   27c44:	d101      	bne.n	27c4a <system_interrupt_clear_pending+0x42>
   27c46:	2317      	movs	r3, #23
   27c48:	e010      	b.n	27c6c <system_interrupt_clear_pending+0x64>
   27c4a:	1dfb      	adds	r3, r7, #7
   27c4c:	781b      	ldrb	r3, [r3, #0]
   27c4e:	b25b      	sxtb	r3, r3
   27c50:	3301      	adds	r3, #1
   27c52:	d104      	bne.n	27c5e <system_interrupt_clear_pending+0x56>
   27c54:	4b08      	ldr	r3, [pc, #32]	; (27c78 <system_interrupt_clear_pending+0x70>)
   27c56:	2280      	movs	r2, #128	; 0x80
   27c58:	0492      	lsls	r2, r2, #18
   27c5a:	605a      	str	r2, [r3, #4]
   27c5c:	e003      	b.n	27c66 <system_interrupt_clear_pending+0x5e>
   27c5e:	230f      	movs	r3, #15
   27c60:	18fb      	adds	r3, r7, r3
   27c62:	2217      	movs	r2, #23
   27c64:	701a      	strb	r2, [r3, #0]
   27c66:	230f      	movs	r3, #15
   27c68:	18fb      	adds	r3, r7, r3
   27c6a:	781b      	ldrb	r3, [r3, #0]
   27c6c:	0018      	movs	r0, r3
   27c6e:	46bd      	mov	sp, r7
   27c70:	b004      	add	sp, #16
   27c72:	bd80      	pop	{r7, pc}
   27c74:	e000e100 	.word	0xe000e100
   27c78:	e000ed00 	.word	0xe000ed00

00027c7c <system_pinmux_get_group_from_gpio_pin>:
   27c7c:	b580      	push	{r7, lr}
   27c7e:	b084      	sub	sp, #16
   27c80:	af00      	add	r7, sp, #0
   27c82:	0002      	movs	r2, r0
   27c84:	1dfb      	adds	r3, r7, #7
   27c86:	701a      	strb	r2, [r3, #0]
   27c88:	230f      	movs	r3, #15
   27c8a:	18fb      	adds	r3, r7, r3
   27c8c:	1dfa      	adds	r2, r7, #7
   27c8e:	7812      	ldrb	r2, [r2, #0]
   27c90:	09d2      	lsrs	r2, r2, #7
   27c92:	701a      	strb	r2, [r3, #0]
   27c94:	230e      	movs	r3, #14
   27c96:	18fb      	adds	r3, r7, r3
   27c98:	1dfa      	adds	r2, r7, #7
   27c9a:	7812      	ldrb	r2, [r2, #0]
   27c9c:	0952      	lsrs	r2, r2, #5
   27c9e:	701a      	strb	r2, [r3, #0]
   27ca0:	4b0d      	ldr	r3, [pc, #52]	; (27cd8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27ca2:	60bb      	str	r3, [r7, #8]
   27ca4:	230f      	movs	r3, #15
   27ca6:	18fb      	adds	r3, r7, r3
   27ca8:	781b      	ldrb	r3, [r3, #0]
   27caa:	2b00      	cmp	r3, #0
   27cac:	d10f      	bne.n	27cce <system_pinmux_get_group_from_gpio_pin+0x52>
   27cae:	230f      	movs	r3, #15
   27cb0:	18fb      	adds	r3, r7, r3
   27cb2:	781b      	ldrb	r3, [r3, #0]
   27cb4:	009b      	lsls	r3, r3, #2
   27cb6:	2210      	movs	r2, #16
   27cb8:	4694      	mov	ip, r2
   27cba:	44bc      	add	ip, r7
   27cbc:	4463      	add	r3, ip
   27cbe:	3b08      	subs	r3, #8
   27cc0:	681a      	ldr	r2, [r3, #0]
   27cc2:	230e      	movs	r3, #14
   27cc4:	18fb      	adds	r3, r7, r3
   27cc6:	781b      	ldrb	r3, [r3, #0]
   27cc8:	01db      	lsls	r3, r3, #7
   27cca:	18d3      	adds	r3, r2, r3
   27ccc:	e000      	b.n	27cd0 <system_pinmux_get_group_from_gpio_pin+0x54>
   27cce:	2300      	movs	r3, #0
   27cd0:	0018      	movs	r0, r3
   27cd2:	46bd      	mov	sp, r7
   27cd4:	b004      	add	sp, #16
   27cd6:	bd80      	pop	{r7, pc}
   27cd8:	41004400 	.word	0x41004400

00027cdc <_system_pinmux_config>:
   27cdc:	b580      	push	{r7, lr}
   27cde:	b088      	sub	sp, #32
   27ce0:	af00      	add	r7, sp, #0
   27ce2:	60f8      	str	r0, [r7, #12]
   27ce4:	60b9      	str	r1, [r7, #8]
   27ce6:	607a      	str	r2, [r7, #4]
   27ce8:	2300      	movs	r3, #0
   27cea:	61fb      	str	r3, [r7, #28]
   27cec:	687b      	ldr	r3, [r7, #4]
   27cee:	78db      	ldrb	r3, [r3, #3]
   27cf0:	2201      	movs	r2, #1
   27cf2:	4053      	eors	r3, r2
   27cf4:	b2db      	uxtb	r3, r3
   27cf6:	2b00      	cmp	r3, #0
   27cf8:	d035      	beq.n	27d66 <_system_pinmux_config+0x8a>
   27cfa:	687b      	ldr	r3, [r7, #4]
   27cfc:	781b      	ldrb	r3, [r3, #0]
   27cfe:	2b80      	cmp	r3, #128	; 0x80
   27d00:	d00b      	beq.n	27d1a <_system_pinmux_config+0x3e>
   27d02:	69fb      	ldr	r3, [r7, #28]
   27d04:	2280      	movs	r2, #128	; 0x80
   27d06:	0252      	lsls	r2, r2, #9
   27d08:	4313      	orrs	r3, r2
   27d0a:	61fb      	str	r3, [r7, #28]
   27d0c:	687b      	ldr	r3, [r7, #4]
   27d0e:	781b      	ldrb	r3, [r3, #0]
   27d10:	061b      	lsls	r3, r3, #24
   27d12:	001a      	movs	r2, r3
   27d14:	69fb      	ldr	r3, [r7, #28]
   27d16:	4313      	orrs	r3, r2
   27d18:	61fb      	str	r3, [r7, #28]
   27d1a:	687b      	ldr	r3, [r7, #4]
   27d1c:	785b      	ldrb	r3, [r3, #1]
   27d1e:	2b00      	cmp	r3, #0
   27d20:	d003      	beq.n	27d2a <_system_pinmux_config+0x4e>
   27d22:	687b      	ldr	r3, [r7, #4]
   27d24:	785b      	ldrb	r3, [r3, #1]
   27d26:	2b02      	cmp	r3, #2
   27d28:	d110      	bne.n	27d4c <_system_pinmux_config+0x70>
   27d2a:	69fb      	ldr	r3, [r7, #28]
   27d2c:	2280      	movs	r2, #128	; 0x80
   27d2e:	0292      	lsls	r2, r2, #10
   27d30:	4313      	orrs	r3, r2
   27d32:	61fb      	str	r3, [r7, #28]
   27d34:	687b      	ldr	r3, [r7, #4]
   27d36:	789b      	ldrb	r3, [r3, #2]
   27d38:	2b00      	cmp	r3, #0
   27d3a:	d004      	beq.n	27d46 <_system_pinmux_config+0x6a>
   27d3c:	69fb      	ldr	r3, [r7, #28]
   27d3e:	2280      	movs	r2, #128	; 0x80
   27d40:	02d2      	lsls	r2, r2, #11
   27d42:	4313      	orrs	r3, r2
   27d44:	61fb      	str	r3, [r7, #28]
   27d46:	68fb      	ldr	r3, [r7, #12]
   27d48:	68ba      	ldr	r2, [r7, #8]
   27d4a:	605a      	str	r2, [r3, #4]
   27d4c:	687b      	ldr	r3, [r7, #4]
   27d4e:	785b      	ldrb	r3, [r3, #1]
   27d50:	2b01      	cmp	r3, #1
   27d52:	d003      	beq.n	27d5c <_system_pinmux_config+0x80>
   27d54:	687b      	ldr	r3, [r7, #4]
   27d56:	785b      	ldrb	r3, [r3, #1]
   27d58:	2b02      	cmp	r3, #2
   27d5a:	d107      	bne.n	27d6c <_system_pinmux_config+0x90>
   27d5c:	69fb      	ldr	r3, [r7, #28]
   27d5e:	4a22      	ldr	r2, [pc, #136]	; (27de8 <_system_pinmux_config+0x10c>)
   27d60:	4013      	ands	r3, r2
   27d62:	61fb      	str	r3, [r7, #28]
   27d64:	e002      	b.n	27d6c <_system_pinmux_config+0x90>
   27d66:	68fb      	ldr	r3, [r7, #12]
   27d68:	68ba      	ldr	r2, [r7, #8]
   27d6a:	605a      	str	r2, [r3, #4]
   27d6c:	68bb      	ldr	r3, [r7, #8]
   27d6e:	041b      	lsls	r3, r3, #16
   27d70:	0c1b      	lsrs	r3, r3, #16
   27d72:	61bb      	str	r3, [r7, #24]
   27d74:	68bb      	ldr	r3, [r7, #8]
   27d76:	0c1b      	lsrs	r3, r3, #16
   27d78:	617b      	str	r3, [r7, #20]
   27d7a:	69ba      	ldr	r2, [r7, #24]
   27d7c:	69fb      	ldr	r3, [r7, #28]
   27d7e:	4313      	orrs	r3, r2
   27d80:	22a0      	movs	r2, #160	; 0xa0
   27d82:	05d2      	lsls	r2, r2, #23
   27d84:	431a      	orrs	r2, r3
   27d86:	68fb      	ldr	r3, [r7, #12]
   27d88:	629a      	str	r2, [r3, #40]	; 0x28
   27d8a:	697a      	ldr	r2, [r7, #20]
   27d8c:	69fb      	ldr	r3, [r7, #28]
   27d8e:	4313      	orrs	r3, r2
   27d90:	22d0      	movs	r2, #208	; 0xd0
   27d92:	0612      	lsls	r2, r2, #24
   27d94:	431a      	orrs	r2, r3
   27d96:	68fb      	ldr	r3, [r7, #12]
   27d98:	629a      	str	r2, [r3, #40]	; 0x28
   27d9a:	687b      	ldr	r3, [r7, #4]
   27d9c:	78db      	ldrb	r3, [r3, #3]
   27d9e:	2201      	movs	r2, #1
   27da0:	4053      	eors	r3, r2
   27da2:	b2db      	uxtb	r3, r3
   27da4:	2b00      	cmp	r3, #0
   27da6:	d01a      	beq.n	27dde <_system_pinmux_config+0x102>
   27da8:	69fa      	ldr	r2, [r7, #28]
   27daa:	2380      	movs	r3, #128	; 0x80
   27dac:	02db      	lsls	r3, r3, #11
   27dae:	4013      	ands	r3, r2
   27db0:	d00a      	beq.n	27dc8 <_system_pinmux_config+0xec>
   27db2:	687b      	ldr	r3, [r7, #4]
   27db4:	789b      	ldrb	r3, [r3, #2]
   27db6:	2b01      	cmp	r3, #1
   27db8:	d103      	bne.n	27dc2 <_system_pinmux_config+0xe6>
   27dba:	68fb      	ldr	r3, [r7, #12]
   27dbc:	68ba      	ldr	r2, [r7, #8]
   27dbe:	619a      	str	r2, [r3, #24]
   27dc0:	e002      	b.n	27dc8 <_system_pinmux_config+0xec>
   27dc2:	68fb      	ldr	r3, [r7, #12]
   27dc4:	68ba      	ldr	r2, [r7, #8]
   27dc6:	615a      	str	r2, [r3, #20]
   27dc8:	687b      	ldr	r3, [r7, #4]
   27dca:	785b      	ldrb	r3, [r3, #1]
   27dcc:	2b01      	cmp	r3, #1
   27dce:	d003      	beq.n	27dd8 <_system_pinmux_config+0xfc>
   27dd0:	687b      	ldr	r3, [r7, #4]
   27dd2:	785b      	ldrb	r3, [r3, #1]
   27dd4:	2b02      	cmp	r3, #2
   27dd6:	d102      	bne.n	27dde <_system_pinmux_config+0x102>
   27dd8:	68fb      	ldr	r3, [r7, #12]
   27dda:	68ba      	ldr	r2, [r7, #8]
   27ddc:	609a      	str	r2, [r3, #8]
   27dde:	46c0      	nop			; (mov r8, r8)
   27de0:	46bd      	mov	sp, r7
   27de2:	b008      	add	sp, #32
   27de4:	bd80      	pop	{r7, pc}
   27de6:	46c0      	nop			; (mov r8, r8)
   27de8:	fffbffff 	.word	0xfffbffff

00027dec <system_pinmux_pin_set_config>:
   27dec:	b580      	push	{r7, lr}
   27dee:	b084      	sub	sp, #16
   27df0:	af00      	add	r7, sp, #0
   27df2:	0002      	movs	r2, r0
   27df4:	6039      	str	r1, [r7, #0]
   27df6:	1dfb      	adds	r3, r7, #7
   27df8:	701a      	strb	r2, [r3, #0]
   27dfa:	1dfb      	adds	r3, r7, #7
   27dfc:	781b      	ldrb	r3, [r3, #0]
   27dfe:	0018      	movs	r0, r3
   27e00:	4b0a      	ldr	r3, [pc, #40]	; (27e2c <system_pinmux_pin_set_config+0x40>)
   27e02:	4798      	blx	r3
   27e04:	0003      	movs	r3, r0
   27e06:	60fb      	str	r3, [r7, #12]
   27e08:	1dfb      	adds	r3, r7, #7
   27e0a:	781b      	ldrb	r3, [r3, #0]
   27e0c:	221f      	movs	r2, #31
   27e0e:	4013      	ands	r3, r2
   27e10:	2201      	movs	r2, #1
   27e12:	409a      	lsls	r2, r3
   27e14:	0013      	movs	r3, r2
   27e16:	60bb      	str	r3, [r7, #8]
   27e18:	683a      	ldr	r2, [r7, #0]
   27e1a:	68b9      	ldr	r1, [r7, #8]
   27e1c:	68fb      	ldr	r3, [r7, #12]
   27e1e:	0018      	movs	r0, r3
   27e20:	4b03      	ldr	r3, [pc, #12]	; (27e30 <system_pinmux_pin_set_config+0x44>)
   27e22:	4798      	blx	r3
   27e24:	46c0      	nop			; (mov r8, r8)
   27e26:	46bd      	mov	sp, r7
   27e28:	b004      	add	sp, #16
   27e2a:	bd80      	pop	{r7, pc}
   27e2c:	00027c7d 	.word	0x00027c7d
   27e30:	00027cdd 	.word	0x00027cdd

00027e34 <_system_dummy_init>:
   27e34:	b580      	push	{r7, lr}
   27e36:	af00      	add	r7, sp, #0
   27e38:	46c0      	nop			; (mov r8, r8)
   27e3a:	46bd      	mov	sp, r7
   27e3c:	bd80      	pop	{r7, pc}
	...

00027e40 <system_init>:
   27e40:	b580      	push	{r7, lr}
   27e42:	af00      	add	r7, sp, #0
   27e44:	4b06      	ldr	r3, [pc, #24]	; (27e60 <system_init+0x20>)
   27e46:	4798      	blx	r3
   27e48:	4b06      	ldr	r3, [pc, #24]	; (27e64 <system_init+0x24>)
   27e4a:	4798      	blx	r3
   27e4c:	4b06      	ldr	r3, [pc, #24]	; (27e68 <system_init+0x28>)
   27e4e:	4798      	blx	r3
   27e50:	4b06      	ldr	r3, [pc, #24]	; (27e6c <system_init+0x2c>)
   27e52:	4798      	blx	r3
   27e54:	4b06      	ldr	r3, [pc, #24]	; (27e70 <system_init+0x30>)
   27e56:	4798      	blx	r3
   27e58:	46c0      	nop			; (mov r8, r8)
   27e5a:	46bd      	mov	sp, r7
   27e5c:	bd80      	pop	{r7, pc}
   27e5e:	46c0      	nop			; (mov r8, r8)
   27e60:	000274c1 	.word	0x000274c1
   27e64:	00023f89 	.word	0x00023f89
   27e68:	00012679 	.word	0x00012679
   27e6c:	00024361 	.word	0x00024361
   27e70:	00027e35 	.word	0x00027e35

00027e74 <system_gclk_chan_get_config_defaults>:
   27e74:	b580      	push	{r7, lr}
   27e76:	b082      	sub	sp, #8
   27e78:	af00      	add	r7, sp, #0
   27e7a:	6078      	str	r0, [r7, #4]
   27e7c:	687b      	ldr	r3, [r7, #4]
   27e7e:	2200      	movs	r2, #0
   27e80:	701a      	strb	r2, [r3, #0]
   27e82:	46c0      	nop			; (mov r8, r8)
   27e84:	46bd      	mov	sp, r7
   27e86:	b002      	add	sp, #8
   27e88:	bd80      	pop	{r7, pc}
	...

00027e8c <system_apb_clock_set_mask>:
   27e8c:	b580      	push	{r7, lr}
   27e8e:	b082      	sub	sp, #8
   27e90:	af00      	add	r7, sp, #0
   27e92:	0002      	movs	r2, r0
   27e94:	6039      	str	r1, [r7, #0]
   27e96:	1dfb      	adds	r3, r7, #7
   27e98:	701a      	strb	r2, [r3, #0]
   27e9a:	1dfb      	adds	r3, r7, #7
   27e9c:	781b      	ldrb	r3, [r3, #0]
   27e9e:	2b01      	cmp	r3, #1
   27ea0:	d00a      	beq.n	27eb8 <system_apb_clock_set_mask+0x2c>
   27ea2:	2b02      	cmp	r3, #2
   27ea4:	d00f      	beq.n	27ec6 <system_apb_clock_set_mask+0x3a>
   27ea6:	2b00      	cmp	r3, #0
   27ea8:	d114      	bne.n	27ed4 <system_apb_clock_set_mask+0x48>
   27eaa:	4b0e      	ldr	r3, [pc, #56]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27eac:	4a0d      	ldr	r2, [pc, #52]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27eae:	6991      	ldr	r1, [r2, #24]
   27eb0:	683a      	ldr	r2, [r7, #0]
   27eb2:	430a      	orrs	r2, r1
   27eb4:	619a      	str	r2, [r3, #24]
   27eb6:	e00f      	b.n	27ed8 <system_apb_clock_set_mask+0x4c>
   27eb8:	4b0a      	ldr	r3, [pc, #40]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27eba:	4a0a      	ldr	r2, [pc, #40]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27ebc:	69d1      	ldr	r1, [r2, #28]
   27ebe:	683a      	ldr	r2, [r7, #0]
   27ec0:	430a      	orrs	r2, r1
   27ec2:	61da      	str	r2, [r3, #28]
   27ec4:	e008      	b.n	27ed8 <system_apb_clock_set_mask+0x4c>
   27ec6:	4b07      	ldr	r3, [pc, #28]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27ec8:	4a06      	ldr	r2, [pc, #24]	; (27ee4 <system_apb_clock_set_mask+0x58>)
   27eca:	6a11      	ldr	r1, [r2, #32]
   27ecc:	683a      	ldr	r2, [r7, #0]
   27ece:	430a      	orrs	r2, r1
   27ed0:	621a      	str	r2, [r3, #32]
   27ed2:	e001      	b.n	27ed8 <system_apb_clock_set_mask+0x4c>
   27ed4:	2317      	movs	r3, #23
   27ed6:	e000      	b.n	27eda <system_apb_clock_set_mask+0x4e>
   27ed8:	2300      	movs	r3, #0
   27eda:	0018      	movs	r0, r3
   27edc:	46bd      	mov	sp, r7
   27ede:	b002      	add	sp, #8
   27ee0:	bd80      	pop	{r7, pc}
   27ee2:	46c0      	nop			; (mov r8, r8)
   27ee4:	40000400 	.word	0x40000400

00027ee8 <system_pinmux_get_config_defaults>:
   27ee8:	b580      	push	{r7, lr}
   27eea:	b082      	sub	sp, #8
   27eec:	af00      	add	r7, sp, #0
   27eee:	6078      	str	r0, [r7, #4]
   27ef0:	687b      	ldr	r3, [r7, #4]
   27ef2:	2280      	movs	r2, #128	; 0x80
   27ef4:	701a      	strb	r2, [r3, #0]
   27ef6:	687b      	ldr	r3, [r7, #4]
   27ef8:	2200      	movs	r2, #0
   27efa:	705a      	strb	r2, [r3, #1]
   27efc:	687b      	ldr	r3, [r7, #4]
   27efe:	2201      	movs	r2, #1
   27f00:	709a      	strb	r2, [r3, #2]
   27f02:	687b      	ldr	r3, [r7, #4]
   27f04:	2200      	movs	r2, #0
   27f06:	70da      	strb	r2, [r3, #3]
   27f08:	46c0      	nop			; (mov r8, r8)
   27f0a:	46bd      	mov	sp, r7
   27f0c:	b002      	add	sp, #8
   27f0e:	bd80      	pop	{r7, pc}

00027f10 <_tcc_get_inst_index>:
   27f10:	b580      	push	{r7, lr}
   27f12:	b084      	sub	sp, #16
   27f14:	af00      	add	r7, sp, #0
   27f16:	6078      	str	r0, [r7, #4]
   27f18:	2300      	movs	r3, #0
   27f1a:	60fb      	str	r3, [r7, #12]
   27f1c:	e00c      	b.n	27f38 <_tcc_get_inst_index+0x28>
   27f1e:	4b0a      	ldr	r3, [pc, #40]	; (27f48 <_tcc_get_inst_index+0x38>)
   27f20:	68fa      	ldr	r2, [r7, #12]
   27f22:	0092      	lsls	r2, r2, #2
   27f24:	58d2      	ldr	r2, [r2, r3]
   27f26:	687b      	ldr	r3, [r7, #4]
   27f28:	429a      	cmp	r2, r3
   27f2a:	d102      	bne.n	27f32 <_tcc_get_inst_index+0x22>
   27f2c:	68fb      	ldr	r3, [r7, #12]
   27f2e:	b2db      	uxtb	r3, r3
   27f30:	e006      	b.n	27f40 <_tcc_get_inst_index+0x30>
   27f32:	68fb      	ldr	r3, [r7, #12]
   27f34:	3301      	adds	r3, #1
   27f36:	60fb      	str	r3, [r7, #12]
   27f38:	68fb      	ldr	r3, [r7, #12]
   27f3a:	2b02      	cmp	r3, #2
   27f3c:	d9ef      	bls.n	27f1e <_tcc_get_inst_index+0xe>
   27f3e:	2300      	movs	r3, #0
   27f40:	0018      	movs	r0, r3
   27f42:	46bd      	mov	sp, r7
   27f44:	b004      	add	sp, #16
   27f46:	bd80      	pop	{r7, pc}
   27f48:	00036a24 	.word	0x00036a24

00027f4c <tcc_get_config_defaults>:
   27f4c:	b590      	push	{r4, r7, lr}
   27f4e:	b085      	sub	sp, #20
   27f50:	af00      	add	r7, sp, #0
   27f52:	6078      	str	r0, [r7, #4]
   27f54:	6039      	str	r1, [r7, #0]
   27f56:	230f      	movs	r3, #15
   27f58:	18fc      	adds	r4, r7, r3
   27f5a:	683b      	ldr	r3, [r7, #0]
   27f5c:	0018      	movs	r0, r3
   27f5e:	4bad      	ldr	r3, [pc, #692]	; (28214 <tcc_get_config_defaults+0x2c8>)
   27f60:	4798      	blx	r3
   27f62:	0003      	movs	r3, r0
   27f64:	7023      	strb	r3, [r4, #0]
   27f66:	687b      	ldr	r3, [r7, #4]
   27f68:	2200      	movs	r2, #0
   27f6a:	601a      	str	r2, [r3, #0]
   27f6c:	230f      	movs	r3, #15
   27f6e:	18fb      	adds	r3, r7, r3
   27f70:	781a      	ldrb	r2, [r3, #0]
   27f72:	4ba9      	ldr	r3, [pc, #676]	; (28218 <tcc_get_config_defaults+0x2cc>)
   27f74:	0092      	lsls	r2, r2, #2
   27f76:	58d2      	ldr	r2, [r2, r3]
   27f78:	687b      	ldr	r3, [r7, #4]
   27f7a:	605a      	str	r2, [r3, #4]
   27f7c:	687b      	ldr	r3, [r7, #4]
   27f7e:	2200      	movs	r2, #0
   27f80:	729a      	strb	r2, [r3, #10]
   27f82:	687b      	ldr	r3, [r7, #4]
   27f84:	2200      	movs	r2, #0
   27f86:	72da      	strb	r2, [r3, #11]
   27f88:	687b      	ldr	r3, [r7, #4]
   27f8a:	2200      	movs	r2, #0
   27f8c:	731a      	strb	r2, [r3, #12]
   27f8e:	687b      	ldr	r3, [r7, #4]
   27f90:	2200      	movs	r2, #0
   27f92:	725a      	strb	r2, [r3, #9]
   27f94:	687b      	ldr	r3, [r7, #4]
   27f96:	2200      	movs	r2, #0
   27f98:	721a      	strb	r2, [r3, #8]
   27f9a:	687b      	ldr	r3, [r7, #4]
   27f9c:	2200      	movs	r2, #0
   27f9e:	61da      	str	r2, [r3, #28]
   27fa0:	687b      	ldr	r3, [r7, #4]
   27fa2:	2200      	movs	r2, #0
   27fa4:	621a      	str	r2, [r3, #32]
   27fa6:	687b      	ldr	r3, [r7, #4]
   27fa8:	2200      	movs	r2, #0
   27faa:	625a      	str	r2, [r3, #36]	; 0x24
   27fac:	687b      	ldr	r3, [r7, #4]
   27fae:	2200      	movs	r2, #0
   27fb0:	629a      	str	r2, [r3, #40]	; 0x28
   27fb2:	687b      	ldr	r3, [r7, #4]
   27fb4:	2200      	movs	r2, #0
   27fb6:	751a      	strb	r2, [r3, #20]
   27fb8:	687b      	ldr	r3, [r7, #4]
   27fba:	2200      	movs	r2, #0
   27fbc:	755a      	strb	r2, [r3, #21]
   27fbe:	687b      	ldr	r3, [r7, #4]
   27fc0:	2200      	movs	r2, #0
   27fc2:	759a      	strb	r2, [r3, #22]
   27fc4:	687b      	ldr	r3, [r7, #4]
   27fc6:	2200      	movs	r2, #0
   27fc8:	75da      	strb	r2, [r3, #23]
   27fca:	687b      	ldr	r3, [r7, #4]
   27fcc:	2200      	movs	r2, #0
   27fce:	761a      	strb	r2, [r3, #24]
   27fd0:	687b      	ldr	r3, [r7, #4]
   27fd2:	2200      	movs	r2, #0
   27fd4:	765a      	strb	r2, [r3, #25]
   27fd6:	687b      	ldr	r3, [r7, #4]
   27fd8:	2200      	movs	r2, #0
   27fda:	741a      	strb	r2, [r3, #16]
   27fdc:	687b      	ldr	r3, [r7, #4]
   27fde:	2200      	movs	r2, #0
   27fe0:	745a      	strb	r2, [r3, #17]
   27fe2:	687b      	ldr	r3, [r7, #4]
   27fe4:	2200      	movs	r2, #0
   27fe6:	749a      	strb	r2, [r3, #18]
   27fe8:	687b      	ldr	r3, [r7, #4]
   27fea:	2200      	movs	r2, #0
   27fec:	74da      	strb	r2, [r3, #19]
   27fee:	687b      	ldr	r3, [r7, #4]
   27ff0:	222c      	movs	r2, #44	; 0x2c
   27ff2:	2100      	movs	r1, #0
   27ff4:	5499      	strb	r1, [r3, r2]
   27ff6:	687b      	ldr	r3, [r7, #4]
   27ff8:	222d      	movs	r2, #45	; 0x2d
   27ffa:	2100      	movs	r1, #0
   27ffc:	5499      	strb	r1, [r3, r2]
   27ffe:	687b      	ldr	r3, [r7, #4]
   28000:	222e      	movs	r2, #46	; 0x2e
   28002:	2100      	movs	r1, #0
   28004:	5499      	strb	r1, [r3, r2]
   28006:	687b      	ldr	r3, [r7, #4]
   28008:	222f      	movs	r2, #47	; 0x2f
   2800a:	2100      	movs	r1, #0
   2800c:	5499      	strb	r1, [r3, r2]
   2800e:	687b      	ldr	r3, [r7, #4]
   28010:	2230      	movs	r2, #48	; 0x30
   28012:	2100      	movs	r1, #0
   28014:	5499      	strb	r1, [r3, r2]
   28016:	687b      	ldr	r3, [r7, #4]
   28018:	2231      	movs	r2, #49	; 0x31
   2801a:	2100      	movs	r1, #0
   2801c:	5499      	strb	r1, [r3, r2]
   2801e:	687b      	ldr	r3, [r7, #4]
   28020:	2232      	movs	r2, #50	; 0x32
   28022:	2100      	movs	r1, #0
   28024:	5499      	strb	r1, [r3, r2]
   28026:	687b      	ldr	r3, [r7, #4]
   28028:	2233      	movs	r2, #51	; 0x33
   2802a:	2100      	movs	r1, #0
   2802c:	5499      	strb	r1, [r3, r2]
   2802e:	687b      	ldr	r3, [r7, #4]
   28030:	2234      	movs	r2, #52	; 0x34
   28032:	2100      	movs	r1, #0
   28034:	5499      	strb	r1, [r3, r2]
   28036:	687b      	ldr	r3, [r7, #4]
   28038:	2235      	movs	r2, #53	; 0x35
   2803a:	2100      	movs	r1, #0
   2803c:	5499      	strb	r1, [r3, r2]
   2803e:	687b      	ldr	r3, [r7, #4]
   28040:	2236      	movs	r2, #54	; 0x36
   28042:	2100      	movs	r1, #0
   28044:	5499      	strb	r1, [r3, r2]
   28046:	687b      	ldr	r3, [r7, #4]
   28048:	2237      	movs	r2, #55	; 0x37
   2804a:	2100      	movs	r1, #0
   2804c:	5499      	strb	r1, [r3, r2]
   2804e:	687b      	ldr	r3, [r7, #4]
   28050:	2238      	movs	r2, #56	; 0x38
   28052:	2100      	movs	r1, #0
   28054:	5499      	strb	r1, [r3, r2]
   28056:	687b      	ldr	r3, [r7, #4]
   28058:	2239      	movs	r2, #57	; 0x39
   2805a:	2100      	movs	r1, #0
   2805c:	5499      	strb	r1, [r3, r2]
   2805e:	687b      	ldr	r3, [r7, #4]
   28060:	223a      	movs	r2, #58	; 0x3a
   28062:	2100      	movs	r1, #0
   28064:	5499      	strb	r1, [r3, r2]
   28066:	687b      	ldr	r3, [r7, #4]
   28068:	223b      	movs	r2, #59	; 0x3b
   2806a:	2100      	movs	r1, #0
   2806c:	5499      	strb	r1, [r3, r2]
   2806e:	687b      	ldr	r3, [r7, #4]
   28070:	223c      	movs	r2, #60	; 0x3c
   28072:	2100      	movs	r1, #0
   28074:	5499      	strb	r1, [r3, r2]
   28076:	687b      	ldr	r3, [r7, #4]
   28078:	223d      	movs	r2, #61	; 0x3d
   2807a:	2100      	movs	r1, #0
   2807c:	5499      	strb	r1, [r3, r2]
   2807e:	687b      	ldr	r3, [r7, #4]
   28080:	223e      	movs	r2, #62	; 0x3e
   28082:	2100      	movs	r1, #0
   28084:	5499      	strb	r1, [r3, r2]
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	223f      	movs	r2, #63	; 0x3f
   2808a:	2100      	movs	r1, #0
   2808c:	5499      	strb	r1, [r3, r2]
   2808e:	687b      	ldr	r3, [r7, #4]
   28090:	2240      	movs	r2, #64	; 0x40
   28092:	2100      	movs	r1, #0
   28094:	5499      	strb	r1, [r3, r2]
   28096:	687b      	ldr	r3, [r7, #4]
   28098:	2241      	movs	r2, #65	; 0x41
   2809a:	2100      	movs	r1, #0
   2809c:	5499      	strb	r1, [r3, r2]
   2809e:	687b      	ldr	r3, [r7, #4]
   280a0:	2242      	movs	r2, #66	; 0x42
   280a2:	2100      	movs	r1, #0
   280a4:	5499      	strb	r1, [r3, r2]
   280a6:	687b      	ldr	r3, [r7, #4]
   280a8:	2243      	movs	r2, #67	; 0x43
   280aa:	2100      	movs	r1, #0
   280ac:	5499      	strb	r1, [r3, r2]
   280ae:	687b      	ldr	r3, [r7, #4]
   280b0:	2244      	movs	r2, #68	; 0x44
   280b2:	2100      	movs	r1, #0
   280b4:	5499      	strb	r1, [r3, r2]
   280b6:	687b      	ldr	r3, [r7, #4]
   280b8:	2245      	movs	r2, #69	; 0x45
   280ba:	2100      	movs	r1, #0
   280bc:	5499      	strb	r1, [r3, r2]
   280be:	687b      	ldr	r3, [r7, #4]
   280c0:	2246      	movs	r2, #70	; 0x46
   280c2:	2100      	movs	r1, #0
   280c4:	5499      	strb	r1, [r3, r2]
   280c6:	687b      	ldr	r3, [r7, #4]
   280c8:	2247      	movs	r2, #71	; 0x47
   280ca:	2100      	movs	r1, #0
   280cc:	5499      	strb	r1, [r3, r2]
   280ce:	687b      	ldr	r3, [r7, #4]
   280d0:	2248      	movs	r2, #72	; 0x48
   280d2:	2100      	movs	r1, #0
   280d4:	5499      	strb	r1, [r3, r2]
   280d6:	687b      	ldr	r3, [r7, #4]
   280d8:	2249      	movs	r2, #73	; 0x49
   280da:	2100      	movs	r1, #0
   280dc:	5499      	strb	r1, [r3, r2]
   280de:	687b      	ldr	r3, [r7, #4]
   280e0:	224a      	movs	r2, #74	; 0x4a
   280e2:	2100      	movs	r1, #0
   280e4:	5499      	strb	r1, [r3, r2]
   280e6:	687b      	ldr	r3, [r7, #4]
   280e8:	224b      	movs	r2, #75	; 0x4b
   280ea:	2100      	movs	r1, #0
   280ec:	5499      	strb	r1, [r3, r2]
   280ee:	687b      	ldr	r3, [r7, #4]
   280f0:	224c      	movs	r2, #76	; 0x4c
   280f2:	2100      	movs	r1, #0
   280f4:	5499      	strb	r1, [r3, r2]
   280f6:	687b      	ldr	r3, [r7, #4]
   280f8:	224d      	movs	r2, #77	; 0x4d
   280fa:	2100      	movs	r1, #0
   280fc:	5499      	strb	r1, [r3, r2]
   280fe:	687b      	ldr	r3, [r7, #4]
   28100:	224e      	movs	r2, #78	; 0x4e
   28102:	2100      	movs	r1, #0
   28104:	5499      	strb	r1, [r3, r2]
   28106:	687b      	ldr	r3, [r7, #4]
   28108:	224f      	movs	r2, #79	; 0x4f
   2810a:	2100      	movs	r1, #0
   2810c:	5499      	strb	r1, [r3, r2]
   2810e:	687b      	ldr	r3, [r7, #4]
   28110:	2250      	movs	r2, #80	; 0x50
   28112:	2100      	movs	r1, #0
   28114:	5499      	strb	r1, [r3, r2]
   28116:	687b      	ldr	r3, [r7, #4]
   28118:	2251      	movs	r2, #81	; 0x51
   2811a:	2100      	movs	r1, #0
   2811c:	5499      	strb	r1, [r3, r2]
   2811e:	687b      	ldr	r3, [r7, #4]
   28120:	2252      	movs	r2, #82	; 0x52
   28122:	2100      	movs	r1, #0
   28124:	5499      	strb	r1, [r3, r2]
   28126:	687b      	ldr	r3, [r7, #4]
   28128:	2253      	movs	r2, #83	; 0x53
   2812a:	2100      	movs	r1, #0
   2812c:	5499      	strb	r1, [r3, r2]
   2812e:	687b      	ldr	r3, [r7, #4]
   28130:	2254      	movs	r2, #84	; 0x54
   28132:	2100      	movs	r1, #0
   28134:	5499      	strb	r1, [r3, r2]
   28136:	687b      	ldr	r3, [r7, #4]
   28138:	2255      	movs	r2, #85	; 0x55
   2813a:	2100      	movs	r1, #0
   2813c:	5499      	strb	r1, [r3, r2]
   2813e:	687b      	ldr	r3, [r7, #4]
   28140:	2256      	movs	r2, #86	; 0x56
   28142:	2100      	movs	r1, #0
   28144:	5499      	strb	r1, [r3, r2]
   28146:	687b      	ldr	r3, [r7, #4]
   28148:	2257      	movs	r2, #87	; 0x57
   2814a:	2100      	movs	r1, #0
   2814c:	5499      	strb	r1, [r3, r2]
   2814e:	687b      	ldr	r3, [r7, #4]
   28150:	2298      	movs	r2, #152	; 0x98
   28152:	2100      	movs	r1, #0
   28154:	5499      	strb	r1, [r3, r2]
   28156:	687b      	ldr	r3, [r7, #4]
   28158:	2200      	movs	r2, #0
   2815a:	659a      	str	r2, [r3, #88]	; 0x58
   2815c:	687b      	ldr	r3, [r7, #4]
   2815e:	2200      	movs	r2, #0
   28160:	679a      	str	r2, [r3, #120]	; 0x78
   28162:	687b      	ldr	r3, [r7, #4]
   28164:	2299      	movs	r2, #153	; 0x99
   28166:	2100      	movs	r1, #0
   28168:	5499      	strb	r1, [r3, r2]
   2816a:	687b      	ldr	r3, [r7, #4]
   2816c:	2200      	movs	r2, #0
   2816e:	65da      	str	r2, [r3, #92]	; 0x5c
   28170:	687b      	ldr	r3, [r7, #4]
   28172:	2200      	movs	r2, #0
   28174:	67da      	str	r2, [r3, #124]	; 0x7c
   28176:	687b      	ldr	r3, [r7, #4]
   28178:	229a      	movs	r2, #154	; 0x9a
   2817a:	2100      	movs	r1, #0
   2817c:	5499      	strb	r1, [r3, r2]
   2817e:	687b      	ldr	r3, [r7, #4]
   28180:	2200      	movs	r2, #0
   28182:	661a      	str	r2, [r3, #96]	; 0x60
   28184:	687b      	ldr	r3, [r7, #4]
   28186:	2280      	movs	r2, #128	; 0x80
   28188:	2100      	movs	r1, #0
   2818a:	5099      	str	r1, [r3, r2]
   2818c:	687b      	ldr	r3, [r7, #4]
   2818e:	229b      	movs	r2, #155	; 0x9b
   28190:	2100      	movs	r1, #0
   28192:	5499      	strb	r1, [r3, r2]
   28194:	687b      	ldr	r3, [r7, #4]
   28196:	2200      	movs	r2, #0
   28198:	665a      	str	r2, [r3, #100]	; 0x64
   2819a:	687b      	ldr	r3, [r7, #4]
   2819c:	2284      	movs	r2, #132	; 0x84
   2819e:	2100      	movs	r1, #0
   281a0:	5099      	str	r1, [r3, r2]
   281a2:	687b      	ldr	r3, [r7, #4]
   281a4:	229c      	movs	r2, #156	; 0x9c
   281a6:	2100      	movs	r1, #0
   281a8:	5499      	strb	r1, [r3, r2]
   281aa:	687b      	ldr	r3, [r7, #4]
   281ac:	2200      	movs	r2, #0
   281ae:	669a      	str	r2, [r3, #104]	; 0x68
   281b0:	687b      	ldr	r3, [r7, #4]
   281b2:	2288      	movs	r2, #136	; 0x88
   281b4:	2100      	movs	r1, #0
   281b6:	5099      	str	r1, [r3, r2]
   281b8:	687b      	ldr	r3, [r7, #4]
   281ba:	229d      	movs	r2, #157	; 0x9d
   281bc:	2100      	movs	r1, #0
   281be:	5499      	strb	r1, [r3, r2]
   281c0:	687b      	ldr	r3, [r7, #4]
   281c2:	2200      	movs	r2, #0
   281c4:	66da      	str	r2, [r3, #108]	; 0x6c
   281c6:	687b      	ldr	r3, [r7, #4]
   281c8:	228c      	movs	r2, #140	; 0x8c
   281ca:	2100      	movs	r1, #0
   281cc:	5099      	str	r1, [r3, r2]
   281ce:	687b      	ldr	r3, [r7, #4]
   281d0:	229e      	movs	r2, #158	; 0x9e
   281d2:	2100      	movs	r1, #0
   281d4:	5499      	strb	r1, [r3, r2]
   281d6:	687b      	ldr	r3, [r7, #4]
   281d8:	2200      	movs	r2, #0
   281da:	671a      	str	r2, [r3, #112]	; 0x70
   281dc:	687b      	ldr	r3, [r7, #4]
   281de:	2290      	movs	r2, #144	; 0x90
   281e0:	2100      	movs	r1, #0
   281e2:	5099      	str	r1, [r3, r2]
   281e4:	687b      	ldr	r3, [r7, #4]
   281e6:	229f      	movs	r2, #159	; 0x9f
   281e8:	2100      	movs	r1, #0
   281ea:	5499      	strb	r1, [r3, r2]
   281ec:	687b      	ldr	r3, [r7, #4]
   281ee:	2200      	movs	r2, #0
   281f0:	675a      	str	r2, [r3, #116]	; 0x74
   281f2:	687b      	ldr	r3, [r7, #4]
   281f4:	2294      	movs	r2, #148	; 0x94
   281f6:	2100      	movs	r1, #0
   281f8:	5099      	str	r1, [r3, r2]
   281fa:	687b      	ldr	r3, [r7, #4]
   281fc:	22a0      	movs	r2, #160	; 0xa0
   281fe:	2101      	movs	r1, #1
   28200:	5499      	strb	r1, [r3, r2]
   28202:	687b      	ldr	r3, [r7, #4]
   28204:	22a1      	movs	r2, #161	; 0xa1
   28206:	2100      	movs	r1, #0
   28208:	5499      	strb	r1, [r3, r2]
   2820a:	46c0      	nop			; (mov r8, r8)
   2820c:	46bd      	mov	sp, r7
   2820e:	b005      	add	sp, #20
   28210:	bd90      	pop	{r4, r7, pc}
   28212:	46c0      	nop			; (mov r8, r8)
   28214:	00027f11 	.word	0x00027f11
   28218:	00036a40 	.word	0x00036a40

0002821c <_tcc_build_ctrla>:
   2821c:	b580      	push	{r7, lr}
   2821e:	b086      	sub	sp, #24
   28220:	af00      	add	r7, sp, #0
   28222:	60b9      	str	r1, [r7, #8]
   28224:	607a      	str	r2, [r7, #4]
   28226:	230f      	movs	r3, #15
   28228:	18fb      	adds	r3, r7, r3
   2822a:	1c02      	adds	r2, r0, #0
   2822c:	701a      	strb	r2, [r3, #0]
   2822e:	2300      	movs	r3, #0
   28230:	617b      	str	r3, [r7, #20]
   28232:	2300      	movs	r3, #0
   28234:	613b      	str	r3, [r7, #16]
   28236:	e01d      	b.n	28274 <_tcc_build_ctrla+0x58>
   28238:	68ba      	ldr	r2, [r7, #8]
   2823a:	693b      	ldr	r3, [r7, #16]
   2823c:	18d3      	adds	r3, r2, r3
   2823e:	3310      	adds	r3, #16
   28240:	781b      	ldrb	r3, [r3, #0]
   28242:	2b01      	cmp	r3, #1
   28244:	d113      	bne.n	2826e <_tcc_build_ctrla+0x52>
   28246:	230f      	movs	r3, #15
   28248:	18fb      	adds	r3, r7, r3
   2824a:	781b      	ldrb	r3, [r3, #0]
   2824c:	4a1b      	ldr	r2, [pc, #108]	; (282bc <_tcc_build_ctrla+0xa0>)
   2824e:	5cd3      	ldrb	r3, [r2, r3]
   28250:	001a      	movs	r2, r3
   28252:	693b      	ldr	r3, [r7, #16]
   28254:	429a      	cmp	r2, r3
   28256:	da01      	bge.n	2825c <_tcc_build_ctrla+0x40>
   28258:	2317      	movs	r3, #23
   2825a:	e02a      	b.n	282b2 <_tcc_build_ctrla+0x96>
   2825c:	2380      	movs	r3, #128	; 0x80
   2825e:	045a      	lsls	r2, r3, #17
   28260:	693b      	ldr	r3, [r7, #16]
   28262:	409a      	lsls	r2, r3
   28264:	0013      	movs	r3, r2
   28266:	001a      	movs	r2, r3
   28268:	697b      	ldr	r3, [r7, #20]
   2826a:	4313      	orrs	r3, r2
   2826c:	617b      	str	r3, [r7, #20]
   2826e:	693b      	ldr	r3, [r7, #16]
   28270:	3301      	adds	r3, #1
   28272:	613b      	str	r3, [r7, #16]
   28274:	693b      	ldr	r3, [r7, #16]
   28276:	2b03      	cmp	r3, #3
   28278:	ddde      	ble.n	28238 <_tcc_build_ctrla+0x1c>
   2827a:	68bb      	ldr	r3, [r7, #8]
   2827c:	22a1      	movs	r2, #161	; 0xa1
   2827e:	5c9b      	ldrb	r3, [r3, r2]
   28280:	2b00      	cmp	r3, #0
   28282:	d004      	beq.n	2828e <_tcc_build_ctrla+0x72>
   28284:	697b      	ldr	r3, [r7, #20]
   28286:	2280      	movs	r2, #128	; 0x80
   28288:	0112      	lsls	r2, r2, #4
   2828a:	4313      	orrs	r3, r2
   2828c:	617b      	str	r3, [r7, #20]
   2828e:	68bb      	ldr	r3, [r7, #8]
   28290:	7b1b      	ldrb	r3, [r3, #12]
   28292:	031b      	lsls	r3, r3, #12
   28294:	001a      	movs	r2, r3
   28296:	697b      	ldr	r3, [r7, #20]
   28298:	4313      	orrs	r3, r2
   2829a:	617b      	str	r3, [r7, #20]
   2829c:	68bb      	ldr	r3, [r7, #8]
   2829e:	7adb      	ldrb	r3, [r3, #11]
   282a0:	021b      	lsls	r3, r3, #8
   282a2:	001a      	movs	r2, r3
   282a4:	697b      	ldr	r3, [r7, #20]
   282a6:	4313      	orrs	r3, r2
   282a8:	617b      	str	r3, [r7, #20]
   282aa:	687b      	ldr	r3, [r7, #4]
   282ac:	697a      	ldr	r2, [r7, #20]
   282ae:	601a      	str	r2, [r3, #0]
   282b0:	2300      	movs	r3, #0
   282b2:	0018      	movs	r0, r3
   282b4:	46bd      	mov	sp, r7
   282b6:	b006      	add	sp, #24
   282b8:	bd80      	pop	{r7, pc}
   282ba:	46c0      	nop			; (mov r8, r8)
   282bc:	00036a4c 	.word	0x00036a4c

000282c0 <_tcc_build_ctrlb>:
   282c0:	b580      	push	{r7, lr}
   282c2:	b086      	sub	sp, #24
   282c4:	af00      	add	r7, sp, #0
   282c6:	60b9      	str	r1, [r7, #8]
   282c8:	607a      	str	r2, [r7, #4]
   282ca:	230f      	movs	r3, #15
   282cc:	18fb      	adds	r3, r7, r3
   282ce:	1c02      	adds	r2, r0, #0
   282d0:	701a      	strb	r2, [r3, #0]
   282d2:	2317      	movs	r3, #23
   282d4:	18fb      	adds	r3, r7, r3
   282d6:	2200      	movs	r2, #0
   282d8:	701a      	strb	r2, [r3, #0]
   282da:	68bb      	ldr	r3, [r7, #8]
   282dc:	7a1b      	ldrb	r3, [r3, #8]
   282de:	2b00      	cmp	r3, #0
   282e0:	d007      	beq.n	282f2 <_tcc_build_ctrlb+0x32>
   282e2:	2317      	movs	r3, #23
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	2217      	movs	r2, #23
   282e8:	18ba      	adds	r2, r7, r2
   282ea:	7812      	ldrb	r2, [r2, #0]
   282ec:	2104      	movs	r1, #4
   282ee:	430a      	orrs	r2, r1
   282f0:	701a      	strb	r2, [r3, #0]
   282f2:	68bb      	ldr	r3, [r7, #8]
   282f4:	7a5b      	ldrb	r3, [r3, #9]
   282f6:	2b01      	cmp	r3, #1
   282f8:	d107      	bne.n	2830a <_tcc_build_ctrlb+0x4a>
   282fa:	2317      	movs	r3, #23
   282fc:	18fb      	adds	r3, r7, r3
   282fe:	2217      	movs	r2, #23
   28300:	18ba      	adds	r2, r7, r2
   28302:	7812      	ldrb	r2, [r2, #0]
   28304:	2101      	movs	r1, #1
   28306:	430a      	orrs	r2, r1
   28308:	701a      	strb	r2, [r3, #0]
   2830a:	687b      	ldr	r3, [r7, #4]
   2830c:	2217      	movs	r2, #23
   2830e:	18ba      	adds	r2, r7, r2
   28310:	7812      	ldrb	r2, [r2, #0]
   28312:	701a      	strb	r2, [r3, #0]
   28314:	46c0      	nop			; (mov r8, r8)
   28316:	46bd      	mov	sp, r7
   28318:	b006      	add	sp, #24
   2831a:	bd80      	pop	{r7, pc}

0002831c <_tcc_build_faults>:
   2831c:	b580      	push	{r7, lr}
   2831e:	b088      	sub	sp, #32
   28320:	af00      	add	r7, sp, #0
   28322:	60b9      	str	r1, [r7, #8]
   28324:	607a      	str	r2, [r7, #4]
   28326:	230f      	movs	r3, #15
   28328:	18fb      	adds	r3, r7, r3
   2832a:	1c02      	adds	r2, r0, #0
   2832c:	701a      	strb	r2, [r3, #0]
   2832e:	230f      	movs	r3, #15
   28330:	18fb      	adds	r3, r7, r3
   28332:	781a      	ldrb	r2, [r3, #0]
   28334:	231b      	movs	r3, #27
   28336:	18fb      	adds	r3, r7, r3
   28338:	493e      	ldr	r1, [pc, #248]	; (28434 <_tcc_build_faults+0x118>)
   2833a:	5c8a      	ldrb	r2, [r1, r2]
   2833c:	701a      	strb	r2, [r3, #0]
   2833e:	2300      	movs	r3, #0
   28340:	61fb      	str	r3, [r7, #28]
   28342:	e06e      	b.n	28422 <_tcc_build_faults+0x106>
   28344:	69fa      	ldr	r2, [r7, #28]
   28346:	0013      	movs	r3, r2
   28348:	009b      	lsls	r3, r3, #2
   2834a:	189b      	adds	r3, r3, r2
   2834c:	005b      	lsls	r3, r3, #1
   2834e:	3328      	adds	r3, #40	; 0x28
   28350:	68ba      	ldr	r2, [r7, #8]
   28352:	18d3      	adds	r3, r2, r3
   28354:	3304      	adds	r3, #4
   28356:	617b      	str	r3, [r7, #20]
   28358:	697b      	ldr	r3, [r7, #20]
   2835a:	7a5b      	ldrb	r3, [r3, #9]
   2835c:	221b      	movs	r2, #27
   2835e:	18ba      	adds	r2, r7, r2
   28360:	7812      	ldrb	r2, [r2, #0]
   28362:	429a      	cmp	r2, r3
   28364:	d801      	bhi.n	2836a <_tcc_build_faults+0x4e>
   28366:	2317      	movs	r3, #23
   28368:	e05f      	b.n	2842a <_tcc_build_faults+0x10e>
   2836a:	697b      	ldr	r3, [r7, #20]
   2836c:	781b      	ldrb	r3, [r3, #0]
   2836e:	2b0f      	cmp	r3, #15
   28370:	d901      	bls.n	28376 <_tcc_build_faults+0x5a>
   28372:	2317      	movs	r3, #23
   28374:	e059      	b.n	2842a <_tcc_build_faults+0x10e>
   28376:	697b      	ldr	r3, [r7, #20]
   28378:	781b      	ldrb	r3, [r3, #0]
   2837a:	061b      	lsls	r3, r3, #24
   2837c:	001a      	movs	r2, r3
   2837e:	23f0      	movs	r3, #240	; 0xf0
   28380:	051b      	lsls	r3, r3, #20
   28382:	401a      	ands	r2, r3
   28384:	697b      	ldr	r3, [r7, #20]
   28386:	785b      	ldrb	r3, [r3, #1]
   28388:	041b      	lsls	r3, r3, #16
   2838a:	0019      	movs	r1, r3
   2838c:	23ff      	movs	r3, #255	; 0xff
   2838e:	041b      	lsls	r3, r3, #16
   28390:	400b      	ands	r3, r1
   28392:	431a      	orrs	r2, r3
   28394:	697b      	ldr	r3, [r7, #20]
   28396:	789b      	ldrb	r3, [r3, #2]
   28398:	2b00      	cmp	r3, #0
   2839a:	d001      	beq.n	283a0 <_tcc_build_faults+0x84>
   2839c:	2380      	movs	r3, #128	; 0x80
   2839e:	e000      	b.n	283a2 <_tcc_build_faults+0x86>
   283a0:	2300      	movs	r3, #0
   283a2:	431a      	orrs	r2, r3
   283a4:	697b      	ldr	r3, [r7, #20]
   283a6:	78db      	ldrb	r3, [r3, #3]
   283a8:	2b00      	cmp	r3, #0
   283aa:	d001      	beq.n	283b0 <_tcc_build_faults+0x94>
   283ac:	2308      	movs	r3, #8
   283ae:	e000      	b.n	283b2 <_tcc_build_faults+0x96>
   283b0:	2300      	movs	r3, #0
   283b2:	431a      	orrs	r2, r3
   283b4:	697b      	ldr	r3, [r7, #20]
   283b6:	791b      	ldrb	r3, [r3, #4]
   283b8:	2b00      	cmp	r3, #0
   283ba:	d001      	beq.n	283c0 <_tcc_build_faults+0xa4>
   283bc:	2310      	movs	r3, #16
   283be:	e000      	b.n	283c2 <_tcc_build_faults+0xa6>
   283c0:	2300      	movs	r3, #0
   283c2:	431a      	orrs	r2, r3
   283c4:	697b      	ldr	r3, [r7, #20]
   283c6:	795b      	ldrb	r3, [r3, #5]
   283c8:	0019      	movs	r1, r3
   283ca:	2303      	movs	r3, #3
   283cc:	400b      	ands	r3, r1
   283ce:	431a      	orrs	r2, r3
   283d0:	697b      	ldr	r3, [r7, #20]
   283d2:	799b      	ldrb	r3, [r3, #6]
   283d4:	015b      	lsls	r3, r3, #5
   283d6:	0019      	movs	r1, r3
   283d8:	2360      	movs	r3, #96	; 0x60
   283da:	400b      	ands	r3, r1
   283dc:	431a      	orrs	r2, r3
   283de:	697b      	ldr	r3, [r7, #20]
   283e0:	79db      	ldrb	r3, [r3, #7]
   283e2:	021b      	lsls	r3, r3, #8
   283e4:	0019      	movs	r1, r3
   283e6:	23c0      	movs	r3, #192	; 0xc0
   283e8:	009b      	lsls	r3, r3, #2
   283ea:	400b      	ands	r3, r1
   283ec:	431a      	orrs	r2, r3
   283ee:	697b      	ldr	r3, [r7, #20]
   283f0:	7a1b      	ldrb	r3, [r3, #8]
   283f2:	031b      	lsls	r3, r3, #12
   283f4:	0019      	movs	r1, r3
   283f6:	23e0      	movs	r3, #224	; 0xe0
   283f8:	01db      	lsls	r3, r3, #7
   283fa:	400b      	ands	r3, r1
   283fc:	431a      	orrs	r2, r3
   283fe:	697b      	ldr	r3, [r7, #20]
   28400:	7a5b      	ldrb	r3, [r3, #9]
   28402:	029b      	lsls	r3, r3, #10
   28404:	0019      	movs	r1, r3
   28406:	23c0      	movs	r3, #192	; 0xc0
   28408:	011b      	lsls	r3, r3, #4
   2840a:	400b      	ands	r3, r1
   2840c:	4313      	orrs	r3, r2
   2840e:	613b      	str	r3, [r7, #16]
   28410:	69fb      	ldr	r3, [r7, #28]
   28412:	009b      	lsls	r3, r3, #2
   28414:	687a      	ldr	r2, [r7, #4]
   28416:	18d3      	adds	r3, r2, r3
   28418:	693a      	ldr	r2, [r7, #16]
   2841a:	601a      	str	r2, [r3, #0]
   2841c:	69fb      	ldr	r3, [r7, #28]
   2841e:	3301      	adds	r3, #1
   28420:	61fb      	str	r3, [r7, #28]
   28422:	69fb      	ldr	r3, [r7, #28]
   28424:	2b01      	cmp	r3, #1
   28426:	dd8d      	ble.n	28344 <_tcc_build_faults+0x28>
   28428:	2300      	movs	r3, #0
   2842a:	0018      	movs	r0, r3
   2842c:	46bd      	mov	sp, r7
   2842e:	b008      	add	sp, #32
   28430:	bd80      	pop	{r7, pc}
   28432:	46c0      	nop			; (mov r8, r8)
   28434:	00036a4c 	.word	0x00036a4c

00028438 <_tcc_build_drvctrl>:
   28438:	b580      	push	{r7, lr}
   2843a:	b088      	sub	sp, #32
   2843c:	af00      	add	r7, sp, #0
   2843e:	60b9      	str	r1, [r7, #8]
   28440:	607a      	str	r2, [r7, #4]
   28442:	230f      	movs	r3, #15
   28444:	18fb      	adds	r3, r7, r3
   28446:	1c02      	adds	r2, r0, #0
   28448:	701a      	strb	r2, [r3, #0]
   2844a:	230f      	movs	r3, #15
   2844c:	18fb      	adds	r3, r7, r3
   2844e:	781a      	ldrb	r2, [r3, #0]
   28450:	2317      	movs	r3, #23
   28452:	18fb      	adds	r3, r7, r3
   28454:	492d      	ldr	r1, [pc, #180]	; (2850c <_tcc_build_drvctrl+0xd4>)
   28456:	5c8a      	ldrb	r2, [r1, r2]
   28458:	701a      	strb	r2, [r3, #0]
   2845a:	2300      	movs	r3, #0
   2845c:	61bb      	str	r3, [r7, #24]
   2845e:	2300      	movs	r3, #0
   28460:	61fb      	str	r3, [r7, #28]
   28462:	e048      	b.n	284f6 <_tcc_build_drvctrl+0xbe>
   28464:	68ba      	ldr	r2, [r7, #8]
   28466:	2150      	movs	r1, #80	; 0x50
   28468:	69fb      	ldr	r3, [r7, #28]
   2846a:	18d3      	adds	r3, r2, r3
   2846c:	185b      	adds	r3, r3, r1
   2846e:	781b      	ldrb	r3, [r3, #0]
   28470:	2b00      	cmp	r3, #0
   28472:	d010      	beq.n	28496 <_tcc_build_drvctrl+0x5e>
   28474:	2317      	movs	r3, #23
   28476:	18fb      	adds	r3, r7, r3
   28478:	781a      	ldrb	r2, [r3, #0]
   2847a:	69fb      	ldr	r3, [r7, #28]
   2847c:	429a      	cmp	r2, r3
   2847e:	d801      	bhi.n	28484 <_tcc_build_drvctrl+0x4c>
   28480:	2317      	movs	r3, #23
   28482:	e03f      	b.n	28504 <_tcc_build_drvctrl+0xcc>
   28484:	2380      	movs	r3, #128	; 0x80
   28486:	025a      	lsls	r2, r3, #9
   28488:	69fb      	ldr	r3, [r7, #28]
   2848a:	409a      	lsls	r2, r3
   2848c:	0013      	movs	r3, r2
   2848e:	001a      	movs	r2, r3
   28490:	69bb      	ldr	r3, [r7, #24]
   28492:	4313      	orrs	r3, r2
   28494:	61bb      	str	r3, [r7, #24]
   28496:	68ba      	ldr	r2, [r7, #8]
   28498:	69fb      	ldr	r3, [r7, #28]
   2849a:	331c      	adds	r3, #28
   2849c:	005b      	lsls	r3, r3, #1
   2849e:	18d3      	adds	r3, r2, r3
   284a0:	3309      	adds	r3, #9
   284a2:	781b      	ldrb	r3, [r3, #0]
   284a4:	2b00      	cmp	r3, #0
   284a6:	d023      	beq.n	284f0 <_tcc_build_drvctrl+0xb8>
   284a8:	2317      	movs	r3, #23
   284aa:	18fb      	adds	r3, r7, r3
   284ac:	781a      	ldrb	r2, [r3, #0]
   284ae:	69fb      	ldr	r3, [r7, #28]
   284b0:	429a      	cmp	r2, r3
   284b2:	d801      	bhi.n	284b8 <_tcc_build_drvctrl+0x80>
   284b4:	2317      	movs	r3, #23
   284b6:	e025      	b.n	28504 <_tcc_build_drvctrl+0xcc>
   284b8:	68ba      	ldr	r2, [r7, #8]
   284ba:	69fb      	ldr	r3, [r7, #28]
   284bc:	331c      	adds	r3, #28
   284be:	005b      	lsls	r3, r3, #1
   284c0:	18d3      	adds	r3, r2, r3
   284c2:	3309      	adds	r3, #9
   284c4:	781b      	ldrb	r3, [r3, #0]
   284c6:	2b02      	cmp	r3, #2
   284c8:	d10a      	bne.n	284e0 <_tcc_build_drvctrl+0xa8>
   284ca:	2302      	movs	r3, #2
   284cc:	33ff      	adds	r3, #255	; 0xff
   284ce:	001a      	movs	r2, r3
   284d0:	69fb      	ldr	r3, [r7, #28]
   284d2:	409a      	lsls	r2, r3
   284d4:	0013      	movs	r3, r2
   284d6:	001a      	movs	r2, r3
   284d8:	69bb      	ldr	r3, [r7, #24]
   284da:	4313      	orrs	r3, r2
   284dc:	61bb      	str	r3, [r7, #24]
   284de:	e007      	b.n	284f0 <_tcc_build_drvctrl+0xb8>
   284e0:	2201      	movs	r2, #1
   284e2:	69fb      	ldr	r3, [r7, #28]
   284e4:	409a      	lsls	r2, r3
   284e6:	0013      	movs	r3, r2
   284e8:	001a      	movs	r2, r3
   284ea:	69bb      	ldr	r3, [r7, #24]
   284ec:	4313      	orrs	r3, r2
   284ee:	61bb      	str	r3, [r7, #24]
   284f0:	69fb      	ldr	r3, [r7, #28]
   284f2:	3301      	adds	r3, #1
   284f4:	61fb      	str	r3, [r7, #28]
   284f6:	69fb      	ldr	r3, [r7, #28]
   284f8:	2b07      	cmp	r3, #7
   284fa:	d9b3      	bls.n	28464 <_tcc_build_drvctrl+0x2c>
   284fc:	687b      	ldr	r3, [r7, #4]
   284fe:	69ba      	ldr	r2, [r7, #24]
   28500:	601a      	str	r2, [r3, #0]
   28502:	2300      	movs	r3, #0
   28504:	0018      	movs	r0, r3
   28506:	46bd      	mov	sp, r7
   28508:	b008      	add	sp, #32
   2850a:	bd80      	pop	{r7, pc}
   2850c:	00036a50 	.word	0x00036a50

00028510 <_tcc_build_waves>:
   28510:	b580      	push	{r7, lr}
   28512:	b088      	sub	sp, #32
   28514:	af00      	add	r7, sp, #0
   28516:	60b9      	str	r1, [r7, #8]
   28518:	607a      	str	r2, [r7, #4]
   2851a:	230f      	movs	r3, #15
   2851c:	18fb      	adds	r3, r7, r3
   2851e:	1c02      	adds	r2, r0, #0
   28520:	701a      	strb	r2, [r3, #0]
   28522:	230f      	movs	r3, #15
   28524:	18fb      	adds	r3, r7, r3
   28526:	781a      	ldrb	r2, [r3, #0]
   28528:	2317      	movs	r3, #23
   2852a:	18fb      	adds	r3, r7, r3
   2852c:	491d      	ldr	r1, [pc, #116]	; (285a4 <_tcc_build_waves+0x94>)
   2852e:	5c8a      	ldrb	r2, [r1, r2]
   28530:	701a      	strb	r2, [r3, #0]
   28532:	68bb      	ldr	r3, [r7, #8]
   28534:	3310      	adds	r3, #16
   28536:	613b      	str	r3, [r7, #16]
   28538:	693b      	ldr	r3, [r7, #16]
   2853a:	7a5b      	ldrb	r3, [r3, #9]
   2853c:	011b      	lsls	r3, r3, #4
   2853e:	001a      	movs	r2, r3
   28540:	2330      	movs	r3, #48	; 0x30
   28542:	401a      	ands	r2, r3
   28544:	693b      	ldr	r3, [r7, #16]
   28546:	7a1b      	ldrb	r3, [r3, #8]
   28548:	0019      	movs	r1, r3
   2854a:	2307      	movs	r3, #7
   2854c:	400b      	ands	r3, r1
   2854e:	4313      	orrs	r3, r2
   28550:	61bb      	str	r3, [r7, #24]
   28552:	2300      	movs	r3, #0
   28554:	61fb      	str	r3, [r7, #28]
   28556:	e01a      	b.n	2858e <_tcc_build_waves+0x7e>
   28558:	693a      	ldr	r2, [r7, #16]
   2855a:	69fb      	ldr	r3, [r7, #28]
   2855c:	18d3      	adds	r3, r2, r3
   2855e:	3304      	adds	r3, #4
   28560:	781b      	ldrb	r3, [r3, #0]
   28562:	2b00      	cmp	r3, #0
   28564:	d010      	beq.n	28588 <_tcc_build_waves+0x78>
   28566:	2317      	movs	r3, #23
   28568:	18fb      	adds	r3, r7, r3
   2856a:	781a      	ldrb	r2, [r3, #0]
   2856c:	69fb      	ldr	r3, [r7, #28]
   2856e:	429a      	cmp	r2, r3
   28570:	dc01      	bgt.n	28576 <_tcc_build_waves+0x66>
   28572:	2317      	movs	r3, #23
   28574:	e012      	b.n	2859c <_tcc_build_waves+0x8c>
   28576:	2380      	movs	r3, #128	; 0x80
   28578:	025a      	lsls	r2, r3, #9
   2857a:	69fb      	ldr	r3, [r7, #28]
   2857c:	409a      	lsls	r2, r3
   2857e:	0013      	movs	r3, r2
   28580:	001a      	movs	r2, r3
   28582:	69bb      	ldr	r3, [r7, #24]
   28584:	4313      	orrs	r3, r2
   28586:	61bb      	str	r3, [r7, #24]
   28588:	69fb      	ldr	r3, [r7, #28]
   2858a:	3301      	adds	r3, #1
   2858c:	61fb      	str	r3, [r7, #28]
   2858e:	69fb      	ldr	r3, [r7, #28]
   28590:	2b03      	cmp	r3, #3
   28592:	dde1      	ble.n	28558 <_tcc_build_waves+0x48>
   28594:	687b      	ldr	r3, [r7, #4]
   28596:	69ba      	ldr	r2, [r7, #24]
   28598:	601a      	str	r2, [r3, #0]
   2859a:	2300      	movs	r3, #0
   2859c:	0018      	movs	r0, r3
   2859e:	46bd      	mov	sp, r7
   285a0:	b008      	add	sp, #32
   285a2:	bd80      	pop	{r7, pc}
   285a4:	00036a4c 	.word	0x00036a4c

000285a8 <tcc_init>:
   285a8:	b590      	push	{r4, r7, lr}
   285aa:	b091      	sub	sp, #68	; 0x44
   285ac:	af00      	add	r7, sp, #0
   285ae:	60f8      	str	r0, [r7, #12]
   285b0:	60b9      	str	r1, [r7, #8]
   285b2:	607a      	str	r2, [r7, #4]
   285b4:	233b      	movs	r3, #59	; 0x3b
   285b6:	18fc      	adds	r4, r7, r3
   285b8:	68bb      	ldr	r3, [r7, #8]
   285ba:	0018      	movs	r0, r3
   285bc:	4bc4      	ldr	r3, [pc, #784]	; (288d0 <tcc_init+0x328>)
   285be:	4798      	blx	r3
   285c0:	0003      	movs	r3, r0
   285c2:	7023      	strb	r3, [r4, #0]
   285c4:	233b      	movs	r3, #59	; 0x3b
   285c6:	18fb      	adds	r3, r7, r3
   285c8:	781a      	ldrb	r2, [r3, #0]
   285ca:	4bc2      	ldr	r3, [pc, #776]	; (288d4 <tcc_init+0x32c>)
   285cc:	0092      	lsls	r2, r2, #2
   285ce:	58d3      	ldr	r3, [r2, r3]
   285d0:	0019      	movs	r1, r3
   285d2:	2002      	movs	r0, #2
   285d4:	4bc0      	ldr	r3, [pc, #768]	; (288d8 <tcc_init+0x330>)
   285d6:	4798      	blx	r3
   285d8:	68bb      	ldr	r3, [r7, #8]
   285da:	681b      	ldr	r3, [r3, #0]
   285dc:	2202      	movs	r2, #2
   285de:	4013      	ands	r3, r2
   285e0:	d001      	beq.n	285e6 <tcc_init+0x3e>
   285e2:	231c      	movs	r3, #28
   285e4:	e1be      	b.n	28964 <tcc_init+0x3bc>
   285e6:	68bb      	ldr	r3, [r7, #8]
   285e8:	681b      	ldr	r3, [r3, #0]
   285ea:	2201      	movs	r2, #1
   285ec:	4013      	ands	r3, r2
   285ee:	d001      	beq.n	285f4 <tcc_init+0x4c>
   285f0:	231c      	movs	r3, #28
   285f2:	e1b7      	b.n	28964 <tcc_init+0x3bc>
   285f4:	233b      	movs	r3, #59	; 0x3b
   285f6:	18fb      	adds	r3, r7, r3
   285f8:	781a      	ldrb	r2, [r3, #0]
   285fa:	4bb8      	ldr	r3, [pc, #736]	; (288dc <tcc_init+0x334>)
   285fc:	0092      	lsls	r2, r2, #2
   285fe:	58d3      	ldr	r3, [r2, r3]
   28600:	637b      	str	r3, [r7, #52]	; 0x34
   28602:	687b      	ldr	r3, [r7, #4]
   28604:	681a      	ldr	r2, [r3, #0]
   28606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28608:	429a      	cmp	r2, r3
   2860a:	d804      	bhi.n	28616 <tcc_init+0x6e>
   2860c:	687b      	ldr	r3, [r7, #4]
   2860e:	685a      	ldr	r2, [r3, #4]
   28610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28612:	429a      	cmp	r2, r3
   28614:	d901      	bls.n	2861a <tcc_init+0x72>
   28616:	2317      	movs	r3, #23
   28618:	e1a4      	b.n	28964 <tcc_init+0x3bc>
   2861a:	2300      	movs	r3, #0
   2861c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2861e:	e00e      	b.n	2863e <tcc_init+0x96>
   28620:	687a      	ldr	r2, [r7, #4]
   28622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28624:	3306      	adds	r3, #6
   28626:	009b      	lsls	r3, r3, #2
   28628:	18d3      	adds	r3, r2, r3
   2862a:	3304      	adds	r3, #4
   2862c:	681a      	ldr	r2, [r3, #0]
   2862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28630:	429a      	cmp	r2, r3
   28632:	d901      	bls.n	28638 <tcc_init+0x90>
   28634:	2317      	movs	r3, #23
   28636:	e195      	b.n	28964 <tcc_init+0x3bc>
   28638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2863a:	3301      	adds	r3, #1
   2863c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28640:	2b03      	cmp	r3, #3
   28642:	dded      	ble.n	28620 <tcc_init+0x78>
   28644:	2300      	movs	r3, #0
   28646:	63fb      	str	r3, [r7, #60]	; 0x3c
   28648:	e019      	b.n	2867e <tcc_init+0xd6>
   2864a:	687a      	ldr	r2, [r7, #4]
   2864c:	2198      	movs	r1, #152	; 0x98
   2864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28650:	18d3      	adds	r3, r2, r3
   28652:	185b      	adds	r3, r3, r1
   28654:	781b      	ldrb	r3, [r3, #0]
   28656:	2201      	movs	r2, #1
   28658:	4053      	eors	r3, r2
   2865a:	b2db      	uxtb	r3, r3
   2865c:	2b00      	cmp	r3, #0
   2865e:	d10a      	bne.n	28676 <tcc_init+0xce>
   28660:	233b      	movs	r3, #59	; 0x3b
   28662:	18fb      	adds	r3, r7, r3
   28664:	781b      	ldrb	r3, [r3, #0]
   28666:	4a9e      	ldr	r2, [pc, #632]	; (288e0 <tcc_init+0x338>)
   28668:	5cd3      	ldrb	r3, [r2, r3]
   2866a:	001a      	movs	r2, r3
   2866c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2866e:	429a      	cmp	r2, r3
   28670:	dc02      	bgt.n	28678 <tcc_init+0xd0>
   28672:	2317      	movs	r3, #23
   28674:	e176      	b.n	28964 <tcc_init+0x3bc>
   28676:	46c0      	nop			; (mov r8, r8)
   28678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2867a:	3301      	adds	r3, #1
   2867c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2867e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28680:	2b07      	cmp	r3, #7
   28682:	dde2      	ble.n	2864a <tcc_init+0xa2>
   28684:	2300      	movs	r3, #0
   28686:	62fb      	str	r3, [r7, #44]	; 0x2c
   28688:	2333      	movs	r3, #51	; 0x33
   2868a:	18fc      	adds	r4, r7, r3
   2868c:	232c      	movs	r3, #44	; 0x2c
   2868e:	18fa      	adds	r2, r7, r3
   28690:	6879      	ldr	r1, [r7, #4]
   28692:	233b      	movs	r3, #59	; 0x3b
   28694:	18fb      	adds	r3, r7, r3
   28696:	781b      	ldrb	r3, [r3, #0]
   28698:	0018      	movs	r0, r3
   2869a:	4b92      	ldr	r3, [pc, #584]	; (288e4 <tcc_init+0x33c>)
   2869c:	4798      	blx	r3
   2869e:	0003      	movs	r3, r0
   286a0:	7023      	strb	r3, [r4, #0]
   286a2:	2333      	movs	r3, #51	; 0x33
   286a4:	18fb      	adds	r3, r7, r3
   286a6:	781b      	ldrb	r3, [r3, #0]
   286a8:	2b00      	cmp	r3, #0
   286aa:	d003      	beq.n	286b4 <tcc_init+0x10c>
   286ac:	2333      	movs	r3, #51	; 0x33
   286ae:	18fb      	adds	r3, r7, r3
   286b0:	781b      	ldrb	r3, [r3, #0]
   286b2:	e157      	b.n	28964 <tcc_init+0x3bc>
   286b4:	232b      	movs	r3, #43	; 0x2b
   286b6:	18fa      	adds	r2, r7, r3
   286b8:	6879      	ldr	r1, [r7, #4]
   286ba:	233b      	movs	r3, #59	; 0x3b
   286bc:	18fb      	adds	r3, r7, r3
   286be:	781b      	ldrb	r3, [r3, #0]
   286c0:	0018      	movs	r0, r3
   286c2:	4b89      	ldr	r3, [pc, #548]	; (288e8 <tcc_init+0x340>)
   286c4:	4798      	blx	r3
   286c6:	2333      	movs	r3, #51	; 0x33
   286c8:	18fc      	adds	r4, r7, r3
   286ca:	2320      	movs	r3, #32
   286cc:	18fa      	adds	r2, r7, r3
   286ce:	6879      	ldr	r1, [r7, #4]
   286d0:	233b      	movs	r3, #59	; 0x3b
   286d2:	18fb      	adds	r3, r7, r3
   286d4:	781b      	ldrb	r3, [r3, #0]
   286d6:	0018      	movs	r0, r3
   286d8:	4b84      	ldr	r3, [pc, #528]	; (288ec <tcc_init+0x344>)
   286da:	4798      	blx	r3
   286dc:	0003      	movs	r3, r0
   286de:	7023      	strb	r3, [r4, #0]
   286e0:	2333      	movs	r3, #51	; 0x33
   286e2:	18fb      	adds	r3, r7, r3
   286e4:	781b      	ldrb	r3, [r3, #0]
   286e6:	2b00      	cmp	r3, #0
   286e8:	d003      	beq.n	286f2 <tcc_init+0x14a>
   286ea:	2333      	movs	r3, #51	; 0x33
   286ec:	18fb      	adds	r3, r7, r3
   286ee:	781b      	ldrb	r3, [r3, #0]
   286f0:	e138      	b.n	28964 <tcc_init+0x3bc>
   286f2:	2300      	movs	r3, #0
   286f4:	61fb      	str	r3, [r7, #28]
   286f6:	2333      	movs	r3, #51	; 0x33
   286f8:	18fc      	adds	r4, r7, r3
   286fa:	231c      	movs	r3, #28
   286fc:	18fa      	adds	r2, r7, r3
   286fe:	6879      	ldr	r1, [r7, #4]
   28700:	233b      	movs	r3, #59	; 0x3b
   28702:	18fb      	adds	r3, r7, r3
   28704:	781b      	ldrb	r3, [r3, #0]
   28706:	0018      	movs	r0, r3
   28708:	4b79      	ldr	r3, [pc, #484]	; (288f0 <tcc_init+0x348>)
   2870a:	4798      	blx	r3
   2870c:	0003      	movs	r3, r0
   2870e:	7023      	strb	r3, [r4, #0]
   28710:	2333      	movs	r3, #51	; 0x33
   28712:	18fb      	adds	r3, r7, r3
   28714:	781b      	ldrb	r3, [r3, #0]
   28716:	2b00      	cmp	r3, #0
   28718:	d003      	beq.n	28722 <tcc_init+0x17a>
   2871a:	2333      	movs	r3, #51	; 0x33
   2871c:	18fb      	adds	r3, r7, r3
   2871e:	781b      	ldrb	r3, [r3, #0]
   28720:	e120      	b.n	28964 <tcc_init+0x3bc>
   28722:	2333      	movs	r3, #51	; 0x33
   28724:	18fc      	adds	r4, r7, r3
   28726:	2318      	movs	r3, #24
   28728:	18fa      	adds	r2, r7, r3
   2872a:	6879      	ldr	r1, [r7, #4]
   2872c:	233b      	movs	r3, #59	; 0x3b
   2872e:	18fb      	adds	r3, r7, r3
   28730:	781b      	ldrb	r3, [r3, #0]
   28732:	0018      	movs	r0, r3
   28734:	4b6f      	ldr	r3, [pc, #444]	; (288f4 <tcc_init+0x34c>)
   28736:	4798      	blx	r3
   28738:	0003      	movs	r3, r0
   2873a:	7023      	strb	r3, [r4, #0]
   2873c:	2333      	movs	r3, #51	; 0x33
   2873e:	18fb      	adds	r3, r7, r3
   28740:	781b      	ldrb	r3, [r3, #0]
   28742:	2b00      	cmp	r3, #0
   28744:	d003      	beq.n	2874e <tcc_init+0x1a6>
   28746:	2333      	movs	r3, #51	; 0x33
   28748:	18fb      	adds	r3, r7, r3
   2874a:	781b      	ldrb	r3, [r3, #0]
   2874c:	e10a      	b.n	28964 <tcc_init+0x3bc>
   2874e:	2300      	movs	r3, #0
   28750:	63fb      	str	r3, [r7, #60]	; 0x3c
   28752:	e009      	b.n	28768 <tcc_init+0x1c0>
   28754:	68fa      	ldr	r2, [r7, #12]
   28756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28758:	009b      	lsls	r3, r3, #2
   2875a:	18d3      	adds	r3, r2, r3
   2875c:	3304      	adds	r3, #4
   2875e:	2200      	movs	r2, #0
   28760:	601a      	str	r2, [r3, #0]
   28762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28764:	3301      	adds	r3, #1
   28766:	63fb      	str	r3, [r7, #60]	; 0x3c
   28768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2876a:	2b0b      	cmp	r3, #11
   2876c:	ddf2      	ble.n	28754 <tcc_init+0x1ac>
   2876e:	68fb      	ldr	r3, [r7, #12]
   28770:	2200      	movs	r2, #0
   28772:	635a      	str	r2, [r3, #52]	; 0x34
   28774:	68fb      	ldr	r3, [r7, #12]
   28776:	2200      	movs	r2, #0
   28778:	639a      	str	r2, [r3, #56]	; 0x38
   2877a:	233b      	movs	r3, #59	; 0x3b
   2877c:	18fb      	adds	r3, r7, r3
   2877e:	781a      	ldrb	r2, [r3, #0]
   28780:	4b5d      	ldr	r3, [pc, #372]	; (288f8 <tcc_init+0x350>)
   28782:	0092      	lsls	r2, r2, #2
   28784:	68f9      	ldr	r1, [r7, #12]
   28786:	50d1      	str	r1, [r2, r3]
   28788:	68fb      	ldr	r3, [r7, #12]
   2878a:	68ba      	ldr	r2, [r7, #8]
   2878c:	601a      	str	r2, [r3, #0]
   2878e:	687b      	ldr	r3, [r7, #4]
   28790:	22a0      	movs	r2, #160	; 0xa0
   28792:	5c99      	ldrb	r1, [r3, r2]
   28794:	68fb      	ldr	r3, [r7, #12]
   28796:	223c      	movs	r2, #60	; 0x3c
   28798:	5499      	strb	r1, [r3, r2]
   2879a:	2314      	movs	r3, #20
   2879c:	18fb      	adds	r3, r7, r3
   2879e:	0018      	movs	r0, r3
   287a0:	4b56      	ldr	r3, [pc, #344]	; (288fc <tcc_init+0x354>)
   287a2:	4798      	blx	r3
   287a4:	687b      	ldr	r3, [r7, #4]
   287a6:	7a9a      	ldrb	r2, [r3, #10]
   287a8:	2314      	movs	r3, #20
   287aa:	18fb      	adds	r3, r7, r3
   287ac:	701a      	strb	r2, [r3, #0]
   287ae:	233b      	movs	r3, #59	; 0x3b
   287b0:	18fb      	adds	r3, r7, r3
   287b2:	781b      	ldrb	r3, [r3, #0]
   287b4:	4a52      	ldr	r2, [pc, #328]	; (28900 <tcc_init+0x358>)
   287b6:	5cd3      	ldrb	r3, [r2, r3]
   287b8:	2214      	movs	r2, #20
   287ba:	18ba      	adds	r2, r7, r2
   287bc:	0011      	movs	r1, r2
   287be:	0018      	movs	r0, r3
   287c0:	4b50      	ldr	r3, [pc, #320]	; (28904 <tcc_init+0x35c>)
   287c2:	4798      	blx	r3
   287c4:	233b      	movs	r3, #59	; 0x3b
   287c6:	18fb      	adds	r3, r7, r3
   287c8:	781b      	ldrb	r3, [r3, #0]
   287ca:	4a4d      	ldr	r2, [pc, #308]	; (28900 <tcc_init+0x358>)
   287cc:	5cd3      	ldrb	r3, [r2, r3]
   287ce:	0018      	movs	r0, r3
   287d0:	4b4d      	ldr	r3, [pc, #308]	; (28908 <tcc_init+0x360>)
   287d2:	4798      	blx	r3
   287d4:	2300      	movs	r3, #0
   287d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   287d8:	e02d      	b.n	28836 <tcc_init+0x28e>
   287da:	687a      	ldr	r2, [r7, #4]
   287dc:	2198      	movs	r1, #152	; 0x98
   287de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   287e0:	18d3      	adds	r3, r2, r3
   287e2:	185b      	adds	r3, r3, r1
   287e4:	781b      	ldrb	r3, [r3, #0]
   287e6:	2201      	movs	r2, #1
   287e8:	4053      	eors	r3, r2
   287ea:	b2db      	uxtb	r3, r3
   287ec:	2b00      	cmp	r3, #0
   287ee:	d11e      	bne.n	2882e <tcc_init+0x286>
   287f0:	2310      	movs	r3, #16
   287f2:	18fb      	adds	r3, r7, r3
   287f4:	0018      	movs	r0, r3
   287f6:	4b45      	ldr	r3, [pc, #276]	; (2890c <tcc_init+0x364>)
   287f8:	4798      	blx	r3
   287fa:	687b      	ldr	r3, [r7, #4]
   287fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   287fe:	321e      	adds	r2, #30
   28800:	0092      	lsls	r2, r2, #2
   28802:	58d3      	ldr	r3, [r2, r3]
   28804:	b2da      	uxtb	r2, r3
   28806:	2310      	movs	r3, #16
   28808:	18fb      	adds	r3, r7, r3
   2880a:	701a      	strb	r2, [r3, #0]
   2880c:	2310      	movs	r3, #16
   2880e:	18fb      	adds	r3, r7, r3
   28810:	2201      	movs	r2, #1
   28812:	705a      	strb	r2, [r3, #1]
   28814:	687b      	ldr	r3, [r7, #4]
   28816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28818:	3216      	adds	r2, #22
   2881a:	0092      	lsls	r2, r2, #2
   2881c:	58d3      	ldr	r3, [r2, r3]
   2881e:	b2db      	uxtb	r3, r3
   28820:	2210      	movs	r2, #16
   28822:	18ba      	adds	r2, r7, r2
   28824:	0011      	movs	r1, r2
   28826:	0018      	movs	r0, r3
   28828:	4b39      	ldr	r3, [pc, #228]	; (28910 <tcc_init+0x368>)
   2882a:	4798      	blx	r3
   2882c:	e000      	b.n	28830 <tcc_init+0x288>
   2882e:	46c0      	nop			; (mov r8, r8)
   28830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28832:	3301      	adds	r3, #1
   28834:	63fb      	str	r3, [r7, #60]	; 0x3c
   28836:	233b      	movs	r3, #59	; 0x3b
   28838:	18fb      	adds	r3, r7, r3
   2883a:	781b      	ldrb	r3, [r3, #0]
   2883c:	4a28      	ldr	r2, [pc, #160]	; (288e0 <tcc_init+0x338>)
   2883e:	5cd3      	ldrb	r3, [r2, r3]
   28840:	001a      	movs	r2, r3
   28842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28844:	429a      	cmp	r2, r3
   28846:	dcc8      	bgt.n	287da <tcc_init+0x232>
   28848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2884a:	68bb      	ldr	r3, [r7, #8]
   2884c:	601a      	str	r2, [r3, #0]
   2884e:	46c0      	nop			; (mov r8, r8)
   28850:	68bb      	ldr	r3, [r7, #8]
   28852:	689b      	ldr	r3, [r3, #8]
   28854:	2204      	movs	r2, #4
   28856:	4013      	ands	r3, r2
   28858:	d1fa      	bne.n	28850 <tcc_init+0x2a8>
   2885a:	68bb      	ldr	r3, [r7, #8]
   2885c:	22ff      	movs	r2, #255	; 0xff
   2885e:	711a      	strb	r2, [r3, #4]
   28860:	46c0      	nop			; (mov r8, r8)
   28862:	68bb      	ldr	r3, [r7, #8]
   28864:	689b      	ldr	r3, [r3, #8]
   28866:	2204      	movs	r2, #4
   28868:	4013      	ands	r3, r2
   2886a:	d1fa      	bne.n	28862 <tcc_init+0x2ba>
   2886c:	232b      	movs	r3, #43	; 0x2b
   2886e:	18fb      	adds	r3, r7, r3
   28870:	781a      	ldrb	r2, [r3, #0]
   28872:	68bb      	ldr	r3, [r7, #8]
   28874:	715a      	strb	r2, [r3, #5]
   28876:	2320      	movs	r3, #32
   28878:	18fb      	adds	r3, r7, r3
   2887a:	681a      	ldr	r2, [r3, #0]
   2887c:	68bb      	ldr	r3, [r7, #8]
   2887e:	60da      	str	r2, [r3, #12]
   28880:	2320      	movs	r3, #32
   28882:	18fb      	adds	r3, r7, r3
   28884:	685a      	ldr	r2, [r3, #4]
   28886:	68bb      	ldr	r3, [r7, #8]
   28888:	611a      	str	r2, [r3, #16]
   2888a:	69fa      	ldr	r2, [r7, #28]
   2888c:	68bb      	ldr	r3, [r7, #8]
   2888e:	619a      	str	r2, [r3, #24]
   28890:	46c0      	nop			; (mov r8, r8)
   28892:	68bb      	ldr	r3, [r7, #8]
   28894:	689b      	ldr	r3, [r3, #8]
   28896:	4a1f      	ldr	r2, [pc, #124]	; (28914 <tcc_init+0x36c>)
   28898:	4013      	ands	r3, r2
   2889a:	d1fa      	bne.n	28892 <tcc_init+0x2ea>
   2889c:	69ba      	ldr	r2, [r7, #24]
   2889e:	68bb      	ldr	r3, [r7, #8]
   288a0:	63da      	str	r2, [r3, #60]	; 0x3c
   288a2:	46c0      	nop			; (mov r8, r8)
   288a4:	68bb      	ldr	r3, [r7, #8]
   288a6:	689b      	ldr	r3, [r3, #8]
   288a8:	2210      	movs	r2, #16
   288aa:	4013      	ands	r3, r2
   288ac:	d1fa      	bne.n	288a4 <tcc_init+0x2fc>
   288ae:	687b      	ldr	r3, [r7, #4]
   288b0:	681a      	ldr	r2, [r3, #0]
   288b2:	68bb      	ldr	r3, [r7, #8]
   288b4:	635a      	str	r2, [r3, #52]	; 0x34
   288b6:	46c0      	nop			; (mov r8, r8)
   288b8:	68bb      	ldr	r3, [r7, #8]
   288ba:	689b      	ldr	r3, [r3, #8]
   288bc:	4a16      	ldr	r2, [pc, #88]	; (28918 <tcc_init+0x370>)
   288be:	4013      	ands	r3, r2
   288c0:	d1fa      	bne.n	288b8 <tcc_init+0x310>
   288c2:	687b      	ldr	r3, [r7, #4]
   288c4:	685a      	ldr	r2, [r3, #4]
   288c6:	68bb      	ldr	r3, [r7, #8]
   288c8:	641a      	str	r2, [r3, #64]	; 0x40
   288ca:	2300      	movs	r3, #0
   288cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   288ce:	e03f      	b.n	28950 <tcc_init+0x3a8>
   288d0:	00027f11 	.word	0x00027f11
   288d4:	00036a34 	.word	0x00036a34
   288d8:	00027e8d 	.word	0x00027e8d
   288dc:	00036a40 	.word	0x00036a40
   288e0:	00036a50 	.word	0x00036a50
   288e4:	0002821d 	.word	0x0002821d
   288e8:	000282c1 	.word	0x000282c1
   288ec:	0002831d 	.word	0x0002831d
   288f0:	00028439 	.word	0x00028439
   288f4:	00028511 	.word	0x00028511
   288f8:	20005594 	.word	0x20005594
   288fc:	00027e75 	.word	0x00027e75
   28900:	00036a30 	.word	0x00036a30
   28904:	00027a8d 	.word	0x00027a8d
   28908:	00027ad1 	.word	0x00027ad1
   2890c:	00027ee9 	.word	0x00027ee9
   28910:	00027ded 	.word	0x00027ded
   28914:	00020040 	.word	0x00020040
   28918:	00040080 	.word	0x00040080
   2891c:	46c0      	nop			; (mov r8, r8)
   2891e:	68bb      	ldr	r3, [r7, #8]
   28920:	689b      	ldr	r3, [r3, #8]
   28922:	4912      	ldr	r1, [pc, #72]	; (2896c <tcc_init+0x3c4>)
   28924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28926:	4091      	lsls	r1, r2
   28928:	000a      	movs	r2, r1
   2892a:	4013      	ands	r3, r2
   2892c:	d1f7      	bne.n	2891e <tcc_init+0x376>
   2892e:	687a      	ldr	r2, [r7, #4]
   28930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28932:	3306      	adds	r3, #6
   28934:	009b      	lsls	r3, r3, #2
   28936:	18d3      	adds	r3, r2, r3
   28938:	3304      	adds	r3, #4
   2893a:	681a      	ldr	r2, [r3, #0]
   2893c:	68b9      	ldr	r1, [r7, #8]
   2893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28940:	3310      	adds	r3, #16
   28942:	009b      	lsls	r3, r3, #2
   28944:	18cb      	adds	r3, r1, r3
   28946:	3304      	adds	r3, #4
   28948:	601a      	str	r2, [r3, #0]
   2894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2894c:	3301      	adds	r3, #1
   2894e:	63fb      	str	r3, [r7, #60]	; 0x3c
   28950:	233b      	movs	r3, #59	; 0x3b
   28952:	18fb      	adds	r3, r7, r3
   28954:	781b      	ldrb	r3, [r3, #0]
   28956:	4a06      	ldr	r2, [pc, #24]	; (28970 <tcc_init+0x3c8>)
   28958:	5cd3      	ldrb	r3, [r2, r3]
   2895a:	001a      	movs	r2, r3
   2895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2895e:	429a      	cmp	r2, r3
   28960:	dcdc      	bgt.n	2891c <tcc_init+0x374>
   28962:	2300      	movs	r3, #0
   28964:	0018      	movs	r0, r3
   28966:	46bd      	mov	sp, r7
   28968:	b011      	add	sp, #68	; 0x44
   2896a:	bd90      	pop	{r4, r7, pc}
   2896c:	00080100 	.word	0x00080100
   28970:	00036a4c 	.word	0x00036a4c

00028974 <system_interrupt_enable>:
   28974:	b580      	push	{r7, lr}
   28976:	b082      	sub	sp, #8
   28978:	af00      	add	r7, sp, #0
   2897a:	0002      	movs	r2, r0
   2897c:	1dfb      	adds	r3, r7, #7
   2897e:	701a      	strb	r2, [r3, #0]
   28980:	4b06      	ldr	r3, [pc, #24]	; (2899c <system_interrupt_enable+0x28>)
   28982:	1dfa      	adds	r2, r7, #7
   28984:	7812      	ldrb	r2, [r2, #0]
   28986:	0011      	movs	r1, r2
   28988:	221f      	movs	r2, #31
   2898a:	400a      	ands	r2, r1
   2898c:	2101      	movs	r1, #1
   2898e:	4091      	lsls	r1, r2
   28990:	000a      	movs	r2, r1
   28992:	601a      	str	r2, [r3, #0]
   28994:	46c0      	nop			; (mov r8, r8)
   28996:	46bd      	mov	sp, r7
   28998:	b002      	add	sp, #8
   2899a:	bd80      	pop	{r7, pc}
   2899c:	e000e100 	.word	0xe000e100

000289a0 <_tcc_interrupt_get_interrupt_vector>:
   289a0:	b580      	push	{r7, lr}
   289a2:	b082      	sub	sp, #8
   289a4:	af00      	add	r7, sp, #0
   289a6:	6078      	str	r0, [r7, #4]
   289a8:	4a04      	ldr	r2, [pc, #16]	; (289bc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   289aa:	687b      	ldr	r3, [r7, #4]
   289ac:	18d3      	adds	r3, r2, r3
   289ae:	781b      	ldrb	r3, [r3, #0]
   289b0:	b25b      	sxtb	r3, r3
   289b2:	0018      	movs	r0, r3
   289b4:	46bd      	mov	sp, r7
   289b6:	b002      	add	sp, #8
   289b8:	bd80      	pop	{r7, pc}
   289ba:	46c0      	nop			; (mov r8, r8)
   289bc:	20000108 	.word	0x20000108

000289c0 <tcc_register_callback>:
   289c0:	b580      	push	{r7, lr}
   289c2:	b084      	sub	sp, #16
   289c4:	af00      	add	r7, sp, #0
   289c6:	60f8      	str	r0, [r7, #12]
   289c8:	60b9      	str	r1, [r7, #8]
   289ca:	1dfb      	adds	r3, r7, #7
   289cc:	701a      	strb	r2, [r3, #0]
   289ce:	1dfb      	adds	r3, r7, #7
   289d0:	781b      	ldrb	r3, [r3, #0]
   289d2:	68fa      	ldr	r2, [r7, #12]
   289d4:	009b      	lsls	r3, r3, #2
   289d6:	18d3      	adds	r3, r2, r3
   289d8:	3304      	adds	r3, #4
   289da:	68ba      	ldr	r2, [r7, #8]
   289dc:	601a      	str	r2, [r3, #0]
   289de:	68fb      	ldr	r3, [r7, #12]
   289e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   289e2:	1dfb      	adds	r3, r7, #7
   289e4:	7819      	ldrb	r1, [r3, #0]
   289e6:	4b05      	ldr	r3, [pc, #20]	; (289fc <tcc_register_callback+0x3c>)
   289e8:	0089      	lsls	r1, r1, #2
   289ea:	58cb      	ldr	r3, [r1, r3]
   289ec:	431a      	orrs	r2, r3
   289ee:	68fb      	ldr	r3, [r7, #12]
   289f0:	635a      	str	r2, [r3, #52]	; 0x34
   289f2:	2300      	movs	r3, #0
   289f4:	0018      	movs	r0, r3
   289f6:	46bd      	mov	sp, r7
   289f8:	b004      	add	sp, #16
   289fa:	bd80      	pop	{r7, pc}
   289fc:	00036a54 	.word	0x00036a54

00028a00 <tcc_enable_callback>:
   28a00:	b580      	push	{r7, lr}
   28a02:	b082      	sub	sp, #8
   28a04:	af00      	add	r7, sp, #0
   28a06:	6078      	str	r0, [r7, #4]
   28a08:	000a      	movs	r2, r1
   28a0a:	1cfb      	adds	r3, r7, #3
   28a0c:	701a      	strb	r2, [r3, #0]
   28a0e:	687b      	ldr	r3, [r7, #4]
   28a10:	681b      	ldr	r3, [r3, #0]
   28a12:	0018      	movs	r0, r3
   28a14:	4b0f      	ldr	r3, [pc, #60]	; (28a54 <tcc_enable_callback+0x54>)
   28a16:	4798      	blx	r3
   28a18:	0003      	movs	r3, r0
   28a1a:	0018      	movs	r0, r3
   28a1c:	4b0e      	ldr	r3, [pc, #56]	; (28a58 <tcc_enable_callback+0x58>)
   28a1e:	4798      	blx	r3
   28a20:	0003      	movs	r3, r0
   28a22:	0018      	movs	r0, r3
   28a24:	4b0d      	ldr	r3, [pc, #52]	; (28a5c <tcc_enable_callback+0x5c>)
   28a26:	4798      	blx	r3
   28a28:	687b      	ldr	r3, [r7, #4]
   28a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   28a2c:	1cfb      	adds	r3, r7, #3
   28a2e:	7819      	ldrb	r1, [r3, #0]
   28a30:	4b0b      	ldr	r3, [pc, #44]	; (28a60 <tcc_enable_callback+0x60>)
   28a32:	0089      	lsls	r1, r1, #2
   28a34:	58cb      	ldr	r3, [r1, r3]
   28a36:	431a      	orrs	r2, r3
   28a38:	687b      	ldr	r3, [r7, #4]
   28a3a:	639a      	str	r2, [r3, #56]	; 0x38
   28a3c:	687b      	ldr	r3, [r7, #4]
   28a3e:	681b      	ldr	r3, [r3, #0]
   28a40:	1cfa      	adds	r2, r7, #3
   28a42:	7811      	ldrb	r1, [r2, #0]
   28a44:	4a06      	ldr	r2, [pc, #24]	; (28a60 <tcc_enable_callback+0x60>)
   28a46:	0089      	lsls	r1, r1, #2
   28a48:	588a      	ldr	r2, [r1, r2]
   28a4a:	629a      	str	r2, [r3, #40]	; 0x28
   28a4c:	46c0      	nop			; (mov r8, r8)
   28a4e:	46bd      	mov	sp, r7
   28a50:	b002      	add	sp, #8
   28a52:	bd80      	pop	{r7, pc}
   28a54:	00027f11 	.word	0x00027f11
   28a58:	000289a1 	.word	0x000289a1
   28a5c:	00028975 	.word	0x00028975
   28a60:	00036a54 	.word	0x00036a54

00028a64 <TCC0_Handler>:
   28a64:	b580      	push	{r7, lr}
   28a66:	af00      	add	r7, sp, #0
   28a68:	2000      	movs	r0, #0
   28a6a:	4b02      	ldr	r3, [pc, #8]	; (28a74 <TCC0_Handler+0x10>)
   28a6c:	4798      	blx	r3
   28a6e:	46c0      	nop			; (mov r8, r8)
   28a70:	46bd      	mov	sp, r7
   28a72:	bd80      	pop	{r7, pc}
   28a74:	00028aa1 	.word	0x00028aa1

00028a78 <TCC1_Handler>:
   28a78:	b580      	push	{r7, lr}
   28a7a:	af00      	add	r7, sp, #0
   28a7c:	2001      	movs	r0, #1
   28a7e:	4b02      	ldr	r3, [pc, #8]	; (28a88 <TCC1_Handler+0x10>)
   28a80:	4798      	blx	r3
   28a82:	46c0      	nop			; (mov r8, r8)
   28a84:	46bd      	mov	sp, r7
   28a86:	bd80      	pop	{r7, pc}
   28a88:	00028aa1 	.word	0x00028aa1

00028a8c <TCC2_Handler>:
   28a8c:	b580      	push	{r7, lr}
   28a8e:	af00      	add	r7, sp, #0
   28a90:	2002      	movs	r0, #2
   28a92:	4b02      	ldr	r3, [pc, #8]	; (28a9c <TCC2_Handler+0x10>)
   28a94:	4798      	blx	r3
   28a96:	46c0      	nop			; (mov r8, r8)
   28a98:	46bd      	mov	sp, r7
   28a9a:	bd80      	pop	{r7, pc}
   28a9c:	00028aa1 	.word	0x00028aa1

00028aa0 <_tcc_interrupt_handler>:
   28aa0:	b580      	push	{r7, lr}
   28aa2:	b086      	sub	sp, #24
   28aa4:	af00      	add	r7, sp, #0
   28aa6:	0002      	movs	r2, r0
   28aa8:	1dfb      	adds	r3, r7, #7
   28aaa:	701a      	strb	r2, [r3, #0]
   28aac:	1dfb      	adds	r3, r7, #7
   28aae:	781a      	ldrb	r2, [r3, #0]
   28ab0:	4b18      	ldr	r3, [pc, #96]	; (28b14 <_tcc_interrupt_handler+0x74>)
   28ab2:	0092      	lsls	r2, r2, #2
   28ab4:	58d3      	ldr	r3, [r2, r3]
   28ab6:	613b      	str	r3, [r7, #16]
   28ab8:	693b      	ldr	r3, [r7, #16]
   28aba:	681b      	ldr	r3, [r3, #0]
   28abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   28abe:	693b      	ldr	r3, [r7, #16]
   28ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28ac2:	401a      	ands	r2, r3
   28ac4:	693b      	ldr	r3, [r7, #16]
   28ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   28ac8:	4013      	ands	r3, r2
   28aca:	60fb      	str	r3, [r7, #12]
   28acc:	2300      	movs	r3, #0
   28ace:	617b      	str	r3, [r7, #20]
   28ad0:	e019      	b.n	28b06 <_tcc_interrupt_handler+0x66>
   28ad2:	4b11      	ldr	r3, [pc, #68]	; (28b18 <_tcc_interrupt_handler+0x78>)
   28ad4:	697a      	ldr	r2, [r7, #20]
   28ad6:	0092      	lsls	r2, r2, #2
   28ad8:	58d3      	ldr	r3, [r2, r3]
   28ada:	68fa      	ldr	r2, [r7, #12]
   28adc:	4013      	ands	r3, r2
   28ade:	d00f      	beq.n	28b00 <_tcc_interrupt_handler+0x60>
   28ae0:	693a      	ldr	r2, [r7, #16]
   28ae2:	697b      	ldr	r3, [r7, #20]
   28ae4:	009b      	lsls	r3, r3, #2
   28ae6:	18d3      	adds	r3, r2, r3
   28ae8:	3304      	adds	r3, #4
   28aea:	681b      	ldr	r3, [r3, #0]
   28aec:	693a      	ldr	r2, [r7, #16]
   28aee:	0010      	movs	r0, r2
   28af0:	4798      	blx	r3
   28af2:	693b      	ldr	r3, [r7, #16]
   28af4:	681b      	ldr	r3, [r3, #0]
   28af6:	4a08      	ldr	r2, [pc, #32]	; (28b18 <_tcc_interrupt_handler+0x78>)
   28af8:	6979      	ldr	r1, [r7, #20]
   28afa:	0089      	lsls	r1, r1, #2
   28afc:	588a      	ldr	r2, [r1, r2]
   28afe:	62da      	str	r2, [r3, #44]	; 0x2c
   28b00:	697b      	ldr	r3, [r7, #20]
   28b02:	3301      	adds	r3, #1
   28b04:	617b      	str	r3, [r7, #20]
   28b06:	697b      	ldr	r3, [r7, #20]
   28b08:	2b0b      	cmp	r3, #11
   28b0a:	dde2      	ble.n	28ad2 <_tcc_interrupt_handler+0x32>
   28b0c:	46c0      	nop			; (mov r8, r8)
   28b0e:	46bd      	mov	sp, r7
   28b10:	b006      	add	sp, #24
   28b12:	bd80      	pop	{r7, pc}
   28b14:	20005594 	.word	0x20005594
   28b18:	00036a54 	.word	0x00036a54

00028b1c <Reset_Handler>:
   28b1c:	b580      	push	{r7, lr}
   28b1e:	b082      	sub	sp, #8
   28b20:	af00      	add	r7, sp, #0
   28b22:	4b2f      	ldr	r3, [pc, #188]	; (28be0 <Reset_Handler+0xc4>)
   28b24:	607b      	str	r3, [r7, #4]
   28b26:	4b2f      	ldr	r3, [pc, #188]	; (28be4 <Reset_Handler+0xc8>)
   28b28:	603b      	str	r3, [r7, #0]
   28b2a:	687a      	ldr	r2, [r7, #4]
   28b2c:	683b      	ldr	r3, [r7, #0]
   28b2e:	429a      	cmp	r2, r3
   28b30:	d00c      	beq.n	28b4c <Reset_Handler+0x30>
   28b32:	e007      	b.n	28b44 <Reset_Handler+0x28>
   28b34:	683b      	ldr	r3, [r7, #0]
   28b36:	1d1a      	adds	r2, r3, #4
   28b38:	603a      	str	r2, [r7, #0]
   28b3a:	687a      	ldr	r2, [r7, #4]
   28b3c:	1d11      	adds	r1, r2, #4
   28b3e:	6079      	str	r1, [r7, #4]
   28b40:	6812      	ldr	r2, [r2, #0]
   28b42:	601a      	str	r2, [r3, #0]
   28b44:	683a      	ldr	r2, [r7, #0]
   28b46:	4b28      	ldr	r3, [pc, #160]	; (28be8 <Reset_Handler+0xcc>)
   28b48:	429a      	cmp	r2, r3
   28b4a:	d3f3      	bcc.n	28b34 <Reset_Handler+0x18>
   28b4c:	4b27      	ldr	r3, [pc, #156]	; (28bec <Reset_Handler+0xd0>)
   28b4e:	603b      	str	r3, [r7, #0]
   28b50:	e004      	b.n	28b5c <Reset_Handler+0x40>
   28b52:	683b      	ldr	r3, [r7, #0]
   28b54:	1d1a      	adds	r2, r3, #4
   28b56:	603a      	str	r2, [r7, #0]
   28b58:	2200      	movs	r2, #0
   28b5a:	601a      	str	r2, [r3, #0]
   28b5c:	683a      	ldr	r2, [r7, #0]
   28b5e:	4b24      	ldr	r3, [pc, #144]	; (28bf0 <Reset_Handler+0xd4>)
   28b60:	429a      	cmp	r2, r3
   28b62:	d3f6      	bcc.n	28b52 <Reset_Handler+0x36>
   28b64:	4b23      	ldr	r3, [pc, #140]	; (28bf4 <Reset_Handler+0xd8>)
   28b66:	607b      	str	r3, [r7, #4]
   28b68:	4b23      	ldr	r3, [pc, #140]	; (28bf8 <Reset_Handler+0xdc>)
   28b6a:	687a      	ldr	r2, [r7, #4]
   28b6c:	21ff      	movs	r1, #255	; 0xff
   28b6e:	438a      	bics	r2, r1
   28b70:	609a      	str	r2, [r3, #8]
   28b72:	4a22      	ldr	r2, [pc, #136]	; (28bfc <Reset_Handler+0xe0>)
   28b74:	2390      	movs	r3, #144	; 0x90
   28b76:	005b      	lsls	r3, r3, #1
   28b78:	2102      	movs	r1, #2
   28b7a:	50d1      	str	r1, [r2, r3]
   28b7c:	4a20      	ldr	r2, [pc, #128]	; (28c00 <Reset_Handler+0xe4>)
   28b7e:	78d3      	ldrb	r3, [r2, #3]
   28b80:	2103      	movs	r1, #3
   28b82:	438b      	bics	r3, r1
   28b84:	1c19      	adds	r1, r3, #0
   28b86:	2302      	movs	r3, #2
   28b88:	430b      	orrs	r3, r1
   28b8a:	70d3      	strb	r3, [r2, #3]
   28b8c:	4a1c      	ldr	r2, [pc, #112]	; (28c00 <Reset_Handler+0xe4>)
   28b8e:	78d3      	ldrb	r3, [r2, #3]
   28b90:	210c      	movs	r1, #12
   28b92:	438b      	bics	r3, r1
   28b94:	1c19      	adds	r1, r3, #0
   28b96:	2308      	movs	r3, #8
   28b98:	430b      	orrs	r3, r1
   28b9a:	70d3      	strb	r3, [r2, #3]
   28b9c:	4a19      	ldr	r2, [pc, #100]	; (28c04 <Reset_Handler+0xe8>)
   28b9e:	7b93      	ldrb	r3, [r2, #14]
   28ba0:	2130      	movs	r1, #48	; 0x30
   28ba2:	438b      	bics	r3, r1
   28ba4:	1c19      	adds	r1, r3, #0
   28ba6:	2320      	movs	r3, #32
   28ba8:	430b      	orrs	r3, r1
   28baa:	7393      	strb	r3, [r2, #14]
   28bac:	4a15      	ldr	r2, [pc, #84]	; (28c04 <Reset_Handler+0xe8>)
   28bae:	7b93      	ldrb	r3, [r2, #14]
   28bb0:	210c      	movs	r1, #12
   28bb2:	438b      	bics	r3, r1
   28bb4:	1c19      	adds	r1, r3, #0
   28bb6:	2308      	movs	r3, #8
   28bb8:	430b      	orrs	r3, r1
   28bba:	7393      	strb	r3, [r2, #14]
   28bbc:	4a11      	ldr	r2, [pc, #68]	; (28c04 <Reset_Handler+0xe8>)
   28bbe:	7b93      	ldrb	r3, [r2, #14]
   28bc0:	2103      	movs	r1, #3
   28bc2:	438b      	bics	r3, r1
   28bc4:	1c19      	adds	r1, r3, #0
   28bc6:	2302      	movs	r3, #2
   28bc8:	430b      	orrs	r3, r1
   28bca:	7393      	strb	r3, [r2, #14]
   28bcc:	4a0e      	ldr	r2, [pc, #56]	; (28c08 <Reset_Handler+0xec>)
   28bce:	6853      	ldr	r3, [r2, #4]
   28bd0:	2180      	movs	r1, #128	; 0x80
   28bd2:	430b      	orrs	r3, r1
   28bd4:	6053      	str	r3, [r2, #4]
   28bd6:	4b0d      	ldr	r3, [pc, #52]	; (28c0c <Reset_Handler+0xf0>)
   28bd8:	4798      	blx	r3
   28bda:	4b0d      	ldr	r3, [pc, #52]	; (28c10 <Reset_Handler+0xf4>)
   28bdc:	4798      	blx	r3
   28bde:	e7fe      	b.n	28bde <Reset_Handler+0xc2>
   28be0:	000376e0 	.word	0x000376e0
   28be4:	20000000 	.word	0x20000000
   28be8:	200002e0 	.word	0x200002e0
   28bec:	200002e0 	.word	0x200002e0
   28bf0:	20005604 	.word	0x20005604
   28bf4:	00012000 	.word	0x00012000
   28bf8:	e000ed00 	.word	0xe000ed00
   28bfc:	41007000 	.word	0x41007000
   28c00:	41005000 	.word	0x41005000
   28c04:	41004800 	.word	0x41004800
   28c08:	41004000 	.word	0x41004000
   28c0c:	0003215d 	.word	0x0003215d
   28c10:	00030351 	.word	0x00030351

00028c14 <Dummy_Handler>:
   28c14:	b580      	push	{r7, lr}
   28c16:	af00      	add	r7, sp, #0
   28c18:	2004      	movs	r0, #4
   28c1a:	4671      	mov	r1, lr
   28c1c:	4208      	tst	r0, r1
   28c1e:	d002      	beq.n	28c26 <_MSP>
   28c20:	f3ef 8009 	mrs	r0, PSP
   28c24:	e001      	b.n	28c2a <_HALT>

00028c26 <_MSP>:
   28c26:	f3ef 8008 	mrs	r0, MSP

00028c2a <_HALT>:
   28c2a:	6941      	ldr	r1, [r0, #20]
   28c2c:	e004      	b.n	28c38 <HardFault_HandlerC>
   28c2e:	be00      	bkpt	0x0000
   28c30:	46c0      	nop			; (mov r8, r8)
   28c32:	46bd      	mov	sp, r7
   28c34:	bd80      	pop	{r7, pc}
	...

00028c38 <HardFault_HandlerC>:
   28c38:	b580      	push	{r7, lr}
   28c3a:	b090      	sub	sp, #64	; 0x40
   28c3c:	af00      	add	r7, sp, #0
   28c3e:	6078      	str	r0, [r7, #4]
   28c40:	687b      	ldr	r3, [r7, #4]
   28c42:	681b      	ldr	r3, [r3, #0]
   28c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   28c46:	687b      	ldr	r3, [r7, #4]
   28c48:	685b      	ldr	r3, [r3, #4]
   28c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   28c4c:	687b      	ldr	r3, [r7, #4]
   28c4e:	689b      	ldr	r3, [r3, #8]
   28c50:	637b      	str	r3, [r7, #52]	; 0x34
   28c52:	687b      	ldr	r3, [r7, #4]
   28c54:	68db      	ldr	r3, [r3, #12]
   28c56:	633b      	str	r3, [r7, #48]	; 0x30
   28c58:	687b      	ldr	r3, [r7, #4]
   28c5a:	691b      	ldr	r3, [r3, #16]
   28c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   28c5e:	687b      	ldr	r3, [r7, #4]
   28c60:	695b      	ldr	r3, [r3, #20]
   28c62:	62bb      	str	r3, [r7, #40]	; 0x28
   28c64:	687b      	ldr	r3, [r7, #4]
   28c66:	699b      	ldr	r3, [r3, #24]
   28c68:	627b      	str	r3, [r7, #36]	; 0x24
   28c6a:	687b      	ldr	r3, [r7, #4]
   28c6c:	69db      	ldr	r3, [r3, #28]
   28c6e:	623b      	str	r3, [r7, #32]
   28c70:	4b0b      	ldr	r3, [pc, #44]	; (28ca0 <HardFault_HandlerC+0x68>)
   28c72:	681b      	ldr	r3, [r3, #0]
   28c74:	61fb      	str	r3, [r7, #28]
   28c76:	4b0b      	ldr	r3, [pc, #44]	; (28ca4 <HardFault_HandlerC+0x6c>)
   28c78:	681b      	ldr	r3, [r3, #0]
   28c7a:	61bb      	str	r3, [r7, #24]
   28c7c:	4b0a      	ldr	r3, [pc, #40]	; (28ca8 <HardFault_HandlerC+0x70>)
   28c7e:	681b      	ldr	r3, [r3, #0]
   28c80:	617b      	str	r3, [r7, #20]
   28c82:	4b0a      	ldr	r3, [pc, #40]	; (28cac <HardFault_HandlerC+0x74>)
   28c84:	681b      	ldr	r3, [r3, #0]
   28c86:	613b      	str	r3, [r7, #16]
   28c88:	4b09      	ldr	r3, [pc, #36]	; (28cb0 <HardFault_HandlerC+0x78>)
   28c8a:	681b      	ldr	r3, [r3, #0]
   28c8c:	60bb      	str	r3, [r7, #8]
   28c8e:	4b09      	ldr	r3, [pc, #36]	; (28cb4 <HardFault_HandlerC+0x7c>)
   28c90:	681b      	ldr	r3, [r3, #0]
   28c92:	60fb      	str	r3, [r7, #12]
   28c94:	be00      	bkpt	0x0000
   28c96:	46c0      	nop			; (mov r8, r8)
   28c98:	46bd      	mov	sp, r7
   28c9a:	b010      	add	sp, #64	; 0x40
   28c9c:	bd80      	pop	{r7, pc}
   28c9e:	46c0      	nop			; (mov r8, r8)
   28ca0:	e000ed28 	.word	0xe000ed28
   28ca4:	e000ed2c 	.word	0xe000ed2c
   28ca8:	e000ed30 	.word	0xe000ed30
   28cac:	e000ed3c 	.word	0xe000ed3c
   28cb0:	e000ed34 	.word	0xe000ed34
   28cb4:	e000ed38 	.word	0xe000ed38

00028cb8 <_read>:
   28cb8:	b580      	push	{r7, lr}
   28cba:	b086      	sub	sp, #24
   28cbc:	af00      	add	r7, sp, #0
   28cbe:	60f8      	str	r0, [r7, #12]
   28cc0:	60b9      	str	r1, [r7, #8]
   28cc2:	607a      	str	r2, [r7, #4]
   28cc4:	2300      	movs	r3, #0
   28cc6:	617b      	str	r3, [r7, #20]
   28cc8:	68fb      	ldr	r3, [r7, #12]
   28cca:	2b00      	cmp	r3, #0
   28ccc:	d012      	beq.n	28cf4 <_read+0x3c>
   28cce:	2301      	movs	r3, #1
   28cd0:	425b      	negs	r3, r3
   28cd2:	e013      	b.n	28cfc <_read+0x44>
   28cd4:	4b0b      	ldr	r3, [pc, #44]	; (28d04 <_read+0x4c>)
   28cd6:	681a      	ldr	r2, [r3, #0]
   28cd8:	4b0b      	ldr	r3, [pc, #44]	; (28d08 <_read+0x50>)
   28cda:	681b      	ldr	r3, [r3, #0]
   28cdc:	68b9      	ldr	r1, [r7, #8]
   28cde:	0018      	movs	r0, r3
   28ce0:	4790      	blx	r2
   28ce2:	68bb      	ldr	r3, [r7, #8]
   28ce4:	3301      	adds	r3, #1
   28ce6:	60bb      	str	r3, [r7, #8]
   28ce8:	697b      	ldr	r3, [r7, #20]
   28cea:	3301      	adds	r3, #1
   28cec:	617b      	str	r3, [r7, #20]
   28cee:	687b      	ldr	r3, [r7, #4]
   28cf0:	3b01      	subs	r3, #1
   28cf2:	607b      	str	r3, [r7, #4]
   28cf4:	687b      	ldr	r3, [r7, #4]
   28cf6:	2b00      	cmp	r3, #0
   28cf8:	dcec      	bgt.n	28cd4 <_read+0x1c>
   28cfa:	697b      	ldr	r3, [r7, #20]
   28cfc:	0018      	movs	r0, r3
   28cfe:	46bd      	mov	sp, r7
   28d00:	b006      	add	sp, #24
   28d02:	bd80      	pop	{r7, pc}
   28d04:	200055a0 	.word	0x200055a0
   28d08:	200055a8 	.word	0x200055a8

00028d0c <_write>:
   28d0c:	b580      	push	{r7, lr}
   28d0e:	b086      	sub	sp, #24
   28d10:	af00      	add	r7, sp, #0
   28d12:	60f8      	str	r0, [r7, #12]
   28d14:	60b9      	str	r1, [r7, #8]
   28d16:	607a      	str	r2, [r7, #4]
   28d18:	2300      	movs	r3, #0
   28d1a:	617b      	str	r3, [r7, #20]
   28d1c:	68fb      	ldr	r3, [r7, #12]
   28d1e:	2b01      	cmp	r3, #1
   28d20:	d01d      	beq.n	28d5e <_write+0x52>
   28d22:	68fb      	ldr	r3, [r7, #12]
   28d24:	2b02      	cmp	r3, #2
   28d26:	d01a      	beq.n	28d5e <_write+0x52>
   28d28:	68fb      	ldr	r3, [r7, #12]
   28d2a:	2b03      	cmp	r3, #3
   28d2c:	d017      	beq.n	28d5e <_write+0x52>
   28d2e:	2301      	movs	r3, #1
   28d30:	425b      	negs	r3, r3
   28d32:	e018      	b.n	28d66 <_write+0x5a>
   28d34:	4b0e      	ldr	r3, [pc, #56]	; (28d70 <_write+0x64>)
   28d36:	681a      	ldr	r2, [r3, #0]
   28d38:	4b0e      	ldr	r3, [pc, #56]	; (28d74 <_write+0x68>)
   28d3a:	6818      	ldr	r0, [r3, #0]
   28d3c:	68bb      	ldr	r3, [r7, #8]
   28d3e:	1c59      	adds	r1, r3, #1
   28d40:	60b9      	str	r1, [r7, #8]
   28d42:	781b      	ldrb	r3, [r3, #0]
   28d44:	0019      	movs	r1, r3
   28d46:	4790      	blx	r2
   28d48:	1e03      	subs	r3, r0, #0
   28d4a:	da02      	bge.n	28d52 <_write+0x46>
   28d4c:	2301      	movs	r3, #1
   28d4e:	425b      	negs	r3, r3
   28d50:	e009      	b.n	28d66 <_write+0x5a>
   28d52:	697b      	ldr	r3, [r7, #20]
   28d54:	3301      	adds	r3, #1
   28d56:	617b      	str	r3, [r7, #20]
   28d58:	687b      	ldr	r3, [r7, #4]
   28d5a:	3b01      	subs	r3, #1
   28d5c:	607b      	str	r3, [r7, #4]
   28d5e:	687b      	ldr	r3, [r7, #4]
   28d60:	2b00      	cmp	r3, #0
   28d62:	d1e7      	bne.n	28d34 <_write+0x28>
   28d64:	697b      	ldr	r3, [r7, #20]
   28d66:	0018      	movs	r0, r3
   28d68:	46bd      	mov	sp, r7
   28d6a:	b006      	add	sp, #24
   28d6c:	bd80      	pop	{r7, pc}
   28d6e:	46c0      	nop			; (mov r8, r8)
   28d70:	200055a4 	.word	0x200055a4
   28d74:	200055a8 	.word	0x200055a8

00028d78 <_sbrk>:
   28d78:	b580      	push	{r7, lr}
   28d7a:	b084      	sub	sp, #16
   28d7c:	af00      	add	r7, sp, #0
   28d7e:	6078      	str	r0, [r7, #4]
   28d80:	4b0a      	ldr	r3, [pc, #40]	; (28dac <_sbrk+0x34>)
   28d82:	681b      	ldr	r3, [r3, #0]
   28d84:	2b00      	cmp	r3, #0
   28d86:	d102      	bne.n	28d8e <_sbrk+0x16>
   28d88:	4b08      	ldr	r3, [pc, #32]	; (28dac <_sbrk+0x34>)
   28d8a:	4a09      	ldr	r2, [pc, #36]	; (28db0 <_sbrk+0x38>)
   28d8c:	601a      	str	r2, [r3, #0]
   28d8e:	4b07      	ldr	r3, [pc, #28]	; (28dac <_sbrk+0x34>)
   28d90:	681b      	ldr	r3, [r3, #0]
   28d92:	60fb      	str	r3, [r7, #12]
   28d94:	4b05      	ldr	r3, [pc, #20]	; (28dac <_sbrk+0x34>)
   28d96:	681a      	ldr	r2, [r3, #0]
   28d98:	687b      	ldr	r3, [r7, #4]
   28d9a:	18d2      	adds	r2, r2, r3
   28d9c:	4b03      	ldr	r3, [pc, #12]	; (28dac <_sbrk+0x34>)
   28d9e:	601a      	str	r2, [r3, #0]
   28da0:	68fb      	ldr	r3, [r7, #12]
   28da2:	0018      	movs	r0, r3
   28da4:	46bd      	mov	sp, r7
   28da6:	b004      	add	sp, #16
   28da8:	bd80      	pop	{r7, pc}
   28daa:	46c0      	nop			; (mov r8, r8)
   28dac:	20003d4c 	.word	0x20003d4c
   28db0:	20007608 	.word	0x20007608

00028db4 <_close>:
   28db4:	b580      	push	{r7, lr}
   28db6:	b082      	sub	sp, #8
   28db8:	af00      	add	r7, sp, #0
   28dba:	6078      	str	r0, [r7, #4]
   28dbc:	2301      	movs	r3, #1
   28dbe:	425b      	negs	r3, r3
   28dc0:	0018      	movs	r0, r3
   28dc2:	46bd      	mov	sp, r7
   28dc4:	b002      	add	sp, #8
   28dc6:	bd80      	pop	{r7, pc}

00028dc8 <_fstat>:
   28dc8:	b580      	push	{r7, lr}
   28dca:	b082      	sub	sp, #8
   28dcc:	af00      	add	r7, sp, #0
   28dce:	6078      	str	r0, [r7, #4]
   28dd0:	6039      	str	r1, [r7, #0]
   28dd2:	683b      	ldr	r3, [r7, #0]
   28dd4:	2280      	movs	r2, #128	; 0x80
   28dd6:	0192      	lsls	r2, r2, #6
   28dd8:	605a      	str	r2, [r3, #4]
   28dda:	2300      	movs	r3, #0
   28ddc:	0018      	movs	r0, r3
   28dde:	46bd      	mov	sp, r7
   28de0:	b002      	add	sp, #8
   28de2:	bd80      	pop	{r7, pc}

00028de4 <_isatty>:
   28de4:	b580      	push	{r7, lr}
   28de6:	b082      	sub	sp, #8
   28de8:	af00      	add	r7, sp, #0
   28dea:	6078      	str	r0, [r7, #4]
   28dec:	2301      	movs	r3, #1
   28dee:	0018      	movs	r0, r3
   28df0:	46bd      	mov	sp, r7
   28df2:	b002      	add	sp, #8
   28df4:	bd80      	pop	{r7, pc}

00028df6 <_lseek>:
   28df6:	b580      	push	{r7, lr}
   28df8:	b084      	sub	sp, #16
   28dfa:	af00      	add	r7, sp, #0
   28dfc:	60f8      	str	r0, [r7, #12]
   28dfe:	60b9      	str	r1, [r7, #8]
   28e00:	607a      	str	r2, [r7, #4]
   28e02:	2300      	movs	r3, #0
   28e04:	0018      	movs	r0, r3
   28e06:	46bd      	mov	sp, r7
   28e08:	b004      	add	sp, #16
   28e0a:	bd80      	pop	{r7, pc}

00028e0c <rtc_calendar_get_time_defaults>:
   28e0c:	b580      	push	{r7, lr}
   28e0e:	b082      	sub	sp, #8
   28e10:	af00      	add	r7, sp, #0
   28e12:	6078      	str	r0, [r7, #4]
   28e14:	687b      	ldr	r3, [r7, #4]
   28e16:	2200      	movs	r2, #0
   28e18:	701a      	strb	r2, [r3, #0]
   28e1a:	687b      	ldr	r3, [r7, #4]
   28e1c:	2200      	movs	r2, #0
   28e1e:	705a      	strb	r2, [r3, #1]
   28e20:	687b      	ldr	r3, [r7, #4]
   28e22:	2200      	movs	r2, #0
   28e24:	709a      	strb	r2, [r3, #2]
   28e26:	687b      	ldr	r3, [r7, #4]
   28e28:	2200      	movs	r2, #0
   28e2a:	70da      	strb	r2, [r3, #3]
   28e2c:	687b      	ldr	r3, [r7, #4]
   28e2e:	2201      	movs	r2, #1
   28e30:	711a      	strb	r2, [r3, #4]
   28e32:	687b      	ldr	r3, [r7, #4]
   28e34:	2201      	movs	r2, #1
   28e36:	715a      	strb	r2, [r3, #5]
   28e38:	687b      	ldr	r3, [r7, #4]
   28e3a:	22fa      	movs	r2, #250	; 0xfa
   28e3c:	00d2      	lsls	r2, r2, #3
   28e3e:	80da      	strh	r2, [r3, #6]
   28e40:	46c0      	nop			; (mov r8, r8)
   28e42:	46bd      	mov	sp, r7
   28e44:	b002      	add	sp, #8
   28e46:	bd80      	pop	{r7, pc}

00028e48 <rtc_calendar_get_config_defaults>:
   28e48:	b580      	push	{r7, lr}
   28e4a:	b086      	sub	sp, #24
   28e4c:	af00      	add	r7, sp, #0
   28e4e:	6078      	str	r0, [r7, #4]
   28e50:	230c      	movs	r3, #12
   28e52:	18fb      	adds	r3, r7, r3
   28e54:	0018      	movs	r0, r3
   28e56:	4b23      	ldr	r3, [pc, #140]	; (28ee4 <rtc_calendar_get_config_defaults+0x9c>)
   28e58:	4798      	blx	r3
   28e5a:	687b      	ldr	r3, [r7, #4]
   28e5c:	22a0      	movs	r2, #160	; 0xa0
   28e5e:	0112      	lsls	r2, r2, #4
   28e60:	801a      	strh	r2, [r3, #0]
   28e62:	687b      	ldr	r3, [r7, #4]
   28e64:	2200      	movs	r2, #0
   28e66:	709a      	strb	r2, [r3, #2]
   28e68:	687b      	ldr	r3, [r7, #4]
   28e6a:	2200      	movs	r2, #0
   28e6c:	70da      	strb	r2, [r3, #3]
   28e6e:	687b      	ldr	r3, [r7, #4]
   28e70:	2200      	movs	r2, #0
   28e72:	711a      	strb	r2, [r3, #4]
   28e74:	687b      	ldr	r3, [r7, #4]
   28e76:	22fa      	movs	r2, #250	; 0xfa
   28e78:	00d2      	lsls	r2, r2, #3
   28e7a:	80da      	strh	r2, [r3, #6]
   28e7c:	2317      	movs	r3, #23
   28e7e:	18fb      	adds	r3, r7, r3
   28e80:	2200      	movs	r2, #0
   28e82:	701a      	strb	r2, [r3, #0]
   28e84:	e025      	b.n	28ed2 <rtc_calendar_get_config_defaults+0x8a>
   28e86:	2317      	movs	r3, #23
   28e88:	18fb      	adds	r3, r7, r3
   28e8a:	781a      	ldrb	r2, [r3, #0]
   28e8c:	6879      	ldr	r1, [r7, #4]
   28e8e:	2008      	movs	r0, #8
   28e90:	0013      	movs	r3, r2
   28e92:	009b      	lsls	r3, r3, #2
   28e94:	189b      	adds	r3, r3, r2
   28e96:	005b      	lsls	r3, r3, #1
   28e98:	18cb      	adds	r3, r1, r3
   28e9a:	181a      	adds	r2, r3, r0
   28e9c:	230c      	movs	r3, #12
   28e9e:	18fb      	adds	r3, r7, r3
   28ea0:	0010      	movs	r0, r2
   28ea2:	0019      	movs	r1, r3
   28ea4:	2308      	movs	r3, #8
   28ea6:	001a      	movs	r2, r3
   28ea8:	4b0f      	ldr	r3, [pc, #60]	; (28ee8 <rtc_calendar_get_config_defaults+0xa0>)
   28eaa:	4798      	blx	r3
   28eac:	2317      	movs	r3, #23
   28eae:	18fb      	adds	r3, r7, r3
   28eb0:	781a      	ldrb	r2, [r3, #0]
   28eb2:	6879      	ldr	r1, [r7, #4]
   28eb4:	0013      	movs	r3, r2
   28eb6:	009b      	lsls	r3, r3, #2
   28eb8:	189b      	adds	r3, r3, r2
   28eba:	005b      	lsls	r3, r3, #1
   28ebc:	18cb      	adds	r3, r1, r3
   28ebe:	3310      	adds	r3, #16
   28ec0:	2206      	movs	r2, #6
   28ec2:	701a      	strb	r2, [r3, #0]
   28ec4:	2317      	movs	r3, #23
   28ec6:	18fb      	adds	r3, r7, r3
   28ec8:	781a      	ldrb	r2, [r3, #0]
   28eca:	2317      	movs	r3, #23
   28ecc:	18fb      	adds	r3, r7, r3
   28ece:	3201      	adds	r2, #1
   28ed0:	701a      	strb	r2, [r3, #0]
   28ed2:	2317      	movs	r3, #23
   28ed4:	18fb      	adds	r3, r7, r3
   28ed6:	781b      	ldrb	r3, [r3, #0]
   28ed8:	2b00      	cmp	r3, #0
   28eda:	d0d4      	beq.n	28e86 <rtc_calendar_get_config_defaults+0x3e>
   28edc:	46c0      	nop			; (mov r8, r8)
   28ede:	46bd      	mov	sp, r7
   28ee0:	b006      	add	sp, #24
   28ee2:	bd80      	pop	{r7, pc}
   28ee4:	00028e0d 	.word	0x00028e0d
   28ee8:	000321cd 	.word	0x000321cd

00028eec <configure_rtc_calendar>:
   28eec:	b580      	push	{r7, lr}
   28eee:	b088      	sub	sp, #32
   28ef0:	af00      	add	r7, sp, #0
   28ef2:	230c      	movs	r3, #12
   28ef4:	18fb      	adds	r3, r7, r3
   28ef6:	0018      	movs	r0, r3
   28ef8:	4b1a      	ldr	r3, [pc, #104]	; (28f64 <configure_rtc_calendar+0x78>)
   28efa:	4798      	blx	r3
   28efc:	1d3b      	adds	r3, r7, #4
   28efe:	0018      	movs	r0, r3
   28f00:	4b19      	ldr	r3, [pc, #100]	; (28f68 <configure_rtc_calendar+0x7c>)
   28f02:	4798      	blx	r3
   28f04:	1d3b      	adds	r3, r7, #4
   28f06:	4a19      	ldr	r2, [pc, #100]	; (28f6c <configure_rtc_calendar+0x80>)
   28f08:	80da      	strh	r2, [r3, #6]
   28f0a:	1d3b      	adds	r3, r7, #4
   28f0c:	2201      	movs	r2, #1
   28f0e:	715a      	strb	r2, [r3, #5]
   28f10:	1d3b      	adds	r3, r7, #4
   28f12:	2201      	movs	r2, #1
   28f14:	711a      	strb	r2, [r3, #4]
   28f16:	1d3b      	adds	r3, r7, #4
   28f18:	2200      	movs	r2, #0
   28f1a:	709a      	strb	r2, [r3, #2]
   28f1c:	1d3b      	adds	r3, r7, #4
   28f1e:	2200      	movs	r2, #0
   28f20:	705a      	strb	r2, [r3, #1]
   28f22:	1d3b      	adds	r3, r7, #4
   28f24:	2204      	movs	r2, #4
   28f26:	701a      	strb	r2, [r3, #0]
   28f28:	230c      	movs	r3, #12
   28f2a:	18fb      	adds	r3, r7, r3
   28f2c:	2201      	movs	r2, #1
   28f2e:	711a      	strb	r2, [r3, #4]
   28f30:	230c      	movs	r3, #12
   28f32:	18fb      	adds	r3, r7, r3
   28f34:	1d3a      	adds	r2, r7, #4
   28f36:	3308      	adds	r3, #8
   28f38:	ca03      	ldmia	r2!, {r0, r1}
   28f3a:	c303      	stmia	r3!, {r0, r1}
   28f3c:	230c      	movs	r3, #12
   28f3e:	18fb      	adds	r3, r7, r3
   28f40:	2206      	movs	r2, #6
   28f42:	741a      	strb	r2, [r3, #16]
   28f44:	230c      	movs	r3, #12
   28f46:	18fa      	adds	r2, r7, r3
   28f48:	4909      	ldr	r1, [pc, #36]	; (28f70 <configure_rtc_calendar+0x84>)
   28f4a:	4b0a      	ldr	r3, [pc, #40]	; (28f74 <configure_rtc_calendar+0x88>)
   28f4c:	0018      	movs	r0, r3
   28f4e:	4b0a      	ldr	r3, [pc, #40]	; (28f78 <configure_rtc_calendar+0x8c>)
   28f50:	4798      	blx	r3
   28f52:	4b08      	ldr	r3, [pc, #32]	; (28f74 <configure_rtc_calendar+0x88>)
   28f54:	0018      	movs	r0, r3
   28f56:	4b09      	ldr	r3, [pc, #36]	; (28f7c <configure_rtc_calendar+0x90>)
   28f58:	4798      	blx	r3
   28f5a:	46c0      	nop			; (mov r8, r8)
   28f5c:	46bd      	mov	sp, r7
   28f5e:	b008      	add	sp, #32
   28f60:	bd80      	pop	{r7, pc}
   28f62:	46c0      	nop			; (mov r8, r8)
   28f64:	00028e49 	.word	0x00028e49
   28f68:	00028e0d 	.word	0x00028e0d
   28f6c:	000007de 	.word	0x000007de
   28f70:	40001400 	.word	0x40001400
   28f74:	200055ac 	.word	0x200055ac
   28f78:	00024a29 	.word	0x00024a29
   28f7c:	00024755 	.word	0x00024755

00028f80 <disk_initialize>:
   28f80:	b590      	push	{r4, r7, lr}
   28f82:	b085      	sub	sp, #20
   28f84:	af00      	add	r7, sp, #0
   28f86:	0002      	movs	r2, r0
   28f88:	1dfb      	adds	r3, r7, #7
   28f8a:	701a      	strb	r2, [r3, #0]
   28f8c:	4b1a      	ldr	r3, [pc, #104]	; (28ff8 <disk_initialize+0x78>)
   28f8e:	4798      	blx	r3
   28f90:	1dfb      	adds	r3, r7, #7
   28f92:	781b      	ldrb	r3, [r3, #0]
   28f94:	2b01      	cmp	r3, #1
   28f96:	d901      	bls.n	28f9c <disk_initialize+0x1c>
   28f98:	2301      	movs	r3, #1
   28f9a:	e029      	b.n	28ff0 <disk_initialize+0x70>
   28f9c:	2300      	movs	r3, #0
   28f9e:	60fb      	str	r3, [r7, #12]
   28fa0:	e010      	b.n	28fc4 <disk_initialize+0x44>
   28fa2:	230b      	movs	r3, #11
   28fa4:	18fc      	adds	r4, r7, r3
   28fa6:	1dfb      	adds	r3, r7, #7
   28fa8:	781b      	ldrb	r3, [r3, #0]
   28faa:	0018      	movs	r0, r3
   28fac:	4b13      	ldr	r3, [pc, #76]	; (28ffc <disk_initialize+0x7c>)
   28fae:	4798      	blx	r3
   28fb0:	0003      	movs	r3, r0
   28fb2:	7023      	strb	r3, [r4, #0]
   28fb4:	230b      	movs	r3, #11
   28fb6:	18fb      	adds	r3, r7, r3
   28fb8:	781b      	ldrb	r3, [r3, #0]
   28fba:	2b03      	cmp	r3, #3
   28fbc:	d106      	bne.n	28fcc <disk_initialize+0x4c>
   28fbe:	68fb      	ldr	r3, [r7, #12]
   28fc0:	3301      	adds	r3, #1
   28fc2:	60fb      	str	r3, [r7, #12]
   28fc4:	68fb      	ldr	r3, [r7, #12]
   28fc6:	2b01      	cmp	r3, #1
   28fc8:	ddeb      	ble.n	28fa2 <disk_initialize+0x22>
   28fca:	e000      	b.n	28fce <disk_initialize+0x4e>
   28fcc:	46c0      	nop			; (mov r8, r8)
   28fce:	230b      	movs	r3, #11
   28fd0:	18fb      	adds	r3, r7, r3
   28fd2:	781b      	ldrb	r3, [r3, #0]
   28fd4:	2b00      	cmp	r3, #0
   28fd6:	d001      	beq.n	28fdc <disk_initialize+0x5c>
   28fd8:	2301      	movs	r3, #1
   28fda:	e009      	b.n	28ff0 <disk_initialize+0x70>
   28fdc:	1dfb      	adds	r3, r7, #7
   28fde:	781b      	ldrb	r3, [r3, #0]
   28fe0:	0018      	movs	r0, r3
   28fe2:	4b07      	ldr	r3, [pc, #28]	; (29000 <disk_initialize+0x80>)
   28fe4:	4798      	blx	r3
   28fe6:	1e03      	subs	r3, r0, #0
   28fe8:	d001      	beq.n	28fee <disk_initialize+0x6e>
   28fea:	2304      	movs	r3, #4
   28fec:	e000      	b.n	28ff0 <disk_initialize+0x70>
   28fee:	2300      	movs	r3, #0
   28ff0:	0018      	movs	r0, r3
   28ff2:	46bd      	mov	sp, r7
   28ff4:	b005      	add	sp, #20
   28ff6:	bd90      	pop	{r4, r7, pc}
   28ff8:	00028eed 	.word	0x00028eed
   28ffc:	00023c51 	.word	0x00023c51
   29000:	00023d09 	.word	0x00023d09

00029004 <disk_status>:
   29004:	b580      	push	{r7, lr}
   29006:	b082      	sub	sp, #8
   29008:	af00      	add	r7, sp, #0
   2900a:	0002      	movs	r2, r0
   2900c:	1dfb      	adds	r3, r7, #7
   2900e:	701a      	strb	r2, [r3, #0]
   29010:	1dfb      	adds	r3, r7, #7
   29012:	781b      	ldrb	r3, [r3, #0]
   29014:	0018      	movs	r0, r3
   29016:	4b08      	ldr	r3, [pc, #32]	; (29038 <disk_status+0x34>)
   29018:	4798      	blx	r3
   2901a:	1e03      	subs	r3, r0, #0
   2901c:	d002      	beq.n	29024 <disk_status+0x20>
   2901e:	2b02      	cmp	r3, #2
   29020:	d002      	beq.n	29028 <disk_status+0x24>
   29022:	e003      	b.n	2902c <disk_status+0x28>
   29024:	2300      	movs	r3, #0
   29026:	e002      	b.n	2902e <disk_status+0x2a>
   29028:	2303      	movs	r3, #3
   2902a:	e000      	b.n	2902e <disk_status+0x2a>
   2902c:	2301      	movs	r3, #1
   2902e:	0018      	movs	r0, r3
   29030:	46bd      	mov	sp, r7
   29032:	b002      	add	sp, #8
   29034:	bd80      	pop	{r7, pc}
   29036:	46c0      	nop			; (mov r8, r8)
   29038:	00023c51 	.word	0x00023c51

0002903c <disk_read>:
   2903c:	b590      	push	{r4, r7, lr}
   2903e:	b089      	sub	sp, #36	; 0x24
   29040:	af00      	add	r7, sp, #0
   29042:	60b9      	str	r1, [r7, #8]
   29044:	607a      	str	r2, [r7, #4]
   29046:	0019      	movs	r1, r3
   29048:	230f      	movs	r3, #15
   2904a:	18fb      	adds	r3, r7, r3
   2904c:	1c02      	adds	r2, r0, #0
   2904e:	701a      	strb	r2, [r3, #0]
   29050:	230e      	movs	r3, #14
   29052:	18fb      	adds	r3, r7, r3
   29054:	1c0a      	adds	r2, r1, #0
   29056:	701a      	strb	r2, [r3, #0]
   29058:	231b      	movs	r3, #27
   2905a:	18fc      	adds	r4, r7, r3
   2905c:	230f      	movs	r3, #15
   2905e:	18fb      	adds	r3, r7, r3
   29060:	781b      	ldrb	r3, [r3, #0]
   29062:	0018      	movs	r0, r3
   29064:	4b28      	ldr	r3, [pc, #160]	; (29108 <disk_read+0xcc>)
   29066:	4798      	blx	r3
   29068:	0003      	movs	r3, r0
   2906a:	7023      	strb	r3, [r4, #0]
   2906c:	231b      	movs	r3, #27
   2906e:	18fb      	adds	r3, r7, r3
   29070:	781b      	ldrb	r3, [r3, #0]
   29072:	2b00      	cmp	r3, #0
   29074:	d101      	bne.n	2907a <disk_read+0x3e>
   29076:	2301      	movs	r3, #1
   29078:	e042      	b.n	29100 <disk_read+0xc4>
   2907a:	2314      	movs	r3, #20
   2907c:	18fa      	adds	r2, r7, r3
   2907e:	230f      	movs	r3, #15
   29080:	18fb      	adds	r3, r7, r3
   29082:	781b      	ldrb	r3, [r3, #0]
   29084:	0011      	movs	r1, r2
   29086:	0018      	movs	r0, r3
   29088:	4b20      	ldr	r3, [pc, #128]	; (2910c <disk_read+0xd0>)
   2908a:	4798      	blx	r3
   2908c:	230e      	movs	r3, #14
   2908e:	18fb      	adds	r3, r7, r3
   29090:	781b      	ldrb	r3, [r3, #0]
   29092:	221b      	movs	r2, #27
   29094:	18ba      	adds	r2, r7, r2
   29096:	7812      	ldrb	r2, [r2, #0]
   29098:	4353      	muls	r3, r2
   2909a:	001a      	movs	r2, r3
   2909c:	687b      	ldr	r3, [r7, #4]
   2909e:	18d2      	adds	r2, r2, r3
   290a0:	697b      	ldr	r3, [r7, #20]
   290a2:	3301      	adds	r3, #1
   290a4:	211b      	movs	r1, #27
   290a6:	1879      	adds	r1, r7, r1
   290a8:	7809      	ldrb	r1, [r1, #0]
   290aa:	434b      	muls	r3, r1
   290ac:	429a      	cmp	r2, r3
   290ae:	d901      	bls.n	290b4 <disk_read+0x78>
   290b0:	2304      	movs	r3, #4
   290b2:	e025      	b.n	29100 <disk_read+0xc4>
   290b4:	2300      	movs	r3, #0
   290b6:	61fb      	str	r3, [r7, #28]
   290b8:	e01b      	b.n	290f2 <disk_read+0xb6>
   290ba:	231b      	movs	r3, #27
   290bc:	18fb      	adds	r3, r7, r3
   290be:	781b      	ldrb	r3, [r3, #0]
   290c0:	69fa      	ldr	r2, [r7, #28]
   290c2:	435a      	muls	r2, r3
   290c4:	687b      	ldr	r3, [r7, #4]
   290c6:	18d1      	adds	r1, r2, r3
   290c8:	231b      	movs	r3, #27
   290ca:	18fb      	adds	r3, r7, r3
   290cc:	781b      	ldrb	r3, [r3, #0]
   290ce:	69fa      	ldr	r2, [r7, #28]
   290d0:	4353      	muls	r3, r2
   290d2:	025b      	lsls	r3, r3, #9
   290d4:	68ba      	ldr	r2, [r7, #8]
   290d6:	18d2      	adds	r2, r2, r3
   290d8:	230f      	movs	r3, #15
   290da:	18fb      	adds	r3, r7, r3
   290dc:	781b      	ldrb	r3, [r3, #0]
   290de:	0018      	movs	r0, r3
   290e0:	4b0b      	ldr	r3, [pc, #44]	; (29110 <disk_read+0xd4>)
   290e2:	4798      	blx	r3
   290e4:	1e03      	subs	r3, r0, #0
   290e6:	d001      	beq.n	290ec <disk_read+0xb0>
   290e8:	2301      	movs	r3, #1
   290ea:	e009      	b.n	29100 <disk_read+0xc4>
   290ec:	69fb      	ldr	r3, [r7, #28]
   290ee:	3301      	adds	r3, #1
   290f0:	61fb      	str	r3, [r7, #28]
   290f2:	230e      	movs	r3, #14
   290f4:	18fb      	adds	r3, r7, r3
   290f6:	781a      	ldrb	r2, [r3, #0]
   290f8:	69fb      	ldr	r3, [r7, #28]
   290fa:	429a      	cmp	r2, r3
   290fc:	d8dd      	bhi.n	290ba <disk_read+0x7e>
   290fe:	2300      	movs	r3, #0
   29100:	0018      	movs	r0, r3
   29102:	46bd      	mov	sp, r7
   29104:	b009      	add	sp, #36	; 0x24
   29106:	bd90      	pop	{r4, r7, pc}
   29108:	00023cdd 	.word	0x00023cdd
   2910c:	00023c91 	.word	0x00023c91
   29110:	00023d51 	.word	0x00023d51

00029114 <disk_write>:
   29114:	b590      	push	{r4, r7, lr}
   29116:	b089      	sub	sp, #36	; 0x24
   29118:	af00      	add	r7, sp, #0
   2911a:	60b9      	str	r1, [r7, #8]
   2911c:	607a      	str	r2, [r7, #4]
   2911e:	0019      	movs	r1, r3
   29120:	230f      	movs	r3, #15
   29122:	18fb      	adds	r3, r7, r3
   29124:	1c02      	adds	r2, r0, #0
   29126:	701a      	strb	r2, [r3, #0]
   29128:	230e      	movs	r3, #14
   2912a:	18fb      	adds	r3, r7, r3
   2912c:	1c0a      	adds	r2, r1, #0
   2912e:	701a      	strb	r2, [r3, #0]
   29130:	231b      	movs	r3, #27
   29132:	18fc      	adds	r4, r7, r3
   29134:	230f      	movs	r3, #15
   29136:	18fb      	adds	r3, r7, r3
   29138:	781b      	ldrb	r3, [r3, #0]
   2913a:	0018      	movs	r0, r3
   2913c:	4b28      	ldr	r3, [pc, #160]	; (291e0 <disk_write+0xcc>)
   2913e:	4798      	blx	r3
   29140:	0003      	movs	r3, r0
   29142:	7023      	strb	r3, [r4, #0]
   29144:	231b      	movs	r3, #27
   29146:	18fb      	adds	r3, r7, r3
   29148:	781b      	ldrb	r3, [r3, #0]
   2914a:	2b00      	cmp	r3, #0
   2914c:	d101      	bne.n	29152 <disk_write+0x3e>
   2914e:	2301      	movs	r3, #1
   29150:	e042      	b.n	291d8 <disk_write+0xc4>
   29152:	2314      	movs	r3, #20
   29154:	18fa      	adds	r2, r7, r3
   29156:	230f      	movs	r3, #15
   29158:	18fb      	adds	r3, r7, r3
   2915a:	781b      	ldrb	r3, [r3, #0]
   2915c:	0011      	movs	r1, r2
   2915e:	0018      	movs	r0, r3
   29160:	4b20      	ldr	r3, [pc, #128]	; (291e4 <disk_write+0xd0>)
   29162:	4798      	blx	r3
   29164:	230e      	movs	r3, #14
   29166:	18fb      	adds	r3, r7, r3
   29168:	781b      	ldrb	r3, [r3, #0]
   2916a:	221b      	movs	r2, #27
   2916c:	18ba      	adds	r2, r7, r2
   2916e:	7812      	ldrb	r2, [r2, #0]
   29170:	4353      	muls	r3, r2
   29172:	001a      	movs	r2, r3
   29174:	687b      	ldr	r3, [r7, #4]
   29176:	18d2      	adds	r2, r2, r3
   29178:	697b      	ldr	r3, [r7, #20]
   2917a:	3301      	adds	r3, #1
   2917c:	211b      	movs	r1, #27
   2917e:	1879      	adds	r1, r7, r1
   29180:	7809      	ldrb	r1, [r1, #0]
   29182:	434b      	muls	r3, r1
   29184:	429a      	cmp	r2, r3
   29186:	d901      	bls.n	2918c <disk_write+0x78>
   29188:	2304      	movs	r3, #4
   2918a:	e025      	b.n	291d8 <disk_write+0xc4>
   2918c:	2300      	movs	r3, #0
   2918e:	61fb      	str	r3, [r7, #28]
   29190:	e01b      	b.n	291ca <disk_write+0xb6>
   29192:	231b      	movs	r3, #27
   29194:	18fb      	adds	r3, r7, r3
   29196:	781b      	ldrb	r3, [r3, #0]
   29198:	69fa      	ldr	r2, [r7, #28]
   2919a:	435a      	muls	r2, r3
   2919c:	687b      	ldr	r3, [r7, #4]
   2919e:	18d1      	adds	r1, r2, r3
   291a0:	231b      	movs	r3, #27
   291a2:	18fb      	adds	r3, r7, r3
   291a4:	781b      	ldrb	r3, [r3, #0]
   291a6:	69fa      	ldr	r2, [r7, #28]
   291a8:	4353      	muls	r3, r2
   291aa:	025b      	lsls	r3, r3, #9
   291ac:	68ba      	ldr	r2, [r7, #8]
   291ae:	18d2      	adds	r2, r2, r3
   291b0:	230f      	movs	r3, #15
   291b2:	18fb      	adds	r3, r7, r3
   291b4:	781b      	ldrb	r3, [r3, #0]
   291b6:	0018      	movs	r0, r3
   291b8:	4b0b      	ldr	r3, [pc, #44]	; (291e8 <disk_write+0xd4>)
   291ba:	4798      	blx	r3
   291bc:	1e03      	subs	r3, r0, #0
   291be:	d001      	beq.n	291c4 <disk_write+0xb0>
   291c0:	2301      	movs	r3, #1
   291c2:	e009      	b.n	291d8 <disk_write+0xc4>
   291c4:	69fb      	ldr	r3, [r7, #28]
   291c6:	3301      	adds	r3, #1
   291c8:	61fb      	str	r3, [r7, #28]
   291ca:	230e      	movs	r3, #14
   291cc:	18fb      	adds	r3, r7, r3
   291ce:	781a      	ldrb	r2, [r3, #0]
   291d0:	69fb      	ldr	r3, [r7, #28]
   291d2:	429a      	cmp	r2, r3
   291d4:	d8dd      	bhi.n	29192 <disk_write+0x7e>
   291d6:	2300      	movs	r3, #0
   291d8:	0018      	movs	r0, r3
   291da:	46bd      	mov	sp, r7
   291dc:	b009      	add	sp, #36	; 0x24
   291de:	bd90      	pop	{r4, r7, pc}
   291e0:	00023cdd 	.word	0x00023cdd
   291e4:	00023c91 	.word	0x00023c91
   291e8:	00023da5 	.word	0x00023da5

000291ec <disk_ioctl>:
   291ec:	b590      	push	{r4, r7, lr}
   291ee:	b085      	sub	sp, #20
   291f0:	af00      	add	r7, sp, #0
   291f2:	603a      	str	r2, [r7, #0]
   291f4:	1dfb      	adds	r3, r7, #7
   291f6:	1c02      	adds	r2, r0, #0
   291f8:	701a      	strb	r2, [r3, #0]
   291fa:	1dbb      	adds	r3, r7, #6
   291fc:	1c0a      	adds	r2, r1, #0
   291fe:	701a      	strb	r2, [r3, #0]
   29200:	230f      	movs	r3, #15
   29202:	18fb      	adds	r3, r7, r3
   29204:	2204      	movs	r2, #4
   29206:	701a      	strb	r2, [r3, #0]
   29208:	1dbb      	adds	r3, r7, #6
   2920a:	781b      	ldrb	r3, [r3, #0]
   2920c:	2b01      	cmp	r3, #1
   2920e:	d00f      	beq.n	29230 <disk_ioctl+0x44>
   29210:	dc02      	bgt.n	29218 <disk_ioctl+0x2c>
   29212:	2b00      	cmp	r3, #0
   29214:	d044      	beq.n	292a0 <disk_ioctl+0xb4>
   29216:	e054      	b.n	292c2 <disk_ioctl+0xd6>
   29218:	2b02      	cmp	r3, #2
   2921a:	d01a      	beq.n	29252 <disk_ioctl+0x66>
   2921c:	2b03      	cmp	r3, #3
   2921e:	d150      	bne.n	292c2 <disk_ioctl+0xd6>
   29220:	683b      	ldr	r3, [r7, #0]
   29222:	2201      	movs	r2, #1
   29224:	601a      	str	r2, [r3, #0]
   29226:	230f      	movs	r3, #15
   29228:	18fb      	adds	r3, r7, r3
   2922a:	2200      	movs	r2, #0
   2922c:	701a      	strb	r2, [r3, #0]
   2922e:	e04c      	b.n	292ca <disk_ioctl+0xde>
   29230:	2308      	movs	r3, #8
   29232:	18fa      	adds	r2, r7, r3
   29234:	1dfb      	adds	r3, r7, #7
   29236:	781b      	ldrb	r3, [r3, #0]
   29238:	0011      	movs	r1, r2
   2923a:	0018      	movs	r0, r3
   2923c:	4b26      	ldr	r3, [pc, #152]	; (292d8 <disk_ioctl+0xec>)
   2923e:	4798      	blx	r3
   29240:	68bb      	ldr	r3, [r7, #8]
   29242:	1c5a      	adds	r2, r3, #1
   29244:	683b      	ldr	r3, [r7, #0]
   29246:	601a      	str	r2, [r3, #0]
   29248:	230f      	movs	r3, #15
   2924a:	18fb      	adds	r3, r7, r3
   2924c:	2200      	movs	r2, #0
   2924e:	701a      	strb	r2, [r3, #0]
   29250:	e03b      	b.n	292ca <disk_ioctl+0xde>
   29252:	230e      	movs	r3, #14
   29254:	18fc      	adds	r4, r7, r3
   29256:	1dfb      	adds	r3, r7, #7
   29258:	781b      	ldrb	r3, [r3, #0]
   2925a:	0018      	movs	r0, r3
   2925c:	4b1f      	ldr	r3, [pc, #124]	; (292dc <disk_ioctl+0xf0>)
   2925e:	4798      	blx	r3
   29260:	0003      	movs	r3, r0
   29262:	7023      	strb	r3, [r4, #0]
   29264:	230e      	movs	r3, #14
   29266:	18fb      	adds	r3, r7, r3
   29268:	781b      	ldrb	r3, [r3, #0]
   2926a:	2b01      	cmp	r3, #1
   2926c:	d010      	beq.n	29290 <disk_ioctl+0xa4>
   2926e:	230e      	movs	r3, #14
   29270:	18fb      	adds	r3, r7, r3
   29272:	781b      	ldrb	r3, [r3, #0]
   29274:	2b02      	cmp	r3, #2
   29276:	d00b      	beq.n	29290 <disk_ioctl+0xa4>
   29278:	230e      	movs	r3, #14
   2927a:	18fb      	adds	r3, r7, r3
   2927c:	781b      	ldrb	r3, [r3, #0]
   2927e:	2b04      	cmp	r3, #4
   29280:	d006      	beq.n	29290 <disk_ioctl+0xa4>
   29282:	230e      	movs	r3, #14
   29284:	18fb      	adds	r3, r7, r3
   29286:	781b      	ldrb	r3, [r3, #0]
   29288:	2b08      	cmp	r3, #8
   2928a:	d001      	beq.n	29290 <disk_ioctl+0xa4>
   2928c:	2301      	movs	r3, #1
   2928e:	e01f      	b.n	292d0 <disk_ioctl+0xe4>
   29290:	683b      	ldr	r3, [r7, #0]
   29292:	2200      	movs	r2, #0
   29294:	701a      	strb	r2, [r3, #0]
   29296:	230f      	movs	r3, #15
   29298:	18fb      	adds	r3, r7, r3
   2929a:	2200      	movs	r2, #0
   2929c:	701a      	strb	r2, [r3, #0]
   2929e:	e014      	b.n	292ca <disk_ioctl+0xde>
   292a0:	1dfb      	adds	r3, r7, #7
   292a2:	781b      	ldrb	r3, [r3, #0]
   292a4:	0018      	movs	r0, r3
   292a6:	4b0e      	ldr	r3, [pc, #56]	; (292e0 <disk_ioctl+0xf4>)
   292a8:	4798      	blx	r3
   292aa:	1e03      	subs	r3, r0, #0
   292ac:	d104      	bne.n	292b8 <disk_ioctl+0xcc>
   292ae:	230f      	movs	r3, #15
   292b0:	18fb      	adds	r3, r7, r3
   292b2:	2200      	movs	r2, #0
   292b4:	701a      	strb	r2, [r3, #0]
   292b6:	e008      	b.n	292ca <disk_ioctl+0xde>
   292b8:	230f      	movs	r3, #15
   292ba:	18fb      	adds	r3, r7, r3
   292bc:	2203      	movs	r2, #3
   292be:	701a      	strb	r2, [r3, #0]
   292c0:	e003      	b.n	292ca <disk_ioctl+0xde>
   292c2:	230f      	movs	r3, #15
   292c4:	18fb      	adds	r3, r7, r3
   292c6:	2204      	movs	r2, #4
   292c8:	701a      	strb	r2, [r3, #0]
   292ca:	230f      	movs	r3, #15
   292cc:	18fb      	adds	r3, r7, r3
   292ce:	781b      	ldrb	r3, [r3, #0]
   292d0:	0018      	movs	r0, r3
   292d2:	46bd      	mov	sp, r7
   292d4:	b005      	add	sp, #20
   292d6:	bd90      	pop	{r4, r7, pc}
   292d8:	00023c91 	.word	0x00023c91
   292dc:	00023cdd 	.word	0x00023cdd
   292e0:	00023c51 	.word	0x00023c51

000292e4 <get_fattime>:
   292e4:	b580      	push	{r7, lr}
   292e6:	b084      	sub	sp, #16
   292e8:	af00      	add	r7, sp, #0
   292ea:	1d3a      	adds	r2, r7, #4
   292ec:	4b12      	ldr	r3, [pc, #72]	; (29338 <get_fattime+0x54>)
   292ee:	0011      	movs	r1, r2
   292f0:	0018      	movs	r0, r3
   292f2:	4b12      	ldr	r3, [pc, #72]	; (2933c <get_fattime+0x58>)
   292f4:	4798      	blx	r3
   292f6:	1d3b      	adds	r3, r7, #4
   292f8:	88db      	ldrh	r3, [r3, #6]
   292fa:	4a11      	ldr	r2, [pc, #68]	; (29340 <get_fattime+0x5c>)
   292fc:	4694      	mov	ip, r2
   292fe:	4463      	add	r3, ip
   29300:	065a      	lsls	r2, r3, #25
   29302:	1d3b      	adds	r3, r7, #4
   29304:	795b      	ldrb	r3, [r3, #5]
   29306:	055b      	lsls	r3, r3, #21
   29308:	431a      	orrs	r2, r3
   2930a:	1d3b      	adds	r3, r7, #4
   2930c:	791b      	ldrb	r3, [r3, #4]
   2930e:	041b      	lsls	r3, r3, #16
   29310:	431a      	orrs	r2, r3
   29312:	1d3b      	adds	r3, r7, #4
   29314:	789b      	ldrb	r3, [r3, #2]
   29316:	02db      	lsls	r3, r3, #11
   29318:	431a      	orrs	r2, r3
   2931a:	1d3b      	adds	r3, r7, #4
   2931c:	785b      	ldrb	r3, [r3, #1]
   2931e:	015b      	lsls	r3, r3, #5
   29320:	4313      	orrs	r3, r2
   29322:	1d3a      	adds	r2, r7, #4
   29324:	7812      	ldrb	r2, [r2, #0]
   29326:	0852      	lsrs	r2, r2, #1
   29328:	b2d2      	uxtb	r2, r2
   2932a:	4313      	orrs	r3, r2
   2932c:	60fb      	str	r3, [r7, #12]
   2932e:	68fb      	ldr	r3, [r7, #12]
   29330:	0018      	movs	r0, r3
   29332:	46bd      	mov	sp, r7
   29334:	b004      	add	sp, #16
   29336:	bd80      	pop	{r7, pc}
   29338:	200055ac 	.word	0x200055ac
   2933c:	00024abd 	.word	0x00024abd
   29340:	fffff844 	.word	0xfffff844

00029344 <mem_cpy>:
   29344:	b580      	push	{r7, lr}
   29346:	b086      	sub	sp, #24
   29348:	af00      	add	r7, sp, #0
   2934a:	60f8      	str	r0, [r7, #12]
   2934c:	60b9      	str	r1, [r7, #8]
   2934e:	607a      	str	r2, [r7, #4]
   29350:	68fb      	ldr	r3, [r7, #12]
   29352:	617b      	str	r3, [r7, #20]
   29354:	68bb      	ldr	r3, [r7, #8]
   29356:	613b      	str	r3, [r7, #16]
   29358:	e007      	b.n	2936a <mem_cpy+0x26>
   2935a:	697b      	ldr	r3, [r7, #20]
   2935c:	1c5a      	adds	r2, r3, #1
   2935e:	617a      	str	r2, [r7, #20]
   29360:	693a      	ldr	r2, [r7, #16]
   29362:	1c51      	adds	r1, r2, #1
   29364:	6139      	str	r1, [r7, #16]
   29366:	7812      	ldrb	r2, [r2, #0]
   29368:	701a      	strb	r2, [r3, #0]
   2936a:	687b      	ldr	r3, [r7, #4]
   2936c:	1e5a      	subs	r2, r3, #1
   2936e:	607a      	str	r2, [r7, #4]
   29370:	2b00      	cmp	r3, #0
   29372:	d1f2      	bne.n	2935a <mem_cpy+0x16>
   29374:	46c0      	nop			; (mov r8, r8)
   29376:	46bd      	mov	sp, r7
   29378:	b006      	add	sp, #24
   2937a:	bd80      	pop	{r7, pc}

0002937c <mem_set>:
   2937c:	b580      	push	{r7, lr}
   2937e:	b086      	sub	sp, #24
   29380:	af00      	add	r7, sp, #0
   29382:	60f8      	str	r0, [r7, #12]
   29384:	60b9      	str	r1, [r7, #8]
   29386:	607a      	str	r2, [r7, #4]
   29388:	68fb      	ldr	r3, [r7, #12]
   2938a:	617b      	str	r3, [r7, #20]
   2938c:	e005      	b.n	2939a <mem_set+0x1e>
   2938e:	697b      	ldr	r3, [r7, #20]
   29390:	1c5a      	adds	r2, r3, #1
   29392:	617a      	str	r2, [r7, #20]
   29394:	68ba      	ldr	r2, [r7, #8]
   29396:	b2d2      	uxtb	r2, r2
   29398:	701a      	strb	r2, [r3, #0]
   2939a:	687b      	ldr	r3, [r7, #4]
   2939c:	1e5a      	subs	r2, r3, #1
   2939e:	607a      	str	r2, [r7, #4]
   293a0:	2b00      	cmp	r3, #0
   293a2:	d1f4      	bne.n	2938e <mem_set+0x12>
   293a4:	46c0      	nop			; (mov r8, r8)
   293a6:	46bd      	mov	sp, r7
   293a8:	b006      	add	sp, #24
   293aa:	bd80      	pop	{r7, pc}

000293ac <mem_cmp>:
   293ac:	b580      	push	{r7, lr}
   293ae:	b088      	sub	sp, #32
   293b0:	af00      	add	r7, sp, #0
   293b2:	60f8      	str	r0, [r7, #12]
   293b4:	60b9      	str	r1, [r7, #8]
   293b6:	607a      	str	r2, [r7, #4]
   293b8:	68fb      	ldr	r3, [r7, #12]
   293ba:	61fb      	str	r3, [r7, #28]
   293bc:	68bb      	ldr	r3, [r7, #8]
   293be:	61bb      	str	r3, [r7, #24]
   293c0:	2300      	movs	r3, #0
   293c2:	617b      	str	r3, [r7, #20]
   293c4:	46c0      	nop			; (mov r8, r8)
   293c6:	687b      	ldr	r3, [r7, #4]
   293c8:	1e5a      	subs	r2, r3, #1
   293ca:	607a      	str	r2, [r7, #4]
   293cc:	2b00      	cmp	r3, #0
   293ce:	d00d      	beq.n	293ec <mem_cmp+0x40>
   293d0:	69fb      	ldr	r3, [r7, #28]
   293d2:	1c5a      	adds	r2, r3, #1
   293d4:	61fa      	str	r2, [r7, #28]
   293d6:	781b      	ldrb	r3, [r3, #0]
   293d8:	0019      	movs	r1, r3
   293da:	69bb      	ldr	r3, [r7, #24]
   293dc:	1c5a      	adds	r2, r3, #1
   293de:	61ba      	str	r2, [r7, #24]
   293e0:	781b      	ldrb	r3, [r3, #0]
   293e2:	1acb      	subs	r3, r1, r3
   293e4:	617b      	str	r3, [r7, #20]
   293e6:	697b      	ldr	r3, [r7, #20]
   293e8:	2b00      	cmp	r3, #0
   293ea:	d0ec      	beq.n	293c6 <mem_cmp+0x1a>
   293ec:	697b      	ldr	r3, [r7, #20]
   293ee:	0018      	movs	r0, r3
   293f0:	46bd      	mov	sp, r7
   293f2:	b008      	add	sp, #32
   293f4:	bd80      	pop	{r7, pc}

000293f6 <chk_chr>:
   293f6:	b580      	push	{r7, lr}
   293f8:	b082      	sub	sp, #8
   293fa:	af00      	add	r7, sp, #0
   293fc:	6078      	str	r0, [r7, #4]
   293fe:	6039      	str	r1, [r7, #0]
   29400:	e002      	b.n	29408 <chk_chr+0x12>
   29402:	687b      	ldr	r3, [r7, #4]
   29404:	3301      	adds	r3, #1
   29406:	607b      	str	r3, [r7, #4]
   29408:	687b      	ldr	r3, [r7, #4]
   2940a:	781b      	ldrb	r3, [r3, #0]
   2940c:	2b00      	cmp	r3, #0
   2940e:	d005      	beq.n	2941c <chk_chr+0x26>
   29410:	687b      	ldr	r3, [r7, #4]
   29412:	781b      	ldrb	r3, [r3, #0]
   29414:	001a      	movs	r2, r3
   29416:	683b      	ldr	r3, [r7, #0]
   29418:	429a      	cmp	r2, r3
   2941a:	d1f2      	bne.n	29402 <chk_chr+0xc>
   2941c:	687b      	ldr	r3, [r7, #4]
   2941e:	781b      	ldrb	r3, [r3, #0]
   29420:	0018      	movs	r0, r3
   29422:	46bd      	mov	sp, r7
   29424:	b002      	add	sp, #8
   29426:	bd80      	pop	{r7, pc}

00029428 <move_window>:
   29428:	b590      	push	{r4, r7, lr}
   2942a:	b085      	sub	sp, #20
   2942c:	af00      	add	r7, sp, #0
   2942e:	6078      	str	r0, [r7, #4]
   29430:	6039      	str	r1, [r7, #0]
   29432:	687b      	ldr	r3, [r7, #4]
   29434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29436:	60fb      	str	r3, [r7, #12]
   29438:	68fa      	ldr	r2, [r7, #12]
   2943a:	683b      	ldr	r3, [r7, #0]
   2943c:	429a      	cmp	r2, r3
   2943e:	d04e      	beq.n	294de <move_window+0xb6>
   29440:	687b      	ldr	r3, [r7, #4]
   29442:	791b      	ldrb	r3, [r3, #4]
   29444:	2b00      	cmp	r3, #0
   29446:	d037      	beq.n	294b8 <move_window+0x90>
   29448:	687b      	ldr	r3, [r7, #4]
   2944a:	7858      	ldrb	r0, [r3, #1]
   2944c:	687b      	ldr	r3, [r7, #4]
   2944e:	3330      	adds	r3, #48	; 0x30
   29450:	0019      	movs	r1, r3
   29452:	68fa      	ldr	r2, [r7, #12]
   29454:	2301      	movs	r3, #1
   29456:	4c24      	ldr	r4, [pc, #144]	; (294e8 <move_window+0xc0>)
   29458:	47a0      	blx	r4
   2945a:	1e03      	subs	r3, r0, #0
   2945c:	d001      	beq.n	29462 <move_window+0x3a>
   2945e:	2301      	movs	r3, #1
   29460:	e03e      	b.n	294e0 <move_window+0xb8>
   29462:	687b      	ldr	r3, [r7, #4]
   29464:	2200      	movs	r2, #0
   29466:	711a      	strb	r2, [r3, #4]
   29468:	687b      	ldr	r3, [r7, #4]
   2946a:	6a1a      	ldr	r2, [r3, #32]
   2946c:	687b      	ldr	r3, [r7, #4]
   2946e:	69db      	ldr	r3, [r3, #28]
   29470:	18d2      	adds	r2, r2, r3
   29472:	68fb      	ldr	r3, [r7, #12]
   29474:	429a      	cmp	r2, r3
   29476:	d91f      	bls.n	294b8 <move_window+0x90>
   29478:	230b      	movs	r3, #11
   2947a:	18fb      	adds	r3, r7, r3
   2947c:	687a      	ldr	r2, [r7, #4]
   2947e:	78d2      	ldrb	r2, [r2, #3]
   29480:	701a      	strb	r2, [r3, #0]
   29482:	e014      	b.n	294ae <move_window+0x86>
   29484:	687b      	ldr	r3, [r7, #4]
   29486:	69db      	ldr	r3, [r3, #28]
   29488:	68fa      	ldr	r2, [r7, #12]
   2948a:	18d3      	adds	r3, r2, r3
   2948c:	60fb      	str	r3, [r7, #12]
   2948e:	687b      	ldr	r3, [r7, #4]
   29490:	7858      	ldrb	r0, [r3, #1]
   29492:	687b      	ldr	r3, [r7, #4]
   29494:	3330      	adds	r3, #48	; 0x30
   29496:	0019      	movs	r1, r3
   29498:	68fa      	ldr	r2, [r7, #12]
   2949a:	2301      	movs	r3, #1
   2949c:	4c12      	ldr	r4, [pc, #72]	; (294e8 <move_window+0xc0>)
   2949e:	47a0      	blx	r4
   294a0:	230b      	movs	r3, #11
   294a2:	18fb      	adds	r3, r7, r3
   294a4:	781a      	ldrb	r2, [r3, #0]
   294a6:	230b      	movs	r3, #11
   294a8:	18fb      	adds	r3, r7, r3
   294aa:	3a01      	subs	r2, #1
   294ac:	701a      	strb	r2, [r3, #0]
   294ae:	230b      	movs	r3, #11
   294b0:	18fb      	adds	r3, r7, r3
   294b2:	781b      	ldrb	r3, [r3, #0]
   294b4:	2b01      	cmp	r3, #1
   294b6:	d8e5      	bhi.n	29484 <move_window+0x5c>
   294b8:	683b      	ldr	r3, [r7, #0]
   294ba:	2b00      	cmp	r3, #0
   294bc:	d00f      	beq.n	294de <move_window+0xb6>
   294be:	687b      	ldr	r3, [r7, #4]
   294c0:	7858      	ldrb	r0, [r3, #1]
   294c2:	687b      	ldr	r3, [r7, #4]
   294c4:	3330      	adds	r3, #48	; 0x30
   294c6:	0019      	movs	r1, r3
   294c8:	683a      	ldr	r2, [r7, #0]
   294ca:	2301      	movs	r3, #1
   294cc:	4c07      	ldr	r4, [pc, #28]	; (294ec <move_window+0xc4>)
   294ce:	47a0      	blx	r4
   294d0:	1e03      	subs	r3, r0, #0
   294d2:	d001      	beq.n	294d8 <move_window+0xb0>
   294d4:	2301      	movs	r3, #1
   294d6:	e003      	b.n	294e0 <move_window+0xb8>
   294d8:	687b      	ldr	r3, [r7, #4]
   294da:	683a      	ldr	r2, [r7, #0]
   294dc:	62da      	str	r2, [r3, #44]	; 0x2c
   294de:	2300      	movs	r3, #0
   294e0:	0018      	movs	r0, r3
   294e2:	46bd      	mov	sp, r7
   294e4:	b005      	add	sp, #20
   294e6:	bd90      	pop	{r4, r7, pc}
   294e8:	00029115 	.word	0x00029115
   294ec:	0002903d 	.word	0x0002903d

000294f0 <sync>:
   294f0:	b590      	push	{r4, r7, lr}
   294f2:	b085      	sub	sp, #20
   294f4:	af00      	add	r7, sp, #0
   294f6:	6078      	str	r0, [r7, #4]
   294f8:	230f      	movs	r3, #15
   294fa:	18fc      	adds	r4, r7, r3
   294fc:	687b      	ldr	r3, [r7, #4]
   294fe:	2100      	movs	r1, #0
   29500:	0018      	movs	r0, r3
   29502:	4b52      	ldr	r3, [pc, #328]	; (2964c <sync+0x15c>)
   29504:	4798      	blx	r3
   29506:	0003      	movs	r3, r0
   29508:	7023      	strb	r3, [r4, #0]
   2950a:	230f      	movs	r3, #15
   2950c:	18fb      	adds	r3, r7, r3
   2950e:	781b      	ldrb	r3, [r3, #0]
   29510:	2b00      	cmp	r3, #0
   29512:	d000      	beq.n	29516 <sync+0x26>
   29514:	e093      	b.n	2963e <sync+0x14e>
   29516:	687b      	ldr	r3, [r7, #4]
   29518:	781b      	ldrb	r3, [r3, #0]
   2951a:	2b03      	cmp	r3, #3
   2951c:	d000      	beq.n	29520 <sync+0x30>
   2951e:	e081      	b.n	29624 <sync+0x134>
   29520:	687b      	ldr	r3, [r7, #4]
   29522:	795b      	ldrb	r3, [r3, #5]
   29524:	2b00      	cmp	r3, #0
   29526:	d07d      	beq.n	29624 <sync+0x134>
   29528:	687b      	ldr	r3, [r7, #4]
   2952a:	2200      	movs	r2, #0
   2952c:	62da      	str	r2, [r3, #44]	; 0x2c
   2952e:	687b      	ldr	r3, [r7, #4]
   29530:	3330      	adds	r3, #48	; 0x30
   29532:	0018      	movs	r0, r3
   29534:	2380      	movs	r3, #128	; 0x80
   29536:	009b      	lsls	r3, r3, #2
   29538:	001a      	movs	r2, r3
   2953a:	2100      	movs	r1, #0
   2953c:	4b44      	ldr	r3, [pc, #272]	; (29650 <sync+0x160>)
   2953e:	4798      	blx	r3
   29540:	687b      	ldr	r3, [r7, #4]
   29542:	4a44      	ldr	r2, [pc, #272]	; (29654 <sync+0x164>)
   29544:	2155      	movs	r1, #85	; 0x55
   29546:	5499      	strb	r1, [r3, r2]
   29548:	687b      	ldr	r3, [r7, #4]
   2954a:	4a43      	ldr	r2, [pc, #268]	; (29658 <sync+0x168>)
   2954c:	21aa      	movs	r1, #170	; 0xaa
   2954e:	5499      	strb	r1, [r3, r2]
   29550:	687b      	ldr	r3, [r7, #4]
   29552:	2230      	movs	r2, #48	; 0x30
   29554:	2152      	movs	r1, #82	; 0x52
   29556:	5499      	strb	r1, [r3, r2]
   29558:	687b      	ldr	r3, [r7, #4]
   2955a:	2231      	movs	r2, #49	; 0x31
   2955c:	2152      	movs	r1, #82	; 0x52
   2955e:	5499      	strb	r1, [r3, r2]
   29560:	687b      	ldr	r3, [r7, #4]
   29562:	2232      	movs	r2, #50	; 0x32
   29564:	2161      	movs	r1, #97	; 0x61
   29566:	5499      	strb	r1, [r3, r2]
   29568:	687b      	ldr	r3, [r7, #4]
   2956a:	2233      	movs	r2, #51	; 0x33
   2956c:	2141      	movs	r1, #65	; 0x41
   2956e:	5499      	strb	r1, [r3, r2]
   29570:	687a      	ldr	r2, [r7, #4]
   29572:	2385      	movs	r3, #133	; 0x85
   29574:	009b      	lsls	r3, r3, #2
   29576:	2172      	movs	r1, #114	; 0x72
   29578:	54d1      	strb	r1, [r2, r3]
   2957a:	687b      	ldr	r3, [r7, #4]
   2957c:	4a37      	ldr	r2, [pc, #220]	; (2965c <sync+0x16c>)
   2957e:	2172      	movs	r1, #114	; 0x72
   29580:	5499      	strb	r1, [r3, r2]
   29582:	687b      	ldr	r3, [r7, #4]
   29584:	4a36      	ldr	r2, [pc, #216]	; (29660 <sync+0x170>)
   29586:	2141      	movs	r1, #65	; 0x41
   29588:	5499      	strb	r1, [r3, r2]
   2958a:	687b      	ldr	r3, [r7, #4]
   2958c:	4a35      	ldr	r2, [pc, #212]	; (29664 <sync+0x174>)
   2958e:	2161      	movs	r1, #97	; 0x61
   29590:	5499      	strb	r1, [r3, r2]
   29592:	687b      	ldr	r3, [r7, #4]
   29594:	691b      	ldr	r3, [r3, #16]
   29596:	b2d9      	uxtb	r1, r3
   29598:	687a      	ldr	r2, [r7, #4]
   2959a:	2386      	movs	r3, #134	; 0x86
   2959c:	009b      	lsls	r3, r3, #2
   2959e:	54d1      	strb	r1, [r2, r3]
   295a0:	687b      	ldr	r3, [r7, #4]
   295a2:	691b      	ldr	r3, [r3, #16]
   295a4:	b29b      	uxth	r3, r3
   295a6:	0a1b      	lsrs	r3, r3, #8
   295a8:	b29b      	uxth	r3, r3
   295aa:	b2d9      	uxtb	r1, r3
   295ac:	687b      	ldr	r3, [r7, #4]
   295ae:	4a2e      	ldr	r2, [pc, #184]	; (29668 <sync+0x178>)
   295b0:	5499      	strb	r1, [r3, r2]
   295b2:	687b      	ldr	r3, [r7, #4]
   295b4:	691b      	ldr	r3, [r3, #16]
   295b6:	0c1b      	lsrs	r3, r3, #16
   295b8:	b2d9      	uxtb	r1, r3
   295ba:	687b      	ldr	r3, [r7, #4]
   295bc:	4a2b      	ldr	r2, [pc, #172]	; (2966c <sync+0x17c>)
   295be:	5499      	strb	r1, [r3, r2]
   295c0:	687b      	ldr	r3, [r7, #4]
   295c2:	691b      	ldr	r3, [r3, #16]
   295c4:	0e1b      	lsrs	r3, r3, #24
   295c6:	b2d9      	uxtb	r1, r3
   295c8:	687b      	ldr	r3, [r7, #4]
   295ca:	4a29      	ldr	r2, [pc, #164]	; (29670 <sync+0x180>)
   295cc:	5499      	strb	r1, [r3, r2]
   295ce:	687b      	ldr	r3, [r7, #4]
   295d0:	68db      	ldr	r3, [r3, #12]
   295d2:	b2d9      	uxtb	r1, r3
   295d4:	687a      	ldr	r2, [r7, #4]
   295d6:	2387      	movs	r3, #135	; 0x87
   295d8:	009b      	lsls	r3, r3, #2
   295da:	54d1      	strb	r1, [r2, r3]
   295dc:	687b      	ldr	r3, [r7, #4]
   295de:	68db      	ldr	r3, [r3, #12]
   295e0:	b29b      	uxth	r3, r3
   295e2:	0a1b      	lsrs	r3, r3, #8
   295e4:	b29b      	uxth	r3, r3
   295e6:	b2d9      	uxtb	r1, r3
   295e8:	687b      	ldr	r3, [r7, #4]
   295ea:	4a22      	ldr	r2, [pc, #136]	; (29674 <sync+0x184>)
   295ec:	5499      	strb	r1, [r3, r2]
   295ee:	687b      	ldr	r3, [r7, #4]
   295f0:	68db      	ldr	r3, [r3, #12]
   295f2:	0c1b      	lsrs	r3, r3, #16
   295f4:	b2d9      	uxtb	r1, r3
   295f6:	687b      	ldr	r3, [r7, #4]
   295f8:	4a1f      	ldr	r2, [pc, #124]	; (29678 <sync+0x188>)
   295fa:	5499      	strb	r1, [r3, r2]
   295fc:	687b      	ldr	r3, [r7, #4]
   295fe:	68db      	ldr	r3, [r3, #12]
   29600:	0e1b      	lsrs	r3, r3, #24
   29602:	b2d9      	uxtb	r1, r3
   29604:	687b      	ldr	r3, [r7, #4]
   29606:	4a1d      	ldr	r2, [pc, #116]	; (2967c <sync+0x18c>)
   29608:	5499      	strb	r1, [r3, r2]
   2960a:	687b      	ldr	r3, [r7, #4]
   2960c:	7858      	ldrb	r0, [r3, #1]
   2960e:	687b      	ldr	r3, [r7, #4]
   29610:	3330      	adds	r3, #48	; 0x30
   29612:	0019      	movs	r1, r3
   29614:	687b      	ldr	r3, [r7, #4]
   29616:	695a      	ldr	r2, [r3, #20]
   29618:	2301      	movs	r3, #1
   2961a:	4c19      	ldr	r4, [pc, #100]	; (29680 <sync+0x190>)
   2961c:	47a0      	blx	r4
   2961e:	687b      	ldr	r3, [r7, #4]
   29620:	2200      	movs	r2, #0
   29622:	715a      	strb	r2, [r3, #5]
   29624:	687b      	ldr	r3, [r7, #4]
   29626:	785b      	ldrb	r3, [r3, #1]
   29628:	2200      	movs	r2, #0
   2962a:	2100      	movs	r1, #0
   2962c:	0018      	movs	r0, r3
   2962e:	4b15      	ldr	r3, [pc, #84]	; (29684 <sync+0x194>)
   29630:	4798      	blx	r3
   29632:	1e03      	subs	r3, r0, #0
   29634:	d003      	beq.n	2963e <sync+0x14e>
   29636:	230f      	movs	r3, #15
   29638:	18fb      	adds	r3, r7, r3
   2963a:	2201      	movs	r2, #1
   2963c:	701a      	strb	r2, [r3, #0]
   2963e:	230f      	movs	r3, #15
   29640:	18fb      	adds	r3, r7, r3
   29642:	781b      	ldrb	r3, [r3, #0]
   29644:	0018      	movs	r0, r3
   29646:	46bd      	mov	sp, r7
   29648:	b005      	add	sp, #20
   2964a:	bd90      	pop	{r4, r7, pc}
   2964c:	00029429 	.word	0x00029429
   29650:	0002937d 	.word	0x0002937d
   29654:	0000022e 	.word	0x0000022e
   29658:	0000022f 	.word	0x0000022f
   2965c:	00000215 	.word	0x00000215
   29660:	00000216 	.word	0x00000216
   29664:	00000217 	.word	0x00000217
   29668:	00000219 	.word	0x00000219
   2966c:	0000021a 	.word	0x0000021a
   29670:	0000021b 	.word	0x0000021b
   29674:	0000021d 	.word	0x0000021d
   29678:	0000021e 	.word	0x0000021e
   2967c:	0000021f 	.word	0x0000021f
   29680:	00029115 	.word	0x00029115
   29684:	000291ed 	.word	0x000291ed

00029688 <clust2sect>:
   29688:	b580      	push	{r7, lr}
   2968a:	b082      	sub	sp, #8
   2968c:	af00      	add	r7, sp, #0
   2968e:	6078      	str	r0, [r7, #4]
   29690:	6039      	str	r1, [r7, #0]
   29692:	683b      	ldr	r3, [r7, #0]
   29694:	3b02      	subs	r3, #2
   29696:	603b      	str	r3, [r7, #0]
   29698:	687b      	ldr	r3, [r7, #4]
   2969a:	699b      	ldr	r3, [r3, #24]
   2969c:	1e9a      	subs	r2, r3, #2
   2969e:	683b      	ldr	r3, [r7, #0]
   296a0:	429a      	cmp	r2, r3
   296a2:	d801      	bhi.n	296a8 <clust2sect+0x20>
   296a4:	2300      	movs	r3, #0
   296a6:	e007      	b.n	296b8 <clust2sect+0x30>
   296a8:	687b      	ldr	r3, [r7, #4]
   296aa:	789b      	ldrb	r3, [r3, #2]
   296ac:	001a      	movs	r2, r3
   296ae:	683b      	ldr	r3, [r7, #0]
   296b0:	435a      	muls	r2, r3
   296b2:	687b      	ldr	r3, [r7, #4]
   296b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   296b6:	18d3      	adds	r3, r2, r3
   296b8:	0018      	movs	r0, r3
   296ba:	46bd      	mov	sp, r7
   296bc:	b002      	add	sp, #8
   296be:	bd80      	pop	{r7, pc}

000296c0 <get_fat>:
   296c0:	b580      	push	{r7, lr}
   296c2:	b086      	sub	sp, #24
   296c4:	af00      	add	r7, sp, #0
   296c6:	6078      	str	r0, [r7, #4]
   296c8:	6039      	str	r1, [r7, #0]
   296ca:	683b      	ldr	r3, [r7, #0]
   296cc:	2b01      	cmp	r3, #1
   296ce:	d904      	bls.n	296da <get_fat+0x1a>
   296d0:	687b      	ldr	r3, [r7, #4]
   296d2:	699a      	ldr	r2, [r3, #24]
   296d4:	683b      	ldr	r3, [r7, #0]
   296d6:	429a      	cmp	r2, r3
   296d8:	d801      	bhi.n	296de <get_fat+0x1e>
   296da:	2301      	movs	r3, #1
   296dc:	e09f      	b.n	2981e <get_fat+0x15e>
   296de:	687b      	ldr	r3, [r7, #4]
   296e0:	781b      	ldrb	r3, [r3, #0]
   296e2:	2b02      	cmp	r3, #2
   296e4:	d048      	beq.n	29778 <get_fat+0xb8>
   296e6:	2b03      	cmp	r3, #3
   296e8:	d067      	beq.n	297ba <get_fat+0xfa>
   296ea:	2b01      	cmp	r3, #1
   296ec:	d000      	beq.n	296f0 <get_fat+0x30>
   296ee:	e094      	b.n	2981a <get_fat+0x15a>
   296f0:	683b      	ldr	r3, [r7, #0]
   296f2:	617b      	str	r3, [r7, #20]
   296f4:	697b      	ldr	r3, [r7, #20]
   296f6:	085b      	lsrs	r3, r3, #1
   296f8:	697a      	ldr	r2, [r7, #20]
   296fa:	18d3      	adds	r3, r2, r3
   296fc:	617b      	str	r3, [r7, #20]
   296fe:	687b      	ldr	r3, [r7, #4]
   29700:	6a1a      	ldr	r2, [r3, #32]
   29702:	697b      	ldr	r3, [r7, #20]
   29704:	0a5b      	lsrs	r3, r3, #9
   29706:	18d2      	adds	r2, r2, r3
   29708:	687b      	ldr	r3, [r7, #4]
   2970a:	0011      	movs	r1, r2
   2970c:	0018      	movs	r0, r3
   2970e:	4b46      	ldr	r3, [pc, #280]	; (29828 <get_fat+0x168>)
   29710:	4798      	blx	r3
   29712:	1e03      	subs	r3, r0, #0
   29714:	d000      	beq.n	29718 <get_fat+0x58>
   29716:	e079      	b.n	2980c <get_fat+0x14c>
   29718:	697b      	ldr	r3, [r7, #20]
   2971a:	05db      	lsls	r3, r3, #23
   2971c:	0ddb      	lsrs	r3, r3, #23
   2971e:	687a      	ldr	r2, [r7, #4]
   29720:	2130      	movs	r1, #48	; 0x30
   29722:	18d3      	adds	r3, r2, r3
   29724:	185b      	adds	r3, r3, r1
   29726:	781b      	ldrb	r3, [r3, #0]
   29728:	613b      	str	r3, [r7, #16]
   2972a:	697b      	ldr	r3, [r7, #20]
   2972c:	3301      	adds	r3, #1
   2972e:	617b      	str	r3, [r7, #20]
   29730:	687b      	ldr	r3, [r7, #4]
   29732:	6a1a      	ldr	r2, [r3, #32]
   29734:	697b      	ldr	r3, [r7, #20]
   29736:	0a5b      	lsrs	r3, r3, #9
   29738:	18d2      	adds	r2, r2, r3
   2973a:	687b      	ldr	r3, [r7, #4]
   2973c:	0011      	movs	r1, r2
   2973e:	0018      	movs	r0, r3
   29740:	4b39      	ldr	r3, [pc, #228]	; (29828 <get_fat+0x168>)
   29742:	4798      	blx	r3
   29744:	1e03      	subs	r3, r0, #0
   29746:	d163      	bne.n	29810 <get_fat+0x150>
   29748:	697b      	ldr	r3, [r7, #20]
   2974a:	05db      	lsls	r3, r3, #23
   2974c:	0ddb      	lsrs	r3, r3, #23
   2974e:	687a      	ldr	r2, [r7, #4]
   29750:	2130      	movs	r1, #48	; 0x30
   29752:	18d3      	adds	r3, r2, r3
   29754:	185b      	adds	r3, r3, r1
   29756:	781b      	ldrb	r3, [r3, #0]
   29758:	021b      	lsls	r3, r3, #8
   2975a:	001a      	movs	r2, r3
   2975c:	693b      	ldr	r3, [r7, #16]
   2975e:	4313      	orrs	r3, r2
   29760:	613b      	str	r3, [r7, #16]
   29762:	683b      	ldr	r3, [r7, #0]
   29764:	2201      	movs	r2, #1
   29766:	4013      	ands	r3, r2
   29768:	d002      	beq.n	29770 <get_fat+0xb0>
   2976a:	693b      	ldr	r3, [r7, #16]
   2976c:	091b      	lsrs	r3, r3, #4
   2976e:	e056      	b.n	2981e <get_fat+0x15e>
   29770:	693b      	ldr	r3, [r7, #16]
   29772:	051b      	lsls	r3, r3, #20
   29774:	0d1b      	lsrs	r3, r3, #20
   29776:	e052      	b.n	2981e <get_fat+0x15e>
   29778:	687b      	ldr	r3, [r7, #4]
   2977a:	6a1a      	ldr	r2, [r3, #32]
   2977c:	683b      	ldr	r3, [r7, #0]
   2977e:	0a1b      	lsrs	r3, r3, #8
   29780:	18d2      	adds	r2, r2, r3
   29782:	687b      	ldr	r3, [r7, #4]
   29784:	0011      	movs	r1, r2
   29786:	0018      	movs	r0, r3
   29788:	4b27      	ldr	r3, [pc, #156]	; (29828 <get_fat+0x168>)
   2978a:	4798      	blx	r3
   2978c:	1e03      	subs	r3, r0, #0
   2978e:	d141      	bne.n	29814 <get_fat+0x154>
   29790:	683b      	ldr	r3, [r7, #0]
   29792:	005a      	lsls	r2, r3, #1
   29794:	23ff      	movs	r3, #255	; 0xff
   29796:	005b      	lsls	r3, r3, #1
   29798:	4013      	ands	r3, r2
   2979a:	3330      	adds	r3, #48	; 0x30
   2979c:	687a      	ldr	r2, [r7, #4]
   2979e:	18d3      	adds	r3, r2, r3
   297a0:	60fb      	str	r3, [r7, #12]
   297a2:	68fb      	ldr	r3, [r7, #12]
   297a4:	3301      	adds	r3, #1
   297a6:	781b      	ldrb	r3, [r3, #0]
   297a8:	021b      	lsls	r3, r3, #8
   297aa:	b21a      	sxth	r2, r3
   297ac:	68fb      	ldr	r3, [r7, #12]
   297ae:	781b      	ldrb	r3, [r3, #0]
   297b0:	b21b      	sxth	r3, r3
   297b2:	4313      	orrs	r3, r2
   297b4:	b21b      	sxth	r3, r3
   297b6:	b29b      	uxth	r3, r3
   297b8:	e031      	b.n	2981e <get_fat+0x15e>
   297ba:	687b      	ldr	r3, [r7, #4]
   297bc:	6a1a      	ldr	r2, [r3, #32]
   297be:	683b      	ldr	r3, [r7, #0]
   297c0:	09db      	lsrs	r3, r3, #7
   297c2:	18d2      	adds	r2, r2, r3
   297c4:	687b      	ldr	r3, [r7, #4]
   297c6:	0011      	movs	r1, r2
   297c8:	0018      	movs	r0, r3
   297ca:	4b17      	ldr	r3, [pc, #92]	; (29828 <get_fat+0x168>)
   297cc:	4798      	blx	r3
   297ce:	1e03      	subs	r3, r0, #0
   297d0:	d122      	bne.n	29818 <get_fat+0x158>
   297d2:	683b      	ldr	r3, [r7, #0]
   297d4:	009a      	lsls	r2, r3, #2
   297d6:	23fe      	movs	r3, #254	; 0xfe
   297d8:	005b      	lsls	r3, r3, #1
   297da:	4013      	ands	r3, r2
   297dc:	3330      	adds	r3, #48	; 0x30
   297de:	687a      	ldr	r2, [r7, #4]
   297e0:	18d3      	adds	r3, r2, r3
   297e2:	60fb      	str	r3, [r7, #12]
   297e4:	68fb      	ldr	r3, [r7, #12]
   297e6:	3303      	adds	r3, #3
   297e8:	781b      	ldrb	r3, [r3, #0]
   297ea:	061a      	lsls	r2, r3, #24
   297ec:	68fb      	ldr	r3, [r7, #12]
   297ee:	3302      	adds	r3, #2
   297f0:	781b      	ldrb	r3, [r3, #0]
   297f2:	041b      	lsls	r3, r3, #16
   297f4:	4313      	orrs	r3, r2
   297f6:	68fa      	ldr	r2, [r7, #12]
   297f8:	3201      	adds	r2, #1
   297fa:	7812      	ldrb	r2, [r2, #0]
   297fc:	0212      	lsls	r2, r2, #8
   297fe:	4313      	orrs	r3, r2
   29800:	68fa      	ldr	r2, [r7, #12]
   29802:	7812      	ldrb	r2, [r2, #0]
   29804:	4313      	orrs	r3, r2
   29806:	011b      	lsls	r3, r3, #4
   29808:	091b      	lsrs	r3, r3, #4
   2980a:	e008      	b.n	2981e <get_fat+0x15e>
   2980c:	46c0      	nop			; (mov r8, r8)
   2980e:	e004      	b.n	2981a <get_fat+0x15a>
   29810:	46c0      	nop			; (mov r8, r8)
   29812:	e002      	b.n	2981a <get_fat+0x15a>
   29814:	46c0      	nop			; (mov r8, r8)
   29816:	e000      	b.n	2981a <get_fat+0x15a>
   29818:	46c0      	nop			; (mov r8, r8)
   2981a:	2301      	movs	r3, #1
   2981c:	425b      	negs	r3, r3
   2981e:	0018      	movs	r0, r3
   29820:	46bd      	mov	sp, r7
   29822:	b006      	add	sp, #24
   29824:	bd80      	pop	{r7, pc}
   29826:	46c0      	nop			; (mov r8, r8)
   29828:	00029429 	.word	0x00029429

0002982c <put_fat>:
   2982c:	b590      	push	{r4, r7, lr}
   2982e:	b089      	sub	sp, #36	; 0x24
   29830:	af00      	add	r7, sp, #0
   29832:	60f8      	str	r0, [r7, #12]
   29834:	60b9      	str	r1, [r7, #8]
   29836:	607a      	str	r2, [r7, #4]
   29838:	68bb      	ldr	r3, [r7, #8]
   2983a:	2b01      	cmp	r3, #1
   2983c:	d904      	bls.n	29848 <put_fat+0x1c>
   2983e:	68fb      	ldr	r3, [r7, #12]
   29840:	699a      	ldr	r2, [r3, #24]
   29842:	68bb      	ldr	r3, [r7, #8]
   29844:	429a      	cmp	r2, r3
   29846:	d804      	bhi.n	29852 <put_fat+0x26>
   29848:	231f      	movs	r3, #31
   2984a:	18fb      	adds	r3, r7, r3
   2984c:	2202      	movs	r2, #2
   2984e:	701a      	strb	r2, [r3, #0]
   29850:	e100      	b.n	29a54 <put_fat+0x228>
   29852:	68fb      	ldr	r3, [r7, #12]
   29854:	781b      	ldrb	r3, [r3, #0]
   29856:	2b02      	cmp	r3, #2
   29858:	d100      	bne.n	2985c <put_fat+0x30>
   2985a:	e078      	b.n	2994e <put_fat+0x122>
   2985c:	2b03      	cmp	r3, #3
   2985e:	d100      	bne.n	29862 <put_fat+0x36>
   29860:	e09e      	b.n	299a0 <put_fat+0x174>
   29862:	2b01      	cmp	r3, #1
   29864:	d000      	beq.n	29868 <put_fat+0x3c>
   29866:	e0e6      	b.n	29a36 <put_fat+0x20a>
   29868:	68bb      	ldr	r3, [r7, #8]
   2986a:	61bb      	str	r3, [r7, #24]
   2986c:	69bb      	ldr	r3, [r7, #24]
   2986e:	085b      	lsrs	r3, r3, #1
   29870:	69ba      	ldr	r2, [r7, #24]
   29872:	18d3      	adds	r3, r2, r3
   29874:	61bb      	str	r3, [r7, #24]
   29876:	68fb      	ldr	r3, [r7, #12]
   29878:	6a1a      	ldr	r2, [r3, #32]
   2987a:	69bb      	ldr	r3, [r7, #24]
   2987c:	0a5b      	lsrs	r3, r3, #9
   2987e:	18d2      	adds	r2, r2, r3
   29880:	231f      	movs	r3, #31
   29882:	18fc      	adds	r4, r7, r3
   29884:	68fb      	ldr	r3, [r7, #12]
   29886:	0011      	movs	r1, r2
   29888:	0018      	movs	r0, r3
   2988a:	4b76      	ldr	r3, [pc, #472]	; (29a64 <put_fat+0x238>)
   2988c:	4798      	blx	r3
   2988e:	0003      	movs	r3, r0
   29890:	7023      	strb	r3, [r4, #0]
   29892:	231f      	movs	r3, #31
   29894:	18fb      	adds	r3, r7, r3
   29896:	781b      	ldrb	r3, [r3, #0]
   29898:	2b00      	cmp	r3, #0
   2989a:	d000      	beq.n	2989e <put_fat+0x72>
   2989c:	e0d0      	b.n	29a40 <put_fat+0x214>
   2989e:	69bb      	ldr	r3, [r7, #24]
   298a0:	05db      	lsls	r3, r3, #23
   298a2:	0ddb      	lsrs	r3, r3, #23
   298a4:	3330      	adds	r3, #48	; 0x30
   298a6:	68fa      	ldr	r2, [r7, #12]
   298a8:	18d3      	adds	r3, r2, r3
   298aa:	617b      	str	r3, [r7, #20]
   298ac:	68bb      	ldr	r3, [r7, #8]
   298ae:	2201      	movs	r2, #1
   298b0:	4013      	ands	r3, r2
   298b2:	d00d      	beq.n	298d0 <put_fat+0xa4>
   298b4:	697b      	ldr	r3, [r7, #20]
   298b6:	781b      	ldrb	r3, [r3, #0]
   298b8:	b25b      	sxtb	r3, r3
   298ba:	220f      	movs	r2, #15
   298bc:	4013      	ands	r3, r2
   298be:	b25a      	sxtb	r2, r3
   298c0:	687b      	ldr	r3, [r7, #4]
   298c2:	b2db      	uxtb	r3, r3
   298c4:	011b      	lsls	r3, r3, #4
   298c6:	b25b      	sxtb	r3, r3
   298c8:	4313      	orrs	r3, r2
   298ca:	b25b      	sxtb	r3, r3
   298cc:	b2db      	uxtb	r3, r3
   298ce:	e001      	b.n	298d4 <put_fat+0xa8>
   298d0:	687b      	ldr	r3, [r7, #4]
   298d2:	b2db      	uxtb	r3, r3
   298d4:	697a      	ldr	r2, [r7, #20]
   298d6:	7013      	strb	r3, [r2, #0]
   298d8:	69bb      	ldr	r3, [r7, #24]
   298da:	3301      	adds	r3, #1
   298dc:	61bb      	str	r3, [r7, #24]
   298de:	68fb      	ldr	r3, [r7, #12]
   298e0:	2201      	movs	r2, #1
   298e2:	711a      	strb	r2, [r3, #4]
   298e4:	68fb      	ldr	r3, [r7, #12]
   298e6:	6a1a      	ldr	r2, [r3, #32]
   298e8:	69bb      	ldr	r3, [r7, #24]
   298ea:	0a5b      	lsrs	r3, r3, #9
   298ec:	18d2      	adds	r2, r2, r3
   298ee:	231f      	movs	r3, #31
   298f0:	18fc      	adds	r4, r7, r3
   298f2:	68fb      	ldr	r3, [r7, #12]
   298f4:	0011      	movs	r1, r2
   298f6:	0018      	movs	r0, r3
   298f8:	4b5a      	ldr	r3, [pc, #360]	; (29a64 <put_fat+0x238>)
   298fa:	4798      	blx	r3
   298fc:	0003      	movs	r3, r0
   298fe:	7023      	strb	r3, [r4, #0]
   29900:	231f      	movs	r3, #31
   29902:	18fb      	adds	r3, r7, r3
   29904:	781b      	ldrb	r3, [r3, #0]
   29906:	2b00      	cmp	r3, #0
   29908:	d000      	beq.n	2990c <put_fat+0xe0>
   2990a:	e09b      	b.n	29a44 <put_fat+0x218>
   2990c:	69bb      	ldr	r3, [r7, #24]
   2990e:	05db      	lsls	r3, r3, #23
   29910:	0ddb      	lsrs	r3, r3, #23
   29912:	3330      	adds	r3, #48	; 0x30
   29914:	68fa      	ldr	r2, [r7, #12]
   29916:	18d3      	adds	r3, r2, r3
   29918:	617b      	str	r3, [r7, #20]
   2991a:	68bb      	ldr	r3, [r7, #8]
   2991c:	2201      	movs	r2, #1
   2991e:	4013      	ands	r3, r2
   29920:	d003      	beq.n	2992a <put_fat+0xfe>
   29922:	687b      	ldr	r3, [r7, #4]
   29924:	091b      	lsrs	r3, r3, #4
   29926:	b2db      	uxtb	r3, r3
   29928:	e00e      	b.n	29948 <put_fat+0x11c>
   2992a:	697b      	ldr	r3, [r7, #20]
   2992c:	781b      	ldrb	r3, [r3, #0]
   2992e:	b25b      	sxtb	r3, r3
   29930:	220f      	movs	r2, #15
   29932:	4393      	bics	r3, r2
   29934:	b25a      	sxtb	r2, r3
   29936:	687b      	ldr	r3, [r7, #4]
   29938:	0a1b      	lsrs	r3, r3, #8
   2993a:	b25b      	sxtb	r3, r3
   2993c:	210f      	movs	r1, #15
   2993e:	400b      	ands	r3, r1
   29940:	b25b      	sxtb	r3, r3
   29942:	4313      	orrs	r3, r2
   29944:	b25b      	sxtb	r3, r3
   29946:	b2db      	uxtb	r3, r3
   29948:	697a      	ldr	r2, [r7, #20]
   2994a:	7013      	strb	r3, [r2, #0]
   2994c:	e07f      	b.n	29a4e <put_fat+0x222>
   2994e:	68fb      	ldr	r3, [r7, #12]
   29950:	6a1a      	ldr	r2, [r3, #32]
   29952:	68bb      	ldr	r3, [r7, #8]
   29954:	0a1b      	lsrs	r3, r3, #8
   29956:	18d2      	adds	r2, r2, r3
   29958:	231f      	movs	r3, #31
   2995a:	18fc      	adds	r4, r7, r3
   2995c:	68fb      	ldr	r3, [r7, #12]
   2995e:	0011      	movs	r1, r2
   29960:	0018      	movs	r0, r3
   29962:	4b40      	ldr	r3, [pc, #256]	; (29a64 <put_fat+0x238>)
   29964:	4798      	blx	r3
   29966:	0003      	movs	r3, r0
   29968:	7023      	strb	r3, [r4, #0]
   2996a:	231f      	movs	r3, #31
   2996c:	18fb      	adds	r3, r7, r3
   2996e:	781b      	ldrb	r3, [r3, #0]
   29970:	2b00      	cmp	r3, #0
   29972:	d169      	bne.n	29a48 <put_fat+0x21c>
   29974:	68bb      	ldr	r3, [r7, #8]
   29976:	005a      	lsls	r2, r3, #1
   29978:	23ff      	movs	r3, #255	; 0xff
   2997a:	005b      	lsls	r3, r3, #1
   2997c:	4013      	ands	r3, r2
   2997e:	3330      	adds	r3, #48	; 0x30
   29980:	68fa      	ldr	r2, [r7, #12]
   29982:	18d3      	adds	r3, r2, r3
   29984:	617b      	str	r3, [r7, #20]
   29986:	687b      	ldr	r3, [r7, #4]
   29988:	b2da      	uxtb	r2, r3
   2998a:	697b      	ldr	r3, [r7, #20]
   2998c:	701a      	strb	r2, [r3, #0]
   2998e:	697b      	ldr	r3, [r7, #20]
   29990:	3301      	adds	r3, #1
   29992:	687a      	ldr	r2, [r7, #4]
   29994:	b292      	uxth	r2, r2
   29996:	0a12      	lsrs	r2, r2, #8
   29998:	b292      	uxth	r2, r2
   2999a:	b2d2      	uxtb	r2, r2
   2999c:	701a      	strb	r2, [r3, #0]
   2999e:	e056      	b.n	29a4e <put_fat+0x222>
   299a0:	68fb      	ldr	r3, [r7, #12]
   299a2:	6a1a      	ldr	r2, [r3, #32]
   299a4:	68bb      	ldr	r3, [r7, #8]
   299a6:	09db      	lsrs	r3, r3, #7
   299a8:	18d2      	adds	r2, r2, r3
   299aa:	231f      	movs	r3, #31
   299ac:	18fc      	adds	r4, r7, r3
   299ae:	68fb      	ldr	r3, [r7, #12]
   299b0:	0011      	movs	r1, r2
   299b2:	0018      	movs	r0, r3
   299b4:	4b2b      	ldr	r3, [pc, #172]	; (29a64 <put_fat+0x238>)
   299b6:	4798      	blx	r3
   299b8:	0003      	movs	r3, r0
   299ba:	7023      	strb	r3, [r4, #0]
   299bc:	231f      	movs	r3, #31
   299be:	18fb      	adds	r3, r7, r3
   299c0:	781b      	ldrb	r3, [r3, #0]
   299c2:	2b00      	cmp	r3, #0
   299c4:	d142      	bne.n	29a4c <put_fat+0x220>
   299c6:	68bb      	ldr	r3, [r7, #8]
   299c8:	009a      	lsls	r2, r3, #2
   299ca:	23fe      	movs	r3, #254	; 0xfe
   299cc:	005b      	lsls	r3, r3, #1
   299ce:	4013      	ands	r3, r2
   299d0:	3330      	adds	r3, #48	; 0x30
   299d2:	68fa      	ldr	r2, [r7, #12]
   299d4:	18d3      	adds	r3, r2, r3
   299d6:	617b      	str	r3, [r7, #20]
   299d8:	697b      	ldr	r3, [r7, #20]
   299da:	3303      	adds	r3, #3
   299dc:	781b      	ldrb	r3, [r3, #0]
   299de:	061a      	lsls	r2, r3, #24
   299e0:	697b      	ldr	r3, [r7, #20]
   299e2:	3302      	adds	r3, #2
   299e4:	781b      	ldrb	r3, [r3, #0]
   299e6:	041b      	lsls	r3, r3, #16
   299e8:	4313      	orrs	r3, r2
   299ea:	697a      	ldr	r2, [r7, #20]
   299ec:	3201      	adds	r2, #1
   299ee:	7812      	ldrb	r2, [r2, #0]
   299f0:	0212      	lsls	r2, r2, #8
   299f2:	4313      	orrs	r3, r2
   299f4:	697a      	ldr	r2, [r7, #20]
   299f6:	7812      	ldrb	r2, [r2, #0]
   299f8:	4313      	orrs	r3, r2
   299fa:	0f1b      	lsrs	r3, r3, #28
   299fc:	071b      	lsls	r3, r3, #28
   299fe:	687a      	ldr	r2, [r7, #4]
   29a00:	4313      	orrs	r3, r2
   29a02:	607b      	str	r3, [r7, #4]
   29a04:	687b      	ldr	r3, [r7, #4]
   29a06:	b2da      	uxtb	r2, r3
   29a08:	697b      	ldr	r3, [r7, #20]
   29a0a:	701a      	strb	r2, [r3, #0]
   29a0c:	697b      	ldr	r3, [r7, #20]
   29a0e:	3301      	adds	r3, #1
   29a10:	687a      	ldr	r2, [r7, #4]
   29a12:	b292      	uxth	r2, r2
   29a14:	0a12      	lsrs	r2, r2, #8
   29a16:	b292      	uxth	r2, r2
   29a18:	b2d2      	uxtb	r2, r2
   29a1a:	701a      	strb	r2, [r3, #0]
   29a1c:	697b      	ldr	r3, [r7, #20]
   29a1e:	3302      	adds	r3, #2
   29a20:	687a      	ldr	r2, [r7, #4]
   29a22:	0c12      	lsrs	r2, r2, #16
   29a24:	b2d2      	uxtb	r2, r2
   29a26:	701a      	strb	r2, [r3, #0]
   29a28:	697b      	ldr	r3, [r7, #20]
   29a2a:	3303      	adds	r3, #3
   29a2c:	687a      	ldr	r2, [r7, #4]
   29a2e:	0e12      	lsrs	r2, r2, #24
   29a30:	b2d2      	uxtb	r2, r2
   29a32:	701a      	strb	r2, [r3, #0]
   29a34:	e00b      	b.n	29a4e <put_fat+0x222>
   29a36:	231f      	movs	r3, #31
   29a38:	18fb      	adds	r3, r7, r3
   29a3a:	2202      	movs	r2, #2
   29a3c:	701a      	strb	r2, [r3, #0]
   29a3e:	e006      	b.n	29a4e <put_fat+0x222>
   29a40:	46c0      	nop			; (mov r8, r8)
   29a42:	e004      	b.n	29a4e <put_fat+0x222>
   29a44:	46c0      	nop			; (mov r8, r8)
   29a46:	e002      	b.n	29a4e <put_fat+0x222>
   29a48:	46c0      	nop			; (mov r8, r8)
   29a4a:	e000      	b.n	29a4e <put_fat+0x222>
   29a4c:	46c0      	nop			; (mov r8, r8)
   29a4e:	68fb      	ldr	r3, [r7, #12]
   29a50:	2201      	movs	r2, #1
   29a52:	711a      	strb	r2, [r3, #4]
   29a54:	231f      	movs	r3, #31
   29a56:	18fb      	adds	r3, r7, r3
   29a58:	781b      	ldrb	r3, [r3, #0]
   29a5a:	0018      	movs	r0, r3
   29a5c:	46bd      	mov	sp, r7
   29a5e:	b009      	add	sp, #36	; 0x24
   29a60:	bd90      	pop	{r4, r7, pc}
   29a62:	46c0      	nop			; (mov r8, r8)
   29a64:	00029429 	.word	0x00029429

00029a68 <remove_chain>:
   29a68:	b590      	push	{r4, r7, lr}
   29a6a:	b085      	sub	sp, #20
   29a6c:	af00      	add	r7, sp, #0
   29a6e:	6078      	str	r0, [r7, #4]
   29a70:	6039      	str	r1, [r7, #0]
   29a72:	683b      	ldr	r3, [r7, #0]
   29a74:	2b01      	cmp	r3, #1
   29a76:	d904      	bls.n	29a82 <remove_chain+0x1a>
   29a78:	687b      	ldr	r3, [r7, #4]
   29a7a:	699a      	ldr	r2, [r3, #24]
   29a7c:	683b      	ldr	r3, [r7, #0]
   29a7e:	429a      	cmp	r2, r3
   29a80:	d804      	bhi.n	29a8c <remove_chain+0x24>
   29a82:	230f      	movs	r3, #15
   29a84:	18fb      	adds	r3, r7, r3
   29a86:	2202      	movs	r2, #2
   29a88:	701a      	strb	r2, [r3, #0]
   29a8a:	e045      	b.n	29b18 <remove_chain+0xb0>
   29a8c:	230f      	movs	r3, #15
   29a8e:	18fb      	adds	r3, r7, r3
   29a90:	2200      	movs	r2, #0
   29a92:	701a      	strb	r2, [r3, #0]
   29a94:	e037      	b.n	29b06 <remove_chain+0x9e>
   29a96:	683a      	ldr	r2, [r7, #0]
   29a98:	687b      	ldr	r3, [r7, #4]
   29a9a:	0011      	movs	r1, r2
   29a9c:	0018      	movs	r0, r3
   29a9e:	4b22      	ldr	r3, [pc, #136]	; (29b28 <remove_chain+0xc0>)
   29aa0:	4798      	blx	r3
   29aa2:	0003      	movs	r3, r0
   29aa4:	60bb      	str	r3, [r7, #8]
   29aa6:	68bb      	ldr	r3, [r7, #8]
   29aa8:	2b00      	cmp	r3, #0
   29aaa:	d032      	beq.n	29b12 <remove_chain+0xaa>
   29aac:	68bb      	ldr	r3, [r7, #8]
   29aae:	2b01      	cmp	r3, #1
   29ab0:	d104      	bne.n	29abc <remove_chain+0x54>
   29ab2:	230f      	movs	r3, #15
   29ab4:	18fb      	adds	r3, r7, r3
   29ab6:	2202      	movs	r2, #2
   29ab8:	701a      	strb	r2, [r3, #0]
   29aba:	e02d      	b.n	29b18 <remove_chain+0xb0>
   29abc:	68bb      	ldr	r3, [r7, #8]
   29abe:	3301      	adds	r3, #1
   29ac0:	d104      	bne.n	29acc <remove_chain+0x64>
   29ac2:	230f      	movs	r3, #15
   29ac4:	18fb      	adds	r3, r7, r3
   29ac6:	2201      	movs	r2, #1
   29ac8:	701a      	strb	r2, [r3, #0]
   29aca:	e025      	b.n	29b18 <remove_chain+0xb0>
   29acc:	230f      	movs	r3, #15
   29ace:	18fc      	adds	r4, r7, r3
   29ad0:	6839      	ldr	r1, [r7, #0]
   29ad2:	687b      	ldr	r3, [r7, #4]
   29ad4:	2200      	movs	r2, #0
   29ad6:	0018      	movs	r0, r3
   29ad8:	4b14      	ldr	r3, [pc, #80]	; (29b2c <remove_chain+0xc4>)
   29ada:	4798      	blx	r3
   29adc:	0003      	movs	r3, r0
   29ade:	7023      	strb	r3, [r4, #0]
   29ae0:	230f      	movs	r3, #15
   29ae2:	18fb      	adds	r3, r7, r3
   29ae4:	781b      	ldrb	r3, [r3, #0]
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	d115      	bne.n	29b16 <remove_chain+0xae>
   29aea:	687b      	ldr	r3, [r7, #4]
   29aec:	691b      	ldr	r3, [r3, #16]
   29aee:	3301      	adds	r3, #1
   29af0:	d007      	beq.n	29b02 <remove_chain+0x9a>
   29af2:	687b      	ldr	r3, [r7, #4]
   29af4:	691b      	ldr	r3, [r3, #16]
   29af6:	1c5a      	adds	r2, r3, #1
   29af8:	687b      	ldr	r3, [r7, #4]
   29afa:	611a      	str	r2, [r3, #16]
   29afc:	687b      	ldr	r3, [r7, #4]
   29afe:	2201      	movs	r2, #1
   29b00:	715a      	strb	r2, [r3, #5]
   29b02:	68bb      	ldr	r3, [r7, #8]
   29b04:	603b      	str	r3, [r7, #0]
   29b06:	687b      	ldr	r3, [r7, #4]
   29b08:	699a      	ldr	r2, [r3, #24]
   29b0a:	683b      	ldr	r3, [r7, #0]
   29b0c:	429a      	cmp	r2, r3
   29b0e:	d8c2      	bhi.n	29a96 <remove_chain+0x2e>
   29b10:	e002      	b.n	29b18 <remove_chain+0xb0>
   29b12:	46c0      	nop			; (mov r8, r8)
   29b14:	e000      	b.n	29b18 <remove_chain+0xb0>
   29b16:	46c0      	nop			; (mov r8, r8)
   29b18:	230f      	movs	r3, #15
   29b1a:	18fb      	adds	r3, r7, r3
   29b1c:	781b      	ldrb	r3, [r3, #0]
   29b1e:	0018      	movs	r0, r3
   29b20:	46bd      	mov	sp, r7
   29b22:	b005      	add	sp, #20
   29b24:	bd90      	pop	{r4, r7, pc}
   29b26:	46c0      	nop			; (mov r8, r8)
   29b28:	000296c1 	.word	0x000296c1
   29b2c:	0002982d 	.word	0x0002982d

00029b30 <create_chain>:
   29b30:	b590      	push	{r4, r7, lr}
   29b32:	b087      	sub	sp, #28
   29b34:	af00      	add	r7, sp, #0
   29b36:	6078      	str	r0, [r7, #4]
   29b38:	6039      	str	r1, [r7, #0]
   29b3a:	683b      	ldr	r3, [r7, #0]
   29b3c:	2b00      	cmp	r3, #0
   29b3e:	d10d      	bne.n	29b5c <create_chain+0x2c>
   29b40:	687b      	ldr	r3, [r7, #4]
   29b42:	68db      	ldr	r3, [r3, #12]
   29b44:	613b      	str	r3, [r7, #16]
   29b46:	693b      	ldr	r3, [r7, #16]
   29b48:	2b00      	cmp	r3, #0
   29b4a:	d004      	beq.n	29b56 <create_chain+0x26>
   29b4c:	687b      	ldr	r3, [r7, #4]
   29b4e:	699a      	ldr	r2, [r3, #24]
   29b50:	693b      	ldr	r3, [r7, #16]
   29b52:	429a      	cmp	r2, r3
   29b54:	d818      	bhi.n	29b88 <create_chain+0x58>
   29b56:	2301      	movs	r3, #1
   29b58:	613b      	str	r3, [r7, #16]
   29b5a:	e015      	b.n	29b88 <create_chain+0x58>
   29b5c:	683a      	ldr	r2, [r7, #0]
   29b5e:	687b      	ldr	r3, [r7, #4]
   29b60:	0011      	movs	r1, r2
   29b62:	0018      	movs	r0, r3
   29b64:	4b3e      	ldr	r3, [pc, #248]	; (29c60 <create_chain+0x130>)
   29b66:	4798      	blx	r3
   29b68:	0003      	movs	r3, r0
   29b6a:	60bb      	str	r3, [r7, #8]
   29b6c:	68bb      	ldr	r3, [r7, #8]
   29b6e:	2b01      	cmp	r3, #1
   29b70:	d801      	bhi.n	29b76 <create_chain+0x46>
   29b72:	2301      	movs	r3, #1
   29b74:	e070      	b.n	29c58 <create_chain+0x128>
   29b76:	687b      	ldr	r3, [r7, #4]
   29b78:	699a      	ldr	r2, [r3, #24]
   29b7a:	68bb      	ldr	r3, [r7, #8]
   29b7c:	429a      	cmp	r2, r3
   29b7e:	d901      	bls.n	29b84 <create_chain+0x54>
   29b80:	68bb      	ldr	r3, [r7, #8]
   29b82:	e069      	b.n	29c58 <create_chain+0x128>
   29b84:	683b      	ldr	r3, [r7, #0]
   29b86:	613b      	str	r3, [r7, #16]
   29b88:	693b      	ldr	r3, [r7, #16]
   29b8a:	617b      	str	r3, [r7, #20]
   29b8c:	697b      	ldr	r3, [r7, #20]
   29b8e:	3301      	adds	r3, #1
   29b90:	617b      	str	r3, [r7, #20]
   29b92:	687b      	ldr	r3, [r7, #4]
   29b94:	699a      	ldr	r2, [r3, #24]
   29b96:	697b      	ldr	r3, [r7, #20]
   29b98:	429a      	cmp	r2, r3
   29b9a:	d807      	bhi.n	29bac <create_chain+0x7c>
   29b9c:	2302      	movs	r3, #2
   29b9e:	617b      	str	r3, [r7, #20]
   29ba0:	697a      	ldr	r2, [r7, #20]
   29ba2:	693b      	ldr	r3, [r7, #16]
   29ba4:	429a      	cmp	r2, r3
   29ba6:	d901      	bls.n	29bac <create_chain+0x7c>
   29ba8:	2300      	movs	r3, #0
   29baa:	e055      	b.n	29c58 <create_chain+0x128>
   29bac:	697a      	ldr	r2, [r7, #20]
   29bae:	687b      	ldr	r3, [r7, #4]
   29bb0:	0011      	movs	r1, r2
   29bb2:	0018      	movs	r0, r3
   29bb4:	4b2a      	ldr	r3, [pc, #168]	; (29c60 <create_chain+0x130>)
   29bb6:	4798      	blx	r3
   29bb8:	0003      	movs	r3, r0
   29bba:	60bb      	str	r3, [r7, #8]
   29bbc:	68bb      	ldr	r3, [r7, #8]
   29bbe:	2b00      	cmp	r3, #0
   29bc0:	d00d      	beq.n	29bde <create_chain+0xae>
   29bc2:	68bb      	ldr	r3, [r7, #8]
   29bc4:	3301      	adds	r3, #1
   29bc6:	d002      	beq.n	29bce <create_chain+0x9e>
   29bc8:	68bb      	ldr	r3, [r7, #8]
   29bca:	2b01      	cmp	r3, #1
   29bcc:	d101      	bne.n	29bd2 <create_chain+0xa2>
   29bce:	68bb      	ldr	r3, [r7, #8]
   29bd0:	e042      	b.n	29c58 <create_chain+0x128>
   29bd2:	697a      	ldr	r2, [r7, #20]
   29bd4:	693b      	ldr	r3, [r7, #16]
   29bd6:	429a      	cmp	r2, r3
   29bd8:	d1d8      	bne.n	29b8c <create_chain+0x5c>
   29bda:	2300      	movs	r3, #0
   29bdc:	e03c      	b.n	29c58 <create_chain+0x128>
   29bde:	46c0      	nop			; (mov r8, r8)
   29be0:	230f      	movs	r3, #15
   29be2:	18fc      	adds	r4, r7, r3
   29be4:	4a1f      	ldr	r2, [pc, #124]	; (29c64 <create_chain+0x134>)
   29be6:	6979      	ldr	r1, [r7, #20]
   29be8:	687b      	ldr	r3, [r7, #4]
   29bea:	0018      	movs	r0, r3
   29bec:	4b1e      	ldr	r3, [pc, #120]	; (29c68 <create_chain+0x138>)
   29bee:	4798      	blx	r3
   29bf0:	0003      	movs	r3, r0
   29bf2:	7023      	strb	r3, [r4, #0]
   29bf4:	230f      	movs	r3, #15
   29bf6:	18fb      	adds	r3, r7, r3
   29bf8:	781b      	ldrb	r3, [r3, #0]
   29bfa:	2b00      	cmp	r3, #0
   29bfc:	d10c      	bne.n	29c18 <create_chain+0xe8>
   29bfe:	683b      	ldr	r3, [r7, #0]
   29c00:	2b00      	cmp	r3, #0
   29c02:	d009      	beq.n	29c18 <create_chain+0xe8>
   29c04:	230f      	movs	r3, #15
   29c06:	18fc      	adds	r4, r7, r3
   29c08:	697a      	ldr	r2, [r7, #20]
   29c0a:	6839      	ldr	r1, [r7, #0]
   29c0c:	687b      	ldr	r3, [r7, #4]
   29c0e:	0018      	movs	r0, r3
   29c10:	4b15      	ldr	r3, [pc, #84]	; (29c68 <create_chain+0x138>)
   29c12:	4798      	blx	r3
   29c14:	0003      	movs	r3, r0
   29c16:	7023      	strb	r3, [r4, #0]
   29c18:	230f      	movs	r3, #15
   29c1a:	18fb      	adds	r3, r7, r3
   29c1c:	781b      	ldrb	r3, [r3, #0]
   29c1e:	2b00      	cmp	r3, #0
   29c20:	d10f      	bne.n	29c42 <create_chain+0x112>
   29c22:	687b      	ldr	r3, [r7, #4]
   29c24:	697a      	ldr	r2, [r7, #20]
   29c26:	60da      	str	r2, [r3, #12]
   29c28:	687b      	ldr	r3, [r7, #4]
   29c2a:	691b      	ldr	r3, [r3, #16]
   29c2c:	3301      	adds	r3, #1
   29c2e:	d012      	beq.n	29c56 <create_chain+0x126>
   29c30:	687b      	ldr	r3, [r7, #4]
   29c32:	691b      	ldr	r3, [r3, #16]
   29c34:	1e5a      	subs	r2, r3, #1
   29c36:	687b      	ldr	r3, [r7, #4]
   29c38:	611a      	str	r2, [r3, #16]
   29c3a:	687b      	ldr	r3, [r7, #4]
   29c3c:	2201      	movs	r2, #1
   29c3e:	715a      	strb	r2, [r3, #5]
   29c40:	e009      	b.n	29c56 <create_chain+0x126>
   29c42:	230f      	movs	r3, #15
   29c44:	18fb      	adds	r3, r7, r3
   29c46:	781b      	ldrb	r3, [r3, #0]
   29c48:	2b01      	cmp	r3, #1
   29c4a:	d102      	bne.n	29c52 <create_chain+0x122>
   29c4c:	2301      	movs	r3, #1
   29c4e:	425b      	negs	r3, r3
   29c50:	e000      	b.n	29c54 <create_chain+0x124>
   29c52:	2301      	movs	r3, #1
   29c54:	617b      	str	r3, [r7, #20]
   29c56:	697b      	ldr	r3, [r7, #20]
   29c58:	0018      	movs	r0, r3
   29c5a:	46bd      	mov	sp, r7
   29c5c:	b007      	add	sp, #28
   29c5e:	bd90      	pop	{r4, r7, pc}
   29c60:	000296c1 	.word	0x000296c1
   29c64:	0fffffff 	.word	0x0fffffff
   29c68:	0002982d 	.word	0x0002982d

00029c6c <dir_sdi>:
   29c6c:	b580      	push	{r7, lr}
   29c6e:	b084      	sub	sp, #16
   29c70:	af00      	add	r7, sp, #0
   29c72:	6078      	str	r0, [r7, #4]
   29c74:	000a      	movs	r2, r1
   29c76:	1cbb      	adds	r3, r7, #2
   29c78:	801a      	strh	r2, [r3, #0]
   29c7a:	687b      	ldr	r3, [r7, #4]
   29c7c:	1cba      	adds	r2, r7, #2
   29c7e:	8812      	ldrh	r2, [r2, #0]
   29c80:	80da      	strh	r2, [r3, #6]
   29c82:	687b      	ldr	r3, [r7, #4]
   29c84:	689b      	ldr	r3, [r3, #8]
   29c86:	60fb      	str	r3, [r7, #12]
   29c88:	68fb      	ldr	r3, [r7, #12]
   29c8a:	2b01      	cmp	r3, #1
   29c8c:	d005      	beq.n	29c9a <dir_sdi+0x2e>
   29c8e:	687b      	ldr	r3, [r7, #4]
   29c90:	681b      	ldr	r3, [r3, #0]
   29c92:	699a      	ldr	r2, [r3, #24]
   29c94:	68fb      	ldr	r3, [r7, #12]
   29c96:	429a      	cmp	r2, r3
   29c98:	d801      	bhi.n	29c9e <dir_sdi+0x32>
   29c9a:	2302      	movs	r3, #2
   29c9c:	e075      	b.n	29d8a <dir_sdi+0x11e>
   29c9e:	68fb      	ldr	r3, [r7, #12]
   29ca0:	2b00      	cmp	r3, #0
   29ca2:	d108      	bne.n	29cb6 <dir_sdi+0x4a>
   29ca4:	687b      	ldr	r3, [r7, #4]
   29ca6:	681b      	ldr	r3, [r3, #0]
   29ca8:	781b      	ldrb	r3, [r3, #0]
   29caa:	2b03      	cmp	r3, #3
   29cac:	d103      	bne.n	29cb6 <dir_sdi+0x4a>
   29cae:	687b      	ldr	r3, [r7, #4]
   29cb0:	681b      	ldr	r3, [r3, #0]
   29cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29cb4:	60fb      	str	r3, [r7, #12]
   29cb6:	68fb      	ldr	r3, [r7, #12]
   29cb8:	2b00      	cmp	r3, #0
   29cba:	d116      	bne.n	29cea <dir_sdi+0x7e>
   29cbc:	687b      	ldr	r3, [r7, #4]
   29cbe:	68fa      	ldr	r2, [r7, #12]
   29cc0:	60da      	str	r2, [r3, #12]
   29cc2:	687b      	ldr	r3, [r7, #4]
   29cc4:	681b      	ldr	r3, [r3, #0]
   29cc6:	891b      	ldrh	r3, [r3, #8]
   29cc8:	1cba      	adds	r2, r7, #2
   29cca:	8812      	ldrh	r2, [r2, #0]
   29ccc:	429a      	cmp	r2, r3
   29cce:	d301      	bcc.n	29cd4 <dir_sdi+0x68>
   29cd0:	2302      	movs	r3, #2
   29cd2:	e05a      	b.n	29d8a <dir_sdi+0x11e>
   29cd4:	687b      	ldr	r3, [r7, #4]
   29cd6:	681b      	ldr	r3, [r3, #0]
   29cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29cda:	1cba      	adds	r2, r7, #2
   29cdc:	8812      	ldrh	r2, [r2, #0]
   29cde:	0912      	lsrs	r2, r2, #4
   29ce0:	b292      	uxth	r2, r2
   29ce2:	189a      	adds	r2, r3, r2
   29ce4:	687b      	ldr	r3, [r7, #4]
   29ce6:	611a      	str	r2, [r3, #16]
   29ce8:	e042      	b.n	29d70 <dir_sdi+0x104>
   29cea:	687b      	ldr	r3, [r7, #4]
   29cec:	681b      	ldr	r3, [r3, #0]
   29cee:	789b      	ldrb	r3, [r3, #2]
   29cf0:	b29a      	uxth	r2, r3
   29cf2:	230a      	movs	r3, #10
   29cf4:	18fb      	adds	r3, r7, r3
   29cf6:	0112      	lsls	r2, r2, #4
   29cf8:	801a      	strh	r2, [r3, #0]
   29cfa:	e020      	b.n	29d3e <dir_sdi+0xd2>
   29cfc:	687b      	ldr	r3, [r7, #4]
   29cfe:	681b      	ldr	r3, [r3, #0]
   29d00:	68fa      	ldr	r2, [r7, #12]
   29d02:	0011      	movs	r1, r2
   29d04:	0018      	movs	r0, r3
   29d06:	4b23      	ldr	r3, [pc, #140]	; (29d94 <dir_sdi+0x128>)
   29d08:	4798      	blx	r3
   29d0a:	0003      	movs	r3, r0
   29d0c:	60fb      	str	r3, [r7, #12]
   29d0e:	68fb      	ldr	r3, [r7, #12]
   29d10:	3301      	adds	r3, #1
   29d12:	d101      	bne.n	29d18 <dir_sdi+0xac>
   29d14:	2301      	movs	r3, #1
   29d16:	e038      	b.n	29d8a <dir_sdi+0x11e>
   29d18:	68fb      	ldr	r3, [r7, #12]
   29d1a:	2b01      	cmp	r3, #1
   29d1c:	d905      	bls.n	29d2a <dir_sdi+0xbe>
   29d1e:	687b      	ldr	r3, [r7, #4]
   29d20:	681b      	ldr	r3, [r3, #0]
   29d22:	699a      	ldr	r2, [r3, #24]
   29d24:	68fb      	ldr	r3, [r7, #12]
   29d26:	429a      	cmp	r2, r3
   29d28:	d801      	bhi.n	29d2e <dir_sdi+0xc2>
   29d2a:	2302      	movs	r3, #2
   29d2c:	e02d      	b.n	29d8a <dir_sdi+0x11e>
   29d2e:	1cbb      	adds	r3, r7, #2
   29d30:	1cb9      	adds	r1, r7, #2
   29d32:	220a      	movs	r2, #10
   29d34:	18ba      	adds	r2, r7, r2
   29d36:	8809      	ldrh	r1, [r1, #0]
   29d38:	8812      	ldrh	r2, [r2, #0]
   29d3a:	1a8a      	subs	r2, r1, r2
   29d3c:	801a      	strh	r2, [r3, #0]
   29d3e:	1cba      	adds	r2, r7, #2
   29d40:	230a      	movs	r3, #10
   29d42:	18fb      	adds	r3, r7, r3
   29d44:	8812      	ldrh	r2, [r2, #0]
   29d46:	881b      	ldrh	r3, [r3, #0]
   29d48:	429a      	cmp	r2, r3
   29d4a:	d2d7      	bcs.n	29cfc <dir_sdi+0x90>
   29d4c:	687b      	ldr	r3, [r7, #4]
   29d4e:	68fa      	ldr	r2, [r7, #12]
   29d50:	60da      	str	r2, [r3, #12]
   29d52:	687b      	ldr	r3, [r7, #4]
   29d54:	681b      	ldr	r3, [r3, #0]
   29d56:	68fa      	ldr	r2, [r7, #12]
   29d58:	0011      	movs	r1, r2
   29d5a:	0018      	movs	r0, r3
   29d5c:	4b0e      	ldr	r3, [pc, #56]	; (29d98 <dir_sdi+0x12c>)
   29d5e:	4798      	blx	r3
   29d60:	0002      	movs	r2, r0
   29d62:	1cbb      	adds	r3, r7, #2
   29d64:	881b      	ldrh	r3, [r3, #0]
   29d66:	091b      	lsrs	r3, r3, #4
   29d68:	b29b      	uxth	r3, r3
   29d6a:	18d2      	adds	r2, r2, r3
   29d6c:	687b      	ldr	r3, [r7, #4]
   29d6e:	611a      	str	r2, [r3, #16]
   29d70:	687b      	ldr	r3, [r7, #4]
   29d72:	681b      	ldr	r3, [r3, #0]
   29d74:	3330      	adds	r3, #48	; 0x30
   29d76:	001a      	movs	r2, r3
   29d78:	1cbb      	adds	r3, r7, #2
   29d7a:	881b      	ldrh	r3, [r3, #0]
   29d7c:	210f      	movs	r1, #15
   29d7e:	400b      	ands	r3, r1
   29d80:	015b      	lsls	r3, r3, #5
   29d82:	18d2      	adds	r2, r2, r3
   29d84:	687b      	ldr	r3, [r7, #4]
   29d86:	615a      	str	r2, [r3, #20]
   29d88:	2300      	movs	r3, #0
   29d8a:	0018      	movs	r0, r3
   29d8c:	46bd      	mov	sp, r7
   29d8e:	b004      	add	sp, #16
   29d90:	bd80      	pop	{r7, pc}
   29d92:	46c0      	nop			; (mov r8, r8)
   29d94:	000296c1 	.word	0x000296c1
   29d98:	00029689 	.word	0x00029689

00029d9c <dir_next>:
   29d9c:	b590      	push	{r4, r7, lr}
   29d9e:	b085      	sub	sp, #20
   29da0:	af00      	add	r7, sp, #0
   29da2:	6078      	str	r0, [r7, #4]
   29da4:	6039      	str	r1, [r7, #0]
   29da6:	687b      	ldr	r3, [r7, #4]
   29da8:	88da      	ldrh	r2, [r3, #6]
   29daa:	2308      	movs	r3, #8
   29dac:	18fb      	adds	r3, r7, r3
   29dae:	3201      	adds	r2, #1
   29db0:	801a      	strh	r2, [r3, #0]
   29db2:	2308      	movs	r3, #8
   29db4:	18fb      	adds	r3, r7, r3
   29db6:	881b      	ldrh	r3, [r3, #0]
   29db8:	2b00      	cmp	r3, #0
   29dba:	d003      	beq.n	29dc4 <dir_next+0x28>
   29dbc:	687b      	ldr	r3, [r7, #4]
   29dbe:	691b      	ldr	r3, [r3, #16]
   29dc0:	2b00      	cmp	r3, #0
   29dc2:	d101      	bne.n	29dc8 <dir_next+0x2c>
   29dc4:	2304      	movs	r3, #4
   29dc6:	e0d2      	b.n	29f6e <dir_next+0x1d2>
   29dc8:	2308      	movs	r3, #8
   29dca:	18fb      	adds	r3, r7, r3
   29dcc:	881b      	ldrh	r3, [r3, #0]
   29dce:	220f      	movs	r2, #15
   29dd0:	4013      	ands	r3, r2
   29dd2:	b29b      	uxth	r3, r3
   29dd4:	2b00      	cmp	r3, #0
   29dd6:	d000      	beq.n	29dda <dir_next+0x3e>
   29dd8:	e0b6      	b.n	29f48 <dir_next+0x1ac>
   29dda:	687b      	ldr	r3, [r7, #4]
   29ddc:	691b      	ldr	r3, [r3, #16]
   29dde:	1c5a      	adds	r2, r3, #1
   29de0:	687b      	ldr	r3, [r7, #4]
   29de2:	611a      	str	r2, [r3, #16]
   29de4:	687b      	ldr	r3, [r7, #4]
   29de6:	68db      	ldr	r3, [r3, #12]
   29de8:	2b00      	cmp	r3, #0
   29dea:	d10a      	bne.n	29e02 <dir_next+0x66>
   29dec:	687b      	ldr	r3, [r7, #4]
   29dee:	681b      	ldr	r3, [r3, #0]
   29df0:	891b      	ldrh	r3, [r3, #8]
   29df2:	2208      	movs	r2, #8
   29df4:	18ba      	adds	r2, r7, r2
   29df6:	8812      	ldrh	r2, [r2, #0]
   29df8:	429a      	cmp	r2, r3
   29dfa:	d200      	bcs.n	29dfe <dir_next+0x62>
   29dfc:	e0a4      	b.n	29f48 <dir_next+0x1ac>
   29dfe:	2304      	movs	r3, #4
   29e00:	e0b5      	b.n	29f6e <dir_next+0x1d2>
   29e02:	2308      	movs	r3, #8
   29e04:	18fb      	adds	r3, r7, r3
   29e06:	881b      	ldrh	r3, [r3, #0]
   29e08:	091b      	lsrs	r3, r3, #4
   29e0a:	b29b      	uxth	r3, r3
   29e0c:	001a      	movs	r2, r3
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	681b      	ldr	r3, [r3, #0]
   29e12:	789b      	ldrb	r3, [r3, #2]
   29e14:	3b01      	subs	r3, #1
   29e16:	4013      	ands	r3, r2
   29e18:	d000      	beq.n	29e1c <dir_next+0x80>
   29e1a:	e095      	b.n	29f48 <dir_next+0x1ac>
   29e1c:	687b      	ldr	r3, [r7, #4]
   29e1e:	681a      	ldr	r2, [r3, #0]
   29e20:	687b      	ldr	r3, [r7, #4]
   29e22:	68db      	ldr	r3, [r3, #12]
   29e24:	0019      	movs	r1, r3
   29e26:	0010      	movs	r0, r2
   29e28:	4b53      	ldr	r3, [pc, #332]	; (29f78 <dir_next+0x1dc>)
   29e2a:	4798      	blx	r3
   29e2c:	0003      	movs	r3, r0
   29e2e:	60fb      	str	r3, [r7, #12]
   29e30:	68fb      	ldr	r3, [r7, #12]
   29e32:	2b01      	cmp	r3, #1
   29e34:	d801      	bhi.n	29e3a <dir_next+0x9e>
   29e36:	2302      	movs	r3, #2
   29e38:	e099      	b.n	29f6e <dir_next+0x1d2>
   29e3a:	68fb      	ldr	r3, [r7, #12]
   29e3c:	3301      	adds	r3, #1
   29e3e:	d101      	bne.n	29e44 <dir_next+0xa8>
   29e40:	2301      	movs	r3, #1
   29e42:	e094      	b.n	29f6e <dir_next+0x1d2>
   29e44:	687b      	ldr	r3, [r7, #4]
   29e46:	681b      	ldr	r3, [r3, #0]
   29e48:	699a      	ldr	r2, [r3, #24]
   29e4a:	68fb      	ldr	r3, [r7, #12]
   29e4c:	429a      	cmp	r2, r3
   29e4e:	d900      	bls.n	29e52 <dir_next+0xb6>
   29e50:	e06d      	b.n	29f2e <dir_next+0x192>
   29e52:	683b      	ldr	r3, [r7, #0]
   29e54:	2b00      	cmp	r3, #0
   29e56:	d101      	bne.n	29e5c <dir_next+0xc0>
   29e58:	2304      	movs	r3, #4
   29e5a:	e088      	b.n	29f6e <dir_next+0x1d2>
   29e5c:	687b      	ldr	r3, [r7, #4]
   29e5e:	681a      	ldr	r2, [r3, #0]
   29e60:	687b      	ldr	r3, [r7, #4]
   29e62:	68db      	ldr	r3, [r3, #12]
   29e64:	0019      	movs	r1, r3
   29e66:	0010      	movs	r0, r2
   29e68:	4b44      	ldr	r3, [pc, #272]	; (29f7c <dir_next+0x1e0>)
   29e6a:	4798      	blx	r3
   29e6c:	0003      	movs	r3, r0
   29e6e:	60fb      	str	r3, [r7, #12]
   29e70:	68fb      	ldr	r3, [r7, #12]
   29e72:	2b00      	cmp	r3, #0
   29e74:	d101      	bne.n	29e7a <dir_next+0xde>
   29e76:	2307      	movs	r3, #7
   29e78:	e079      	b.n	29f6e <dir_next+0x1d2>
   29e7a:	68fb      	ldr	r3, [r7, #12]
   29e7c:	2b01      	cmp	r3, #1
   29e7e:	d101      	bne.n	29e84 <dir_next+0xe8>
   29e80:	2302      	movs	r3, #2
   29e82:	e074      	b.n	29f6e <dir_next+0x1d2>
   29e84:	68fb      	ldr	r3, [r7, #12]
   29e86:	3301      	adds	r3, #1
   29e88:	d101      	bne.n	29e8e <dir_next+0xf2>
   29e8a:	2301      	movs	r3, #1
   29e8c:	e06f      	b.n	29f6e <dir_next+0x1d2>
   29e8e:	687b      	ldr	r3, [r7, #4]
   29e90:	681b      	ldr	r3, [r3, #0]
   29e92:	2100      	movs	r1, #0
   29e94:	0018      	movs	r0, r3
   29e96:	4b3a      	ldr	r3, [pc, #232]	; (29f80 <dir_next+0x1e4>)
   29e98:	4798      	blx	r3
   29e9a:	1e03      	subs	r3, r0, #0
   29e9c:	d001      	beq.n	29ea2 <dir_next+0x106>
   29e9e:	2301      	movs	r3, #1
   29ea0:	e065      	b.n	29f6e <dir_next+0x1d2>
   29ea2:	687b      	ldr	r3, [r7, #4]
   29ea4:	681b      	ldr	r3, [r3, #0]
   29ea6:	3330      	adds	r3, #48	; 0x30
   29ea8:	0018      	movs	r0, r3
   29eaa:	2380      	movs	r3, #128	; 0x80
   29eac:	009b      	lsls	r3, r3, #2
   29eae:	001a      	movs	r2, r3
   29eb0:	2100      	movs	r1, #0
   29eb2:	4b34      	ldr	r3, [pc, #208]	; (29f84 <dir_next+0x1e8>)
   29eb4:	4798      	blx	r3
   29eb6:	687b      	ldr	r3, [r7, #4]
   29eb8:	681c      	ldr	r4, [r3, #0]
   29eba:	687b      	ldr	r3, [r7, #4]
   29ebc:	681b      	ldr	r3, [r3, #0]
   29ebe:	68fa      	ldr	r2, [r7, #12]
   29ec0:	0011      	movs	r1, r2
   29ec2:	0018      	movs	r0, r3
   29ec4:	4b30      	ldr	r3, [pc, #192]	; (29f88 <dir_next+0x1ec>)
   29ec6:	4798      	blx	r3
   29ec8:	0003      	movs	r3, r0
   29eca:	62e3      	str	r3, [r4, #44]	; 0x2c
   29ecc:	230b      	movs	r3, #11
   29ece:	18fb      	adds	r3, r7, r3
   29ed0:	2200      	movs	r2, #0
   29ed2:	701a      	strb	r2, [r3, #0]
   29ed4:	e019      	b.n	29f0a <dir_next+0x16e>
   29ed6:	687b      	ldr	r3, [r7, #4]
   29ed8:	681b      	ldr	r3, [r3, #0]
   29eda:	2201      	movs	r2, #1
   29edc:	711a      	strb	r2, [r3, #4]
   29ede:	687b      	ldr	r3, [r7, #4]
   29ee0:	681b      	ldr	r3, [r3, #0]
   29ee2:	2100      	movs	r1, #0
   29ee4:	0018      	movs	r0, r3
   29ee6:	4b26      	ldr	r3, [pc, #152]	; (29f80 <dir_next+0x1e4>)
   29ee8:	4798      	blx	r3
   29eea:	1e03      	subs	r3, r0, #0
   29eec:	d001      	beq.n	29ef2 <dir_next+0x156>
   29eee:	2301      	movs	r3, #1
   29ef0:	e03d      	b.n	29f6e <dir_next+0x1d2>
   29ef2:	687b      	ldr	r3, [r7, #4]
   29ef4:	681b      	ldr	r3, [r3, #0]
   29ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   29ef8:	3201      	adds	r2, #1
   29efa:	62da      	str	r2, [r3, #44]	; 0x2c
   29efc:	230b      	movs	r3, #11
   29efe:	18fb      	adds	r3, r7, r3
   29f00:	781a      	ldrb	r2, [r3, #0]
   29f02:	230b      	movs	r3, #11
   29f04:	18fb      	adds	r3, r7, r3
   29f06:	3201      	adds	r2, #1
   29f08:	701a      	strb	r2, [r3, #0]
   29f0a:	687b      	ldr	r3, [r7, #4]
   29f0c:	681b      	ldr	r3, [r3, #0]
   29f0e:	789b      	ldrb	r3, [r3, #2]
   29f10:	220b      	movs	r2, #11
   29f12:	18ba      	adds	r2, r7, r2
   29f14:	7812      	ldrb	r2, [r2, #0]
   29f16:	429a      	cmp	r2, r3
   29f18:	d3dd      	bcc.n	29ed6 <dir_next+0x13a>
   29f1a:	687b      	ldr	r3, [r7, #4]
   29f1c:	681b      	ldr	r3, [r3, #0]
   29f1e:	687a      	ldr	r2, [r7, #4]
   29f20:	6812      	ldr	r2, [r2, #0]
   29f22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   29f24:	220b      	movs	r2, #11
   29f26:	18ba      	adds	r2, r7, r2
   29f28:	7812      	ldrb	r2, [r2, #0]
   29f2a:	1a8a      	subs	r2, r1, r2
   29f2c:	62da      	str	r2, [r3, #44]	; 0x2c
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	68fa      	ldr	r2, [r7, #12]
   29f32:	60da      	str	r2, [r3, #12]
   29f34:	687b      	ldr	r3, [r7, #4]
   29f36:	681b      	ldr	r3, [r3, #0]
   29f38:	68fa      	ldr	r2, [r7, #12]
   29f3a:	0011      	movs	r1, r2
   29f3c:	0018      	movs	r0, r3
   29f3e:	4b12      	ldr	r3, [pc, #72]	; (29f88 <dir_next+0x1ec>)
   29f40:	4798      	blx	r3
   29f42:	0002      	movs	r2, r0
   29f44:	687b      	ldr	r3, [r7, #4]
   29f46:	611a      	str	r2, [r3, #16]
   29f48:	687b      	ldr	r3, [r7, #4]
   29f4a:	2208      	movs	r2, #8
   29f4c:	18ba      	adds	r2, r7, r2
   29f4e:	8812      	ldrh	r2, [r2, #0]
   29f50:	80da      	strh	r2, [r3, #6]
   29f52:	687b      	ldr	r3, [r7, #4]
   29f54:	681b      	ldr	r3, [r3, #0]
   29f56:	3330      	adds	r3, #48	; 0x30
   29f58:	001a      	movs	r2, r3
   29f5a:	2308      	movs	r3, #8
   29f5c:	18fb      	adds	r3, r7, r3
   29f5e:	881b      	ldrh	r3, [r3, #0]
   29f60:	210f      	movs	r1, #15
   29f62:	400b      	ands	r3, r1
   29f64:	015b      	lsls	r3, r3, #5
   29f66:	18d2      	adds	r2, r2, r3
   29f68:	687b      	ldr	r3, [r7, #4]
   29f6a:	615a      	str	r2, [r3, #20]
   29f6c:	2300      	movs	r3, #0
   29f6e:	0018      	movs	r0, r3
   29f70:	46bd      	mov	sp, r7
   29f72:	b005      	add	sp, #20
   29f74:	bd90      	pop	{r4, r7, pc}
   29f76:	46c0      	nop			; (mov r8, r8)
   29f78:	000296c1 	.word	0x000296c1
   29f7c:	00029b31 	.word	0x00029b31
   29f80:	00029429 	.word	0x00029429
   29f84:	0002937d 	.word	0x0002937d
   29f88:	00029689 	.word	0x00029689

00029f8c <cmp_lfn>:
   29f8c:	b590      	push	{r4, r7, lr}
   29f8e:	b087      	sub	sp, #28
   29f90:	af00      	add	r7, sp, #0
   29f92:	6078      	str	r0, [r7, #4]
   29f94:	6039      	str	r1, [r7, #0]
   29f96:	683b      	ldr	r3, [r7, #0]
   29f98:	781b      	ldrb	r3, [r3, #0]
   29f9a:	001a      	movs	r2, r3
   29f9c:	2340      	movs	r3, #64	; 0x40
   29f9e:	439a      	bics	r2, r3
   29fa0:	0013      	movs	r3, r2
   29fa2:	1e5a      	subs	r2, r3, #1
   29fa4:	0013      	movs	r3, r2
   29fa6:	005b      	lsls	r3, r3, #1
   29fa8:	189b      	adds	r3, r3, r2
   29faa:	009b      	lsls	r3, r3, #2
   29fac:	189b      	adds	r3, r3, r2
   29fae:	617b      	str	r3, [r7, #20]
   29fb0:	2300      	movs	r3, #0
   29fb2:	613b      	str	r3, [r7, #16]
   29fb4:	230e      	movs	r3, #14
   29fb6:	18fb      	adds	r3, r7, r3
   29fb8:	2201      	movs	r2, #1
   29fba:	801a      	strh	r2, [r3, #0]
   29fbc:	4a31      	ldr	r2, [pc, #196]	; (2a084 <cmp_lfn+0xf8>)
   29fbe:	693b      	ldr	r3, [r7, #16]
   29fc0:	18d3      	adds	r3, r2, r3
   29fc2:	781b      	ldrb	r3, [r3, #0]
   29fc4:	3301      	adds	r3, #1
   29fc6:	683a      	ldr	r2, [r7, #0]
   29fc8:	18d3      	adds	r3, r2, r3
   29fca:	781b      	ldrb	r3, [r3, #0]
   29fcc:	021b      	lsls	r3, r3, #8
   29fce:	b21a      	sxth	r2, r3
   29fd0:	492c      	ldr	r1, [pc, #176]	; (2a084 <cmp_lfn+0xf8>)
   29fd2:	693b      	ldr	r3, [r7, #16]
   29fd4:	18cb      	adds	r3, r1, r3
   29fd6:	781b      	ldrb	r3, [r3, #0]
   29fd8:	0019      	movs	r1, r3
   29fda:	683b      	ldr	r3, [r7, #0]
   29fdc:	185b      	adds	r3, r3, r1
   29fde:	781b      	ldrb	r3, [r3, #0]
   29fe0:	b21b      	sxth	r3, r3
   29fe2:	4313      	orrs	r3, r2
   29fe4:	b21a      	sxth	r2, r3
   29fe6:	230c      	movs	r3, #12
   29fe8:	18fb      	adds	r3, r7, r3
   29fea:	801a      	strh	r2, [r3, #0]
   29fec:	230e      	movs	r3, #14
   29fee:	18fb      	adds	r3, r7, r3
   29ff0:	881b      	ldrh	r3, [r3, #0]
   29ff2:	2b00      	cmp	r3, #0
   29ff4:	d01f      	beq.n	2a036 <cmp_lfn+0xaa>
   29ff6:	230e      	movs	r3, #14
   29ff8:	18fc      	adds	r4, r7, r3
   29ffa:	230c      	movs	r3, #12
   29ffc:	18fb      	adds	r3, r7, r3
   29ffe:	881b      	ldrh	r3, [r3, #0]
   2a000:	0018      	movs	r0, r3
   2a002:	4b21      	ldr	r3, [pc, #132]	; (2a088 <cmp_lfn+0xfc>)
   2a004:	4798      	blx	r3
   2a006:	0003      	movs	r3, r0
   2a008:	8023      	strh	r3, [r4, #0]
   2a00a:	697b      	ldr	r3, [r7, #20]
   2a00c:	2bfe      	cmp	r3, #254	; 0xfe
   2a00e:	d810      	bhi.n	2a032 <cmp_lfn+0xa6>
   2a010:	697b      	ldr	r3, [r7, #20]
   2a012:	1c5a      	adds	r2, r3, #1
   2a014:	617a      	str	r2, [r7, #20]
   2a016:	005b      	lsls	r3, r3, #1
   2a018:	687a      	ldr	r2, [r7, #4]
   2a01a:	18d3      	adds	r3, r2, r3
   2a01c:	881b      	ldrh	r3, [r3, #0]
   2a01e:	0018      	movs	r0, r3
   2a020:	4b19      	ldr	r3, [pc, #100]	; (2a088 <cmp_lfn+0xfc>)
   2a022:	4798      	blx	r3
   2a024:	0003      	movs	r3, r0
   2a026:	001a      	movs	r2, r3
   2a028:	230e      	movs	r3, #14
   2a02a:	18fb      	adds	r3, r7, r3
   2a02c:	881b      	ldrh	r3, [r3, #0]
   2a02e:	4293      	cmp	r3, r2
   2a030:	d009      	beq.n	2a046 <cmp_lfn+0xba>
   2a032:	2300      	movs	r3, #0
   2a034:	e022      	b.n	2a07c <cmp_lfn+0xf0>
   2a036:	230c      	movs	r3, #12
   2a038:	18fb      	adds	r3, r7, r3
   2a03a:	881b      	ldrh	r3, [r3, #0]
   2a03c:	4a13      	ldr	r2, [pc, #76]	; (2a08c <cmp_lfn+0x100>)
   2a03e:	4293      	cmp	r3, r2
   2a040:	d001      	beq.n	2a046 <cmp_lfn+0xba>
   2a042:	2300      	movs	r3, #0
   2a044:	e01a      	b.n	2a07c <cmp_lfn+0xf0>
   2a046:	693b      	ldr	r3, [r7, #16]
   2a048:	3301      	adds	r3, #1
   2a04a:	613b      	str	r3, [r7, #16]
   2a04c:	693b      	ldr	r3, [r7, #16]
   2a04e:	2b0c      	cmp	r3, #12
   2a050:	d9b4      	bls.n	29fbc <cmp_lfn+0x30>
   2a052:	683b      	ldr	r3, [r7, #0]
   2a054:	781b      	ldrb	r3, [r3, #0]
   2a056:	001a      	movs	r2, r3
   2a058:	2340      	movs	r3, #64	; 0x40
   2a05a:	4013      	ands	r3, r2
   2a05c:	d00d      	beq.n	2a07a <cmp_lfn+0xee>
   2a05e:	230e      	movs	r3, #14
   2a060:	18fb      	adds	r3, r7, r3
   2a062:	881b      	ldrh	r3, [r3, #0]
   2a064:	2b00      	cmp	r3, #0
   2a066:	d008      	beq.n	2a07a <cmp_lfn+0xee>
   2a068:	697b      	ldr	r3, [r7, #20]
   2a06a:	005b      	lsls	r3, r3, #1
   2a06c:	687a      	ldr	r2, [r7, #4]
   2a06e:	18d3      	adds	r3, r2, r3
   2a070:	881b      	ldrh	r3, [r3, #0]
   2a072:	2b00      	cmp	r3, #0
   2a074:	d001      	beq.n	2a07a <cmp_lfn+0xee>
   2a076:	2300      	movs	r3, #0
   2a078:	e000      	b.n	2a07c <cmp_lfn+0xf0>
   2a07a:	2301      	movs	r3, #1
   2a07c:	0018      	movs	r0, r3
   2a07e:	46bd      	mov	sp, r7
   2a080:	b007      	add	sp, #28
   2a082:	bd90      	pop	{r4, r7, pc}
   2a084:	00036a84 	.word	0x00036a84
   2a088:	0002c039 	.word	0x0002c039
   2a08c:	0000ffff 	.word	0x0000ffff

0002a090 <fit_lfn>:
   2a090:	b580      	push	{r7, lr}
   2a092:	b088      	sub	sp, #32
   2a094:	af00      	add	r7, sp, #0
   2a096:	60f8      	str	r0, [r7, #12]
   2a098:	60b9      	str	r1, [r7, #8]
   2a09a:	0019      	movs	r1, r3
   2a09c:	1dfb      	adds	r3, r7, #7
   2a09e:	701a      	strb	r2, [r3, #0]
   2a0a0:	1dbb      	adds	r3, r7, #6
   2a0a2:	1c0a      	adds	r2, r1, #0
   2a0a4:	701a      	strb	r2, [r3, #0]
   2a0a6:	68bb      	ldr	r3, [r7, #8]
   2a0a8:	330d      	adds	r3, #13
   2a0aa:	1dba      	adds	r2, r7, #6
   2a0ac:	7812      	ldrb	r2, [r2, #0]
   2a0ae:	701a      	strb	r2, [r3, #0]
   2a0b0:	68bb      	ldr	r3, [r7, #8]
   2a0b2:	330b      	adds	r3, #11
   2a0b4:	220f      	movs	r2, #15
   2a0b6:	701a      	strb	r2, [r3, #0]
   2a0b8:	68bb      	ldr	r3, [r7, #8]
   2a0ba:	330c      	adds	r3, #12
   2a0bc:	2200      	movs	r2, #0
   2a0be:	701a      	strb	r2, [r3, #0]
   2a0c0:	68bb      	ldr	r3, [r7, #8]
   2a0c2:	331a      	adds	r3, #26
   2a0c4:	2200      	movs	r2, #0
   2a0c6:	701a      	strb	r2, [r3, #0]
   2a0c8:	68bb      	ldr	r3, [r7, #8]
   2a0ca:	331b      	adds	r3, #27
   2a0cc:	2200      	movs	r2, #0
   2a0ce:	701a      	strb	r2, [r3, #0]
   2a0d0:	1dfb      	adds	r3, r7, #7
   2a0d2:	781b      	ldrb	r3, [r3, #0]
   2a0d4:	1e5a      	subs	r2, r3, #1
   2a0d6:	0013      	movs	r3, r2
   2a0d8:	005b      	lsls	r3, r3, #1
   2a0da:	189b      	adds	r3, r3, r2
   2a0dc:	009b      	lsls	r3, r3, #2
   2a0de:	189b      	adds	r3, r3, r2
   2a0e0:	61fb      	str	r3, [r7, #28]
   2a0e2:	2316      	movs	r3, #22
   2a0e4:	18fb      	adds	r3, r7, r3
   2a0e6:	2200      	movs	r2, #0
   2a0e8:	801a      	strh	r2, [r3, #0]
   2a0ea:	2300      	movs	r3, #0
   2a0ec:	61bb      	str	r3, [r7, #24]
   2a0ee:	2316      	movs	r3, #22
   2a0f0:	18fb      	adds	r3, r7, r3
   2a0f2:	881b      	ldrh	r3, [r3, #0]
   2a0f4:	4a28      	ldr	r2, [pc, #160]	; (2a198 <fit_lfn+0x108>)
   2a0f6:	4293      	cmp	r3, r2
   2a0f8:	d009      	beq.n	2a10e <fit_lfn+0x7e>
   2a0fa:	69fb      	ldr	r3, [r7, #28]
   2a0fc:	1c5a      	adds	r2, r3, #1
   2a0fe:	61fa      	str	r2, [r7, #28]
   2a100:	005b      	lsls	r3, r3, #1
   2a102:	68fa      	ldr	r2, [r7, #12]
   2a104:	18d2      	adds	r2, r2, r3
   2a106:	2316      	movs	r3, #22
   2a108:	18fb      	adds	r3, r7, r3
   2a10a:	8812      	ldrh	r2, [r2, #0]
   2a10c:	801a      	strh	r2, [r3, #0]
   2a10e:	4a23      	ldr	r2, [pc, #140]	; (2a19c <fit_lfn+0x10c>)
   2a110:	69bb      	ldr	r3, [r7, #24]
   2a112:	18d3      	adds	r3, r2, r3
   2a114:	781b      	ldrb	r3, [r3, #0]
   2a116:	001a      	movs	r2, r3
   2a118:	68bb      	ldr	r3, [r7, #8]
   2a11a:	189b      	adds	r3, r3, r2
   2a11c:	2216      	movs	r2, #22
   2a11e:	18ba      	adds	r2, r7, r2
   2a120:	8812      	ldrh	r2, [r2, #0]
   2a122:	b2d2      	uxtb	r2, r2
   2a124:	701a      	strb	r2, [r3, #0]
   2a126:	4a1d      	ldr	r2, [pc, #116]	; (2a19c <fit_lfn+0x10c>)
   2a128:	69bb      	ldr	r3, [r7, #24]
   2a12a:	18d3      	adds	r3, r2, r3
   2a12c:	781b      	ldrb	r3, [r3, #0]
   2a12e:	3301      	adds	r3, #1
   2a130:	68ba      	ldr	r2, [r7, #8]
   2a132:	18d3      	adds	r3, r2, r3
   2a134:	2216      	movs	r2, #22
   2a136:	18ba      	adds	r2, r7, r2
   2a138:	8812      	ldrh	r2, [r2, #0]
   2a13a:	0a12      	lsrs	r2, r2, #8
   2a13c:	b292      	uxth	r2, r2
   2a13e:	b2d2      	uxtb	r2, r2
   2a140:	701a      	strb	r2, [r3, #0]
   2a142:	2316      	movs	r3, #22
   2a144:	18fb      	adds	r3, r7, r3
   2a146:	881b      	ldrh	r3, [r3, #0]
   2a148:	2b00      	cmp	r3, #0
   2a14a:	d104      	bne.n	2a156 <fit_lfn+0xc6>
   2a14c:	2316      	movs	r3, #22
   2a14e:	18fb      	adds	r3, r7, r3
   2a150:	2201      	movs	r2, #1
   2a152:	4252      	negs	r2, r2
   2a154:	801a      	strh	r2, [r3, #0]
   2a156:	69bb      	ldr	r3, [r7, #24]
   2a158:	3301      	adds	r3, #1
   2a15a:	61bb      	str	r3, [r7, #24]
   2a15c:	69bb      	ldr	r3, [r7, #24]
   2a15e:	2b0c      	cmp	r3, #12
   2a160:	d9c5      	bls.n	2a0ee <fit_lfn+0x5e>
   2a162:	2316      	movs	r3, #22
   2a164:	18fb      	adds	r3, r7, r3
   2a166:	881b      	ldrh	r3, [r3, #0]
   2a168:	4a0b      	ldr	r2, [pc, #44]	; (2a198 <fit_lfn+0x108>)
   2a16a:	4293      	cmp	r3, r2
   2a16c:	d006      	beq.n	2a17c <fit_lfn+0xec>
   2a16e:	69fb      	ldr	r3, [r7, #28]
   2a170:	005b      	lsls	r3, r3, #1
   2a172:	68fa      	ldr	r2, [r7, #12]
   2a174:	18d3      	adds	r3, r2, r3
   2a176:	881b      	ldrh	r3, [r3, #0]
   2a178:	2b00      	cmp	r3, #0
   2a17a:	d105      	bne.n	2a188 <fit_lfn+0xf8>
   2a17c:	1dfb      	adds	r3, r7, #7
   2a17e:	1dfa      	adds	r2, r7, #7
   2a180:	7812      	ldrb	r2, [r2, #0]
   2a182:	2140      	movs	r1, #64	; 0x40
   2a184:	430a      	orrs	r2, r1
   2a186:	701a      	strb	r2, [r3, #0]
   2a188:	68bb      	ldr	r3, [r7, #8]
   2a18a:	1dfa      	adds	r2, r7, #7
   2a18c:	7812      	ldrb	r2, [r2, #0]
   2a18e:	701a      	strb	r2, [r3, #0]
   2a190:	46c0      	nop			; (mov r8, r8)
   2a192:	46bd      	mov	sp, r7
   2a194:	b008      	add	sp, #32
   2a196:	bd80      	pop	{r7, pc}
   2a198:	0000ffff 	.word	0x0000ffff
   2a19c:	00036a84 	.word	0x00036a84

0002a1a0 <gen_numname>:
   2a1a0:	b580      	push	{r7, lr}
   2a1a2:	b08a      	sub	sp, #40	; 0x28
   2a1a4:	af00      	add	r7, sp, #0
   2a1a6:	60f8      	str	r0, [r7, #12]
   2a1a8:	60b9      	str	r1, [r7, #8]
   2a1aa:	607a      	str	r2, [r7, #4]
   2a1ac:	001a      	movs	r2, r3
   2a1ae:	1cbb      	adds	r3, r7, #2
   2a1b0:	801a      	strh	r2, [r3, #0]
   2a1b2:	68b9      	ldr	r1, [r7, #8]
   2a1b4:	68fb      	ldr	r3, [r7, #12]
   2a1b6:	220b      	movs	r2, #11
   2a1b8:	0018      	movs	r0, r3
   2a1ba:	4b38      	ldr	r3, [pc, #224]	; (2a29c <gen_numname+0xfc>)
   2a1bc:	4798      	blx	r3
   2a1be:	1cbb      	adds	r3, r7, #2
   2a1c0:	881b      	ldrh	r3, [r3, #0]
   2a1c2:	2b05      	cmp	r3, #5
   2a1c4:	d911      	bls.n	2a1ea <gen_numname+0x4a>
   2a1c6:	1cbb      	adds	r3, r7, #2
   2a1c8:	881b      	ldrh	r3, [r3, #0]
   2a1ca:	b29a      	uxth	r2, r3
   2a1cc:	0852      	lsrs	r2, r2, #1
   2a1ce:	03db      	lsls	r3, r3, #15
   2a1d0:	4313      	orrs	r3, r2
   2a1d2:	b299      	uxth	r1, r3
   2a1d4:	687b      	ldr	r3, [r7, #4]
   2a1d6:	1c9a      	adds	r2, r3, #2
   2a1d8:	607a      	str	r2, [r7, #4]
   2a1da:	881a      	ldrh	r2, [r3, #0]
   2a1dc:	1cbb      	adds	r3, r7, #2
   2a1de:	188a      	adds	r2, r1, r2
   2a1e0:	801a      	strh	r2, [r3, #0]
   2a1e2:	687b      	ldr	r3, [r7, #4]
   2a1e4:	881b      	ldrh	r3, [r3, #0]
   2a1e6:	2b00      	cmp	r3, #0
   2a1e8:	d1ed      	bne.n	2a1c6 <gen_numname+0x26>
   2a1ea:	2307      	movs	r3, #7
   2a1ec:	623b      	str	r3, [r7, #32]
   2a1ee:	1cbb      	adds	r3, r7, #2
   2a1f0:	881b      	ldrh	r3, [r3, #0]
   2a1f2:	b2db      	uxtb	r3, r3
   2a1f4:	220f      	movs	r2, #15
   2a1f6:	4013      	ands	r3, r2
   2a1f8:	b2da      	uxtb	r2, r3
   2a1fa:	2327      	movs	r3, #39	; 0x27
   2a1fc:	18fb      	adds	r3, r7, r3
   2a1fe:	3230      	adds	r2, #48	; 0x30
   2a200:	701a      	strb	r2, [r3, #0]
   2a202:	2327      	movs	r3, #39	; 0x27
   2a204:	18fb      	adds	r3, r7, r3
   2a206:	781b      	ldrb	r3, [r3, #0]
   2a208:	2b39      	cmp	r3, #57	; 0x39
   2a20a:	d906      	bls.n	2a21a <gen_numname+0x7a>
   2a20c:	2327      	movs	r3, #39	; 0x27
   2a20e:	18fb      	adds	r3, r7, r3
   2a210:	2227      	movs	r2, #39	; 0x27
   2a212:	18ba      	adds	r2, r7, r2
   2a214:	7812      	ldrb	r2, [r2, #0]
   2a216:	3207      	adds	r2, #7
   2a218:	701a      	strb	r2, [r3, #0]
   2a21a:	6a3b      	ldr	r3, [r7, #32]
   2a21c:	1e5a      	subs	r2, r3, #1
   2a21e:	623a      	str	r2, [r7, #32]
   2a220:	2214      	movs	r2, #20
   2a222:	18ba      	adds	r2, r7, r2
   2a224:	2127      	movs	r1, #39	; 0x27
   2a226:	1879      	adds	r1, r7, r1
   2a228:	7809      	ldrb	r1, [r1, #0]
   2a22a:	54d1      	strb	r1, [r2, r3]
   2a22c:	1cbb      	adds	r3, r7, #2
   2a22e:	1cba      	adds	r2, r7, #2
   2a230:	8812      	ldrh	r2, [r2, #0]
   2a232:	0912      	lsrs	r2, r2, #4
   2a234:	801a      	strh	r2, [r3, #0]
   2a236:	1cbb      	adds	r3, r7, #2
   2a238:	881b      	ldrh	r3, [r3, #0]
   2a23a:	2b00      	cmp	r3, #0
   2a23c:	d1d7      	bne.n	2a1ee <gen_numname+0x4e>
   2a23e:	2314      	movs	r3, #20
   2a240:	18fa      	adds	r2, r7, r3
   2a242:	6a3b      	ldr	r3, [r7, #32]
   2a244:	18d3      	adds	r3, r2, r3
   2a246:	227e      	movs	r2, #126	; 0x7e
   2a248:	701a      	strb	r2, [r3, #0]
   2a24a:	2300      	movs	r3, #0
   2a24c:	61fb      	str	r3, [r7, #28]
   2a24e:	e002      	b.n	2a256 <gen_numname+0xb6>
   2a250:	69fb      	ldr	r3, [r7, #28]
   2a252:	3301      	adds	r3, #1
   2a254:	61fb      	str	r3, [r7, #28]
   2a256:	69fa      	ldr	r2, [r7, #28]
   2a258:	6a3b      	ldr	r3, [r7, #32]
   2a25a:	429a      	cmp	r2, r3
   2a25c:	d205      	bcs.n	2a26a <gen_numname+0xca>
   2a25e:	68fa      	ldr	r2, [r7, #12]
   2a260:	69fb      	ldr	r3, [r7, #28]
   2a262:	18d3      	adds	r3, r2, r3
   2a264:	781b      	ldrb	r3, [r3, #0]
   2a266:	2b20      	cmp	r3, #32
   2a268:	d1f2      	bne.n	2a250 <gen_numname+0xb0>
   2a26a:	69fb      	ldr	r3, [r7, #28]
   2a26c:	1c5a      	adds	r2, r3, #1
   2a26e:	61fa      	str	r2, [r7, #28]
   2a270:	68fa      	ldr	r2, [r7, #12]
   2a272:	18d2      	adds	r2, r2, r3
   2a274:	6a3b      	ldr	r3, [r7, #32]
   2a276:	2b07      	cmp	r3, #7
   2a278:	d806      	bhi.n	2a288 <gen_numname+0xe8>
   2a27a:	6a3b      	ldr	r3, [r7, #32]
   2a27c:	1c59      	adds	r1, r3, #1
   2a27e:	6239      	str	r1, [r7, #32]
   2a280:	2114      	movs	r1, #20
   2a282:	1879      	adds	r1, r7, r1
   2a284:	5ccb      	ldrb	r3, [r1, r3]
   2a286:	e000      	b.n	2a28a <gen_numname+0xea>
   2a288:	2320      	movs	r3, #32
   2a28a:	7013      	strb	r3, [r2, #0]
   2a28c:	69fb      	ldr	r3, [r7, #28]
   2a28e:	2b07      	cmp	r3, #7
   2a290:	d9eb      	bls.n	2a26a <gen_numname+0xca>
   2a292:	46c0      	nop			; (mov r8, r8)
   2a294:	46bd      	mov	sp, r7
   2a296:	b00a      	add	sp, #40	; 0x28
   2a298:	bd80      	pop	{r7, pc}
   2a29a:	46c0      	nop			; (mov r8, r8)
   2a29c:	00029345 	.word	0x00029345

0002a2a0 <sum_sfn>:
   2a2a0:	b580      	push	{r7, lr}
   2a2a2:	b084      	sub	sp, #16
   2a2a4:	af00      	add	r7, sp, #0
   2a2a6:	6078      	str	r0, [r7, #4]
   2a2a8:	230f      	movs	r3, #15
   2a2aa:	18fb      	adds	r3, r7, r3
   2a2ac:	2200      	movs	r2, #0
   2a2ae:	701a      	strb	r2, [r3, #0]
   2a2b0:	230b      	movs	r3, #11
   2a2b2:	60bb      	str	r3, [r7, #8]
   2a2b4:	230f      	movs	r3, #15
   2a2b6:	18fb      	adds	r3, r7, r3
   2a2b8:	781b      	ldrb	r3, [r3, #0]
   2a2ba:	b2da      	uxtb	r2, r3
   2a2bc:	0852      	lsrs	r2, r2, #1
   2a2be:	01db      	lsls	r3, r3, #7
   2a2c0:	4313      	orrs	r3, r2
   2a2c2:	b2d9      	uxtb	r1, r3
   2a2c4:	687b      	ldr	r3, [r7, #4]
   2a2c6:	1c5a      	adds	r2, r3, #1
   2a2c8:	607a      	str	r2, [r7, #4]
   2a2ca:	781a      	ldrb	r2, [r3, #0]
   2a2cc:	230f      	movs	r3, #15
   2a2ce:	18fb      	adds	r3, r7, r3
   2a2d0:	188a      	adds	r2, r1, r2
   2a2d2:	701a      	strb	r2, [r3, #0]
   2a2d4:	68bb      	ldr	r3, [r7, #8]
   2a2d6:	3b01      	subs	r3, #1
   2a2d8:	60bb      	str	r3, [r7, #8]
   2a2da:	68bb      	ldr	r3, [r7, #8]
   2a2dc:	2b00      	cmp	r3, #0
   2a2de:	d1e9      	bne.n	2a2b4 <sum_sfn+0x14>
   2a2e0:	230f      	movs	r3, #15
   2a2e2:	18fb      	adds	r3, r7, r3
   2a2e4:	781b      	ldrb	r3, [r3, #0]
   2a2e6:	0018      	movs	r0, r3
   2a2e8:	46bd      	mov	sp, r7
   2a2ea:	b004      	add	sp, #16
   2a2ec:	bd80      	pop	{r7, pc}
	...

0002a2f0 <dir_find>:
   2a2f0:	b590      	push	{r4, r7, lr}
   2a2f2:	b087      	sub	sp, #28
   2a2f4:	af00      	add	r7, sp, #0
   2a2f6:	6078      	str	r0, [r7, #4]
   2a2f8:	2317      	movs	r3, #23
   2a2fa:	18fc      	adds	r4, r7, r3
   2a2fc:	687b      	ldr	r3, [r7, #4]
   2a2fe:	2100      	movs	r1, #0
   2a300:	0018      	movs	r0, r3
   2a302:	4b74      	ldr	r3, [pc, #464]	; (2a4d4 <dir_find+0x1e4>)
   2a304:	4798      	blx	r3
   2a306:	0003      	movs	r3, r0
   2a308:	7023      	strb	r3, [r4, #0]
   2a30a:	2317      	movs	r3, #23
   2a30c:	18fb      	adds	r3, r7, r3
   2a30e:	781b      	ldrb	r3, [r3, #0]
   2a310:	2b00      	cmp	r3, #0
   2a312:	d003      	beq.n	2a31c <dir_find+0x2c>
   2a314:	2317      	movs	r3, #23
   2a316:	18fb      	adds	r3, r7, r3
   2a318:	781b      	ldrb	r3, [r3, #0]
   2a31a:	e0d6      	b.n	2a4ca <dir_find+0x1da>
   2a31c:	2314      	movs	r3, #20
   2a31e:	18fb      	adds	r3, r7, r3
   2a320:	22ff      	movs	r2, #255	; 0xff
   2a322:	701a      	strb	r2, [r3, #0]
   2a324:	2315      	movs	r3, #21
   2a326:	18fb      	adds	r3, r7, r3
   2a328:	2214      	movs	r2, #20
   2a32a:	18ba      	adds	r2, r7, r2
   2a32c:	7812      	ldrb	r2, [r2, #0]
   2a32e:	701a      	strb	r2, [r3, #0]
   2a330:	687b      	ldr	r3, [r7, #4]
   2a332:	681a      	ldr	r2, [r3, #0]
   2a334:	687b      	ldr	r3, [r7, #4]
   2a336:	691b      	ldr	r3, [r3, #16]
   2a338:	2117      	movs	r1, #23
   2a33a:	187c      	adds	r4, r7, r1
   2a33c:	0019      	movs	r1, r3
   2a33e:	0010      	movs	r0, r2
   2a340:	4b65      	ldr	r3, [pc, #404]	; (2a4d8 <dir_find+0x1e8>)
   2a342:	4798      	blx	r3
   2a344:	0003      	movs	r3, r0
   2a346:	7023      	strb	r3, [r4, #0]
   2a348:	2317      	movs	r3, #23
   2a34a:	18fb      	adds	r3, r7, r3
   2a34c:	781b      	ldrb	r3, [r3, #0]
   2a34e:	2b00      	cmp	r3, #0
   2a350:	d000      	beq.n	2a354 <dir_find+0x64>
   2a352:	e0b2      	b.n	2a4ba <dir_find+0x1ca>
   2a354:	687b      	ldr	r3, [r7, #4]
   2a356:	695b      	ldr	r3, [r3, #20]
   2a358:	613b      	str	r3, [r7, #16]
   2a35a:	2316      	movs	r3, #22
   2a35c:	18fb      	adds	r3, r7, r3
   2a35e:	693a      	ldr	r2, [r7, #16]
   2a360:	7812      	ldrb	r2, [r2, #0]
   2a362:	701a      	strb	r2, [r3, #0]
   2a364:	2316      	movs	r3, #22
   2a366:	18fb      	adds	r3, r7, r3
   2a368:	781b      	ldrb	r3, [r3, #0]
   2a36a:	2b00      	cmp	r3, #0
   2a36c:	d104      	bne.n	2a378 <dir_find+0x88>
   2a36e:	2317      	movs	r3, #23
   2a370:	18fb      	adds	r3, r7, r3
   2a372:	2204      	movs	r2, #4
   2a374:	701a      	strb	r2, [r3, #0]
   2a376:	e0a5      	b.n	2a4c4 <dir_find+0x1d4>
   2a378:	693b      	ldr	r3, [r7, #16]
   2a37a:	330b      	adds	r3, #11
   2a37c:	781a      	ldrb	r2, [r3, #0]
   2a37e:	230f      	movs	r3, #15
   2a380:	18fb      	adds	r3, r7, r3
   2a382:	213f      	movs	r1, #63	; 0x3f
   2a384:	400a      	ands	r2, r1
   2a386:	701a      	strb	r2, [r3, #0]
   2a388:	2316      	movs	r3, #22
   2a38a:	18fb      	adds	r3, r7, r3
   2a38c:	781b      	ldrb	r3, [r3, #0]
   2a38e:	2be5      	cmp	r3, #229	; 0xe5
   2a390:	d00a      	beq.n	2a3a8 <dir_find+0xb8>
   2a392:	230f      	movs	r3, #15
   2a394:	18fb      	adds	r3, r7, r3
   2a396:	781b      	ldrb	r3, [r3, #0]
   2a398:	2208      	movs	r2, #8
   2a39a:	4013      	ands	r3, r2
   2a39c:	d009      	beq.n	2a3b2 <dir_find+0xc2>
   2a39e:	230f      	movs	r3, #15
   2a3a0:	18fb      	adds	r3, r7, r3
   2a3a2:	781b      	ldrb	r3, [r3, #0]
   2a3a4:	2b0f      	cmp	r3, #15
   2a3a6:	d004      	beq.n	2a3b2 <dir_find+0xc2>
   2a3a8:	2315      	movs	r3, #21
   2a3aa:	18fb      	adds	r3, r7, r3
   2a3ac:	22ff      	movs	r2, #255	; 0xff
   2a3ae:	701a      	strb	r2, [r3, #0]
   2a3b0:	e073      	b.n	2a49a <dir_find+0x1aa>
   2a3b2:	230f      	movs	r3, #15
   2a3b4:	18fb      	adds	r3, r7, r3
   2a3b6:	781b      	ldrb	r3, [r3, #0]
   2a3b8:	2b0f      	cmp	r3, #15
   2a3ba:	d145      	bne.n	2a448 <dir_find+0x158>
   2a3bc:	687b      	ldr	r3, [r7, #4]
   2a3be:	69db      	ldr	r3, [r3, #28]
   2a3c0:	2b00      	cmp	r3, #0
   2a3c2:	d100      	bne.n	2a3c6 <dir_find+0xd6>
   2a3c4:	e069      	b.n	2a49a <dir_find+0x1aa>
   2a3c6:	2316      	movs	r3, #22
   2a3c8:	18fb      	adds	r3, r7, r3
   2a3ca:	781b      	ldrb	r3, [r3, #0]
   2a3cc:	2240      	movs	r2, #64	; 0x40
   2a3ce:	4013      	ands	r3, r2
   2a3d0:	d016      	beq.n	2a400 <dir_find+0x110>
   2a3d2:	2314      	movs	r3, #20
   2a3d4:	18fb      	adds	r3, r7, r3
   2a3d6:	693a      	ldr	r2, [r7, #16]
   2a3d8:	7b52      	ldrb	r2, [r2, #13]
   2a3da:	701a      	strb	r2, [r3, #0]
   2a3dc:	2316      	movs	r3, #22
   2a3de:	18fb      	adds	r3, r7, r3
   2a3e0:	2216      	movs	r2, #22
   2a3e2:	18ba      	adds	r2, r7, r2
   2a3e4:	7812      	ldrb	r2, [r2, #0]
   2a3e6:	2140      	movs	r1, #64	; 0x40
   2a3e8:	438a      	bics	r2, r1
   2a3ea:	701a      	strb	r2, [r3, #0]
   2a3ec:	2315      	movs	r3, #21
   2a3ee:	18fb      	adds	r3, r7, r3
   2a3f0:	2216      	movs	r2, #22
   2a3f2:	18ba      	adds	r2, r7, r2
   2a3f4:	7812      	ldrb	r2, [r2, #0]
   2a3f6:	701a      	strb	r2, [r3, #0]
   2a3f8:	687b      	ldr	r3, [r7, #4]
   2a3fa:	88da      	ldrh	r2, [r3, #6]
   2a3fc:	687b      	ldr	r3, [r7, #4]
   2a3fe:	841a      	strh	r2, [r3, #32]
   2a400:	2316      	movs	r3, #22
   2a402:	18fa      	adds	r2, r7, r3
   2a404:	2315      	movs	r3, #21
   2a406:	18fb      	adds	r3, r7, r3
   2a408:	7812      	ldrb	r2, [r2, #0]
   2a40a:	781b      	ldrb	r3, [r3, #0]
   2a40c:	429a      	cmp	r2, r3
   2a40e:	d116      	bne.n	2a43e <dir_find+0x14e>
   2a410:	693b      	ldr	r3, [r7, #16]
   2a412:	330d      	adds	r3, #13
   2a414:	781b      	ldrb	r3, [r3, #0]
   2a416:	2214      	movs	r2, #20
   2a418:	18ba      	adds	r2, r7, r2
   2a41a:	7812      	ldrb	r2, [r2, #0]
   2a41c:	429a      	cmp	r2, r3
   2a41e:	d10e      	bne.n	2a43e <dir_find+0x14e>
   2a420:	687b      	ldr	r3, [r7, #4]
   2a422:	69db      	ldr	r3, [r3, #28]
   2a424:	693a      	ldr	r2, [r7, #16]
   2a426:	0011      	movs	r1, r2
   2a428:	0018      	movs	r0, r3
   2a42a:	4b2c      	ldr	r3, [pc, #176]	; (2a4dc <dir_find+0x1ec>)
   2a42c:	4798      	blx	r3
   2a42e:	1e03      	subs	r3, r0, #0
   2a430:	d005      	beq.n	2a43e <dir_find+0x14e>
   2a432:	2315      	movs	r3, #21
   2a434:	18fb      	adds	r3, r7, r3
   2a436:	781b      	ldrb	r3, [r3, #0]
   2a438:	3b01      	subs	r3, #1
   2a43a:	b2da      	uxtb	r2, r3
   2a43c:	e000      	b.n	2a440 <dir_find+0x150>
   2a43e:	22ff      	movs	r2, #255	; 0xff
   2a440:	2315      	movs	r3, #21
   2a442:	18fb      	adds	r3, r7, r3
   2a444:	701a      	strb	r2, [r3, #0]
   2a446:	e028      	b.n	2a49a <dir_find+0x1aa>
   2a448:	2315      	movs	r3, #21
   2a44a:	18fb      	adds	r3, r7, r3
   2a44c:	781b      	ldrb	r3, [r3, #0]
   2a44e:	2b00      	cmp	r3, #0
   2a450:	d10a      	bne.n	2a468 <dir_find+0x178>
   2a452:	693b      	ldr	r3, [r7, #16]
   2a454:	0018      	movs	r0, r3
   2a456:	4b22      	ldr	r3, [pc, #136]	; (2a4e0 <dir_find+0x1f0>)
   2a458:	4798      	blx	r3
   2a45a:	0003      	movs	r3, r0
   2a45c:	001a      	movs	r2, r3
   2a45e:	2314      	movs	r3, #20
   2a460:	18fb      	adds	r3, r7, r3
   2a462:	781b      	ldrb	r3, [r3, #0]
   2a464:	4293      	cmp	r3, r2
   2a466:	d02a      	beq.n	2a4be <dir_find+0x1ce>
   2a468:	2315      	movs	r3, #21
   2a46a:	18fb      	adds	r3, r7, r3
   2a46c:	22ff      	movs	r2, #255	; 0xff
   2a46e:	701a      	strb	r2, [r3, #0]
   2a470:	687b      	ldr	r3, [r7, #4]
   2a472:	2201      	movs	r2, #1
   2a474:	4252      	negs	r2, r2
   2a476:	841a      	strh	r2, [r3, #32]
   2a478:	687b      	ldr	r3, [r7, #4]
   2a47a:	699b      	ldr	r3, [r3, #24]
   2a47c:	330b      	adds	r3, #11
   2a47e:	781b      	ldrb	r3, [r3, #0]
   2a480:	001a      	movs	r2, r3
   2a482:	2301      	movs	r3, #1
   2a484:	4013      	ands	r3, r2
   2a486:	d108      	bne.n	2a49a <dir_find+0x1aa>
   2a488:	687b      	ldr	r3, [r7, #4]
   2a48a:	6999      	ldr	r1, [r3, #24]
   2a48c:	693b      	ldr	r3, [r7, #16]
   2a48e:	220b      	movs	r2, #11
   2a490:	0018      	movs	r0, r3
   2a492:	4b14      	ldr	r3, [pc, #80]	; (2a4e4 <dir_find+0x1f4>)
   2a494:	4798      	blx	r3
   2a496:	1e03      	subs	r3, r0, #0
   2a498:	d013      	beq.n	2a4c2 <dir_find+0x1d2>
   2a49a:	2317      	movs	r3, #23
   2a49c:	18fc      	adds	r4, r7, r3
   2a49e:	687b      	ldr	r3, [r7, #4]
   2a4a0:	2100      	movs	r1, #0
   2a4a2:	0018      	movs	r0, r3
   2a4a4:	4b10      	ldr	r3, [pc, #64]	; (2a4e8 <dir_find+0x1f8>)
   2a4a6:	4798      	blx	r3
   2a4a8:	0003      	movs	r3, r0
   2a4aa:	7023      	strb	r3, [r4, #0]
   2a4ac:	2317      	movs	r3, #23
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	781b      	ldrb	r3, [r3, #0]
   2a4b2:	2b00      	cmp	r3, #0
   2a4b4:	d100      	bne.n	2a4b8 <dir_find+0x1c8>
   2a4b6:	e73b      	b.n	2a330 <dir_find+0x40>
   2a4b8:	e004      	b.n	2a4c4 <dir_find+0x1d4>
   2a4ba:	46c0      	nop			; (mov r8, r8)
   2a4bc:	e002      	b.n	2a4c4 <dir_find+0x1d4>
   2a4be:	46c0      	nop			; (mov r8, r8)
   2a4c0:	e000      	b.n	2a4c4 <dir_find+0x1d4>
   2a4c2:	46c0      	nop			; (mov r8, r8)
   2a4c4:	2317      	movs	r3, #23
   2a4c6:	18fb      	adds	r3, r7, r3
   2a4c8:	781b      	ldrb	r3, [r3, #0]
   2a4ca:	0018      	movs	r0, r3
   2a4cc:	46bd      	mov	sp, r7
   2a4ce:	b007      	add	sp, #28
   2a4d0:	bd90      	pop	{r4, r7, pc}
   2a4d2:	46c0      	nop			; (mov r8, r8)
   2a4d4:	00029c6d 	.word	0x00029c6d
   2a4d8:	00029429 	.word	0x00029429
   2a4dc:	00029f8d 	.word	0x00029f8d
   2a4e0:	0002a2a1 	.word	0x0002a2a1
   2a4e4:	000293ad 	.word	0x000293ad
   2a4e8:	00029d9d 	.word	0x00029d9d

0002a4ec <dir_register>:
   2a4ec:	b590      	push	{r4, r7, lr}
   2a4ee:	b08d      	sub	sp, #52	; 0x34
   2a4f0:	af00      	add	r7, sp, #0
   2a4f2:	6078      	str	r0, [r7, #4]
   2a4f4:	687b      	ldr	r3, [r7, #4]
   2a4f6:	699b      	ldr	r3, [r3, #24]
   2a4f8:	627b      	str	r3, [r7, #36]	; 0x24
   2a4fa:	687b      	ldr	r3, [r7, #4]
   2a4fc:	69db      	ldr	r3, [r3, #28]
   2a4fe:	623b      	str	r3, [r7, #32]
   2a500:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a502:	230c      	movs	r3, #12
   2a504:	18fb      	adds	r3, r7, r3
   2a506:	220c      	movs	r2, #12
   2a508:	0018      	movs	r0, r3
   2a50a:	4bc8      	ldr	r3, [pc, #800]	; (2a82c <dir_register+0x340>)
   2a50c:	4798      	blx	r3
   2a50e:	230c      	movs	r3, #12
   2a510:	18fb      	adds	r3, r7, r3
   2a512:	7adb      	ldrb	r3, [r3, #11]
   2a514:	001a      	movs	r2, r3
   2a516:	2301      	movs	r3, #1
   2a518:	4013      	ands	r3, r2
   2a51a:	d048      	beq.n	2a5ae <dir_register+0xc2>
   2a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a51e:	330b      	adds	r3, #11
   2a520:	2200      	movs	r2, #0
   2a522:	701a      	strb	r2, [r3, #0]
   2a524:	687b      	ldr	r3, [r7, #4]
   2a526:	2200      	movs	r2, #0
   2a528:	61da      	str	r2, [r3, #28]
   2a52a:	232c      	movs	r3, #44	; 0x2c
   2a52c:	18fb      	adds	r3, r7, r3
   2a52e:	2201      	movs	r2, #1
   2a530:	801a      	strh	r2, [r3, #0]
   2a532:	e01c      	b.n	2a56e <dir_register+0x82>
   2a534:	232c      	movs	r3, #44	; 0x2c
   2a536:	18fb      	adds	r3, r7, r3
   2a538:	881b      	ldrh	r3, [r3, #0]
   2a53a:	6a3a      	ldr	r2, [r7, #32]
   2a53c:	210c      	movs	r1, #12
   2a53e:	1879      	adds	r1, r7, r1
   2a540:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2a542:	4cbb      	ldr	r4, [pc, #748]	; (2a830 <dir_register+0x344>)
   2a544:	47a0      	blx	r4
   2a546:	232f      	movs	r3, #47	; 0x2f
   2a548:	18fc      	adds	r4, r7, r3
   2a54a:	687b      	ldr	r3, [r7, #4]
   2a54c:	0018      	movs	r0, r3
   2a54e:	4bb9      	ldr	r3, [pc, #740]	; (2a834 <dir_register+0x348>)
   2a550:	4798      	blx	r3
   2a552:	0003      	movs	r3, r0
   2a554:	7023      	strb	r3, [r4, #0]
   2a556:	232f      	movs	r3, #47	; 0x2f
   2a558:	18fb      	adds	r3, r7, r3
   2a55a:	781b      	ldrb	r3, [r3, #0]
   2a55c:	2b00      	cmp	r3, #0
   2a55e:	d10c      	bne.n	2a57a <dir_register+0x8e>
   2a560:	232c      	movs	r3, #44	; 0x2c
   2a562:	18fb      	adds	r3, r7, r3
   2a564:	881a      	ldrh	r2, [r3, #0]
   2a566:	232c      	movs	r3, #44	; 0x2c
   2a568:	18fb      	adds	r3, r7, r3
   2a56a:	3201      	adds	r2, #1
   2a56c:	801a      	strh	r2, [r3, #0]
   2a56e:	232c      	movs	r3, #44	; 0x2c
   2a570:	18fb      	adds	r3, r7, r3
   2a572:	881b      	ldrh	r3, [r3, #0]
   2a574:	2b63      	cmp	r3, #99	; 0x63
   2a576:	d9dd      	bls.n	2a534 <dir_register+0x48>
   2a578:	e000      	b.n	2a57c <dir_register+0x90>
   2a57a:	46c0      	nop			; (mov r8, r8)
   2a57c:	232c      	movs	r3, #44	; 0x2c
   2a57e:	18fb      	adds	r3, r7, r3
   2a580:	881b      	ldrh	r3, [r3, #0]
   2a582:	2b64      	cmp	r3, #100	; 0x64
   2a584:	d101      	bne.n	2a58a <dir_register+0x9e>
   2a586:	2307      	movs	r3, #7
   2a588:	e14c      	b.n	2a824 <dir_register+0x338>
   2a58a:	232f      	movs	r3, #47	; 0x2f
   2a58c:	18fb      	adds	r3, r7, r3
   2a58e:	781b      	ldrb	r3, [r3, #0]
   2a590:	2b04      	cmp	r3, #4
   2a592:	d003      	beq.n	2a59c <dir_register+0xb0>
   2a594:	232f      	movs	r3, #47	; 0x2f
   2a596:	18fb      	adds	r3, r7, r3
   2a598:	781b      	ldrb	r3, [r3, #0]
   2a59a:	e143      	b.n	2a824 <dir_register+0x338>
   2a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a59e:	330b      	adds	r3, #11
   2a5a0:	220c      	movs	r2, #12
   2a5a2:	18ba      	adds	r2, r7, r2
   2a5a4:	7ad2      	ldrb	r2, [r2, #11]
   2a5a6:	701a      	strb	r2, [r3, #0]
   2a5a8:	687b      	ldr	r3, [r7, #4]
   2a5aa:	6a3a      	ldr	r2, [r7, #32]
   2a5ac:	61da      	str	r2, [r3, #28]
   2a5ae:	230c      	movs	r3, #12
   2a5b0:	18fb      	adds	r3, r7, r3
   2a5b2:	7adb      	ldrb	r3, [r3, #11]
   2a5b4:	001a      	movs	r2, r3
   2a5b6:	2302      	movs	r3, #2
   2a5b8:	4013      	ands	r3, r2
   2a5ba:	d023      	beq.n	2a604 <dir_register+0x118>
   2a5bc:	232a      	movs	r3, #42	; 0x2a
   2a5be:	18fb      	adds	r3, r7, r3
   2a5c0:	2200      	movs	r2, #0
   2a5c2:	801a      	strh	r2, [r3, #0]
   2a5c4:	e006      	b.n	2a5d4 <dir_register+0xe8>
   2a5c6:	232a      	movs	r3, #42	; 0x2a
   2a5c8:	18fb      	adds	r3, r7, r3
   2a5ca:	881a      	ldrh	r2, [r3, #0]
   2a5cc:	232a      	movs	r3, #42	; 0x2a
   2a5ce:	18fb      	adds	r3, r7, r3
   2a5d0:	3201      	adds	r2, #1
   2a5d2:	801a      	strh	r2, [r3, #0]
   2a5d4:	232a      	movs	r3, #42	; 0x2a
   2a5d6:	18fb      	adds	r3, r7, r3
   2a5d8:	881b      	ldrh	r3, [r3, #0]
   2a5da:	005b      	lsls	r3, r3, #1
   2a5dc:	6a3a      	ldr	r2, [r7, #32]
   2a5de:	18d3      	adds	r3, r2, r3
   2a5e0:	881b      	ldrh	r3, [r3, #0]
   2a5e2:	2b00      	cmp	r3, #0
   2a5e4:	d1ef      	bne.n	2a5c6 <dir_register+0xda>
   2a5e6:	232a      	movs	r3, #42	; 0x2a
   2a5e8:	18fb      	adds	r3, r7, r3
   2a5ea:	881b      	ldrh	r3, [r3, #0]
   2a5ec:	3319      	adds	r3, #25
   2a5ee:	001a      	movs	r2, r3
   2a5f0:	4b91      	ldr	r3, [pc, #580]	; (2a838 <dir_register+0x34c>)
   2a5f2:	210d      	movs	r1, #13
   2a5f4:	0010      	movs	r0, r2
   2a5f6:	4798      	blx	r3
   2a5f8:	0003      	movs	r3, r0
   2a5fa:	001a      	movs	r2, r3
   2a5fc:	232a      	movs	r3, #42	; 0x2a
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	801a      	strh	r2, [r3, #0]
   2a602:	e003      	b.n	2a60c <dir_register+0x120>
   2a604:	232a      	movs	r3, #42	; 0x2a
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	2201      	movs	r2, #1
   2a60a:	801a      	strh	r2, [r3, #0]
   2a60c:	232f      	movs	r3, #47	; 0x2f
   2a60e:	18fc      	adds	r4, r7, r3
   2a610:	687b      	ldr	r3, [r7, #4]
   2a612:	2100      	movs	r1, #0
   2a614:	0018      	movs	r0, r3
   2a616:	4b89      	ldr	r3, [pc, #548]	; (2a83c <dir_register+0x350>)
   2a618:	4798      	blx	r3
   2a61a:	0003      	movs	r3, r0
   2a61c:	7023      	strb	r3, [r4, #0]
   2a61e:	232f      	movs	r3, #47	; 0x2f
   2a620:	18fb      	adds	r3, r7, r3
   2a622:	781b      	ldrb	r3, [r3, #0]
   2a624:	2b00      	cmp	r3, #0
   2a626:	d003      	beq.n	2a630 <dir_register+0x144>
   2a628:	232f      	movs	r3, #47	; 0x2f
   2a62a:	18fb      	adds	r3, r7, r3
   2a62c:	781b      	ldrb	r3, [r3, #0]
   2a62e:	e0f9      	b.n	2a824 <dir_register+0x338>
   2a630:	2328      	movs	r3, #40	; 0x28
   2a632:	18fb      	adds	r3, r7, r3
   2a634:	2200      	movs	r2, #0
   2a636:	801a      	strh	r2, [r3, #0]
   2a638:	232c      	movs	r3, #44	; 0x2c
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	2228      	movs	r2, #40	; 0x28
   2a63e:	18ba      	adds	r2, r7, r2
   2a640:	8812      	ldrh	r2, [r2, #0]
   2a642:	801a      	strh	r2, [r3, #0]
   2a644:	687b      	ldr	r3, [r7, #4]
   2a646:	681a      	ldr	r2, [r3, #0]
   2a648:	687b      	ldr	r3, [r7, #4]
   2a64a:	691b      	ldr	r3, [r3, #16]
   2a64c:	212f      	movs	r1, #47	; 0x2f
   2a64e:	187c      	adds	r4, r7, r1
   2a650:	0019      	movs	r1, r3
   2a652:	0010      	movs	r0, r2
   2a654:	4b7a      	ldr	r3, [pc, #488]	; (2a840 <dir_register+0x354>)
   2a656:	4798      	blx	r3
   2a658:	0003      	movs	r3, r0
   2a65a:	7023      	strb	r3, [r4, #0]
   2a65c:	232f      	movs	r3, #47	; 0x2f
   2a65e:	18fb      	adds	r3, r7, r3
   2a660:	781b      	ldrb	r3, [r3, #0]
   2a662:	2b00      	cmp	r3, #0
   2a664:	d13c      	bne.n	2a6e0 <dir_register+0x1f4>
   2a666:	687b      	ldr	r3, [r7, #4]
   2a668:	695a      	ldr	r2, [r3, #20]
   2a66a:	231f      	movs	r3, #31
   2a66c:	18fb      	adds	r3, r7, r3
   2a66e:	7812      	ldrb	r2, [r2, #0]
   2a670:	701a      	strb	r2, [r3, #0]
   2a672:	231f      	movs	r3, #31
   2a674:	18fb      	adds	r3, r7, r3
   2a676:	781b      	ldrb	r3, [r3, #0]
   2a678:	2be5      	cmp	r3, #229	; 0xe5
   2a67a:	d004      	beq.n	2a686 <dir_register+0x19a>
   2a67c:	231f      	movs	r3, #31
   2a67e:	18fb      	adds	r3, r7, r3
   2a680:	781b      	ldrb	r3, [r3, #0]
   2a682:	2b00      	cmp	r3, #0
   2a684:	d119      	bne.n	2a6ba <dir_register+0x1ce>
   2a686:	232c      	movs	r3, #44	; 0x2c
   2a688:	18fb      	adds	r3, r7, r3
   2a68a:	881b      	ldrh	r3, [r3, #0]
   2a68c:	2b00      	cmp	r3, #0
   2a68e:	d104      	bne.n	2a69a <dir_register+0x1ae>
   2a690:	2328      	movs	r3, #40	; 0x28
   2a692:	18fb      	adds	r3, r7, r3
   2a694:	687a      	ldr	r2, [r7, #4]
   2a696:	88d2      	ldrh	r2, [r2, #6]
   2a698:	801a      	strh	r2, [r3, #0]
   2a69a:	232c      	movs	r3, #44	; 0x2c
   2a69c:	18fb      	adds	r3, r7, r3
   2a69e:	222c      	movs	r2, #44	; 0x2c
   2a6a0:	18ba      	adds	r2, r7, r2
   2a6a2:	8812      	ldrh	r2, [r2, #0]
   2a6a4:	3201      	adds	r2, #1
   2a6a6:	801a      	strh	r2, [r3, #0]
   2a6a8:	232c      	movs	r3, #44	; 0x2c
   2a6aa:	18fa      	adds	r2, r7, r3
   2a6ac:	232a      	movs	r3, #42	; 0x2a
   2a6ae:	18fb      	adds	r3, r7, r3
   2a6b0:	8812      	ldrh	r2, [r2, #0]
   2a6b2:	881b      	ldrh	r3, [r3, #0]
   2a6b4:	429a      	cmp	r2, r3
   2a6b6:	d104      	bne.n	2a6c2 <dir_register+0x1d6>
   2a6b8:	e013      	b.n	2a6e2 <dir_register+0x1f6>
   2a6ba:	232c      	movs	r3, #44	; 0x2c
   2a6bc:	18fb      	adds	r3, r7, r3
   2a6be:	2200      	movs	r2, #0
   2a6c0:	801a      	strh	r2, [r3, #0]
   2a6c2:	232f      	movs	r3, #47	; 0x2f
   2a6c4:	18fc      	adds	r4, r7, r3
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	2101      	movs	r1, #1
   2a6ca:	0018      	movs	r0, r3
   2a6cc:	4b5d      	ldr	r3, [pc, #372]	; (2a844 <dir_register+0x358>)
   2a6ce:	4798      	blx	r3
   2a6d0:	0003      	movs	r3, r0
   2a6d2:	7023      	strb	r3, [r4, #0]
   2a6d4:	232f      	movs	r3, #47	; 0x2f
   2a6d6:	18fb      	adds	r3, r7, r3
   2a6d8:	781b      	ldrb	r3, [r3, #0]
   2a6da:	2b00      	cmp	r3, #0
   2a6dc:	d0b2      	beq.n	2a644 <dir_register+0x158>
   2a6de:	e000      	b.n	2a6e2 <dir_register+0x1f6>
   2a6e0:	46c0      	nop			; (mov r8, r8)
   2a6e2:	232f      	movs	r3, #47	; 0x2f
   2a6e4:	18fb      	adds	r3, r7, r3
   2a6e6:	781b      	ldrb	r3, [r3, #0]
   2a6e8:	2b00      	cmp	r3, #0
   2a6ea:	d163      	bne.n	2a7b4 <dir_register+0x2c8>
   2a6ec:	232a      	movs	r3, #42	; 0x2a
   2a6ee:	18fb      	adds	r3, r7, r3
   2a6f0:	881b      	ldrh	r3, [r3, #0]
   2a6f2:	2b01      	cmp	r3, #1
   2a6f4:	d95e      	bls.n	2a7b4 <dir_register+0x2c8>
   2a6f6:	232f      	movs	r3, #47	; 0x2f
   2a6f8:	18fc      	adds	r4, r7, r3
   2a6fa:	2328      	movs	r3, #40	; 0x28
   2a6fc:	18fb      	adds	r3, r7, r3
   2a6fe:	881a      	ldrh	r2, [r3, #0]
   2a700:	687b      	ldr	r3, [r7, #4]
   2a702:	0011      	movs	r1, r2
   2a704:	0018      	movs	r0, r3
   2a706:	4b4d      	ldr	r3, [pc, #308]	; (2a83c <dir_register+0x350>)
   2a708:	4798      	blx	r3
   2a70a:	0003      	movs	r3, r0
   2a70c:	7023      	strb	r3, [r4, #0]
   2a70e:	232f      	movs	r3, #47	; 0x2f
   2a710:	18fb      	adds	r3, r7, r3
   2a712:	781b      	ldrb	r3, [r3, #0]
   2a714:	2b00      	cmp	r3, #0
   2a716:	d14d      	bne.n	2a7b4 <dir_register+0x2c8>
   2a718:	687b      	ldr	r3, [r7, #4]
   2a71a:	699b      	ldr	r3, [r3, #24]
   2a71c:	221e      	movs	r2, #30
   2a71e:	18bc      	adds	r4, r7, r2
   2a720:	0018      	movs	r0, r3
   2a722:	4b49      	ldr	r3, [pc, #292]	; (2a848 <dir_register+0x35c>)
   2a724:	4798      	blx	r3
   2a726:	0003      	movs	r3, r0
   2a728:	7023      	strb	r3, [r4, #0]
   2a72a:	232a      	movs	r3, #42	; 0x2a
   2a72c:	18fb      	adds	r3, r7, r3
   2a72e:	881a      	ldrh	r2, [r3, #0]
   2a730:	232a      	movs	r3, #42	; 0x2a
   2a732:	18fb      	adds	r3, r7, r3
   2a734:	3a01      	subs	r2, #1
   2a736:	801a      	strh	r2, [r3, #0]
   2a738:	687b      	ldr	r3, [r7, #4]
   2a73a:	681a      	ldr	r2, [r3, #0]
   2a73c:	687b      	ldr	r3, [r7, #4]
   2a73e:	691b      	ldr	r3, [r3, #16]
   2a740:	212f      	movs	r1, #47	; 0x2f
   2a742:	187c      	adds	r4, r7, r1
   2a744:	0019      	movs	r1, r3
   2a746:	0010      	movs	r0, r2
   2a748:	4b3d      	ldr	r3, [pc, #244]	; (2a840 <dir_register+0x354>)
   2a74a:	4798      	blx	r3
   2a74c:	0003      	movs	r3, r0
   2a74e:	7023      	strb	r3, [r4, #0]
   2a750:	232f      	movs	r3, #47	; 0x2f
   2a752:	18fb      	adds	r3, r7, r3
   2a754:	781b      	ldrb	r3, [r3, #0]
   2a756:	2b00      	cmp	r3, #0
   2a758:	d12b      	bne.n	2a7b2 <dir_register+0x2c6>
   2a75a:	687b      	ldr	r3, [r7, #4]
   2a75c:	69d8      	ldr	r0, [r3, #28]
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	6959      	ldr	r1, [r3, #20]
   2a762:	232a      	movs	r3, #42	; 0x2a
   2a764:	18fb      	adds	r3, r7, r3
   2a766:	881b      	ldrh	r3, [r3, #0]
   2a768:	b2da      	uxtb	r2, r3
   2a76a:	231e      	movs	r3, #30
   2a76c:	18fb      	adds	r3, r7, r3
   2a76e:	781b      	ldrb	r3, [r3, #0]
   2a770:	4c36      	ldr	r4, [pc, #216]	; (2a84c <dir_register+0x360>)
   2a772:	47a0      	blx	r4
   2a774:	687b      	ldr	r3, [r7, #4]
   2a776:	681b      	ldr	r3, [r3, #0]
   2a778:	2201      	movs	r2, #1
   2a77a:	711a      	strb	r2, [r3, #4]
   2a77c:	232f      	movs	r3, #47	; 0x2f
   2a77e:	18fc      	adds	r4, r7, r3
   2a780:	687b      	ldr	r3, [r7, #4]
   2a782:	2100      	movs	r1, #0
   2a784:	0018      	movs	r0, r3
   2a786:	4b2f      	ldr	r3, [pc, #188]	; (2a844 <dir_register+0x358>)
   2a788:	4798      	blx	r3
   2a78a:	0003      	movs	r3, r0
   2a78c:	7023      	strb	r3, [r4, #0]
   2a78e:	232f      	movs	r3, #47	; 0x2f
   2a790:	18fb      	adds	r3, r7, r3
   2a792:	781b      	ldrb	r3, [r3, #0]
   2a794:	2b00      	cmp	r3, #0
   2a796:	d10d      	bne.n	2a7b4 <dir_register+0x2c8>
   2a798:	232a      	movs	r3, #42	; 0x2a
   2a79a:	18fb      	adds	r3, r7, r3
   2a79c:	222a      	movs	r2, #42	; 0x2a
   2a79e:	18ba      	adds	r2, r7, r2
   2a7a0:	8812      	ldrh	r2, [r2, #0]
   2a7a2:	3a01      	subs	r2, #1
   2a7a4:	801a      	strh	r2, [r3, #0]
   2a7a6:	232a      	movs	r3, #42	; 0x2a
   2a7a8:	18fb      	adds	r3, r7, r3
   2a7aa:	881b      	ldrh	r3, [r3, #0]
   2a7ac:	2b00      	cmp	r3, #0
   2a7ae:	d1c3      	bne.n	2a738 <dir_register+0x24c>
   2a7b0:	e000      	b.n	2a7b4 <dir_register+0x2c8>
   2a7b2:	46c0      	nop			; (mov r8, r8)
   2a7b4:	232f      	movs	r3, #47	; 0x2f
   2a7b6:	18fb      	adds	r3, r7, r3
   2a7b8:	781b      	ldrb	r3, [r3, #0]
   2a7ba:	2b00      	cmp	r3, #0
   2a7bc:	d12f      	bne.n	2a81e <dir_register+0x332>
   2a7be:	687b      	ldr	r3, [r7, #4]
   2a7c0:	681a      	ldr	r2, [r3, #0]
   2a7c2:	687b      	ldr	r3, [r7, #4]
   2a7c4:	691b      	ldr	r3, [r3, #16]
   2a7c6:	212f      	movs	r1, #47	; 0x2f
   2a7c8:	187c      	adds	r4, r7, r1
   2a7ca:	0019      	movs	r1, r3
   2a7cc:	0010      	movs	r0, r2
   2a7ce:	4b1c      	ldr	r3, [pc, #112]	; (2a840 <dir_register+0x354>)
   2a7d0:	4798      	blx	r3
   2a7d2:	0003      	movs	r3, r0
   2a7d4:	7023      	strb	r3, [r4, #0]
   2a7d6:	232f      	movs	r3, #47	; 0x2f
   2a7d8:	18fb      	adds	r3, r7, r3
   2a7da:	781b      	ldrb	r3, [r3, #0]
   2a7dc:	2b00      	cmp	r3, #0
   2a7de:	d11e      	bne.n	2a81e <dir_register+0x332>
   2a7e0:	687b      	ldr	r3, [r7, #4]
   2a7e2:	695b      	ldr	r3, [r3, #20]
   2a7e4:	61bb      	str	r3, [r7, #24]
   2a7e6:	69bb      	ldr	r3, [r7, #24]
   2a7e8:	2220      	movs	r2, #32
   2a7ea:	2100      	movs	r1, #0
   2a7ec:	0018      	movs	r0, r3
   2a7ee:	4b18      	ldr	r3, [pc, #96]	; (2a850 <dir_register+0x364>)
   2a7f0:	4798      	blx	r3
   2a7f2:	687b      	ldr	r3, [r7, #4]
   2a7f4:	6999      	ldr	r1, [r3, #24]
   2a7f6:	69bb      	ldr	r3, [r7, #24]
   2a7f8:	220b      	movs	r2, #11
   2a7fa:	0018      	movs	r0, r3
   2a7fc:	4b0b      	ldr	r3, [pc, #44]	; (2a82c <dir_register+0x340>)
   2a7fe:	4798      	blx	r3
   2a800:	69bb      	ldr	r3, [r7, #24]
   2a802:	330c      	adds	r3, #12
   2a804:	001a      	movs	r2, r3
   2a806:	687b      	ldr	r3, [r7, #4]
   2a808:	699b      	ldr	r3, [r3, #24]
   2a80a:	330b      	adds	r3, #11
   2a80c:	781b      	ldrb	r3, [r3, #0]
   2a80e:	2118      	movs	r1, #24
   2a810:	400b      	ands	r3, r1
   2a812:	b2db      	uxtb	r3, r3
   2a814:	7013      	strb	r3, [r2, #0]
   2a816:	687b      	ldr	r3, [r7, #4]
   2a818:	681b      	ldr	r3, [r3, #0]
   2a81a:	2201      	movs	r2, #1
   2a81c:	711a      	strb	r2, [r3, #4]
   2a81e:	232f      	movs	r3, #47	; 0x2f
   2a820:	18fb      	adds	r3, r7, r3
   2a822:	781b      	ldrb	r3, [r3, #0]
   2a824:	0018      	movs	r0, r3
   2a826:	46bd      	mov	sp, r7
   2a828:	b00d      	add	sp, #52	; 0x34
   2a82a:	bd90      	pop	{r4, r7, pc}
   2a82c:	00029345 	.word	0x00029345
   2a830:	0002a1a1 	.word	0x0002a1a1
   2a834:	0002a2f1 	.word	0x0002a2f1
   2a838:	0003065d 	.word	0x0003065d
   2a83c:	00029c6d 	.word	0x00029c6d
   2a840:	00029429 	.word	0x00029429
   2a844:	00029d9d 	.word	0x00029d9d
   2a848:	0002a2a1 	.word	0x0002a2a1
   2a84c:	0002a091 	.word	0x0002a091
   2a850:	0002937d 	.word	0x0002937d

0002a854 <create_name>:
   2a854:	b590      	push	{r4, r7, lr}
   2a856:	b08b      	sub	sp, #44	; 0x2c
   2a858:	af00      	add	r7, sp, #0
   2a85a:	6078      	str	r0, [r7, #4]
   2a85c:	6039      	str	r1, [r7, #0]
   2a85e:	683b      	ldr	r3, [r7, #0]
   2a860:	681b      	ldr	r3, [r3, #0]
   2a862:	613b      	str	r3, [r7, #16]
   2a864:	e002      	b.n	2a86c <create_name+0x18>
   2a866:	693b      	ldr	r3, [r7, #16]
   2a868:	3301      	adds	r3, #1
   2a86a:	613b      	str	r3, [r7, #16]
   2a86c:	693b      	ldr	r3, [r7, #16]
   2a86e:	781b      	ldrb	r3, [r3, #0]
   2a870:	2b2f      	cmp	r3, #47	; 0x2f
   2a872:	d0f8      	beq.n	2a866 <create_name+0x12>
   2a874:	693b      	ldr	r3, [r7, #16]
   2a876:	781b      	ldrb	r3, [r3, #0]
   2a878:	2b5c      	cmp	r3, #92	; 0x5c
   2a87a:	d0f4      	beq.n	2a866 <create_name+0x12>
   2a87c:	687b      	ldr	r3, [r7, #4]
   2a87e:	69db      	ldr	r3, [r3, #28]
   2a880:	60fb      	str	r3, [r7, #12]
   2a882:	2300      	movs	r3, #0
   2a884:	617b      	str	r3, [r7, #20]
   2a886:	697b      	ldr	r3, [r7, #20]
   2a888:	61bb      	str	r3, [r7, #24]
   2a88a:	69bb      	ldr	r3, [r7, #24]
   2a88c:	1c5a      	adds	r2, r3, #1
   2a88e:	61ba      	str	r2, [r7, #24]
   2a890:	693a      	ldr	r2, [r7, #16]
   2a892:	18d3      	adds	r3, r2, r3
   2a894:	781a      	ldrb	r2, [r3, #0]
   2a896:	2324      	movs	r3, #36	; 0x24
   2a898:	18fb      	adds	r3, r7, r3
   2a89a:	801a      	strh	r2, [r3, #0]
   2a89c:	2324      	movs	r3, #36	; 0x24
   2a89e:	18fb      	adds	r3, r7, r3
   2a8a0:	881b      	ldrh	r3, [r3, #0]
   2a8a2:	2b1f      	cmp	r3, #31
   2a8a4:	d944      	bls.n	2a930 <create_name+0xdc>
   2a8a6:	2324      	movs	r3, #36	; 0x24
   2a8a8:	18fb      	adds	r3, r7, r3
   2a8aa:	881b      	ldrh	r3, [r3, #0]
   2a8ac:	2b2f      	cmp	r3, #47	; 0x2f
   2a8ae:	d03f      	beq.n	2a930 <create_name+0xdc>
   2a8b0:	2324      	movs	r3, #36	; 0x24
   2a8b2:	18fb      	adds	r3, r7, r3
   2a8b4:	881b      	ldrh	r3, [r3, #0]
   2a8b6:	2b5c      	cmp	r3, #92	; 0x5c
   2a8b8:	d03a      	beq.n	2a930 <create_name+0xdc>
   2a8ba:	697b      	ldr	r3, [r7, #20]
   2a8bc:	2bfe      	cmp	r3, #254	; 0xfe
   2a8be:	d901      	bls.n	2a8c4 <create_name+0x70>
   2a8c0:	2306      	movs	r3, #6
   2a8c2:	e1e7      	b.n	2ac94 <create_name+0x440>
   2a8c4:	2324      	movs	r3, #36	; 0x24
   2a8c6:	18fb      	adds	r3, r7, r3
   2a8c8:	2224      	movs	r2, #36	; 0x24
   2a8ca:	18ba      	adds	r2, r7, r2
   2a8cc:	8812      	ldrh	r2, [r2, #0]
   2a8ce:	21ff      	movs	r1, #255	; 0xff
   2a8d0:	400a      	ands	r2, r1
   2a8d2:	801a      	strh	r2, [r3, #0]
   2a8d4:	2324      	movs	r3, #36	; 0x24
   2a8d6:	18fc      	adds	r4, r7, r3
   2a8d8:	2324      	movs	r3, #36	; 0x24
   2a8da:	18fb      	adds	r3, r7, r3
   2a8dc:	881b      	ldrh	r3, [r3, #0]
   2a8de:	2101      	movs	r1, #1
   2a8e0:	0018      	movs	r0, r3
   2a8e2:	4bba      	ldr	r3, [pc, #744]	; (2abcc <create_name+0x378>)
   2a8e4:	4798      	blx	r3
   2a8e6:	0003      	movs	r3, r0
   2a8e8:	8023      	strh	r3, [r4, #0]
   2a8ea:	2324      	movs	r3, #36	; 0x24
   2a8ec:	18fb      	adds	r3, r7, r3
   2a8ee:	881b      	ldrh	r3, [r3, #0]
   2a8f0:	2b00      	cmp	r3, #0
   2a8f2:	d101      	bne.n	2a8f8 <create_name+0xa4>
   2a8f4:	2306      	movs	r3, #6
   2a8f6:	e1cd      	b.n	2ac94 <create_name+0x440>
   2a8f8:	2324      	movs	r3, #36	; 0x24
   2a8fa:	18fb      	adds	r3, r7, r3
   2a8fc:	881b      	ldrh	r3, [r3, #0]
   2a8fe:	2b7f      	cmp	r3, #127	; 0x7f
   2a900:	d80b      	bhi.n	2a91a <create_name+0xc6>
   2a902:	2324      	movs	r3, #36	; 0x24
   2a904:	18fb      	adds	r3, r7, r3
   2a906:	881a      	ldrh	r2, [r3, #0]
   2a908:	4bb1      	ldr	r3, [pc, #708]	; (2abd0 <create_name+0x37c>)
   2a90a:	0011      	movs	r1, r2
   2a90c:	0018      	movs	r0, r3
   2a90e:	4bb1      	ldr	r3, [pc, #708]	; (2abd4 <create_name+0x380>)
   2a910:	4798      	blx	r3
   2a912:	1e03      	subs	r3, r0, #0
   2a914:	d001      	beq.n	2a91a <create_name+0xc6>
   2a916:	2306      	movs	r3, #6
   2a918:	e1bc      	b.n	2ac94 <create_name+0x440>
   2a91a:	697b      	ldr	r3, [r7, #20]
   2a91c:	1c5a      	adds	r2, r3, #1
   2a91e:	617a      	str	r2, [r7, #20]
   2a920:	005b      	lsls	r3, r3, #1
   2a922:	68fa      	ldr	r2, [r7, #12]
   2a924:	18d3      	adds	r3, r2, r3
   2a926:	2224      	movs	r2, #36	; 0x24
   2a928:	18ba      	adds	r2, r7, r2
   2a92a:	8812      	ldrh	r2, [r2, #0]
   2a92c:	801a      	strh	r2, [r3, #0]
   2a92e:	e7ac      	b.n	2a88a <create_name+0x36>
   2a930:	693a      	ldr	r2, [r7, #16]
   2a932:	69bb      	ldr	r3, [r7, #24]
   2a934:	18d2      	adds	r2, r2, r3
   2a936:	683b      	ldr	r3, [r7, #0]
   2a938:	601a      	str	r2, [r3, #0]
   2a93a:	2324      	movs	r3, #36	; 0x24
   2a93c:	18fb      	adds	r3, r7, r3
   2a93e:	881b      	ldrh	r3, [r3, #0]
   2a940:	2b1f      	cmp	r3, #31
   2a942:	d801      	bhi.n	2a948 <create_name+0xf4>
   2a944:	2204      	movs	r2, #4
   2a946:	e000      	b.n	2a94a <create_name+0xf6>
   2a948:	2200      	movs	r2, #0
   2a94a:	2326      	movs	r3, #38	; 0x26
   2a94c:	18fb      	adds	r3, r7, r3
   2a94e:	701a      	strb	r2, [r3, #0]
   2a950:	e017      	b.n	2a982 <create_name+0x12e>
   2a952:	697b      	ldr	r3, [r7, #20]
   2a954:	4aa0      	ldr	r2, [pc, #640]	; (2abd8 <create_name+0x384>)
   2a956:	4694      	mov	ip, r2
   2a958:	4463      	add	r3, ip
   2a95a:	005b      	lsls	r3, r3, #1
   2a95c:	68fa      	ldr	r2, [r7, #12]
   2a95e:	18d2      	adds	r2, r2, r3
   2a960:	2324      	movs	r3, #36	; 0x24
   2a962:	18fb      	adds	r3, r7, r3
   2a964:	8812      	ldrh	r2, [r2, #0]
   2a966:	801a      	strh	r2, [r3, #0]
   2a968:	2324      	movs	r3, #36	; 0x24
   2a96a:	18fb      	adds	r3, r7, r3
   2a96c:	881b      	ldrh	r3, [r3, #0]
   2a96e:	2b20      	cmp	r3, #32
   2a970:	d004      	beq.n	2a97c <create_name+0x128>
   2a972:	2324      	movs	r3, #36	; 0x24
   2a974:	18fb      	adds	r3, r7, r3
   2a976:	881b      	ldrh	r3, [r3, #0]
   2a978:	2b2e      	cmp	r3, #46	; 0x2e
   2a97a:	d106      	bne.n	2a98a <create_name+0x136>
   2a97c:	697b      	ldr	r3, [r7, #20]
   2a97e:	3b01      	subs	r3, #1
   2a980:	617b      	str	r3, [r7, #20]
   2a982:	697b      	ldr	r3, [r7, #20]
   2a984:	2b00      	cmp	r3, #0
   2a986:	d1e4      	bne.n	2a952 <create_name+0xfe>
   2a988:	e000      	b.n	2a98c <create_name+0x138>
   2a98a:	46c0      	nop			; (mov r8, r8)
   2a98c:	697b      	ldr	r3, [r7, #20]
   2a98e:	2b00      	cmp	r3, #0
   2a990:	d101      	bne.n	2a996 <create_name+0x142>
   2a992:	2306      	movs	r3, #6
   2a994:	e17e      	b.n	2ac94 <create_name+0x440>
   2a996:	697b      	ldr	r3, [r7, #20]
   2a998:	005b      	lsls	r3, r3, #1
   2a99a:	68fa      	ldr	r2, [r7, #12]
   2a99c:	18d3      	adds	r3, r2, r3
   2a99e:	2200      	movs	r2, #0
   2a9a0:	801a      	strh	r2, [r3, #0]
   2a9a2:	687b      	ldr	r3, [r7, #4]
   2a9a4:	699b      	ldr	r3, [r3, #24]
   2a9a6:	220b      	movs	r2, #11
   2a9a8:	2120      	movs	r1, #32
   2a9aa:	0018      	movs	r0, r3
   2a9ac:	4b8b      	ldr	r3, [pc, #556]	; (2abdc <create_name+0x388>)
   2a9ae:	4798      	blx	r3
   2a9b0:	2300      	movs	r3, #0
   2a9b2:	61bb      	str	r3, [r7, #24]
   2a9b4:	e002      	b.n	2a9bc <create_name+0x168>
   2a9b6:	69bb      	ldr	r3, [r7, #24]
   2a9b8:	3301      	adds	r3, #1
   2a9ba:	61bb      	str	r3, [r7, #24]
   2a9bc:	69bb      	ldr	r3, [r7, #24]
   2a9be:	005b      	lsls	r3, r3, #1
   2a9c0:	68fa      	ldr	r2, [r7, #12]
   2a9c2:	18d3      	adds	r3, r2, r3
   2a9c4:	881b      	ldrh	r3, [r3, #0]
   2a9c6:	2b20      	cmp	r3, #32
   2a9c8:	d0f5      	beq.n	2a9b6 <create_name+0x162>
   2a9ca:	69bb      	ldr	r3, [r7, #24]
   2a9cc:	005b      	lsls	r3, r3, #1
   2a9ce:	68fa      	ldr	r2, [r7, #12]
   2a9d0:	18d3      	adds	r3, r2, r3
   2a9d2:	881b      	ldrh	r3, [r3, #0]
   2a9d4:	2b2e      	cmp	r3, #46	; 0x2e
   2a9d6:	d0ee      	beq.n	2a9b6 <create_name+0x162>
   2a9d8:	69bb      	ldr	r3, [r7, #24]
   2a9da:	2b00      	cmp	r3, #0
   2a9dc:	d00b      	beq.n	2a9f6 <create_name+0x1a2>
   2a9de:	2326      	movs	r3, #38	; 0x26
   2a9e0:	18fb      	adds	r3, r7, r3
   2a9e2:	2226      	movs	r2, #38	; 0x26
   2a9e4:	18ba      	adds	r2, r7, r2
   2a9e6:	7812      	ldrb	r2, [r2, #0]
   2a9e8:	2103      	movs	r1, #3
   2a9ea:	430a      	orrs	r2, r1
   2a9ec:	701a      	strb	r2, [r3, #0]
   2a9ee:	e002      	b.n	2a9f6 <create_name+0x1a2>
   2a9f0:	697b      	ldr	r3, [r7, #20]
   2a9f2:	3b01      	subs	r3, #1
   2a9f4:	617b      	str	r3, [r7, #20]
   2a9f6:	697b      	ldr	r3, [r7, #20]
   2a9f8:	2b00      	cmp	r3, #0
   2a9fa:	d009      	beq.n	2aa10 <create_name+0x1bc>
   2a9fc:	697b      	ldr	r3, [r7, #20]
   2a9fe:	4a76      	ldr	r2, [pc, #472]	; (2abd8 <create_name+0x384>)
   2aa00:	4694      	mov	ip, r2
   2aa02:	4463      	add	r3, ip
   2aa04:	005b      	lsls	r3, r3, #1
   2aa06:	68fa      	ldr	r2, [r7, #12]
   2aa08:	18d3      	adds	r3, r2, r3
   2aa0a:	881b      	ldrh	r3, [r3, #0]
   2aa0c:	2b2e      	cmp	r3, #46	; 0x2e
   2aa0e:	d1ef      	bne.n	2a9f0 <create_name+0x19c>
   2aa10:	2300      	movs	r3, #0
   2aa12:	623b      	str	r3, [r7, #32]
   2aa14:	2327      	movs	r3, #39	; 0x27
   2aa16:	18fb      	adds	r3, r7, r3
   2aa18:	2200      	movs	r2, #0
   2aa1a:	701a      	strb	r2, [r3, #0]
   2aa1c:	2308      	movs	r3, #8
   2aa1e:	61fb      	str	r3, [r7, #28]
   2aa20:	69bb      	ldr	r3, [r7, #24]
   2aa22:	1c5a      	adds	r2, r3, #1
   2aa24:	61ba      	str	r2, [r7, #24]
   2aa26:	005b      	lsls	r3, r3, #1
   2aa28:	68fa      	ldr	r2, [r7, #12]
   2aa2a:	18d2      	adds	r2, r2, r3
   2aa2c:	2324      	movs	r3, #36	; 0x24
   2aa2e:	18fb      	adds	r3, r7, r3
   2aa30:	8812      	ldrh	r2, [r2, #0]
   2aa32:	801a      	strh	r2, [r3, #0]
   2aa34:	2324      	movs	r3, #36	; 0x24
   2aa36:	18fb      	adds	r3, r7, r3
   2aa38:	881b      	ldrh	r3, [r3, #0]
   2aa3a:	2b00      	cmp	r3, #0
   2aa3c:	d100      	bne.n	2aa40 <create_name+0x1ec>
   2aa3e:	e0c3      	b.n	2abc8 <create_name+0x374>
   2aa40:	2324      	movs	r3, #36	; 0x24
   2aa42:	18fb      	adds	r3, r7, r3
   2aa44:	881b      	ldrh	r3, [r3, #0]
   2aa46:	2b20      	cmp	r3, #32
   2aa48:	d008      	beq.n	2aa5c <create_name+0x208>
   2aa4a:	2324      	movs	r3, #36	; 0x24
   2aa4c:	18fb      	adds	r3, r7, r3
   2aa4e:	881b      	ldrh	r3, [r3, #0]
   2aa50:	2b2e      	cmp	r3, #46	; 0x2e
   2aa52:	d10c      	bne.n	2aa6e <create_name+0x21a>
   2aa54:	69ba      	ldr	r2, [r7, #24]
   2aa56:	697b      	ldr	r3, [r7, #20]
   2aa58:	429a      	cmp	r2, r3
   2aa5a:	d008      	beq.n	2aa6e <create_name+0x21a>
   2aa5c:	2326      	movs	r3, #38	; 0x26
   2aa5e:	18fb      	adds	r3, r7, r3
   2aa60:	2226      	movs	r2, #38	; 0x26
   2aa62:	18ba      	adds	r2, r7, r2
   2aa64:	7812      	ldrb	r2, [r2, #0]
   2aa66:	2103      	movs	r1, #3
   2aa68:	430a      	orrs	r2, r1
   2aa6a:	701a      	strb	r2, [r3, #0]
   2aa6c:	e0ab      	b.n	2abc6 <create_name+0x372>
   2aa6e:	6a3a      	ldr	r2, [r7, #32]
   2aa70:	69fb      	ldr	r3, [r7, #28]
   2aa72:	429a      	cmp	r2, r3
   2aa74:	d203      	bcs.n	2aa7e <create_name+0x22a>
   2aa76:	69ba      	ldr	r2, [r7, #24]
   2aa78:	697b      	ldr	r3, [r7, #20]
   2aa7a:	429a      	cmp	r2, r3
   2aa7c:	d12a      	bne.n	2aad4 <create_name+0x280>
   2aa7e:	69fb      	ldr	r3, [r7, #28]
   2aa80:	2b0b      	cmp	r3, #11
   2aa82:	d108      	bne.n	2aa96 <create_name+0x242>
   2aa84:	2326      	movs	r3, #38	; 0x26
   2aa86:	18fb      	adds	r3, r7, r3
   2aa88:	2226      	movs	r2, #38	; 0x26
   2aa8a:	18ba      	adds	r2, r7, r2
   2aa8c:	7812      	ldrb	r2, [r2, #0]
   2aa8e:	2103      	movs	r1, #3
   2aa90:	430a      	orrs	r2, r1
   2aa92:	701a      	strb	r2, [r3, #0]
   2aa94:	e0a9      	b.n	2abea <create_name+0x396>
   2aa96:	69ba      	ldr	r2, [r7, #24]
   2aa98:	697b      	ldr	r3, [r7, #20]
   2aa9a:	429a      	cmp	r2, r3
   2aa9c:	d007      	beq.n	2aaae <create_name+0x25a>
   2aa9e:	2326      	movs	r3, #38	; 0x26
   2aaa0:	18fb      	adds	r3, r7, r3
   2aaa2:	2226      	movs	r2, #38	; 0x26
   2aaa4:	18ba      	adds	r2, r7, r2
   2aaa6:	7812      	ldrb	r2, [r2, #0]
   2aaa8:	2103      	movs	r1, #3
   2aaaa:	430a      	orrs	r2, r1
   2aaac:	701a      	strb	r2, [r3, #0]
   2aaae:	69ba      	ldr	r2, [r7, #24]
   2aab0:	697b      	ldr	r3, [r7, #20]
   2aab2:	429a      	cmp	r2, r3
   2aab4:	d900      	bls.n	2aab8 <create_name+0x264>
   2aab6:	e097      	b.n	2abe8 <create_name+0x394>
   2aab8:	697b      	ldr	r3, [r7, #20]
   2aaba:	61bb      	str	r3, [r7, #24]
   2aabc:	2308      	movs	r3, #8
   2aabe:	623b      	str	r3, [r7, #32]
   2aac0:	230b      	movs	r3, #11
   2aac2:	61fb      	str	r3, [r7, #28]
   2aac4:	2327      	movs	r3, #39	; 0x27
   2aac6:	18fb      	adds	r3, r7, r3
   2aac8:	2227      	movs	r2, #39	; 0x27
   2aaca:	18ba      	adds	r2, r7, r2
   2aacc:	7812      	ldrb	r2, [r2, #0]
   2aace:	0092      	lsls	r2, r2, #2
   2aad0:	701a      	strb	r2, [r3, #0]
   2aad2:	e078      	b.n	2abc6 <create_name+0x372>
   2aad4:	2324      	movs	r3, #36	; 0x24
   2aad6:	18fb      	adds	r3, r7, r3
   2aad8:	881b      	ldrh	r3, [r3, #0]
   2aada:	2b7f      	cmp	r3, #127	; 0x7f
   2aadc:	d920      	bls.n	2ab20 <create_name+0x2cc>
   2aade:	2324      	movs	r3, #36	; 0x24
   2aae0:	18fc      	adds	r4, r7, r3
   2aae2:	2324      	movs	r3, #36	; 0x24
   2aae4:	18fb      	adds	r3, r7, r3
   2aae6:	881b      	ldrh	r3, [r3, #0]
   2aae8:	2100      	movs	r1, #0
   2aaea:	0018      	movs	r0, r3
   2aaec:	4b37      	ldr	r3, [pc, #220]	; (2abcc <create_name+0x378>)
   2aaee:	4798      	blx	r3
   2aaf0:	0003      	movs	r3, r0
   2aaf2:	8023      	strh	r3, [r4, #0]
   2aaf4:	2324      	movs	r3, #36	; 0x24
   2aaf6:	18fb      	adds	r3, r7, r3
   2aaf8:	881b      	ldrh	r3, [r3, #0]
   2aafa:	2b00      	cmp	r3, #0
   2aafc:	d008      	beq.n	2ab10 <create_name+0x2bc>
   2aafe:	2324      	movs	r3, #36	; 0x24
   2ab00:	18fb      	adds	r3, r7, r3
   2ab02:	881b      	ldrh	r3, [r3, #0]
   2ab04:	3b80      	subs	r3, #128	; 0x80
   2ab06:	4a36      	ldr	r2, [pc, #216]	; (2abe0 <create_name+0x38c>)
   2ab08:	5cd2      	ldrb	r2, [r2, r3]
   2ab0a:	2324      	movs	r3, #36	; 0x24
   2ab0c:	18fb      	adds	r3, r7, r3
   2ab0e:	801a      	strh	r2, [r3, #0]
   2ab10:	2326      	movs	r3, #38	; 0x26
   2ab12:	18fb      	adds	r3, r7, r3
   2ab14:	2226      	movs	r2, #38	; 0x26
   2ab16:	18ba      	adds	r2, r7, r2
   2ab18:	7812      	ldrb	r2, [r2, #0]
   2ab1a:	2102      	movs	r1, #2
   2ab1c:	430a      	orrs	r2, r1
   2ab1e:	701a      	strb	r2, [r3, #0]
   2ab20:	2324      	movs	r3, #36	; 0x24
   2ab22:	18fb      	adds	r3, r7, r3
   2ab24:	881b      	ldrh	r3, [r3, #0]
   2ab26:	2b00      	cmp	r3, #0
   2ab28:	d009      	beq.n	2ab3e <create_name+0x2ea>
   2ab2a:	2324      	movs	r3, #36	; 0x24
   2ab2c:	18fb      	adds	r3, r7, r3
   2ab2e:	881a      	ldrh	r2, [r3, #0]
   2ab30:	4b2c      	ldr	r3, [pc, #176]	; (2abe4 <create_name+0x390>)
   2ab32:	0011      	movs	r1, r2
   2ab34:	0018      	movs	r0, r3
   2ab36:	4b27      	ldr	r3, [pc, #156]	; (2abd4 <create_name+0x380>)
   2ab38:	4798      	blx	r3
   2ab3a:	1e03      	subs	r3, r0, #0
   2ab3c:	d00c      	beq.n	2ab58 <create_name+0x304>
   2ab3e:	2324      	movs	r3, #36	; 0x24
   2ab40:	18fb      	adds	r3, r7, r3
   2ab42:	225f      	movs	r2, #95	; 0x5f
   2ab44:	801a      	strh	r2, [r3, #0]
   2ab46:	2326      	movs	r3, #38	; 0x26
   2ab48:	18fb      	adds	r3, r7, r3
   2ab4a:	2226      	movs	r2, #38	; 0x26
   2ab4c:	18ba      	adds	r2, r7, r2
   2ab4e:	7812      	ldrb	r2, [r2, #0]
   2ab50:	2103      	movs	r1, #3
   2ab52:	430a      	orrs	r2, r1
   2ab54:	701a      	strb	r2, [r3, #0]
   2ab56:	e02b      	b.n	2abb0 <create_name+0x35c>
   2ab58:	2324      	movs	r3, #36	; 0x24
   2ab5a:	18fb      	adds	r3, r7, r3
   2ab5c:	881b      	ldrh	r3, [r3, #0]
   2ab5e:	2b40      	cmp	r3, #64	; 0x40
   2ab60:	d90d      	bls.n	2ab7e <create_name+0x32a>
   2ab62:	2324      	movs	r3, #36	; 0x24
   2ab64:	18fb      	adds	r3, r7, r3
   2ab66:	881b      	ldrh	r3, [r3, #0]
   2ab68:	2b5a      	cmp	r3, #90	; 0x5a
   2ab6a:	d808      	bhi.n	2ab7e <create_name+0x32a>
   2ab6c:	2327      	movs	r3, #39	; 0x27
   2ab6e:	18fb      	adds	r3, r7, r3
   2ab70:	2227      	movs	r2, #39	; 0x27
   2ab72:	18ba      	adds	r2, r7, r2
   2ab74:	7812      	ldrb	r2, [r2, #0]
   2ab76:	2102      	movs	r1, #2
   2ab78:	430a      	orrs	r2, r1
   2ab7a:	701a      	strb	r2, [r3, #0]
   2ab7c:	e018      	b.n	2abb0 <create_name+0x35c>
   2ab7e:	2324      	movs	r3, #36	; 0x24
   2ab80:	18fb      	adds	r3, r7, r3
   2ab82:	881b      	ldrh	r3, [r3, #0]
   2ab84:	2b60      	cmp	r3, #96	; 0x60
   2ab86:	d913      	bls.n	2abb0 <create_name+0x35c>
   2ab88:	2324      	movs	r3, #36	; 0x24
   2ab8a:	18fb      	adds	r3, r7, r3
   2ab8c:	881b      	ldrh	r3, [r3, #0]
   2ab8e:	2b7a      	cmp	r3, #122	; 0x7a
   2ab90:	d80e      	bhi.n	2abb0 <create_name+0x35c>
   2ab92:	2327      	movs	r3, #39	; 0x27
   2ab94:	18fb      	adds	r3, r7, r3
   2ab96:	2227      	movs	r2, #39	; 0x27
   2ab98:	18ba      	adds	r2, r7, r2
   2ab9a:	7812      	ldrb	r2, [r2, #0]
   2ab9c:	2101      	movs	r1, #1
   2ab9e:	430a      	orrs	r2, r1
   2aba0:	701a      	strb	r2, [r3, #0]
   2aba2:	2324      	movs	r3, #36	; 0x24
   2aba4:	18fb      	adds	r3, r7, r3
   2aba6:	2224      	movs	r2, #36	; 0x24
   2aba8:	18ba      	adds	r2, r7, r2
   2abaa:	8812      	ldrh	r2, [r2, #0]
   2abac:	3a20      	subs	r2, #32
   2abae:	801a      	strh	r2, [r3, #0]
   2abb0:	687b      	ldr	r3, [r7, #4]
   2abb2:	699a      	ldr	r2, [r3, #24]
   2abb4:	6a3b      	ldr	r3, [r7, #32]
   2abb6:	1c59      	adds	r1, r3, #1
   2abb8:	6239      	str	r1, [r7, #32]
   2abba:	18d3      	adds	r3, r2, r3
   2abbc:	2224      	movs	r2, #36	; 0x24
   2abbe:	18ba      	adds	r2, r7, r2
   2abc0:	8812      	ldrh	r2, [r2, #0]
   2abc2:	b2d2      	uxtb	r2, r2
   2abc4:	701a      	strb	r2, [r3, #0]
   2abc6:	e72b      	b.n	2aa20 <create_name+0x1cc>
   2abc8:	46c0      	nop			; (mov r8, r8)
   2abca:	e00e      	b.n	2abea <create_name+0x396>
   2abcc:	0002bf8d 	.word	0x0002bf8d
   2abd0:	00036a94 	.word	0x00036a94
   2abd4:	000293f7 	.word	0x000293f7
   2abd8:	7fffffff 	.word	0x7fffffff
   2abdc:	0002937d 	.word	0x0002937d
   2abe0:	00036adc 	.word	0x00036adc
   2abe4:	00036aa0 	.word	0x00036aa0
   2abe8:	46c0      	nop			; (mov r8, r8)
   2abea:	687b      	ldr	r3, [r7, #4]
   2abec:	699b      	ldr	r3, [r3, #24]
   2abee:	781b      	ldrb	r3, [r3, #0]
   2abf0:	2be5      	cmp	r3, #229	; 0xe5
   2abf2:	d103      	bne.n	2abfc <create_name+0x3a8>
   2abf4:	687b      	ldr	r3, [r7, #4]
   2abf6:	699b      	ldr	r3, [r3, #24]
   2abf8:	2205      	movs	r2, #5
   2abfa:	701a      	strb	r2, [r3, #0]
   2abfc:	69fb      	ldr	r3, [r7, #28]
   2abfe:	2b08      	cmp	r3, #8
   2ac00:	d106      	bne.n	2ac10 <create_name+0x3bc>
   2ac02:	2327      	movs	r3, #39	; 0x27
   2ac04:	18fb      	adds	r3, r7, r3
   2ac06:	2227      	movs	r2, #39	; 0x27
   2ac08:	18ba      	adds	r2, r7, r2
   2ac0a:	7812      	ldrb	r2, [r2, #0]
   2ac0c:	0092      	lsls	r2, r2, #2
   2ac0e:	701a      	strb	r2, [r3, #0]
   2ac10:	2327      	movs	r3, #39	; 0x27
   2ac12:	18fb      	adds	r3, r7, r3
   2ac14:	781b      	ldrb	r3, [r3, #0]
   2ac16:	220c      	movs	r2, #12
   2ac18:	4013      	ands	r3, r2
   2ac1a:	2b0c      	cmp	r3, #12
   2ac1c:	d006      	beq.n	2ac2c <create_name+0x3d8>
   2ac1e:	2327      	movs	r3, #39	; 0x27
   2ac20:	18fb      	adds	r3, r7, r3
   2ac22:	781b      	ldrb	r3, [r3, #0]
   2ac24:	2203      	movs	r2, #3
   2ac26:	4013      	ands	r3, r2
   2ac28:	2b03      	cmp	r3, #3
   2ac2a:	d107      	bne.n	2ac3c <create_name+0x3e8>
   2ac2c:	2326      	movs	r3, #38	; 0x26
   2ac2e:	18fb      	adds	r3, r7, r3
   2ac30:	2226      	movs	r2, #38	; 0x26
   2ac32:	18ba      	adds	r2, r7, r2
   2ac34:	7812      	ldrb	r2, [r2, #0]
   2ac36:	2102      	movs	r1, #2
   2ac38:	430a      	orrs	r2, r1
   2ac3a:	701a      	strb	r2, [r3, #0]
   2ac3c:	2326      	movs	r3, #38	; 0x26
   2ac3e:	18fb      	adds	r3, r7, r3
   2ac40:	781b      	ldrb	r3, [r3, #0]
   2ac42:	2202      	movs	r2, #2
   2ac44:	4013      	ands	r3, r2
   2ac46:	d11d      	bne.n	2ac84 <create_name+0x430>
   2ac48:	2327      	movs	r3, #39	; 0x27
   2ac4a:	18fb      	adds	r3, r7, r3
   2ac4c:	781b      	ldrb	r3, [r3, #0]
   2ac4e:	2203      	movs	r2, #3
   2ac50:	4013      	ands	r3, r2
   2ac52:	2b01      	cmp	r3, #1
   2ac54:	d107      	bne.n	2ac66 <create_name+0x412>
   2ac56:	2326      	movs	r3, #38	; 0x26
   2ac58:	18fb      	adds	r3, r7, r3
   2ac5a:	2226      	movs	r2, #38	; 0x26
   2ac5c:	18ba      	adds	r2, r7, r2
   2ac5e:	7812      	ldrb	r2, [r2, #0]
   2ac60:	2110      	movs	r1, #16
   2ac62:	430a      	orrs	r2, r1
   2ac64:	701a      	strb	r2, [r3, #0]
   2ac66:	2327      	movs	r3, #39	; 0x27
   2ac68:	18fb      	adds	r3, r7, r3
   2ac6a:	781b      	ldrb	r3, [r3, #0]
   2ac6c:	220c      	movs	r2, #12
   2ac6e:	4013      	ands	r3, r2
   2ac70:	2b04      	cmp	r3, #4
   2ac72:	d107      	bne.n	2ac84 <create_name+0x430>
   2ac74:	2326      	movs	r3, #38	; 0x26
   2ac76:	18fb      	adds	r3, r7, r3
   2ac78:	2226      	movs	r2, #38	; 0x26
   2ac7a:	18ba      	adds	r2, r7, r2
   2ac7c:	7812      	ldrb	r2, [r2, #0]
   2ac7e:	2108      	movs	r1, #8
   2ac80:	430a      	orrs	r2, r1
   2ac82:	701a      	strb	r2, [r3, #0]
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	699b      	ldr	r3, [r3, #24]
   2ac88:	330b      	adds	r3, #11
   2ac8a:	2226      	movs	r2, #38	; 0x26
   2ac8c:	18ba      	adds	r2, r7, r2
   2ac8e:	7812      	ldrb	r2, [r2, #0]
   2ac90:	701a      	strb	r2, [r3, #0]
   2ac92:	2300      	movs	r3, #0
   2ac94:	0018      	movs	r0, r3
   2ac96:	46bd      	mov	sp, r7
   2ac98:	b00b      	add	sp, #44	; 0x2c
   2ac9a:	bd90      	pop	{r4, r7, pc}

0002ac9c <follow_path>:
   2ac9c:	b590      	push	{r4, r7, lr}
   2ac9e:	b085      	sub	sp, #20
   2aca0:	af00      	add	r7, sp, #0
   2aca2:	6078      	str	r0, [r7, #4]
   2aca4:	6039      	str	r1, [r7, #0]
   2aca6:	683b      	ldr	r3, [r7, #0]
   2aca8:	781b      	ldrb	r3, [r3, #0]
   2acaa:	2b2f      	cmp	r3, #47	; 0x2f
   2acac:	d003      	beq.n	2acb6 <follow_path+0x1a>
   2acae:	683b      	ldr	r3, [r7, #0]
   2acb0:	781b      	ldrb	r3, [r3, #0]
   2acb2:	2b5c      	cmp	r3, #92	; 0x5c
   2acb4:	d102      	bne.n	2acbc <follow_path+0x20>
   2acb6:	683b      	ldr	r3, [r7, #0]
   2acb8:	3301      	adds	r3, #1
   2acba:	603b      	str	r3, [r7, #0]
   2acbc:	687b      	ldr	r3, [r7, #4]
   2acbe:	2200      	movs	r2, #0
   2acc0:	609a      	str	r2, [r3, #8]
   2acc2:	683b      	ldr	r3, [r7, #0]
   2acc4:	781b      	ldrb	r3, [r3, #0]
   2acc6:	2b1f      	cmp	r3, #31
   2acc8:	d80c      	bhi.n	2ace4 <follow_path+0x48>
   2acca:	230f      	movs	r3, #15
   2accc:	18fc      	adds	r4, r7, r3
   2acce:	687b      	ldr	r3, [r7, #4]
   2acd0:	2100      	movs	r1, #0
   2acd2:	0018      	movs	r0, r3
   2acd4:	4b3c      	ldr	r3, [pc, #240]	; (2adc8 <follow_path+0x12c>)
   2acd6:	4798      	blx	r3
   2acd8:	0003      	movs	r3, r0
   2acda:	7023      	strb	r3, [r4, #0]
   2acdc:	687b      	ldr	r3, [r7, #4]
   2acde:	2200      	movs	r2, #0
   2ace0:	615a      	str	r2, [r3, #20]
   2ace2:	e06a      	b.n	2adba <follow_path+0x11e>
   2ace4:	230f      	movs	r3, #15
   2ace6:	18fc      	adds	r4, r7, r3
   2ace8:	003a      	movs	r2, r7
   2acea:	687b      	ldr	r3, [r7, #4]
   2acec:	0011      	movs	r1, r2
   2acee:	0018      	movs	r0, r3
   2acf0:	4b36      	ldr	r3, [pc, #216]	; (2adcc <follow_path+0x130>)
   2acf2:	4798      	blx	r3
   2acf4:	0003      	movs	r3, r0
   2acf6:	7023      	strb	r3, [r4, #0]
   2acf8:	230f      	movs	r3, #15
   2acfa:	18fb      	adds	r3, r7, r3
   2acfc:	781b      	ldrb	r3, [r3, #0]
   2acfe:	2b00      	cmp	r3, #0
   2ad00:	d154      	bne.n	2adac <follow_path+0x110>
   2ad02:	230f      	movs	r3, #15
   2ad04:	18fc      	adds	r4, r7, r3
   2ad06:	687b      	ldr	r3, [r7, #4]
   2ad08:	0018      	movs	r0, r3
   2ad0a:	4b31      	ldr	r3, [pc, #196]	; (2add0 <follow_path+0x134>)
   2ad0c:	4798      	blx	r3
   2ad0e:	0003      	movs	r3, r0
   2ad10:	7023      	strb	r3, [r4, #0]
   2ad12:	687b      	ldr	r3, [r7, #4]
   2ad14:	699a      	ldr	r2, [r3, #24]
   2ad16:	230e      	movs	r3, #14
   2ad18:	18fb      	adds	r3, r7, r3
   2ad1a:	7ad2      	ldrb	r2, [r2, #11]
   2ad1c:	701a      	strb	r2, [r3, #0]
   2ad1e:	230f      	movs	r3, #15
   2ad20:	18fb      	adds	r3, r7, r3
   2ad22:	781b      	ldrb	r3, [r3, #0]
   2ad24:	2b00      	cmp	r3, #0
   2ad26:	d00f      	beq.n	2ad48 <follow_path+0xac>
   2ad28:	230f      	movs	r3, #15
   2ad2a:	18fb      	adds	r3, r7, r3
   2ad2c:	781b      	ldrb	r3, [r3, #0]
   2ad2e:	2b04      	cmp	r3, #4
   2ad30:	d13e      	bne.n	2adb0 <follow_path+0x114>
   2ad32:	230e      	movs	r3, #14
   2ad34:	18fb      	adds	r3, r7, r3
   2ad36:	781b      	ldrb	r3, [r3, #0]
   2ad38:	2204      	movs	r2, #4
   2ad3a:	4013      	ands	r3, r2
   2ad3c:	d13a      	bne.n	2adb4 <follow_path+0x118>
   2ad3e:	230f      	movs	r3, #15
   2ad40:	18fb      	adds	r3, r7, r3
   2ad42:	2205      	movs	r2, #5
   2ad44:	701a      	strb	r2, [r3, #0]
   2ad46:	e035      	b.n	2adb4 <follow_path+0x118>
   2ad48:	230e      	movs	r3, #14
   2ad4a:	18fb      	adds	r3, r7, r3
   2ad4c:	781b      	ldrb	r3, [r3, #0]
   2ad4e:	2204      	movs	r2, #4
   2ad50:	4013      	ands	r3, r2
   2ad52:	d131      	bne.n	2adb8 <follow_path+0x11c>
   2ad54:	687b      	ldr	r3, [r7, #4]
   2ad56:	695b      	ldr	r3, [r3, #20]
   2ad58:	60bb      	str	r3, [r7, #8]
   2ad5a:	68bb      	ldr	r3, [r7, #8]
   2ad5c:	330b      	adds	r3, #11
   2ad5e:	781b      	ldrb	r3, [r3, #0]
   2ad60:	001a      	movs	r2, r3
   2ad62:	2310      	movs	r3, #16
   2ad64:	4013      	ands	r3, r2
   2ad66:	d104      	bne.n	2ad72 <follow_path+0xd6>
   2ad68:	230f      	movs	r3, #15
   2ad6a:	18fb      	adds	r3, r7, r3
   2ad6c:	2205      	movs	r2, #5
   2ad6e:	701a      	strb	r2, [r3, #0]
   2ad70:	e023      	b.n	2adba <follow_path+0x11e>
   2ad72:	68bb      	ldr	r3, [r7, #8]
   2ad74:	3315      	adds	r3, #21
   2ad76:	781b      	ldrb	r3, [r3, #0]
   2ad78:	021b      	lsls	r3, r3, #8
   2ad7a:	b21a      	sxth	r2, r3
   2ad7c:	68bb      	ldr	r3, [r7, #8]
   2ad7e:	3314      	adds	r3, #20
   2ad80:	781b      	ldrb	r3, [r3, #0]
   2ad82:	b21b      	sxth	r3, r3
   2ad84:	4313      	orrs	r3, r2
   2ad86:	b21b      	sxth	r3, r3
   2ad88:	b29b      	uxth	r3, r3
   2ad8a:	041b      	lsls	r3, r3, #16
   2ad8c:	68ba      	ldr	r2, [r7, #8]
   2ad8e:	321b      	adds	r2, #27
   2ad90:	7812      	ldrb	r2, [r2, #0]
   2ad92:	0212      	lsls	r2, r2, #8
   2ad94:	b211      	sxth	r1, r2
   2ad96:	68ba      	ldr	r2, [r7, #8]
   2ad98:	321a      	adds	r2, #26
   2ad9a:	7812      	ldrb	r2, [r2, #0]
   2ad9c:	b212      	sxth	r2, r2
   2ad9e:	430a      	orrs	r2, r1
   2ada0:	b212      	sxth	r2, r2
   2ada2:	b292      	uxth	r2, r2
   2ada4:	431a      	orrs	r2, r3
   2ada6:	687b      	ldr	r3, [r7, #4]
   2ada8:	609a      	str	r2, [r3, #8]
   2adaa:	e79b      	b.n	2ace4 <follow_path+0x48>
   2adac:	46c0      	nop			; (mov r8, r8)
   2adae:	e004      	b.n	2adba <follow_path+0x11e>
   2adb0:	46c0      	nop			; (mov r8, r8)
   2adb2:	e002      	b.n	2adba <follow_path+0x11e>
   2adb4:	46c0      	nop			; (mov r8, r8)
   2adb6:	e000      	b.n	2adba <follow_path+0x11e>
   2adb8:	46c0      	nop			; (mov r8, r8)
   2adba:	230f      	movs	r3, #15
   2adbc:	18fb      	adds	r3, r7, r3
   2adbe:	781b      	ldrb	r3, [r3, #0]
   2adc0:	0018      	movs	r0, r3
   2adc2:	46bd      	mov	sp, r7
   2adc4:	b005      	add	sp, #20
   2adc6:	bd90      	pop	{r4, r7, pc}
   2adc8:	00029c6d 	.word	0x00029c6d
   2adcc:	0002a855 	.word	0x0002a855
   2add0:	0002a2f1 	.word	0x0002a2f1

0002add4 <check_fs>:
   2add4:	b590      	push	{r4, r7, lr}
   2add6:	b083      	sub	sp, #12
   2add8:	af00      	add	r7, sp, #0
   2adda:	6078      	str	r0, [r7, #4]
   2addc:	6039      	str	r1, [r7, #0]
   2adde:	687b      	ldr	r3, [r7, #4]
   2ade0:	7858      	ldrb	r0, [r3, #1]
   2ade2:	687b      	ldr	r3, [r7, #4]
   2ade4:	3330      	adds	r3, #48	; 0x30
   2ade6:	0019      	movs	r1, r3
   2ade8:	683a      	ldr	r2, [r7, #0]
   2adea:	2301      	movs	r3, #1
   2adec:	4c2a      	ldr	r4, [pc, #168]	; (2ae98 <check_fs+0xc4>)
   2adee:	47a0      	blx	r4
   2adf0:	1e03      	subs	r3, r0, #0
   2adf2:	d001      	beq.n	2adf8 <check_fs+0x24>
   2adf4:	2303      	movs	r3, #3
   2adf6:	e04b      	b.n	2ae90 <check_fs+0xbc>
   2adf8:	687b      	ldr	r3, [r7, #4]
   2adfa:	4a28      	ldr	r2, [pc, #160]	; (2ae9c <check_fs+0xc8>)
   2adfc:	4694      	mov	ip, r2
   2adfe:	4463      	add	r3, ip
   2ae00:	3301      	adds	r3, #1
   2ae02:	781b      	ldrb	r3, [r3, #0]
   2ae04:	021b      	lsls	r3, r3, #8
   2ae06:	b21a      	sxth	r2, r3
   2ae08:	687b      	ldr	r3, [r7, #4]
   2ae0a:	4924      	ldr	r1, [pc, #144]	; (2ae9c <check_fs+0xc8>)
   2ae0c:	5c5b      	ldrb	r3, [r3, r1]
   2ae0e:	b21b      	sxth	r3, r3
   2ae10:	4313      	orrs	r3, r2
   2ae12:	b21b      	sxth	r3, r3
   2ae14:	4a22      	ldr	r2, [pc, #136]	; (2aea0 <check_fs+0xcc>)
   2ae16:	4293      	cmp	r3, r2
   2ae18:	d001      	beq.n	2ae1e <check_fs+0x4a>
   2ae1a:	2302      	movs	r3, #2
   2ae1c:	e038      	b.n	2ae90 <check_fs+0xbc>
   2ae1e:	687b      	ldr	r3, [r7, #4]
   2ae20:	3366      	adds	r3, #102	; 0x66
   2ae22:	3303      	adds	r3, #3
   2ae24:	781b      	ldrb	r3, [r3, #0]
   2ae26:	061a      	lsls	r2, r3, #24
   2ae28:	687b      	ldr	r3, [r7, #4]
   2ae2a:	3366      	adds	r3, #102	; 0x66
   2ae2c:	3302      	adds	r3, #2
   2ae2e:	781b      	ldrb	r3, [r3, #0]
   2ae30:	041b      	lsls	r3, r3, #16
   2ae32:	4313      	orrs	r3, r2
   2ae34:	687a      	ldr	r2, [r7, #4]
   2ae36:	3266      	adds	r2, #102	; 0x66
   2ae38:	3201      	adds	r2, #1
   2ae3a:	7812      	ldrb	r2, [r2, #0]
   2ae3c:	0212      	lsls	r2, r2, #8
   2ae3e:	4313      	orrs	r3, r2
   2ae40:	687a      	ldr	r2, [r7, #4]
   2ae42:	2166      	movs	r1, #102	; 0x66
   2ae44:	5c52      	ldrb	r2, [r2, r1]
   2ae46:	4313      	orrs	r3, r2
   2ae48:	021b      	lsls	r3, r3, #8
   2ae4a:	0a1b      	lsrs	r3, r3, #8
   2ae4c:	4a15      	ldr	r2, [pc, #84]	; (2aea4 <check_fs+0xd0>)
   2ae4e:	4293      	cmp	r3, r2
   2ae50:	d101      	bne.n	2ae56 <check_fs+0x82>
   2ae52:	2300      	movs	r3, #0
   2ae54:	e01c      	b.n	2ae90 <check_fs+0xbc>
   2ae56:	687b      	ldr	r3, [r7, #4]
   2ae58:	3382      	adds	r3, #130	; 0x82
   2ae5a:	3303      	adds	r3, #3
   2ae5c:	781b      	ldrb	r3, [r3, #0]
   2ae5e:	061a      	lsls	r2, r3, #24
   2ae60:	687b      	ldr	r3, [r7, #4]
   2ae62:	3382      	adds	r3, #130	; 0x82
   2ae64:	3302      	adds	r3, #2
   2ae66:	781b      	ldrb	r3, [r3, #0]
   2ae68:	041b      	lsls	r3, r3, #16
   2ae6a:	4313      	orrs	r3, r2
   2ae6c:	687a      	ldr	r2, [r7, #4]
   2ae6e:	3282      	adds	r2, #130	; 0x82
   2ae70:	3201      	adds	r2, #1
   2ae72:	7812      	ldrb	r2, [r2, #0]
   2ae74:	0212      	lsls	r2, r2, #8
   2ae76:	4313      	orrs	r3, r2
   2ae78:	687a      	ldr	r2, [r7, #4]
   2ae7a:	2182      	movs	r1, #130	; 0x82
   2ae7c:	5c52      	ldrb	r2, [r2, r1]
   2ae7e:	4313      	orrs	r3, r2
   2ae80:	021b      	lsls	r3, r3, #8
   2ae82:	0a1b      	lsrs	r3, r3, #8
   2ae84:	4a07      	ldr	r2, [pc, #28]	; (2aea4 <check_fs+0xd0>)
   2ae86:	4293      	cmp	r3, r2
   2ae88:	d101      	bne.n	2ae8e <check_fs+0xba>
   2ae8a:	2300      	movs	r3, #0
   2ae8c:	e000      	b.n	2ae90 <check_fs+0xbc>
   2ae8e:	2301      	movs	r3, #1
   2ae90:	0018      	movs	r0, r3
   2ae92:	46bd      	mov	sp, r7
   2ae94:	b003      	add	sp, #12
   2ae96:	bd90      	pop	{r4, r7, pc}
   2ae98:	0002903d 	.word	0x0002903d
   2ae9c:	0000022e 	.word	0x0000022e
   2aea0:	ffffaa55 	.word	0xffffaa55
   2aea4:	00544146 	.word	0x00544146

0002aea8 <chk_mounted>:
   2aea8:	b590      	push	{r4, r7, lr}
   2aeaa:	b093      	sub	sp, #76	; 0x4c
   2aeac:	af00      	add	r7, sp, #0
   2aeae:	60f8      	str	r0, [r7, #12]
   2aeb0:	60b9      	str	r1, [r7, #8]
   2aeb2:	1dfb      	adds	r3, r7, #7
   2aeb4:	701a      	strb	r2, [r3, #0]
   2aeb6:	68fb      	ldr	r3, [r7, #12]
   2aeb8:	681b      	ldr	r3, [r3, #0]
   2aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
   2aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aebe:	781b      	ldrb	r3, [r3, #0]
   2aec0:	3b30      	subs	r3, #48	; 0x30
   2aec2:	643b      	str	r3, [r7, #64]	; 0x40
   2aec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aec6:	2b09      	cmp	r3, #9
   2aec8:	d80b      	bhi.n	2aee2 <chk_mounted+0x3a>
   2aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aecc:	3301      	adds	r3, #1
   2aece:	781b      	ldrb	r3, [r3, #0]
   2aed0:	2b3a      	cmp	r3, #58	; 0x3a
   2aed2:	d106      	bne.n	2aee2 <chk_mounted+0x3a>
   2aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aed6:	3302      	adds	r3, #2
   2aed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2aeda:	68fb      	ldr	r3, [r7, #12]
   2aedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2aede:	601a      	str	r2, [r3, #0]
   2aee0:	e001      	b.n	2aee6 <chk_mounted+0x3e>
   2aee2:	2300      	movs	r3, #0
   2aee4:	643b      	str	r3, [r7, #64]	; 0x40
   2aee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aee8:	2b07      	cmp	r3, #7
   2aeea:	d901      	bls.n	2aef0 <chk_mounted+0x48>
   2aeec:	230b      	movs	r3, #11
   2aeee:	e2af      	b.n	2b450 <chk_mounted+0x5a8>
   2aef0:	4bc5      	ldr	r3, [pc, #788]	; (2b208 <chk_mounted+0x360>)
   2aef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2aef4:	0092      	lsls	r2, r2, #2
   2aef6:	58d3      	ldr	r3, [r2, r3]
   2aef8:	62bb      	str	r3, [r7, #40]	; 0x28
   2aefa:	68bb      	ldr	r3, [r7, #8]
   2aefc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2aefe:	601a      	str	r2, [r3, #0]
   2af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af02:	2b00      	cmp	r3, #0
   2af04:	d101      	bne.n	2af0a <chk_mounted+0x62>
   2af06:	230c      	movs	r3, #12
   2af08:	e2a2      	b.n	2b450 <chk_mounted+0x5a8>
   2af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af0c:	781b      	ldrb	r3, [r3, #0]
   2af0e:	2b00      	cmp	r3, #0
   2af10:	d01c      	beq.n	2af4c <chk_mounted+0xa4>
   2af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af14:	785b      	ldrb	r3, [r3, #1]
   2af16:	2227      	movs	r2, #39	; 0x27
   2af18:	18bc      	adds	r4, r7, r2
   2af1a:	0018      	movs	r0, r3
   2af1c:	4bbb      	ldr	r3, [pc, #748]	; (2b20c <chk_mounted+0x364>)
   2af1e:	4798      	blx	r3
   2af20:	0003      	movs	r3, r0
   2af22:	7023      	strb	r3, [r4, #0]
   2af24:	2327      	movs	r3, #39	; 0x27
   2af26:	18fb      	adds	r3, r7, r3
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	2201      	movs	r2, #1
   2af2c:	4013      	ands	r3, r2
   2af2e:	d10d      	bne.n	2af4c <chk_mounted+0xa4>
   2af30:	1dfb      	adds	r3, r7, #7
   2af32:	781b      	ldrb	r3, [r3, #0]
   2af34:	2b00      	cmp	r3, #0
   2af36:	d007      	beq.n	2af48 <chk_mounted+0xa0>
   2af38:	2327      	movs	r3, #39	; 0x27
   2af3a:	18fb      	adds	r3, r7, r3
   2af3c:	781b      	ldrb	r3, [r3, #0]
   2af3e:	2204      	movs	r2, #4
   2af40:	4013      	ands	r3, r2
   2af42:	d001      	beq.n	2af48 <chk_mounted+0xa0>
   2af44:	230a      	movs	r3, #10
   2af46:	e283      	b.n	2b450 <chk_mounted+0x5a8>
   2af48:	2300      	movs	r3, #0
   2af4a:	e281      	b.n	2b450 <chk_mounted+0x5a8>
   2af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af4e:	2200      	movs	r2, #0
   2af50:	701a      	strb	r2, [r3, #0]
   2af52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2af54:	b2da      	uxtb	r2, r3
   2af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af58:	705a      	strb	r2, [r3, #1]
   2af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af5c:	785b      	ldrb	r3, [r3, #1]
   2af5e:	2227      	movs	r2, #39	; 0x27
   2af60:	18bc      	adds	r4, r7, r2
   2af62:	0018      	movs	r0, r3
   2af64:	4baa      	ldr	r3, [pc, #680]	; (2b210 <chk_mounted+0x368>)
   2af66:	4798      	blx	r3
   2af68:	0003      	movs	r3, r0
   2af6a:	7023      	strb	r3, [r4, #0]
   2af6c:	2327      	movs	r3, #39	; 0x27
   2af6e:	18fb      	adds	r3, r7, r3
   2af70:	781b      	ldrb	r3, [r3, #0]
   2af72:	2201      	movs	r2, #1
   2af74:	4013      	ands	r3, r2
   2af76:	d001      	beq.n	2af7c <chk_mounted+0xd4>
   2af78:	2303      	movs	r3, #3
   2af7a:	e269      	b.n	2b450 <chk_mounted+0x5a8>
   2af7c:	1dfb      	adds	r3, r7, #7
   2af7e:	781b      	ldrb	r3, [r3, #0]
   2af80:	2b00      	cmp	r3, #0
   2af82:	d007      	beq.n	2af94 <chk_mounted+0xec>
   2af84:	2327      	movs	r3, #39	; 0x27
   2af86:	18fb      	adds	r3, r7, r3
   2af88:	781b      	ldrb	r3, [r3, #0]
   2af8a:	2204      	movs	r2, #4
   2af8c:	4013      	ands	r3, r2
   2af8e:	d001      	beq.n	2af94 <chk_mounted+0xec>
   2af90:	230a      	movs	r3, #10
   2af92:	e25d      	b.n	2b450 <chk_mounted+0x5a8>
   2af94:	2300      	movs	r3, #0
   2af96:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af98:	2347      	movs	r3, #71	; 0x47
   2af9a:	18fc      	adds	r4, r7, r3
   2af9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2afa0:	0011      	movs	r1, r2
   2afa2:	0018      	movs	r0, r3
   2afa4:	4b9b      	ldr	r3, [pc, #620]	; (2b214 <chk_mounted+0x36c>)
   2afa6:	4798      	blx	r3
   2afa8:	0003      	movs	r3, r0
   2afaa:	7023      	strb	r3, [r4, #0]
   2afac:	2347      	movs	r3, #71	; 0x47
   2afae:	18fb      	adds	r3, r7, r3
   2afb0:	781b      	ldrb	r3, [r3, #0]
   2afb2:	2b01      	cmp	r3, #1
   2afb4:	d13b      	bne.n	2b02e <chk_mounted+0x186>
   2afb6:	2346      	movs	r3, #70	; 0x46
   2afb8:	18fb      	adds	r3, r7, r3
   2afba:	2200      	movs	r2, #0
   2afbc:	701a      	strb	r2, [r3, #0]
   2afbe:	2346      	movs	r3, #70	; 0x46
   2afc0:	18fb      	adds	r3, r7, r3
   2afc2:	781b      	ldrb	r3, [r3, #0]
   2afc4:	2b00      	cmp	r3, #0
   2afc6:	d006      	beq.n	2afd6 <chk_mounted+0x12e>
   2afc8:	2346      	movs	r3, #70	; 0x46
   2afca:	18fb      	adds	r3, r7, r3
   2afcc:	781a      	ldrb	r2, [r3, #0]
   2afce:	2346      	movs	r3, #70	; 0x46
   2afd0:	18fb      	adds	r3, r7, r3
   2afd2:	3a01      	subs	r2, #1
   2afd4:	701a      	strb	r2, [r3, #0]
   2afd6:	2346      	movs	r3, #70	; 0x46
   2afd8:	18fb      	adds	r3, r7, r3
   2afda:	781b      	ldrb	r3, [r3, #0]
   2afdc:	011b      	lsls	r3, r3, #4
   2afde:	33bf      	adds	r3, #191	; 0xbf
   2afe0:	33ff      	adds	r3, #255	; 0xff
   2afe2:	3330      	adds	r3, #48	; 0x30
   2afe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2afe6:	18d3      	adds	r3, r2, r3
   2afe8:	623b      	str	r3, [r7, #32]
   2afea:	6a3b      	ldr	r3, [r7, #32]
   2afec:	3304      	adds	r3, #4
   2afee:	781b      	ldrb	r3, [r3, #0]
   2aff0:	2b00      	cmp	r3, #0
   2aff2:	d01c      	beq.n	2b02e <chk_mounted+0x186>
   2aff4:	6a3b      	ldr	r3, [r7, #32]
   2aff6:	330b      	adds	r3, #11
   2aff8:	781b      	ldrb	r3, [r3, #0]
   2affa:	061a      	lsls	r2, r3, #24
   2affc:	6a3b      	ldr	r3, [r7, #32]
   2affe:	330a      	adds	r3, #10
   2b000:	781b      	ldrb	r3, [r3, #0]
   2b002:	041b      	lsls	r3, r3, #16
   2b004:	4313      	orrs	r3, r2
   2b006:	6a3a      	ldr	r2, [r7, #32]
   2b008:	3209      	adds	r2, #9
   2b00a:	7812      	ldrb	r2, [r2, #0]
   2b00c:	0212      	lsls	r2, r2, #8
   2b00e:	4313      	orrs	r3, r2
   2b010:	6a3a      	ldr	r2, [r7, #32]
   2b012:	3208      	adds	r2, #8
   2b014:	7812      	ldrb	r2, [r2, #0]
   2b016:	4313      	orrs	r3, r2
   2b018:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b01a:	2347      	movs	r3, #71	; 0x47
   2b01c:	18fc      	adds	r4, r7, r3
   2b01e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b022:	0011      	movs	r1, r2
   2b024:	0018      	movs	r0, r3
   2b026:	4b7b      	ldr	r3, [pc, #492]	; (2b214 <chk_mounted+0x36c>)
   2b028:	4798      	blx	r3
   2b02a:	0003      	movs	r3, r0
   2b02c:	7023      	strb	r3, [r4, #0]
   2b02e:	2347      	movs	r3, #71	; 0x47
   2b030:	18fb      	adds	r3, r7, r3
   2b032:	781b      	ldrb	r3, [r3, #0]
   2b034:	2b03      	cmp	r3, #3
   2b036:	d101      	bne.n	2b03c <chk_mounted+0x194>
   2b038:	2301      	movs	r3, #1
   2b03a:	e209      	b.n	2b450 <chk_mounted+0x5a8>
   2b03c:	2347      	movs	r3, #71	; 0x47
   2b03e:	18fb      	adds	r3, r7, r3
   2b040:	781b      	ldrb	r3, [r3, #0]
   2b042:	2b00      	cmp	r3, #0
   2b044:	d001      	beq.n	2b04a <chk_mounted+0x1a2>
   2b046:	230d      	movs	r3, #13
   2b048:	e202      	b.n	2b450 <chk_mounted+0x5a8>
   2b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b04c:	223c      	movs	r2, #60	; 0x3c
   2b04e:	5c9b      	ldrb	r3, [r3, r2]
   2b050:	021b      	lsls	r3, r3, #8
   2b052:	b21a      	sxth	r2, r3
   2b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b056:	213b      	movs	r1, #59	; 0x3b
   2b058:	5c5b      	ldrb	r3, [r3, r1]
   2b05a:	b21b      	sxth	r3, r3
   2b05c:	4313      	orrs	r3, r2
   2b05e:	b21a      	sxth	r2, r3
   2b060:	2380      	movs	r3, #128	; 0x80
   2b062:	009b      	lsls	r3, r3, #2
   2b064:	429a      	cmp	r2, r3
   2b066:	d001      	beq.n	2b06c <chk_mounted+0x1c4>
   2b068:	230d      	movs	r3, #13
   2b06a:	e1f1      	b.n	2b450 <chk_mounted+0x5a8>
   2b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b06e:	2247      	movs	r2, #71	; 0x47
   2b070:	5c9b      	ldrb	r3, [r3, r2]
   2b072:	021b      	lsls	r3, r3, #8
   2b074:	b21a      	sxth	r2, r3
   2b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b078:	2146      	movs	r1, #70	; 0x46
   2b07a:	5c5b      	ldrb	r3, [r3, r1]
   2b07c:	b21b      	sxth	r3, r3
   2b07e:	4313      	orrs	r3, r2
   2b080:	b21b      	sxth	r3, r3
   2b082:	b29b      	uxth	r3, r3
   2b084:	63bb      	str	r3, [r7, #56]	; 0x38
   2b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b088:	2b00      	cmp	r3, #0
   2b08a:	d112      	bne.n	2b0b2 <chk_mounted+0x20a>
   2b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b08e:	2257      	movs	r2, #87	; 0x57
   2b090:	5c9b      	ldrb	r3, [r3, r2]
   2b092:	061a      	lsls	r2, r3, #24
   2b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b096:	2156      	movs	r1, #86	; 0x56
   2b098:	5c5b      	ldrb	r3, [r3, r1]
   2b09a:	041b      	lsls	r3, r3, #16
   2b09c:	4313      	orrs	r3, r2
   2b09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0a0:	2155      	movs	r1, #85	; 0x55
   2b0a2:	5c52      	ldrb	r2, [r2, r1]
   2b0a4:	0212      	lsls	r2, r2, #8
   2b0a6:	4313      	orrs	r3, r2
   2b0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0aa:	2154      	movs	r1, #84	; 0x54
   2b0ac:	5c52      	ldrb	r2, [r2, r1]
   2b0ae:	4313      	orrs	r3, r2
   2b0b0:	63bb      	str	r3, [r7, #56]	; 0x38
   2b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2b0b6:	61da      	str	r2, [r3, #28]
   2b0b8:	231f      	movs	r3, #31
   2b0ba:	18fb      	adds	r3, r7, r3
   2b0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0be:	2140      	movs	r1, #64	; 0x40
   2b0c0:	5c52      	ldrb	r2, [r2, r1]
   2b0c2:	701a      	strb	r2, [r3, #0]
   2b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b0c6:	221f      	movs	r2, #31
   2b0c8:	18ba      	adds	r2, r7, r2
   2b0ca:	7812      	ldrb	r2, [r2, #0]
   2b0cc:	70da      	strb	r2, [r3, #3]
   2b0ce:	231f      	movs	r3, #31
   2b0d0:	18fb      	adds	r3, r7, r3
   2b0d2:	781b      	ldrb	r3, [r3, #0]
   2b0d4:	2b01      	cmp	r3, #1
   2b0d6:	d006      	beq.n	2b0e6 <chk_mounted+0x23e>
   2b0d8:	231f      	movs	r3, #31
   2b0da:	18fb      	adds	r3, r7, r3
   2b0dc:	781b      	ldrb	r3, [r3, #0]
   2b0de:	2b02      	cmp	r3, #2
   2b0e0:	d001      	beq.n	2b0e6 <chk_mounted+0x23e>
   2b0e2:	230d      	movs	r3, #13
   2b0e4:	e1b4      	b.n	2b450 <chk_mounted+0x5a8>
   2b0e6:	231f      	movs	r3, #31
   2b0e8:	18fb      	adds	r3, r7, r3
   2b0ea:	781a      	ldrb	r2, [r3, #0]
   2b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b0ee:	4353      	muls	r3, r2
   2b0f0:	63bb      	str	r3, [r7, #56]	; 0x38
   2b0f2:	231f      	movs	r3, #31
   2b0f4:	18fb      	adds	r3, r7, r3
   2b0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0f8:	213d      	movs	r1, #61	; 0x3d
   2b0fa:	5c52      	ldrb	r2, [r2, r1]
   2b0fc:	701a      	strb	r2, [r3, #0]
   2b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b100:	221f      	movs	r2, #31
   2b102:	18ba      	adds	r2, r7, r2
   2b104:	7812      	ldrb	r2, [r2, #0]
   2b106:	709a      	strb	r2, [r3, #2]
   2b108:	231f      	movs	r3, #31
   2b10a:	18fb      	adds	r3, r7, r3
   2b10c:	781b      	ldrb	r3, [r3, #0]
   2b10e:	2b00      	cmp	r3, #0
   2b110:	d008      	beq.n	2b124 <chk_mounted+0x27c>
   2b112:	231f      	movs	r3, #31
   2b114:	18fb      	adds	r3, r7, r3
   2b116:	781b      	ldrb	r3, [r3, #0]
   2b118:	221f      	movs	r2, #31
   2b11a:	18ba      	adds	r2, r7, r2
   2b11c:	7812      	ldrb	r2, [r2, #0]
   2b11e:	3a01      	subs	r2, #1
   2b120:	4013      	ands	r3, r2
   2b122:	d001      	beq.n	2b128 <chk_mounted+0x280>
   2b124:	230d      	movs	r3, #13
   2b126:	e193      	b.n	2b450 <chk_mounted+0x5a8>
   2b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b12a:	2242      	movs	r2, #66	; 0x42
   2b12c:	5c9b      	ldrb	r3, [r3, r2]
   2b12e:	021b      	lsls	r3, r3, #8
   2b130:	b21a      	sxth	r2, r3
   2b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b134:	2141      	movs	r1, #65	; 0x41
   2b136:	5c5b      	ldrb	r3, [r3, r1]
   2b138:	b21b      	sxth	r3, r3
   2b13a:	4313      	orrs	r3, r2
   2b13c:	b21b      	sxth	r3, r3
   2b13e:	b29a      	uxth	r2, r3
   2b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b142:	811a      	strh	r2, [r3, #8]
   2b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b146:	891b      	ldrh	r3, [r3, #8]
   2b148:	220f      	movs	r2, #15
   2b14a:	4013      	ands	r3, r2
   2b14c:	b29b      	uxth	r3, r3
   2b14e:	2b00      	cmp	r3, #0
   2b150:	d001      	beq.n	2b156 <chk_mounted+0x2ae>
   2b152:	230d      	movs	r3, #13
   2b154:	e17c      	b.n	2b450 <chk_mounted+0x5a8>
   2b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b158:	2244      	movs	r2, #68	; 0x44
   2b15a:	5c9b      	ldrb	r3, [r3, r2]
   2b15c:	021b      	lsls	r3, r3, #8
   2b15e:	b21a      	sxth	r2, r3
   2b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b162:	2143      	movs	r1, #67	; 0x43
   2b164:	5c5b      	ldrb	r3, [r3, r1]
   2b166:	b21b      	sxth	r3, r3
   2b168:	4313      	orrs	r3, r2
   2b16a:	b21b      	sxth	r3, r3
   2b16c:	b29b      	uxth	r3, r3
   2b16e:	637b      	str	r3, [r7, #52]	; 0x34
   2b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b172:	2b00      	cmp	r3, #0
   2b174:	d112      	bne.n	2b19c <chk_mounted+0x2f4>
   2b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b178:	2253      	movs	r2, #83	; 0x53
   2b17a:	5c9b      	ldrb	r3, [r3, r2]
   2b17c:	061a      	lsls	r2, r3, #24
   2b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b180:	2152      	movs	r1, #82	; 0x52
   2b182:	5c5b      	ldrb	r3, [r3, r1]
   2b184:	041b      	lsls	r3, r3, #16
   2b186:	4313      	orrs	r3, r2
   2b188:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b18a:	2151      	movs	r1, #81	; 0x51
   2b18c:	5c52      	ldrb	r2, [r2, r1]
   2b18e:	0212      	lsls	r2, r2, #8
   2b190:	4313      	orrs	r3, r2
   2b192:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b194:	2150      	movs	r1, #80	; 0x50
   2b196:	5c52      	ldrb	r2, [r2, r1]
   2b198:	4313      	orrs	r3, r2
   2b19a:	637b      	str	r3, [r7, #52]	; 0x34
   2b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b19e:	223f      	movs	r2, #63	; 0x3f
   2b1a0:	5c9b      	ldrb	r3, [r3, r2]
   2b1a2:	021b      	lsls	r3, r3, #8
   2b1a4:	b21a      	sxth	r2, r3
   2b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b1a8:	213e      	movs	r1, #62	; 0x3e
   2b1aa:	5c5b      	ldrb	r3, [r3, r1]
   2b1ac:	b21b      	sxth	r3, r3
   2b1ae:	4313      	orrs	r3, r2
   2b1b0:	b21a      	sxth	r2, r3
   2b1b2:	231c      	movs	r3, #28
   2b1b4:	18fb      	adds	r3, r7, r3
   2b1b6:	801a      	strh	r2, [r3, #0]
   2b1b8:	231c      	movs	r3, #28
   2b1ba:	18fb      	adds	r3, r7, r3
   2b1bc:	881b      	ldrh	r3, [r3, #0]
   2b1be:	2b00      	cmp	r3, #0
   2b1c0:	d101      	bne.n	2b1c6 <chk_mounted+0x31e>
   2b1c2:	230d      	movs	r3, #13
   2b1c4:	e144      	b.n	2b450 <chk_mounted+0x5a8>
   2b1c6:	231c      	movs	r3, #28
   2b1c8:	18fb      	adds	r3, r7, r3
   2b1ca:	881a      	ldrh	r2, [r3, #0]
   2b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b1ce:	18d3      	adds	r3, r2, r3
   2b1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b1d2:	8912      	ldrh	r2, [r2, #8]
   2b1d4:	0912      	lsrs	r2, r2, #4
   2b1d6:	b292      	uxth	r2, r2
   2b1d8:	189b      	adds	r3, r3, r2
   2b1da:	61bb      	str	r3, [r7, #24]
   2b1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2b1de:	69bb      	ldr	r3, [r7, #24]
   2b1e0:	429a      	cmp	r2, r3
   2b1e2:	d201      	bcs.n	2b1e8 <chk_mounted+0x340>
   2b1e4:	230d      	movs	r3, #13
   2b1e6:	e133      	b.n	2b450 <chk_mounted+0x5a8>
   2b1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2b1ea:	69bb      	ldr	r3, [r7, #24]
   2b1ec:	1ad2      	subs	r2, r2, r3
   2b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b1f0:	789b      	ldrb	r3, [r3, #2]
   2b1f2:	0019      	movs	r1, r3
   2b1f4:	4b08      	ldr	r3, [pc, #32]	; (2b218 <chk_mounted+0x370>)
   2b1f6:	0010      	movs	r0, r2
   2b1f8:	4798      	blx	r3
   2b1fa:	0003      	movs	r3, r0
   2b1fc:	617b      	str	r3, [r7, #20]
   2b1fe:	697b      	ldr	r3, [r7, #20]
   2b200:	2b00      	cmp	r3, #0
   2b202:	d10b      	bne.n	2b21c <chk_mounted+0x374>
   2b204:	230d      	movs	r3, #13
   2b206:	e123      	b.n	2b450 <chk_mounted+0x5a8>
   2b208:	20003d50 	.word	0x20003d50
   2b20c:	00029005 	.word	0x00029005
   2b210:	00028f81 	.word	0x00028f81
   2b214:	0002add5 	.word	0x0002add5
   2b218:	00030549 	.word	0x00030549
   2b21c:	2347      	movs	r3, #71	; 0x47
   2b21e:	18fb      	adds	r3, r7, r3
   2b220:	2201      	movs	r2, #1
   2b222:	701a      	strb	r2, [r3, #0]
   2b224:	697b      	ldr	r3, [r7, #20]
   2b226:	4a8c      	ldr	r2, [pc, #560]	; (2b458 <chk_mounted+0x5b0>)
   2b228:	4293      	cmp	r3, r2
   2b22a:	d903      	bls.n	2b234 <chk_mounted+0x38c>
   2b22c:	2347      	movs	r3, #71	; 0x47
   2b22e:	18fb      	adds	r3, r7, r3
   2b230:	2202      	movs	r2, #2
   2b232:	701a      	strb	r2, [r3, #0]
   2b234:	697b      	ldr	r3, [r7, #20]
   2b236:	4a89      	ldr	r2, [pc, #548]	; (2b45c <chk_mounted+0x5b4>)
   2b238:	4293      	cmp	r3, r2
   2b23a:	d903      	bls.n	2b244 <chk_mounted+0x39c>
   2b23c:	2347      	movs	r3, #71	; 0x47
   2b23e:	18fb      	adds	r3, r7, r3
   2b240:	2203      	movs	r2, #3
   2b242:	701a      	strb	r2, [r3, #0]
   2b244:	697b      	ldr	r3, [r7, #20]
   2b246:	1c9a      	adds	r2, r3, #2
   2b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b24a:	619a      	str	r2, [r3, #24]
   2b24c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b24e:	69bb      	ldr	r3, [r7, #24]
   2b250:	18d2      	adds	r2, r2, r3
   2b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b254:	629a      	str	r2, [r3, #40]	; 0x28
   2b256:	231c      	movs	r3, #28
   2b258:	18fb      	adds	r3, r7, r3
   2b25a:	881a      	ldrh	r2, [r3, #0]
   2b25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b25e:	18d2      	adds	r2, r2, r3
   2b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b262:	621a      	str	r2, [r3, #32]
   2b264:	2347      	movs	r3, #71	; 0x47
   2b266:	18fb      	adds	r3, r7, r3
   2b268:	781b      	ldrb	r3, [r3, #0]
   2b26a:	2b03      	cmp	r3, #3
   2b26c:	d11e      	bne.n	2b2ac <chk_mounted+0x404>
   2b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b270:	891b      	ldrh	r3, [r3, #8]
   2b272:	2b00      	cmp	r3, #0
   2b274:	d001      	beq.n	2b27a <chk_mounted+0x3d2>
   2b276:	230d      	movs	r3, #13
   2b278:	e0ea      	b.n	2b450 <chk_mounted+0x5a8>
   2b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b27c:	225f      	movs	r2, #95	; 0x5f
   2b27e:	5c9b      	ldrb	r3, [r3, r2]
   2b280:	061a      	lsls	r2, r3, #24
   2b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b284:	215e      	movs	r1, #94	; 0x5e
   2b286:	5c5b      	ldrb	r3, [r3, r1]
   2b288:	041b      	lsls	r3, r3, #16
   2b28a:	4313      	orrs	r3, r2
   2b28c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b28e:	215d      	movs	r1, #93	; 0x5d
   2b290:	5c52      	ldrb	r2, [r2, r1]
   2b292:	0212      	lsls	r2, r2, #8
   2b294:	4313      	orrs	r3, r2
   2b296:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b298:	215c      	movs	r1, #92	; 0x5c
   2b29a:	5c52      	ldrb	r2, [r2, r1]
   2b29c:	431a      	orrs	r2, r3
   2b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2a0:	625a      	str	r2, [r3, #36]	; 0x24
   2b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2a4:	699b      	ldr	r3, [r3, #24]
   2b2a6:	009b      	lsls	r3, r3, #2
   2b2a8:	633b      	str	r3, [r7, #48]	; 0x30
   2b2aa:	e020      	b.n	2b2ee <chk_mounted+0x446>
   2b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2ae:	891b      	ldrh	r3, [r3, #8]
   2b2b0:	2b00      	cmp	r3, #0
   2b2b2:	d101      	bne.n	2b2b8 <chk_mounted+0x410>
   2b2b4:	230d      	movs	r3, #13
   2b2b6:	e0cb      	b.n	2b450 <chk_mounted+0x5a8>
   2b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2ba:	6a1a      	ldr	r2, [r3, #32]
   2b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b2be:	18d2      	adds	r2, r2, r3
   2b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2c2:	625a      	str	r2, [r3, #36]	; 0x24
   2b2c4:	2347      	movs	r3, #71	; 0x47
   2b2c6:	18fb      	adds	r3, r7, r3
   2b2c8:	781b      	ldrb	r3, [r3, #0]
   2b2ca:	2b02      	cmp	r3, #2
   2b2cc:	d103      	bne.n	2b2d6 <chk_mounted+0x42e>
   2b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2d0:	699b      	ldr	r3, [r3, #24]
   2b2d2:	005b      	lsls	r3, r3, #1
   2b2d4:	e00a      	b.n	2b2ec <chk_mounted+0x444>
   2b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2d8:	699a      	ldr	r2, [r3, #24]
   2b2da:	0013      	movs	r3, r2
   2b2dc:	005b      	lsls	r3, r3, #1
   2b2de:	189b      	adds	r3, r3, r2
   2b2e0:	085a      	lsrs	r2, r3, #1
   2b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2e4:	699b      	ldr	r3, [r3, #24]
   2b2e6:	2101      	movs	r1, #1
   2b2e8:	400b      	ands	r3, r1
   2b2ea:	18d3      	adds	r3, r2, r3
   2b2ec:	633b      	str	r3, [r7, #48]	; 0x30
   2b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2f0:	69da      	ldr	r2, [r3, #28]
   2b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2b2f4:	495a      	ldr	r1, [pc, #360]	; (2b460 <chk_mounted+0x5b8>)
   2b2f6:	468c      	mov	ip, r1
   2b2f8:	4463      	add	r3, ip
   2b2fa:	0a5b      	lsrs	r3, r3, #9
   2b2fc:	429a      	cmp	r2, r3
   2b2fe:	d201      	bcs.n	2b304 <chk_mounted+0x45c>
   2b300:	230d      	movs	r3, #13
   2b302:	e0a5      	b.n	2b450 <chk_mounted+0x5a8>
   2b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b306:	2201      	movs	r2, #1
   2b308:	4252      	negs	r2, r2
   2b30a:	611a      	str	r2, [r3, #16]
   2b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b30e:	2200      	movs	r2, #0
   2b310:	60da      	str	r2, [r3, #12]
   2b312:	2347      	movs	r3, #71	; 0x47
   2b314:	18fb      	adds	r3, r7, r3
   2b316:	781b      	ldrb	r3, [r3, #0]
   2b318:	2b03      	cmp	r3, #3
   2b31a:	d000      	beq.n	2b31e <chk_mounted+0x476>
   2b31c:	e082      	b.n	2b424 <chk_mounted+0x57c>
   2b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b320:	2200      	movs	r2, #0
   2b322:	715a      	strb	r2, [r3, #5]
   2b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b326:	2261      	movs	r2, #97	; 0x61
   2b328:	5c9b      	ldrb	r3, [r3, r2]
   2b32a:	021b      	lsls	r3, r3, #8
   2b32c:	b21a      	sxth	r2, r3
   2b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b330:	2160      	movs	r1, #96	; 0x60
   2b332:	5c5b      	ldrb	r3, [r3, r1]
   2b334:	b21b      	sxth	r3, r3
   2b336:	4313      	orrs	r3, r2
   2b338:	b21b      	sxth	r3, r3
   2b33a:	b29b      	uxth	r3, r3
   2b33c:	001a      	movs	r2, r3
   2b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b340:	18d2      	adds	r2, r2, r3
   2b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b344:	615a      	str	r2, [r3, #20]
   2b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b348:	7858      	ldrb	r0, [r3, #1]
   2b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b34c:	3330      	adds	r3, #48	; 0x30
   2b34e:	0019      	movs	r1, r3
   2b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b352:	695a      	ldr	r2, [r3, #20]
   2b354:	2301      	movs	r3, #1
   2b356:	4c43      	ldr	r4, [pc, #268]	; (2b464 <chk_mounted+0x5bc>)
   2b358:	47a0      	blx	r4
   2b35a:	1e03      	subs	r3, r0, #0
   2b35c:	d162      	bne.n	2b424 <chk_mounted+0x57c>
   2b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b360:	4a41      	ldr	r2, [pc, #260]	; (2b468 <chk_mounted+0x5c0>)
   2b362:	5c9b      	ldrb	r3, [r3, r2]
   2b364:	021b      	lsls	r3, r3, #8
   2b366:	b21a      	sxth	r2, r3
   2b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b36a:	4940      	ldr	r1, [pc, #256]	; (2b46c <chk_mounted+0x5c4>)
   2b36c:	5c5b      	ldrb	r3, [r3, r1]
   2b36e:	b21b      	sxth	r3, r3
   2b370:	4313      	orrs	r3, r2
   2b372:	b21b      	sxth	r3, r3
   2b374:	4a3e      	ldr	r2, [pc, #248]	; (2b470 <chk_mounted+0x5c8>)
   2b376:	4293      	cmp	r3, r2
   2b378:	d154      	bne.n	2b424 <chk_mounted+0x57c>
   2b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b37c:	2233      	movs	r2, #51	; 0x33
   2b37e:	5c9b      	ldrb	r3, [r3, r2]
   2b380:	061a      	lsls	r2, r3, #24
   2b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b384:	2132      	movs	r1, #50	; 0x32
   2b386:	5c5b      	ldrb	r3, [r3, r1]
   2b388:	041b      	lsls	r3, r3, #16
   2b38a:	4313      	orrs	r3, r2
   2b38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b38e:	2131      	movs	r1, #49	; 0x31
   2b390:	5c52      	ldrb	r2, [r2, r1]
   2b392:	0212      	lsls	r2, r2, #8
   2b394:	4313      	orrs	r3, r2
   2b396:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b398:	2130      	movs	r1, #48	; 0x30
   2b39a:	5c52      	ldrb	r2, [r2, r1]
   2b39c:	4313      	orrs	r3, r2
   2b39e:	4a35      	ldr	r2, [pc, #212]	; (2b474 <chk_mounted+0x5cc>)
   2b3a0:	4293      	cmp	r3, r2
   2b3a2:	d13f      	bne.n	2b424 <chk_mounted+0x57c>
   2b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3a6:	4a34      	ldr	r2, [pc, #208]	; (2b478 <chk_mounted+0x5d0>)
   2b3a8:	5c9b      	ldrb	r3, [r3, r2]
   2b3aa:	061a      	lsls	r2, r3, #24
   2b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3ae:	4933      	ldr	r1, [pc, #204]	; (2b47c <chk_mounted+0x5d4>)
   2b3b0:	5c5b      	ldrb	r3, [r3, r1]
   2b3b2:	041b      	lsls	r3, r3, #16
   2b3b4:	4313      	orrs	r3, r2
   2b3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b3b8:	4931      	ldr	r1, [pc, #196]	; (2b480 <chk_mounted+0x5d8>)
   2b3ba:	5c52      	ldrb	r2, [r2, r1]
   2b3bc:	0212      	lsls	r2, r2, #8
   2b3be:	4313      	orrs	r3, r2
   2b3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b3c2:	2285      	movs	r2, #133	; 0x85
   2b3c4:	0092      	lsls	r2, r2, #2
   2b3c6:	5c8a      	ldrb	r2, [r1, r2]
   2b3c8:	4313      	orrs	r3, r2
   2b3ca:	4a2e      	ldr	r2, [pc, #184]	; (2b484 <chk_mounted+0x5dc>)
   2b3cc:	4293      	cmp	r3, r2
   2b3ce:	d129      	bne.n	2b424 <chk_mounted+0x57c>
   2b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3d2:	4a2d      	ldr	r2, [pc, #180]	; (2b488 <chk_mounted+0x5e0>)
   2b3d4:	5c9b      	ldrb	r3, [r3, r2]
   2b3d6:	061a      	lsls	r2, r3, #24
   2b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3da:	492c      	ldr	r1, [pc, #176]	; (2b48c <chk_mounted+0x5e4>)
   2b3dc:	5c5b      	ldrb	r3, [r3, r1]
   2b3de:	041b      	lsls	r3, r3, #16
   2b3e0:	4313      	orrs	r3, r2
   2b3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b3e4:	492a      	ldr	r1, [pc, #168]	; (2b490 <chk_mounted+0x5e8>)
   2b3e6:	5c52      	ldrb	r2, [r2, r1]
   2b3e8:	0212      	lsls	r2, r2, #8
   2b3ea:	4313      	orrs	r3, r2
   2b3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b3ee:	2287      	movs	r2, #135	; 0x87
   2b3f0:	0092      	lsls	r2, r2, #2
   2b3f2:	5c8a      	ldrb	r2, [r1, r2]
   2b3f4:	431a      	orrs	r2, r3
   2b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3f8:	60da      	str	r2, [r3, #12]
   2b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3fc:	4a25      	ldr	r2, [pc, #148]	; (2b494 <chk_mounted+0x5ec>)
   2b3fe:	5c9b      	ldrb	r3, [r3, r2]
   2b400:	061a      	lsls	r2, r3, #24
   2b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b404:	4924      	ldr	r1, [pc, #144]	; (2b498 <chk_mounted+0x5f0>)
   2b406:	5c5b      	ldrb	r3, [r3, r1]
   2b408:	041b      	lsls	r3, r3, #16
   2b40a:	4313      	orrs	r3, r2
   2b40c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b40e:	4923      	ldr	r1, [pc, #140]	; (2b49c <chk_mounted+0x5f4>)
   2b410:	5c52      	ldrb	r2, [r2, r1]
   2b412:	0212      	lsls	r2, r2, #8
   2b414:	4313      	orrs	r3, r2
   2b416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b418:	2286      	movs	r2, #134	; 0x86
   2b41a:	0092      	lsls	r2, r2, #2
   2b41c:	5c8a      	ldrb	r2, [r1, r2]
   2b41e:	431a      	orrs	r2, r3
   2b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b422:	611a      	str	r2, [r3, #16]
   2b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b426:	2247      	movs	r2, #71	; 0x47
   2b428:	18ba      	adds	r2, r7, r2
   2b42a:	7812      	ldrb	r2, [r2, #0]
   2b42c:	701a      	strb	r2, [r3, #0]
   2b42e:	4b1c      	ldr	r3, [pc, #112]	; (2b4a0 <chk_mounted+0x5f8>)
   2b430:	881b      	ldrh	r3, [r3, #0]
   2b432:	3301      	adds	r3, #1
   2b434:	b29a      	uxth	r2, r3
   2b436:	4b1a      	ldr	r3, [pc, #104]	; (2b4a0 <chk_mounted+0x5f8>)
   2b438:	801a      	strh	r2, [r3, #0]
   2b43a:	4b19      	ldr	r3, [pc, #100]	; (2b4a0 <chk_mounted+0x5f8>)
   2b43c:	881a      	ldrh	r2, [r3, #0]
   2b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b440:	80da      	strh	r2, [r3, #6]
   2b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b444:	2200      	movs	r2, #0
   2b446:	62da      	str	r2, [r3, #44]	; 0x2c
   2b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b44a:	2200      	movs	r2, #0
   2b44c:	711a      	strb	r2, [r3, #4]
   2b44e:	2300      	movs	r3, #0
   2b450:	0018      	movs	r0, r3
   2b452:	46bd      	mov	sp, r7
   2b454:	b013      	add	sp, #76	; 0x4c
   2b456:	bd90      	pop	{r4, r7, pc}
   2b458:	00000ff5 	.word	0x00000ff5
   2b45c:	0000fff5 	.word	0x0000fff5
   2b460:	000001ff 	.word	0x000001ff
   2b464:	0002903d 	.word	0x0002903d
   2b468:	0000022f 	.word	0x0000022f
   2b46c:	0000022e 	.word	0x0000022e
   2b470:	ffffaa55 	.word	0xffffaa55
   2b474:	41615252 	.word	0x41615252
   2b478:	00000217 	.word	0x00000217
   2b47c:	00000216 	.word	0x00000216
   2b480:	00000215 	.word	0x00000215
   2b484:	61417272 	.word	0x61417272
   2b488:	0000021f 	.word	0x0000021f
   2b48c:	0000021e 	.word	0x0000021e
   2b490:	0000021d 	.word	0x0000021d
   2b494:	0000021b 	.word	0x0000021b
   2b498:	0000021a 	.word	0x0000021a
   2b49c:	00000219 	.word	0x00000219
   2b4a0:	20003d70 	.word	0x20003d70

0002b4a4 <validate>:
   2b4a4:	b580      	push	{r7, lr}
   2b4a6:	b082      	sub	sp, #8
   2b4a8:	af00      	add	r7, sp, #0
   2b4aa:	6078      	str	r0, [r7, #4]
   2b4ac:	000a      	movs	r2, r1
   2b4ae:	1cbb      	adds	r3, r7, #2
   2b4b0:	801a      	strh	r2, [r3, #0]
   2b4b2:	687b      	ldr	r3, [r7, #4]
   2b4b4:	2b00      	cmp	r3, #0
   2b4b6:	d009      	beq.n	2b4cc <validate+0x28>
   2b4b8:	687b      	ldr	r3, [r7, #4]
   2b4ba:	781b      	ldrb	r3, [r3, #0]
   2b4bc:	2b00      	cmp	r3, #0
   2b4be:	d005      	beq.n	2b4cc <validate+0x28>
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	88db      	ldrh	r3, [r3, #6]
   2b4c4:	1cba      	adds	r2, r7, #2
   2b4c6:	8812      	ldrh	r2, [r2, #0]
   2b4c8:	429a      	cmp	r2, r3
   2b4ca:	d001      	beq.n	2b4d0 <validate+0x2c>
   2b4cc:	2309      	movs	r3, #9
   2b4ce:	e00c      	b.n	2b4ea <validate+0x46>
   2b4d0:	687b      	ldr	r3, [r7, #4]
   2b4d2:	785b      	ldrb	r3, [r3, #1]
   2b4d4:	0018      	movs	r0, r3
   2b4d6:	4b07      	ldr	r3, [pc, #28]	; (2b4f4 <validate+0x50>)
   2b4d8:	4798      	blx	r3
   2b4da:	0003      	movs	r3, r0
   2b4dc:	001a      	movs	r2, r3
   2b4de:	2301      	movs	r3, #1
   2b4e0:	4013      	ands	r3, r2
   2b4e2:	d001      	beq.n	2b4e8 <validate+0x44>
   2b4e4:	2303      	movs	r3, #3
   2b4e6:	e000      	b.n	2b4ea <validate+0x46>
   2b4e8:	2300      	movs	r3, #0
   2b4ea:	0018      	movs	r0, r3
   2b4ec:	46bd      	mov	sp, r7
   2b4ee:	b002      	add	sp, #8
   2b4f0:	bd80      	pop	{r7, pc}
   2b4f2:	46c0      	nop			; (mov r8, r8)
   2b4f4:	00029005 	.word	0x00029005

0002b4f8 <f_mount>:
   2b4f8:	b580      	push	{r7, lr}
   2b4fa:	b084      	sub	sp, #16
   2b4fc:	af00      	add	r7, sp, #0
   2b4fe:	0002      	movs	r2, r0
   2b500:	6039      	str	r1, [r7, #0]
   2b502:	1dfb      	adds	r3, r7, #7
   2b504:	701a      	strb	r2, [r3, #0]
   2b506:	1dfb      	adds	r3, r7, #7
   2b508:	781b      	ldrb	r3, [r3, #0]
   2b50a:	2b07      	cmp	r3, #7
   2b50c:	d901      	bls.n	2b512 <f_mount+0x1a>
   2b50e:	230b      	movs	r3, #11
   2b510:	e018      	b.n	2b544 <f_mount+0x4c>
   2b512:	1dfb      	adds	r3, r7, #7
   2b514:	781a      	ldrb	r2, [r3, #0]
   2b516:	4b0d      	ldr	r3, [pc, #52]	; (2b54c <f_mount+0x54>)
   2b518:	0092      	lsls	r2, r2, #2
   2b51a:	58d3      	ldr	r3, [r2, r3]
   2b51c:	60fb      	str	r3, [r7, #12]
   2b51e:	68fb      	ldr	r3, [r7, #12]
   2b520:	2b00      	cmp	r3, #0
   2b522:	d002      	beq.n	2b52a <f_mount+0x32>
   2b524:	68fb      	ldr	r3, [r7, #12]
   2b526:	2200      	movs	r2, #0
   2b528:	701a      	strb	r2, [r3, #0]
   2b52a:	683b      	ldr	r3, [r7, #0]
   2b52c:	2b00      	cmp	r3, #0
   2b52e:	d002      	beq.n	2b536 <f_mount+0x3e>
   2b530:	683b      	ldr	r3, [r7, #0]
   2b532:	2200      	movs	r2, #0
   2b534:	701a      	strb	r2, [r3, #0]
   2b536:	1dfb      	adds	r3, r7, #7
   2b538:	781a      	ldrb	r2, [r3, #0]
   2b53a:	4b04      	ldr	r3, [pc, #16]	; (2b54c <f_mount+0x54>)
   2b53c:	0092      	lsls	r2, r2, #2
   2b53e:	6839      	ldr	r1, [r7, #0]
   2b540:	50d1      	str	r1, [r2, r3]
   2b542:	2300      	movs	r3, #0
   2b544:	0018      	movs	r0, r3
   2b546:	46bd      	mov	sp, r7
   2b548:	b004      	add	sp, #16
   2b54a:	bd80      	pop	{r7, pc}
   2b54c:	20003d50 	.word	0x20003d50

0002b550 <f_open>:
   2b550:	b590      	push	{r4, r7, lr}
   2b552:	4ce5      	ldr	r4, [pc, #916]	; (2b8e8 <f_open+0x398>)
   2b554:	44a5      	add	sp, r4
   2b556:	af00      	add	r7, sp, #0
   2b558:	60f8      	str	r0, [r7, #12]
   2b55a:	60b9      	str	r1, [r7, #8]
   2b55c:	4be3      	ldr	r3, [pc, #908]	; (2b8ec <f_open+0x39c>)
   2b55e:	2194      	movs	r1, #148	; 0x94
   2b560:	0089      	lsls	r1, r1, #2
   2b562:	468c      	mov	ip, r1
   2b564:	44bc      	add	ip, r7
   2b566:	4463      	add	r3, ip
   2b568:	701a      	strb	r2, [r3, #0]
   2b56a:	68fb      	ldr	r3, [r7, #12]
   2b56c:	2200      	movs	r2, #0
   2b56e:	601a      	str	r2, [r3, #0]
   2b570:	4bde      	ldr	r3, [pc, #888]	; (2b8ec <f_open+0x39c>)
   2b572:	2294      	movs	r2, #148	; 0x94
   2b574:	0092      	lsls	r2, r2, #2
   2b576:	4694      	mov	ip, r2
   2b578:	44bc      	add	ip, r7
   2b57a:	4463      	add	r3, ip
   2b57c:	4adb      	ldr	r2, [pc, #876]	; (2b8ec <f_open+0x39c>)
   2b57e:	2194      	movs	r1, #148	; 0x94
   2b580:	0089      	lsls	r1, r1, #2
   2b582:	468c      	mov	ip, r1
   2b584:	44bc      	add	ip, r7
   2b586:	4462      	add	r2, ip
   2b588:	7812      	ldrb	r2, [r2, #0]
   2b58a:	211f      	movs	r1, #31
   2b58c:	400a      	ands	r2, r1
   2b58e:	701a      	strb	r2, [r3, #0]
   2b590:	4bd6      	ldr	r3, [pc, #856]	; (2b8ec <f_open+0x39c>)
   2b592:	2294      	movs	r2, #148	; 0x94
   2b594:	0092      	lsls	r2, r2, #2
   2b596:	4694      	mov	ip, r2
   2b598:	44bc      	add	ip, r7
   2b59a:	4463      	add	r3, ip
   2b59c:	781b      	ldrb	r3, [r3, #0]
   2b59e:	2201      	movs	r2, #1
   2b5a0:	4393      	bics	r3, r2
   2b5a2:	b2da      	uxtb	r2, r3
   2b5a4:	4bd2      	ldr	r3, [pc, #840]	; (2b8f0 <f_open+0x3a0>)
   2b5a6:	18fc      	adds	r4, r7, r3
   2b5a8:	2387      	movs	r3, #135	; 0x87
   2b5aa:	009b      	lsls	r3, r3, #2
   2b5ac:	18f9      	adds	r1, r7, r3
   2b5ae:	2308      	movs	r3, #8
   2b5b0:	18fb      	adds	r3, r7, r3
   2b5b2:	0018      	movs	r0, r3
   2b5b4:	4bcf      	ldr	r3, [pc, #828]	; (2b8f4 <f_open+0x3a4>)
   2b5b6:	4798      	blx	r3
   2b5b8:	0003      	movs	r3, r0
   2b5ba:	7023      	strb	r3, [r4, #0]
   2b5bc:	2387      	movs	r3, #135	; 0x87
   2b5be:	009b      	lsls	r3, r3, #2
   2b5c0:	18fb      	adds	r3, r7, r3
   2b5c2:	2284      	movs	r2, #132	; 0x84
   2b5c4:	0092      	lsls	r2, r2, #2
   2b5c6:	18ba      	adds	r2, r7, r2
   2b5c8:	619a      	str	r2, [r3, #24]
   2b5ca:	2387      	movs	r3, #135	; 0x87
   2b5cc:	009b      	lsls	r3, r3, #2
   2b5ce:	18fb      	adds	r3, r7, r3
   2b5d0:	2210      	movs	r2, #16
   2b5d2:	18ba      	adds	r2, r7, r2
   2b5d4:	61da      	str	r2, [r3, #28]
   2b5d6:	4bc6      	ldr	r3, [pc, #792]	; (2b8f0 <f_open+0x3a0>)
   2b5d8:	18fb      	adds	r3, r7, r3
   2b5da:	781b      	ldrb	r3, [r3, #0]
   2b5dc:	2b00      	cmp	r3, #0
   2b5de:	d10b      	bne.n	2b5f8 <f_open+0xa8>
   2b5e0:	68ba      	ldr	r2, [r7, #8]
   2b5e2:	4bc3      	ldr	r3, [pc, #780]	; (2b8f0 <f_open+0x3a0>)
   2b5e4:	18fc      	adds	r4, r7, r3
   2b5e6:	2387      	movs	r3, #135	; 0x87
   2b5e8:	009b      	lsls	r3, r3, #2
   2b5ea:	18fb      	adds	r3, r7, r3
   2b5ec:	0011      	movs	r1, r2
   2b5ee:	0018      	movs	r0, r3
   2b5f0:	4bc1      	ldr	r3, [pc, #772]	; (2b8f8 <f_open+0x3a8>)
   2b5f2:	4798      	blx	r3
   2b5f4:	0003      	movs	r3, r0
   2b5f6:	7023      	strb	r3, [r4, #0]
   2b5f8:	2387      	movs	r3, #135	; 0x87
   2b5fa:	009b      	lsls	r3, r3, #2
   2b5fc:	18fb      	adds	r3, r7, r3
   2b5fe:	695b      	ldr	r3, [r3, #20]
   2b600:	2292      	movs	r2, #146	; 0x92
   2b602:	0092      	lsls	r2, r2, #2
   2b604:	18ba      	adds	r2, r7, r2
   2b606:	6013      	str	r3, [r2, #0]
   2b608:	4bb9      	ldr	r3, [pc, #740]	; (2b8f0 <f_open+0x3a0>)
   2b60a:	18fb      	adds	r3, r7, r3
   2b60c:	781b      	ldrb	r3, [r3, #0]
   2b60e:	2b00      	cmp	r3, #0
   2b610:	d109      	bne.n	2b626 <f_open+0xd6>
   2b612:	2392      	movs	r3, #146	; 0x92
   2b614:	009b      	lsls	r3, r3, #2
   2b616:	18fb      	adds	r3, r7, r3
   2b618:	681b      	ldr	r3, [r3, #0]
   2b61a:	2b00      	cmp	r3, #0
   2b61c:	d103      	bne.n	2b626 <f_open+0xd6>
   2b61e:	4bb4      	ldr	r3, [pc, #720]	; (2b8f0 <f_open+0x3a0>)
   2b620:	18fb      	adds	r3, r7, r3
   2b622:	2206      	movs	r2, #6
   2b624:	701a      	strb	r2, [r3, #0]
   2b626:	4bb1      	ldr	r3, [pc, #708]	; (2b8ec <f_open+0x39c>)
   2b628:	2294      	movs	r2, #148	; 0x94
   2b62a:	0092      	lsls	r2, r2, #2
   2b62c:	4694      	mov	ip, r2
   2b62e:	44bc      	add	ip, r7
   2b630:	4463      	add	r3, ip
   2b632:	781b      	ldrb	r3, [r3, #0]
   2b634:	221c      	movs	r2, #28
   2b636:	4013      	ands	r3, r2
   2b638:	d100      	bne.n	2b63c <f_open+0xec>
   2b63a:	e141      	b.n	2b8c0 <f_open+0x370>
   2b63c:	4bac      	ldr	r3, [pc, #688]	; (2b8f0 <f_open+0x3a0>)
   2b63e:	18fb      	adds	r3, r7, r3
   2b640:	781b      	ldrb	r3, [r3, #0]
   2b642:	2b00      	cmp	r3, #0
   2b644:	d027      	beq.n	2b696 <f_open+0x146>
   2b646:	4baa      	ldr	r3, [pc, #680]	; (2b8f0 <f_open+0x3a0>)
   2b648:	18fb      	adds	r3, r7, r3
   2b64a:	781b      	ldrb	r3, [r3, #0]
   2b64c:	2b04      	cmp	r3, #4
   2b64e:	d109      	bne.n	2b664 <f_open+0x114>
   2b650:	4ba7      	ldr	r3, [pc, #668]	; (2b8f0 <f_open+0x3a0>)
   2b652:	18fc      	adds	r4, r7, r3
   2b654:	2387      	movs	r3, #135	; 0x87
   2b656:	009b      	lsls	r3, r3, #2
   2b658:	18fb      	adds	r3, r7, r3
   2b65a:	0018      	movs	r0, r3
   2b65c:	4ba7      	ldr	r3, [pc, #668]	; (2b8fc <f_open+0x3ac>)
   2b65e:	4798      	blx	r3
   2b660:	0003      	movs	r3, r0
   2b662:	7023      	strb	r3, [r4, #0]
   2b664:	4ba1      	ldr	r3, [pc, #644]	; (2b8ec <f_open+0x39c>)
   2b666:	2294      	movs	r2, #148	; 0x94
   2b668:	0092      	lsls	r2, r2, #2
   2b66a:	4694      	mov	ip, r2
   2b66c:	44bc      	add	ip, r7
   2b66e:	4463      	add	r3, ip
   2b670:	4a9e      	ldr	r2, [pc, #632]	; (2b8ec <f_open+0x39c>)
   2b672:	2194      	movs	r1, #148	; 0x94
   2b674:	0089      	lsls	r1, r1, #2
   2b676:	468c      	mov	ip, r1
   2b678:	44bc      	add	ip, r7
   2b67a:	4462      	add	r2, ip
   2b67c:	7812      	ldrb	r2, [r2, #0]
   2b67e:	2108      	movs	r1, #8
   2b680:	430a      	orrs	r2, r1
   2b682:	701a      	strb	r2, [r3, #0]
   2b684:	2387      	movs	r3, #135	; 0x87
   2b686:	009b      	lsls	r3, r3, #2
   2b688:	18fb      	adds	r3, r7, r3
   2b68a:	695b      	ldr	r3, [r3, #20]
   2b68c:	2292      	movs	r2, #146	; 0x92
   2b68e:	0092      	lsls	r2, r2, #2
   2b690:	18ba      	adds	r2, r7, r2
   2b692:	6013      	str	r3, [r2, #0]
   2b694:	e01c      	b.n	2b6d0 <f_open+0x180>
   2b696:	2392      	movs	r3, #146	; 0x92
   2b698:	009b      	lsls	r3, r3, #2
   2b69a:	18fb      	adds	r3, r7, r3
   2b69c:	681b      	ldr	r3, [r3, #0]
   2b69e:	330b      	adds	r3, #11
   2b6a0:	781b      	ldrb	r3, [r3, #0]
   2b6a2:	001a      	movs	r2, r3
   2b6a4:	2311      	movs	r3, #17
   2b6a6:	4013      	ands	r3, r2
   2b6a8:	d004      	beq.n	2b6b4 <f_open+0x164>
   2b6aa:	4b91      	ldr	r3, [pc, #580]	; (2b8f0 <f_open+0x3a0>)
   2b6ac:	18fb      	adds	r3, r7, r3
   2b6ae:	2207      	movs	r2, #7
   2b6b0:	701a      	strb	r2, [r3, #0]
   2b6b2:	e00d      	b.n	2b6d0 <f_open+0x180>
   2b6b4:	4b8d      	ldr	r3, [pc, #564]	; (2b8ec <f_open+0x39c>)
   2b6b6:	2294      	movs	r2, #148	; 0x94
   2b6b8:	0092      	lsls	r2, r2, #2
   2b6ba:	4694      	mov	ip, r2
   2b6bc:	44bc      	add	ip, r7
   2b6be:	4463      	add	r3, ip
   2b6c0:	781b      	ldrb	r3, [r3, #0]
   2b6c2:	2204      	movs	r2, #4
   2b6c4:	4013      	ands	r3, r2
   2b6c6:	d003      	beq.n	2b6d0 <f_open+0x180>
   2b6c8:	4b89      	ldr	r3, [pc, #548]	; (2b8f0 <f_open+0x3a0>)
   2b6ca:	18fb      	adds	r3, r7, r3
   2b6cc:	2208      	movs	r2, #8
   2b6ce:	701a      	strb	r2, [r3, #0]
   2b6d0:	4b87      	ldr	r3, [pc, #540]	; (2b8f0 <f_open+0x3a0>)
   2b6d2:	18fb      	adds	r3, r7, r3
   2b6d4:	781b      	ldrb	r3, [r3, #0]
   2b6d6:	2b00      	cmp	r3, #0
   2b6d8:	d000      	beq.n	2b6dc <f_open+0x18c>
   2b6da:	e12f      	b.n	2b93c <f_open+0x3ec>
   2b6dc:	4b83      	ldr	r3, [pc, #524]	; (2b8ec <f_open+0x39c>)
   2b6de:	2294      	movs	r2, #148	; 0x94
   2b6e0:	0092      	lsls	r2, r2, #2
   2b6e2:	4694      	mov	ip, r2
   2b6e4:	44bc      	add	ip, r7
   2b6e6:	4463      	add	r3, ip
   2b6e8:	781b      	ldrb	r3, [r3, #0]
   2b6ea:	2208      	movs	r2, #8
   2b6ec:	4013      	ands	r3, r2
   2b6ee:	d100      	bne.n	2b6f2 <f_open+0x1a2>
   2b6f0:	e124      	b.n	2b93c <f_open+0x3ec>
   2b6f2:	4b83      	ldr	r3, [pc, #524]	; (2b900 <f_open+0x3b0>)
   2b6f4:	4798      	blx	r3
   2b6f6:	0003      	movs	r3, r0
   2b6f8:	2291      	movs	r2, #145	; 0x91
   2b6fa:	0092      	lsls	r2, r2, #2
   2b6fc:	18ba      	adds	r2, r7, r2
   2b6fe:	6013      	str	r3, [r2, #0]
   2b700:	2392      	movs	r3, #146	; 0x92
   2b702:	009b      	lsls	r3, r3, #2
   2b704:	18fb      	adds	r3, r7, r3
   2b706:	681b      	ldr	r3, [r3, #0]
   2b708:	330e      	adds	r3, #14
   2b70a:	2291      	movs	r2, #145	; 0x91
   2b70c:	0092      	lsls	r2, r2, #2
   2b70e:	18ba      	adds	r2, r7, r2
   2b710:	6812      	ldr	r2, [r2, #0]
   2b712:	b2d2      	uxtb	r2, r2
   2b714:	701a      	strb	r2, [r3, #0]
   2b716:	2392      	movs	r3, #146	; 0x92
   2b718:	009b      	lsls	r3, r3, #2
   2b71a:	18fb      	adds	r3, r7, r3
   2b71c:	681b      	ldr	r3, [r3, #0]
   2b71e:	330f      	adds	r3, #15
   2b720:	2291      	movs	r2, #145	; 0x91
   2b722:	0092      	lsls	r2, r2, #2
   2b724:	18ba      	adds	r2, r7, r2
   2b726:	6812      	ldr	r2, [r2, #0]
   2b728:	b292      	uxth	r2, r2
   2b72a:	0a12      	lsrs	r2, r2, #8
   2b72c:	b292      	uxth	r2, r2
   2b72e:	b2d2      	uxtb	r2, r2
   2b730:	701a      	strb	r2, [r3, #0]
   2b732:	2392      	movs	r3, #146	; 0x92
   2b734:	009b      	lsls	r3, r3, #2
   2b736:	18fb      	adds	r3, r7, r3
   2b738:	681b      	ldr	r3, [r3, #0]
   2b73a:	3310      	adds	r3, #16
   2b73c:	2291      	movs	r2, #145	; 0x91
   2b73e:	0092      	lsls	r2, r2, #2
   2b740:	18ba      	adds	r2, r7, r2
   2b742:	6812      	ldr	r2, [r2, #0]
   2b744:	0c12      	lsrs	r2, r2, #16
   2b746:	b2d2      	uxtb	r2, r2
   2b748:	701a      	strb	r2, [r3, #0]
   2b74a:	2392      	movs	r3, #146	; 0x92
   2b74c:	009b      	lsls	r3, r3, #2
   2b74e:	18fb      	adds	r3, r7, r3
   2b750:	681b      	ldr	r3, [r3, #0]
   2b752:	3311      	adds	r3, #17
   2b754:	2291      	movs	r2, #145	; 0x91
   2b756:	0092      	lsls	r2, r2, #2
   2b758:	18ba      	adds	r2, r7, r2
   2b75a:	6812      	ldr	r2, [r2, #0]
   2b75c:	0e12      	lsrs	r2, r2, #24
   2b75e:	b2d2      	uxtb	r2, r2
   2b760:	701a      	strb	r2, [r3, #0]
   2b762:	2392      	movs	r3, #146	; 0x92
   2b764:	009b      	lsls	r3, r3, #2
   2b766:	18fb      	adds	r3, r7, r3
   2b768:	681b      	ldr	r3, [r3, #0]
   2b76a:	330b      	adds	r3, #11
   2b76c:	2200      	movs	r2, #0
   2b76e:	701a      	strb	r2, [r3, #0]
   2b770:	2392      	movs	r3, #146	; 0x92
   2b772:	009b      	lsls	r3, r3, #2
   2b774:	18fb      	adds	r3, r7, r3
   2b776:	681b      	ldr	r3, [r3, #0]
   2b778:	331c      	adds	r3, #28
   2b77a:	2200      	movs	r2, #0
   2b77c:	701a      	strb	r2, [r3, #0]
   2b77e:	2392      	movs	r3, #146	; 0x92
   2b780:	009b      	lsls	r3, r3, #2
   2b782:	18fb      	adds	r3, r7, r3
   2b784:	681b      	ldr	r3, [r3, #0]
   2b786:	331d      	adds	r3, #29
   2b788:	2200      	movs	r2, #0
   2b78a:	701a      	strb	r2, [r3, #0]
   2b78c:	2392      	movs	r3, #146	; 0x92
   2b78e:	009b      	lsls	r3, r3, #2
   2b790:	18fb      	adds	r3, r7, r3
   2b792:	681b      	ldr	r3, [r3, #0]
   2b794:	331e      	adds	r3, #30
   2b796:	2200      	movs	r2, #0
   2b798:	701a      	strb	r2, [r3, #0]
   2b79a:	2392      	movs	r3, #146	; 0x92
   2b79c:	009b      	lsls	r3, r3, #2
   2b79e:	18fb      	adds	r3, r7, r3
   2b7a0:	681b      	ldr	r3, [r3, #0]
   2b7a2:	331f      	adds	r3, #31
   2b7a4:	2200      	movs	r2, #0
   2b7a6:	701a      	strb	r2, [r3, #0]
   2b7a8:	2392      	movs	r3, #146	; 0x92
   2b7aa:	009b      	lsls	r3, r3, #2
   2b7ac:	18fb      	adds	r3, r7, r3
   2b7ae:	681b      	ldr	r3, [r3, #0]
   2b7b0:	3315      	adds	r3, #21
   2b7b2:	781b      	ldrb	r3, [r3, #0]
   2b7b4:	021b      	lsls	r3, r3, #8
   2b7b6:	b21a      	sxth	r2, r3
   2b7b8:	2392      	movs	r3, #146	; 0x92
   2b7ba:	009b      	lsls	r3, r3, #2
   2b7bc:	18fb      	adds	r3, r7, r3
   2b7be:	681b      	ldr	r3, [r3, #0]
   2b7c0:	3314      	adds	r3, #20
   2b7c2:	781b      	ldrb	r3, [r3, #0]
   2b7c4:	b21b      	sxth	r3, r3
   2b7c6:	4313      	orrs	r3, r2
   2b7c8:	b21b      	sxth	r3, r3
   2b7ca:	b29b      	uxth	r3, r3
   2b7cc:	041b      	lsls	r3, r3, #16
   2b7ce:	2292      	movs	r2, #146	; 0x92
   2b7d0:	0092      	lsls	r2, r2, #2
   2b7d2:	18ba      	adds	r2, r7, r2
   2b7d4:	6812      	ldr	r2, [r2, #0]
   2b7d6:	321b      	adds	r2, #27
   2b7d8:	7812      	ldrb	r2, [r2, #0]
   2b7da:	0212      	lsls	r2, r2, #8
   2b7dc:	b211      	sxth	r1, r2
   2b7de:	2292      	movs	r2, #146	; 0x92
   2b7e0:	0092      	lsls	r2, r2, #2
   2b7e2:	18ba      	adds	r2, r7, r2
   2b7e4:	6812      	ldr	r2, [r2, #0]
   2b7e6:	321a      	adds	r2, #26
   2b7e8:	7812      	ldrb	r2, [r2, #0]
   2b7ea:	b212      	sxth	r2, r2
   2b7ec:	430a      	orrs	r2, r1
   2b7ee:	b212      	sxth	r2, r2
   2b7f0:	b292      	uxth	r2, r2
   2b7f2:	4313      	orrs	r3, r2
   2b7f4:	2290      	movs	r2, #144	; 0x90
   2b7f6:	0092      	lsls	r2, r2, #2
   2b7f8:	18ba      	adds	r2, r7, r2
   2b7fa:	6013      	str	r3, [r2, #0]
   2b7fc:	2392      	movs	r3, #146	; 0x92
   2b7fe:	009b      	lsls	r3, r3, #2
   2b800:	18fb      	adds	r3, r7, r3
   2b802:	681b      	ldr	r3, [r3, #0]
   2b804:	331a      	adds	r3, #26
   2b806:	2200      	movs	r2, #0
   2b808:	701a      	strb	r2, [r3, #0]
   2b80a:	2392      	movs	r3, #146	; 0x92
   2b80c:	009b      	lsls	r3, r3, #2
   2b80e:	18fb      	adds	r3, r7, r3
   2b810:	681b      	ldr	r3, [r3, #0]
   2b812:	331b      	adds	r3, #27
   2b814:	2200      	movs	r2, #0
   2b816:	701a      	strb	r2, [r3, #0]
   2b818:	2392      	movs	r3, #146	; 0x92
   2b81a:	009b      	lsls	r3, r3, #2
   2b81c:	18fb      	adds	r3, r7, r3
   2b81e:	681b      	ldr	r3, [r3, #0]
   2b820:	3314      	adds	r3, #20
   2b822:	2200      	movs	r2, #0
   2b824:	701a      	strb	r2, [r3, #0]
   2b826:	2392      	movs	r3, #146	; 0x92
   2b828:	009b      	lsls	r3, r3, #2
   2b82a:	18fb      	adds	r3, r7, r3
   2b82c:	681b      	ldr	r3, [r3, #0]
   2b82e:	3315      	adds	r3, #21
   2b830:	2200      	movs	r2, #0
   2b832:	701a      	strb	r2, [r3, #0]
   2b834:	2387      	movs	r3, #135	; 0x87
   2b836:	009b      	lsls	r3, r3, #2
   2b838:	18fb      	adds	r3, r7, r3
   2b83a:	681b      	ldr	r3, [r3, #0]
   2b83c:	2201      	movs	r2, #1
   2b83e:	711a      	strb	r2, [r3, #4]
   2b840:	2390      	movs	r3, #144	; 0x90
   2b842:	009b      	lsls	r3, r3, #2
   2b844:	18fb      	adds	r3, r7, r3
   2b846:	681b      	ldr	r3, [r3, #0]
   2b848:	2b00      	cmp	r3, #0
   2b84a:	d100      	bne.n	2b84e <f_open+0x2fe>
   2b84c:	e076      	b.n	2b93c <f_open+0x3ec>
   2b84e:	2387      	movs	r3, #135	; 0x87
   2b850:	009b      	lsls	r3, r3, #2
   2b852:	18fb      	adds	r3, r7, r3
   2b854:	681b      	ldr	r3, [r3, #0]
   2b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b858:	2291      	movs	r2, #145	; 0x91
   2b85a:	0092      	lsls	r2, r2, #2
   2b85c:	18ba      	adds	r2, r7, r2
   2b85e:	6013      	str	r3, [r2, #0]
   2b860:	2387      	movs	r3, #135	; 0x87
   2b862:	009b      	lsls	r3, r3, #2
   2b864:	18fb      	adds	r3, r7, r3
   2b866:	681b      	ldr	r3, [r3, #0]
   2b868:	4a21      	ldr	r2, [pc, #132]	; (2b8f0 <f_open+0x3a0>)
   2b86a:	18bc      	adds	r4, r7, r2
   2b86c:	2290      	movs	r2, #144	; 0x90
   2b86e:	0092      	lsls	r2, r2, #2
   2b870:	18ba      	adds	r2, r7, r2
   2b872:	6812      	ldr	r2, [r2, #0]
   2b874:	0011      	movs	r1, r2
   2b876:	0018      	movs	r0, r3
   2b878:	4b22      	ldr	r3, [pc, #136]	; (2b904 <f_open+0x3b4>)
   2b87a:	4798      	blx	r3
   2b87c:	0003      	movs	r3, r0
   2b87e:	7023      	strb	r3, [r4, #0]
   2b880:	4b1b      	ldr	r3, [pc, #108]	; (2b8f0 <f_open+0x3a0>)
   2b882:	18fb      	adds	r3, r7, r3
   2b884:	781b      	ldrb	r3, [r3, #0]
   2b886:	2b00      	cmp	r3, #0
   2b888:	d158      	bne.n	2b93c <f_open+0x3ec>
   2b88a:	2387      	movs	r3, #135	; 0x87
   2b88c:	009b      	lsls	r3, r3, #2
   2b88e:	18fb      	adds	r3, r7, r3
   2b890:	681b      	ldr	r3, [r3, #0]
   2b892:	2290      	movs	r2, #144	; 0x90
   2b894:	0092      	lsls	r2, r2, #2
   2b896:	18ba      	adds	r2, r7, r2
   2b898:	6812      	ldr	r2, [r2, #0]
   2b89a:	3a01      	subs	r2, #1
   2b89c:	60da      	str	r2, [r3, #12]
   2b89e:	2387      	movs	r3, #135	; 0x87
   2b8a0:	009b      	lsls	r3, r3, #2
   2b8a2:	18fb      	adds	r3, r7, r3
   2b8a4:	681b      	ldr	r3, [r3, #0]
   2b8a6:	4a12      	ldr	r2, [pc, #72]	; (2b8f0 <f_open+0x3a0>)
   2b8a8:	18bc      	adds	r4, r7, r2
   2b8aa:	2291      	movs	r2, #145	; 0x91
   2b8ac:	0092      	lsls	r2, r2, #2
   2b8ae:	18ba      	adds	r2, r7, r2
   2b8b0:	6812      	ldr	r2, [r2, #0]
   2b8b2:	0011      	movs	r1, r2
   2b8b4:	0018      	movs	r0, r3
   2b8b6:	4b14      	ldr	r3, [pc, #80]	; (2b908 <f_open+0x3b8>)
   2b8b8:	4798      	blx	r3
   2b8ba:	0003      	movs	r3, r0
   2b8bc:	7023      	strb	r3, [r4, #0]
   2b8be:	e03d      	b.n	2b93c <f_open+0x3ec>
   2b8c0:	4b0b      	ldr	r3, [pc, #44]	; (2b8f0 <f_open+0x3a0>)
   2b8c2:	18fb      	adds	r3, r7, r3
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	2b00      	cmp	r3, #0
   2b8c8:	d138      	bne.n	2b93c <f_open+0x3ec>
   2b8ca:	2392      	movs	r3, #146	; 0x92
   2b8cc:	009b      	lsls	r3, r3, #2
   2b8ce:	18fb      	adds	r3, r7, r3
   2b8d0:	681b      	ldr	r3, [r3, #0]
   2b8d2:	330b      	adds	r3, #11
   2b8d4:	781b      	ldrb	r3, [r3, #0]
   2b8d6:	001a      	movs	r2, r3
   2b8d8:	2310      	movs	r3, #16
   2b8da:	4013      	ands	r3, r2
   2b8dc:	d016      	beq.n	2b90c <f_open+0x3bc>
   2b8de:	4b04      	ldr	r3, [pc, #16]	; (2b8f0 <f_open+0x3a0>)
   2b8e0:	18fb      	adds	r3, r7, r3
   2b8e2:	2204      	movs	r2, #4
   2b8e4:	701a      	strb	r2, [r3, #0]
   2b8e6:	e029      	b.n	2b93c <f_open+0x3ec>
   2b8e8:	fffffdac 	.word	0xfffffdac
   2b8ec:	fffffdb7 	.word	0xfffffdb7
   2b8f0:	0000024f 	.word	0x0000024f
   2b8f4:	0002aea9 	.word	0x0002aea9
   2b8f8:	0002ac9d 	.word	0x0002ac9d
   2b8fc:	0002a4ed 	.word	0x0002a4ed
   2b900:	000292e5 	.word	0x000292e5
   2b904:	00029a69 	.word	0x00029a69
   2b908:	00029429 	.word	0x00029429
   2b90c:	4b5a      	ldr	r3, [pc, #360]	; (2ba78 <f_open+0x528>)
   2b90e:	2294      	movs	r2, #148	; 0x94
   2b910:	0092      	lsls	r2, r2, #2
   2b912:	4694      	mov	ip, r2
   2b914:	44bc      	add	ip, r7
   2b916:	4463      	add	r3, ip
   2b918:	781b      	ldrb	r3, [r3, #0]
   2b91a:	2202      	movs	r2, #2
   2b91c:	4013      	ands	r3, r2
   2b91e:	d00d      	beq.n	2b93c <f_open+0x3ec>
   2b920:	2392      	movs	r3, #146	; 0x92
   2b922:	009b      	lsls	r3, r3, #2
   2b924:	18fb      	adds	r3, r7, r3
   2b926:	681b      	ldr	r3, [r3, #0]
   2b928:	330b      	adds	r3, #11
   2b92a:	781b      	ldrb	r3, [r3, #0]
   2b92c:	001a      	movs	r2, r3
   2b92e:	2301      	movs	r3, #1
   2b930:	4013      	ands	r3, r2
   2b932:	d003      	beq.n	2b93c <f_open+0x3ec>
   2b934:	4b51      	ldr	r3, [pc, #324]	; (2ba7c <f_open+0x52c>)
   2b936:	18fb      	adds	r3, r7, r3
   2b938:	2207      	movs	r2, #7
   2b93a:	701a      	strb	r2, [r3, #0]
   2b93c:	4b4f      	ldr	r3, [pc, #316]	; (2ba7c <f_open+0x52c>)
   2b93e:	18fb      	adds	r3, r7, r3
   2b940:	781b      	ldrb	r3, [r3, #0]
   2b942:	2b00      	cmp	r3, #0
   2b944:	d126      	bne.n	2b994 <f_open+0x444>
   2b946:	4b4c      	ldr	r3, [pc, #304]	; (2ba78 <f_open+0x528>)
   2b948:	2294      	movs	r2, #148	; 0x94
   2b94a:	0092      	lsls	r2, r2, #2
   2b94c:	4694      	mov	ip, r2
   2b94e:	44bc      	add	ip, r7
   2b950:	4463      	add	r3, ip
   2b952:	781b      	ldrb	r3, [r3, #0]
   2b954:	2208      	movs	r2, #8
   2b956:	4013      	ands	r3, r2
   2b958:	d00f      	beq.n	2b97a <f_open+0x42a>
   2b95a:	4b47      	ldr	r3, [pc, #284]	; (2ba78 <f_open+0x528>)
   2b95c:	2294      	movs	r2, #148	; 0x94
   2b95e:	0092      	lsls	r2, r2, #2
   2b960:	4694      	mov	ip, r2
   2b962:	44bc      	add	ip, r7
   2b964:	4463      	add	r3, ip
   2b966:	4a44      	ldr	r2, [pc, #272]	; (2ba78 <f_open+0x528>)
   2b968:	2194      	movs	r1, #148	; 0x94
   2b96a:	0089      	lsls	r1, r1, #2
   2b96c:	468c      	mov	ip, r1
   2b96e:	44bc      	add	ip, r7
   2b970:	4462      	add	r2, ip
   2b972:	7812      	ldrb	r2, [r2, #0]
   2b974:	2120      	movs	r1, #32
   2b976:	430a      	orrs	r2, r1
   2b978:	701a      	strb	r2, [r3, #0]
   2b97a:	2387      	movs	r3, #135	; 0x87
   2b97c:	009b      	lsls	r3, r3, #2
   2b97e:	18fb      	adds	r3, r7, r3
   2b980:	681b      	ldr	r3, [r3, #0]
   2b982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b984:	68fb      	ldr	r3, [r7, #12]
   2b986:	61da      	str	r2, [r3, #28]
   2b988:	68fb      	ldr	r3, [r7, #12]
   2b98a:	2292      	movs	r2, #146	; 0x92
   2b98c:	0092      	lsls	r2, r2, #2
   2b98e:	18ba      	adds	r2, r7, r2
   2b990:	6812      	ldr	r2, [r2, #0]
   2b992:	621a      	str	r2, [r3, #32]
   2b994:	4b39      	ldr	r3, [pc, #228]	; (2ba7c <f_open+0x52c>)
   2b996:	18fb      	adds	r3, r7, r3
   2b998:	781b      	ldrb	r3, [r3, #0]
   2b99a:	2b00      	cmp	r3, #0
   2b99c:	d163      	bne.n	2ba66 <f_open+0x516>
   2b99e:	68fb      	ldr	r3, [r7, #12]
   2b9a0:	4a35      	ldr	r2, [pc, #212]	; (2ba78 <f_open+0x528>)
   2b9a2:	2194      	movs	r1, #148	; 0x94
   2b9a4:	0089      	lsls	r1, r1, #2
   2b9a6:	468c      	mov	ip, r1
   2b9a8:	44bc      	add	ip, r7
   2b9aa:	4462      	add	r2, ip
   2b9ac:	7812      	ldrb	r2, [r2, #0]
   2b9ae:	719a      	strb	r2, [r3, #6]
   2b9b0:	2392      	movs	r3, #146	; 0x92
   2b9b2:	009b      	lsls	r3, r3, #2
   2b9b4:	18fb      	adds	r3, r7, r3
   2b9b6:	681b      	ldr	r3, [r3, #0]
   2b9b8:	3315      	adds	r3, #21
   2b9ba:	781b      	ldrb	r3, [r3, #0]
   2b9bc:	021b      	lsls	r3, r3, #8
   2b9be:	b21a      	sxth	r2, r3
   2b9c0:	2392      	movs	r3, #146	; 0x92
   2b9c2:	009b      	lsls	r3, r3, #2
   2b9c4:	18fb      	adds	r3, r7, r3
   2b9c6:	681b      	ldr	r3, [r3, #0]
   2b9c8:	3314      	adds	r3, #20
   2b9ca:	781b      	ldrb	r3, [r3, #0]
   2b9cc:	b21b      	sxth	r3, r3
   2b9ce:	4313      	orrs	r3, r2
   2b9d0:	b21b      	sxth	r3, r3
   2b9d2:	b29b      	uxth	r3, r3
   2b9d4:	041b      	lsls	r3, r3, #16
   2b9d6:	2292      	movs	r2, #146	; 0x92
   2b9d8:	0092      	lsls	r2, r2, #2
   2b9da:	18ba      	adds	r2, r7, r2
   2b9dc:	6812      	ldr	r2, [r2, #0]
   2b9de:	321b      	adds	r2, #27
   2b9e0:	7812      	ldrb	r2, [r2, #0]
   2b9e2:	0212      	lsls	r2, r2, #8
   2b9e4:	b211      	sxth	r1, r2
   2b9e6:	2292      	movs	r2, #146	; 0x92
   2b9e8:	0092      	lsls	r2, r2, #2
   2b9ea:	18ba      	adds	r2, r7, r2
   2b9ec:	6812      	ldr	r2, [r2, #0]
   2b9ee:	321a      	adds	r2, #26
   2b9f0:	7812      	ldrb	r2, [r2, #0]
   2b9f2:	b212      	sxth	r2, r2
   2b9f4:	430a      	orrs	r2, r1
   2b9f6:	b212      	sxth	r2, r2
   2b9f8:	b292      	uxth	r2, r2
   2b9fa:	431a      	orrs	r2, r3
   2b9fc:	68fb      	ldr	r3, [r7, #12]
   2b9fe:	611a      	str	r2, [r3, #16]
   2ba00:	2392      	movs	r3, #146	; 0x92
   2ba02:	009b      	lsls	r3, r3, #2
   2ba04:	18fb      	adds	r3, r7, r3
   2ba06:	681b      	ldr	r3, [r3, #0]
   2ba08:	331f      	adds	r3, #31
   2ba0a:	781b      	ldrb	r3, [r3, #0]
   2ba0c:	061a      	lsls	r2, r3, #24
   2ba0e:	2392      	movs	r3, #146	; 0x92
   2ba10:	009b      	lsls	r3, r3, #2
   2ba12:	18fb      	adds	r3, r7, r3
   2ba14:	681b      	ldr	r3, [r3, #0]
   2ba16:	331e      	adds	r3, #30
   2ba18:	781b      	ldrb	r3, [r3, #0]
   2ba1a:	041b      	lsls	r3, r3, #16
   2ba1c:	4313      	orrs	r3, r2
   2ba1e:	2292      	movs	r2, #146	; 0x92
   2ba20:	0092      	lsls	r2, r2, #2
   2ba22:	18ba      	adds	r2, r7, r2
   2ba24:	6812      	ldr	r2, [r2, #0]
   2ba26:	321d      	adds	r2, #29
   2ba28:	7812      	ldrb	r2, [r2, #0]
   2ba2a:	0212      	lsls	r2, r2, #8
   2ba2c:	4313      	orrs	r3, r2
   2ba2e:	2292      	movs	r2, #146	; 0x92
   2ba30:	0092      	lsls	r2, r2, #2
   2ba32:	18ba      	adds	r2, r7, r2
   2ba34:	6812      	ldr	r2, [r2, #0]
   2ba36:	321c      	adds	r2, #28
   2ba38:	7812      	ldrb	r2, [r2, #0]
   2ba3a:	431a      	orrs	r2, r3
   2ba3c:	68fb      	ldr	r3, [r7, #12]
   2ba3e:	60da      	str	r2, [r3, #12]
   2ba40:	68fb      	ldr	r3, [r7, #12]
   2ba42:	2200      	movs	r2, #0
   2ba44:	609a      	str	r2, [r3, #8]
   2ba46:	68fb      	ldr	r3, [r7, #12]
   2ba48:	2200      	movs	r2, #0
   2ba4a:	619a      	str	r2, [r3, #24]
   2ba4c:	2387      	movs	r3, #135	; 0x87
   2ba4e:	009b      	lsls	r3, r3, #2
   2ba50:	18fb      	adds	r3, r7, r3
   2ba52:	681a      	ldr	r2, [r3, #0]
   2ba54:	68fb      	ldr	r3, [r7, #12]
   2ba56:	601a      	str	r2, [r3, #0]
   2ba58:	2387      	movs	r3, #135	; 0x87
   2ba5a:	009b      	lsls	r3, r3, #2
   2ba5c:	18fb      	adds	r3, r7, r3
   2ba5e:	681b      	ldr	r3, [r3, #0]
   2ba60:	88da      	ldrh	r2, [r3, #6]
   2ba62:	68fb      	ldr	r3, [r7, #12]
   2ba64:	809a      	strh	r2, [r3, #4]
   2ba66:	4b05      	ldr	r3, [pc, #20]	; (2ba7c <f_open+0x52c>)
   2ba68:	18fb      	adds	r3, r7, r3
   2ba6a:	781b      	ldrb	r3, [r3, #0]
   2ba6c:	0018      	movs	r0, r3
   2ba6e:	46bd      	mov	sp, r7
   2ba70:	2395      	movs	r3, #149	; 0x95
   2ba72:	009b      	lsls	r3, r3, #2
   2ba74:	449d      	add	sp, r3
   2ba76:	bd90      	pop	{r4, r7, pc}
   2ba78:	fffffdb7 	.word	0xfffffdb7
   2ba7c:	0000024f 	.word	0x0000024f

0002ba80 <f_write>:
   2ba80:	b590      	push	{r4, r7, lr}
   2ba82:	b08b      	sub	sp, #44	; 0x2c
   2ba84:	af00      	add	r7, sp, #0
   2ba86:	60f8      	str	r0, [r7, #12]
   2ba88:	60b9      	str	r1, [r7, #8]
   2ba8a:	607a      	str	r2, [r7, #4]
   2ba8c:	603b      	str	r3, [r7, #0]
   2ba8e:	68bb      	ldr	r3, [r7, #8]
   2ba90:	61bb      	str	r3, [r7, #24]
   2ba92:	683b      	ldr	r3, [r7, #0]
   2ba94:	2200      	movs	r2, #0
   2ba96:	601a      	str	r2, [r3, #0]
   2ba98:	68fb      	ldr	r3, [r7, #12]
   2ba9a:	681a      	ldr	r2, [r3, #0]
   2ba9c:	68fb      	ldr	r3, [r7, #12]
   2ba9e:	889b      	ldrh	r3, [r3, #4]
   2baa0:	2117      	movs	r1, #23
   2baa2:	187c      	adds	r4, r7, r1
   2baa4:	0019      	movs	r1, r3
   2baa6:	0010      	movs	r0, r2
   2baa8:	4bc3      	ldr	r3, [pc, #780]	; (2bdb8 <f_write+0x338>)
   2baaa:	4798      	blx	r3
   2baac:	0003      	movs	r3, r0
   2baae:	7023      	strb	r3, [r4, #0]
   2bab0:	2317      	movs	r3, #23
   2bab2:	18fb      	adds	r3, r7, r3
   2bab4:	781b      	ldrb	r3, [r3, #0]
   2bab6:	2b00      	cmp	r3, #0
   2bab8:	d003      	beq.n	2bac2 <f_write+0x42>
   2baba:	2317      	movs	r3, #23
   2babc:	18fb      	adds	r3, r7, r3
   2babe:	781b      	ldrb	r3, [r3, #0]
   2bac0:	e176      	b.n	2bdb0 <f_write+0x330>
   2bac2:	68fb      	ldr	r3, [r7, #12]
   2bac4:	799b      	ldrb	r3, [r3, #6]
   2bac6:	b25b      	sxtb	r3, r3
   2bac8:	2b00      	cmp	r3, #0
   2baca:	da01      	bge.n	2bad0 <f_write+0x50>
   2bacc:	2302      	movs	r3, #2
   2bace:	e16f      	b.n	2bdb0 <f_write+0x330>
   2bad0:	68fb      	ldr	r3, [r7, #12]
   2bad2:	799b      	ldrb	r3, [r3, #6]
   2bad4:	001a      	movs	r2, r3
   2bad6:	2302      	movs	r3, #2
   2bad8:	4013      	ands	r3, r2
   2bada:	d101      	bne.n	2bae0 <f_write+0x60>
   2badc:	2307      	movs	r3, #7
   2bade:	e167      	b.n	2bdb0 <f_write+0x330>
   2bae0:	68fb      	ldr	r3, [r7, #12]
   2bae2:	68da      	ldr	r2, [r3, #12]
   2bae4:	687b      	ldr	r3, [r7, #4]
   2bae6:	18d2      	adds	r2, r2, r3
   2bae8:	68fb      	ldr	r3, [r7, #12]
   2baea:	68db      	ldr	r3, [r3, #12]
   2baec:	429a      	cmp	r2, r3
   2baee:	d300      	bcc.n	2baf2 <f_write+0x72>
   2baf0:	e146      	b.n	2bd80 <f_write+0x300>
   2baf2:	2300      	movs	r3, #0
   2baf4:	607b      	str	r3, [r7, #4]
   2baf6:	e143      	b.n	2bd80 <f_write+0x300>
   2baf8:	68fb      	ldr	r3, [r7, #12]
   2bafa:	689b      	ldr	r3, [r3, #8]
   2bafc:	05db      	lsls	r3, r3, #23
   2bafe:	0ddb      	lsrs	r3, r3, #23
   2bb00:	d000      	beq.n	2bb04 <f_write+0x84>
   2bb02:	e0f6      	b.n	2bcf2 <f_write+0x272>
   2bb04:	68fb      	ldr	r3, [r7, #12]
   2bb06:	689b      	ldr	r3, [r3, #8]
   2bb08:	0a5b      	lsrs	r3, r3, #9
   2bb0a:	b2da      	uxtb	r2, r3
   2bb0c:	68fb      	ldr	r3, [r7, #12]
   2bb0e:	681b      	ldr	r3, [r3, #0]
   2bb10:	789b      	ldrb	r3, [r3, #2]
   2bb12:	3b01      	subs	r3, #1
   2bb14:	b2d9      	uxtb	r1, r3
   2bb16:	2316      	movs	r3, #22
   2bb18:	18fb      	adds	r3, r7, r3
   2bb1a:	400a      	ands	r2, r1
   2bb1c:	701a      	strb	r2, [r3, #0]
   2bb1e:	2316      	movs	r3, #22
   2bb20:	18fb      	adds	r3, r7, r3
   2bb22:	781b      	ldrb	r3, [r3, #0]
   2bb24:	2b00      	cmp	r3, #0
   2bb26:	d140      	bne.n	2bbaa <f_write+0x12a>
   2bb28:	68fb      	ldr	r3, [r7, #12]
   2bb2a:	689b      	ldr	r3, [r3, #8]
   2bb2c:	2b00      	cmp	r3, #0
   2bb2e:	d111      	bne.n	2bb54 <f_write+0xd4>
   2bb30:	68fb      	ldr	r3, [r7, #12]
   2bb32:	691b      	ldr	r3, [r3, #16]
   2bb34:	627b      	str	r3, [r7, #36]	; 0x24
   2bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb38:	2b00      	cmp	r3, #0
   2bb3a:	d115      	bne.n	2bb68 <f_write+0xe8>
   2bb3c:	68fb      	ldr	r3, [r7, #12]
   2bb3e:	681b      	ldr	r3, [r3, #0]
   2bb40:	2100      	movs	r1, #0
   2bb42:	0018      	movs	r0, r3
   2bb44:	4b9d      	ldr	r3, [pc, #628]	; (2bdbc <f_write+0x33c>)
   2bb46:	4798      	blx	r3
   2bb48:	0003      	movs	r3, r0
   2bb4a:	627b      	str	r3, [r7, #36]	; 0x24
   2bb4c:	68fb      	ldr	r3, [r7, #12]
   2bb4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2bb50:	611a      	str	r2, [r3, #16]
   2bb52:	e009      	b.n	2bb68 <f_write+0xe8>
   2bb54:	68fb      	ldr	r3, [r7, #12]
   2bb56:	681a      	ldr	r2, [r3, #0]
   2bb58:	68fb      	ldr	r3, [r7, #12]
   2bb5a:	695b      	ldr	r3, [r3, #20]
   2bb5c:	0019      	movs	r1, r3
   2bb5e:	0010      	movs	r0, r2
   2bb60:	4b96      	ldr	r3, [pc, #600]	; (2bdbc <f_write+0x33c>)
   2bb62:	4798      	blx	r3
   2bb64:	0003      	movs	r3, r0
   2bb66:	627b      	str	r3, [r7, #36]	; 0x24
   2bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb6a:	2b00      	cmp	r3, #0
   2bb6c:	d100      	bne.n	2bb70 <f_write+0xf0>
   2bb6e:	e10c      	b.n	2bd8a <f_write+0x30a>
   2bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb72:	2b01      	cmp	r3, #1
   2bb74:	d109      	bne.n	2bb8a <f_write+0x10a>
   2bb76:	68fb      	ldr	r3, [r7, #12]
   2bb78:	799b      	ldrb	r3, [r3, #6]
   2bb7a:	2280      	movs	r2, #128	; 0x80
   2bb7c:	4252      	negs	r2, r2
   2bb7e:	4313      	orrs	r3, r2
   2bb80:	b2da      	uxtb	r2, r3
   2bb82:	68fb      	ldr	r3, [r7, #12]
   2bb84:	719a      	strb	r2, [r3, #6]
   2bb86:	2302      	movs	r3, #2
   2bb88:	e112      	b.n	2bdb0 <f_write+0x330>
   2bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb8c:	3301      	adds	r3, #1
   2bb8e:	d109      	bne.n	2bba4 <f_write+0x124>
   2bb90:	68fb      	ldr	r3, [r7, #12]
   2bb92:	799b      	ldrb	r3, [r3, #6]
   2bb94:	2280      	movs	r2, #128	; 0x80
   2bb96:	4252      	negs	r2, r2
   2bb98:	4313      	orrs	r3, r2
   2bb9a:	b2da      	uxtb	r2, r3
   2bb9c:	68fb      	ldr	r3, [r7, #12]
   2bb9e:	719a      	strb	r2, [r3, #6]
   2bba0:	2301      	movs	r3, #1
   2bba2:	e105      	b.n	2bdb0 <f_write+0x330>
   2bba4:	68fb      	ldr	r3, [r7, #12]
   2bba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2bba8:	615a      	str	r2, [r3, #20]
   2bbaa:	68fb      	ldr	r3, [r7, #12]
   2bbac:	681b      	ldr	r3, [r3, #0]
   2bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bbb0:	68fb      	ldr	r3, [r7, #12]
   2bbb2:	699b      	ldr	r3, [r3, #24]
   2bbb4:	429a      	cmp	r2, r3
   2bbb6:	d111      	bne.n	2bbdc <f_write+0x15c>
   2bbb8:	68fb      	ldr	r3, [r7, #12]
   2bbba:	681b      	ldr	r3, [r3, #0]
   2bbbc:	2100      	movs	r1, #0
   2bbbe:	0018      	movs	r0, r3
   2bbc0:	4b7f      	ldr	r3, [pc, #508]	; (2bdc0 <f_write+0x340>)
   2bbc2:	4798      	blx	r3
   2bbc4:	1e03      	subs	r3, r0, #0
   2bbc6:	d009      	beq.n	2bbdc <f_write+0x15c>
   2bbc8:	68fb      	ldr	r3, [r7, #12]
   2bbca:	799b      	ldrb	r3, [r3, #6]
   2bbcc:	2280      	movs	r2, #128	; 0x80
   2bbce:	4252      	negs	r2, r2
   2bbd0:	4313      	orrs	r3, r2
   2bbd2:	b2da      	uxtb	r2, r3
   2bbd4:	68fb      	ldr	r3, [r7, #12]
   2bbd6:	719a      	strb	r2, [r3, #6]
   2bbd8:	2301      	movs	r3, #1
   2bbda:	e0e9      	b.n	2bdb0 <f_write+0x330>
   2bbdc:	68fb      	ldr	r3, [r7, #12]
   2bbde:	681a      	ldr	r2, [r3, #0]
   2bbe0:	68fb      	ldr	r3, [r7, #12]
   2bbe2:	695b      	ldr	r3, [r3, #20]
   2bbe4:	0019      	movs	r1, r3
   2bbe6:	0010      	movs	r0, r2
   2bbe8:	4b76      	ldr	r3, [pc, #472]	; (2bdc4 <f_write+0x344>)
   2bbea:	4798      	blx	r3
   2bbec:	0003      	movs	r3, r0
   2bbee:	613b      	str	r3, [r7, #16]
   2bbf0:	693b      	ldr	r3, [r7, #16]
   2bbf2:	2b00      	cmp	r3, #0
   2bbf4:	d109      	bne.n	2bc0a <f_write+0x18a>
   2bbf6:	68fb      	ldr	r3, [r7, #12]
   2bbf8:	799b      	ldrb	r3, [r3, #6]
   2bbfa:	2280      	movs	r2, #128	; 0x80
   2bbfc:	4252      	negs	r2, r2
   2bbfe:	4313      	orrs	r3, r2
   2bc00:	b2da      	uxtb	r2, r3
   2bc02:	68fb      	ldr	r3, [r7, #12]
   2bc04:	719a      	strb	r2, [r3, #6]
   2bc06:	2302      	movs	r3, #2
   2bc08:	e0d2      	b.n	2bdb0 <f_write+0x330>
   2bc0a:	2316      	movs	r3, #22
   2bc0c:	18fb      	adds	r3, r7, r3
   2bc0e:	781b      	ldrb	r3, [r3, #0]
   2bc10:	693a      	ldr	r2, [r7, #16]
   2bc12:	18d3      	adds	r3, r2, r3
   2bc14:	613b      	str	r3, [r7, #16]
   2bc16:	687b      	ldr	r3, [r7, #4]
   2bc18:	0a5b      	lsrs	r3, r3, #9
   2bc1a:	61fb      	str	r3, [r7, #28]
   2bc1c:	69fb      	ldr	r3, [r7, #28]
   2bc1e:	2b00      	cmp	r3, #0
   2bc20:	d048      	beq.n	2bcb4 <f_write+0x234>
   2bc22:	2316      	movs	r3, #22
   2bc24:	18fb      	adds	r3, r7, r3
   2bc26:	781a      	ldrb	r2, [r3, #0]
   2bc28:	69fb      	ldr	r3, [r7, #28]
   2bc2a:	18d2      	adds	r2, r2, r3
   2bc2c:	68fb      	ldr	r3, [r7, #12]
   2bc2e:	681b      	ldr	r3, [r3, #0]
   2bc30:	789b      	ldrb	r3, [r3, #2]
   2bc32:	429a      	cmp	r2, r3
   2bc34:	d908      	bls.n	2bc48 <f_write+0x1c8>
   2bc36:	68fb      	ldr	r3, [r7, #12]
   2bc38:	681b      	ldr	r3, [r3, #0]
   2bc3a:	789b      	ldrb	r3, [r3, #2]
   2bc3c:	001a      	movs	r2, r3
   2bc3e:	2316      	movs	r3, #22
   2bc40:	18fb      	adds	r3, r7, r3
   2bc42:	781b      	ldrb	r3, [r3, #0]
   2bc44:	1ad3      	subs	r3, r2, r3
   2bc46:	61fb      	str	r3, [r7, #28]
   2bc48:	68fb      	ldr	r3, [r7, #12]
   2bc4a:	681b      	ldr	r3, [r3, #0]
   2bc4c:	7858      	ldrb	r0, [r3, #1]
   2bc4e:	69fb      	ldr	r3, [r7, #28]
   2bc50:	b2db      	uxtb	r3, r3
   2bc52:	693a      	ldr	r2, [r7, #16]
   2bc54:	69b9      	ldr	r1, [r7, #24]
   2bc56:	4c5c      	ldr	r4, [pc, #368]	; (2bdc8 <f_write+0x348>)
   2bc58:	47a0      	blx	r4
   2bc5a:	1e03      	subs	r3, r0, #0
   2bc5c:	d009      	beq.n	2bc72 <f_write+0x1f2>
   2bc5e:	68fb      	ldr	r3, [r7, #12]
   2bc60:	799b      	ldrb	r3, [r3, #6]
   2bc62:	2280      	movs	r2, #128	; 0x80
   2bc64:	4252      	negs	r2, r2
   2bc66:	4313      	orrs	r3, r2
   2bc68:	b2da      	uxtb	r2, r3
   2bc6a:	68fb      	ldr	r3, [r7, #12]
   2bc6c:	719a      	strb	r2, [r3, #6]
   2bc6e:	2301      	movs	r3, #1
   2bc70:	e09e      	b.n	2bdb0 <f_write+0x330>
   2bc72:	68fb      	ldr	r3, [r7, #12]
   2bc74:	681b      	ldr	r3, [r3, #0]
   2bc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bc78:	693b      	ldr	r3, [r7, #16]
   2bc7a:	1ad2      	subs	r2, r2, r3
   2bc7c:	69fb      	ldr	r3, [r7, #28]
   2bc7e:	429a      	cmp	r2, r3
   2bc80:	d214      	bcs.n	2bcac <f_write+0x22c>
   2bc82:	68fb      	ldr	r3, [r7, #12]
   2bc84:	681b      	ldr	r3, [r3, #0]
   2bc86:	3330      	adds	r3, #48	; 0x30
   2bc88:	0018      	movs	r0, r3
   2bc8a:	68fb      	ldr	r3, [r7, #12]
   2bc8c:	681b      	ldr	r3, [r3, #0]
   2bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bc90:	693b      	ldr	r3, [r7, #16]
   2bc92:	1ad3      	subs	r3, r2, r3
   2bc94:	025b      	lsls	r3, r3, #9
   2bc96:	69ba      	ldr	r2, [r7, #24]
   2bc98:	18d1      	adds	r1, r2, r3
   2bc9a:	2380      	movs	r3, #128	; 0x80
   2bc9c:	009b      	lsls	r3, r3, #2
   2bc9e:	001a      	movs	r2, r3
   2bca0:	4b4a      	ldr	r3, [pc, #296]	; (2bdcc <f_write+0x34c>)
   2bca2:	4798      	blx	r3
   2bca4:	68fb      	ldr	r3, [r7, #12]
   2bca6:	681b      	ldr	r3, [r3, #0]
   2bca8:	2200      	movs	r2, #0
   2bcaa:	711a      	strb	r2, [r3, #4]
   2bcac:	69fb      	ldr	r3, [r7, #28]
   2bcae:	025b      	lsls	r3, r3, #9
   2bcb0:	623b      	str	r3, [r7, #32]
   2bcb2:	e051      	b.n	2bd58 <f_write+0x2d8>
   2bcb4:	68fb      	ldr	r3, [r7, #12]
   2bcb6:	689a      	ldr	r2, [r3, #8]
   2bcb8:	68fb      	ldr	r3, [r7, #12]
   2bcba:	68db      	ldr	r3, [r3, #12]
   2bcbc:	429a      	cmp	r2, r3
   2bcbe:	d315      	bcc.n	2bcec <f_write+0x26c>
   2bcc0:	68fb      	ldr	r3, [r7, #12]
   2bcc2:	681b      	ldr	r3, [r3, #0]
   2bcc4:	2100      	movs	r1, #0
   2bcc6:	0018      	movs	r0, r3
   2bcc8:	4b3d      	ldr	r3, [pc, #244]	; (2bdc0 <f_write+0x340>)
   2bcca:	4798      	blx	r3
   2bccc:	1e03      	subs	r3, r0, #0
   2bcce:	d009      	beq.n	2bce4 <f_write+0x264>
   2bcd0:	68fb      	ldr	r3, [r7, #12]
   2bcd2:	799b      	ldrb	r3, [r3, #6]
   2bcd4:	2280      	movs	r2, #128	; 0x80
   2bcd6:	4252      	negs	r2, r2
   2bcd8:	4313      	orrs	r3, r2
   2bcda:	b2da      	uxtb	r2, r3
   2bcdc:	68fb      	ldr	r3, [r7, #12]
   2bcde:	719a      	strb	r2, [r3, #6]
   2bce0:	2301      	movs	r3, #1
   2bce2:	e065      	b.n	2bdb0 <f_write+0x330>
   2bce4:	68fb      	ldr	r3, [r7, #12]
   2bce6:	681b      	ldr	r3, [r3, #0]
   2bce8:	693a      	ldr	r2, [r7, #16]
   2bcea:	62da      	str	r2, [r3, #44]	; 0x2c
   2bcec:	68fb      	ldr	r3, [r7, #12]
   2bcee:	693a      	ldr	r2, [r7, #16]
   2bcf0:	619a      	str	r2, [r3, #24]
   2bcf2:	68fb      	ldr	r3, [r7, #12]
   2bcf4:	689b      	ldr	r3, [r3, #8]
   2bcf6:	05db      	lsls	r3, r3, #23
   2bcf8:	0ddb      	lsrs	r3, r3, #23
   2bcfa:	2280      	movs	r2, #128	; 0x80
   2bcfc:	0092      	lsls	r2, r2, #2
   2bcfe:	1ad3      	subs	r3, r2, r3
   2bd00:	623b      	str	r3, [r7, #32]
   2bd02:	6a3a      	ldr	r2, [r7, #32]
   2bd04:	687b      	ldr	r3, [r7, #4]
   2bd06:	429a      	cmp	r2, r3
   2bd08:	d901      	bls.n	2bd0e <f_write+0x28e>
   2bd0a:	687b      	ldr	r3, [r7, #4]
   2bd0c:	623b      	str	r3, [r7, #32]
   2bd0e:	68fb      	ldr	r3, [r7, #12]
   2bd10:	681a      	ldr	r2, [r3, #0]
   2bd12:	68fb      	ldr	r3, [r7, #12]
   2bd14:	699b      	ldr	r3, [r3, #24]
   2bd16:	0019      	movs	r1, r3
   2bd18:	0010      	movs	r0, r2
   2bd1a:	4b29      	ldr	r3, [pc, #164]	; (2bdc0 <f_write+0x340>)
   2bd1c:	4798      	blx	r3
   2bd1e:	1e03      	subs	r3, r0, #0
   2bd20:	d009      	beq.n	2bd36 <f_write+0x2b6>
   2bd22:	68fb      	ldr	r3, [r7, #12]
   2bd24:	799b      	ldrb	r3, [r3, #6]
   2bd26:	2280      	movs	r2, #128	; 0x80
   2bd28:	4252      	negs	r2, r2
   2bd2a:	4313      	orrs	r3, r2
   2bd2c:	b2da      	uxtb	r2, r3
   2bd2e:	68fb      	ldr	r3, [r7, #12]
   2bd30:	719a      	strb	r2, [r3, #6]
   2bd32:	2301      	movs	r3, #1
   2bd34:	e03c      	b.n	2bdb0 <f_write+0x330>
   2bd36:	68fb      	ldr	r3, [r7, #12]
   2bd38:	681a      	ldr	r2, [r3, #0]
   2bd3a:	68fb      	ldr	r3, [r7, #12]
   2bd3c:	689b      	ldr	r3, [r3, #8]
   2bd3e:	05db      	lsls	r3, r3, #23
   2bd40:	0ddb      	lsrs	r3, r3, #23
   2bd42:	3330      	adds	r3, #48	; 0x30
   2bd44:	18d3      	adds	r3, r2, r3
   2bd46:	6a3a      	ldr	r2, [r7, #32]
   2bd48:	69b9      	ldr	r1, [r7, #24]
   2bd4a:	0018      	movs	r0, r3
   2bd4c:	4b1f      	ldr	r3, [pc, #124]	; (2bdcc <f_write+0x34c>)
   2bd4e:	4798      	blx	r3
   2bd50:	68fb      	ldr	r3, [r7, #12]
   2bd52:	681b      	ldr	r3, [r3, #0]
   2bd54:	2201      	movs	r2, #1
   2bd56:	711a      	strb	r2, [r3, #4]
   2bd58:	69ba      	ldr	r2, [r7, #24]
   2bd5a:	6a3b      	ldr	r3, [r7, #32]
   2bd5c:	18d3      	adds	r3, r2, r3
   2bd5e:	61bb      	str	r3, [r7, #24]
   2bd60:	68fb      	ldr	r3, [r7, #12]
   2bd62:	689a      	ldr	r2, [r3, #8]
   2bd64:	6a3b      	ldr	r3, [r7, #32]
   2bd66:	18d2      	adds	r2, r2, r3
   2bd68:	68fb      	ldr	r3, [r7, #12]
   2bd6a:	609a      	str	r2, [r3, #8]
   2bd6c:	683b      	ldr	r3, [r7, #0]
   2bd6e:	681a      	ldr	r2, [r3, #0]
   2bd70:	6a3b      	ldr	r3, [r7, #32]
   2bd72:	18d2      	adds	r2, r2, r3
   2bd74:	683b      	ldr	r3, [r7, #0]
   2bd76:	601a      	str	r2, [r3, #0]
   2bd78:	687a      	ldr	r2, [r7, #4]
   2bd7a:	6a3b      	ldr	r3, [r7, #32]
   2bd7c:	1ad3      	subs	r3, r2, r3
   2bd7e:	607b      	str	r3, [r7, #4]
   2bd80:	687b      	ldr	r3, [r7, #4]
   2bd82:	2b00      	cmp	r3, #0
   2bd84:	d000      	beq.n	2bd88 <f_write+0x308>
   2bd86:	e6b7      	b.n	2baf8 <f_write+0x78>
   2bd88:	e000      	b.n	2bd8c <f_write+0x30c>
   2bd8a:	46c0      	nop			; (mov r8, r8)
   2bd8c:	68fb      	ldr	r3, [r7, #12]
   2bd8e:	689a      	ldr	r2, [r3, #8]
   2bd90:	68fb      	ldr	r3, [r7, #12]
   2bd92:	68db      	ldr	r3, [r3, #12]
   2bd94:	429a      	cmp	r2, r3
   2bd96:	d903      	bls.n	2bda0 <f_write+0x320>
   2bd98:	68fb      	ldr	r3, [r7, #12]
   2bd9a:	689a      	ldr	r2, [r3, #8]
   2bd9c:	68fb      	ldr	r3, [r7, #12]
   2bd9e:	60da      	str	r2, [r3, #12]
   2bda0:	68fb      	ldr	r3, [r7, #12]
   2bda2:	799b      	ldrb	r3, [r3, #6]
   2bda4:	2220      	movs	r2, #32
   2bda6:	4313      	orrs	r3, r2
   2bda8:	b2da      	uxtb	r2, r3
   2bdaa:	68fb      	ldr	r3, [r7, #12]
   2bdac:	719a      	strb	r2, [r3, #6]
   2bdae:	2300      	movs	r3, #0
   2bdb0:	0018      	movs	r0, r3
   2bdb2:	46bd      	mov	sp, r7
   2bdb4:	b00b      	add	sp, #44	; 0x2c
   2bdb6:	bd90      	pop	{r4, r7, pc}
   2bdb8:	0002b4a5 	.word	0x0002b4a5
   2bdbc:	00029b31 	.word	0x00029b31
   2bdc0:	00029429 	.word	0x00029429
   2bdc4:	00029689 	.word	0x00029689
   2bdc8:	00029115 	.word	0x00029115
   2bdcc:	00029345 	.word	0x00029345

0002bdd0 <f_sync>:
   2bdd0:	b590      	push	{r4, r7, lr}
   2bdd2:	b087      	sub	sp, #28
   2bdd4:	af00      	add	r7, sp, #0
   2bdd6:	6078      	str	r0, [r7, #4]
   2bdd8:	687b      	ldr	r3, [r7, #4]
   2bdda:	681a      	ldr	r2, [r3, #0]
   2bddc:	687b      	ldr	r3, [r7, #4]
   2bdde:	889b      	ldrh	r3, [r3, #4]
   2bde0:	2117      	movs	r1, #23
   2bde2:	187c      	adds	r4, r7, r1
   2bde4:	0019      	movs	r1, r3
   2bde6:	0010      	movs	r0, r2
   2bde8:	4b55      	ldr	r3, [pc, #340]	; (2bf40 <f_sync+0x170>)
   2bdea:	4798      	blx	r3
   2bdec:	0003      	movs	r3, r0
   2bdee:	7023      	strb	r3, [r4, #0]
   2bdf0:	2317      	movs	r3, #23
   2bdf2:	18fb      	adds	r3, r7, r3
   2bdf4:	781b      	ldrb	r3, [r3, #0]
   2bdf6:	2b00      	cmp	r3, #0
   2bdf8:	d000      	beq.n	2bdfc <f_sync+0x2c>
   2bdfa:	e09a      	b.n	2bf32 <f_sync+0x162>
   2bdfc:	687b      	ldr	r3, [r7, #4]
   2bdfe:	799b      	ldrb	r3, [r3, #6]
   2be00:	001a      	movs	r2, r3
   2be02:	2320      	movs	r3, #32
   2be04:	4013      	ands	r3, r2
   2be06:	d100      	bne.n	2be0a <f_sync+0x3a>
   2be08:	e093      	b.n	2bf32 <f_sync+0x162>
   2be0a:	687b      	ldr	r3, [r7, #4]
   2be0c:	681a      	ldr	r2, [r3, #0]
   2be0e:	687b      	ldr	r3, [r7, #4]
   2be10:	69db      	ldr	r3, [r3, #28]
   2be12:	2117      	movs	r1, #23
   2be14:	187c      	adds	r4, r7, r1
   2be16:	0019      	movs	r1, r3
   2be18:	0010      	movs	r0, r2
   2be1a:	4b4a      	ldr	r3, [pc, #296]	; (2bf44 <f_sync+0x174>)
   2be1c:	4798      	blx	r3
   2be1e:	0003      	movs	r3, r0
   2be20:	7023      	strb	r3, [r4, #0]
   2be22:	2317      	movs	r3, #23
   2be24:	18fb      	adds	r3, r7, r3
   2be26:	781b      	ldrb	r3, [r3, #0]
   2be28:	2b00      	cmp	r3, #0
   2be2a:	d000      	beq.n	2be2e <f_sync+0x5e>
   2be2c:	e081      	b.n	2bf32 <f_sync+0x162>
   2be2e:	687b      	ldr	r3, [r7, #4]
   2be30:	6a1b      	ldr	r3, [r3, #32]
   2be32:	613b      	str	r3, [r7, #16]
   2be34:	693b      	ldr	r3, [r7, #16]
   2be36:	330b      	adds	r3, #11
   2be38:	693a      	ldr	r2, [r7, #16]
   2be3a:	320b      	adds	r2, #11
   2be3c:	7812      	ldrb	r2, [r2, #0]
   2be3e:	2120      	movs	r1, #32
   2be40:	430a      	orrs	r2, r1
   2be42:	b2d2      	uxtb	r2, r2
   2be44:	701a      	strb	r2, [r3, #0]
   2be46:	693b      	ldr	r3, [r7, #16]
   2be48:	331c      	adds	r3, #28
   2be4a:	001a      	movs	r2, r3
   2be4c:	687b      	ldr	r3, [r7, #4]
   2be4e:	68db      	ldr	r3, [r3, #12]
   2be50:	b2db      	uxtb	r3, r3
   2be52:	7013      	strb	r3, [r2, #0]
   2be54:	693b      	ldr	r3, [r7, #16]
   2be56:	331d      	adds	r3, #29
   2be58:	001a      	movs	r2, r3
   2be5a:	687b      	ldr	r3, [r7, #4]
   2be5c:	68db      	ldr	r3, [r3, #12]
   2be5e:	b29b      	uxth	r3, r3
   2be60:	0a1b      	lsrs	r3, r3, #8
   2be62:	b29b      	uxth	r3, r3
   2be64:	b2db      	uxtb	r3, r3
   2be66:	7013      	strb	r3, [r2, #0]
   2be68:	693b      	ldr	r3, [r7, #16]
   2be6a:	331e      	adds	r3, #30
   2be6c:	001a      	movs	r2, r3
   2be6e:	687b      	ldr	r3, [r7, #4]
   2be70:	68db      	ldr	r3, [r3, #12]
   2be72:	0c1b      	lsrs	r3, r3, #16
   2be74:	b2db      	uxtb	r3, r3
   2be76:	7013      	strb	r3, [r2, #0]
   2be78:	693b      	ldr	r3, [r7, #16]
   2be7a:	331f      	adds	r3, #31
   2be7c:	001a      	movs	r2, r3
   2be7e:	687b      	ldr	r3, [r7, #4]
   2be80:	68db      	ldr	r3, [r3, #12]
   2be82:	0e1b      	lsrs	r3, r3, #24
   2be84:	b2db      	uxtb	r3, r3
   2be86:	7013      	strb	r3, [r2, #0]
   2be88:	693b      	ldr	r3, [r7, #16]
   2be8a:	331a      	adds	r3, #26
   2be8c:	001a      	movs	r2, r3
   2be8e:	687b      	ldr	r3, [r7, #4]
   2be90:	691b      	ldr	r3, [r3, #16]
   2be92:	b2db      	uxtb	r3, r3
   2be94:	7013      	strb	r3, [r2, #0]
   2be96:	693b      	ldr	r3, [r7, #16]
   2be98:	331b      	adds	r3, #27
   2be9a:	001a      	movs	r2, r3
   2be9c:	687b      	ldr	r3, [r7, #4]
   2be9e:	691b      	ldr	r3, [r3, #16]
   2bea0:	b29b      	uxth	r3, r3
   2bea2:	0a1b      	lsrs	r3, r3, #8
   2bea4:	b29b      	uxth	r3, r3
   2bea6:	b2db      	uxtb	r3, r3
   2bea8:	7013      	strb	r3, [r2, #0]
   2beaa:	693b      	ldr	r3, [r7, #16]
   2beac:	3314      	adds	r3, #20
   2beae:	001a      	movs	r2, r3
   2beb0:	687b      	ldr	r3, [r7, #4]
   2beb2:	691b      	ldr	r3, [r3, #16]
   2beb4:	0c1b      	lsrs	r3, r3, #16
   2beb6:	b2db      	uxtb	r3, r3
   2beb8:	7013      	strb	r3, [r2, #0]
   2beba:	693b      	ldr	r3, [r7, #16]
   2bebc:	3315      	adds	r3, #21
   2bebe:	001a      	movs	r2, r3
   2bec0:	687b      	ldr	r3, [r7, #4]
   2bec2:	691b      	ldr	r3, [r3, #16]
   2bec4:	0c1b      	lsrs	r3, r3, #16
   2bec6:	b29b      	uxth	r3, r3
   2bec8:	0a1b      	lsrs	r3, r3, #8
   2beca:	b29b      	uxth	r3, r3
   2becc:	b2db      	uxtb	r3, r3
   2bece:	7013      	strb	r3, [r2, #0]
   2bed0:	4b1d      	ldr	r3, [pc, #116]	; (2bf48 <f_sync+0x178>)
   2bed2:	4798      	blx	r3
   2bed4:	0003      	movs	r3, r0
   2bed6:	60fb      	str	r3, [r7, #12]
   2bed8:	693b      	ldr	r3, [r7, #16]
   2beda:	3316      	adds	r3, #22
   2bedc:	68fa      	ldr	r2, [r7, #12]
   2bede:	b2d2      	uxtb	r2, r2
   2bee0:	701a      	strb	r2, [r3, #0]
   2bee2:	693b      	ldr	r3, [r7, #16]
   2bee4:	3317      	adds	r3, #23
   2bee6:	68fa      	ldr	r2, [r7, #12]
   2bee8:	b292      	uxth	r2, r2
   2beea:	0a12      	lsrs	r2, r2, #8
   2beec:	b292      	uxth	r2, r2
   2beee:	b2d2      	uxtb	r2, r2
   2bef0:	701a      	strb	r2, [r3, #0]
   2bef2:	693b      	ldr	r3, [r7, #16]
   2bef4:	3318      	adds	r3, #24
   2bef6:	68fa      	ldr	r2, [r7, #12]
   2bef8:	0c12      	lsrs	r2, r2, #16
   2befa:	b2d2      	uxtb	r2, r2
   2befc:	701a      	strb	r2, [r3, #0]
   2befe:	693b      	ldr	r3, [r7, #16]
   2bf00:	3319      	adds	r3, #25
   2bf02:	68fa      	ldr	r2, [r7, #12]
   2bf04:	0e12      	lsrs	r2, r2, #24
   2bf06:	b2d2      	uxtb	r2, r2
   2bf08:	701a      	strb	r2, [r3, #0]
   2bf0a:	687b      	ldr	r3, [r7, #4]
   2bf0c:	799b      	ldrb	r3, [r3, #6]
   2bf0e:	2220      	movs	r2, #32
   2bf10:	4393      	bics	r3, r2
   2bf12:	b2da      	uxtb	r2, r3
   2bf14:	687b      	ldr	r3, [r7, #4]
   2bf16:	719a      	strb	r2, [r3, #6]
   2bf18:	687b      	ldr	r3, [r7, #4]
   2bf1a:	681b      	ldr	r3, [r3, #0]
   2bf1c:	2201      	movs	r2, #1
   2bf1e:	711a      	strb	r2, [r3, #4]
   2bf20:	687b      	ldr	r3, [r7, #4]
   2bf22:	681b      	ldr	r3, [r3, #0]
   2bf24:	2217      	movs	r2, #23
   2bf26:	18bc      	adds	r4, r7, r2
   2bf28:	0018      	movs	r0, r3
   2bf2a:	4b08      	ldr	r3, [pc, #32]	; (2bf4c <f_sync+0x17c>)
   2bf2c:	4798      	blx	r3
   2bf2e:	0003      	movs	r3, r0
   2bf30:	7023      	strb	r3, [r4, #0]
   2bf32:	2317      	movs	r3, #23
   2bf34:	18fb      	adds	r3, r7, r3
   2bf36:	781b      	ldrb	r3, [r3, #0]
   2bf38:	0018      	movs	r0, r3
   2bf3a:	46bd      	mov	sp, r7
   2bf3c:	b007      	add	sp, #28
   2bf3e:	bd90      	pop	{r4, r7, pc}
   2bf40:	0002b4a5 	.word	0x0002b4a5
   2bf44:	00029429 	.word	0x00029429
   2bf48:	000292e5 	.word	0x000292e5
   2bf4c:	000294f1 	.word	0x000294f1

0002bf50 <f_close>:
   2bf50:	b590      	push	{r4, r7, lr}
   2bf52:	b085      	sub	sp, #20
   2bf54:	af00      	add	r7, sp, #0
   2bf56:	6078      	str	r0, [r7, #4]
   2bf58:	230f      	movs	r3, #15
   2bf5a:	18fc      	adds	r4, r7, r3
   2bf5c:	687b      	ldr	r3, [r7, #4]
   2bf5e:	0018      	movs	r0, r3
   2bf60:	4b09      	ldr	r3, [pc, #36]	; (2bf88 <f_close+0x38>)
   2bf62:	4798      	blx	r3
   2bf64:	0003      	movs	r3, r0
   2bf66:	7023      	strb	r3, [r4, #0]
   2bf68:	230f      	movs	r3, #15
   2bf6a:	18fb      	adds	r3, r7, r3
   2bf6c:	781b      	ldrb	r3, [r3, #0]
   2bf6e:	2b00      	cmp	r3, #0
   2bf70:	d102      	bne.n	2bf78 <f_close+0x28>
   2bf72:	687b      	ldr	r3, [r7, #4]
   2bf74:	2200      	movs	r2, #0
   2bf76:	601a      	str	r2, [r3, #0]
   2bf78:	230f      	movs	r3, #15
   2bf7a:	18fb      	adds	r3, r7, r3
   2bf7c:	781b      	ldrb	r3, [r3, #0]
   2bf7e:	0018      	movs	r0, r3
   2bf80:	46bd      	mov	sp, r7
   2bf82:	b005      	add	sp, #20
   2bf84:	bd90      	pop	{r4, r7, pc}
   2bf86:	46c0      	nop			; (mov r8, r8)
   2bf88:	0002bdd1 	.word	0x0002bdd1

0002bf8c <ff_convert>:
   2bf8c:	b580      	push	{r7, lr}
   2bf8e:	b084      	sub	sp, #16
   2bf90:	af00      	add	r7, sp, #0
   2bf92:	0002      	movs	r2, r0
   2bf94:	6039      	str	r1, [r7, #0]
   2bf96:	1dbb      	adds	r3, r7, #6
   2bf98:	801a      	strh	r2, [r3, #0]
   2bf9a:	1dbb      	adds	r3, r7, #6
   2bf9c:	881b      	ldrh	r3, [r3, #0]
   2bf9e:	2b7f      	cmp	r3, #127	; 0x7f
   2bfa0:	d805      	bhi.n	2bfae <ff_convert+0x22>
   2bfa2:	230e      	movs	r3, #14
   2bfa4:	18fb      	adds	r3, r7, r3
   2bfa6:	1dba      	adds	r2, r7, #6
   2bfa8:	8812      	ldrh	r2, [r2, #0]
   2bfaa:	801a      	strh	r2, [r3, #0]
   2bfac:	e03a      	b.n	2c024 <ff_convert+0x98>
   2bfae:	683b      	ldr	r3, [r7, #0]
   2bfb0:	2b00      	cmp	r3, #0
   2bfb2:	d010      	beq.n	2bfd6 <ff_convert+0x4a>
   2bfb4:	1dbb      	adds	r3, r7, #6
   2bfb6:	881b      	ldrh	r3, [r3, #0]
   2bfb8:	2bff      	cmp	r3, #255	; 0xff
   2bfba:	d807      	bhi.n	2bfcc <ff_convert+0x40>
   2bfbc:	1dbb      	adds	r3, r7, #6
   2bfbe:	881b      	ldrh	r3, [r3, #0]
   2bfc0:	3b80      	subs	r3, #128	; 0x80
   2bfc2:	001a      	movs	r2, r3
   2bfc4:	4b1b      	ldr	r3, [pc, #108]	; (2c034 <ff_convert+0xa8>)
   2bfc6:	0052      	lsls	r2, r2, #1
   2bfc8:	5ad2      	ldrh	r2, [r2, r3]
   2bfca:	e000      	b.n	2bfce <ff_convert+0x42>
   2bfcc:	2200      	movs	r2, #0
   2bfce:	230e      	movs	r3, #14
   2bfd0:	18fb      	adds	r3, r7, r3
   2bfd2:	801a      	strh	r2, [r3, #0]
   2bfd4:	e026      	b.n	2c024 <ff_convert+0x98>
   2bfd6:	230e      	movs	r3, #14
   2bfd8:	18fb      	adds	r3, r7, r3
   2bfda:	2200      	movs	r2, #0
   2bfdc:	801a      	strh	r2, [r3, #0]
   2bfde:	e010      	b.n	2c002 <ff_convert+0x76>
   2bfe0:	230e      	movs	r3, #14
   2bfe2:	18fb      	adds	r3, r7, r3
   2bfe4:	881a      	ldrh	r2, [r3, #0]
   2bfe6:	4b13      	ldr	r3, [pc, #76]	; (2c034 <ff_convert+0xa8>)
   2bfe8:	0052      	lsls	r2, r2, #1
   2bfea:	5ad3      	ldrh	r3, [r2, r3]
   2bfec:	1dba      	adds	r2, r7, #6
   2bfee:	8812      	ldrh	r2, [r2, #0]
   2bff0:	429a      	cmp	r2, r3
   2bff2:	d00c      	beq.n	2c00e <ff_convert+0x82>
   2bff4:	230e      	movs	r3, #14
   2bff6:	18fb      	adds	r3, r7, r3
   2bff8:	881a      	ldrh	r2, [r3, #0]
   2bffa:	230e      	movs	r3, #14
   2bffc:	18fb      	adds	r3, r7, r3
   2bffe:	3201      	adds	r2, #1
   2c000:	801a      	strh	r2, [r3, #0]
   2c002:	230e      	movs	r3, #14
   2c004:	18fb      	adds	r3, r7, r3
   2c006:	881b      	ldrh	r3, [r3, #0]
   2c008:	2b7f      	cmp	r3, #127	; 0x7f
   2c00a:	d9e9      	bls.n	2bfe0 <ff_convert+0x54>
   2c00c:	e000      	b.n	2c010 <ff_convert+0x84>
   2c00e:	46c0      	nop			; (mov r8, r8)
   2c010:	230e      	movs	r3, #14
   2c012:	18fb      	adds	r3, r7, r3
   2c014:	881b      	ldrh	r3, [r3, #0]
   2c016:	3380      	adds	r3, #128	; 0x80
   2c018:	b29a      	uxth	r2, r3
   2c01a:	230e      	movs	r3, #14
   2c01c:	18fb      	adds	r3, r7, r3
   2c01e:	21ff      	movs	r1, #255	; 0xff
   2c020:	400a      	ands	r2, r1
   2c022:	801a      	strh	r2, [r3, #0]
   2c024:	230e      	movs	r3, #14
   2c026:	18fb      	adds	r3, r7, r3
   2c028:	881b      	ldrh	r3, [r3, #0]
   2c02a:	0018      	movs	r0, r3
   2c02c:	46bd      	mov	sp, r7
   2c02e:	b004      	add	sp, #16
   2c030:	bd80      	pop	{r7, pc}
   2c032:	46c0      	nop			; (mov r8, r8)
   2c034:	00036b5c 	.word	0x00036b5c

0002c038 <ff_wtoupper>:
   2c038:	b580      	push	{r7, lr}
   2c03a:	b084      	sub	sp, #16
   2c03c:	af00      	add	r7, sp, #0
   2c03e:	0002      	movs	r2, r0
   2c040:	1dbb      	adds	r3, r7, #6
   2c042:	801a      	strh	r2, [r3, #0]
   2c044:	2300      	movs	r3, #0
   2c046:	60fb      	str	r3, [r7, #12]
   2c048:	e002      	b.n	2c050 <ff_wtoupper+0x18>
   2c04a:	68fb      	ldr	r3, [r7, #12]
   2c04c:	3301      	adds	r3, #1
   2c04e:	60fb      	str	r3, [r7, #12]
   2c050:	4b0f      	ldr	r3, [pc, #60]	; (2c090 <ff_wtoupper+0x58>)
   2c052:	68fa      	ldr	r2, [r7, #12]
   2c054:	0052      	lsls	r2, r2, #1
   2c056:	5ad3      	ldrh	r3, [r2, r3]
   2c058:	2b00      	cmp	r3, #0
   2c05a:	d007      	beq.n	2c06c <ff_wtoupper+0x34>
   2c05c:	4b0c      	ldr	r3, [pc, #48]	; (2c090 <ff_wtoupper+0x58>)
   2c05e:	68fa      	ldr	r2, [r7, #12]
   2c060:	0052      	lsls	r2, r2, #1
   2c062:	5ad3      	ldrh	r3, [r2, r3]
   2c064:	1dba      	adds	r2, r7, #6
   2c066:	8812      	ldrh	r2, [r2, #0]
   2c068:	429a      	cmp	r2, r3
   2c06a:	d1ee      	bne.n	2c04a <ff_wtoupper+0x12>
   2c06c:	4b08      	ldr	r3, [pc, #32]	; (2c090 <ff_wtoupper+0x58>)
   2c06e:	68fa      	ldr	r2, [r7, #12]
   2c070:	0052      	lsls	r2, r2, #1
   2c072:	5ad3      	ldrh	r3, [r2, r3]
   2c074:	2b00      	cmp	r3, #0
   2c076:	d004      	beq.n	2c082 <ff_wtoupper+0x4a>
   2c078:	4b06      	ldr	r3, [pc, #24]	; (2c094 <ff_wtoupper+0x5c>)
   2c07a:	68fa      	ldr	r2, [r7, #12]
   2c07c:	0052      	lsls	r2, r2, #1
   2c07e:	5ad3      	ldrh	r3, [r2, r3]
   2c080:	e001      	b.n	2c086 <ff_wtoupper+0x4e>
   2c082:	1dbb      	adds	r3, r7, #6
   2c084:	881b      	ldrh	r3, [r3, #0]
   2c086:	0018      	movs	r0, r3
   2c088:	46bd      	mov	sp, r7
   2c08a:	b004      	add	sp, #16
   2c08c:	bd80      	pop	{r7, pc}
   2c08e:	46c0      	nop			; (mov r8, r8)
   2c090:	00036c5c 	.word	0x00036c5c
   2c094:	00036e3c 	.word	0x00036e3c

0002c098 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2c098:	b580      	push	{r7, lr}
   2c09a:	b084      	sub	sp, #16
   2c09c:	af00      	add	r7, sp, #0
   2c09e:	60f8      	str	r0, [r7, #12]
   2c0a0:	60b9      	str	r1, [r7, #8]
   2c0a2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2c0a4:	68fb      	ldr	r3, [r7, #12]
   2c0a6:	68ba      	ldr	r2, [r7, #8]
   2c0a8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2c0aa:	68fb      	ldr	r3, [r7, #12]
   2c0ac:	687a      	ldr	r2, [r7, #4]
   2c0ae:	601a      	str	r2, [r3, #0]
}
   2c0b0:	46c0      	nop			; (mov r8, r8)
   2c0b2:	46bd      	mov	sp, r7
   2c0b4:	b004      	add	sp, #16
   2c0b6:	bd80      	pop	{r7, pc}

0002c0b8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2c0b8:	b580      	push	{r7, lr}
   2c0ba:	b082      	sub	sp, #8
   2c0bc:	af00      	add	r7, sp, #0
   2c0be:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2c0c0:	687b      	ldr	r3, [r7, #4]
   2c0c2:	681b      	ldr	r3, [r3, #0]
   2c0c4:	4a07      	ldr	r2, [pc, #28]	; (2c0e4 <getNextPacketId+0x2c>)
   2c0c6:	4293      	cmp	r3, r2
   2c0c8:	d003      	beq.n	2c0d2 <getNextPacketId+0x1a>
   2c0ca:	687b      	ldr	r3, [r7, #4]
   2c0cc:	681b      	ldr	r3, [r3, #0]
   2c0ce:	1c5a      	adds	r2, r3, #1
   2c0d0:	e000      	b.n	2c0d4 <getNextPacketId+0x1c>
   2c0d2:	2201      	movs	r2, #1
   2c0d4:	687b      	ldr	r3, [r7, #4]
   2c0d6:	601a      	str	r2, [r3, #0]
   2c0d8:	687b      	ldr	r3, [r7, #4]
   2c0da:	681b      	ldr	r3, [r3, #0]
}
   2c0dc:	0018      	movs	r0, r3
   2c0de:	46bd      	mov	sp, r7
   2c0e0:	b002      	add	sp, #8
   2c0e2:	bd80      	pop	{r7, pc}
   2c0e4:	0000ffff 	.word	0x0000ffff

0002c0e8 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c0ea:	b087      	sub	sp, #28
   2c0ec:	af00      	add	r7, sp, #0
   2c0ee:	60f8      	str	r0, [r7, #12]
   2c0f0:	60b9      	str	r1, [r7, #8]
   2c0f2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2c0f4:	2301      	movs	r3, #1
   2c0f6:	425b      	negs	r3, r3
   2c0f8:	617b      	str	r3, [r7, #20]
        sent = 0;
   2c0fa:	2300      	movs	r3, #0
   2c0fc:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2c0fe:	e01a      	b.n	2c136 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2c100:	68fb      	ldr	r3, [r7, #12]
   2c102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c104:	68dc      	ldr	r4, [r3, #12]
   2c106:	68fb      	ldr	r3, [r7, #12]
   2c108:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c10a:	68fb      	ldr	r3, [r7, #12]
   2c10c:	691a      	ldr	r2, [r3, #16]
   2c10e:	693b      	ldr	r3, [r7, #16]
   2c110:	18d6      	adds	r6, r2, r3
   2c112:	687b      	ldr	r3, [r7, #4]
   2c114:	0018      	movs	r0, r3
   2c116:	4b1a      	ldr	r3, [pc, #104]	; (2c180 <sendPacket+0x98>)
   2c118:	4798      	blx	r3
   2c11a:	0003      	movs	r3, r0
   2c11c:	68ba      	ldr	r2, [r7, #8]
   2c11e:	0031      	movs	r1, r6
   2c120:	0028      	movs	r0, r5
   2c122:	47a0      	blx	r4
   2c124:	0003      	movs	r3, r0
   2c126:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2c128:	697b      	ldr	r3, [r7, #20]
   2c12a:	2b00      	cmp	r3, #0
   2c12c:	db0e      	blt.n	2c14c <sendPacket+0x64>
            break;
        sent += rc;
   2c12e:	693a      	ldr	r2, [r7, #16]
   2c130:	697b      	ldr	r3, [r7, #20]
   2c132:	18d3      	adds	r3, r2, r3
   2c134:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2c136:	693a      	ldr	r2, [r7, #16]
   2c138:	68bb      	ldr	r3, [r7, #8]
   2c13a:	429a      	cmp	r2, r3
   2c13c:	da07      	bge.n	2c14e <sendPacket+0x66>
   2c13e:	687b      	ldr	r3, [r7, #4]
   2c140:	0018      	movs	r0, r3
   2c142:	4b10      	ldr	r3, [pc, #64]	; (2c184 <sendPacket+0x9c>)
   2c144:	4798      	blx	r3
   2c146:	1e03      	subs	r3, r0, #0
   2c148:	d0da      	beq.n	2c100 <sendPacket+0x18>
   2c14a:	e000      	b.n	2c14e <sendPacket+0x66>
            break;
   2c14c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2c14e:	693a      	ldr	r2, [r7, #16]
   2c150:	68bb      	ldr	r3, [r7, #8]
   2c152:	429a      	cmp	r2, r3
   2c154:	d10b      	bne.n	2c16e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2c156:	68fb      	ldr	r3, [r7, #12]
   2c158:	3354      	adds	r3, #84	; 0x54
   2c15a:	001a      	movs	r2, r3
   2c15c:	68fb      	ldr	r3, [r7, #12]
   2c15e:	699b      	ldr	r3, [r3, #24]
   2c160:	0019      	movs	r1, r3
   2c162:	0010      	movs	r0, r2
   2c164:	4b08      	ldr	r3, [pc, #32]	; (2c188 <sendPacket+0xa0>)
   2c166:	4798      	blx	r3
        rc = SUCCESS;
   2c168:	2300      	movs	r3, #0
   2c16a:	617b      	str	r3, [r7, #20]
   2c16c:	e002      	b.n	2c174 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2c16e:	2301      	movs	r3, #1
   2c170:	425b      	negs	r3, r3
   2c172:	617b      	str	r3, [r7, #20]
    return rc;
   2c174:	697b      	ldr	r3, [r7, #20]
}
   2c176:	0018      	movs	r0, r3
   2c178:	46bd      	mov	sp, r7
   2c17a:	b007      	add	sp, #28
   2c17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c17e:	46c0      	nop			; (mov r8, r8)
   2c180:	0002cf49 	.word	0x0002cf49
   2c184:	0002cecd 	.word	0x0002cecd
   2c188:	0002cf21 	.word	0x0002cf21

0002c18c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2c18c:	b580      	push	{r7, lr}
   2c18e:	b086      	sub	sp, #24
   2c190:	af00      	add	r7, sp, #0
   2c192:	60f8      	str	r0, [r7, #12]
   2c194:	60b9      	str	r1, [r7, #8]
   2c196:	607a      	str	r2, [r7, #4]
   2c198:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2c19a:	68fb      	ldr	r3, [r7, #12]
   2c19c:	68ba      	ldr	r2, [r7, #8]
   2c19e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c1a0:	2300      	movs	r3, #0
   2c1a2:	617b      	str	r3, [r7, #20]
   2c1a4:	e00a      	b.n	2c1bc <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2c1a6:	68fa      	ldr	r2, [r7, #12]
   2c1a8:	697b      	ldr	r3, [r7, #20]
   2c1aa:	3304      	adds	r3, #4
   2c1ac:	00db      	lsls	r3, r3, #3
   2c1ae:	18d3      	adds	r3, r2, r3
   2c1b0:	3304      	adds	r3, #4
   2c1b2:	2200      	movs	r2, #0
   2c1b4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c1b6:	697b      	ldr	r3, [r7, #20]
   2c1b8:	3301      	adds	r3, #1
   2c1ba:	617b      	str	r3, [r7, #20]
   2c1bc:	697b      	ldr	r3, [r7, #20]
   2c1be:	2b04      	cmp	r3, #4
   2c1c0:	ddf1      	ble.n	2c1a6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2c1c2:	68fb      	ldr	r3, [r7, #12]
   2c1c4:	687a      	ldr	r2, [r7, #4]
   2c1c6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2c1c8:	68fb      	ldr	r3, [r7, #12]
   2c1ca:	683a      	ldr	r2, [r7, #0]
   2c1cc:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2c1ce:	68fb      	ldr	r3, [r7, #12]
   2c1d0:	6a3a      	ldr	r2, [r7, #32]
   2c1d2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2c1d4:	68fb      	ldr	r3, [r7, #12]
   2c1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c1d8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2c1da:	68fb      	ldr	r3, [r7, #12]
   2c1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c1de:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2c1e0:	68fb      	ldr	r3, [r7, #12]
   2c1e2:	2200      	movs	r2, #0
   2c1e4:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2c1e6:	68fb      	ldr	r3, [r7, #12]
   2c1e8:	2200      	movs	r2, #0
   2c1ea:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2c1ec:	68fb      	ldr	r3, [r7, #12]
   2c1ee:	2200      	movs	r2, #0
   2c1f0:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2c1f2:	68fb      	ldr	r3, [r7, #12]
   2c1f4:	2201      	movs	r2, #1
   2c1f6:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2c1f8:	68fb      	ldr	r3, [r7, #12]
   2c1fa:	3354      	adds	r3, #84	; 0x54
   2c1fc:	0018      	movs	r0, r3
   2c1fe:	4b03      	ldr	r3, [pc, #12]	; (2c20c <MQTTClientInit+0x80>)
   2c200:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2c202:	46c0      	nop			; (mov r8, r8)
   2c204:	46bd      	mov	sp, r7
   2c206:	b006      	add	sp, #24
   2c208:	bd80      	pop	{r7, pc}
   2c20a:	46c0      	nop			; (mov r8, r8)
   2c20c:	0002cf71 	.word	0x0002cf71

0002c210 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2c210:	b590      	push	{r4, r7, lr}
   2c212:	b08b      	sub	sp, #44	; 0x2c
   2c214:	af00      	add	r7, sp, #0
   2c216:	60f8      	str	r0, [r7, #12]
   2c218:	60b9      	str	r1, [r7, #8]
   2c21a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2c21c:	2301      	movs	r3, #1
   2c21e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2c220:	2300      	movs	r3, #0
   2c222:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2c224:	2304      	movs	r3, #4
   2c226:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2c228:	68bb      	ldr	r3, [r7, #8]
   2c22a:	2200      	movs	r2, #0
   2c22c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2c22e:	2301      	movs	r3, #1
   2c230:	425b      	negs	r3, r3
   2c232:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2c234:	6a3b      	ldr	r3, [r7, #32]
   2c236:	3301      	adds	r3, #1
   2c238:	623b      	str	r3, [r7, #32]
   2c23a:	6a3a      	ldr	r2, [r7, #32]
   2c23c:	69fb      	ldr	r3, [r7, #28]
   2c23e:	429a      	cmp	r2, r3
   2c240:	dd03      	ble.n	2c24a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2c242:	2301      	movs	r3, #1
   2c244:	425b      	negs	r3, r3
   2c246:	61bb      	str	r3, [r7, #24]
            goto exit;
   2c248:	e026      	b.n	2c298 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2c24a:	68fb      	ldr	r3, [r7, #12]
   2c24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c24e:	689c      	ldr	r4, [r3, #8]
   2c250:	68fb      	ldr	r3, [r7, #12]
   2c252:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2c254:	687b      	ldr	r3, [r7, #4]
   2c256:	2217      	movs	r2, #23
   2c258:	18b9      	adds	r1, r7, r2
   2c25a:	2201      	movs	r2, #1
   2c25c:	47a0      	blx	r4
   2c25e:	0003      	movs	r3, r0
   2c260:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2c262:	69bb      	ldr	r3, [r7, #24]
   2c264:	2b01      	cmp	r3, #1
   2c266:	d116      	bne.n	2c296 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2c268:	68bb      	ldr	r3, [r7, #8]
   2c26a:	681a      	ldr	r2, [r3, #0]
   2c26c:	2317      	movs	r3, #23
   2c26e:	18fb      	adds	r3, r7, r3
   2c270:	781b      	ldrb	r3, [r3, #0]
   2c272:	0019      	movs	r1, r3
   2c274:	237f      	movs	r3, #127	; 0x7f
   2c276:	400b      	ands	r3, r1
   2c278:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c27a:	434b      	muls	r3, r1
   2c27c:	18d2      	adds	r2, r2, r3
   2c27e:	68bb      	ldr	r3, [r7, #8]
   2c280:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c284:	01db      	lsls	r3, r3, #7
   2c286:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2c288:	2317      	movs	r3, #23
   2c28a:	18fb      	adds	r3, r7, r3
   2c28c:	781b      	ldrb	r3, [r3, #0]
   2c28e:	b25b      	sxtb	r3, r3
   2c290:	2b00      	cmp	r3, #0
   2c292:	dbcc      	blt.n	2c22e <decodePacket+0x1e>
   2c294:	e000      	b.n	2c298 <decodePacket+0x88>
            goto exit;
   2c296:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2c298:	6a3b      	ldr	r3, [r7, #32]
}
   2c29a:	0018      	movs	r0, r3
   2c29c:	46bd      	mov	sp, r7
   2c29e:	b00b      	add	sp, #44	; 0x2c
   2c2a0:	bd90      	pop	{r4, r7, pc}
	...

0002c2a4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2c2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2a6:	46c6      	mov	lr, r8
   2c2a8:	b500      	push	{lr}
   2c2aa:	b086      	sub	sp, #24
   2c2ac:	af00      	add	r7, sp, #0
   2c2ae:	6078      	str	r0, [r7, #4]
   2c2b0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2c2b2:	2301      	movs	r3, #1
   2c2b4:	425b      	negs	r3, r3
   2c2b6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2c2b8:	2300      	movs	r3, #0
   2c2ba:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2c2bc:	2300      	movs	r3, #0
   2c2be:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2c2c0:	2300      	movs	r3, #0
   2c2c2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2c2c4:	687b      	ldr	r3, [r7, #4]
   2c2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c2c8:	689c      	ldr	r4, [r3, #8]
   2c2ca:	687b      	ldr	r3, [r7, #4]
   2c2cc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c2ce:	687b      	ldr	r3, [r7, #4]
   2c2d0:	695e      	ldr	r6, [r3, #20]
   2c2d2:	683b      	ldr	r3, [r7, #0]
   2c2d4:	0018      	movs	r0, r3
   2c2d6:	4b2b      	ldr	r3, [pc, #172]	; (2c384 <readPacket+0xe0>)
   2c2d8:	4798      	blx	r3
   2c2da:	0003      	movs	r3, r0
   2c2dc:	2201      	movs	r2, #1
   2c2de:	0031      	movs	r1, r6
   2c2e0:	0028      	movs	r0, r5
   2c2e2:	47a0      	blx	r4
   2c2e4:	0003      	movs	r3, r0
   2c2e6:	2b01      	cmp	r3, #1
   2c2e8:	d141      	bne.n	2c36e <readPacket+0xca>
        goto exit;

    len = 1;
   2c2ea:	2301      	movs	r3, #1
   2c2ec:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2c2ee:	683b      	ldr	r3, [r7, #0]
   2c2f0:	0018      	movs	r0, r3
   2c2f2:	4b24      	ldr	r3, [pc, #144]	; (2c384 <readPacket+0xe0>)
   2c2f4:	4798      	blx	r3
   2c2f6:	0002      	movs	r2, r0
   2c2f8:	2308      	movs	r3, #8
   2c2fa:	18f9      	adds	r1, r7, r3
   2c2fc:	687b      	ldr	r3, [r7, #4]
   2c2fe:	0018      	movs	r0, r3
   2c300:	4b21      	ldr	r3, [pc, #132]	; (2c388 <readPacket+0xe4>)
   2c302:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2c304:	687b      	ldr	r3, [r7, #4]
   2c306:	695b      	ldr	r3, [r3, #20]
   2c308:	3301      	adds	r3, #1
   2c30a:	68ba      	ldr	r2, [r7, #8]
   2c30c:	0011      	movs	r1, r2
   2c30e:	0018      	movs	r0, r3
   2c310:	4b1e      	ldr	r3, [pc, #120]	; (2c38c <readPacket+0xe8>)
   2c312:	4798      	blx	r3
   2c314:	0002      	movs	r2, r0
   2c316:	693b      	ldr	r3, [r7, #16]
   2c318:	189b      	adds	r3, r3, r2
   2c31a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2c31c:	68bb      	ldr	r3, [r7, #8]
   2c31e:	2b00      	cmp	r3, #0
   2c320:	dd17      	ble.n	2c352 <readPacket+0xae>
   2c322:	687b      	ldr	r3, [r7, #4]
   2c324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c326:	689c      	ldr	r4, [r3, #8]
   2c328:	687b      	ldr	r3, [r7, #4]
   2c32a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c32c:	687b      	ldr	r3, [r7, #4]
   2c32e:	695a      	ldr	r2, [r3, #20]
   2c330:	693b      	ldr	r3, [r7, #16]
   2c332:	18d6      	adds	r6, r2, r3
   2c334:	68bb      	ldr	r3, [r7, #8]
   2c336:	4698      	mov	r8, r3
   2c338:	683b      	ldr	r3, [r7, #0]
   2c33a:	0018      	movs	r0, r3
   2c33c:	4b11      	ldr	r3, [pc, #68]	; (2c384 <readPacket+0xe0>)
   2c33e:	4798      	blx	r3
   2c340:	0003      	movs	r3, r0
   2c342:	4642      	mov	r2, r8
   2c344:	0031      	movs	r1, r6
   2c346:	0028      	movs	r0, r5
   2c348:	47a0      	blx	r4
   2c34a:	0002      	movs	r2, r0
   2c34c:	68bb      	ldr	r3, [r7, #8]
   2c34e:	429a      	cmp	r2, r3
   2c350:	d10f      	bne.n	2c372 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2c352:	687b      	ldr	r3, [r7, #4]
   2c354:	695b      	ldr	r3, [r3, #20]
   2c356:	781a      	ldrb	r2, [r3, #0]
   2c358:	230c      	movs	r3, #12
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2c35e:	230c      	movs	r3, #12
   2c360:	18fb      	adds	r3, r7, r3
   2c362:	781b      	ldrb	r3, [r3, #0]
   2c364:	061b      	lsls	r3, r3, #24
   2c366:	0f1b      	lsrs	r3, r3, #28
   2c368:	b2db      	uxtb	r3, r3
   2c36a:	617b      	str	r3, [r7, #20]
   2c36c:	e002      	b.n	2c374 <readPacket+0xd0>
        goto exit;
   2c36e:	46c0      	nop			; (mov r8, r8)
   2c370:	e000      	b.n	2c374 <readPacket+0xd0>
        goto exit;
   2c372:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2c374:	697b      	ldr	r3, [r7, #20]
}
   2c376:	0018      	movs	r0, r3
   2c378:	46bd      	mov	sp, r7
   2c37a:	b006      	add	sp, #24
   2c37c:	bc04      	pop	{r2}
   2c37e:	4690      	mov	r8, r2
   2c380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c382:	46c0      	nop			; (mov r8, r8)
   2c384:	0002cf49 	.word	0x0002cf49
   2c388:	0002c211 	.word	0x0002c211
   2c38c:	0002dd21 	.word	0x0002dd21

0002c390 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2c390:	b580      	push	{r7, lr}
   2c392:	b086      	sub	sp, #24
   2c394:	af00      	add	r7, sp, #0
   2c396:	6078      	str	r0, [r7, #4]
   2c398:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2c39a:	687b      	ldr	r3, [r7, #4]
   2c39c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2c39e:	683b      	ldr	r3, [r7, #0]
   2c3a0:	689b      	ldr	r3, [r3, #8]
   2c3a2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2c3a4:	683b      	ldr	r3, [r7, #0]
   2c3a6:	685b      	ldr	r3, [r3, #4]
   2c3a8:	001a      	movs	r2, r3
   2c3aa:	693b      	ldr	r3, [r7, #16]
   2c3ac:	189b      	adds	r3, r3, r2
   2c3ae:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2c3b0:	e039      	b.n	2c426 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2c3b2:	693b      	ldr	r3, [r7, #16]
   2c3b4:	781b      	ldrb	r3, [r3, #0]
   2c3b6:	2b2f      	cmp	r3, #47	; 0x2f
   2c3b8:	d103      	bne.n	2c3c2 <isTopicMatched+0x32>
   2c3ba:	697b      	ldr	r3, [r7, #20]
   2c3bc:	781b      	ldrb	r3, [r3, #0]
   2c3be:	2b2f      	cmp	r3, #47	; 0x2f
   2c3c0:	d13a      	bne.n	2c438 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2c3c2:	697b      	ldr	r3, [r7, #20]
   2c3c4:	781b      	ldrb	r3, [r3, #0]
   2c3c6:	2b2b      	cmp	r3, #43	; 0x2b
   2c3c8:	d009      	beq.n	2c3de <isTopicMatched+0x4e>
   2c3ca:	697b      	ldr	r3, [r7, #20]
   2c3cc:	781b      	ldrb	r3, [r3, #0]
   2c3ce:	2b23      	cmp	r3, #35	; 0x23
   2c3d0:	d005      	beq.n	2c3de <isTopicMatched+0x4e>
   2c3d2:	697b      	ldr	r3, [r7, #20]
   2c3d4:	781a      	ldrb	r2, [r3, #0]
   2c3d6:	693b      	ldr	r3, [r7, #16]
   2c3d8:	781b      	ldrb	r3, [r3, #0]
   2c3da:	429a      	cmp	r2, r3
   2c3dc:	d12e      	bne.n	2c43c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2c3de:	697b      	ldr	r3, [r7, #20]
   2c3e0:	781b      	ldrb	r3, [r3, #0]
   2c3e2:	2b2b      	cmp	r3, #43	; 0x2b
   2c3e4:	d112      	bne.n	2c40c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2c3e6:	693b      	ldr	r3, [r7, #16]
   2c3e8:	3301      	adds	r3, #1
   2c3ea:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2c3ec:	e005      	b.n	2c3fa <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2c3ee:	693b      	ldr	r3, [r7, #16]
   2c3f0:	3301      	adds	r3, #1
   2c3f2:	613b      	str	r3, [r7, #16]
   2c3f4:	693b      	ldr	r3, [r7, #16]
   2c3f6:	3301      	adds	r3, #1
   2c3f8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2c3fa:	68fa      	ldr	r2, [r7, #12]
   2c3fc:	68bb      	ldr	r3, [r7, #8]
   2c3fe:	429a      	cmp	r2, r3
   2c400:	d20b      	bcs.n	2c41a <isTopicMatched+0x8a>
   2c402:	68fb      	ldr	r3, [r7, #12]
   2c404:	781b      	ldrb	r3, [r3, #0]
   2c406:	2b2f      	cmp	r3, #47	; 0x2f
   2c408:	d1f1      	bne.n	2c3ee <isTopicMatched+0x5e>
   2c40a:	e006      	b.n	2c41a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2c40c:	697b      	ldr	r3, [r7, #20]
   2c40e:	781b      	ldrb	r3, [r3, #0]
   2c410:	2b23      	cmp	r3, #35	; 0x23
   2c412:	d102      	bne.n	2c41a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2c414:	68bb      	ldr	r3, [r7, #8]
   2c416:	3b01      	subs	r3, #1
   2c418:	613b      	str	r3, [r7, #16]
        curf++;
   2c41a:	697b      	ldr	r3, [r7, #20]
   2c41c:	3301      	adds	r3, #1
   2c41e:	617b      	str	r3, [r7, #20]
        curn++;
   2c420:	693b      	ldr	r3, [r7, #16]
   2c422:	3301      	adds	r3, #1
   2c424:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2c426:	697b      	ldr	r3, [r7, #20]
   2c428:	781b      	ldrb	r3, [r3, #0]
   2c42a:	2b00      	cmp	r3, #0
   2c42c:	d007      	beq.n	2c43e <isTopicMatched+0xae>
   2c42e:	693a      	ldr	r2, [r7, #16]
   2c430:	68bb      	ldr	r3, [r7, #8]
   2c432:	429a      	cmp	r2, r3
   2c434:	d3bd      	bcc.n	2c3b2 <isTopicMatched+0x22>
   2c436:	e002      	b.n	2c43e <isTopicMatched+0xae>
            break;
   2c438:	46c0      	nop			; (mov r8, r8)
   2c43a:	e000      	b.n	2c43e <isTopicMatched+0xae>
            break;
   2c43c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2c43e:	693a      	ldr	r2, [r7, #16]
   2c440:	68bb      	ldr	r3, [r7, #8]
   2c442:	429a      	cmp	r2, r3
   2c444:	d105      	bne.n	2c452 <isTopicMatched+0xc2>
   2c446:	697b      	ldr	r3, [r7, #20]
   2c448:	781b      	ldrb	r3, [r3, #0]
   2c44a:	2b00      	cmp	r3, #0
   2c44c:	d101      	bne.n	2c452 <isTopicMatched+0xc2>
   2c44e:	2301      	movs	r3, #1
   2c450:	e000      	b.n	2c454 <isTopicMatched+0xc4>
   2c452:	2300      	movs	r3, #0
   2c454:	b2db      	uxtb	r3, r3
}
   2c456:	0018      	movs	r0, r3
   2c458:	46bd      	mov	sp, r7
   2c45a:	b006      	add	sp, #24
   2c45c:	bd80      	pop	{r7, pc}
	...

0002c460 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2c460:	b580      	push	{r7, lr}
   2c462:	b08a      	sub	sp, #40	; 0x28
   2c464:	af00      	add	r7, sp, #0
   2c466:	60f8      	str	r0, [r7, #12]
   2c468:	60b9      	str	r1, [r7, #8]
   2c46a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2c46c:	2301      	movs	r3, #1
   2c46e:	425b      	negs	r3, r3
   2c470:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c472:	2300      	movs	r3, #0
   2c474:	627b      	str	r3, [r7, #36]	; 0x24
   2c476:	e044      	b.n	2c502 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2c478:	68fa      	ldr	r2, [r7, #12]
   2c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c47c:	3304      	adds	r3, #4
   2c47e:	00db      	lsls	r3, r3, #3
   2c480:	18d3      	adds	r3, r2, r3
   2c482:	3304      	adds	r3, #4
   2c484:	681b      	ldr	r3, [r3, #0]
   2c486:	2b00      	cmp	r3, #0
   2c488:	d038      	beq.n	2c4fc <deliverMessage+0x9c>
   2c48a:	68fa      	ldr	r2, [r7, #12]
   2c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c48e:	3304      	adds	r3, #4
   2c490:	00db      	lsls	r3, r3, #3
   2c492:	18d3      	adds	r3, r2, r3
   2c494:	3304      	adds	r3, #4
   2c496:	681a      	ldr	r2, [r3, #0]
   2c498:	68bb      	ldr	r3, [r7, #8]
   2c49a:	0011      	movs	r1, r2
   2c49c:	0018      	movs	r0, r3
   2c49e:	4b28      	ldr	r3, [pc, #160]	; (2c540 <deliverMessage+0xe0>)
   2c4a0:	4798      	blx	r3
   2c4a2:	1e03      	subs	r3, r0, #0
   2c4a4:	d10d      	bne.n	2c4c2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2c4a6:	68fa      	ldr	r2, [r7, #12]
   2c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4aa:	3304      	adds	r3, #4
   2c4ac:	00db      	lsls	r3, r3, #3
   2c4ae:	18d3      	adds	r3, r2, r3
   2c4b0:	3304      	adds	r3, #4
   2c4b2:	681b      	ldr	r3, [r3, #0]
   2c4b4:	68ba      	ldr	r2, [r7, #8]
   2c4b6:	0011      	movs	r1, r2
   2c4b8:	0018      	movs	r0, r3
   2c4ba:	4b22      	ldr	r3, [pc, #136]	; (2c544 <deliverMessage+0xe4>)
   2c4bc:	4798      	blx	r3
   2c4be:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2c4c0:	d01c      	beq.n	2c4fc <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2c4c2:	68fa      	ldr	r2, [r7, #12]
   2c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4c6:	3304      	adds	r3, #4
   2c4c8:	00db      	lsls	r3, r3, #3
   2c4ca:	18d3      	adds	r3, r2, r3
   2c4cc:	3308      	adds	r3, #8
   2c4ce:	681b      	ldr	r3, [r3, #0]
   2c4d0:	2b00      	cmp	r3, #0
   2c4d2:	d013      	beq.n	2c4fc <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2c4d4:	687a      	ldr	r2, [r7, #4]
   2c4d6:	68b9      	ldr	r1, [r7, #8]
   2c4d8:	2318      	movs	r3, #24
   2c4da:	18fb      	adds	r3, r7, r3
   2c4dc:	0018      	movs	r0, r3
   2c4de:	4b1a      	ldr	r3, [pc, #104]	; (2c548 <deliverMessage+0xe8>)
   2c4e0:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2c4e2:	68fa      	ldr	r2, [r7, #12]
   2c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4e6:	3304      	adds	r3, #4
   2c4e8:	00db      	lsls	r3, r3, #3
   2c4ea:	18d3      	adds	r3, r2, r3
   2c4ec:	3308      	adds	r3, #8
   2c4ee:	681b      	ldr	r3, [r3, #0]
   2c4f0:	2218      	movs	r2, #24
   2c4f2:	18ba      	adds	r2, r7, r2
   2c4f4:	0010      	movs	r0, r2
   2c4f6:	4798      	blx	r3
                rc = SUCCESS;
   2c4f8:	2300      	movs	r3, #0
   2c4fa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4fe:	3301      	adds	r3, #1
   2c500:	627b      	str	r3, [r7, #36]	; 0x24
   2c502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c504:	2b04      	cmp	r3, #4
   2c506:	ddb7      	ble.n	2c478 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2c508:	6a3b      	ldr	r3, [r7, #32]
   2c50a:	3301      	adds	r3, #1
   2c50c:	d112      	bne.n	2c534 <deliverMessage+0xd4>
   2c50e:	68fb      	ldr	r3, [r7, #12]
   2c510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c512:	2b00      	cmp	r3, #0
   2c514:	d00e      	beq.n	2c534 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2c516:	687a      	ldr	r2, [r7, #4]
   2c518:	68b9      	ldr	r1, [r7, #8]
   2c51a:	2310      	movs	r3, #16
   2c51c:	18fb      	adds	r3, r7, r3
   2c51e:	0018      	movs	r0, r3
   2c520:	4b09      	ldr	r3, [pc, #36]	; (2c548 <deliverMessage+0xe8>)
   2c522:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2c524:	68fb      	ldr	r3, [r7, #12]
   2c526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c528:	2210      	movs	r2, #16
   2c52a:	18ba      	adds	r2, r7, r2
   2c52c:	0010      	movs	r0, r2
   2c52e:	4798      	blx	r3
        rc = SUCCESS;
   2c530:	2300      	movs	r3, #0
   2c532:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2c534:	6a3b      	ldr	r3, [r7, #32]
}
   2c536:	0018      	movs	r0, r3
   2c538:	46bd      	mov	sp, r7
   2c53a:	b00a      	add	sp, #40	; 0x28
   2c53c:	bd80      	pop	{r7, pc}
   2c53e:	46c0      	nop			; (mov r8, r8)
   2c540:	0002e135 	.word	0x0002e135
   2c544:	0002c391 	.word	0x0002c391
   2c548:	0002c099 	.word	0x0002c099

0002c54c <keepalive>:


int keepalive(MQTTClient* c)
{
   2c54c:	b580      	push	{r7, lr}
   2c54e:	b088      	sub	sp, #32
   2c550:	af00      	add	r7, sp, #0
   2c552:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2c554:	2301      	movs	r3, #1
   2c556:	425b      	negs	r3, r3
   2c558:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2c55a:	687b      	ldr	r3, [r7, #4]
   2c55c:	699b      	ldr	r3, [r3, #24]
   2c55e:	2b00      	cmp	r3, #0
   2c560:	d102      	bne.n	2c568 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2c562:	2300      	movs	r3, #0
   2c564:	61fb      	str	r3, [r7, #28]
        goto exit;
   2c566:	e033      	b.n	2c5d0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2c568:	687b      	ldr	r3, [r7, #4]
   2c56a:	3354      	adds	r3, #84	; 0x54
   2c56c:	0018      	movs	r0, r3
   2c56e:	4b1b      	ldr	r3, [pc, #108]	; (2c5dc <keepalive+0x90>)
   2c570:	4798      	blx	r3
   2c572:	1e03      	subs	r3, r0, #0
   2c574:	d02c      	beq.n	2c5d0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2c576:	687b      	ldr	r3, [r7, #4]
   2c578:	7f1b      	ldrb	r3, [r3, #28]
   2c57a:	2b00      	cmp	r3, #0
   2c57c:	d128      	bne.n	2c5d0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2c57e:	230c      	movs	r3, #12
   2c580:	18fb      	adds	r3, r7, r3
   2c582:	0018      	movs	r0, r3
   2c584:	4b16      	ldr	r3, [pc, #88]	; (2c5e0 <keepalive+0x94>)
   2c586:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2c588:	23fa      	movs	r3, #250	; 0xfa
   2c58a:	009a      	lsls	r2, r3, #2
   2c58c:	230c      	movs	r3, #12
   2c58e:	18fb      	adds	r3, r7, r3
   2c590:	0011      	movs	r1, r2
   2c592:	0018      	movs	r0, r3
   2c594:	4b13      	ldr	r3, [pc, #76]	; (2c5e4 <keepalive+0x98>)
   2c596:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2c598:	687b      	ldr	r3, [r7, #4]
   2c59a:	691a      	ldr	r2, [r3, #16]
   2c59c:	687b      	ldr	r3, [r7, #4]
   2c59e:	689b      	ldr	r3, [r3, #8]
   2c5a0:	0019      	movs	r1, r3
   2c5a2:	0010      	movs	r0, r2
   2c5a4:	4b10      	ldr	r3, [pc, #64]	; (2c5e8 <keepalive+0x9c>)
   2c5a6:	4798      	blx	r3
   2c5a8:	0003      	movs	r3, r0
   2c5aa:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2c5ac:	69bb      	ldr	r3, [r7, #24]
   2c5ae:	2b00      	cmp	r3, #0
   2c5b0:	dd0e      	ble.n	2c5d0 <keepalive+0x84>
   2c5b2:	230c      	movs	r3, #12
   2c5b4:	18fa      	adds	r2, r7, r3
   2c5b6:	69b9      	ldr	r1, [r7, #24]
   2c5b8:	687b      	ldr	r3, [r7, #4]
   2c5ba:	0018      	movs	r0, r3
   2c5bc:	4b0b      	ldr	r3, [pc, #44]	; (2c5ec <keepalive+0xa0>)
   2c5be:	4798      	blx	r3
   2c5c0:	0003      	movs	r3, r0
   2c5c2:	61fb      	str	r3, [r7, #28]
   2c5c4:	69fb      	ldr	r3, [r7, #28]
   2c5c6:	2b00      	cmp	r3, #0
   2c5c8:	d102      	bne.n	2c5d0 <keepalive+0x84>
                c->ping_outstanding = 1;
   2c5ca:	687b      	ldr	r3, [r7, #4]
   2c5cc:	2201      	movs	r2, #1
   2c5ce:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2c5d0:	69fb      	ldr	r3, [r7, #28]
}
   2c5d2:	0018      	movs	r0, r3
   2c5d4:	46bd      	mov	sp, r7
   2c5d6:	b008      	add	sp, #32
   2c5d8:	bd80      	pop	{r7, pc}
   2c5da:	46c0      	nop			; (mov r8, r8)
   2c5dc:	0002cecd 	.word	0x0002cecd
   2c5e0:	0002cf71 	.word	0x0002cf71
   2c5e4:	0002cef9 	.word	0x0002cef9
   2c5e8:	0002db45 	.word	0x0002db45
   2c5ec:	0002c0e9 	.word	0x0002c0e9

0002c5f0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5f2:	b095      	sub	sp, #84	; 0x54
   2c5f4:	af06      	add	r7, sp, #24
   2c5f6:	6078      	str	r0, [r7, #4]
   2c5f8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2c5fa:	683a      	ldr	r2, [r7, #0]
   2c5fc:	687b      	ldr	r3, [r7, #4]
   2c5fe:	0011      	movs	r1, r2
   2c600:	0018      	movs	r0, r3
   2c602:	4b70      	ldr	r3, [pc, #448]	; (2c7c4 <cycle+0x1d4>)
   2c604:	4798      	blx	r3
   2c606:	0002      	movs	r2, r0
   2c608:	232e      	movs	r3, #46	; 0x2e
   2c60a:	18fb      	adds	r3, r7, r3
   2c60c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2c60e:	2300      	movs	r3, #0
   2c610:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2c612:	2300      	movs	r3, #0
   2c614:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2c616:	232e      	movs	r3, #46	; 0x2e
   2c618:	18fb      	adds	r3, r7, r3
   2c61a:	881b      	ldrh	r3, [r3, #0]
   2c61c:	2b0d      	cmp	r3, #13
   2c61e:	d900      	bls.n	2c622 <cycle+0x32>
   2c620:	e0bd      	b.n	2c79e <cycle+0x1ae>
   2c622:	009a      	lsls	r2, r3, #2
   2c624:	4b68      	ldr	r3, [pc, #416]	; (2c7c8 <cycle+0x1d8>)
   2c626:	18d3      	adds	r3, r2, r3
   2c628:	681b      	ldr	r3, [r3, #0]
   2c62a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2c62c:	687b      	ldr	r3, [r7, #4]
   2c62e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2c630:	687b      	ldr	r3, [r7, #4]
   2c632:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2c634:	001e      	movs	r6, r3
   2c636:	2310      	movs	r3, #16
   2c638:	18fb      	adds	r3, r7, r3
   2c63a:	1d1d      	adds	r5, r3, #4
   2c63c:	2310      	movs	r3, #16
   2c63e:	18fb      	adds	r3, r7, r3
   2c640:	1c5c      	adds	r4, r3, #1
   2c642:	230c      	movs	r3, #12
   2c644:	18f9      	adds	r1, r7, r3
   2c646:	2310      	movs	r3, #16
   2c648:	18fb      	adds	r3, r7, r3
   2c64a:	1c98      	adds	r0, r3, #2
   2c64c:	9604      	str	r6, [sp, #16]
   2c64e:	9203      	str	r2, [sp, #12]
   2c650:	2310      	movs	r3, #16
   2c652:	18fb      	adds	r3, r7, r3
   2c654:	330c      	adds	r3, #12
   2c656:	9302      	str	r3, [sp, #8]
   2c658:	2310      	movs	r3, #16
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	3308      	adds	r3, #8
   2c65e:	9301      	str	r3, [sp, #4]
   2c660:	2320      	movs	r3, #32
   2c662:	18fb      	adds	r3, r7, r3
   2c664:	9300      	str	r3, [sp, #0]
   2c666:	002b      	movs	r3, r5
   2c668:	0022      	movs	r2, r4
   2c66a:	4c58      	ldr	r4, [pc, #352]	; (2c7cc <cycle+0x1dc>)
   2c66c:	47a0      	blx	r4
   2c66e:	0003      	movs	r3, r0
   2c670:	2b01      	cmp	r3, #1
   2c672:	d000      	beq.n	2c676 <cycle+0x86>
   2c674:	e098      	b.n	2c7a8 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2c676:	68fb      	ldr	r3, [r7, #12]
   2c678:	b2da      	uxtb	r2, r3
   2c67a:	2310      	movs	r3, #16
   2c67c:	18fb      	adds	r3, r7, r3
   2c67e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2c680:	2310      	movs	r3, #16
   2c682:	18fa      	adds	r2, r7, r3
   2c684:	2320      	movs	r3, #32
   2c686:	18f9      	adds	r1, r7, r3
   2c688:	687b      	ldr	r3, [r7, #4]
   2c68a:	0018      	movs	r0, r3
   2c68c:	4b50      	ldr	r3, [pc, #320]	; (2c7d0 <cycle+0x1e0>)
   2c68e:	4798      	blx	r3
            if (msg.qos != QOS0)
   2c690:	2310      	movs	r3, #16
   2c692:	18fb      	adds	r3, r7, r3
   2c694:	781b      	ldrb	r3, [r3, #0]
   2c696:	2b00      	cmp	r3, #0
   2c698:	d100      	bne.n	2c69c <cycle+0xac>
   2c69a:	e07d      	b.n	2c798 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2c69c:	2310      	movs	r3, #16
   2c69e:	18fb      	adds	r3, r7, r3
   2c6a0:	781b      	ldrb	r3, [r3, #0]
   2c6a2:	2b01      	cmp	r3, #1
   2c6a4:	d10f      	bne.n	2c6c6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2c6a6:	687b      	ldr	r3, [r7, #4]
   2c6a8:	6918      	ldr	r0, [r3, #16]
   2c6aa:	687b      	ldr	r3, [r7, #4]
   2c6ac:	689b      	ldr	r3, [r3, #8]
   2c6ae:	0019      	movs	r1, r3
   2c6b0:	2310      	movs	r3, #16
   2c6b2:	18fb      	adds	r3, r7, r3
   2c6b4:	889b      	ldrh	r3, [r3, #4]
   2c6b6:	9300      	str	r3, [sp, #0]
   2c6b8:	2300      	movs	r3, #0
   2c6ba:	2204      	movs	r2, #4
   2c6bc:	4c45      	ldr	r4, [pc, #276]	; (2c7d4 <cycle+0x1e4>)
   2c6be:	47a0      	blx	r4
   2c6c0:	0003      	movs	r3, r0
   2c6c2:	637b      	str	r3, [r7, #52]	; 0x34
   2c6c4:	e013      	b.n	2c6ee <cycle+0xfe>
                else if (msg.qos == QOS2)
   2c6c6:	2310      	movs	r3, #16
   2c6c8:	18fb      	adds	r3, r7, r3
   2c6ca:	781b      	ldrb	r3, [r3, #0]
   2c6cc:	2b02      	cmp	r3, #2
   2c6ce:	d10e      	bne.n	2c6ee <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2c6d0:	687b      	ldr	r3, [r7, #4]
   2c6d2:	6918      	ldr	r0, [r3, #16]
   2c6d4:	687b      	ldr	r3, [r7, #4]
   2c6d6:	689b      	ldr	r3, [r3, #8]
   2c6d8:	0019      	movs	r1, r3
   2c6da:	2310      	movs	r3, #16
   2c6dc:	18fb      	adds	r3, r7, r3
   2c6de:	889b      	ldrh	r3, [r3, #4]
   2c6e0:	9300      	str	r3, [sp, #0]
   2c6e2:	2300      	movs	r3, #0
   2c6e4:	2205      	movs	r2, #5
   2c6e6:	4c3b      	ldr	r4, [pc, #236]	; (2c7d4 <cycle+0x1e4>)
   2c6e8:	47a0      	blx	r4
   2c6ea:	0003      	movs	r3, r0
   2c6ec:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2c6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c6f0:	2b00      	cmp	r3, #0
   2c6f2:	dc03      	bgt.n	2c6fc <cycle+0x10c>
                    rc = FAILURE;
   2c6f4:	2301      	movs	r3, #1
   2c6f6:	425b      	negs	r3, r3
   2c6f8:	633b      	str	r3, [r7, #48]	; 0x30
   2c6fa:	e007      	b.n	2c70c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2c6fc:	683a      	ldr	r2, [r7, #0]
   2c6fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2c700:	687b      	ldr	r3, [r7, #4]
   2c702:	0018      	movs	r0, r3
   2c704:	4b34      	ldr	r3, [pc, #208]	; (2c7d8 <cycle+0x1e8>)
   2c706:	4798      	blx	r3
   2c708:	0003      	movs	r3, r0
   2c70a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c70e:	3301      	adds	r3, #1
   2c710:	d142      	bne.n	2c798 <cycle+0x1a8>
                    goto exit; // there was a problem
   2c712:	46c0      	nop			; (mov r8, r8)
   2c714:	e049      	b.n	2c7aa <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2c716:	687b      	ldr	r3, [r7, #4]
   2c718:	695c      	ldr	r4, [r3, #20]
   2c71a:	687b      	ldr	r3, [r7, #4]
   2c71c:	68db      	ldr	r3, [r3, #12]
   2c71e:	220a      	movs	r2, #10
   2c720:	18ba      	adds	r2, r7, r2
   2c722:	2109      	movs	r1, #9
   2c724:	1879      	adds	r1, r7, r1
   2c726:	2008      	movs	r0, #8
   2c728:	1838      	adds	r0, r7, r0
   2c72a:	9300      	str	r3, [sp, #0]
   2c72c:	0023      	movs	r3, r4
   2c72e:	4c2b      	ldr	r4, [pc, #172]	; (2c7dc <cycle+0x1ec>)
   2c730:	47a0      	blx	r4
   2c732:	0003      	movs	r3, r0
   2c734:	2b01      	cmp	r3, #1
   2c736:	d003      	beq.n	2c740 <cycle+0x150>
                rc = FAILURE;
   2c738:	2301      	movs	r3, #1
   2c73a:	425b      	negs	r3, r3
   2c73c:	633b      	str	r3, [r7, #48]	; 0x30
   2c73e:	e023      	b.n	2c788 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2c740:	687b      	ldr	r3, [r7, #4]
   2c742:	6918      	ldr	r0, [r3, #16]
   2c744:	687b      	ldr	r3, [r7, #4]
   2c746:	689b      	ldr	r3, [r3, #8]
   2c748:	0019      	movs	r1, r3
   2c74a:	230a      	movs	r3, #10
   2c74c:	18fb      	adds	r3, r7, r3
   2c74e:	881b      	ldrh	r3, [r3, #0]
   2c750:	9300      	str	r3, [sp, #0]
   2c752:	2300      	movs	r3, #0
   2c754:	2206      	movs	r2, #6
   2c756:	4c1f      	ldr	r4, [pc, #124]	; (2c7d4 <cycle+0x1e4>)
   2c758:	47a0      	blx	r4
   2c75a:	0003      	movs	r3, r0
   2c75c:	637b      	str	r3, [r7, #52]	; 0x34
   2c75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c760:	2b00      	cmp	r3, #0
   2c762:	dc03      	bgt.n	2c76c <cycle+0x17c>
                rc = FAILURE;
   2c764:	2301      	movs	r3, #1
   2c766:	425b      	negs	r3, r3
   2c768:	633b      	str	r3, [r7, #48]	; 0x30
   2c76a:	e00d      	b.n	2c788 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2c76c:	683a      	ldr	r2, [r7, #0]
   2c76e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2c770:	687b      	ldr	r3, [r7, #4]
   2c772:	0018      	movs	r0, r3
   2c774:	4b18      	ldr	r3, [pc, #96]	; (2c7d8 <cycle+0x1e8>)
   2c776:	4798      	blx	r3
   2c778:	0003      	movs	r3, r0
   2c77a:	633b      	str	r3, [r7, #48]	; 0x30
   2c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c77e:	2b00      	cmp	r3, #0
   2c780:	d002      	beq.n	2c788 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2c782:	2301      	movs	r3, #1
   2c784:	425b      	negs	r3, r3
   2c786:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c78a:	3301      	adds	r3, #1
   2c78c:	d106      	bne.n	2c79c <cycle+0x1ac>
                goto exit; // there was a problem
   2c78e:	e00c      	b.n	2c7aa <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2c790:	687b      	ldr	r3, [r7, #4]
   2c792:	2200      	movs	r2, #0
   2c794:	771a      	strb	r2, [r3, #28]
            break;
   2c796:	e002      	b.n	2c79e <cycle+0x1ae>
            break;
   2c798:	46c0      	nop			; (mov r8, r8)
   2c79a:	e000      	b.n	2c79e <cycle+0x1ae>
            break;
   2c79c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2c79e:	687b      	ldr	r3, [r7, #4]
   2c7a0:	0018      	movs	r0, r3
   2c7a2:	4b0f      	ldr	r3, [pc, #60]	; (2c7e0 <cycle+0x1f0>)
   2c7a4:	4798      	blx	r3
   2c7a6:	e000      	b.n	2c7aa <cycle+0x1ba>
                goto exit;
   2c7a8:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c7ac:	2b00      	cmp	r3, #0
   2c7ae:	d103      	bne.n	2c7b8 <cycle+0x1c8>
        rc = packet_type;
   2c7b0:	232e      	movs	r3, #46	; 0x2e
   2c7b2:	18fb      	adds	r3, r7, r3
   2c7b4:	881b      	ldrh	r3, [r3, #0]
   2c7b6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2c7ba:	0018      	movs	r0, r3
   2c7bc:	46bd      	mov	sp, r7
   2c7be:	b00f      	add	sp, #60	; 0x3c
   2c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c7c2:	46c0      	nop			; (mov r8, r8)
   2c7c4:	0002c2a5 	.word	0x0002c2a5
   2c7c8:	0003701c 	.word	0x0003701c
   2c7cc:	0002db69 	.word	0x0002db69
   2c7d0:	0002c461 	.word	0x0002c461
   2c7d4:	0002e361 	.word	0x0002e361
   2c7d8:	0002c0e9 	.word	0x0002c0e9
   2c7dc:	0002dc6d 	.word	0x0002dc6d
   2c7e0:	0002c54d 	.word	0x0002c54d

0002c7e4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2c7e4:	b580      	push	{r7, lr}
   2c7e6:	b086      	sub	sp, #24
   2c7e8:	af00      	add	r7, sp, #0
   2c7ea:	6078      	str	r0, [r7, #4]
   2c7ec:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2c7ee:	2300      	movs	r3, #0
   2c7f0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2c7f2:	2308      	movs	r3, #8
   2c7f4:	18fb      	adds	r3, r7, r3
   2c7f6:	0018      	movs	r0, r3
   2c7f8:	4b11      	ldr	r3, [pc, #68]	; (2c840 <MQTTYield+0x5c>)
   2c7fa:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2c7fc:	683a      	ldr	r2, [r7, #0]
   2c7fe:	2308      	movs	r3, #8
   2c800:	18fb      	adds	r3, r7, r3
   2c802:	0011      	movs	r1, r2
   2c804:	0018      	movs	r0, r3
   2c806:	4b0f      	ldr	r3, [pc, #60]	; (2c844 <MQTTYield+0x60>)
   2c808:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2c80a:	2308      	movs	r3, #8
   2c80c:	18fa      	adds	r2, r7, r3
   2c80e:	687b      	ldr	r3, [r7, #4]
   2c810:	0011      	movs	r1, r2
   2c812:	0018      	movs	r0, r3
   2c814:	4b0c      	ldr	r3, [pc, #48]	; (2c848 <MQTTYield+0x64>)
   2c816:	4798      	blx	r3
   2c818:	0003      	movs	r3, r0
   2c81a:	3301      	adds	r3, #1
   2c81c:	d103      	bne.n	2c826 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2c81e:	2301      	movs	r3, #1
   2c820:	425b      	negs	r3, r3
   2c822:	617b      	str	r3, [r7, #20]
            break;
   2c824:	e006      	b.n	2c834 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2c826:	2308      	movs	r3, #8
   2c828:	18fb      	adds	r3, r7, r3
   2c82a:	0018      	movs	r0, r3
   2c82c:	4b07      	ldr	r3, [pc, #28]	; (2c84c <MQTTYield+0x68>)
   2c82e:	4798      	blx	r3
   2c830:	1e03      	subs	r3, r0, #0
   2c832:	d0ea      	beq.n	2c80a <MQTTYield+0x26>
        
    return rc;
   2c834:	697b      	ldr	r3, [r7, #20]
}
   2c836:	0018      	movs	r0, r3
   2c838:	46bd      	mov	sp, r7
   2c83a:	b006      	add	sp, #24
   2c83c:	bd80      	pop	{r7, pc}
   2c83e:	46c0      	nop			; (mov r8, r8)
   2c840:	0002cf71 	.word	0x0002cf71
   2c844:	0002cef9 	.word	0x0002cef9
   2c848:	0002c5f1 	.word	0x0002c5f1
   2c84c:	0002cecd 	.word	0x0002cecd

0002c850 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2c850:	b580      	push	{r7, lr}
   2c852:	b086      	sub	sp, #24
   2c854:	af00      	add	r7, sp, #0
   2c856:	60f8      	str	r0, [r7, #12]
   2c858:	60b9      	str	r1, [r7, #8]
   2c85a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2c85c:	2301      	movs	r3, #1
   2c85e:	425b      	negs	r3, r3
   2c860:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2c862:	687b      	ldr	r3, [r7, #4]
   2c864:	0018      	movs	r0, r3
   2c866:	4b0b      	ldr	r3, [pc, #44]	; (2c894 <waitfor+0x44>)
   2c868:	4798      	blx	r3
   2c86a:	1e03      	subs	r3, r0, #0
   2c86c:	d10c      	bne.n	2c888 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2c86e:	687a      	ldr	r2, [r7, #4]
   2c870:	68fb      	ldr	r3, [r7, #12]
   2c872:	0011      	movs	r1, r2
   2c874:	0018      	movs	r0, r3
   2c876:	4b08      	ldr	r3, [pc, #32]	; (2c898 <waitfor+0x48>)
   2c878:	4798      	blx	r3
   2c87a:	0003      	movs	r3, r0
   2c87c:	617b      	str	r3, [r7, #20]
   2c87e:	697a      	ldr	r2, [r7, #20]
   2c880:	68bb      	ldr	r3, [r7, #8]
   2c882:	429a      	cmp	r2, r3
   2c884:	d1ed      	bne.n	2c862 <waitfor+0x12>
   2c886:	e000      	b.n	2c88a <waitfor+0x3a>
            break; // we timed out
   2c888:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2c88a:	697b      	ldr	r3, [r7, #20]
}
   2c88c:	0018      	movs	r0, r3
   2c88e:	46bd      	mov	sp, r7
   2c890:	b006      	add	sp, #24
   2c892:	bd80      	pop	{r7, pc}
   2c894:	0002cecd 	.word	0x0002cecd
   2c898:	0002c5f1 	.word	0x0002c5f1

0002c89c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2c89c:	b590      	push	{r4, r7, lr}
   2c89e:	b09f      	sub	sp, #124	; 0x7c
   2c8a0:	af00      	add	r7, sp, #0
   2c8a2:	6078      	str	r0, [r7, #4]
   2c8a4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2c8a6:	2301      	movs	r3, #1
   2c8a8:	425b      	negs	r3, r3
   2c8aa:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2c8ac:	230c      	movs	r3, #12
   2c8ae:	18fa      	adds	r2, r7, r3
   2c8b0:	4b41      	ldr	r3, [pc, #260]	; (2c9b8 <MQTTConnect+0x11c>)
   2c8b2:	0010      	movs	r0, r2
   2c8b4:	0019      	movs	r1, r3
   2c8b6:	2358      	movs	r3, #88	; 0x58
   2c8b8:	001a      	movs	r2, r3
   2c8ba:	4b40      	ldr	r3, [pc, #256]	; (2c9bc <MQTTConnect+0x120>)
   2c8bc:	4798      	blx	r3
    int len = 0;
   2c8be:	2300      	movs	r3, #0
   2c8c0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2c8c2:	687b      	ldr	r3, [r7, #4]
   2c8c4:	6a1b      	ldr	r3, [r3, #32]
   2c8c6:	2b00      	cmp	r3, #0
   2c8c8:	d166      	bne.n	2c998 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2c8ca:	2364      	movs	r3, #100	; 0x64
   2c8cc:	18fb      	adds	r3, r7, r3
   2c8ce:	0018      	movs	r0, r3
   2c8d0:	4b3b      	ldr	r3, [pc, #236]	; (2c9c0 <MQTTConnect+0x124>)
   2c8d2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2c8d4:	687b      	ldr	r3, [r7, #4]
   2c8d6:	685a      	ldr	r2, [r3, #4]
   2c8d8:	2364      	movs	r3, #100	; 0x64
   2c8da:	18fb      	adds	r3, r7, r3
   2c8dc:	0011      	movs	r1, r2
   2c8de:	0018      	movs	r0, r3
   2c8e0:	4b38      	ldr	r3, [pc, #224]	; (2c9c4 <MQTTConnect+0x128>)
   2c8e2:	4798      	blx	r3

    if (options == 0)
   2c8e4:	683b      	ldr	r3, [r7, #0]
   2c8e6:	2b00      	cmp	r3, #0
   2c8e8:	d102      	bne.n	2c8f0 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2c8ea:	230c      	movs	r3, #12
   2c8ec:	18fb      	adds	r3, r7, r3
   2c8ee:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2c8f0:	683b      	ldr	r3, [r7, #0]
   2c8f2:	8b1b      	ldrh	r3, [r3, #24]
   2c8f4:	001a      	movs	r2, r3
   2c8f6:	687b      	ldr	r3, [r7, #4]
   2c8f8:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2c8fa:	687b      	ldr	r3, [r7, #4]
   2c8fc:	3354      	adds	r3, #84	; 0x54
   2c8fe:	001a      	movs	r2, r3
   2c900:	687b      	ldr	r3, [r7, #4]
   2c902:	699b      	ldr	r3, [r3, #24]
   2c904:	0019      	movs	r1, r3
   2c906:	0010      	movs	r0, r2
   2c908:	4b2f      	ldr	r3, [pc, #188]	; (2c9c8 <MQTTConnect+0x12c>)
   2c90a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2c90c:	687b      	ldr	r3, [r7, #4]
   2c90e:	6918      	ldr	r0, [r3, #16]
   2c910:	687b      	ldr	r3, [r7, #4]
   2c912:	689b      	ldr	r3, [r3, #8]
   2c914:	0019      	movs	r1, r3
   2c916:	683b      	ldr	r3, [r7, #0]
   2c918:	001a      	movs	r2, r3
   2c91a:	4b2c      	ldr	r3, [pc, #176]	; (2c9cc <MQTTConnect+0x130>)
   2c91c:	4798      	blx	r3
   2c91e:	0003      	movs	r3, r0
   2c920:	673b      	str	r3, [r7, #112]	; 0x70
   2c922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2c924:	2b00      	cmp	r3, #0
   2c926:	dd39      	ble.n	2c99c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2c928:	2364      	movs	r3, #100	; 0x64
   2c92a:	18fa      	adds	r2, r7, r3
   2c92c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2c92e:	687b      	ldr	r3, [r7, #4]
   2c930:	0018      	movs	r0, r3
   2c932:	4b27      	ldr	r3, [pc, #156]	; (2c9d0 <MQTTConnect+0x134>)
   2c934:	4798      	blx	r3
   2c936:	0003      	movs	r3, r0
   2c938:	677b      	str	r3, [r7, #116]	; 0x74
   2c93a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c93c:	2b00      	cmp	r3, #0
   2c93e:	d12f      	bne.n	2c9a0 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2c940:	2364      	movs	r3, #100	; 0x64
   2c942:	18fa      	adds	r2, r7, r3
   2c944:	687b      	ldr	r3, [r7, #4]
   2c946:	2102      	movs	r1, #2
   2c948:	0018      	movs	r0, r3
   2c94a:	4b22      	ldr	r3, [pc, #136]	; (2c9d4 <MQTTConnect+0x138>)
   2c94c:	4798      	blx	r3
   2c94e:	0003      	movs	r3, r0
   2c950:	2b02      	cmp	r3, #2
   2c952:	d11d      	bne.n	2c990 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2c954:	230b      	movs	r3, #11
   2c956:	18fb      	adds	r3, r7, r3
   2c958:	22ff      	movs	r2, #255	; 0xff
   2c95a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2c95c:	230a      	movs	r3, #10
   2c95e:	18fb      	adds	r3, r7, r3
   2c960:	2200      	movs	r2, #0
   2c962:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2c964:	687b      	ldr	r3, [r7, #4]
   2c966:	695a      	ldr	r2, [r3, #20]
   2c968:	687b      	ldr	r3, [r7, #4]
   2c96a:	68db      	ldr	r3, [r3, #12]
   2c96c:	210b      	movs	r1, #11
   2c96e:	1879      	adds	r1, r7, r1
   2c970:	200a      	movs	r0, #10
   2c972:	1838      	adds	r0, r7, r0
   2c974:	4c18      	ldr	r4, [pc, #96]	; (2c9d8 <MQTTConnect+0x13c>)
   2c976:	47a0      	blx	r4
   2c978:	0003      	movs	r3, r0
   2c97a:	2b01      	cmp	r3, #1
   2c97c:	d104      	bne.n	2c988 <MQTTConnect+0xec>
            rc = connack_rc;
   2c97e:	230b      	movs	r3, #11
   2c980:	18fb      	adds	r3, r7, r3
   2c982:	781b      	ldrb	r3, [r3, #0]
   2c984:	677b      	str	r3, [r7, #116]	; 0x74
   2c986:	e00c      	b.n	2c9a2 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2c988:	2301      	movs	r3, #1
   2c98a:	425b      	negs	r3, r3
   2c98c:	677b      	str	r3, [r7, #116]	; 0x74
   2c98e:	e008      	b.n	2c9a2 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2c990:	2301      	movs	r3, #1
   2c992:	425b      	negs	r3, r3
   2c994:	677b      	str	r3, [r7, #116]	; 0x74
   2c996:	e004      	b.n	2c9a2 <MQTTConnect+0x106>
		goto exit;
   2c998:	46c0      	nop			; (mov r8, r8)
   2c99a:	e002      	b.n	2c9a2 <MQTTConnect+0x106>
        goto exit;
   2c99c:	46c0      	nop			; (mov r8, r8)
   2c99e:	e000      	b.n	2c9a2 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2c9a0:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2c9a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c9a4:	2b00      	cmp	r3, #0
   2c9a6:	d102      	bne.n	2c9ae <MQTTConnect+0x112>
        c->isconnected = 1;
   2c9a8:	687b      	ldr	r3, [r7, #4]
   2c9aa:	2201      	movs	r2, #1
   2c9ac:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2c9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2c9b0:	0018      	movs	r0, r3
   2c9b2:	46bd      	mov	sp, r7
   2c9b4:	b01f      	add	sp, #124	; 0x7c
   2c9b6:	bd90      	pop	{r4, r7, pc}
   2c9b8:	00037054 	.word	0x00037054
   2c9bc:	000321cd 	.word	0x000321cd
   2c9c0:	0002cf71 	.word	0x0002cf71
   2c9c4:	0002cef9 	.word	0x0002cef9
   2c9c8:	0002cf21 	.word	0x0002cf21
   2c9cc:	0002d74d 	.word	0x0002d74d
   2c9d0:	0002c0e9 	.word	0x0002c0e9
   2c9d4:	0002c851 	.word	0x0002c851
   2c9d8:	0002d9c9 	.word	0x0002d9c9

0002c9dc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2c9dc:	b5b0      	push	{r4, r5, r7, lr}
   2c9de:	b096      	sub	sp, #88	; 0x58
   2c9e0:	af04      	add	r7, sp, #16
   2c9e2:	60f8      	str	r0, [r7, #12]
   2c9e4:	60b9      	str	r1, [r7, #8]
   2c9e6:	603b      	str	r3, [r7, #0]
   2c9e8:	1dfb      	adds	r3, r7, #7
   2c9ea:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2c9ec:	2301      	movs	r3, #1
   2c9ee:	425b      	negs	r3, r3
   2c9f0:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2c9f2:	2300      	movs	r3, #0
   2c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2c9f6:	2324      	movs	r3, #36	; 0x24
   2c9f8:	18fb      	adds	r3, r7, r3
   2c9fa:	2200      	movs	r2, #0
   2c9fc:	601a      	str	r2, [r3, #0]
   2c9fe:	2324      	movs	r3, #36	; 0x24
   2ca00:	18fb      	adds	r3, r7, r3
   2ca02:	2200      	movs	r2, #0
   2ca04:	605a      	str	r2, [r3, #4]
   2ca06:	2324      	movs	r3, #36	; 0x24
   2ca08:	18fb      	adds	r3, r7, r3
   2ca0a:	2200      	movs	r2, #0
   2ca0c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2ca0e:	1dfb      	adds	r3, r7, #7
   2ca10:	781b      	ldrb	r3, [r3, #0]
   2ca12:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ca14:	2324      	movs	r3, #36	; 0x24
   2ca16:	18fb      	adds	r3, r7, r3
   2ca18:	68ba      	ldr	r2, [r7, #8]
   2ca1a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ca1c:	68fb      	ldr	r3, [r7, #12]
   2ca1e:	6a1b      	ldr	r3, [r3, #32]
   2ca20:	2b00      	cmp	r3, #0
   2ca22:	d100      	bne.n	2ca26 <MQTTSubscribe+0x4a>
   2ca24:	e088      	b.n	2cb38 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ca26:	2330      	movs	r3, #48	; 0x30
   2ca28:	18fb      	adds	r3, r7, r3
   2ca2a:	0018      	movs	r0, r3
   2ca2c:	4b47      	ldr	r3, [pc, #284]	; (2cb4c <MQTTSubscribe+0x170>)
   2ca2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ca30:	68fb      	ldr	r3, [r7, #12]
   2ca32:	685a      	ldr	r2, [r3, #4]
   2ca34:	2330      	movs	r3, #48	; 0x30
   2ca36:	18fb      	adds	r3, r7, r3
   2ca38:	0011      	movs	r1, r2
   2ca3a:	0018      	movs	r0, r3
   2ca3c:	4b44      	ldr	r3, [pc, #272]	; (2cb50 <MQTTSubscribe+0x174>)
   2ca3e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ca40:	68fb      	ldr	r3, [r7, #12]
   2ca42:	691c      	ldr	r4, [r3, #16]
   2ca44:	68fb      	ldr	r3, [r7, #12]
   2ca46:	689b      	ldr	r3, [r3, #8]
   2ca48:	001d      	movs	r5, r3
   2ca4a:	68fb      	ldr	r3, [r7, #12]
   2ca4c:	0018      	movs	r0, r3
   2ca4e:	4b41      	ldr	r3, [pc, #260]	; (2cb54 <MQTTSubscribe+0x178>)
   2ca50:	4798      	blx	r3
   2ca52:	0003      	movs	r3, r0
   2ca54:	b29a      	uxth	r2, r3
   2ca56:	2320      	movs	r3, #32
   2ca58:	18fb      	adds	r3, r7, r3
   2ca5a:	9302      	str	r3, [sp, #8]
   2ca5c:	2324      	movs	r3, #36	; 0x24
   2ca5e:	18fb      	adds	r3, r7, r3
   2ca60:	9301      	str	r3, [sp, #4]
   2ca62:	2301      	movs	r3, #1
   2ca64:	9300      	str	r3, [sp, #0]
   2ca66:	0013      	movs	r3, r2
   2ca68:	2200      	movs	r2, #0
   2ca6a:	0029      	movs	r1, r5
   2ca6c:	0020      	movs	r0, r4
   2ca6e:	4c3a      	ldr	r4, [pc, #232]	; (2cb58 <MQTTSubscribe+0x17c>)
   2ca70:	47a0      	blx	r4
   2ca72:	0003      	movs	r3, r0
   2ca74:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ca78:	2b00      	cmp	r3, #0
   2ca7a:	dd5f      	ble.n	2cb3c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ca7c:	2330      	movs	r3, #48	; 0x30
   2ca7e:	18fa      	adds	r2, r7, r3
   2ca80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2ca82:	68fb      	ldr	r3, [r7, #12]
   2ca84:	0018      	movs	r0, r3
   2ca86:	4b35      	ldr	r3, [pc, #212]	; (2cb5c <MQTTSubscribe+0x180>)
   2ca88:	4798      	blx	r3
   2ca8a:	0003      	movs	r3, r0
   2ca8c:	647b      	str	r3, [r7, #68]	; 0x44
   2ca8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ca90:	2b00      	cmp	r3, #0
   2ca92:	d155      	bne.n	2cb40 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2ca94:	2330      	movs	r3, #48	; 0x30
   2ca96:	18fa      	adds	r2, r7, r3
   2ca98:	68fb      	ldr	r3, [r7, #12]
   2ca9a:	2109      	movs	r1, #9
   2ca9c:	0018      	movs	r0, r3
   2ca9e:	4b30      	ldr	r3, [pc, #192]	; (2cb60 <MQTTSubscribe+0x184>)
   2caa0:	4798      	blx	r3
   2caa2:	0003      	movs	r3, r0
   2caa4:	2b09      	cmp	r3, #9
   2caa6:	d143      	bne.n	2cb30 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2caa8:	2300      	movs	r3, #0
   2caaa:	61fb      	str	r3, [r7, #28]
   2caac:	2301      	movs	r3, #1
   2caae:	425b      	negs	r3, r3
   2cab0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2cab2:	68fb      	ldr	r3, [r7, #12]
   2cab4:	695a      	ldr	r2, [r3, #20]
   2cab6:	68fb      	ldr	r3, [r7, #12]
   2cab8:	68db      	ldr	r3, [r3, #12]
   2caba:	001c      	movs	r4, r3
   2cabc:	2318      	movs	r3, #24
   2cabe:	18fb      	adds	r3, r7, r3
   2cac0:	211c      	movs	r1, #28
   2cac2:	1879      	adds	r1, r7, r1
   2cac4:	2016      	movs	r0, #22
   2cac6:	1838      	adds	r0, r7, r0
   2cac8:	9401      	str	r4, [sp, #4]
   2caca:	9200      	str	r2, [sp, #0]
   2cacc:	000a      	movs	r2, r1
   2cace:	2101      	movs	r1, #1
   2cad0:	4c24      	ldr	r4, [pc, #144]	; (2cb64 <MQTTSubscribe+0x188>)
   2cad2:	47a0      	blx	r4
   2cad4:	0003      	movs	r3, r0
   2cad6:	2b01      	cmp	r3, #1
   2cad8:	d101      	bne.n	2cade <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2cada:	69bb      	ldr	r3, [r7, #24]
   2cadc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2cade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2cae0:	2b80      	cmp	r3, #128	; 0x80
   2cae2:	d02e      	beq.n	2cb42 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cae4:	2300      	movs	r3, #0
   2cae6:	643b      	str	r3, [r7, #64]	; 0x40
   2cae8:	e01e      	b.n	2cb28 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2caea:	68fa      	ldr	r2, [r7, #12]
   2caec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2caee:	3304      	adds	r3, #4
   2caf0:	00db      	lsls	r3, r3, #3
   2caf2:	18d3      	adds	r3, r2, r3
   2caf4:	3304      	adds	r3, #4
   2caf6:	681b      	ldr	r3, [r3, #0]
   2caf8:	2b00      	cmp	r3, #0
   2cafa:	d112      	bne.n	2cb22 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2cafc:	68fa      	ldr	r2, [r7, #12]
   2cafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb00:	3304      	adds	r3, #4
   2cb02:	00db      	lsls	r3, r3, #3
   2cb04:	18d3      	adds	r3, r2, r3
   2cb06:	3304      	adds	r3, #4
   2cb08:	68ba      	ldr	r2, [r7, #8]
   2cb0a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2cb0c:	68fa      	ldr	r2, [r7, #12]
   2cb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb10:	3304      	adds	r3, #4
   2cb12:	00db      	lsls	r3, r3, #3
   2cb14:	18d3      	adds	r3, r2, r3
   2cb16:	3308      	adds	r3, #8
   2cb18:	683a      	ldr	r2, [r7, #0]
   2cb1a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2cb1c:	2300      	movs	r3, #0
   2cb1e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2cb20:	e00f      	b.n	2cb42 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb24:	3301      	adds	r3, #1
   2cb26:	643b      	str	r3, [r7, #64]	; 0x40
   2cb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb2a:	2b04      	cmp	r3, #4
   2cb2c:	dddd      	ble.n	2caea <MQTTSubscribe+0x10e>
   2cb2e:	e008      	b.n	2cb42 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2cb30:	2301      	movs	r3, #1
   2cb32:	425b      	negs	r3, r3
   2cb34:	647b      	str	r3, [r7, #68]	; 0x44
   2cb36:	e004      	b.n	2cb42 <MQTTSubscribe+0x166>
		goto exit;
   2cb38:	46c0      	nop			; (mov r8, r8)
   2cb3a:	e002      	b.n	2cb42 <MQTTSubscribe+0x166>
        goto exit;
   2cb3c:	46c0      	nop			; (mov r8, r8)
   2cb3e:	e000      	b.n	2cb42 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2cb40:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2cb42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2cb44:	0018      	movs	r0, r3
   2cb46:	46bd      	mov	sp, r7
   2cb48:	b012      	add	sp, #72	; 0x48
   2cb4a:	bdb0      	pop	{r4, r5, r7, pc}
   2cb4c:	0002cf71 	.word	0x0002cf71
   2cb50:	0002cef9 	.word	0x0002cef9
   2cb54:	0002c0b9 	.word	0x0002c0b9
   2cb58:	0002e4a9 	.word	0x0002e4a9
   2cb5c:	0002c0e9 	.word	0x0002c0e9
   2cb60:	0002c851 	.word	0x0002c851
   2cb64:	0002e5f9 	.word	0x0002e5f9

0002cb68 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cb6a:	46ce      	mov	lr, r9
   2cb6c:	4647      	mov	r7, r8
   2cb6e:	b580      	push	{r7, lr}
   2cb70:	b097      	sub	sp, #92	; 0x5c
   2cb72:	af08      	add	r7, sp, #32
   2cb74:	60f8      	str	r0, [r7, #12]
   2cb76:	60b9      	str	r1, [r7, #8]
   2cb78:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2cb7a:	2301      	movs	r3, #1
   2cb7c:	425b      	negs	r3, r3
   2cb7e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2cb80:	2318      	movs	r3, #24
   2cb82:	18fb      	adds	r3, r7, r3
   2cb84:	2200      	movs	r2, #0
   2cb86:	601a      	str	r2, [r3, #0]
   2cb88:	2318      	movs	r3, #24
   2cb8a:	18fb      	adds	r3, r7, r3
   2cb8c:	2200      	movs	r2, #0
   2cb8e:	605a      	str	r2, [r3, #4]
   2cb90:	2318      	movs	r3, #24
   2cb92:	18fb      	adds	r3, r7, r3
   2cb94:	2200      	movs	r2, #0
   2cb96:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2cb98:	2318      	movs	r3, #24
   2cb9a:	18fb      	adds	r3, r7, r3
   2cb9c:	68ba      	ldr	r2, [r7, #8]
   2cb9e:	601a      	str	r2, [r3, #0]
    int len = 0;
   2cba0:	2300      	movs	r3, #0
   2cba2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2cba4:	68fb      	ldr	r3, [r7, #12]
   2cba6:	6a1b      	ldr	r3, [r3, #32]
   2cba8:	2b00      	cmp	r3, #0
   2cbaa:	d100      	bne.n	2cbae <MQTTPublish+0x46>
   2cbac:	e0a0      	b.n	2ccf0 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2cbae:	2324      	movs	r3, #36	; 0x24
   2cbb0:	18fb      	adds	r3, r7, r3
   2cbb2:	0018      	movs	r0, r3
   2cbb4:	4b55      	ldr	r3, [pc, #340]	; (2cd0c <MQTTPublish+0x1a4>)
   2cbb6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2cbb8:	68fb      	ldr	r3, [r7, #12]
   2cbba:	685a      	ldr	r2, [r3, #4]
   2cbbc:	2324      	movs	r3, #36	; 0x24
   2cbbe:	18fb      	adds	r3, r7, r3
   2cbc0:	0011      	movs	r1, r2
   2cbc2:	0018      	movs	r0, r3
   2cbc4:	4b52      	ldr	r3, [pc, #328]	; (2cd10 <MQTTPublish+0x1a8>)
   2cbc6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2cbc8:	687b      	ldr	r3, [r7, #4]
   2cbca:	781b      	ldrb	r3, [r3, #0]
   2cbcc:	2b01      	cmp	r3, #1
   2cbce:	d003      	beq.n	2cbd8 <MQTTPublish+0x70>
   2cbd0:	687b      	ldr	r3, [r7, #4]
   2cbd2:	781b      	ldrb	r3, [r3, #0]
   2cbd4:	2b02      	cmp	r3, #2
   2cbd6:	d107      	bne.n	2cbe8 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2cbd8:	68fb      	ldr	r3, [r7, #12]
   2cbda:	0018      	movs	r0, r3
   2cbdc:	4b4d      	ldr	r3, [pc, #308]	; (2cd14 <MQTTPublish+0x1ac>)
   2cbde:	4798      	blx	r3
   2cbe0:	0003      	movs	r3, r0
   2cbe2:	b29a      	uxth	r2, r3
   2cbe4:	687b      	ldr	r3, [r7, #4]
   2cbe6:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2cbe8:	68fb      	ldr	r3, [r7, #12]
   2cbea:	691b      	ldr	r3, [r3, #16]
   2cbec:	469c      	mov	ip, r3
   2cbee:	68fb      	ldr	r3, [r7, #12]
   2cbf0:	689b      	ldr	r3, [r3, #8]
   2cbf2:	001d      	movs	r5, r3
   2cbf4:	687b      	ldr	r3, [r7, #4]
   2cbf6:	781b      	ldrb	r3, [r3, #0]
   2cbf8:	001e      	movs	r6, r3
   2cbfa:	687b      	ldr	r3, [r7, #4]
   2cbfc:	785b      	ldrb	r3, [r3, #1]
   2cbfe:	4698      	mov	r8, r3
   2cc00:	687b      	ldr	r3, [r7, #4]
   2cc02:	889b      	ldrh	r3, [r3, #4]
   2cc04:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2cc06:	687b      	ldr	r3, [r7, #4]
   2cc08:	689a      	ldr	r2, [r3, #8]
   2cc0a:	687b      	ldr	r3, [r7, #4]
   2cc0c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2cc0e:	9306      	str	r3, [sp, #24]
   2cc10:	9205      	str	r2, [sp, #20]
   2cc12:	2318      	movs	r3, #24
   2cc14:	18fa      	adds	r2, r7, r3
   2cc16:	2308      	movs	r3, #8
   2cc18:	446b      	add	r3, sp
   2cc1a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2cc1c:	c313      	stmia	r3!, {r0, r1, r4}
   2cc1e:	464b      	mov	r3, r9
   2cc20:	9301      	str	r3, [sp, #4]
   2cc22:	4643      	mov	r3, r8
   2cc24:	9300      	str	r3, [sp, #0]
   2cc26:	0033      	movs	r3, r6
   2cc28:	2200      	movs	r2, #0
   2cc2a:	0029      	movs	r1, r5
   2cc2c:	4660      	mov	r0, ip
   2cc2e:	4c3a      	ldr	r4, [pc, #232]	; (2cd18 <MQTTPublish+0x1b0>)
   2cc30:	47a0      	blx	r4
   2cc32:	0003      	movs	r3, r0
   2cc34:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2cc38:	2b00      	cmp	r3, #0
   2cc3a:	dd5b      	ble.n	2ccf4 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2cc3c:	2324      	movs	r3, #36	; 0x24
   2cc3e:	18fa      	adds	r2, r7, r3
   2cc40:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2cc42:	68fb      	ldr	r3, [r7, #12]
   2cc44:	0018      	movs	r0, r3
   2cc46:	4b35      	ldr	r3, [pc, #212]	; (2cd1c <MQTTPublish+0x1b4>)
   2cc48:	4798      	blx	r3
   2cc4a:	0003      	movs	r3, r0
   2cc4c:	637b      	str	r3, [r7, #52]	; 0x34
   2cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cc50:	2b00      	cmp	r3, #0
   2cc52:	d151      	bne.n	2ccf8 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2cc54:	687b      	ldr	r3, [r7, #4]
   2cc56:	781b      	ldrb	r3, [r3, #0]
   2cc58:	2b01      	cmp	r3, #1
   2cc5a:	d122      	bne.n	2cca2 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2cc5c:	2324      	movs	r3, #36	; 0x24
   2cc5e:	18fa      	adds	r2, r7, r3
   2cc60:	68fb      	ldr	r3, [r7, #12]
   2cc62:	2104      	movs	r1, #4
   2cc64:	0018      	movs	r0, r3
   2cc66:	4b2e      	ldr	r3, [pc, #184]	; (2cd20 <MQTTPublish+0x1b8>)
   2cc68:	4798      	blx	r3
   2cc6a:	0003      	movs	r3, r0
   2cc6c:	2b04      	cmp	r3, #4
   2cc6e:	d114      	bne.n	2cc9a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2cc70:	68fb      	ldr	r3, [r7, #12]
   2cc72:	695c      	ldr	r4, [r3, #20]
   2cc74:	68fb      	ldr	r3, [r7, #12]
   2cc76:	68db      	ldr	r3, [r3, #12]
   2cc78:	2216      	movs	r2, #22
   2cc7a:	18ba      	adds	r2, r7, r2
   2cc7c:	2115      	movs	r1, #21
   2cc7e:	1879      	adds	r1, r7, r1
   2cc80:	2014      	movs	r0, #20
   2cc82:	1838      	adds	r0, r7, r0
   2cc84:	9300      	str	r3, [sp, #0]
   2cc86:	0023      	movs	r3, r4
   2cc88:	4c26      	ldr	r4, [pc, #152]	; (2cd24 <MQTTPublish+0x1bc>)
   2cc8a:	47a0      	blx	r4
   2cc8c:	0003      	movs	r3, r0
   2cc8e:	2b01      	cmp	r3, #1
   2cc90:	d033      	beq.n	2ccfa <MQTTPublish+0x192>
                rc = FAILURE;
   2cc92:	2301      	movs	r3, #1
   2cc94:	425b      	negs	r3, r3
   2cc96:	637b      	str	r3, [r7, #52]	; 0x34
   2cc98:	e02f      	b.n	2ccfa <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2cc9a:	2301      	movs	r3, #1
   2cc9c:	425b      	negs	r3, r3
   2cc9e:	637b      	str	r3, [r7, #52]	; 0x34
   2cca0:	e02b      	b.n	2ccfa <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2cca2:	687b      	ldr	r3, [r7, #4]
   2cca4:	781b      	ldrb	r3, [r3, #0]
   2cca6:	2b02      	cmp	r3, #2
   2cca8:	d127      	bne.n	2ccfa <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ccaa:	2324      	movs	r3, #36	; 0x24
   2ccac:	18fa      	adds	r2, r7, r3
   2ccae:	68fb      	ldr	r3, [r7, #12]
   2ccb0:	2107      	movs	r1, #7
   2ccb2:	0018      	movs	r0, r3
   2ccb4:	4b1a      	ldr	r3, [pc, #104]	; (2cd20 <MQTTPublish+0x1b8>)
   2ccb6:	4798      	blx	r3
   2ccb8:	0003      	movs	r3, r0
   2ccba:	2b07      	cmp	r3, #7
   2ccbc:	d114      	bne.n	2cce8 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ccbe:	68fb      	ldr	r3, [r7, #12]
   2ccc0:	695c      	ldr	r4, [r3, #20]
   2ccc2:	68fb      	ldr	r3, [r7, #12]
   2ccc4:	68db      	ldr	r3, [r3, #12]
   2ccc6:	2212      	movs	r2, #18
   2ccc8:	18ba      	adds	r2, r7, r2
   2ccca:	2111      	movs	r1, #17
   2cccc:	1879      	adds	r1, r7, r1
   2ccce:	2010      	movs	r0, #16
   2ccd0:	1838      	adds	r0, r7, r0
   2ccd2:	9300      	str	r3, [sp, #0]
   2ccd4:	0023      	movs	r3, r4
   2ccd6:	4c13      	ldr	r4, [pc, #76]	; (2cd24 <MQTTPublish+0x1bc>)
   2ccd8:	47a0      	blx	r4
   2ccda:	0003      	movs	r3, r0
   2ccdc:	2b01      	cmp	r3, #1
   2ccde:	d00c      	beq.n	2ccfa <MQTTPublish+0x192>
                rc = FAILURE;
   2cce0:	2301      	movs	r3, #1
   2cce2:	425b      	negs	r3, r3
   2cce4:	637b      	str	r3, [r7, #52]	; 0x34
   2cce6:	e008      	b.n	2ccfa <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2cce8:	2301      	movs	r3, #1
   2ccea:	425b      	negs	r3, r3
   2ccec:	637b      	str	r3, [r7, #52]	; 0x34
   2ccee:	e004      	b.n	2ccfa <MQTTPublish+0x192>
		goto exit;
   2ccf0:	46c0      	nop			; (mov r8, r8)
   2ccf2:	e002      	b.n	2ccfa <MQTTPublish+0x192>
        goto exit;
   2ccf4:	46c0      	nop			; (mov r8, r8)
   2ccf6:	e000      	b.n	2ccfa <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ccf8:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ccfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ccfc:	0018      	movs	r0, r3
   2ccfe:	46bd      	mov	sp, r7
   2cd00:	b00f      	add	sp, #60	; 0x3c
   2cd02:	bc0c      	pop	{r2, r3}
   2cd04:	4690      	mov	r8, r2
   2cd06:	4699      	mov	r9, r3
   2cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cd0a:	46c0      	nop			; (mov r8, r8)
   2cd0c:	0002cf71 	.word	0x0002cf71
   2cd10:	0002cef9 	.word	0x0002cef9
   2cd14:	0002c0b9 	.word	0x0002c0b9
   2cd18:	0002e1f5 	.word	0x0002e1f5
   2cd1c:	0002c0e9 	.word	0x0002c0e9
   2cd20:	0002c851 	.word	0x0002c851
   2cd24:	0002dc6d 	.word	0x0002dc6d

0002cd28 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2cd28:	b580      	push	{r7, lr}
   2cd2a:	b088      	sub	sp, #32
   2cd2c:	af00      	add	r7, sp, #0
   2cd2e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2cd30:	2301      	movs	r3, #1
   2cd32:	425b      	negs	r3, r3
   2cd34:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2cd36:	2300      	movs	r3, #0
   2cd38:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2cd3a:	230c      	movs	r3, #12
   2cd3c:	18fb      	adds	r3, r7, r3
   2cd3e:	0018      	movs	r0, r3
   2cd40:	4b13      	ldr	r3, [pc, #76]	; (2cd90 <MQTTDisconnect+0x68>)
   2cd42:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2cd44:	687b      	ldr	r3, [r7, #4]
   2cd46:	685a      	ldr	r2, [r3, #4]
   2cd48:	230c      	movs	r3, #12
   2cd4a:	18fb      	adds	r3, r7, r3
   2cd4c:	0011      	movs	r1, r2
   2cd4e:	0018      	movs	r0, r3
   2cd50:	4b10      	ldr	r3, [pc, #64]	; (2cd94 <MQTTDisconnect+0x6c>)
   2cd52:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2cd54:	687b      	ldr	r3, [r7, #4]
   2cd56:	691a      	ldr	r2, [r3, #16]
   2cd58:	687b      	ldr	r3, [r7, #4]
   2cd5a:	689b      	ldr	r3, [r3, #8]
   2cd5c:	0019      	movs	r1, r3
   2cd5e:	0010      	movs	r0, r2
   2cd60:	4b0d      	ldr	r3, [pc, #52]	; (2cd98 <MQTTDisconnect+0x70>)
   2cd62:	4798      	blx	r3
   2cd64:	0003      	movs	r3, r0
   2cd66:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2cd68:	69bb      	ldr	r3, [r7, #24]
   2cd6a:	2b00      	cmp	r3, #0
   2cd6c:	dd08      	ble.n	2cd80 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2cd6e:	230c      	movs	r3, #12
   2cd70:	18fa      	adds	r2, r7, r3
   2cd72:	69b9      	ldr	r1, [r7, #24]
   2cd74:	687b      	ldr	r3, [r7, #4]
   2cd76:	0018      	movs	r0, r3
   2cd78:	4b08      	ldr	r3, [pc, #32]	; (2cd9c <MQTTDisconnect+0x74>)
   2cd7a:	4798      	blx	r3
   2cd7c:	0003      	movs	r3, r0
   2cd7e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2cd80:	687b      	ldr	r3, [r7, #4]
   2cd82:	2200      	movs	r2, #0
   2cd84:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2cd86:	69fb      	ldr	r3, [r7, #28]
}
   2cd88:	0018      	movs	r0, r3
   2cd8a:	46bd      	mov	sp, r7
   2cd8c:	b008      	add	sp, #32
   2cd8e:	bd80      	pop	{r7, pc}
   2cd90:	0002cf71 	.word	0x0002cf71
   2cd94:	0002cef9 	.word	0x0002cef9
   2cd98:	0002db21 	.word	0x0002db21
   2cd9c:	0002c0e9 	.word	0x0002c0e9

0002cda0 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2cda0:	b580      	push	{r7, lr}
   2cda2:	b084      	sub	sp, #16
   2cda4:	af00      	add	r7, sp, #0
   2cda6:	0002      	movs	r2, r0
   2cda8:	1dfb      	adds	r3, r7, #7
   2cdaa:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2cdac:	2300      	movs	r3, #0
   2cdae:	60fb      	str	r3, [r7, #12]
   2cdb0:	e01c      	b.n	2cdec <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2cdb2:	4a12      	ldr	r2, [pc, #72]	; (2cdfc <isMQTTSocket+0x5c>)
   2cdb4:	68fb      	ldr	r3, [r7, #12]
   2cdb6:	2164      	movs	r1, #100	; 0x64
   2cdb8:	434b      	muls	r3, r1
   2cdba:	18d3      	adds	r3, r2, r3
   2cdbc:	3360      	adds	r3, #96	; 0x60
   2cdbe:	681b      	ldr	r3, [r3, #0]
   2cdc0:	2b00      	cmp	r3, #0
   2cdc2:	d010      	beq.n	2cde6 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2cdc4:	4a0d      	ldr	r2, [pc, #52]	; (2cdfc <isMQTTSocket+0x5c>)
   2cdc6:	68fb      	ldr	r3, [r7, #12]
   2cdc8:	2164      	movs	r1, #100	; 0x64
   2cdca:	434b      	muls	r3, r1
   2cdcc:	18d3      	adds	r3, r2, r3
   2cdce:	3360      	adds	r3, #96	; 0x60
   2cdd0:	681b      	ldr	r3, [r3, #0]
   2cdd2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2cdd4:	68bb      	ldr	r3, [r7, #8]
   2cdd6:	6a1a      	ldr	r2, [r3, #32]
   2cdd8:	1dfb      	adds	r3, r7, #7
   2cdda:	781b      	ldrb	r3, [r3, #0]
   2cddc:	b25b      	sxtb	r3, r3
   2cdde:	429a      	cmp	r2, r3
   2cde0:	d101      	bne.n	2cde6 <isMQTTSocket+0x46>
				return true;
   2cde2:	2301      	movs	r3, #1
   2cde4:	e006      	b.n	2cdf4 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2cde6:	68fb      	ldr	r3, [r7, #12]
   2cde8:	3301      	adds	r3, #1
   2cdea:	60fb      	str	r3, [r7, #12]
   2cdec:	68fb      	ldr	r3, [r7, #12]
   2cdee:	2b06      	cmp	r3, #6
   2cdf0:	d9df      	bls.n	2cdb2 <isMQTTSocket+0x12>
		}
	}
	return false;
   2cdf2:	2300      	movs	r3, #0
}
   2cdf4:	0018      	movs	r0, r3
   2cdf6:	46bd      	mov	sp, r7
   2cdf8:	b004      	add	sp, #16
   2cdfa:	bd80      	pop	{r7, pc}
   2cdfc:	20003e8c 	.word	0x20003e8c

0002ce00 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2ce00:	b580      	push	{r7, lr}
   2ce02:	b082      	sub	sp, #8
   2ce04:	af00      	add	r7, sp, #0
   2ce06:	6078      	str	r0, [r7, #4]
   2ce08:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2ce0a:	4b0d      	ldr	r3, [pc, #52]	; (2ce40 <dnsResolveCallback+0x40>)
   2ce0c:	781b      	ldrb	r3, [r3, #0]
   2ce0e:	2201      	movs	r2, #1
   2ce10:	4053      	eors	r3, r2
   2ce12:	b2db      	uxtb	r3, r3
   2ce14:	2b00      	cmp	r3, #0
   2ce16:	d00e      	beq.n	2ce36 <dnsResolveCallback+0x36>
   2ce18:	4b0a      	ldr	r3, [pc, #40]	; (2ce44 <dnsResolveCallback+0x44>)
   2ce1a:	681b      	ldr	r3, [r3, #0]
   2ce1c:	687a      	ldr	r2, [r7, #4]
   2ce1e:	0011      	movs	r1, r2
   2ce20:	0018      	movs	r0, r3
   2ce22:	4b09      	ldr	r3, [pc, #36]	; (2ce48 <dnsResolveCallback+0x48>)
   2ce24:	4798      	blx	r3
   2ce26:	1e03      	subs	r3, r0, #0
   2ce28:	d105      	bne.n	2ce36 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ce2a:	683a      	ldr	r2, [r7, #0]
   2ce2c:	4b07      	ldr	r3, [pc, #28]	; (2ce4c <dnsResolveCallback+0x4c>)
   2ce2e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ce30:	4b03      	ldr	r3, [pc, #12]	; (2ce40 <dnsResolveCallback+0x40>)
   2ce32:	2201      	movs	r2, #1
   2ce34:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ce36:	46c0      	nop			; (mov r8, r8)
   2ce38:	46bd      	mov	sp, r7
   2ce3a:	b002      	add	sp, #8
   2ce3c:	bd80      	pop	{r7, pc}
   2ce3e:	46c0      	nop			; (mov r8, r8)
   2ce40:	20003d7c 	.word	0x20003d7c
   2ce44:	20003e88 	.word	0x20003e88
   2ce48:	0003255b 	.word	0x0003255b
   2ce4c:	20003d74 	.word	0x20003d74

0002ce50 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ce50:	b580      	push	{r7, lr}
   2ce52:	b084      	sub	sp, #16
   2ce54:	af00      	add	r7, sp, #0
   2ce56:	603a      	str	r2, [r7, #0]
   2ce58:	1dfb      	adds	r3, r7, #7
   2ce5a:	1c02      	adds	r2, r0, #0
   2ce5c:	701a      	strb	r2, [r3, #0]
   2ce5e:	1dbb      	adds	r3, r7, #6
   2ce60:	1c0a      	adds	r2, r1, #0
   2ce62:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ce64:	1dfb      	adds	r3, r7, #7
   2ce66:	781b      	ldrb	r3, [r3, #0]
   2ce68:	b25b      	sxtb	r3, r3
   2ce6a:	0018      	movs	r0, r3
   2ce6c:	4b12      	ldr	r3, [pc, #72]	; (2ceb8 <tcpClientSocketEventHandler+0x68>)
   2ce6e:	4798      	blx	r3
   2ce70:	1e03      	subs	r3, r0, #0
   2ce72:	d01c      	beq.n	2ceae <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ce74:	1dbb      	adds	r3, r7, #6
   2ce76:	781b      	ldrb	r3, [r3, #0]
   2ce78:	2b06      	cmp	r3, #6
   2ce7a:	d00c      	beq.n	2ce96 <tcpClientSocketEventHandler+0x46>
   2ce7c:	2b07      	cmp	r3, #7
   2ce7e:	d006      	beq.n	2ce8e <tcpClientSocketEventHandler+0x3e>
   2ce80:	2b05      	cmp	r3, #5
   2ce82:	d000      	beq.n	2ce86 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ce84:	e013      	b.n	2ceae <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ce86:	4b0d      	ldr	r3, [pc, #52]	; (2cebc <tcpClientSocketEventHandler+0x6c>)
   2ce88:	2201      	movs	r2, #1
   2ce8a:	701a      	strb	r2, [r3, #0]
			break;
   2ce8c:	e00f      	b.n	2ceae <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ce8e:	4b0c      	ldr	r3, [pc, #48]	; (2cec0 <tcpClientSocketEventHandler+0x70>)
   2ce90:	2201      	movs	r2, #1
   2ce92:	701a      	strb	r2, [r3, #0]
			break;
   2ce94:	e00b      	b.n	2ceae <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ce96:	683b      	ldr	r3, [r7, #0]
   2ce98:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ce9a:	68fb      	ldr	r3, [r7, #12]
   2ce9c:	2204      	movs	r2, #4
   2ce9e:	5e9b      	ldrsh	r3, [r3, r2]
   2cea0:	001a      	movs	r2, r3
   2cea2:	4b08      	ldr	r3, [pc, #32]	; (2cec4 <tcpClientSocketEventHandler+0x74>)
   2cea4:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2cea6:	4b08      	ldr	r3, [pc, #32]	; (2cec8 <tcpClientSocketEventHandler+0x78>)
   2cea8:	2201      	movs	r2, #1
   2ceaa:	701a      	strb	r2, [r3, #0]
			break;
   2ceac:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ceae:	46c0      	nop			; (mov r8, r8)
   2ceb0:	46bd      	mov	sp, r7
   2ceb2:	b004      	add	sp, #16
   2ceb4:	bd80      	pop	{r7, pc}
   2ceb6:	46c0      	nop			; (mov r8, r8)
   2ceb8:	0002cda1 	.word	0x0002cda1
   2cebc:	20003d7d 	.word	0x20003d7d
   2cec0:	20003d7e 	.word	0x20003d7e
   2cec4:	20003d78 	.word	0x20003d78
   2cec8:	20003d7f 	.word	0x20003d7f

0002cecc <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2cecc:	b580      	push	{r7, lr}
   2cece:	b082      	sub	sp, #8
   2ced0:	af00      	add	r7, sp, #0
   2ced2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ced4:	687b      	ldr	r3, [r7, #4]
   2ced6:	3304      	adds	r3, #4
   2ced8:	687a      	ldr	r2, [r7, #4]
   2ceda:	0011      	movs	r1, r2
   2cedc:	0018      	movs	r0, r3
   2cede:	4b05      	ldr	r3, [pc, #20]	; (2cef4 <TimerIsExpired+0x28>)
   2cee0:	4798      	blx	r3
   2cee2:	0003      	movs	r3, r0
   2cee4:	3b01      	subs	r3, #1
   2cee6:	425a      	negs	r2, r3
   2cee8:	4153      	adcs	r3, r2
   2ceea:	b2db      	uxtb	r3, r3
}
   2ceec:	0018      	movs	r0, r3
   2ceee:	46bd      	mov	sp, r7
   2cef0:	b002      	add	sp, #8
   2cef2:	bd80      	pop	{r7, pc}
   2cef4:	0001a765 	.word	0x0001a765

0002cef8 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2cef8:	b580      	push	{r7, lr}
   2cefa:	b082      	sub	sp, #8
   2cefc:	af00      	add	r7, sp, #0
   2cefe:	6078      	str	r0, [r7, #4]
   2cf00:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2cf02:	687b      	ldr	r3, [r7, #4]
   2cf04:	683a      	ldr	r2, [r7, #0]
   2cf06:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2cf08:	687b      	ldr	r3, [r7, #4]
   2cf0a:	3304      	adds	r3, #4
   2cf0c:	0018      	movs	r0, r3
   2cf0e:	4b03      	ldr	r3, [pc, #12]	; (2cf1c <TimerCountdownMS+0x24>)
   2cf10:	4798      	blx	r3
}
   2cf12:	46c0      	nop			; (mov r8, r8)
   2cf14:	46bd      	mov	sp, r7
   2cf16:	b002      	add	sp, #8
   2cf18:	bd80      	pop	{r7, pc}
   2cf1a:	46c0      	nop			; (mov r8, r8)
   2cf1c:	0001a6f9 	.word	0x0001a6f9

0002cf20 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2cf20:	b580      	push	{r7, lr}
   2cf22:	b082      	sub	sp, #8
   2cf24:	af00      	add	r7, sp, #0
   2cf26:	6078      	str	r0, [r7, #4]
   2cf28:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2cf2a:	683b      	ldr	r3, [r7, #0]
   2cf2c:	22fa      	movs	r2, #250	; 0xfa
   2cf2e:	0092      	lsls	r2, r2, #2
   2cf30:	435a      	muls	r2, r3
   2cf32:	687b      	ldr	r3, [r7, #4]
   2cf34:	0011      	movs	r1, r2
   2cf36:	0018      	movs	r0, r3
   2cf38:	4b02      	ldr	r3, [pc, #8]	; (2cf44 <TimerCountdown+0x24>)
   2cf3a:	4798      	blx	r3
}
   2cf3c:	46c0      	nop			; (mov r8, r8)
   2cf3e:	46bd      	mov	sp, r7
   2cf40:	b002      	add	sp, #8
   2cf42:	bd80      	pop	{r7, pc}
   2cf44:	0002cef9 	.word	0x0002cef9

0002cf48 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2cf48:	b580      	push	{r7, lr}
   2cf4a:	b082      	sub	sp, #8
   2cf4c:	af00      	add	r7, sp, #0
   2cf4e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2cf50:	687b      	ldr	r3, [r7, #4]
   2cf52:	3304      	adds	r3, #4
   2cf54:	687a      	ldr	r2, [r7, #4]
   2cf56:	0011      	movs	r1, r2
   2cf58:	0018      	movs	r0, r3
   2cf5a:	4b04      	ldr	r3, [pc, #16]	; (2cf6c <TimerLeftMS+0x24>)
   2cf5c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2cf5e:	687b      	ldr	r3, [r7, #4]
   2cf60:	681b      	ldr	r3, [r3, #0]
}
   2cf62:	0018      	movs	r0, r3
   2cf64:	46bd      	mov	sp, r7
   2cf66:	b002      	add	sp, #8
   2cf68:	bd80      	pop	{r7, pc}
   2cf6a:	46c0      	nop			; (mov r8, r8)
   2cf6c:	0001a765 	.word	0x0001a765

0002cf70 <TimerInit>:


void TimerInit(Timer* timer) {
   2cf70:	b580      	push	{r7, lr}
   2cf72:	b082      	sub	sp, #8
   2cf74:	af00      	add	r7, sp, #0
   2cf76:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2cf78:	687b      	ldr	r3, [r7, #4]
   2cf7a:	2200      	movs	r2, #0
   2cf7c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2cf7e:	687b      	ldr	r3, [r7, #4]
   2cf80:	3304      	adds	r3, #4
   2cf82:	2208      	movs	r2, #8
   2cf84:	2100      	movs	r1, #0
   2cf86:	0018      	movs	r0, r3
   2cf88:	4b02      	ldr	r3, [pc, #8]	; (2cf94 <TimerInit+0x24>)
   2cf8a:	4798      	blx	r3
}
   2cf8c:	46c0      	nop			; (mov r8, r8)
   2cf8e:	46bd      	mov	sp, r7
   2cf90:	b002      	add	sp, #8
   2cf92:	bd80      	pop	{r7, pc}
   2cf94:	00032203 	.word	0x00032203

0002cf98 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2cf98:	b590      	push	{r4, r7, lr}
   2cf9a:	b085      	sub	sp, #20
   2cf9c:	af00      	add	r7, sp, #0
   2cf9e:	60f8      	str	r0, [r7, #12]
   2cfa0:	60b9      	str	r1, [r7, #8]
   2cfa2:	607a      	str	r2, [r7, #4]
   2cfa4:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2cfa6:	683b      	ldr	r3, [r7, #0]
   2cfa8:	2b00      	cmp	r3, #0
   2cfaa:	d101      	bne.n	2cfb0 <WINC1500_read+0x18>
   2cfac:	230a      	movs	r3, #10
   2cfae:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2cfb0:	4b2c      	ldr	r3, [pc, #176]	; (2d064 <WINC1500_read+0xcc>)
   2cfb2:	681b      	ldr	r3, [r3, #0]
   2cfb4:	2b00      	cmp	r3, #0
   2cfb6:	d131      	bne.n	2d01c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2cfb8:	4b2b      	ldr	r3, [pc, #172]	; (2d068 <WINC1500_read+0xd0>)
   2cfba:	2200      	movs	r2, #0
   2cfbc:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2cfbe:	68fb      	ldr	r3, [r7, #12]
   2cfc0:	681b      	ldr	r3, [r3, #0]
   2cfc2:	b258      	sxtb	r0, r3
   2cfc4:	683c      	ldr	r4, [r7, #0]
   2cfc6:	2380      	movs	r3, #128	; 0x80
   2cfc8:	005a      	lsls	r2, r3, #1
   2cfca:	4928      	ldr	r1, [pc, #160]	; (2d06c <WINC1500_read+0xd4>)
   2cfcc:	0023      	movs	r3, r4
   2cfce:	4c28      	ldr	r4, [pc, #160]	; (2d070 <WINC1500_read+0xd8>)
   2cfd0:	47a0      	blx	r4
   2cfd2:	1e03      	subs	r3, r0, #0
   2cfd4:	d005      	beq.n	2cfe2 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2cfd6:	2301      	movs	r3, #1
   2cfd8:	425b      	negs	r3, r3
   2cfda:	e03e      	b.n	2d05a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2cfdc:	2000      	movs	r0, #0
   2cfde:	4b25      	ldr	r3, [pc, #148]	; (2d074 <WINC1500_read+0xdc>)
   2cfe0:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2cfe2:	4b21      	ldr	r3, [pc, #132]	; (2d068 <WINC1500_read+0xd0>)
   2cfe4:	781b      	ldrb	r3, [r3, #0]
   2cfe6:	2201      	movs	r2, #1
   2cfe8:	4053      	eors	r3, r2
   2cfea:	b2db      	uxtb	r3, r3
   2cfec:	2b00      	cmp	r3, #0
   2cfee:	d1f5      	bne.n	2cfdc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2cff0:	4b21      	ldr	r3, [pc, #132]	; (2d078 <WINC1500_read+0xe0>)
   2cff2:	681b      	ldr	r3, [r3, #0]
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	dd08      	ble.n	2d00a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2cff8:	4b1f      	ldr	r3, [pc, #124]	; (2d078 <WINC1500_read+0xe0>)
   2cffa:	681b      	ldr	r3, [r3, #0]
   2cffc:	001a      	movs	r2, r3
   2cffe:	4b19      	ldr	r3, [pc, #100]	; (2d064 <WINC1500_read+0xcc>)
   2d000:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2d002:	4b1e      	ldr	r3, [pc, #120]	; (2d07c <WINC1500_read+0xe4>)
   2d004:	2200      	movs	r2, #0
   2d006:	601a      	str	r2, [r3, #0]
   2d008:	e008      	b.n	2d01c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2d00a:	4b16      	ldr	r3, [pc, #88]	; (2d064 <WINC1500_read+0xcc>)
   2d00c:	2200      	movs	r2, #0
   2d00e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2d010:	4b1a      	ldr	r3, [pc, #104]	; (2d07c <WINC1500_read+0xe4>)
   2d012:	2200      	movs	r2, #0
   2d014:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2d016:	4b18      	ldr	r3, [pc, #96]	; (2d078 <WINC1500_read+0xe0>)
   2d018:	681b      	ldr	r3, [r3, #0]
   2d01a:	e01e      	b.n	2d05a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2d01c:	4b11      	ldr	r3, [pc, #68]	; (2d064 <WINC1500_read+0xcc>)
   2d01e:	681b      	ldr	r3, [r3, #0]
   2d020:	001a      	movs	r2, r3
   2d022:	687b      	ldr	r3, [r7, #4]
   2d024:	4293      	cmp	r3, r2
   2d026:	dd02      	ble.n	2d02e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2d028:	2301      	movs	r3, #1
   2d02a:	425b      	negs	r3, r3
   2d02c:	e015      	b.n	2d05a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2d02e:	4b13      	ldr	r3, [pc, #76]	; (2d07c <WINC1500_read+0xe4>)
   2d030:	681a      	ldr	r2, [r3, #0]
   2d032:	4b0e      	ldr	r3, [pc, #56]	; (2d06c <WINC1500_read+0xd4>)
   2d034:	18d1      	adds	r1, r2, r3
   2d036:	687a      	ldr	r2, [r7, #4]
   2d038:	68bb      	ldr	r3, [r7, #8]
   2d03a:	0018      	movs	r0, r3
   2d03c:	4b10      	ldr	r3, [pc, #64]	; (2d080 <WINC1500_read+0xe8>)
   2d03e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2d040:	4b08      	ldr	r3, [pc, #32]	; (2d064 <WINC1500_read+0xcc>)
   2d042:	681a      	ldr	r2, [r3, #0]
   2d044:	687b      	ldr	r3, [r7, #4]
   2d046:	1ad2      	subs	r2, r2, r3
   2d048:	4b06      	ldr	r3, [pc, #24]	; (2d064 <WINC1500_read+0xcc>)
   2d04a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2d04c:	4b0b      	ldr	r3, [pc, #44]	; (2d07c <WINC1500_read+0xe4>)
   2d04e:	681a      	ldr	r2, [r3, #0]
   2d050:	687b      	ldr	r3, [r7, #4]
   2d052:	18d2      	adds	r2, r2, r3
   2d054:	4b09      	ldr	r3, [pc, #36]	; (2d07c <WINC1500_read+0xe4>)
   2d056:	601a      	str	r2, [r3, #0]
  
  return len;
   2d058:	687b      	ldr	r3, [r7, #4]
}
   2d05a:	0018      	movs	r0, r3
   2d05c:	46bd      	mov	sp, r7
   2d05e:	b005      	add	sp, #20
   2d060:	bd90      	pop	{r4, r7, pc}
   2d062:	46c0      	nop			; (mov r8, r8)
   2d064:	20003e84 	.word	0x20003e84
   2d068:	20003d7f 	.word	0x20003d7f
   2d06c:	20003d80 	.word	0x20003d80
   2d070:	0002364d 	.word	0x0002364d
   2d074:	0001fb95 	.word	0x0001fb95
   2d078:	20003d78 	.word	0x20003d78
   2d07c:	20003e80 	.word	0x20003e80
   2d080:	000321cd 	.word	0x000321cd

0002d084 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2d084:	b590      	push	{r4, r7, lr}
   2d086:	b085      	sub	sp, #20
   2d088:	af00      	add	r7, sp, #0
   2d08a:	60f8      	str	r0, [r7, #12]
   2d08c:	60b9      	str	r1, [r7, #8]
   2d08e:	607a      	str	r2, [r7, #4]
   2d090:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2d092:	4b10      	ldr	r3, [pc, #64]	; (2d0d4 <WINC1500_write+0x50>)
   2d094:	2200      	movs	r2, #0
   2d096:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2d098:	68fb      	ldr	r3, [r7, #12]
   2d09a:	681b      	ldr	r3, [r3, #0]
   2d09c:	b258      	sxtb	r0, r3
   2d09e:	687b      	ldr	r3, [r7, #4]
   2d0a0:	b29a      	uxth	r2, r3
   2d0a2:	68b9      	ldr	r1, [r7, #8]
   2d0a4:	2300      	movs	r3, #0
   2d0a6:	4c0c      	ldr	r4, [pc, #48]	; (2d0d8 <WINC1500_write+0x54>)
   2d0a8:	47a0      	blx	r4
   2d0aa:	1e03      	subs	r3, r0, #0
   2d0ac:	d005      	beq.n	2d0ba <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2d0ae:	2301      	movs	r3, #1
   2d0b0:	425b      	negs	r3, r3
   2d0b2:	e00a      	b.n	2d0ca <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2d0b4:	2000      	movs	r0, #0
   2d0b6:	4b09      	ldr	r3, [pc, #36]	; (2d0dc <WINC1500_write+0x58>)
   2d0b8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2d0ba:	4b06      	ldr	r3, [pc, #24]	; (2d0d4 <WINC1500_write+0x50>)
   2d0bc:	781b      	ldrb	r3, [r3, #0]
   2d0be:	2201      	movs	r2, #1
   2d0c0:	4053      	eors	r3, r2
   2d0c2:	b2db      	uxtb	r3, r3
   2d0c4:	2b00      	cmp	r3, #0
   2d0c6:	d1f5      	bne.n	2d0b4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2d0c8:	687b      	ldr	r3, [r7, #4]
}
   2d0ca:	0018      	movs	r0, r3
   2d0cc:	46bd      	mov	sp, r7
   2d0ce:	b005      	add	sp, #20
   2d0d0:	bd90      	pop	{r4, r7, pc}
   2d0d2:	46c0      	nop			; (mov r8, r8)
   2d0d4:	20003d7e 	.word	0x20003d7e
   2d0d8:	000234e9 	.word	0x000234e9
   2d0dc:	0001fb95 	.word	0x0001fb95

0002d0e0 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2d0e0:	b580      	push	{r7, lr}
   2d0e2:	b082      	sub	sp, #8
   2d0e4:	af00      	add	r7, sp, #0
   2d0e6:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2d0e8:	687b      	ldr	r3, [r7, #4]
   2d0ea:	681b      	ldr	r3, [r3, #0]
   2d0ec:	b25b      	sxtb	r3, r3
   2d0ee:	0018      	movs	r0, r3
   2d0f0:	4b06      	ldr	r3, [pc, #24]	; (2d10c <WINC1500_disconnect+0x2c>)
   2d0f2:	4798      	blx	r3
	n->socket=-1;
   2d0f4:	687b      	ldr	r3, [r7, #4]
   2d0f6:	2201      	movs	r2, #1
   2d0f8:	4252      	negs	r2, r2
   2d0fa:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2d0fc:	4b04      	ldr	r3, [pc, #16]	; (2d110 <WINC1500_disconnect+0x30>)
   2d0fe:	2200      	movs	r2, #0
   2d100:	701a      	strb	r2, [r3, #0]
}
   2d102:	46c0      	nop			; (mov r8, r8)
   2d104:	46bd      	mov	sp, r7
   2d106:	b002      	add	sp, #8
   2d108:	bd80      	pop	{r7, pc}
   2d10a:	46c0      	nop			; (mov r8, r8)
   2d10c:	000237cd 	.word	0x000237cd
   2d110:	20003d7d 	.word	0x20003d7d

0002d114 <NetworkInit>:


void NetworkInit(Network* n) {
   2d114:	b580      	push	{r7, lr}
   2d116:	b082      	sub	sp, #8
   2d118:	af00      	add	r7, sp, #0
   2d11a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2d11c:	687b      	ldr	r3, [r7, #4]
   2d11e:	2201      	movs	r2, #1
   2d120:	4252      	negs	r2, r2
   2d122:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2d124:	687b      	ldr	r3, [r7, #4]
   2d126:	4a06      	ldr	r2, [pc, #24]	; (2d140 <NetworkInit+0x2c>)
   2d128:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2d12a:	687b      	ldr	r3, [r7, #4]
   2d12c:	4a05      	ldr	r2, [pc, #20]	; (2d144 <NetworkInit+0x30>)
   2d12e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2d130:	687b      	ldr	r3, [r7, #4]
   2d132:	4a05      	ldr	r2, [pc, #20]	; (2d148 <NetworkInit+0x34>)
   2d134:	611a      	str	r2, [r3, #16]
}
   2d136:	46c0      	nop			; (mov r8, r8)
   2d138:	46bd      	mov	sp, r7
   2d13a:	b002      	add	sp, #8
   2d13c:	bd80      	pop	{r7, pc}
   2d13e:	46c0      	nop			; (mov r8, r8)
   2d140:	0002cf99 	.word	0x0002cf99
   2d144:	0002d085 	.word	0x0002d085
   2d148:	0002d0e1 	.word	0x0002d0e1

0002d14c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2d14c:	b580      	push	{r7, lr}
   2d14e:	b088      	sub	sp, #32
   2d150:	af00      	add	r7, sp, #0
   2d152:	60f8      	str	r0, [r7, #12]
   2d154:	60b9      	str	r1, [r7, #8]
   2d156:	607a      	str	r2, [r7, #4]
   2d158:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2d15a:	4b37      	ldr	r3, [pc, #220]	; (2d238 <ConnectNetwork+0xec>)
   2d15c:	2200      	movs	r2, #0
   2d15e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2d160:	4b36      	ldr	r3, [pc, #216]	; (2d23c <ConnectNetwork+0xf0>)
   2d162:	68ba      	ldr	r2, [r7, #8]
   2d164:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2d166:	68bb      	ldr	r3, [r7, #8]
   2d168:	0018      	movs	r0, r3
   2d16a:	4b35      	ldr	r3, [pc, #212]	; (2d240 <ConnectNetwork+0xf4>)
   2d16c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2d16e:	e002      	b.n	2d176 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2d170:	2000      	movs	r0, #0
   2d172:	4b34      	ldr	r3, [pc, #208]	; (2d244 <ConnectNetwork+0xf8>)
   2d174:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2d176:	4b30      	ldr	r3, [pc, #192]	; (2d238 <ConnectNetwork+0xec>)
   2d178:	781b      	ldrb	r3, [r3, #0]
   2d17a:	2201      	movs	r2, #1
   2d17c:	4053      	eors	r3, r2
   2d17e:	b2db      	uxtb	r3, r3
   2d180:	2b00      	cmp	r3, #0
   2d182:	d1f5      	bne.n	2d170 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2d184:	4b30      	ldr	r3, [pc, #192]	; (2d248 <ConnectNetwork+0xfc>)
   2d186:	681a      	ldr	r2, [r3, #0]
   2d188:	68fb      	ldr	r3, [r7, #12]
   2d18a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2d18c:	2310      	movs	r3, #16
   2d18e:	18fb      	adds	r3, r7, r3
   2d190:	2202      	movs	r2, #2
   2d192:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2d194:	687b      	ldr	r3, [r7, #4]
   2d196:	b29b      	uxth	r3, r3
   2d198:	021b      	lsls	r3, r3, #8
   2d19a:	b21a      	sxth	r2, r3
   2d19c:	687b      	ldr	r3, [r7, #4]
   2d19e:	b29b      	uxth	r3, r3
   2d1a0:	0a1b      	lsrs	r3, r3, #8
   2d1a2:	b29b      	uxth	r3, r3
   2d1a4:	b21b      	sxth	r3, r3
   2d1a6:	4313      	orrs	r3, r2
   2d1a8:	b21b      	sxth	r3, r3
   2d1aa:	b29a      	uxth	r2, r3
   2d1ac:	2310      	movs	r3, #16
   2d1ae:	18fb      	adds	r3, r7, r3
   2d1b0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2d1b2:	4b25      	ldr	r3, [pc, #148]	; (2d248 <ConnectNetwork+0xfc>)
   2d1b4:	681b      	ldr	r3, [r3, #0]
   2d1b6:	001a      	movs	r2, r3
   2d1b8:	2310      	movs	r3, #16
   2d1ba:	18fb      	adds	r3, r7, r3
   2d1bc:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2d1be:	68fb      	ldr	r3, [r7, #12]
   2d1c0:	681b      	ldr	r3, [r3, #0]
   2d1c2:	2b00      	cmp	r3, #0
   2d1c4:	da0a      	bge.n	2d1dc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2d1c6:	683b      	ldr	r3, [r7, #0]
   2d1c8:	b2db      	uxtb	r3, r3
   2d1ca:	001a      	movs	r2, r3
   2d1cc:	2101      	movs	r1, #1
   2d1ce:	2002      	movs	r0, #2
   2d1d0:	4b1e      	ldr	r3, [pc, #120]	; (2d24c <ConnectNetwork+0x100>)
   2d1d2:	4798      	blx	r3
   2d1d4:	0003      	movs	r3, r0
   2d1d6:	001a      	movs	r2, r3
   2d1d8:	68fb      	ldr	r3, [r7, #12]
   2d1da:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2d1dc:	68fb      	ldr	r3, [r7, #12]
   2d1de:	681b      	ldr	r3, [r3, #0]
   2d1e0:	3301      	adds	r3, #1
   2d1e2:	d108      	bne.n	2d1f6 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2d1e4:	68fb      	ldr	r3, [r7, #12]
   2d1e6:	681b      	ldr	r3, [r3, #0]
   2d1e8:	b25b      	sxtb	r3, r3
   2d1ea:	0018      	movs	r0, r3
   2d1ec:	4b18      	ldr	r3, [pc, #96]	; (2d250 <ConnectNetwork+0x104>)
   2d1ee:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2d1f0:	2309      	movs	r3, #9
   2d1f2:	425b      	negs	r3, r3
   2d1f4:	e01c      	b.n	2d230 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2d1f6:	68fb      	ldr	r3, [r7, #12]
   2d1f8:	681b      	ldr	r3, [r3, #0]
   2d1fa:	b25b      	sxtb	r3, r3
   2d1fc:	2210      	movs	r2, #16
   2d1fe:	18b9      	adds	r1, r7, r2
   2d200:	2210      	movs	r2, #16
   2d202:	0018      	movs	r0, r3
   2d204:	4b13      	ldr	r3, [pc, #76]	; (2d254 <ConnectNetwork+0x108>)
   2d206:	4798      	blx	r3
   2d208:	1e03      	subs	r3, r0, #0
   2d20a:	d002      	beq.n	2d212 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2d20c:	2309      	movs	r3, #9
   2d20e:	425b      	negs	r3, r3
   2d210:	e00e      	b.n	2d230 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2d212:	4b11      	ldr	r3, [pc, #68]	; (2d258 <ConnectNetwork+0x10c>)
   2d214:	2200      	movs	r2, #0
   2d216:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2d218:	e002      	b.n	2d220 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2d21a:	2000      	movs	r0, #0
   2d21c:	4b09      	ldr	r3, [pc, #36]	; (2d244 <ConnectNetwork+0xf8>)
   2d21e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2d220:	4b0d      	ldr	r3, [pc, #52]	; (2d258 <ConnectNetwork+0x10c>)
   2d222:	781b      	ldrb	r3, [r3, #0]
   2d224:	2201      	movs	r2, #1
   2d226:	4053      	eors	r3, r2
   2d228:	b2db      	uxtb	r3, r3
   2d22a:	2b00      	cmp	r3, #0
   2d22c:	d1f5      	bne.n	2d21a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2d22e:	2300      	movs	r3, #0
   2d230:	0018      	movs	r0, r3
   2d232:	46bd      	mov	sp, r7
   2d234:	b008      	add	sp, #32
   2d236:	bd80      	pop	{r7, pc}
   2d238:	20003d7c 	.word	0x20003d7c
   2d23c:	20003e88 	.word	0x20003e88
   2d240:	00023a15 	.word	0x00023a15
   2d244:	0001fb95 	.word	0x0001fb95
   2d248:	20003d74 	.word	0x20003d74
   2d24c:	000231c1 	.word	0x000231c1
   2d250:	000237cd 	.word	0x000237cd
   2d254:	000233d5 	.word	0x000233d5
   2d258:	20003d7d 	.word	0x20003d7d

0002d25c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2d25c:	b580      	push	{r7, lr}
   2d25e:	b084      	sub	sp, #16
   2d260:	af00      	add	r7, sp, #0
   2d262:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2d264:	687b      	ldr	r3, [r7, #4]
   2d266:	2b00      	cmp	r3, #0
   2d268:	d022      	beq.n	2d2b0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d26a:	2300      	movs	r3, #0
   2d26c:	60fb      	str	r3, [r7, #12]
   2d26e:	e01b      	b.n	2d2a8 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2d270:	4a11      	ldr	r2, [pc, #68]	; (2d2b8 <allocateClient+0x5c>)
   2d272:	68fb      	ldr	r3, [r7, #12]
   2d274:	2164      	movs	r1, #100	; 0x64
   2d276:	434b      	muls	r3, r1
   2d278:	18d3      	adds	r3, r2, r3
   2d27a:	3360      	adds	r3, #96	; 0x60
   2d27c:	681b      	ldr	r3, [r3, #0]
   2d27e:	2b00      	cmp	r3, #0
   2d280:	d10f      	bne.n	2d2a2 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2d282:	4a0d      	ldr	r2, [pc, #52]	; (2d2b8 <allocateClient+0x5c>)
   2d284:	68fb      	ldr	r3, [r7, #12]
   2d286:	2164      	movs	r1, #100	; 0x64
   2d288:	434b      	muls	r3, r1
   2d28a:	18d3      	adds	r3, r2, r3
   2d28c:	3360      	adds	r3, #96	; 0x60
   2d28e:	687a      	ldr	r2, [r7, #4]
   2d290:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2d292:	68fb      	ldr	r3, [r7, #12]
   2d294:	2264      	movs	r2, #100	; 0x64
   2d296:	435a      	muls	r2, r3
   2d298:	4b07      	ldr	r3, [pc, #28]	; (2d2b8 <allocateClient+0x5c>)
   2d29a:	18d2      	adds	r2, r2, r3
   2d29c:	687b      	ldr	r3, [r7, #4]
   2d29e:	61da      	str	r2, [r3, #28]
			return;
   2d2a0:	e007      	b.n	2d2b2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d2a2:	68fb      	ldr	r3, [r7, #12]
   2d2a4:	3301      	adds	r3, #1
   2d2a6:	60fb      	str	r3, [r7, #12]
   2d2a8:	68fb      	ldr	r3, [r7, #12]
   2d2aa:	2b06      	cmp	r3, #6
   2d2ac:	d9e0      	bls.n	2d270 <allocateClient+0x14>
   2d2ae:	e000      	b.n	2d2b2 <allocateClient+0x56>
		return;
   2d2b0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2d2b2:	46bd      	mov	sp, r7
   2d2b4:	b004      	add	sp, #16
   2d2b6:	bd80      	pop	{r7, pc}
   2d2b8:	20003e8c 	.word	0x20003e8c

0002d2bc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d2be:	b089      	sub	sp, #36	; 0x24
   2d2c0:	af04      	add	r7, sp, #16
   2d2c2:	6078      	str	r0, [r7, #4]
   2d2c4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2d2c6:	687b      	ldr	r3, [r7, #4]
   2d2c8:	2b00      	cmp	r3, #0
   2d2ca:	d00a      	beq.n	2d2e2 <mqtt_init+0x26>
   2d2cc:	683b      	ldr	r3, [r7, #0]
   2d2ce:	2b00      	cmp	r3, #0
   2d2d0:	d007      	beq.n	2d2e2 <mqtt_init+0x26>
   2d2d2:	683b      	ldr	r3, [r7, #0]
   2d2d4:	691b      	ldr	r3, [r3, #16]
   2d2d6:	2b00      	cmp	r3, #0
   2d2d8:	d003      	beq.n	2d2e2 <mqtt_init+0x26>
   2d2da:	683b      	ldr	r3, [r7, #0]
   2d2dc:	689b      	ldr	r3, [r3, #8]
   2d2de:	2b00      	cmp	r3, #0
   2d2e0:	d102      	bne.n	2d2e8 <mqtt_init+0x2c>
		return FAILURE;
   2d2e2:	2301      	movs	r3, #1
   2d2e4:	425b      	negs	r3, r3
   2d2e6:	e034      	b.n	2d352 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2d2e8:	683b      	ldr	r3, [r7, #0]
   2d2ea:	889b      	ldrh	r3, [r3, #4]
   2d2ec:	001a      	movs	r2, r3
   2d2ee:	23fa      	movs	r3, #250	; 0xfa
   2d2f0:	009b      	lsls	r3, r3, #2
   2d2f2:	4353      	muls	r3, r2
   2d2f4:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2d2f6:	687b      	ldr	r3, [r7, #4]
   2d2f8:	3320      	adds	r3, #32
   2d2fa:	0018      	movs	r0, r3
   2d2fc:	4b17      	ldr	r3, [pc, #92]	; (2d35c <mqtt_init+0xa0>)
   2d2fe:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2d300:	687b      	ldr	r3, [r7, #4]
   2d302:	3304      	adds	r3, #4
   2d304:	6839      	ldr	r1, [r7, #0]
   2d306:	2218      	movs	r2, #24
   2d308:	0018      	movs	r0, r3
   2d30a:	4b15      	ldr	r3, [pc, #84]	; (2d360 <mqtt_init+0xa4>)
   2d30c:	4798      	blx	r3
	allocateClient(module);
   2d30e:	687b      	ldr	r3, [r7, #4]
   2d310:	0018      	movs	r0, r3
   2d312:	4b14      	ldr	r3, [pc, #80]	; (2d364 <mqtt_init+0xa8>)
   2d314:	4798      	blx	r3
	
	if(module->client)
   2d316:	687b      	ldr	r3, [r7, #4]
   2d318:	69db      	ldr	r3, [r3, #28]
   2d31a:	2b00      	cmp	r3, #0
   2d31c:	d017      	beq.n	2d34e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2d31e:	687b      	ldr	r3, [r7, #4]
   2d320:	69d8      	ldr	r0, [r3, #28]
   2d322:	687b      	ldr	r3, [r7, #4]
   2d324:	3320      	adds	r3, #32
   2d326:	001c      	movs	r4, r3
   2d328:	683b      	ldr	r3, [r7, #0]
   2d32a:	691e      	ldr	r6, [r3, #16]
   2d32c:	683b      	ldr	r3, [r7, #0]
   2d32e:	695a      	ldr	r2, [r3, #20]
   2d330:	683b      	ldr	r3, [r7, #0]
   2d332:	6899      	ldr	r1, [r3, #8]
   2d334:	683b      	ldr	r3, [r7, #0]
   2d336:	68db      	ldr	r3, [r3, #12]
   2d338:	68fd      	ldr	r5, [r7, #12]
   2d33a:	9302      	str	r3, [sp, #8]
   2d33c:	9101      	str	r1, [sp, #4]
   2d33e:	9200      	str	r2, [sp, #0]
   2d340:	0033      	movs	r3, r6
   2d342:	002a      	movs	r2, r5
   2d344:	0021      	movs	r1, r4
   2d346:	4c08      	ldr	r4, [pc, #32]	; (2d368 <mqtt_init+0xac>)
   2d348:	47a0      	blx	r4
		return SUCCESS;
   2d34a:	2300      	movs	r3, #0
   2d34c:	e001      	b.n	2d352 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2d34e:	2301      	movs	r3, #1
   2d350:	425b      	negs	r3, r3
}
   2d352:	0018      	movs	r0, r3
   2d354:	46bd      	mov	sp, r7
   2d356:	b005      	add	sp, #20
   2d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d35a:	46c0      	nop			; (mov r8, r8)
   2d35c:	0002d115 	.word	0x0002d115
   2d360:	000321cd 	.word	0x000321cd
   2d364:	0002d25d 	.word	0x0002d25d
   2d368:	0002c18d 	.word	0x0002c18d

0002d36c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2d36c:	b580      	push	{r7, lr}
   2d36e:	b082      	sub	sp, #8
   2d370:	af00      	add	r7, sp, #0
   2d372:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2d374:	687b      	ldr	r3, [r7, #4]
   2d376:	4a0c      	ldr	r2, [pc, #48]	; (2d3a8 <mqtt_get_config_defaults+0x3c>)
   2d378:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2d37a:	687b      	ldr	r3, [r7, #4]
   2d37c:	2200      	movs	r2, #0
   2d37e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2d380:	687b      	ldr	r3, [r7, #4]
   2d382:	223c      	movs	r2, #60	; 0x3c
   2d384:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2d386:	687b      	ldr	r3, [r7, #4]
   2d388:	2200      	movs	r2, #0
   2d38a:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2d38c:	687b      	ldr	r3, [r7, #4]
   2d38e:	2200      	movs	r2, #0
   2d390:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2d392:	687b      	ldr	r3, [r7, #4]
   2d394:	2200      	movs	r2, #0
   2d396:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2d398:	687b      	ldr	r3, [r7, #4]
   2d39a:	2200      	movs	r2, #0
   2d39c:	615a      	str	r2, [r3, #20]
}
   2d39e:	46c0      	nop			; (mov r8, r8)
   2d3a0:	46bd      	mov	sp, r7
   2d3a2:	b002      	add	sp, #8
   2d3a4:	bd80      	pop	{r7, pc}
   2d3a6:	46c0      	nop			; (mov r8, r8)
   2d3a8:	0000075b 	.word	0x0000075b

0002d3ac <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2d3ac:	b580      	push	{r7, lr}
   2d3ae:	b082      	sub	sp, #8
   2d3b0:	af00      	add	r7, sp, #0
   2d3b2:	6078      	str	r0, [r7, #4]
   2d3b4:	6039      	str	r1, [r7, #0]
	if(module)
   2d3b6:	687b      	ldr	r3, [r7, #4]
   2d3b8:	2b00      	cmp	r3, #0
   2d3ba:	d004      	beq.n	2d3c6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2d3bc:	687b      	ldr	r3, [r7, #4]
   2d3be:	683a      	ldr	r2, [r7, #0]
   2d3c0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2d3c2:	2300      	movs	r3, #0
   2d3c4:	e001      	b.n	2d3ca <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2d3c6:	2301      	movs	r3, #1
   2d3c8:	425b      	negs	r3, r3
}
   2d3ca:	0018      	movs	r0, r3
   2d3cc:	46bd      	mov	sp, r7
   2d3ce:	b002      	add	sp, #8
   2d3d0:	bd80      	pop	{r7, pc}
	...

0002d3d4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2d3d4:	b580      	push	{r7, lr}
   2d3d6:	b082      	sub	sp, #8
   2d3d8:	af00      	add	r7, sp, #0
   2d3da:	603a      	str	r2, [r7, #0]
   2d3dc:	1dfb      	adds	r3, r7, #7
   2d3de:	1c02      	adds	r2, r0, #0
   2d3e0:	701a      	strb	r2, [r3, #0]
   2d3e2:	1dbb      	adds	r3, r7, #6
   2d3e4:	1c0a      	adds	r2, r1, #0
   2d3e6:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2d3e8:	683a      	ldr	r2, [r7, #0]
   2d3ea:	1dbb      	adds	r3, r7, #6
   2d3ec:	7819      	ldrb	r1, [r3, #0]
   2d3ee:	1dfb      	adds	r3, r7, #7
   2d3f0:	781b      	ldrb	r3, [r3, #0]
   2d3f2:	b25b      	sxtb	r3, r3
   2d3f4:	0018      	movs	r0, r3
   2d3f6:	4b03      	ldr	r3, [pc, #12]	; (2d404 <mqtt_socket_event_handler+0x30>)
   2d3f8:	4798      	blx	r3
}
   2d3fa:	46c0      	nop			; (mov r8, r8)
   2d3fc:	46bd      	mov	sp, r7
   2d3fe:	b002      	add	sp, #8
   2d400:	bd80      	pop	{r7, pc}
   2d402:	46c0      	nop			; (mov r8, r8)
   2d404:	0002ce51 	.word	0x0002ce51

0002d408 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2d408:	b580      	push	{r7, lr}
   2d40a:	b082      	sub	sp, #8
   2d40c:	af00      	add	r7, sp, #0
   2d40e:	6078      	str	r0, [r7, #4]
   2d410:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2d412:	683a      	ldr	r2, [r7, #0]
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	0011      	movs	r1, r2
   2d418:	0018      	movs	r0, r3
   2d41a:	4b03      	ldr	r3, [pc, #12]	; (2d428 <mqtt_socket_resolve_handler+0x20>)
   2d41c:	4798      	blx	r3
}
   2d41e:	46c0      	nop			; (mov r8, r8)
   2d420:	46bd      	mov	sp, r7
   2d422:	b002      	add	sp, #8
   2d424:	bd80      	pop	{r7, pc}
   2d426:	46c0      	nop			; (mov r8, r8)
   2d428:	0002ce01 	.word	0x0002ce01

0002d42c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2d42c:	b590      	push	{r4, r7, lr}
   2d42e:	b085      	sub	sp, #20
   2d430:	af00      	add	r7, sp, #0
   2d432:	6078      	str	r0, [r7, #4]
   2d434:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2d436:	687b      	ldr	r3, [r7, #4]
   2d438:	3320      	adds	r3, #32
   2d43a:	0018      	movs	r0, r3
   2d43c:	687b      	ldr	r3, [r7, #4]
   2d43e:	889b      	ldrh	r3, [r3, #4]
   2d440:	001a      	movs	r2, r3
   2d442:	687b      	ldr	r3, [r7, #4]
   2d444:	799b      	ldrb	r3, [r3, #6]
   2d446:	6839      	ldr	r1, [r7, #0]
   2d448:	4c09      	ldr	r4, [pc, #36]	; (2d470 <mqtt_connect+0x44>)
   2d44a:	47a0      	blx	r4
   2d44c:	0003      	movs	r3, r0
   2d44e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2d450:	687b      	ldr	r3, [r7, #4]
   2d452:	681b      	ldr	r3, [r3, #0]
   2d454:	2b00      	cmp	r3, #0
   2d456:	d006      	beq.n	2d466 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2d458:	687b      	ldr	r3, [r7, #4]
   2d45a:	681b      	ldr	r3, [r3, #0]
   2d45c:	220c      	movs	r2, #12
   2d45e:	18ba      	adds	r2, r7, r2
   2d460:	6878      	ldr	r0, [r7, #4]
   2d462:	2100      	movs	r1, #0
   2d464:	4798      	blx	r3
	return connResult.sock_connected.result;
   2d466:	68fb      	ldr	r3, [r7, #12]
}
   2d468:	0018      	movs	r0, r3
   2d46a:	46bd      	mov	sp, r7
   2d46c:	b005      	add	sp, #20
   2d46e:	bd90      	pop	{r4, r7, pc}
   2d470:	0002d14d 	.word	0x0002d14d

0002d474 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2d474:	b580      	push	{r7, lr}
   2d476:	b09c      	sub	sp, #112	; 0x70
   2d478:	af00      	add	r7, sp, #0
   2d47a:	60f8      	str	r0, [r7, #12]
   2d47c:	607a      	str	r2, [r7, #4]
   2d47e:	603b      	str	r3, [r7, #0]
   2d480:	230b      	movs	r3, #11
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	1c0a      	adds	r2, r1, #0
   2d486:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2d488:	2310      	movs	r3, #16
   2d48a:	18fa      	adds	r2, r7, r3
   2d48c:	4b31      	ldr	r3, [pc, #196]	; (2d554 <mqtt_connect_broker+0xe0>)
   2d48e:	0010      	movs	r0, r2
   2d490:	0019      	movs	r1, r3
   2d492:	2358      	movs	r3, #88	; 0x58
   2d494:	001a      	movs	r2, r3
   2d496:	4b30      	ldr	r3, [pc, #192]	; (2d558 <mqtt_connect_broker+0xe4>)
   2d498:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2d49a:	2310      	movs	r3, #16
   2d49c:	18fb      	adds	r3, r7, r3
   2d49e:	2204      	movs	r2, #4
   2d4a0:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2d4a2:	2310      	movs	r3, #16
   2d4a4:	18fb      	adds	r3, r7, r3
   2d4a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2d4a8:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2d4aa:	2310      	movs	r3, #16
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	687a      	ldr	r2, [r7, #4]
   2d4b0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2d4b2:	2310      	movs	r3, #16
   2d4b4:	18fb      	adds	r3, r7, r3
   2d4b6:	683a      	ldr	r2, [r7, #0]
   2d4b8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2d4ba:	2310      	movs	r3, #16
   2d4bc:	18fb      	adds	r3, r7, r3
   2d4be:	220b      	movs	r2, #11
   2d4c0:	18ba      	adds	r2, r7, r2
   2d4c2:	7812      	ldrb	r2, [r2, #0]
   2d4c4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2d4c6:	2310      	movs	r3, #16
   2d4c8:	18fb      	adds	r3, r7, r3
   2d4ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2d4cc:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2d4ce:	2310      	movs	r3, #16
   2d4d0:	18fb      	adds	r3, r7, r3
   2d4d2:	2280      	movs	r2, #128	; 0x80
   2d4d4:	18ba      	adds	r2, r7, r2
   2d4d6:	6812      	ldr	r2, [r2, #0]
   2d4d8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2d4da:	2310      	movs	r3, #16
   2d4dc:	18fb      	adds	r3, r7, r3
   2d4de:	228c      	movs	r2, #140	; 0x8c
   2d4e0:	18ba      	adds	r2, r7, r2
   2d4e2:	213c      	movs	r1, #60	; 0x3c
   2d4e4:	7812      	ldrb	r2, [r2, #0]
   2d4e6:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2d4e8:	2310      	movs	r3, #16
   2d4ea:	18fb      	adds	r3, r7, r3
   2d4ec:	2288      	movs	r2, #136	; 0x88
   2d4ee:	18ba      	adds	r2, r7, r2
   2d4f0:	213d      	movs	r1, #61	; 0x3d
   2d4f2:	7812      	ldrb	r2, [r2, #0]
   2d4f4:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2d4f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2d4f8:	2b00      	cmp	r3, #0
   2d4fa:	d008      	beq.n	2d50e <mqtt_connect_broker+0x9a>
   2d4fc:	2380      	movs	r3, #128	; 0x80
   2d4fe:	18fb      	adds	r3, r7, r3
   2d500:	681b      	ldr	r3, [r3, #0]
   2d502:	2b00      	cmp	r3, #0
   2d504:	d003      	beq.n	2d50e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2d506:	2310      	movs	r3, #16
   2d508:	18fb      	adds	r3, r7, r3
   2d50a:	2201      	movs	r2, #1
   2d50c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2d50e:	68fb      	ldr	r3, [r7, #12]
   2d510:	69db      	ldr	r3, [r3, #28]
   2d512:	2210      	movs	r2, #16
   2d514:	18ba      	adds	r2, r7, r2
   2d516:	0011      	movs	r1, r2
   2d518:	0018      	movs	r0, r3
   2d51a:	4b10      	ldr	r3, [pc, #64]	; (2d55c <mqtt_connect_broker+0xe8>)
   2d51c:	4798      	blx	r3
   2d51e:	0003      	movs	r3, r0
   2d520:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2d522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2d524:	b2da      	uxtb	r2, r3
   2d526:	2368      	movs	r3, #104	; 0x68
   2d528:	18fb      	adds	r3, r7, r3
   2d52a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2d52c:	68fb      	ldr	r3, [r7, #12]
   2d52e:	681b      	ldr	r3, [r3, #0]
   2d530:	2b00      	cmp	r3, #0
   2d532:	d006      	beq.n	2d542 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2d534:	68fb      	ldr	r3, [r7, #12]
   2d536:	681b      	ldr	r3, [r3, #0]
   2d538:	2268      	movs	r2, #104	; 0x68
   2d53a:	18ba      	adds	r2, r7, r2
   2d53c:	68f8      	ldr	r0, [r7, #12]
   2d53e:	2101      	movs	r1, #1
   2d540:	4798      	blx	r3
	
	module->isConnected = true;
   2d542:	68fb      	ldr	r3, [r7, #12]
   2d544:	2234      	movs	r2, #52	; 0x34
   2d546:	2101      	movs	r1, #1
   2d548:	5499      	strb	r1, [r3, r2]
	return rc;
   2d54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2d54c:	0018      	movs	r0, r3
   2d54e:	46bd      	mov	sp, r7
   2d550:	b01c      	add	sp, #112	; 0x70
   2d552:	bd80      	pop	{r7, pc}
   2d554:	000370ac 	.word	0x000370ac
   2d558:	000321cd 	.word	0x000321cd
   2d55c:	0002c89d 	.word	0x0002c89d

0002d560 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2d560:	b580      	push	{r7, lr}
   2d562:	b084      	sub	sp, #16
   2d564:	af00      	add	r7, sp, #0
   2d566:	6078      	str	r0, [r7, #4]
   2d568:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2d56a:	687b      	ldr	r3, [r7, #4]
   2d56c:	69db      	ldr	r3, [r3, #28]
   2d56e:	0018      	movs	r0, r3
   2d570:	4b0c      	ldr	r3, [pc, #48]	; (2d5a4 <mqtt_disconnect+0x44>)
   2d572:	4798      	blx	r3
   2d574:	0003      	movs	r3, r0
   2d576:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2d578:	68fb      	ldr	r3, [r7, #12]
   2d57a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2d57c:	687b      	ldr	r3, [r7, #4]
   2d57e:	681b      	ldr	r3, [r3, #0]
   2d580:	2b00      	cmp	r3, #0
   2d582:	d006      	beq.n	2d592 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2d584:	687b      	ldr	r3, [r7, #4]
   2d586:	681b      	ldr	r3, [r3, #0]
   2d588:	2208      	movs	r2, #8
   2d58a:	18ba      	adds	r2, r7, r2
   2d58c:	6878      	ldr	r0, [r7, #4]
   2d58e:	2105      	movs	r1, #5
   2d590:	4798      	blx	r3
	
	module->isConnected = false;
   2d592:	687b      	ldr	r3, [r7, #4]
   2d594:	2234      	movs	r2, #52	; 0x34
   2d596:	2100      	movs	r1, #0
   2d598:	5499      	strb	r1, [r3, r2]
	return rc;
   2d59a:	68fb      	ldr	r3, [r7, #12]
}
   2d59c:	0018      	movs	r0, r3
   2d59e:	46bd      	mov	sp, r7
   2d5a0:	b004      	add	sp, #16
   2d5a2:	bd80      	pop	{r7, pc}
   2d5a4:	0002cd29 	.word	0x0002cd29

0002d5a8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2d5a8:	b580      	push	{r7, lr}
   2d5aa:	b08a      	sub	sp, #40	; 0x28
   2d5ac:	af00      	add	r7, sp, #0
   2d5ae:	60f8      	str	r0, [r7, #12]
   2d5b0:	60b9      	str	r1, [r7, #8]
   2d5b2:	607a      	str	r2, [r7, #4]
   2d5b4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2d5b6:	2314      	movs	r3, #20
   2d5b8:	18fb      	adds	r3, r7, r3
   2d5ba:	2230      	movs	r2, #48	; 0x30
   2d5bc:	18ba      	adds	r2, r7, r2
   2d5be:	7812      	ldrb	r2, [r2, #0]
   2d5c0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2d5c2:	2314      	movs	r3, #20
   2d5c4:	18fb      	adds	r3, r7, r3
   2d5c6:	687a      	ldr	r2, [r7, #4]
   2d5c8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2d5ca:	2314      	movs	r3, #20
   2d5cc:	18fb      	adds	r3, r7, r3
   2d5ce:	683a      	ldr	r2, [r7, #0]
   2d5d0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2d5d2:	2314      	movs	r3, #20
   2d5d4:	18fb      	adds	r3, r7, r3
   2d5d6:	2234      	movs	r2, #52	; 0x34
   2d5d8:	18ba      	adds	r2, r7, r2
   2d5da:	7812      	ldrb	r2, [r2, #0]
   2d5dc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2d5de:	68fb      	ldr	r3, [r7, #12]
   2d5e0:	69db      	ldr	r3, [r3, #28]
   2d5e2:	2214      	movs	r2, #20
   2d5e4:	18ba      	adds	r2, r7, r2
   2d5e6:	68b9      	ldr	r1, [r7, #8]
   2d5e8:	0018      	movs	r0, r3
   2d5ea:	4b09      	ldr	r3, [pc, #36]	; (2d610 <mqtt_publish+0x68>)
   2d5ec:	4798      	blx	r3
   2d5ee:	0003      	movs	r3, r0
   2d5f0:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2d5f2:	68fb      	ldr	r3, [r7, #12]
   2d5f4:	681b      	ldr	r3, [r3, #0]
   2d5f6:	2b00      	cmp	r3, #0
   2d5f8:	d005      	beq.n	2d606 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2d5fa:	68fb      	ldr	r3, [r7, #12]
   2d5fc:	681b      	ldr	r3, [r3, #0]
   2d5fe:	68f8      	ldr	r0, [r7, #12]
   2d600:	2200      	movs	r2, #0
   2d602:	2102      	movs	r1, #2
   2d604:	4798      	blx	r3
	
	return rc;
   2d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d608:	0018      	movs	r0, r3
   2d60a:	46bd      	mov	sp, r7
   2d60c:	b00a      	add	sp, #40	; 0x28
   2d60e:	bd80      	pop	{r7, pc}
   2d610:	0002cb69 	.word	0x0002cb69

0002d614 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2d614:	b590      	push	{r4, r7, lr}
   2d616:	b087      	sub	sp, #28
   2d618:	af00      	add	r7, sp, #0
   2d61a:	60f8      	str	r0, [r7, #12]
   2d61c:	60b9      	str	r1, [r7, #8]
   2d61e:	603b      	str	r3, [r7, #0]
   2d620:	1dfb      	adds	r3, r7, #7
   2d622:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2d624:	68fb      	ldr	r3, [r7, #12]
   2d626:	69d8      	ldr	r0, [r3, #28]
   2d628:	683c      	ldr	r4, [r7, #0]
   2d62a:	1dfb      	adds	r3, r7, #7
   2d62c:	781a      	ldrb	r2, [r3, #0]
   2d62e:	68b9      	ldr	r1, [r7, #8]
   2d630:	0023      	movs	r3, r4
   2d632:	4c09      	ldr	r4, [pc, #36]	; (2d658 <mqtt_subscribe+0x44>)
   2d634:	47a0      	blx	r4
   2d636:	0003      	movs	r3, r0
   2d638:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2d63a:	68fb      	ldr	r3, [r7, #12]
   2d63c:	681b      	ldr	r3, [r3, #0]
   2d63e:	2b00      	cmp	r3, #0
   2d640:	d005      	beq.n	2d64e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2d642:	68fb      	ldr	r3, [r7, #12]
   2d644:	681b      	ldr	r3, [r3, #0]
   2d646:	68f8      	ldr	r0, [r7, #12]
   2d648:	2200      	movs	r2, #0
   2d64a:	2103      	movs	r1, #3
   2d64c:	4798      	blx	r3
	
	return rc;
   2d64e:	697b      	ldr	r3, [r7, #20]
}
   2d650:	0018      	movs	r0, r3
   2d652:	46bd      	mov	sp, r7
   2d654:	b007      	add	sp, #28
   2d656:	bd90      	pop	{r4, r7, pc}
   2d658:	0002c9dd 	.word	0x0002c9dd

0002d65c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2d65c:	b580      	push	{r7, lr}
   2d65e:	b082      	sub	sp, #8
   2d660:	af00      	add	r7, sp, #0
   2d662:	6078      	str	r0, [r7, #4]
   2d664:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2d666:	687b      	ldr	r3, [r7, #4]
   2d668:	69db      	ldr	r3, [r3, #28]
   2d66a:	683a      	ldr	r2, [r7, #0]
   2d66c:	0011      	movs	r1, r2
   2d66e:	0018      	movs	r0, r3
   2d670:	4b03      	ldr	r3, [pc, #12]	; (2d680 <mqtt_yield+0x24>)
   2d672:	4798      	blx	r3
   2d674:	0003      	movs	r3, r0
   2d676:	0018      	movs	r0, r3
   2d678:	46bd      	mov	sp, r7
   2d67a:	b002      	add	sp, #8
   2d67c:	bd80      	pop	{r7, pc}
   2d67e:	46c0      	nop			; (mov r8, r8)
   2d680:	0002c7e5 	.word	0x0002c7e5

0002d684 <MQTTSerialize_connectLength>:
   2d684:	b590      	push	{r4, r7, lr}
   2d686:	b085      	sub	sp, #20
   2d688:	af00      	add	r7, sp, #0
   2d68a:	6078      	str	r0, [r7, #4]
   2d68c:	2300      	movs	r3, #0
   2d68e:	60fb      	str	r3, [r7, #12]
   2d690:	687b      	ldr	r3, [r7, #4]
   2d692:	7a1b      	ldrb	r3, [r3, #8]
   2d694:	2b03      	cmp	r3, #3
   2d696:	d102      	bne.n	2d69e <MQTTSerialize_connectLength+0x1a>
   2d698:	230c      	movs	r3, #12
   2d69a:	60fb      	str	r3, [r7, #12]
   2d69c:	e005      	b.n	2d6aa <MQTTSerialize_connectLength+0x26>
   2d69e:	687b      	ldr	r3, [r7, #4]
   2d6a0:	7a1b      	ldrb	r3, [r3, #8]
   2d6a2:	2b04      	cmp	r3, #4
   2d6a4:	d101      	bne.n	2d6aa <MQTTSerialize_connectLength+0x26>
   2d6a6:	230a      	movs	r3, #10
   2d6a8:	60fb      	str	r3, [r7, #12]
   2d6aa:	687b      	ldr	r3, [r7, #4]
   2d6ac:	68d8      	ldr	r0, [r3, #12]
   2d6ae:	6919      	ldr	r1, [r3, #16]
   2d6b0:	695a      	ldr	r2, [r3, #20]
   2d6b2:	4b25      	ldr	r3, [pc, #148]	; (2d748 <MQTTSerialize_connectLength+0xc4>)
   2d6b4:	4798      	blx	r3
   2d6b6:	0003      	movs	r3, r0
   2d6b8:	3302      	adds	r3, #2
   2d6ba:	68fa      	ldr	r2, [r7, #12]
   2d6bc:	18d3      	adds	r3, r2, r3
   2d6be:	60fb      	str	r3, [r7, #12]
   2d6c0:	687b      	ldr	r3, [r7, #4]
   2d6c2:	7edb      	ldrb	r3, [r3, #27]
   2d6c4:	2b00      	cmp	r3, #0
   2d6c6:	d013      	beq.n	2d6f0 <MQTTSerialize_connectLength+0x6c>
   2d6c8:	687b      	ldr	r3, [r7, #4]
   2d6ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2d6cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d6d0:	4b1d      	ldr	r3, [pc, #116]	; (2d748 <MQTTSerialize_connectLength+0xc4>)
   2d6d2:	4798      	blx	r3
   2d6d4:	0003      	movs	r3, r0
   2d6d6:	1c9c      	adds	r4, r3, #2
   2d6d8:	687b      	ldr	r3, [r7, #4]
   2d6da:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2d6dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2d6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d6e0:	4b19      	ldr	r3, [pc, #100]	; (2d748 <MQTTSerialize_connectLength+0xc4>)
   2d6e2:	4798      	blx	r3
   2d6e4:	0003      	movs	r3, r0
   2d6e6:	18e3      	adds	r3, r4, r3
   2d6e8:	3302      	adds	r3, #2
   2d6ea:	68fa      	ldr	r2, [r7, #12]
   2d6ec:	18d3      	adds	r3, r2, r3
   2d6ee:	60fb      	str	r3, [r7, #12]
   2d6f0:	687b      	ldr	r3, [r7, #4]
   2d6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d6f4:	2b00      	cmp	r3, #0
   2d6f6:	d103      	bne.n	2d700 <MQTTSerialize_connectLength+0x7c>
   2d6f8:	687b      	ldr	r3, [r7, #4]
   2d6fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d6fc:	2b00      	cmp	r3, #0
   2d6fe:	d00a      	beq.n	2d716 <MQTTSerialize_connectLength+0x92>
   2d700:	687b      	ldr	r3, [r7, #4]
   2d702:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2d704:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2d706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2d708:	4b0f      	ldr	r3, [pc, #60]	; (2d748 <MQTTSerialize_connectLength+0xc4>)
   2d70a:	4798      	blx	r3
   2d70c:	0003      	movs	r3, r0
   2d70e:	3302      	adds	r3, #2
   2d710:	68fa      	ldr	r2, [r7, #12]
   2d712:	18d3      	adds	r3, r2, r3
   2d714:	60fb      	str	r3, [r7, #12]
   2d716:	687b      	ldr	r3, [r7, #4]
   2d718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d71a:	2b00      	cmp	r3, #0
   2d71c:	d103      	bne.n	2d726 <MQTTSerialize_connectLength+0xa2>
   2d71e:	687b      	ldr	r3, [r7, #4]
   2d720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d722:	2b00      	cmp	r3, #0
   2d724:	d00a      	beq.n	2d73c <MQTTSerialize_connectLength+0xb8>
   2d726:	687b      	ldr	r3, [r7, #4]
   2d728:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2d72a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2d72c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2d72e:	4b06      	ldr	r3, [pc, #24]	; (2d748 <MQTTSerialize_connectLength+0xc4>)
   2d730:	4798      	blx	r3
   2d732:	0003      	movs	r3, r0
   2d734:	3302      	adds	r3, #2
   2d736:	68fa      	ldr	r2, [r7, #12]
   2d738:	18d3      	adds	r3, r2, r3
   2d73a:	60fb      	str	r3, [r7, #12]
   2d73c:	68fb      	ldr	r3, [r7, #12]
   2d73e:	0018      	movs	r0, r3
   2d740:	46bd      	mov	sp, r7
   2d742:	b005      	add	sp, #20
   2d744:	bd90      	pop	{r4, r7, pc}
   2d746:	46c0      	nop			; (mov r8, r8)
   2d748:	0002e0f5 	.word	0x0002e0f5

0002d74c <MQTTSerialize_connect>:
   2d74c:	b590      	push	{r4, r7, lr}
   2d74e:	b08b      	sub	sp, #44	; 0x2c
   2d750:	af00      	add	r7, sp, #0
   2d752:	60f8      	str	r0, [r7, #12]
   2d754:	60b9      	str	r1, [r7, #8]
   2d756:	607a      	str	r2, [r7, #4]
   2d758:	68fb      	ldr	r3, [r7, #12]
   2d75a:	61fb      	str	r3, [r7, #28]
   2d75c:	2300      	movs	r3, #0
   2d75e:	61bb      	str	r3, [r7, #24]
   2d760:	2300      	movs	r3, #0
   2d762:	617b      	str	r3, [r7, #20]
   2d764:	2300      	movs	r3, #0
   2d766:	623b      	str	r3, [r7, #32]
   2d768:	2301      	movs	r3, #1
   2d76a:	425b      	negs	r3, r3
   2d76c:	627b      	str	r3, [r7, #36]	; 0x24
   2d76e:	687b      	ldr	r3, [r7, #4]
   2d770:	0018      	movs	r0, r3
   2d772:	4b8c      	ldr	r3, [pc, #560]	; (2d9a4 <MQTTSerialize_connect+0x258>)
   2d774:	4798      	blx	r3
   2d776:	0003      	movs	r3, r0
   2d778:	623b      	str	r3, [r7, #32]
   2d77a:	6a3b      	ldr	r3, [r7, #32]
   2d77c:	0018      	movs	r0, r3
   2d77e:	4b8a      	ldr	r3, [pc, #552]	; (2d9a8 <MQTTSerialize_connect+0x25c>)
   2d780:	4798      	blx	r3
   2d782:	0002      	movs	r2, r0
   2d784:	68bb      	ldr	r3, [r7, #8]
   2d786:	429a      	cmp	r2, r3
   2d788:	dd03      	ble.n	2d792 <MQTTSerialize_connect+0x46>
   2d78a:	2302      	movs	r3, #2
   2d78c:	425b      	negs	r3, r3
   2d78e:	627b      	str	r3, [r7, #36]	; 0x24
   2d790:	e103      	b.n	2d99a <MQTTSerialize_connect+0x24e>
   2d792:	2318      	movs	r3, #24
   2d794:	18fb      	adds	r3, r7, r3
   2d796:	2200      	movs	r2, #0
   2d798:	701a      	strb	r2, [r3, #0]
   2d79a:	2318      	movs	r3, #24
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	781a      	ldrb	r2, [r3, #0]
   2d7a0:	210f      	movs	r1, #15
   2d7a2:	400a      	ands	r2, r1
   2d7a4:	1c11      	adds	r1, r2, #0
   2d7a6:	2210      	movs	r2, #16
   2d7a8:	430a      	orrs	r2, r1
   2d7aa:	701a      	strb	r2, [r3, #0]
   2d7ac:	2318      	movs	r3, #24
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	781a      	ldrb	r2, [r3, #0]
   2d7b2:	231c      	movs	r3, #28
   2d7b4:	18fb      	adds	r3, r7, r3
   2d7b6:	0011      	movs	r1, r2
   2d7b8:	0018      	movs	r0, r3
   2d7ba:	4b7c      	ldr	r3, [pc, #496]	; (2d9ac <MQTTSerialize_connect+0x260>)
   2d7bc:	4798      	blx	r3
   2d7be:	69fb      	ldr	r3, [r7, #28]
   2d7c0:	6a3a      	ldr	r2, [r7, #32]
   2d7c2:	0011      	movs	r1, r2
   2d7c4:	0018      	movs	r0, r3
   2d7c6:	4b7a      	ldr	r3, [pc, #488]	; (2d9b0 <MQTTSerialize_connect+0x264>)
   2d7c8:	4798      	blx	r3
   2d7ca:	0002      	movs	r2, r0
   2d7cc:	69fb      	ldr	r3, [r7, #28]
   2d7ce:	189b      	adds	r3, r3, r2
   2d7d0:	61fb      	str	r3, [r7, #28]
   2d7d2:	687b      	ldr	r3, [r7, #4]
   2d7d4:	7a1b      	ldrb	r3, [r3, #8]
   2d7d6:	2b04      	cmp	r3, #4
   2d7d8:	d10d      	bne.n	2d7f6 <MQTTSerialize_connect+0xaa>
   2d7da:	4a76      	ldr	r2, [pc, #472]	; (2d9b4 <MQTTSerialize_connect+0x268>)
   2d7dc:	231c      	movs	r3, #28
   2d7de:	18fb      	adds	r3, r7, r3
   2d7e0:	0011      	movs	r1, r2
   2d7e2:	0018      	movs	r0, r3
   2d7e4:	4b74      	ldr	r3, [pc, #464]	; (2d9b8 <MQTTSerialize_connect+0x26c>)
   2d7e6:	4798      	blx	r3
   2d7e8:	231c      	movs	r3, #28
   2d7ea:	18fb      	adds	r3, r7, r3
   2d7ec:	2104      	movs	r1, #4
   2d7ee:	0018      	movs	r0, r3
   2d7f0:	4b6e      	ldr	r3, [pc, #440]	; (2d9ac <MQTTSerialize_connect+0x260>)
   2d7f2:	4798      	blx	r3
   2d7f4:	e00c      	b.n	2d810 <MQTTSerialize_connect+0xc4>
   2d7f6:	4a71      	ldr	r2, [pc, #452]	; (2d9bc <MQTTSerialize_connect+0x270>)
   2d7f8:	231c      	movs	r3, #28
   2d7fa:	18fb      	adds	r3, r7, r3
   2d7fc:	0011      	movs	r1, r2
   2d7fe:	0018      	movs	r0, r3
   2d800:	4b6d      	ldr	r3, [pc, #436]	; (2d9b8 <MQTTSerialize_connect+0x26c>)
   2d802:	4798      	blx	r3
   2d804:	231c      	movs	r3, #28
   2d806:	18fb      	adds	r3, r7, r3
   2d808:	2103      	movs	r1, #3
   2d80a:	0018      	movs	r0, r3
   2d80c:	4b67      	ldr	r3, [pc, #412]	; (2d9ac <MQTTSerialize_connect+0x260>)
   2d80e:	4798      	blx	r3
   2d810:	2314      	movs	r3, #20
   2d812:	18fb      	adds	r3, r7, r3
   2d814:	2200      	movs	r2, #0
   2d816:	701a      	strb	r2, [r3, #0]
   2d818:	687b      	ldr	r3, [r7, #4]
   2d81a:	7e9b      	ldrb	r3, [r3, #26]
   2d81c:	1c1a      	adds	r2, r3, #0
   2d81e:	2301      	movs	r3, #1
   2d820:	4013      	ands	r3, r2
   2d822:	b2da      	uxtb	r2, r3
   2d824:	2314      	movs	r3, #20
   2d826:	18fb      	adds	r3, r7, r3
   2d828:	2101      	movs	r1, #1
   2d82a:	400a      	ands	r2, r1
   2d82c:	1890      	adds	r0, r2, r2
   2d82e:	781a      	ldrb	r2, [r3, #0]
   2d830:	2102      	movs	r1, #2
   2d832:	438a      	bics	r2, r1
   2d834:	1c11      	adds	r1, r2, #0
   2d836:	1c02      	adds	r2, r0, #0
   2d838:	430a      	orrs	r2, r1
   2d83a:	701a      	strb	r2, [r3, #0]
   2d83c:	687b      	ldr	r3, [r7, #4]
   2d83e:	7edb      	ldrb	r3, [r3, #27]
   2d840:	1e5a      	subs	r2, r3, #1
   2d842:	4193      	sbcs	r3, r2
   2d844:	b2da      	uxtb	r2, r3
   2d846:	2314      	movs	r3, #20
   2d848:	18fb      	adds	r3, r7, r3
   2d84a:	2101      	movs	r1, #1
   2d84c:	400a      	ands	r2, r1
   2d84e:	0090      	lsls	r0, r2, #2
   2d850:	781a      	ldrb	r2, [r3, #0]
   2d852:	2104      	movs	r1, #4
   2d854:	438a      	bics	r2, r1
   2d856:	1c11      	adds	r1, r2, #0
   2d858:	1c02      	adds	r2, r0, #0
   2d85a:	430a      	orrs	r2, r1
   2d85c:	701a      	strb	r2, [r3, #0]
   2d85e:	2314      	movs	r3, #20
   2d860:	18fb      	adds	r3, r7, r3
   2d862:	781b      	ldrb	r3, [r3, #0]
   2d864:	2204      	movs	r2, #4
   2d866:	4013      	ands	r3, r2
   2d868:	b2db      	uxtb	r3, r3
   2d86a:	2b00      	cmp	r3, #0
   2d86c:	d025      	beq.n	2d8ba <MQTTSerialize_connect+0x16e>
   2d86e:	687b      	ldr	r3, [r7, #4]
   2d870:	223d      	movs	r2, #61	; 0x3d
   2d872:	5c9b      	ldrb	r3, [r3, r2]
   2d874:	1c1a      	adds	r2, r3, #0
   2d876:	2303      	movs	r3, #3
   2d878:	4013      	ands	r3, r2
   2d87a:	b2da      	uxtb	r2, r3
   2d87c:	2314      	movs	r3, #20
   2d87e:	18fb      	adds	r3, r7, r3
   2d880:	2103      	movs	r1, #3
   2d882:	400a      	ands	r2, r1
   2d884:	00d0      	lsls	r0, r2, #3
   2d886:	781a      	ldrb	r2, [r3, #0]
   2d888:	2118      	movs	r1, #24
   2d88a:	438a      	bics	r2, r1
   2d88c:	1c11      	adds	r1, r2, #0
   2d88e:	1c02      	adds	r2, r0, #0
   2d890:	430a      	orrs	r2, r1
   2d892:	701a      	strb	r2, [r3, #0]
   2d894:	687b      	ldr	r3, [r7, #4]
   2d896:	223c      	movs	r2, #60	; 0x3c
   2d898:	5c9b      	ldrb	r3, [r3, r2]
   2d89a:	1c1a      	adds	r2, r3, #0
   2d89c:	2301      	movs	r3, #1
   2d89e:	4013      	ands	r3, r2
   2d8a0:	b2da      	uxtb	r2, r3
   2d8a2:	2314      	movs	r3, #20
   2d8a4:	18fb      	adds	r3, r7, r3
   2d8a6:	2101      	movs	r1, #1
   2d8a8:	400a      	ands	r2, r1
   2d8aa:	0150      	lsls	r0, r2, #5
   2d8ac:	781a      	ldrb	r2, [r3, #0]
   2d8ae:	2120      	movs	r1, #32
   2d8b0:	438a      	bics	r2, r1
   2d8b2:	1c11      	adds	r1, r2, #0
   2d8b4:	1c02      	adds	r2, r0, #0
   2d8b6:	430a      	orrs	r2, r1
   2d8b8:	701a      	strb	r2, [r3, #0]
   2d8ba:	687b      	ldr	r3, [r7, #4]
   2d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d8be:	2b00      	cmp	r3, #0
   2d8c0:	d103      	bne.n	2d8ca <MQTTSerialize_connect+0x17e>
   2d8c2:	687b      	ldr	r3, [r7, #4]
   2d8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d8c6:	2b00      	cmp	r3, #0
   2d8c8:	d006      	beq.n	2d8d8 <MQTTSerialize_connect+0x18c>
   2d8ca:	2314      	movs	r3, #20
   2d8cc:	18fb      	adds	r3, r7, r3
   2d8ce:	781a      	ldrb	r2, [r3, #0]
   2d8d0:	2180      	movs	r1, #128	; 0x80
   2d8d2:	4249      	negs	r1, r1
   2d8d4:	430a      	orrs	r2, r1
   2d8d6:	701a      	strb	r2, [r3, #0]
   2d8d8:	687b      	ldr	r3, [r7, #4]
   2d8da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d8dc:	2b00      	cmp	r3, #0
   2d8de:	d103      	bne.n	2d8e8 <MQTTSerialize_connect+0x19c>
   2d8e0:	687b      	ldr	r3, [r7, #4]
   2d8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d8e4:	2b00      	cmp	r3, #0
   2d8e6:	d005      	beq.n	2d8f4 <MQTTSerialize_connect+0x1a8>
   2d8e8:	2314      	movs	r3, #20
   2d8ea:	18fb      	adds	r3, r7, r3
   2d8ec:	781a      	ldrb	r2, [r3, #0]
   2d8ee:	2140      	movs	r1, #64	; 0x40
   2d8f0:	430a      	orrs	r2, r1
   2d8f2:	701a      	strb	r2, [r3, #0]
   2d8f4:	2314      	movs	r3, #20
   2d8f6:	18fb      	adds	r3, r7, r3
   2d8f8:	781a      	ldrb	r2, [r3, #0]
   2d8fa:	231c      	movs	r3, #28
   2d8fc:	18fb      	adds	r3, r7, r3
   2d8fe:	0011      	movs	r1, r2
   2d900:	0018      	movs	r0, r3
   2d902:	4b2a      	ldr	r3, [pc, #168]	; (2d9ac <MQTTSerialize_connect+0x260>)
   2d904:	4798      	blx	r3
   2d906:	687b      	ldr	r3, [r7, #4]
   2d908:	8b1b      	ldrh	r3, [r3, #24]
   2d90a:	001a      	movs	r2, r3
   2d90c:	231c      	movs	r3, #28
   2d90e:	18fb      	adds	r3, r7, r3
   2d910:	0011      	movs	r1, r2
   2d912:	0018      	movs	r0, r3
   2d914:	4b2a      	ldr	r3, [pc, #168]	; (2d9c0 <MQTTSerialize_connect+0x274>)
   2d916:	4798      	blx	r3
   2d918:	687b      	ldr	r3, [r7, #4]
   2d91a:	221c      	movs	r2, #28
   2d91c:	18b8      	adds	r0, r7, r2
   2d91e:	68d9      	ldr	r1, [r3, #12]
   2d920:	691a      	ldr	r2, [r3, #16]
   2d922:	695b      	ldr	r3, [r3, #20]
   2d924:	4c27      	ldr	r4, [pc, #156]	; (2d9c4 <MQTTSerialize_connect+0x278>)
   2d926:	47a0      	blx	r4
   2d928:	687b      	ldr	r3, [r7, #4]
   2d92a:	7edb      	ldrb	r3, [r3, #27]
   2d92c:	2b00      	cmp	r3, #0
   2d92e:	d00f      	beq.n	2d950 <MQTTSerialize_connect+0x204>
   2d930:	687b      	ldr	r3, [r7, #4]
   2d932:	221c      	movs	r2, #28
   2d934:	18b8      	adds	r0, r7, r2
   2d936:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2d938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d93c:	4c21      	ldr	r4, [pc, #132]	; (2d9c4 <MQTTSerialize_connect+0x278>)
   2d93e:	47a0      	blx	r4
   2d940:	687b      	ldr	r3, [r7, #4]
   2d942:	221c      	movs	r2, #28
   2d944:	18b8      	adds	r0, r7, r2
   2d946:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2d948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2d94c:	4c1d      	ldr	r4, [pc, #116]	; (2d9c4 <MQTTSerialize_connect+0x278>)
   2d94e:	47a0      	blx	r4
   2d950:	2314      	movs	r3, #20
   2d952:	18fb      	adds	r3, r7, r3
   2d954:	781b      	ldrb	r3, [r3, #0]
   2d956:	227f      	movs	r2, #127	; 0x7f
   2d958:	4393      	bics	r3, r2
   2d95a:	b2db      	uxtb	r3, r3
   2d95c:	2b00      	cmp	r3, #0
   2d95e:	d007      	beq.n	2d970 <MQTTSerialize_connect+0x224>
   2d960:	687b      	ldr	r3, [r7, #4]
   2d962:	221c      	movs	r2, #28
   2d964:	18b8      	adds	r0, r7, r2
   2d966:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2d968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2d96a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d96c:	4c15      	ldr	r4, [pc, #84]	; (2d9c4 <MQTTSerialize_connect+0x278>)
   2d96e:	47a0      	blx	r4
   2d970:	2314      	movs	r3, #20
   2d972:	18fb      	adds	r3, r7, r3
   2d974:	781b      	ldrb	r3, [r3, #0]
   2d976:	2240      	movs	r2, #64	; 0x40
   2d978:	4013      	ands	r3, r2
   2d97a:	b2db      	uxtb	r3, r3
   2d97c:	2b00      	cmp	r3, #0
   2d97e:	d007      	beq.n	2d990 <MQTTSerialize_connect+0x244>
   2d980:	687b      	ldr	r3, [r7, #4]
   2d982:	221c      	movs	r2, #28
   2d984:	18b8      	adds	r0, r7, r2
   2d986:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2d988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2d98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d98c:	4c0d      	ldr	r4, [pc, #52]	; (2d9c4 <MQTTSerialize_connect+0x278>)
   2d98e:	47a0      	blx	r4
   2d990:	69fb      	ldr	r3, [r7, #28]
   2d992:	001a      	movs	r2, r3
   2d994:	68fb      	ldr	r3, [r7, #12]
   2d996:	1ad3      	subs	r3, r2, r3
   2d998:	627b      	str	r3, [r7, #36]	; 0x24
   2d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d99c:	0018      	movs	r0, r3
   2d99e:	46bd      	mov	sp, r7
   2d9a0:	b00b      	add	sp, #44	; 0x2c
   2d9a2:	bd90      	pop	{r4, r7, pc}
   2d9a4:	0002d685 	.word	0x0002d685
   2d9a8:	0002de19 	.word	0x0002de19
   2d9ac:	0002df3b 	.word	0x0002df3b
   2d9b0:	0002dd21 	.word	0x0002dd21
   2d9b4:	00037104 	.word	0x00037104
   2d9b8:	0002dfbd 	.word	0x0002dfbd
   2d9bc:	0003710c 	.word	0x0003710c
   2d9c0:	0002df65 	.word	0x0002df65
   2d9c4:	0002e00d 	.word	0x0002e00d

0002d9c8 <MQTTDeserialize_connack>:
   2d9c8:	b580      	push	{r7, lr}
   2d9ca:	b08a      	sub	sp, #40	; 0x28
   2d9cc:	af00      	add	r7, sp, #0
   2d9ce:	60f8      	str	r0, [r7, #12]
   2d9d0:	60b9      	str	r1, [r7, #8]
   2d9d2:	607a      	str	r2, [r7, #4]
   2d9d4:	603b      	str	r3, [r7, #0]
   2d9d6:	2300      	movs	r3, #0
   2d9d8:	61fb      	str	r3, [r7, #28]
   2d9da:	687b      	ldr	r3, [r7, #4]
   2d9dc:	61bb      	str	r3, [r7, #24]
   2d9de:	2300      	movs	r3, #0
   2d9e0:	623b      	str	r3, [r7, #32]
   2d9e2:	2300      	movs	r3, #0
   2d9e4:	627b      	str	r3, [r7, #36]	; 0x24
   2d9e6:	2300      	movs	r3, #0
   2d9e8:	613b      	str	r3, [r7, #16]
   2d9ea:	2318      	movs	r3, #24
   2d9ec:	18fb      	adds	r3, r7, r3
   2d9ee:	0018      	movs	r0, r3
   2d9f0:	4b25      	ldr	r3, [pc, #148]	; (2da88 <MQTTDeserialize_connack+0xc0>)
   2d9f2:	4798      	blx	r3
   2d9f4:	0003      	movs	r3, r0
   2d9f6:	001a      	movs	r2, r3
   2d9f8:	231c      	movs	r3, #28
   2d9fa:	18fb      	adds	r3, r7, r3
   2d9fc:	701a      	strb	r2, [r3, #0]
   2d9fe:	231c      	movs	r3, #28
   2da00:	18fb      	adds	r3, r7, r3
   2da02:	781b      	ldrb	r3, [r3, #0]
   2da04:	220f      	movs	r2, #15
   2da06:	4393      	bics	r3, r2
   2da08:	b2db      	uxtb	r3, r3
   2da0a:	2b20      	cmp	r3, #32
   2da0c:	d134      	bne.n	2da78 <MQTTDeserialize_connack+0xb0>
   2da0e:	69bb      	ldr	r3, [r7, #24]
   2da10:	2214      	movs	r2, #20
   2da12:	18ba      	adds	r2, r7, r2
   2da14:	0011      	movs	r1, r2
   2da16:	0018      	movs	r0, r3
   2da18:	4b1c      	ldr	r3, [pc, #112]	; (2da8c <MQTTDeserialize_connack+0xc4>)
   2da1a:	4798      	blx	r3
   2da1c:	0003      	movs	r3, r0
   2da1e:	627b      	str	r3, [r7, #36]	; 0x24
   2da20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2da22:	69bb      	ldr	r3, [r7, #24]
   2da24:	189b      	adds	r3, r3, r2
   2da26:	61bb      	str	r3, [r7, #24]
   2da28:	69bb      	ldr	r3, [r7, #24]
   2da2a:	697a      	ldr	r2, [r7, #20]
   2da2c:	189b      	adds	r3, r3, r2
   2da2e:	623b      	str	r3, [r7, #32]
   2da30:	6a3b      	ldr	r3, [r7, #32]
   2da32:	69ba      	ldr	r2, [r7, #24]
   2da34:	1a9b      	subs	r3, r3, r2
   2da36:	2b01      	cmp	r3, #1
   2da38:	dd20      	ble.n	2da7c <MQTTDeserialize_connack+0xb4>
   2da3a:	2318      	movs	r3, #24
   2da3c:	18fb      	adds	r3, r7, r3
   2da3e:	0018      	movs	r0, r3
   2da40:	4b11      	ldr	r3, [pc, #68]	; (2da88 <MQTTDeserialize_connack+0xc0>)
   2da42:	4798      	blx	r3
   2da44:	0003      	movs	r3, r0
   2da46:	001a      	movs	r2, r3
   2da48:	2310      	movs	r3, #16
   2da4a:	18fb      	adds	r3, r7, r3
   2da4c:	701a      	strb	r2, [r3, #0]
   2da4e:	2310      	movs	r3, #16
   2da50:	18fb      	adds	r3, r7, r3
   2da52:	781b      	ldrb	r3, [r3, #0]
   2da54:	061b      	lsls	r3, r3, #24
   2da56:	0fdb      	lsrs	r3, r3, #31
   2da58:	b2db      	uxtb	r3, r3
   2da5a:	001a      	movs	r2, r3
   2da5c:	68fb      	ldr	r3, [r7, #12]
   2da5e:	701a      	strb	r2, [r3, #0]
   2da60:	2318      	movs	r3, #24
   2da62:	18fb      	adds	r3, r7, r3
   2da64:	0018      	movs	r0, r3
   2da66:	4b08      	ldr	r3, [pc, #32]	; (2da88 <MQTTDeserialize_connack+0xc0>)
   2da68:	4798      	blx	r3
   2da6a:	0003      	movs	r3, r0
   2da6c:	001a      	movs	r2, r3
   2da6e:	68bb      	ldr	r3, [r7, #8]
   2da70:	701a      	strb	r2, [r3, #0]
   2da72:	2301      	movs	r3, #1
   2da74:	627b      	str	r3, [r7, #36]	; 0x24
   2da76:	e002      	b.n	2da7e <MQTTDeserialize_connack+0xb6>
   2da78:	46c0      	nop			; (mov r8, r8)
   2da7a:	e000      	b.n	2da7e <MQTTDeserialize_connack+0xb6>
   2da7c:	46c0      	nop			; (mov r8, r8)
   2da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da80:	0018      	movs	r0, r3
   2da82:	46bd      	mov	sp, r7
   2da84:	b00a      	add	sp, #40	; 0x28
   2da86:	bd80      	pop	{r7, pc}
   2da88:	0002df0f 	.word	0x0002df0f
   2da8c:	0002dea9 	.word	0x0002dea9

0002da90 <MQTTSerialize_zero>:
   2da90:	b580      	push	{r7, lr}
   2da92:	b088      	sub	sp, #32
   2da94:	af00      	add	r7, sp, #0
   2da96:	60f8      	str	r0, [r7, #12]
   2da98:	60b9      	str	r1, [r7, #8]
   2da9a:	1dfb      	adds	r3, r7, #7
   2da9c:	701a      	strb	r2, [r3, #0]
   2da9e:	2300      	movs	r3, #0
   2daa0:	61bb      	str	r3, [r7, #24]
   2daa2:	2301      	movs	r3, #1
   2daa4:	425b      	negs	r3, r3
   2daa6:	61fb      	str	r3, [r7, #28]
   2daa8:	68fb      	ldr	r3, [r7, #12]
   2daaa:	617b      	str	r3, [r7, #20]
   2daac:	68bb      	ldr	r3, [r7, #8]
   2daae:	2b01      	cmp	r3, #1
   2dab0:	dc03      	bgt.n	2daba <MQTTSerialize_zero+0x2a>
   2dab2:	2302      	movs	r3, #2
   2dab4:	425b      	negs	r3, r3
   2dab6:	61fb      	str	r3, [r7, #28]
   2dab8:	e029      	b.n	2db0e <MQTTSerialize_zero+0x7e>
   2daba:	2318      	movs	r3, #24
   2dabc:	18fb      	adds	r3, r7, r3
   2dabe:	2200      	movs	r2, #0
   2dac0:	701a      	strb	r2, [r3, #0]
   2dac2:	1dfb      	adds	r3, r7, #7
   2dac4:	781b      	ldrb	r3, [r3, #0]
   2dac6:	220f      	movs	r2, #15
   2dac8:	4013      	ands	r3, r2
   2daca:	b2da      	uxtb	r2, r3
   2dacc:	2318      	movs	r3, #24
   2dace:	18fb      	adds	r3, r7, r3
   2dad0:	0110      	lsls	r0, r2, #4
   2dad2:	781a      	ldrb	r2, [r3, #0]
   2dad4:	210f      	movs	r1, #15
   2dad6:	400a      	ands	r2, r1
   2dad8:	1c11      	adds	r1, r2, #0
   2dada:	1c02      	adds	r2, r0, #0
   2dadc:	430a      	orrs	r2, r1
   2dade:	701a      	strb	r2, [r3, #0]
   2dae0:	2318      	movs	r3, #24
   2dae2:	18fb      	adds	r3, r7, r3
   2dae4:	781a      	ldrb	r2, [r3, #0]
   2dae6:	2314      	movs	r3, #20
   2dae8:	18fb      	adds	r3, r7, r3
   2daea:	0011      	movs	r1, r2
   2daec:	0018      	movs	r0, r3
   2daee:	4b0a      	ldr	r3, [pc, #40]	; (2db18 <MQTTSerialize_zero+0x88>)
   2daf0:	4798      	blx	r3
   2daf2:	697b      	ldr	r3, [r7, #20]
   2daf4:	2100      	movs	r1, #0
   2daf6:	0018      	movs	r0, r3
   2daf8:	4b08      	ldr	r3, [pc, #32]	; (2db1c <MQTTSerialize_zero+0x8c>)
   2dafa:	4798      	blx	r3
   2dafc:	0002      	movs	r2, r0
   2dafe:	697b      	ldr	r3, [r7, #20]
   2db00:	189b      	adds	r3, r3, r2
   2db02:	617b      	str	r3, [r7, #20]
   2db04:	697b      	ldr	r3, [r7, #20]
   2db06:	001a      	movs	r2, r3
   2db08:	68fb      	ldr	r3, [r7, #12]
   2db0a:	1ad3      	subs	r3, r2, r3
   2db0c:	61fb      	str	r3, [r7, #28]
   2db0e:	69fb      	ldr	r3, [r7, #28]
   2db10:	0018      	movs	r0, r3
   2db12:	46bd      	mov	sp, r7
   2db14:	b008      	add	sp, #32
   2db16:	bd80      	pop	{r7, pc}
   2db18:	0002df3b 	.word	0x0002df3b
   2db1c:	0002dd21 	.word	0x0002dd21

0002db20 <MQTTSerialize_disconnect>:
   2db20:	b580      	push	{r7, lr}
   2db22:	b082      	sub	sp, #8
   2db24:	af00      	add	r7, sp, #0
   2db26:	6078      	str	r0, [r7, #4]
   2db28:	6039      	str	r1, [r7, #0]
   2db2a:	6839      	ldr	r1, [r7, #0]
   2db2c:	687b      	ldr	r3, [r7, #4]
   2db2e:	220e      	movs	r2, #14
   2db30:	0018      	movs	r0, r3
   2db32:	4b03      	ldr	r3, [pc, #12]	; (2db40 <MQTTSerialize_disconnect+0x20>)
   2db34:	4798      	blx	r3
   2db36:	0003      	movs	r3, r0
   2db38:	0018      	movs	r0, r3
   2db3a:	46bd      	mov	sp, r7
   2db3c:	b002      	add	sp, #8
   2db3e:	bd80      	pop	{r7, pc}
   2db40:	0002da91 	.word	0x0002da91

0002db44 <MQTTSerialize_pingreq>:
   2db44:	b580      	push	{r7, lr}
   2db46:	b082      	sub	sp, #8
   2db48:	af00      	add	r7, sp, #0
   2db4a:	6078      	str	r0, [r7, #4]
   2db4c:	6039      	str	r1, [r7, #0]
   2db4e:	6839      	ldr	r1, [r7, #0]
   2db50:	687b      	ldr	r3, [r7, #4]
   2db52:	220c      	movs	r2, #12
   2db54:	0018      	movs	r0, r3
   2db56:	4b03      	ldr	r3, [pc, #12]	; (2db64 <MQTTSerialize_pingreq+0x20>)
   2db58:	4798      	blx	r3
   2db5a:	0003      	movs	r3, r0
   2db5c:	0018      	movs	r0, r3
   2db5e:	46bd      	mov	sp, r7
   2db60:	b002      	add	sp, #8
   2db62:	bd80      	pop	{r7, pc}
   2db64:	0002da91 	.word	0x0002da91

0002db68 <MQTTDeserialize_publish>:
   2db68:	b580      	push	{r7, lr}
   2db6a:	b08a      	sub	sp, #40	; 0x28
   2db6c:	af00      	add	r7, sp, #0
   2db6e:	60f8      	str	r0, [r7, #12]
   2db70:	60b9      	str	r1, [r7, #8]
   2db72:	607a      	str	r2, [r7, #4]
   2db74:	603b      	str	r3, [r7, #0]
   2db76:	2300      	movs	r3, #0
   2db78:	61fb      	str	r3, [r7, #28]
   2db7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db7c:	61bb      	str	r3, [r7, #24]
   2db7e:	2300      	movs	r3, #0
   2db80:	623b      	str	r3, [r7, #32]
   2db82:	2300      	movs	r3, #0
   2db84:	627b      	str	r3, [r7, #36]	; 0x24
   2db86:	2300      	movs	r3, #0
   2db88:	617b      	str	r3, [r7, #20]
   2db8a:	2318      	movs	r3, #24
   2db8c:	18fb      	adds	r3, r7, r3
   2db8e:	0018      	movs	r0, r3
   2db90:	4b32      	ldr	r3, [pc, #200]	; (2dc5c <MQTTDeserialize_publish+0xf4>)
   2db92:	4798      	blx	r3
   2db94:	0003      	movs	r3, r0
   2db96:	001a      	movs	r2, r3
   2db98:	231c      	movs	r3, #28
   2db9a:	18fb      	adds	r3, r7, r3
   2db9c:	701a      	strb	r2, [r3, #0]
   2db9e:	231c      	movs	r3, #28
   2dba0:	18fb      	adds	r3, r7, r3
   2dba2:	781b      	ldrb	r3, [r3, #0]
   2dba4:	220f      	movs	r2, #15
   2dba6:	4393      	bics	r3, r2
   2dba8:	b2db      	uxtb	r3, r3
   2dbaa:	2b30      	cmp	r3, #48	; 0x30
   2dbac:	d150      	bne.n	2dc50 <MQTTDeserialize_publish+0xe8>
   2dbae:	231c      	movs	r3, #28
   2dbb0:	18fb      	adds	r3, r7, r3
   2dbb2:	781b      	ldrb	r3, [r3, #0]
   2dbb4:	071b      	lsls	r3, r3, #28
   2dbb6:	0fdb      	lsrs	r3, r3, #31
   2dbb8:	b2db      	uxtb	r3, r3
   2dbba:	001a      	movs	r2, r3
   2dbbc:	68fb      	ldr	r3, [r7, #12]
   2dbbe:	701a      	strb	r2, [r3, #0]
   2dbc0:	231c      	movs	r3, #28
   2dbc2:	18fb      	adds	r3, r7, r3
   2dbc4:	781b      	ldrb	r3, [r3, #0]
   2dbc6:	075b      	lsls	r3, r3, #29
   2dbc8:	0f9b      	lsrs	r3, r3, #30
   2dbca:	b2db      	uxtb	r3, r3
   2dbcc:	001a      	movs	r2, r3
   2dbce:	68bb      	ldr	r3, [r7, #8]
   2dbd0:	601a      	str	r2, [r3, #0]
   2dbd2:	231c      	movs	r3, #28
   2dbd4:	18fb      	adds	r3, r7, r3
   2dbd6:	781b      	ldrb	r3, [r3, #0]
   2dbd8:	07db      	lsls	r3, r3, #31
   2dbda:	0fdb      	lsrs	r3, r3, #31
   2dbdc:	b2db      	uxtb	r3, r3
   2dbde:	001a      	movs	r2, r3
   2dbe0:	687b      	ldr	r3, [r7, #4]
   2dbe2:	701a      	strb	r2, [r3, #0]
   2dbe4:	69bb      	ldr	r3, [r7, #24]
   2dbe6:	2214      	movs	r2, #20
   2dbe8:	18ba      	adds	r2, r7, r2
   2dbea:	0011      	movs	r1, r2
   2dbec:	0018      	movs	r0, r3
   2dbee:	4b1c      	ldr	r3, [pc, #112]	; (2dc60 <MQTTDeserialize_publish+0xf8>)
   2dbf0:	4798      	blx	r3
   2dbf2:	0003      	movs	r3, r0
   2dbf4:	627b      	str	r3, [r7, #36]	; 0x24
   2dbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dbf8:	69bb      	ldr	r3, [r7, #24]
   2dbfa:	189b      	adds	r3, r3, r2
   2dbfc:	61bb      	str	r3, [r7, #24]
   2dbfe:	69bb      	ldr	r3, [r7, #24]
   2dc00:	697a      	ldr	r2, [r7, #20]
   2dc02:	189b      	adds	r3, r3, r2
   2dc04:	623b      	str	r3, [r7, #32]
   2dc06:	6a3a      	ldr	r2, [r7, #32]
   2dc08:	2318      	movs	r3, #24
   2dc0a:	18f9      	adds	r1, r7, r3
   2dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dc0e:	0018      	movs	r0, r3
   2dc10:	4b14      	ldr	r3, [pc, #80]	; (2dc64 <MQTTDeserialize_publish+0xfc>)
   2dc12:	4798      	blx	r3
   2dc14:	1e03      	subs	r3, r0, #0
   2dc16:	d01c      	beq.n	2dc52 <MQTTDeserialize_publish+0xea>
   2dc18:	6a3b      	ldr	r3, [r7, #32]
   2dc1a:	69ba      	ldr	r2, [r7, #24]
   2dc1c:	1a9b      	subs	r3, r3, r2
   2dc1e:	d418      	bmi.n	2dc52 <MQTTDeserialize_publish+0xea>
   2dc20:	68bb      	ldr	r3, [r7, #8]
   2dc22:	681b      	ldr	r3, [r3, #0]
   2dc24:	2b00      	cmp	r3, #0
   2dc26:	dd08      	ble.n	2dc3a <MQTTDeserialize_publish+0xd2>
   2dc28:	2318      	movs	r3, #24
   2dc2a:	18fb      	adds	r3, r7, r3
   2dc2c:	0018      	movs	r0, r3
   2dc2e:	4b0e      	ldr	r3, [pc, #56]	; (2dc68 <MQTTDeserialize_publish+0x100>)
   2dc30:	4798      	blx	r3
   2dc32:	0003      	movs	r3, r0
   2dc34:	b29a      	uxth	r2, r3
   2dc36:	683b      	ldr	r3, [r7, #0]
   2dc38:	801a      	strh	r2, [r3, #0]
   2dc3a:	6a3b      	ldr	r3, [r7, #32]
   2dc3c:	69ba      	ldr	r2, [r7, #24]
   2dc3e:	1a9a      	subs	r2, r3, r2
   2dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dc42:	601a      	str	r2, [r3, #0]
   2dc44:	69ba      	ldr	r2, [r7, #24]
   2dc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dc48:	601a      	str	r2, [r3, #0]
   2dc4a:	2301      	movs	r3, #1
   2dc4c:	627b      	str	r3, [r7, #36]	; 0x24
   2dc4e:	e000      	b.n	2dc52 <MQTTDeserialize_publish+0xea>
   2dc50:	46c0      	nop			; (mov r8, r8)
   2dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc54:	0018      	movs	r0, r3
   2dc56:	46bd      	mov	sp, r7
   2dc58:	b00a      	add	sp, #40	; 0x28
   2dc5a:	bd80      	pop	{r7, pc}
   2dc5c:	0002df0f 	.word	0x0002df0f
   2dc60:	0002dea9 	.word	0x0002dea9
   2dc64:	0002e08d 	.word	0x0002e08d
   2dc68:	0002dedd 	.word	0x0002dedd

0002dc6c <MQTTDeserialize_ack>:
   2dc6c:	b580      	push	{r7, lr}
   2dc6e:	b08a      	sub	sp, #40	; 0x28
   2dc70:	af00      	add	r7, sp, #0
   2dc72:	60f8      	str	r0, [r7, #12]
   2dc74:	60b9      	str	r1, [r7, #8]
   2dc76:	607a      	str	r2, [r7, #4]
   2dc78:	603b      	str	r3, [r7, #0]
   2dc7a:	2300      	movs	r3, #0
   2dc7c:	61fb      	str	r3, [r7, #28]
   2dc7e:	683b      	ldr	r3, [r7, #0]
   2dc80:	61bb      	str	r3, [r7, #24]
   2dc82:	2300      	movs	r3, #0
   2dc84:	623b      	str	r3, [r7, #32]
   2dc86:	2300      	movs	r3, #0
   2dc88:	627b      	str	r3, [r7, #36]	; 0x24
   2dc8a:	2318      	movs	r3, #24
   2dc8c:	18fb      	adds	r3, r7, r3
   2dc8e:	0018      	movs	r0, r3
   2dc90:	4b20      	ldr	r3, [pc, #128]	; (2dd14 <MQTTDeserialize_ack+0xa8>)
   2dc92:	4798      	blx	r3
   2dc94:	0003      	movs	r3, r0
   2dc96:	001a      	movs	r2, r3
   2dc98:	231c      	movs	r3, #28
   2dc9a:	18fb      	adds	r3, r7, r3
   2dc9c:	701a      	strb	r2, [r3, #0]
   2dc9e:	231c      	movs	r3, #28
   2dca0:	18fb      	adds	r3, r7, r3
   2dca2:	781b      	ldrb	r3, [r3, #0]
   2dca4:	071b      	lsls	r3, r3, #28
   2dca6:	0fdb      	lsrs	r3, r3, #31
   2dca8:	b2db      	uxtb	r3, r3
   2dcaa:	001a      	movs	r2, r3
   2dcac:	68bb      	ldr	r3, [r7, #8]
   2dcae:	701a      	strb	r2, [r3, #0]
   2dcb0:	231c      	movs	r3, #28
   2dcb2:	18fb      	adds	r3, r7, r3
   2dcb4:	781b      	ldrb	r3, [r3, #0]
   2dcb6:	061b      	lsls	r3, r3, #24
   2dcb8:	0f1b      	lsrs	r3, r3, #28
   2dcba:	b2db      	uxtb	r3, r3
   2dcbc:	001a      	movs	r2, r3
   2dcbe:	68fb      	ldr	r3, [r7, #12]
   2dcc0:	701a      	strb	r2, [r3, #0]
   2dcc2:	69bb      	ldr	r3, [r7, #24]
   2dcc4:	2214      	movs	r2, #20
   2dcc6:	18ba      	adds	r2, r7, r2
   2dcc8:	0011      	movs	r1, r2
   2dcca:	0018      	movs	r0, r3
   2dccc:	4b12      	ldr	r3, [pc, #72]	; (2dd18 <MQTTDeserialize_ack+0xac>)
   2dcce:	4798      	blx	r3
   2dcd0:	0003      	movs	r3, r0
   2dcd2:	627b      	str	r3, [r7, #36]	; 0x24
   2dcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dcd6:	69bb      	ldr	r3, [r7, #24]
   2dcd8:	189b      	adds	r3, r3, r2
   2dcda:	61bb      	str	r3, [r7, #24]
   2dcdc:	69bb      	ldr	r3, [r7, #24]
   2dcde:	697a      	ldr	r2, [r7, #20]
   2dce0:	189b      	adds	r3, r3, r2
   2dce2:	623b      	str	r3, [r7, #32]
   2dce4:	6a3b      	ldr	r3, [r7, #32]
   2dce6:	69ba      	ldr	r2, [r7, #24]
   2dce8:	1a9b      	subs	r3, r3, r2
   2dcea:	2b01      	cmp	r3, #1
   2dcec:	dd0b      	ble.n	2dd06 <MQTTDeserialize_ack+0x9a>
   2dcee:	2318      	movs	r3, #24
   2dcf0:	18fb      	adds	r3, r7, r3
   2dcf2:	0018      	movs	r0, r3
   2dcf4:	4b09      	ldr	r3, [pc, #36]	; (2dd1c <MQTTDeserialize_ack+0xb0>)
   2dcf6:	4798      	blx	r3
   2dcf8:	0003      	movs	r3, r0
   2dcfa:	b29a      	uxth	r2, r3
   2dcfc:	687b      	ldr	r3, [r7, #4]
   2dcfe:	801a      	strh	r2, [r3, #0]
   2dd00:	2301      	movs	r3, #1
   2dd02:	627b      	str	r3, [r7, #36]	; 0x24
   2dd04:	e000      	b.n	2dd08 <MQTTDeserialize_ack+0x9c>
   2dd06:	46c0      	nop			; (mov r8, r8)
   2dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dd0a:	0018      	movs	r0, r3
   2dd0c:	46bd      	mov	sp, r7
   2dd0e:	b00a      	add	sp, #40	; 0x28
   2dd10:	bd80      	pop	{r7, pc}
   2dd12:	46c0      	nop			; (mov r8, r8)
   2dd14:	0002df0f 	.word	0x0002df0f
   2dd18:	0002dea9 	.word	0x0002dea9
   2dd1c:	0002dedd 	.word	0x0002dedd

0002dd20 <MQTTPacket_encode>:
   2dd20:	b580      	push	{r7, lr}
   2dd22:	b084      	sub	sp, #16
   2dd24:	af00      	add	r7, sp, #0
   2dd26:	6078      	str	r0, [r7, #4]
   2dd28:	6039      	str	r1, [r7, #0]
   2dd2a:	2300      	movs	r3, #0
   2dd2c:	60fb      	str	r3, [r7, #12]
   2dd2e:	683b      	ldr	r3, [r7, #0]
   2dd30:	4a17      	ldr	r2, [pc, #92]	; (2dd90 <MQTTPacket_encode+0x70>)
   2dd32:	4013      	ands	r3, r2
   2dd34:	d504      	bpl.n	2dd40 <MQTTPacket_encode+0x20>
   2dd36:	3b01      	subs	r3, #1
   2dd38:	2280      	movs	r2, #128	; 0x80
   2dd3a:	4252      	negs	r2, r2
   2dd3c:	4313      	orrs	r3, r2
   2dd3e:	3301      	adds	r3, #1
   2dd40:	001a      	movs	r2, r3
   2dd42:	230b      	movs	r3, #11
   2dd44:	18fb      	adds	r3, r7, r3
   2dd46:	701a      	strb	r2, [r3, #0]
   2dd48:	683b      	ldr	r3, [r7, #0]
   2dd4a:	2b00      	cmp	r3, #0
   2dd4c:	da00      	bge.n	2dd50 <MQTTPacket_encode+0x30>
   2dd4e:	337f      	adds	r3, #127	; 0x7f
   2dd50:	11db      	asrs	r3, r3, #7
   2dd52:	603b      	str	r3, [r7, #0]
   2dd54:	683b      	ldr	r3, [r7, #0]
   2dd56:	2b00      	cmp	r3, #0
   2dd58:	dd08      	ble.n	2dd6c <MQTTPacket_encode+0x4c>
   2dd5a:	230b      	movs	r3, #11
   2dd5c:	18fb      	adds	r3, r7, r3
   2dd5e:	220b      	movs	r2, #11
   2dd60:	18ba      	adds	r2, r7, r2
   2dd62:	7812      	ldrb	r2, [r2, #0]
   2dd64:	2180      	movs	r1, #128	; 0x80
   2dd66:	4249      	negs	r1, r1
   2dd68:	430a      	orrs	r2, r1
   2dd6a:	701a      	strb	r2, [r3, #0]
   2dd6c:	68fb      	ldr	r3, [r7, #12]
   2dd6e:	1c5a      	adds	r2, r3, #1
   2dd70:	60fa      	str	r2, [r7, #12]
   2dd72:	001a      	movs	r2, r3
   2dd74:	687b      	ldr	r3, [r7, #4]
   2dd76:	189b      	adds	r3, r3, r2
   2dd78:	220b      	movs	r2, #11
   2dd7a:	18ba      	adds	r2, r7, r2
   2dd7c:	7812      	ldrb	r2, [r2, #0]
   2dd7e:	701a      	strb	r2, [r3, #0]
   2dd80:	683b      	ldr	r3, [r7, #0]
   2dd82:	2b00      	cmp	r3, #0
   2dd84:	dcd3      	bgt.n	2dd2e <MQTTPacket_encode+0xe>
   2dd86:	68fb      	ldr	r3, [r7, #12]
   2dd88:	0018      	movs	r0, r3
   2dd8a:	46bd      	mov	sp, r7
   2dd8c:	b004      	add	sp, #16
   2dd8e:	bd80      	pop	{r7, pc}
   2dd90:	8000007f 	.word	0x8000007f

0002dd94 <MQTTPacket_decode>:
   2dd94:	b580      	push	{r7, lr}
   2dd96:	b086      	sub	sp, #24
   2dd98:	af00      	add	r7, sp, #0
   2dd9a:	6078      	str	r0, [r7, #4]
   2dd9c:	6039      	str	r1, [r7, #0]
   2dd9e:	2301      	movs	r3, #1
   2dda0:	617b      	str	r3, [r7, #20]
   2dda2:	2300      	movs	r3, #0
   2dda4:	613b      	str	r3, [r7, #16]
   2dda6:	683b      	ldr	r3, [r7, #0]
   2dda8:	2200      	movs	r2, #0
   2ddaa:	601a      	str	r2, [r3, #0]
   2ddac:	2301      	movs	r3, #1
   2ddae:	425b      	negs	r3, r3
   2ddb0:	60fb      	str	r3, [r7, #12]
   2ddb2:	693b      	ldr	r3, [r7, #16]
   2ddb4:	3301      	adds	r3, #1
   2ddb6:	613b      	str	r3, [r7, #16]
   2ddb8:	693b      	ldr	r3, [r7, #16]
   2ddba:	2b04      	cmp	r3, #4
   2ddbc:	dd03      	ble.n	2ddc6 <MQTTPacket_decode+0x32>
   2ddbe:	2301      	movs	r3, #1
   2ddc0:	425b      	negs	r3, r3
   2ddc2:	60fb      	str	r3, [r7, #12]
   2ddc4:	e022      	b.n	2de0c <MQTTPacket_decode+0x78>
   2ddc6:	230b      	movs	r3, #11
   2ddc8:	18fa      	adds	r2, r7, r3
   2ddca:	687b      	ldr	r3, [r7, #4]
   2ddcc:	2101      	movs	r1, #1
   2ddce:	0010      	movs	r0, r2
   2ddd0:	4798      	blx	r3
   2ddd2:	0003      	movs	r3, r0
   2ddd4:	60fb      	str	r3, [r7, #12]
   2ddd6:	68fb      	ldr	r3, [r7, #12]
   2ddd8:	2b01      	cmp	r3, #1
   2ddda:	d116      	bne.n	2de0a <MQTTPacket_decode+0x76>
   2dddc:	683b      	ldr	r3, [r7, #0]
   2ddde:	681a      	ldr	r2, [r3, #0]
   2dde0:	230b      	movs	r3, #11
   2dde2:	18fb      	adds	r3, r7, r3
   2dde4:	781b      	ldrb	r3, [r3, #0]
   2dde6:	0019      	movs	r1, r3
   2dde8:	237f      	movs	r3, #127	; 0x7f
   2ddea:	400b      	ands	r3, r1
   2ddec:	6979      	ldr	r1, [r7, #20]
   2ddee:	434b      	muls	r3, r1
   2ddf0:	18d2      	adds	r2, r2, r3
   2ddf2:	683b      	ldr	r3, [r7, #0]
   2ddf4:	601a      	str	r2, [r3, #0]
   2ddf6:	697b      	ldr	r3, [r7, #20]
   2ddf8:	01db      	lsls	r3, r3, #7
   2ddfa:	617b      	str	r3, [r7, #20]
   2ddfc:	230b      	movs	r3, #11
   2ddfe:	18fb      	adds	r3, r7, r3
   2de00:	781b      	ldrb	r3, [r3, #0]
   2de02:	b25b      	sxtb	r3, r3
   2de04:	2b00      	cmp	r3, #0
   2de06:	dbd1      	blt.n	2ddac <MQTTPacket_decode+0x18>
   2de08:	e000      	b.n	2de0c <MQTTPacket_decode+0x78>
   2de0a:	46c0      	nop			; (mov r8, r8)
   2de0c:	693b      	ldr	r3, [r7, #16]
   2de0e:	0018      	movs	r0, r3
   2de10:	46bd      	mov	sp, r7
   2de12:	b006      	add	sp, #24
   2de14:	bd80      	pop	{r7, pc}
	...

0002de18 <MQTTPacket_len>:
   2de18:	b580      	push	{r7, lr}
   2de1a:	b082      	sub	sp, #8
   2de1c:	af00      	add	r7, sp, #0
   2de1e:	6078      	str	r0, [r7, #4]
   2de20:	687b      	ldr	r3, [r7, #4]
   2de22:	3301      	adds	r3, #1
   2de24:	607b      	str	r3, [r7, #4]
   2de26:	687b      	ldr	r3, [r7, #4]
   2de28:	2b7f      	cmp	r3, #127	; 0x7f
   2de2a:	dc03      	bgt.n	2de34 <MQTTPacket_len+0x1c>
   2de2c:	687b      	ldr	r3, [r7, #4]
   2de2e:	3301      	adds	r3, #1
   2de30:	607b      	str	r3, [r7, #4]
   2de32:	e012      	b.n	2de5a <MQTTPacket_len+0x42>
   2de34:	687b      	ldr	r3, [r7, #4]
   2de36:	4a0b      	ldr	r2, [pc, #44]	; (2de64 <MQTTPacket_len+0x4c>)
   2de38:	4293      	cmp	r3, r2
   2de3a:	dc03      	bgt.n	2de44 <MQTTPacket_len+0x2c>
   2de3c:	687b      	ldr	r3, [r7, #4]
   2de3e:	3302      	adds	r3, #2
   2de40:	607b      	str	r3, [r7, #4]
   2de42:	e00a      	b.n	2de5a <MQTTPacket_len+0x42>
   2de44:	687b      	ldr	r3, [r7, #4]
   2de46:	4a08      	ldr	r2, [pc, #32]	; (2de68 <MQTTPacket_len+0x50>)
   2de48:	4293      	cmp	r3, r2
   2de4a:	dc03      	bgt.n	2de54 <MQTTPacket_len+0x3c>
   2de4c:	687b      	ldr	r3, [r7, #4]
   2de4e:	3303      	adds	r3, #3
   2de50:	607b      	str	r3, [r7, #4]
   2de52:	e002      	b.n	2de5a <MQTTPacket_len+0x42>
   2de54:	687b      	ldr	r3, [r7, #4]
   2de56:	3304      	adds	r3, #4
   2de58:	607b      	str	r3, [r7, #4]
   2de5a:	687b      	ldr	r3, [r7, #4]
   2de5c:	0018      	movs	r0, r3
   2de5e:	46bd      	mov	sp, r7
   2de60:	b002      	add	sp, #8
   2de62:	bd80      	pop	{r7, pc}
   2de64:	00003fff 	.word	0x00003fff
   2de68:	001ffffe 	.word	0x001ffffe

0002de6c <bufchar>:
   2de6c:	b580      	push	{r7, lr}
   2de6e:	b084      	sub	sp, #16
   2de70:	af00      	add	r7, sp, #0
   2de72:	6078      	str	r0, [r7, #4]
   2de74:	6039      	str	r1, [r7, #0]
   2de76:	2300      	movs	r3, #0
   2de78:	60fb      	str	r3, [r7, #12]
   2de7a:	e00a      	b.n	2de92 <bufchar+0x26>
   2de7c:	4b09      	ldr	r3, [pc, #36]	; (2dea4 <bufchar+0x38>)
   2de7e:	681b      	ldr	r3, [r3, #0]
   2de80:	1c59      	adds	r1, r3, #1
   2de82:	4a08      	ldr	r2, [pc, #32]	; (2dea4 <bufchar+0x38>)
   2de84:	6011      	str	r1, [r2, #0]
   2de86:	781a      	ldrb	r2, [r3, #0]
   2de88:	687b      	ldr	r3, [r7, #4]
   2de8a:	701a      	strb	r2, [r3, #0]
   2de8c:	68fb      	ldr	r3, [r7, #12]
   2de8e:	3301      	adds	r3, #1
   2de90:	60fb      	str	r3, [r7, #12]
   2de92:	68fa      	ldr	r2, [r7, #12]
   2de94:	683b      	ldr	r3, [r7, #0]
   2de96:	429a      	cmp	r2, r3
   2de98:	dbf0      	blt.n	2de7c <bufchar+0x10>
   2de9a:	683b      	ldr	r3, [r7, #0]
   2de9c:	0018      	movs	r0, r3
   2de9e:	46bd      	mov	sp, r7
   2dea0:	b004      	add	sp, #16
   2dea2:	bd80      	pop	{r7, pc}
   2dea4:	20004148 	.word	0x20004148

0002dea8 <MQTTPacket_decodeBuf>:
   2dea8:	b580      	push	{r7, lr}
   2deaa:	b082      	sub	sp, #8
   2deac:	af00      	add	r7, sp, #0
   2deae:	6078      	str	r0, [r7, #4]
   2deb0:	6039      	str	r1, [r7, #0]
   2deb2:	4b07      	ldr	r3, [pc, #28]	; (2ded0 <MQTTPacket_decodeBuf+0x28>)
   2deb4:	687a      	ldr	r2, [r7, #4]
   2deb6:	601a      	str	r2, [r3, #0]
   2deb8:	683a      	ldr	r2, [r7, #0]
   2deba:	4b06      	ldr	r3, [pc, #24]	; (2ded4 <MQTTPacket_decodeBuf+0x2c>)
   2debc:	0011      	movs	r1, r2
   2debe:	0018      	movs	r0, r3
   2dec0:	4b05      	ldr	r3, [pc, #20]	; (2ded8 <MQTTPacket_decodeBuf+0x30>)
   2dec2:	4798      	blx	r3
   2dec4:	0003      	movs	r3, r0
   2dec6:	0018      	movs	r0, r3
   2dec8:	46bd      	mov	sp, r7
   2deca:	b002      	add	sp, #8
   2decc:	bd80      	pop	{r7, pc}
   2dece:	46c0      	nop			; (mov r8, r8)
   2ded0:	20004148 	.word	0x20004148
   2ded4:	0002de6d 	.word	0x0002de6d
   2ded8:	0002dd95 	.word	0x0002dd95

0002dedc <readInt>:
   2dedc:	b580      	push	{r7, lr}
   2dede:	b084      	sub	sp, #16
   2dee0:	af00      	add	r7, sp, #0
   2dee2:	6078      	str	r0, [r7, #4]
   2dee4:	687b      	ldr	r3, [r7, #4]
   2dee6:	681b      	ldr	r3, [r3, #0]
   2dee8:	60fb      	str	r3, [r7, #12]
   2deea:	68fb      	ldr	r3, [r7, #12]
   2deec:	781b      	ldrb	r3, [r3, #0]
   2deee:	021b      	lsls	r3, r3, #8
   2def0:	68fa      	ldr	r2, [r7, #12]
   2def2:	3201      	adds	r2, #1
   2def4:	7812      	ldrb	r2, [r2, #0]
   2def6:	189b      	adds	r3, r3, r2
   2def8:	60bb      	str	r3, [r7, #8]
   2defa:	687b      	ldr	r3, [r7, #4]
   2defc:	681b      	ldr	r3, [r3, #0]
   2defe:	1c9a      	adds	r2, r3, #2
   2df00:	687b      	ldr	r3, [r7, #4]
   2df02:	601a      	str	r2, [r3, #0]
   2df04:	68bb      	ldr	r3, [r7, #8]
   2df06:	0018      	movs	r0, r3
   2df08:	46bd      	mov	sp, r7
   2df0a:	b004      	add	sp, #16
   2df0c:	bd80      	pop	{r7, pc}

0002df0e <readChar>:
   2df0e:	b580      	push	{r7, lr}
   2df10:	b084      	sub	sp, #16
   2df12:	af00      	add	r7, sp, #0
   2df14:	6078      	str	r0, [r7, #4]
   2df16:	687b      	ldr	r3, [r7, #4]
   2df18:	681a      	ldr	r2, [r3, #0]
   2df1a:	230f      	movs	r3, #15
   2df1c:	18fb      	adds	r3, r7, r3
   2df1e:	7812      	ldrb	r2, [r2, #0]
   2df20:	701a      	strb	r2, [r3, #0]
   2df22:	687b      	ldr	r3, [r7, #4]
   2df24:	681b      	ldr	r3, [r3, #0]
   2df26:	1c5a      	adds	r2, r3, #1
   2df28:	687b      	ldr	r3, [r7, #4]
   2df2a:	601a      	str	r2, [r3, #0]
   2df2c:	230f      	movs	r3, #15
   2df2e:	18fb      	adds	r3, r7, r3
   2df30:	781b      	ldrb	r3, [r3, #0]
   2df32:	0018      	movs	r0, r3
   2df34:	46bd      	mov	sp, r7
   2df36:	b004      	add	sp, #16
   2df38:	bd80      	pop	{r7, pc}

0002df3a <writeChar>:
   2df3a:	b580      	push	{r7, lr}
   2df3c:	b082      	sub	sp, #8
   2df3e:	af00      	add	r7, sp, #0
   2df40:	6078      	str	r0, [r7, #4]
   2df42:	000a      	movs	r2, r1
   2df44:	1cfb      	adds	r3, r7, #3
   2df46:	701a      	strb	r2, [r3, #0]
   2df48:	687b      	ldr	r3, [r7, #4]
   2df4a:	681b      	ldr	r3, [r3, #0]
   2df4c:	1cfa      	adds	r2, r7, #3
   2df4e:	7812      	ldrb	r2, [r2, #0]
   2df50:	701a      	strb	r2, [r3, #0]
   2df52:	687b      	ldr	r3, [r7, #4]
   2df54:	681b      	ldr	r3, [r3, #0]
   2df56:	1c5a      	adds	r2, r3, #1
   2df58:	687b      	ldr	r3, [r7, #4]
   2df5a:	601a      	str	r2, [r3, #0]
   2df5c:	46c0      	nop			; (mov r8, r8)
   2df5e:	46bd      	mov	sp, r7
   2df60:	b002      	add	sp, #8
   2df62:	bd80      	pop	{r7, pc}

0002df64 <writeInt>:
   2df64:	b580      	push	{r7, lr}
   2df66:	b082      	sub	sp, #8
   2df68:	af00      	add	r7, sp, #0
   2df6a:	6078      	str	r0, [r7, #4]
   2df6c:	6039      	str	r1, [r7, #0]
   2df6e:	687b      	ldr	r3, [r7, #4]
   2df70:	681a      	ldr	r2, [r3, #0]
   2df72:	683b      	ldr	r3, [r7, #0]
   2df74:	2b00      	cmp	r3, #0
   2df76:	da00      	bge.n	2df7a <writeInt+0x16>
   2df78:	33ff      	adds	r3, #255	; 0xff
   2df7a:	121b      	asrs	r3, r3, #8
   2df7c:	b2db      	uxtb	r3, r3
   2df7e:	7013      	strb	r3, [r2, #0]
   2df80:	687b      	ldr	r3, [r7, #4]
   2df82:	681b      	ldr	r3, [r3, #0]
   2df84:	1c5a      	adds	r2, r3, #1
   2df86:	687b      	ldr	r3, [r7, #4]
   2df88:	601a      	str	r2, [r3, #0]
   2df8a:	687b      	ldr	r3, [r7, #4]
   2df8c:	681a      	ldr	r2, [r3, #0]
   2df8e:	683b      	ldr	r3, [r7, #0]
   2df90:	4908      	ldr	r1, [pc, #32]	; (2dfb4 <writeInt+0x50>)
   2df92:	400b      	ands	r3, r1
   2df94:	d503      	bpl.n	2df9e <writeInt+0x3a>
   2df96:	3b01      	subs	r3, #1
   2df98:	4907      	ldr	r1, [pc, #28]	; (2dfb8 <writeInt+0x54>)
   2df9a:	430b      	orrs	r3, r1
   2df9c:	3301      	adds	r3, #1
   2df9e:	b2db      	uxtb	r3, r3
   2dfa0:	7013      	strb	r3, [r2, #0]
   2dfa2:	687b      	ldr	r3, [r7, #4]
   2dfa4:	681b      	ldr	r3, [r3, #0]
   2dfa6:	1c5a      	adds	r2, r3, #1
   2dfa8:	687b      	ldr	r3, [r7, #4]
   2dfaa:	601a      	str	r2, [r3, #0]
   2dfac:	46c0      	nop			; (mov r8, r8)
   2dfae:	46bd      	mov	sp, r7
   2dfb0:	b002      	add	sp, #8
   2dfb2:	bd80      	pop	{r7, pc}
   2dfb4:	800000ff 	.word	0x800000ff
   2dfb8:	ffffff00 	.word	0xffffff00

0002dfbc <writeCString>:
   2dfbc:	b580      	push	{r7, lr}
   2dfbe:	b084      	sub	sp, #16
   2dfc0:	af00      	add	r7, sp, #0
   2dfc2:	6078      	str	r0, [r7, #4]
   2dfc4:	6039      	str	r1, [r7, #0]
   2dfc6:	683b      	ldr	r3, [r7, #0]
   2dfc8:	0018      	movs	r0, r3
   2dfca:	4b0d      	ldr	r3, [pc, #52]	; (2e000 <writeCString+0x44>)
   2dfcc:	4798      	blx	r3
   2dfce:	0003      	movs	r3, r0
   2dfd0:	60fb      	str	r3, [r7, #12]
   2dfd2:	68fa      	ldr	r2, [r7, #12]
   2dfd4:	687b      	ldr	r3, [r7, #4]
   2dfd6:	0011      	movs	r1, r2
   2dfd8:	0018      	movs	r0, r3
   2dfda:	4b0a      	ldr	r3, [pc, #40]	; (2e004 <writeCString+0x48>)
   2dfdc:	4798      	blx	r3
   2dfde:	687b      	ldr	r3, [r7, #4]
   2dfe0:	681b      	ldr	r3, [r3, #0]
   2dfe2:	68fa      	ldr	r2, [r7, #12]
   2dfe4:	6839      	ldr	r1, [r7, #0]
   2dfe6:	0018      	movs	r0, r3
   2dfe8:	4b07      	ldr	r3, [pc, #28]	; (2e008 <writeCString+0x4c>)
   2dfea:	4798      	blx	r3
   2dfec:	687b      	ldr	r3, [r7, #4]
   2dfee:	681a      	ldr	r2, [r3, #0]
   2dff0:	68fb      	ldr	r3, [r7, #12]
   2dff2:	18d2      	adds	r2, r2, r3
   2dff4:	687b      	ldr	r3, [r7, #4]
   2dff6:	601a      	str	r2, [r3, #0]
   2dff8:	46c0      	nop			; (mov r8, r8)
   2dffa:	46bd      	mov	sp, r7
   2dffc:	b004      	add	sp, #16
   2dffe:	bd80      	pop	{r7, pc}
   2e000:	000325bb 	.word	0x000325bb
   2e004:	0002df65 	.word	0x0002df65
   2e008:	000321cd 	.word	0x000321cd

0002e00c <writeMQTTString>:
   2e00c:	b580      	push	{r7, lr}
   2e00e:	b084      	sub	sp, #16
   2e010:	af00      	add	r7, sp, #0
   2e012:	60f8      	str	r0, [r7, #12]
   2e014:	0038      	movs	r0, r7
   2e016:	6001      	str	r1, [r0, #0]
   2e018:	6042      	str	r2, [r0, #4]
   2e01a:	6083      	str	r3, [r0, #8]
   2e01c:	003b      	movs	r3, r7
   2e01e:	685b      	ldr	r3, [r3, #4]
   2e020:	2b00      	cmp	r3, #0
   2e022:	dd17      	ble.n	2e054 <writeMQTTString+0x48>
   2e024:	003b      	movs	r3, r7
   2e026:	685a      	ldr	r2, [r3, #4]
   2e028:	68fb      	ldr	r3, [r7, #12]
   2e02a:	0011      	movs	r1, r2
   2e02c:	0018      	movs	r0, r3
   2e02e:	4b14      	ldr	r3, [pc, #80]	; (2e080 <writeMQTTString+0x74>)
   2e030:	4798      	blx	r3
   2e032:	68fb      	ldr	r3, [r7, #12]
   2e034:	6818      	ldr	r0, [r3, #0]
   2e036:	003b      	movs	r3, r7
   2e038:	6899      	ldr	r1, [r3, #8]
   2e03a:	003b      	movs	r3, r7
   2e03c:	685b      	ldr	r3, [r3, #4]
   2e03e:	001a      	movs	r2, r3
   2e040:	4b10      	ldr	r3, [pc, #64]	; (2e084 <writeMQTTString+0x78>)
   2e042:	4798      	blx	r3
   2e044:	68fb      	ldr	r3, [r7, #12]
   2e046:	681a      	ldr	r2, [r3, #0]
   2e048:	003b      	movs	r3, r7
   2e04a:	685b      	ldr	r3, [r3, #4]
   2e04c:	18d2      	adds	r2, r2, r3
   2e04e:	68fb      	ldr	r3, [r7, #12]
   2e050:	601a      	str	r2, [r3, #0]
   2e052:	e010      	b.n	2e076 <writeMQTTString+0x6a>
   2e054:	003b      	movs	r3, r7
   2e056:	681b      	ldr	r3, [r3, #0]
   2e058:	2b00      	cmp	r3, #0
   2e05a:	d007      	beq.n	2e06c <writeMQTTString+0x60>
   2e05c:	003b      	movs	r3, r7
   2e05e:	681a      	ldr	r2, [r3, #0]
   2e060:	68fb      	ldr	r3, [r7, #12]
   2e062:	0011      	movs	r1, r2
   2e064:	0018      	movs	r0, r3
   2e066:	4b08      	ldr	r3, [pc, #32]	; (2e088 <writeMQTTString+0x7c>)
   2e068:	4798      	blx	r3
   2e06a:	e004      	b.n	2e076 <writeMQTTString+0x6a>
   2e06c:	68fb      	ldr	r3, [r7, #12]
   2e06e:	2100      	movs	r1, #0
   2e070:	0018      	movs	r0, r3
   2e072:	4b03      	ldr	r3, [pc, #12]	; (2e080 <writeMQTTString+0x74>)
   2e074:	4798      	blx	r3
   2e076:	46c0      	nop			; (mov r8, r8)
   2e078:	46bd      	mov	sp, r7
   2e07a:	b004      	add	sp, #16
   2e07c:	bd80      	pop	{r7, pc}
   2e07e:	46c0      	nop			; (mov r8, r8)
   2e080:	0002df65 	.word	0x0002df65
   2e084:	000321cd 	.word	0x000321cd
   2e088:	0002dfbd 	.word	0x0002dfbd

0002e08c <readMQTTLenString>:
   2e08c:	b580      	push	{r7, lr}
   2e08e:	b086      	sub	sp, #24
   2e090:	af00      	add	r7, sp, #0
   2e092:	60f8      	str	r0, [r7, #12]
   2e094:	60b9      	str	r1, [r7, #8]
   2e096:	607a      	str	r2, [r7, #4]
   2e098:	2300      	movs	r3, #0
   2e09a:	617b      	str	r3, [r7, #20]
   2e09c:	687a      	ldr	r2, [r7, #4]
   2e09e:	68bb      	ldr	r3, [r7, #8]
   2e0a0:	681b      	ldr	r3, [r3, #0]
   2e0a2:	1ad3      	subs	r3, r2, r3
   2e0a4:	2b01      	cmp	r3, #1
   2e0a6:	dd1b      	ble.n	2e0e0 <readMQTTLenString+0x54>
   2e0a8:	68bb      	ldr	r3, [r7, #8]
   2e0aa:	0018      	movs	r0, r3
   2e0ac:	4b10      	ldr	r3, [pc, #64]	; (2e0f0 <readMQTTLenString+0x64>)
   2e0ae:	4798      	blx	r3
   2e0b0:	0002      	movs	r2, r0
   2e0b2:	68fb      	ldr	r3, [r7, #12]
   2e0b4:	605a      	str	r2, [r3, #4]
   2e0b6:	68bb      	ldr	r3, [r7, #8]
   2e0b8:	681a      	ldr	r2, [r3, #0]
   2e0ba:	68fb      	ldr	r3, [r7, #12]
   2e0bc:	685b      	ldr	r3, [r3, #4]
   2e0be:	18d2      	adds	r2, r2, r3
   2e0c0:	687b      	ldr	r3, [r7, #4]
   2e0c2:	429a      	cmp	r2, r3
   2e0c4:	d80c      	bhi.n	2e0e0 <readMQTTLenString+0x54>
   2e0c6:	68bb      	ldr	r3, [r7, #8]
   2e0c8:	681a      	ldr	r2, [r3, #0]
   2e0ca:	68fb      	ldr	r3, [r7, #12]
   2e0cc:	609a      	str	r2, [r3, #8]
   2e0ce:	68bb      	ldr	r3, [r7, #8]
   2e0d0:	681a      	ldr	r2, [r3, #0]
   2e0d2:	68fb      	ldr	r3, [r7, #12]
   2e0d4:	685b      	ldr	r3, [r3, #4]
   2e0d6:	18d2      	adds	r2, r2, r3
   2e0d8:	68bb      	ldr	r3, [r7, #8]
   2e0da:	601a      	str	r2, [r3, #0]
   2e0dc:	2301      	movs	r3, #1
   2e0de:	617b      	str	r3, [r7, #20]
   2e0e0:	68fb      	ldr	r3, [r7, #12]
   2e0e2:	2200      	movs	r2, #0
   2e0e4:	601a      	str	r2, [r3, #0]
   2e0e6:	697b      	ldr	r3, [r7, #20]
   2e0e8:	0018      	movs	r0, r3
   2e0ea:	46bd      	mov	sp, r7
   2e0ec:	b006      	add	sp, #24
   2e0ee:	bd80      	pop	{r7, pc}
   2e0f0:	0002dedd 	.word	0x0002dedd

0002e0f4 <MQTTstrlen>:
   2e0f4:	b580      	push	{r7, lr}
   2e0f6:	b086      	sub	sp, #24
   2e0f8:	af00      	add	r7, sp, #0
   2e0fa:	1d3b      	adds	r3, r7, #4
   2e0fc:	6018      	str	r0, [r3, #0]
   2e0fe:	6059      	str	r1, [r3, #4]
   2e100:	609a      	str	r2, [r3, #8]
   2e102:	2300      	movs	r3, #0
   2e104:	617b      	str	r3, [r7, #20]
   2e106:	1d3b      	adds	r3, r7, #4
   2e108:	681b      	ldr	r3, [r3, #0]
   2e10a:	2b00      	cmp	r3, #0
   2e10c:	d007      	beq.n	2e11e <MQTTstrlen+0x2a>
   2e10e:	1d3b      	adds	r3, r7, #4
   2e110:	681b      	ldr	r3, [r3, #0]
   2e112:	0018      	movs	r0, r3
   2e114:	4b06      	ldr	r3, [pc, #24]	; (2e130 <MQTTstrlen+0x3c>)
   2e116:	4798      	blx	r3
   2e118:	0003      	movs	r3, r0
   2e11a:	617b      	str	r3, [r7, #20]
   2e11c:	e002      	b.n	2e124 <MQTTstrlen+0x30>
   2e11e:	1d3b      	adds	r3, r7, #4
   2e120:	685b      	ldr	r3, [r3, #4]
   2e122:	617b      	str	r3, [r7, #20]
   2e124:	697b      	ldr	r3, [r7, #20]
   2e126:	0018      	movs	r0, r3
   2e128:	46bd      	mov	sp, r7
   2e12a:	b006      	add	sp, #24
   2e12c:	bd80      	pop	{r7, pc}
   2e12e:	46c0      	nop			; (mov r8, r8)
   2e130:	000325bb 	.word	0x000325bb

0002e134 <MQTTPacket_equals>:
   2e134:	b580      	push	{r7, lr}
   2e136:	b086      	sub	sp, #24
   2e138:	af00      	add	r7, sp, #0
   2e13a:	6078      	str	r0, [r7, #4]
   2e13c:	6039      	str	r1, [r7, #0]
   2e13e:	2300      	movs	r3, #0
   2e140:	617b      	str	r3, [r7, #20]
   2e142:	2300      	movs	r3, #0
   2e144:	60fb      	str	r3, [r7, #12]
   2e146:	687b      	ldr	r3, [r7, #4]
   2e148:	681b      	ldr	r3, [r3, #0]
   2e14a:	2b00      	cmp	r3, #0
   2e14c:	d00a      	beq.n	2e164 <MQTTPacket_equals+0x30>
   2e14e:	687b      	ldr	r3, [r7, #4]
   2e150:	681b      	ldr	r3, [r3, #0]
   2e152:	613b      	str	r3, [r7, #16]
   2e154:	687b      	ldr	r3, [r7, #4]
   2e156:	681b      	ldr	r3, [r3, #0]
   2e158:	0018      	movs	r0, r3
   2e15a:	4b12      	ldr	r3, [pc, #72]	; (2e1a4 <MQTTPacket_equals+0x70>)
   2e15c:	4798      	blx	r3
   2e15e:	0003      	movs	r3, r0
   2e160:	617b      	str	r3, [r7, #20]
   2e162:	e005      	b.n	2e170 <MQTTPacket_equals+0x3c>
   2e164:	687b      	ldr	r3, [r7, #4]
   2e166:	689b      	ldr	r3, [r3, #8]
   2e168:	613b      	str	r3, [r7, #16]
   2e16a:	687b      	ldr	r3, [r7, #4]
   2e16c:	685b      	ldr	r3, [r3, #4]
   2e16e:	617b      	str	r3, [r7, #20]
   2e170:	683b      	ldr	r3, [r7, #0]
   2e172:	0018      	movs	r0, r3
   2e174:	4b0b      	ldr	r3, [pc, #44]	; (2e1a4 <MQTTPacket_equals+0x70>)
   2e176:	4798      	blx	r3
   2e178:	0003      	movs	r3, r0
   2e17a:	60fb      	str	r3, [r7, #12]
   2e17c:	697a      	ldr	r2, [r7, #20]
   2e17e:	68fb      	ldr	r3, [r7, #12]
   2e180:	429a      	cmp	r2, r3
   2e182:	d109      	bne.n	2e198 <MQTTPacket_equals+0x64>
   2e184:	697a      	ldr	r2, [r7, #20]
   2e186:	6839      	ldr	r1, [r7, #0]
   2e188:	693b      	ldr	r3, [r7, #16]
   2e18a:	0018      	movs	r0, r3
   2e18c:	4b06      	ldr	r3, [pc, #24]	; (2e1a8 <MQTTPacket_equals+0x74>)
   2e18e:	4798      	blx	r3
   2e190:	1e03      	subs	r3, r0, #0
   2e192:	d101      	bne.n	2e198 <MQTTPacket_equals+0x64>
   2e194:	2301      	movs	r3, #1
   2e196:	e000      	b.n	2e19a <MQTTPacket_equals+0x66>
   2e198:	2300      	movs	r3, #0
   2e19a:	0018      	movs	r0, r3
   2e19c:	46bd      	mov	sp, r7
   2e19e:	b006      	add	sp, #24
   2e1a0:	bd80      	pop	{r7, pc}
   2e1a2:	46c0      	nop			; (mov r8, r8)
   2e1a4:	000325bb 	.word	0x000325bb
   2e1a8:	000325c9 	.word	0x000325c9

0002e1ac <MQTTSerialize_publishLength>:
   2e1ac:	b580      	push	{r7, lr}
   2e1ae:	b086      	sub	sp, #24
   2e1b0:	af00      	add	r7, sp, #0
   2e1b2:	60f8      	str	r0, [r7, #12]
   2e1b4:	0038      	movs	r0, r7
   2e1b6:	6001      	str	r1, [r0, #0]
   2e1b8:	6042      	str	r2, [r0, #4]
   2e1ba:	6083      	str	r3, [r0, #8]
   2e1bc:	2300      	movs	r3, #0
   2e1be:	617b      	str	r3, [r7, #20]
   2e1c0:	003b      	movs	r3, r7
   2e1c2:	6818      	ldr	r0, [r3, #0]
   2e1c4:	6859      	ldr	r1, [r3, #4]
   2e1c6:	689a      	ldr	r2, [r3, #8]
   2e1c8:	4b09      	ldr	r3, [pc, #36]	; (2e1f0 <MQTTSerialize_publishLength+0x44>)
   2e1ca:	4798      	blx	r3
   2e1cc:	0003      	movs	r3, r0
   2e1ce:	1c9a      	adds	r2, r3, #2
   2e1d0:	6a3b      	ldr	r3, [r7, #32]
   2e1d2:	18d3      	adds	r3, r2, r3
   2e1d4:	697a      	ldr	r2, [r7, #20]
   2e1d6:	18d3      	adds	r3, r2, r3
   2e1d8:	617b      	str	r3, [r7, #20]
   2e1da:	68fb      	ldr	r3, [r7, #12]
   2e1dc:	2b00      	cmp	r3, #0
   2e1de:	dd02      	ble.n	2e1e6 <MQTTSerialize_publishLength+0x3a>
   2e1e0:	697b      	ldr	r3, [r7, #20]
   2e1e2:	3302      	adds	r3, #2
   2e1e4:	617b      	str	r3, [r7, #20]
   2e1e6:	697b      	ldr	r3, [r7, #20]
   2e1e8:	0018      	movs	r0, r3
   2e1ea:	46bd      	mov	sp, r7
   2e1ec:	b006      	add	sp, #24
   2e1ee:	bd80      	pop	{r7, pc}
   2e1f0:	0002e0f5 	.word	0x0002e0f5

0002e1f4 <MQTTSerialize_publish>:
   2e1f4:	b590      	push	{r4, r7, lr}
   2e1f6:	b08b      	sub	sp, #44	; 0x2c
   2e1f8:	af02      	add	r7, sp, #8
   2e1fa:	60f8      	str	r0, [r7, #12]
   2e1fc:	60b9      	str	r1, [r7, #8]
   2e1fe:	603b      	str	r3, [r7, #0]
   2e200:	1dfb      	adds	r3, r7, #7
   2e202:	701a      	strb	r2, [r3, #0]
   2e204:	68fb      	ldr	r3, [r7, #12]
   2e206:	617b      	str	r3, [r7, #20]
   2e208:	2300      	movs	r3, #0
   2e20a:	613b      	str	r3, [r7, #16]
   2e20c:	2300      	movs	r3, #0
   2e20e:	61bb      	str	r3, [r7, #24]
   2e210:	2300      	movs	r3, #0
   2e212:	61fb      	str	r3, [r7, #28]
   2e214:	2308      	movs	r3, #8
   2e216:	2230      	movs	r2, #48	; 0x30
   2e218:	4694      	mov	ip, r2
   2e21a:	44bc      	add	ip, r7
   2e21c:	4463      	add	r3, ip
   2e21e:	6838      	ldr	r0, [r7, #0]
   2e220:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2e222:	9200      	str	r2, [sp, #0]
   2e224:	6819      	ldr	r1, [r3, #0]
   2e226:	685a      	ldr	r2, [r3, #4]
   2e228:	689b      	ldr	r3, [r3, #8]
   2e22a:	4c46      	ldr	r4, [pc, #280]	; (2e344 <MQTTSerialize_publish+0x150>)
   2e22c:	47a0      	blx	r4
   2e22e:	0003      	movs	r3, r0
   2e230:	61bb      	str	r3, [r7, #24]
   2e232:	69bb      	ldr	r3, [r7, #24]
   2e234:	0018      	movs	r0, r3
   2e236:	4b44      	ldr	r3, [pc, #272]	; (2e348 <MQTTSerialize_publish+0x154>)
   2e238:	4798      	blx	r3
   2e23a:	0002      	movs	r2, r0
   2e23c:	68bb      	ldr	r3, [r7, #8]
   2e23e:	429a      	cmp	r2, r3
   2e240:	dd03      	ble.n	2e24a <MQTTSerialize_publish+0x56>
   2e242:	2302      	movs	r3, #2
   2e244:	425b      	negs	r3, r3
   2e246:	61fb      	str	r3, [r7, #28]
   2e248:	e077      	b.n	2e33a <MQTTSerialize_publish+0x146>
   2e24a:	2310      	movs	r3, #16
   2e24c:	18fb      	adds	r3, r7, r3
   2e24e:	781a      	ldrb	r2, [r3, #0]
   2e250:	210f      	movs	r1, #15
   2e252:	400a      	ands	r2, r1
   2e254:	1c11      	adds	r1, r2, #0
   2e256:	2230      	movs	r2, #48	; 0x30
   2e258:	430a      	orrs	r2, r1
   2e25a:	701a      	strb	r2, [r3, #0]
   2e25c:	1dfb      	adds	r3, r7, #7
   2e25e:	781b      	ldrb	r3, [r3, #0]
   2e260:	2201      	movs	r2, #1
   2e262:	4013      	ands	r3, r2
   2e264:	b2da      	uxtb	r2, r3
   2e266:	2310      	movs	r3, #16
   2e268:	18fb      	adds	r3, r7, r3
   2e26a:	2101      	movs	r1, #1
   2e26c:	400a      	ands	r2, r1
   2e26e:	00d0      	lsls	r0, r2, #3
   2e270:	781a      	ldrb	r2, [r3, #0]
   2e272:	2108      	movs	r1, #8
   2e274:	438a      	bics	r2, r1
   2e276:	1c11      	adds	r1, r2, #0
   2e278:	1c02      	adds	r2, r0, #0
   2e27a:	430a      	orrs	r2, r1
   2e27c:	701a      	strb	r2, [r3, #0]
   2e27e:	683b      	ldr	r3, [r7, #0]
   2e280:	b2db      	uxtb	r3, r3
   2e282:	1c1a      	adds	r2, r3, #0
   2e284:	2303      	movs	r3, #3
   2e286:	4013      	ands	r3, r2
   2e288:	b2da      	uxtb	r2, r3
   2e28a:	2310      	movs	r3, #16
   2e28c:	18fb      	adds	r3, r7, r3
   2e28e:	2103      	movs	r1, #3
   2e290:	400a      	ands	r2, r1
   2e292:	1890      	adds	r0, r2, r2
   2e294:	781a      	ldrb	r2, [r3, #0]
   2e296:	2106      	movs	r1, #6
   2e298:	438a      	bics	r2, r1
   2e29a:	1c11      	adds	r1, r2, #0
   2e29c:	1c02      	adds	r2, r0, #0
   2e29e:	430a      	orrs	r2, r1
   2e2a0:	701a      	strb	r2, [r3, #0]
   2e2a2:	2330      	movs	r3, #48	; 0x30
   2e2a4:	18fb      	adds	r3, r7, r3
   2e2a6:	781b      	ldrb	r3, [r3, #0]
   2e2a8:	2201      	movs	r2, #1
   2e2aa:	4013      	ands	r3, r2
   2e2ac:	b2da      	uxtb	r2, r3
   2e2ae:	2310      	movs	r3, #16
   2e2b0:	18fb      	adds	r3, r7, r3
   2e2b2:	2101      	movs	r1, #1
   2e2b4:	400a      	ands	r2, r1
   2e2b6:	0010      	movs	r0, r2
   2e2b8:	781a      	ldrb	r2, [r3, #0]
   2e2ba:	2101      	movs	r1, #1
   2e2bc:	438a      	bics	r2, r1
   2e2be:	1c11      	adds	r1, r2, #0
   2e2c0:	1c02      	adds	r2, r0, #0
   2e2c2:	430a      	orrs	r2, r1
   2e2c4:	701a      	strb	r2, [r3, #0]
   2e2c6:	2310      	movs	r3, #16
   2e2c8:	18fb      	adds	r3, r7, r3
   2e2ca:	781a      	ldrb	r2, [r3, #0]
   2e2cc:	2314      	movs	r3, #20
   2e2ce:	18fb      	adds	r3, r7, r3
   2e2d0:	0011      	movs	r1, r2
   2e2d2:	0018      	movs	r0, r3
   2e2d4:	4b1d      	ldr	r3, [pc, #116]	; (2e34c <MQTTSerialize_publish+0x158>)
   2e2d6:	4798      	blx	r3
   2e2d8:	697b      	ldr	r3, [r7, #20]
   2e2da:	69ba      	ldr	r2, [r7, #24]
   2e2dc:	0011      	movs	r1, r2
   2e2de:	0018      	movs	r0, r3
   2e2e0:	4b1b      	ldr	r3, [pc, #108]	; (2e350 <MQTTSerialize_publish+0x15c>)
   2e2e2:	4798      	blx	r3
   2e2e4:	0002      	movs	r2, r0
   2e2e6:	697b      	ldr	r3, [r7, #20]
   2e2e8:	189b      	adds	r3, r3, r2
   2e2ea:	617b      	str	r3, [r7, #20]
   2e2ec:	2308      	movs	r3, #8
   2e2ee:	2230      	movs	r2, #48	; 0x30
   2e2f0:	4694      	mov	ip, r2
   2e2f2:	44bc      	add	ip, r7
   2e2f4:	4463      	add	r3, ip
   2e2f6:	2214      	movs	r2, #20
   2e2f8:	18b8      	adds	r0, r7, r2
   2e2fa:	6819      	ldr	r1, [r3, #0]
   2e2fc:	685a      	ldr	r2, [r3, #4]
   2e2fe:	689b      	ldr	r3, [r3, #8]
   2e300:	4c14      	ldr	r4, [pc, #80]	; (2e354 <MQTTSerialize_publish+0x160>)
   2e302:	47a0      	blx	r4
   2e304:	683b      	ldr	r3, [r7, #0]
   2e306:	2b00      	cmp	r3, #0
   2e308:	dd08      	ble.n	2e31c <MQTTSerialize_publish+0x128>
   2e30a:	2334      	movs	r3, #52	; 0x34
   2e30c:	18fb      	adds	r3, r7, r3
   2e30e:	881a      	ldrh	r2, [r3, #0]
   2e310:	2314      	movs	r3, #20
   2e312:	18fb      	adds	r3, r7, r3
   2e314:	0011      	movs	r1, r2
   2e316:	0018      	movs	r0, r3
   2e318:	4b0f      	ldr	r3, [pc, #60]	; (2e358 <MQTTSerialize_publish+0x164>)
   2e31a:	4798      	blx	r3
   2e31c:	697b      	ldr	r3, [r7, #20]
   2e31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2e320:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2e322:	0018      	movs	r0, r3
   2e324:	4b0d      	ldr	r3, [pc, #52]	; (2e35c <MQTTSerialize_publish+0x168>)
   2e326:	4798      	blx	r3
   2e328:	697a      	ldr	r2, [r7, #20]
   2e32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2e32c:	18d3      	adds	r3, r2, r3
   2e32e:	617b      	str	r3, [r7, #20]
   2e330:	697b      	ldr	r3, [r7, #20]
   2e332:	001a      	movs	r2, r3
   2e334:	68fb      	ldr	r3, [r7, #12]
   2e336:	1ad3      	subs	r3, r2, r3
   2e338:	61fb      	str	r3, [r7, #28]
   2e33a:	69fb      	ldr	r3, [r7, #28]
   2e33c:	0018      	movs	r0, r3
   2e33e:	46bd      	mov	sp, r7
   2e340:	b009      	add	sp, #36	; 0x24
   2e342:	bd90      	pop	{r4, r7, pc}
   2e344:	0002e1ad 	.word	0x0002e1ad
   2e348:	0002de19 	.word	0x0002de19
   2e34c:	0002df3b 	.word	0x0002df3b
   2e350:	0002dd21 	.word	0x0002dd21
   2e354:	0002e00d 	.word	0x0002e00d
   2e358:	0002df65 	.word	0x0002df65
   2e35c:	000321cd 	.word	0x000321cd

0002e360 <MQTTSerialize_ack>:
   2e360:	b580      	push	{r7, lr}
   2e362:	b088      	sub	sp, #32
   2e364:	af00      	add	r7, sp, #0
   2e366:	60f8      	str	r0, [r7, #12]
   2e368:	60b9      	str	r1, [r7, #8]
   2e36a:	0019      	movs	r1, r3
   2e36c:	1dfb      	adds	r3, r7, #7
   2e36e:	701a      	strb	r2, [r3, #0]
   2e370:	1dbb      	adds	r3, r7, #6
   2e372:	1c0a      	adds	r2, r1, #0
   2e374:	701a      	strb	r2, [r3, #0]
   2e376:	2300      	movs	r3, #0
   2e378:	61bb      	str	r3, [r7, #24]
   2e37a:	2300      	movs	r3, #0
   2e37c:	61fb      	str	r3, [r7, #28]
   2e37e:	68fb      	ldr	r3, [r7, #12]
   2e380:	617b      	str	r3, [r7, #20]
   2e382:	68bb      	ldr	r3, [r7, #8]
   2e384:	2b03      	cmp	r3, #3
   2e386:	dc03      	bgt.n	2e390 <MQTTSerialize_ack+0x30>
   2e388:	2302      	movs	r3, #2
   2e38a:	425b      	negs	r3, r3
   2e38c:	61fb      	str	r3, [r7, #28]
   2e38e:	e055      	b.n	2e43c <MQTTSerialize_ack+0xdc>
   2e390:	1dfb      	adds	r3, r7, #7
   2e392:	781b      	ldrb	r3, [r3, #0]
   2e394:	220f      	movs	r2, #15
   2e396:	4013      	ands	r3, r2
   2e398:	b2da      	uxtb	r2, r3
   2e39a:	2318      	movs	r3, #24
   2e39c:	18fb      	adds	r3, r7, r3
   2e39e:	0110      	lsls	r0, r2, #4
   2e3a0:	781a      	ldrb	r2, [r3, #0]
   2e3a2:	210f      	movs	r1, #15
   2e3a4:	400a      	ands	r2, r1
   2e3a6:	1c11      	adds	r1, r2, #0
   2e3a8:	1c02      	adds	r2, r0, #0
   2e3aa:	430a      	orrs	r2, r1
   2e3ac:	701a      	strb	r2, [r3, #0]
   2e3ae:	1dbb      	adds	r3, r7, #6
   2e3b0:	781b      	ldrb	r3, [r3, #0]
   2e3b2:	2201      	movs	r2, #1
   2e3b4:	4013      	ands	r3, r2
   2e3b6:	b2da      	uxtb	r2, r3
   2e3b8:	2318      	movs	r3, #24
   2e3ba:	18fb      	adds	r3, r7, r3
   2e3bc:	2101      	movs	r1, #1
   2e3be:	400a      	ands	r2, r1
   2e3c0:	00d0      	lsls	r0, r2, #3
   2e3c2:	781a      	ldrb	r2, [r3, #0]
   2e3c4:	2108      	movs	r1, #8
   2e3c6:	438a      	bics	r2, r1
   2e3c8:	1c11      	adds	r1, r2, #0
   2e3ca:	1c02      	adds	r2, r0, #0
   2e3cc:	430a      	orrs	r2, r1
   2e3ce:	701a      	strb	r2, [r3, #0]
   2e3d0:	1dfb      	adds	r3, r7, #7
   2e3d2:	781b      	ldrb	r3, [r3, #0]
   2e3d4:	3b06      	subs	r3, #6
   2e3d6:	425a      	negs	r2, r3
   2e3d8:	4153      	adcs	r3, r2
   2e3da:	b2db      	uxtb	r3, r3
   2e3dc:	1c1a      	adds	r2, r3, #0
   2e3de:	2303      	movs	r3, #3
   2e3e0:	4013      	ands	r3, r2
   2e3e2:	b2da      	uxtb	r2, r3
   2e3e4:	2318      	movs	r3, #24
   2e3e6:	18fb      	adds	r3, r7, r3
   2e3e8:	2103      	movs	r1, #3
   2e3ea:	400a      	ands	r2, r1
   2e3ec:	1890      	adds	r0, r2, r2
   2e3ee:	781a      	ldrb	r2, [r3, #0]
   2e3f0:	2106      	movs	r1, #6
   2e3f2:	438a      	bics	r2, r1
   2e3f4:	1c11      	adds	r1, r2, #0
   2e3f6:	1c02      	adds	r2, r0, #0
   2e3f8:	430a      	orrs	r2, r1
   2e3fa:	701a      	strb	r2, [r3, #0]
   2e3fc:	2318      	movs	r3, #24
   2e3fe:	18fb      	adds	r3, r7, r3
   2e400:	781a      	ldrb	r2, [r3, #0]
   2e402:	2314      	movs	r3, #20
   2e404:	18fb      	adds	r3, r7, r3
   2e406:	0011      	movs	r1, r2
   2e408:	0018      	movs	r0, r3
   2e40a:	4b0f      	ldr	r3, [pc, #60]	; (2e448 <MQTTSerialize_ack+0xe8>)
   2e40c:	4798      	blx	r3
   2e40e:	697b      	ldr	r3, [r7, #20]
   2e410:	2102      	movs	r1, #2
   2e412:	0018      	movs	r0, r3
   2e414:	4b0d      	ldr	r3, [pc, #52]	; (2e44c <MQTTSerialize_ack+0xec>)
   2e416:	4798      	blx	r3
   2e418:	0002      	movs	r2, r0
   2e41a:	697b      	ldr	r3, [r7, #20]
   2e41c:	189b      	adds	r3, r3, r2
   2e41e:	617b      	str	r3, [r7, #20]
   2e420:	2328      	movs	r3, #40	; 0x28
   2e422:	18fb      	adds	r3, r7, r3
   2e424:	881a      	ldrh	r2, [r3, #0]
   2e426:	2314      	movs	r3, #20
   2e428:	18fb      	adds	r3, r7, r3
   2e42a:	0011      	movs	r1, r2
   2e42c:	0018      	movs	r0, r3
   2e42e:	4b08      	ldr	r3, [pc, #32]	; (2e450 <MQTTSerialize_ack+0xf0>)
   2e430:	4798      	blx	r3
   2e432:	697b      	ldr	r3, [r7, #20]
   2e434:	001a      	movs	r2, r3
   2e436:	68fb      	ldr	r3, [r7, #12]
   2e438:	1ad3      	subs	r3, r2, r3
   2e43a:	61fb      	str	r3, [r7, #28]
   2e43c:	69fb      	ldr	r3, [r7, #28]
   2e43e:	0018      	movs	r0, r3
   2e440:	46bd      	mov	sp, r7
   2e442:	b008      	add	sp, #32
   2e444:	bd80      	pop	{r7, pc}
   2e446:	46c0      	nop			; (mov r8, r8)
   2e448:	0002df3b 	.word	0x0002df3b
   2e44c:	0002dd21 	.word	0x0002dd21
   2e450:	0002df65 	.word	0x0002df65

0002e454 <MQTTSerialize_subscribeLength>:
   2e454:	b580      	push	{r7, lr}
   2e456:	b084      	sub	sp, #16
   2e458:	af00      	add	r7, sp, #0
   2e45a:	6078      	str	r0, [r7, #4]
   2e45c:	6039      	str	r1, [r7, #0]
   2e45e:	2302      	movs	r3, #2
   2e460:	60bb      	str	r3, [r7, #8]
   2e462:	2300      	movs	r3, #0
   2e464:	60fb      	str	r3, [r7, #12]
   2e466:	e014      	b.n	2e492 <MQTTSerialize_subscribeLength+0x3e>
   2e468:	68fa      	ldr	r2, [r7, #12]
   2e46a:	0013      	movs	r3, r2
   2e46c:	005b      	lsls	r3, r3, #1
   2e46e:	189b      	adds	r3, r3, r2
   2e470:	009b      	lsls	r3, r3, #2
   2e472:	001a      	movs	r2, r3
   2e474:	683b      	ldr	r3, [r7, #0]
   2e476:	189b      	adds	r3, r3, r2
   2e478:	6818      	ldr	r0, [r3, #0]
   2e47a:	6859      	ldr	r1, [r3, #4]
   2e47c:	689a      	ldr	r2, [r3, #8]
   2e47e:	4b09      	ldr	r3, [pc, #36]	; (2e4a4 <MQTTSerialize_subscribeLength+0x50>)
   2e480:	4798      	blx	r3
   2e482:	0003      	movs	r3, r0
   2e484:	3303      	adds	r3, #3
   2e486:	68ba      	ldr	r2, [r7, #8]
   2e488:	18d3      	adds	r3, r2, r3
   2e48a:	60bb      	str	r3, [r7, #8]
   2e48c:	68fb      	ldr	r3, [r7, #12]
   2e48e:	3301      	adds	r3, #1
   2e490:	60fb      	str	r3, [r7, #12]
   2e492:	68fa      	ldr	r2, [r7, #12]
   2e494:	687b      	ldr	r3, [r7, #4]
   2e496:	429a      	cmp	r2, r3
   2e498:	dbe6      	blt.n	2e468 <MQTTSerialize_subscribeLength+0x14>
   2e49a:	68bb      	ldr	r3, [r7, #8]
   2e49c:	0018      	movs	r0, r3
   2e49e:	46bd      	mov	sp, r7
   2e4a0:	b004      	add	sp, #16
   2e4a2:	bd80      	pop	{r7, pc}
   2e4a4:	0002e0f5 	.word	0x0002e0f5

0002e4a8 <MQTTSerialize_subscribe>:
   2e4a8:	b590      	push	{r4, r7, lr}
   2e4aa:	b08b      	sub	sp, #44	; 0x2c
   2e4ac:	af00      	add	r7, sp, #0
   2e4ae:	60f8      	str	r0, [r7, #12]
   2e4b0:	60b9      	str	r1, [r7, #8]
   2e4b2:	0019      	movs	r1, r3
   2e4b4:	1dfb      	adds	r3, r7, #7
   2e4b6:	701a      	strb	r2, [r3, #0]
   2e4b8:	1d3b      	adds	r3, r7, #4
   2e4ba:	1c0a      	adds	r2, r1, #0
   2e4bc:	801a      	strh	r2, [r3, #0]
   2e4be:	68fb      	ldr	r3, [r7, #12]
   2e4c0:	61bb      	str	r3, [r7, #24]
   2e4c2:	2300      	movs	r3, #0
   2e4c4:	617b      	str	r3, [r7, #20]
   2e4c6:	2300      	movs	r3, #0
   2e4c8:	61fb      	str	r3, [r7, #28]
   2e4ca:	2300      	movs	r3, #0
   2e4cc:	627b      	str	r3, [r7, #36]	; 0x24
   2e4ce:	2300      	movs	r3, #0
   2e4d0:	623b      	str	r3, [r7, #32]
   2e4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e4d6:	0011      	movs	r1, r2
   2e4d8:	0018      	movs	r0, r3
   2e4da:	4b41      	ldr	r3, [pc, #260]	; (2e5e0 <MQTTSerialize_subscribe+0x138>)
   2e4dc:	4798      	blx	r3
   2e4de:	0003      	movs	r3, r0
   2e4e0:	61fb      	str	r3, [r7, #28]
   2e4e2:	69fb      	ldr	r3, [r7, #28]
   2e4e4:	0018      	movs	r0, r3
   2e4e6:	4b3f      	ldr	r3, [pc, #252]	; (2e5e4 <MQTTSerialize_subscribe+0x13c>)
   2e4e8:	4798      	blx	r3
   2e4ea:	0002      	movs	r2, r0
   2e4ec:	68bb      	ldr	r3, [r7, #8]
   2e4ee:	429a      	cmp	r2, r3
   2e4f0:	dd03      	ble.n	2e4fa <MQTTSerialize_subscribe+0x52>
   2e4f2:	2302      	movs	r3, #2
   2e4f4:	425b      	negs	r3, r3
   2e4f6:	627b      	str	r3, [r7, #36]	; 0x24
   2e4f8:	e06c      	b.n	2e5d4 <MQTTSerialize_subscribe+0x12c>
   2e4fa:	2314      	movs	r3, #20
   2e4fc:	18fb      	adds	r3, r7, r3
   2e4fe:	2200      	movs	r2, #0
   2e500:	701a      	strb	r2, [r3, #0]
   2e502:	2314      	movs	r3, #20
   2e504:	18fb      	adds	r3, r7, r3
   2e506:	781a      	ldrb	r2, [r3, #0]
   2e508:	210f      	movs	r1, #15
   2e50a:	400a      	ands	r2, r1
   2e50c:	1c11      	adds	r1, r2, #0
   2e50e:	2280      	movs	r2, #128	; 0x80
   2e510:	4252      	negs	r2, r2
   2e512:	430a      	orrs	r2, r1
   2e514:	701a      	strb	r2, [r3, #0]
   2e516:	1dfb      	adds	r3, r7, #7
   2e518:	781b      	ldrb	r3, [r3, #0]
   2e51a:	2201      	movs	r2, #1
   2e51c:	4013      	ands	r3, r2
   2e51e:	b2da      	uxtb	r2, r3
   2e520:	2314      	movs	r3, #20
   2e522:	18fb      	adds	r3, r7, r3
   2e524:	2101      	movs	r1, #1
   2e526:	400a      	ands	r2, r1
   2e528:	00d0      	lsls	r0, r2, #3
   2e52a:	781a      	ldrb	r2, [r3, #0]
   2e52c:	2108      	movs	r1, #8
   2e52e:	438a      	bics	r2, r1
   2e530:	1c11      	adds	r1, r2, #0
   2e532:	1c02      	adds	r2, r0, #0
   2e534:	430a      	orrs	r2, r1
   2e536:	701a      	strb	r2, [r3, #0]
   2e538:	2314      	movs	r3, #20
   2e53a:	18fb      	adds	r3, r7, r3
   2e53c:	781a      	ldrb	r2, [r3, #0]
   2e53e:	2106      	movs	r1, #6
   2e540:	438a      	bics	r2, r1
   2e542:	1c11      	adds	r1, r2, #0
   2e544:	2202      	movs	r2, #2
   2e546:	430a      	orrs	r2, r1
   2e548:	701a      	strb	r2, [r3, #0]
   2e54a:	2314      	movs	r3, #20
   2e54c:	18fb      	adds	r3, r7, r3
   2e54e:	781a      	ldrb	r2, [r3, #0]
   2e550:	2318      	movs	r3, #24
   2e552:	18fb      	adds	r3, r7, r3
   2e554:	0011      	movs	r1, r2
   2e556:	0018      	movs	r0, r3
   2e558:	4b23      	ldr	r3, [pc, #140]	; (2e5e8 <MQTTSerialize_subscribe+0x140>)
   2e55a:	4798      	blx	r3
   2e55c:	69bb      	ldr	r3, [r7, #24]
   2e55e:	69fa      	ldr	r2, [r7, #28]
   2e560:	0011      	movs	r1, r2
   2e562:	0018      	movs	r0, r3
   2e564:	4b21      	ldr	r3, [pc, #132]	; (2e5ec <MQTTSerialize_subscribe+0x144>)
   2e566:	4798      	blx	r3
   2e568:	0002      	movs	r2, r0
   2e56a:	69bb      	ldr	r3, [r7, #24]
   2e56c:	189b      	adds	r3, r3, r2
   2e56e:	61bb      	str	r3, [r7, #24]
   2e570:	1d3b      	adds	r3, r7, #4
   2e572:	881a      	ldrh	r2, [r3, #0]
   2e574:	2318      	movs	r3, #24
   2e576:	18fb      	adds	r3, r7, r3
   2e578:	0011      	movs	r1, r2
   2e57a:	0018      	movs	r0, r3
   2e57c:	4b1c      	ldr	r3, [pc, #112]	; (2e5f0 <MQTTSerialize_subscribe+0x148>)
   2e57e:	4798      	blx	r3
   2e580:	2300      	movs	r3, #0
   2e582:	623b      	str	r3, [r7, #32]
   2e584:	e01d      	b.n	2e5c2 <MQTTSerialize_subscribe+0x11a>
   2e586:	6a3a      	ldr	r2, [r7, #32]
   2e588:	0013      	movs	r3, r2
   2e58a:	005b      	lsls	r3, r3, #1
   2e58c:	189b      	adds	r3, r3, r2
   2e58e:	009b      	lsls	r3, r3, #2
   2e590:	001a      	movs	r2, r3
   2e592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e594:	189b      	adds	r3, r3, r2
   2e596:	2218      	movs	r2, #24
   2e598:	18b8      	adds	r0, r7, r2
   2e59a:	6819      	ldr	r1, [r3, #0]
   2e59c:	685a      	ldr	r2, [r3, #4]
   2e59e:	689b      	ldr	r3, [r3, #8]
   2e5a0:	4c14      	ldr	r4, [pc, #80]	; (2e5f4 <MQTTSerialize_subscribe+0x14c>)
   2e5a2:	47a0      	blx	r4
   2e5a4:	6a3b      	ldr	r3, [r7, #32]
   2e5a6:	009b      	lsls	r3, r3, #2
   2e5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e5aa:	18d3      	adds	r3, r2, r3
   2e5ac:	681b      	ldr	r3, [r3, #0]
   2e5ae:	b2da      	uxtb	r2, r3
   2e5b0:	2318      	movs	r3, #24
   2e5b2:	18fb      	adds	r3, r7, r3
   2e5b4:	0011      	movs	r1, r2
   2e5b6:	0018      	movs	r0, r3
   2e5b8:	4b0b      	ldr	r3, [pc, #44]	; (2e5e8 <MQTTSerialize_subscribe+0x140>)
   2e5ba:	4798      	blx	r3
   2e5bc:	6a3b      	ldr	r3, [r7, #32]
   2e5be:	3301      	adds	r3, #1
   2e5c0:	623b      	str	r3, [r7, #32]
   2e5c2:	6a3a      	ldr	r2, [r7, #32]
   2e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e5c6:	429a      	cmp	r2, r3
   2e5c8:	dbdd      	blt.n	2e586 <MQTTSerialize_subscribe+0xde>
   2e5ca:	69bb      	ldr	r3, [r7, #24]
   2e5cc:	001a      	movs	r2, r3
   2e5ce:	68fb      	ldr	r3, [r7, #12]
   2e5d0:	1ad3      	subs	r3, r2, r3
   2e5d2:	627b      	str	r3, [r7, #36]	; 0x24
   2e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5d6:	0018      	movs	r0, r3
   2e5d8:	46bd      	mov	sp, r7
   2e5da:	b00b      	add	sp, #44	; 0x2c
   2e5dc:	bd90      	pop	{r4, r7, pc}
   2e5de:	46c0      	nop			; (mov r8, r8)
   2e5e0:	0002e455 	.word	0x0002e455
   2e5e4:	0002de19 	.word	0x0002de19
   2e5e8:	0002df3b 	.word	0x0002df3b
   2e5ec:	0002dd21 	.word	0x0002dd21
   2e5f0:	0002df65 	.word	0x0002df65
   2e5f4:	0002e00d 	.word	0x0002e00d

0002e5f8 <MQTTDeserialize_suback>:
   2e5f8:	b590      	push	{r4, r7, lr}
   2e5fa:	b08b      	sub	sp, #44	; 0x2c
   2e5fc:	af00      	add	r7, sp, #0
   2e5fe:	60f8      	str	r0, [r7, #12]
   2e600:	60b9      	str	r1, [r7, #8]
   2e602:	607a      	str	r2, [r7, #4]
   2e604:	603b      	str	r3, [r7, #0]
   2e606:	2300      	movs	r3, #0
   2e608:	61fb      	str	r3, [r7, #28]
   2e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e60c:	61bb      	str	r3, [r7, #24]
   2e60e:	2300      	movs	r3, #0
   2e610:	623b      	str	r3, [r7, #32]
   2e612:	2300      	movs	r3, #0
   2e614:	627b      	str	r3, [r7, #36]	; 0x24
   2e616:	2318      	movs	r3, #24
   2e618:	18fb      	adds	r3, r7, r3
   2e61a:	0018      	movs	r0, r3
   2e61c:	4b2c      	ldr	r3, [pc, #176]	; (2e6d0 <MQTTDeserialize_suback+0xd8>)
   2e61e:	4798      	blx	r3
   2e620:	0003      	movs	r3, r0
   2e622:	001a      	movs	r2, r3
   2e624:	231c      	movs	r3, #28
   2e626:	18fb      	adds	r3, r7, r3
   2e628:	701a      	strb	r2, [r3, #0]
   2e62a:	231c      	movs	r3, #28
   2e62c:	18fb      	adds	r3, r7, r3
   2e62e:	781b      	ldrb	r3, [r3, #0]
   2e630:	220f      	movs	r2, #15
   2e632:	4393      	bics	r3, r2
   2e634:	b2db      	uxtb	r3, r3
   2e636:	2b90      	cmp	r3, #144	; 0x90
   2e638:	d142      	bne.n	2e6c0 <MQTTDeserialize_suback+0xc8>
   2e63a:	69bb      	ldr	r3, [r7, #24]
   2e63c:	2214      	movs	r2, #20
   2e63e:	18ba      	adds	r2, r7, r2
   2e640:	0011      	movs	r1, r2
   2e642:	0018      	movs	r0, r3
   2e644:	4b23      	ldr	r3, [pc, #140]	; (2e6d4 <MQTTDeserialize_suback+0xdc>)
   2e646:	4798      	blx	r3
   2e648:	0003      	movs	r3, r0
   2e64a:	627b      	str	r3, [r7, #36]	; 0x24
   2e64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e64e:	69bb      	ldr	r3, [r7, #24]
   2e650:	189b      	adds	r3, r3, r2
   2e652:	61bb      	str	r3, [r7, #24]
   2e654:	69bb      	ldr	r3, [r7, #24]
   2e656:	697a      	ldr	r2, [r7, #20]
   2e658:	189b      	adds	r3, r3, r2
   2e65a:	623b      	str	r3, [r7, #32]
   2e65c:	6a3b      	ldr	r3, [r7, #32]
   2e65e:	69ba      	ldr	r2, [r7, #24]
   2e660:	1a9b      	subs	r3, r3, r2
   2e662:	2b01      	cmp	r3, #1
   2e664:	dd2e      	ble.n	2e6c4 <MQTTDeserialize_suback+0xcc>
   2e666:	2318      	movs	r3, #24
   2e668:	18fb      	adds	r3, r7, r3
   2e66a:	0018      	movs	r0, r3
   2e66c:	4b1a      	ldr	r3, [pc, #104]	; (2e6d8 <MQTTDeserialize_suback+0xe0>)
   2e66e:	4798      	blx	r3
   2e670:	0003      	movs	r3, r0
   2e672:	b29a      	uxth	r2, r3
   2e674:	68fb      	ldr	r3, [r7, #12]
   2e676:	801a      	strh	r2, [r3, #0]
   2e678:	687b      	ldr	r3, [r7, #4]
   2e67a:	2200      	movs	r2, #0
   2e67c:	601a      	str	r2, [r3, #0]
   2e67e:	e018      	b.n	2e6b2 <MQTTDeserialize_suback+0xba>
   2e680:	687b      	ldr	r3, [r7, #4]
   2e682:	681a      	ldr	r2, [r3, #0]
   2e684:	68bb      	ldr	r3, [r7, #8]
   2e686:	429a      	cmp	r2, r3
   2e688:	dd03      	ble.n	2e692 <MQTTDeserialize_suback+0x9a>
   2e68a:	2301      	movs	r3, #1
   2e68c:	425b      	negs	r3, r3
   2e68e:	627b      	str	r3, [r7, #36]	; 0x24
   2e690:	e019      	b.n	2e6c6 <MQTTDeserialize_suback+0xce>
   2e692:	687b      	ldr	r3, [r7, #4]
   2e694:	681a      	ldr	r2, [r3, #0]
   2e696:	1c51      	adds	r1, r2, #1
   2e698:	687b      	ldr	r3, [r7, #4]
   2e69a:	6019      	str	r1, [r3, #0]
   2e69c:	0013      	movs	r3, r2
   2e69e:	009b      	lsls	r3, r3, #2
   2e6a0:	683a      	ldr	r2, [r7, #0]
   2e6a2:	18d4      	adds	r4, r2, r3
   2e6a4:	2318      	movs	r3, #24
   2e6a6:	18fb      	adds	r3, r7, r3
   2e6a8:	0018      	movs	r0, r3
   2e6aa:	4b09      	ldr	r3, [pc, #36]	; (2e6d0 <MQTTDeserialize_suback+0xd8>)
   2e6ac:	4798      	blx	r3
   2e6ae:	0003      	movs	r3, r0
   2e6b0:	6023      	str	r3, [r4, #0]
   2e6b2:	69ba      	ldr	r2, [r7, #24]
   2e6b4:	6a3b      	ldr	r3, [r7, #32]
   2e6b6:	429a      	cmp	r2, r3
   2e6b8:	d3e2      	bcc.n	2e680 <MQTTDeserialize_suback+0x88>
   2e6ba:	2301      	movs	r3, #1
   2e6bc:	627b      	str	r3, [r7, #36]	; 0x24
   2e6be:	e002      	b.n	2e6c6 <MQTTDeserialize_suback+0xce>
   2e6c0:	46c0      	nop			; (mov r8, r8)
   2e6c2:	e000      	b.n	2e6c6 <MQTTDeserialize_suback+0xce>
   2e6c4:	46c0      	nop			; (mov r8, r8)
   2e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6c8:	0018      	movs	r0, r3
   2e6ca:	46bd      	mov	sp, r7
   2e6cc:	b00b      	add	sp, #44	; 0x2c
   2e6ce:	bd90      	pop	{r4, r7, pc}
   2e6d0:	0002df0f 	.word	0x0002df0f
   2e6d4:	0002dea9 	.word	0x0002dea9
   2e6d8:	0002dedd 	.word	0x0002dedd

0002e6dc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2e6dc:	b580      	push	{r7, lr}
   2e6de:	b082      	sub	sp, #8
   2e6e0:	af00      	add	r7, sp, #0
   2e6e2:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2e6e4:	687b      	ldr	r3, [r7, #4]
   2e6e6:	2250      	movs	r2, #80	; 0x50
   2e6e8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e6ea:	687b      	ldr	r3, [r7, #4]
   2e6ec:	2200      	movs	r2, #0
   2e6ee:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2e6f0:	687b      	ldr	r3, [r7, #4]
   2e6f2:	4a0b      	ldr	r2, [pc, #44]	; (2e720 <http_client_get_config_defaults+0x44>)
   2e6f4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2e6f6:	687b      	ldr	r3, [r7, #4]
   2e6f8:	2200      	movs	r2, #0
   2e6fa:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2e6fc:	687b      	ldr	r3, [r7, #4]
   2e6fe:	2200      	movs	r2, #0
   2e700:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2e702:	687b      	ldr	r3, [r7, #4]
   2e704:	2280      	movs	r2, #128	; 0x80
   2e706:	0052      	lsls	r2, r2, #1
   2e708:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2e70a:	687b      	ldr	r3, [r7, #4]
   2e70c:	2252      	movs	r2, #82	; 0x52
   2e70e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2e710:	687b      	ldr	r3, [r7, #4]
   2e712:	4a04      	ldr	r2, [pc, #16]	; (2e724 <http_client_get_config_defaults+0x48>)
   2e714:	619a      	str	r2, [r3, #24]
}
   2e716:	46c0      	nop			; (mov r8, r8)
   2e718:	46bd      	mov	sp, r7
   2e71a:	b002      	add	sp, #8
   2e71c:	bd80      	pop	{r7, pc}
   2e71e:	46c0      	nop			; (mov r8, r8)
   2e720:	00004e20 	.word	0x00004e20
   2e724:	00037114 	.word	0x00037114

0002e728 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2e728:	b590      	push	{r4, r7, lr}
   2e72a:	b083      	sub	sp, #12
   2e72c:	af00      	add	r7, sp, #0
   2e72e:	6078      	str	r0, [r7, #4]
   2e730:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2e732:	687b      	ldr	r3, [r7, #4]
   2e734:	2b00      	cmp	r3, #0
   2e736:	d002      	beq.n	2e73e <http_client_init+0x16>
   2e738:	683b      	ldr	r3, [r7, #0]
   2e73a:	2b00      	cmp	r3, #0
   2e73c:	d102      	bne.n	2e744 <http_client_init+0x1c>
		return -EINVAL;
   2e73e:	2316      	movs	r3, #22
   2e740:	425b      	negs	r3, r3
   2e742:	e058      	b.n	2e7f6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2e744:	683b      	ldr	r3, [r7, #0]
   2e746:	691b      	ldr	r3, [r3, #16]
   2e748:	2b00      	cmp	r3, #0
   2e74a:	d102      	bne.n	2e752 <http_client_init+0x2a>
		return -EINVAL;
   2e74c:	2316      	movs	r3, #22
   2e74e:	425b      	negs	r3, r3
   2e750:	e051      	b.n	2e7f6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2e752:	683b      	ldr	r3, [r7, #0]
   2e754:	685b      	ldr	r3, [r3, #4]
   2e756:	2b00      	cmp	r3, #0
   2e758:	d102      	bne.n	2e760 <http_client_init+0x38>
		return -EINVAL;
   2e75a:	2316      	movs	r3, #22
   2e75c:	425b      	negs	r3, r3
   2e75e:	e04a      	b.n	2e7f6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2e760:	683b      	ldr	r3, [r7, #0]
   2e762:	695b      	ldr	r3, [r3, #20]
   2e764:	2b51      	cmp	r3, #81	; 0x51
   2e766:	d802      	bhi.n	2e76e <http_client_init+0x46>
		return -EINVAL;
   2e768:	2316      	movs	r3, #22
   2e76a:	425b      	negs	r3, r3
   2e76c:	e043      	b.n	2e7f6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2e76e:	687b      	ldr	r3, [r7, #4]
   2e770:	22e8      	movs	r2, #232	; 0xe8
   2e772:	2100      	movs	r1, #0
   2e774:	0018      	movs	r0, r3
   2e776:	4b22      	ldr	r3, [pc, #136]	; (2e800 <http_client_init+0xd8>)
   2e778:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2e77a:	687b      	ldr	r3, [r7, #4]
   2e77c:	3350      	adds	r3, #80	; 0x50
   2e77e:	6839      	ldr	r1, [r7, #0]
   2e780:	221c      	movs	r2, #28
   2e782:	0018      	movs	r0, r3
   2e784:	4b1f      	ldr	r3, [pc, #124]	; (2e804 <http_client_init+0xdc>)
   2e786:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2e788:	687b      	ldr	r3, [r7, #4]
   2e78a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2e78c:	2b00      	cmp	r3, #0
   2e78e:	d115      	bne.n	2e7bc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2e790:	683b      	ldr	r3, [r7, #0]
   2e792:	691b      	ldr	r3, [r3, #16]
   2e794:	0018      	movs	r0, r3
   2e796:	4b1c      	ldr	r3, [pc, #112]	; (2e808 <http_client_init+0xe0>)
   2e798:	4798      	blx	r3
   2e79a:	0003      	movs	r3, r0
   2e79c:	001a      	movs	r2, r3
   2e79e:	687b      	ldr	r3, [r7, #4]
   2e7a0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2e7a2:	687b      	ldr	r3, [r7, #4]
   2e7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2e7a6:	2b00      	cmp	r3, #0
   2e7a8:	d102      	bne.n	2e7b0 <http_client_init+0x88>
			return -ENOMEM;
   2e7aa:	230c      	movs	r3, #12
   2e7ac:	425b      	negs	r3, r3
   2e7ae:	e022      	b.n	2e7f6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2e7b0:	687b      	ldr	r3, [r7, #4]
   2e7b2:	2241      	movs	r2, #65	; 0x41
   2e7b4:	5c99      	ldrb	r1, [r3, r2]
   2e7b6:	2004      	movs	r0, #4
   2e7b8:	4301      	orrs	r1, r0
   2e7ba:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2e7bc:	683b      	ldr	r3, [r7, #0]
   2e7be:	891b      	ldrh	r3, [r3, #8]
   2e7c0:	2b00      	cmp	r3, #0
   2e7c2:	d010      	beq.n	2e7e6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2e7c4:	683b      	ldr	r3, [r7, #0]
   2e7c6:	6858      	ldr	r0, [r3, #4]
   2e7c8:	687a      	ldr	r2, [r7, #4]
   2e7ca:	4910      	ldr	r1, [pc, #64]	; (2e80c <http_client_init+0xe4>)
   2e7cc:	2300      	movs	r3, #0
   2e7ce:	4c10      	ldr	r4, [pc, #64]	; (2e810 <http_client_init+0xe8>)
   2e7d0:	47a0      	blx	r4
   2e7d2:	0002      	movs	r2, r0
   2e7d4:	687b      	ldr	r3, [r7, #4]
   2e7d6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2e7d8:	687b      	ldr	r3, [r7, #4]
   2e7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e7dc:	2b00      	cmp	r3, #0
   2e7de:	da02      	bge.n	2e7e6 <http_client_init+0xbe>
			return -ENOSPC;
   2e7e0:	231c      	movs	r3, #28
   2e7e2:	425b      	negs	r3, r3
   2e7e4:	e007      	b.n	2e7f6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2e7e6:	687b      	ldr	r3, [r7, #4]
   2e7e8:	2200      	movs	r2, #0
   2e7ea:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2e7ec:	687b      	ldr	r3, [r7, #4]
   2e7ee:	22d8      	movs	r2, #216	; 0xd8
   2e7f0:	2100      	movs	r1, #0
   2e7f2:	5099      	str	r1, [r3, r2]

	return 0;
   2e7f4:	2300      	movs	r3, #0
}
   2e7f6:	0018      	movs	r0, r3
   2e7f8:	46bd      	mov	sp, r7
   2e7fa:	b003      	add	sp, #12
   2e7fc:	bd90      	pop	{r4, r7, pc}
   2e7fe:	46c0      	nop			; (mov r8, r8)
   2e800:	00032203 	.word	0x00032203
   2e804:	000321cd 	.word	0x000321cd
   2e808:	000321a5 	.word	0x000321a5
   2e80c:	0002ead9 	.word	0x0002ead9
   2e810:	0003017d 	.word	0x0003017d

0002e814 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2e814:	b580      	push	{r7, lr}
   2e816:	b082      	sub	sp, #8
   2e818:	af00      	add	r7, sp, #0
   2e81a:	6078      	str	r0, [r7, #4]
   2e81c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2e81e:	687b      	ldr	r3, [r7, #4]
   2e820:	2b00      	cmp	r3, #0
   2e822:	d102      	bne.n	2e82a <http_client_register_callback+0x16>
		return -EINVAL;
   2e824:	2316      	movs	r3, #22
   2e826:	425b      	negs	r3, r3
   2e828:	e003      	b.n	2e832 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2e82a:	687b      	ldr	r3, [r7, #4]
   2e82c:	683a      	ldr	r2, [r7, #0]
   2e82e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2e830:	2300      	movs	r3, #0
}
   2e832:	0018      	movs	r0, r3
   2e834:	46bd      	mov	sp, r7
   2e836:	b002      	add	sp, #8
   2e838:	bd80      	pop	{r7, pc}
	...

0002e83c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2e83c:	b580      	push	{r7, lr}
   2e83e:	b082      	sub	sp, #8
   2e840:	af00      	add	r7, sp, #0
   2e842:	6078      	str	r0, [r7, #4]
	switch (err) {
   2e844:	687b      	ldr	r3, [r7, #4]
   2e846:	330e      	adds	r3, #14
   2e848:	2b0e      	cmp	r3, #14
   2e84a:	d825      	bhi.n	2e898 <_hwerr_to_stderr+0x5c>
   2e84c:	009a      	lsls	r2, r3, #2
   2e84e:	4b18      	ldr	r3, [pc, #96]	; (2e8b0 <_hwerr_to_stderr+0x74>)
   2e850:	18d3      	adds	r3, r2, r3
   2e852:	681b      	ldr	r3, [r3, #0]
   2e854:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2e856:	2305      	movs	r3, #5
   2e858:	425b      	negs	r3, r3
   2e85a:	e024      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2e85c:	2302      	movs	r3, #2
   2e85e:	425b      	negs	r3, r3
   2e860:	e021      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2e862:	2370      	movs	r3, #112	; 0x70
   2e864:	425b      	negs	r3, r3
   2e866:	e01e      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2e868:	230c      	movs	r3, #12
   2e86a:	425b      	negs	r3, r3
   2e86c:	e01b      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2e86e:	2316      	movs	r3, #22
   2e870:	425b      	negs	r3, r3
   2e872:	e018      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2e874:	230c      	movs	r3, #12
   2e876:	425b      	negs	r3, r3
   2e878:	e015      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2e87a:	2305      	movs	r3, #5
   2e87c:	425b      	negs	r3, r3
   2e87e:	e012      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2e880:	2379      	movs	r3, #121	; 0x79
   2e882:	425b      	negs	r3, r3
   2e884:	e00f      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2e886:	2368      	movs	r3, #104	; 0x68
   2e888:	425b      	negs	r3, r3
   2e88a:	e00c      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2e88c:	230b      	movs	r3, #11
   2e88e:	425b      	negs	r3, r3
   2e890:	e009      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2e892:	2310      	movs	r3, #16
   2e894:	425b      	negs	r3, r3
   2e896:	e006      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2e898:	687b      	ldr	r3, [r7, #4]
   2e89a:	2b00      	cmp	r3, #0
   2e89c:	da02      	bge.n	2e8a4 <_hwerr_to_stderr+0x68>
				return -EIO;
   2e89e:	2305      	movs	r3, #5
   2e8a0:	425b      	negs	r3, r3
   2e8a2:	e000      	b.n	2e8a6 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2e8a4:	2300      	movs	r3, #0
	}
}
   2e8a6:	0018      	movs	r0, r3
   2e8a8:	46bd      	mov	sp, r7
   2e8aa:	b002      	add	sp, #8
   2e8ac:	bd80      	pop	{r7, pc}
   2e8ae:	46c0      	nop			; (mov r8, r8)
   2e8b0:	00037250 	.word	0x00037250

0002e8b4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e8b4:	b580      	push	{r7, lr}
   2e8b6:	b08a      	sub	sp, #40	; 0x28
   2e8b8:	af00      	add	r7, sp, #0
   2e8ba:	603a      	str	r2, [r7, #0]
   2e8bc:	1dfb      	adds	r3, r7, #7
   2e8be:	1c02      	adds	r2, r0, #0
   2e8c0:	701a      	strb	r2, [r3, #0]
   2e8c2:	1dbb      	adds	r3, r7, #6
   2e8c4:	1c0a      	adds	r2, r1, #0
   2e8c6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2e8c8:	1dfb      	adds	r3, r7, #7
   2e8ca:	2200      	movs	r2, #0
   2e8cc:	569a      	ldrsb	r2, [r3, r2]
   2e8ce:	4b4b      	ldr	r3, [pc, #300]	; (2e9fc <http_client_socket_event_handler+0x148>)
   2e8d0:	0092      	lsls	r2, r2, #2
   2e8d2:	58d3      	ldr	r3, [r2, r3]
   2e8d4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e8d8:	2b00      	cmp	r3, #0
   2e8da:	d100      	bne.n	2e8de <http_client_socket_event_handler+0x2a>
   2e8dc:	e08a      	b.n	2e9f4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2e8de:	1dbb      	adds	r3, r7, #6
   2e8e0:	781b      	ldrb	r3, [r3, #0]
   2e8e2:	2b06      	cmp	r3, #6
   2e8e4:	d040      	beq.n	2e968 <http_client_socket_event_handler+0xb4>
   2e8e6:	2b07      	cmp	r3, #7
   2e8e8:	d060      	beq.n	2e9ac <http_client_socket_event_handler+0xf8>
   2e8ea:	2b05      	cmp	r3, #5
   2e8ec:	d000      	beq.n	2e8f0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2e8ee:	e082      	b.n	2e9f6 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2e8f0:	683b      	ldr	r3, [r7, #0]
   2e8f2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2e8f4:	6a3b      	ldr	r3, [r7, #32]
   2e8f6:	785b      	ldrb	r3, [r3, #1]
   2e8f8:	b25b      	sxtb	r3, r3
   2e8fa:	001a      	movs	r2, r3
   2e8fc:	230c      	movs	r3, #12
   2e8fe:	18fb      	adds	r3, r7, r3
   2e900:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2e902:	6a3b      	ldr	r3, [r7, #32]
   2e904:	785b      	ldrb	r3, [r3, #1]
   2e906:	b25b      	sxtb	r3, r3
   2e908:	2b00      	cmp	r3, #0
   2e90a:	da0c      	bge.n	2e926 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2e90c:	6a3b      	ldr	r3, [r7, #32]
   2e90e:	785b      	ldrb	r3, [r3, #1]
   2e910:	b25b      	sxtb	r3, r3
   2e912:	0018      	movs	r0, r3
   2e914:	4b3a      	ldr	r3, [pc, #232]	; (2ea00 <http_client_socket_event_handler+0x14c>)
   2e916:	4798      	blx	r3
   2e918:	0002      	movs	r2, r0
   2e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e91c:	0011      	movs	r1, r2
   2e91e:	0018      	movs	r0, r3
   2e920:	4b38      	ldr	r3, [pc, #224]	; (2ea04 <http_client_socket_event_handler+0x150>)
   2e922:	4798      	blx	r3
    	break;
   2e924:	e067      	b.n	2e9f6 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e92a:	2b00      	cmp	r3, #0
   2e92c:	d006      	beq.n	2e93c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e932:	220c      	movs	r2, #12
   2e934:	18ba      	adds	r2, r7, r2
   2e936:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2e938:	2100      	movs	r1, #0
   2e93a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e93e:	2203      	movs	r2, #3
   2e940:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e944:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e948:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e94c:	2258      	movs	r2, #88	; 0x58
   2e94e:	5a9b      	ldrh	r3, [r3, r2]
   2e950:	001a      	movs	r2, r3
   2e952:	4b2d      	ldr	r3, [pc, #180]	; (2ea08 <http_client_socket_event_handler+0x154>)
   2e954:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e958:	0018      	movs	r0, r3
   2e95a:	4b2c      	ldr	r3, [pc, #176]	; (2ea0c <http_client_socket_event_handler+0x158>)
   2e95c:	4798      	blx	r3
			_http_client_request(module);
   2e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e960:	0018      	movs	r0, r3
   2e962:	4b2b      	ldr	r3, [pc, #172]	; (2ea10 <http_client_socket_event_handler+0x15c>)
   2e964:	4798      	blx	r3
    	break;
   2e966:	e046      	b.n	2e9f6 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2e968:	683b      	ldr	r3, [r7, #0]
   2e96a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2e96c:	69fb      	ldr	r3, [r7, #28]
   2e96e:	2204      	movs	r2, #4
   2e970:	5e9b      	ldrsh	r3, [r3, r2]
   2e972:	2b00      	cmp	r3, #0
   2e974:	dd09      	ble.n	2e98a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2e976:	69fb      	ldr	r3, [r7, #28]
   2e978:	2204      	movs	r2, #4
   2e97a:	5e9b      	ldrsh	r3, [r3, r2]
   2e97c:	001a      	movs	r2, r3
   2e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e980:	0011      	movs	r1, r2
   2e982:	0018      	movs	r0, r3
   2e984:	4b23      	ldr	r3, [pc, #140]	; (2ea14 <http_client_socket_event_handler+0x160>)
   2e986:	4798      	blx	r3
   2e988:	e00b      	b.n	2e9a2 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2e98a:	69fb      	ldr	r3, [r7, #28]
   2e98c:	2204      	movs	r2, #4
   2e98e:	5e9b      	ldrsh	r3, [r3, r2]
   2e990:	0018      	movs	r0, r3
   2e992:	4b1b      	ldr	r3, [pc, #108]	; (2ea00 <http_client_socket_event_handler+0x14c>)
   2e994:	4798      	blx	r3
   2e996:	0002      	movs	r2, r0
   2e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e99a:	0011      	movs	r1, r2
   2e99c:	0018      	movs	r0, r3
   2e99e:	4b19      	ldr	r3, [pc, #100]	; (2ea04 <http_client_socket_event_handler+0x150>)
   2e9a0:	4798      	blx	r3
		_http_client_recv_packet(module);
   2e9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9a4:	0018      	movs	r0, r3
   2e9a6:	4b19      	ldr	r3, [pc, #100]	; (2ea0c <http_client_socket_event_handler+0x158>)
   2e9a8:	4798      	blx	r3
		break;
   2e9aa:	e024      	b.n	2e9f6 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2e9ac:	231a      	movs	r3, #26
   2e9ae:	18fb      	adds	r3, r7, r3
   2e9b0:	683a      	ldr	r2, [r7, #0]
   2e9b2:	8812      	ldrh	r2, [r2, #0]
   2e9b4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2e9b6:	231a      	movs	r3, #26
   2e9b8:	18fb      	adds	r3, r7, r3
   2e9ba:	2200      	movs	r2, #0
   2e9bc:	5e9b      	ldrsh	r3, [r3, r2]
   2e9be:	2b00      	cmp	r3, #0
   2e9c0:	da0d      	bge.n	2e9de <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2e9c2:	231a      	movs	r3, #26
   2e9c4:	18fb      	adds	r3, r7, r3
   2e9c6:	2200      	movs	r2, #0
   2e9c8:	5e9b      	ldrsh	r3, [r3, r2]
   2e9ca:	0018      	movs	r0, r3
   2e9cc:	4b0c      	ldr	r3, [pc, #48]	; (2ea00 <http_client_socket_event_handler+0x14c>)
   2e9ce:	4798      	blx	r3
   2e9d0:	0002      	movs	r2, r0
   2e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9d4:	0011      	movs	r1, r2
   2e9d6:	0018      	movs	r0, r3
   2e9d8:	4b0a      	ldr	r3, [pc, #40]	; (2ea04 <http_client_socket_event_handler+0x150>)
   2e9da:	4798      	blx	r3
   2e9dc:	e003      	b.n	2e9e6 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9e0:	0018      	movs	r0, r3
   2e9e2:	4b0b      	ldr	r3, [pc, #44]	; (2ea10 <http_client_socket_event_handler+0x15c>)
   2e9e4:	4798      	blx	r3
		module->sending = 0;
   2e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9e8:	2241      	movs	r2, #65	; 0x41
   2e9ea:	5c99      	ldrb	r1, [r3, r2]
   2e9ec:	2001      	movs	r0, #1
   2e9ee:	4381      	bics	r1, r0
   2e9f0:	5499      	strb	r1, [r3, r2]
    	break;
   2e9f2:	e000      	b.n	2e9f6 <http_client_socket_event_handler+0x142>
		return;
   2e9f4:	46c0      	nop			; (mov r8, r8)
	}

}
   2e9f6:	46bd      	mov	sp, r7
   2e9f8:	b00a      	add	sp, #40	; 0x28
   2e9fa:	bd80      	pop	{r7, pc}
   2e9fc:	2000414c 	.word	0x2000414c
   2ea00:	0002e83d 	.word	0x0002e83d
   2ea04:	0002eeb1 	.word	0x0002eeb1
   2ea08:	0003020d 	.word	0x0003020d
   2ea0c:	0002f73d 	.word	0x0002f73d
   2ea10:	0002f005 	.word	0x0002f005
   2ea14:	0002f7a1 	.word	0x0002f7a1

0002ea18 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2ea18:	b580      	push	{r7, lr}
   2ea1a:	b088      	sub	sp, #32
   2ea1c:	af00      	add	r7, sp, #0
   2ea1e:	6078      	str	r0, [r7, #4]
   2ea20:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2ea22:	2300      	movs	r3, #0
   2ea24:	61fb      	str	r3, [r7, #28]
   2ea26:	e048      	b.n	2eaba <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2ea28:	4b27      	ldr	r3, [pc, #156]	; (2eac8 <http_client_socket_resolve_handler+0xb0>)
   2ea2a:	69fa      	ldr	r2, [r7, #28]
   2ea2c:	0092      	lsls	r2, r2, #2
   2ea2e:	58d3      	ldr	r3, [r2, r3]
   2ea30:	2b00      	cmp	r3, #0
   2ea32:	d03f      	beq.n	2eab4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2ea34:	4b24      	ldr	r3, [pc, #144]	; (2eac8 <http_client_socket_resolve_handler+0xb0>)
   2ea36:	69fa      	ldr	r2, [r7, #28]
   2ea38:	0092      	lsls	r2, r2, #2
   2ea3a:	58d3      	ldr	r3, [r2, r3]
   2ea3c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2ea3e:	69bb      	ldr	r3, [r7, #24]
   2ea40:	1c5a      	adds	r2, r3, #1
   2ea42:	687b      	ldr	r3, [r7, #4]
   2ea44:	0011      	movs	r1, r2
   2ea46:	0018      	movs	r0, r3
   2ea48:	4b20      	ldr	r3, [pc, #128]	; (2eacc <http_client_socket_resolve_handler+0xb4>)
   2ea4a:	4798      	blx	r3
   2ea4c:	1e03      	subs	r3, r0, #0
   2ea4e:	d131      	bne.n	2eab4 <http_client_socket_resolve_handler+0x9c>
   2ea50:	69bb      	ldr	r3, [r7, #24]
   2ea52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ea54:	2b01      	cmp	r3, #1
   2ea56:	d12d      	bne.n	2eab4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2ea58:	683b      	ldr	r3, [r7, #0]
   2ea5a:	2b00      	cmp	r3, #0
   2ea5c:	d107      	bne.n	2ea6e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2ea5e:	2376      	movs	r3, #118	; 0x76
   2ea60:	425a      	negs	r2, r3
   2ea62:	69bb      	ldr	r3, [r7, #24]
   2ea64:	0011      	movs	r1, r2
   2ea66:	0018      	movs	r0, r3
   2ea68:	4b19      	ldr	r3, [pc, #100]	; (2ead0 <http_client_socket_resolve_handler+0xb8>)
   2ea6a:	4798      	blx	r3
					return;
   2ea6c:	e028      	b.n	2eac0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2ea6e:	2308      	movs	r3, #8
   2ea70:	18fb      	adds	r3, r7, r3
   2ea72:	2202      	movs	r2, #2
   2ea74:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2ea76:	69bb      	ldr	r3, [r7, #24]
   2ea78:	2250      	movs	r2, #80	; 0x50
   2ea7a:	5a9b      	ldrh	r3, [r3, r2]
   2ea7c:	021b      	lsls	r3, r3, #8
   2ea7e:	b21a      	sxth	r2, r3
   2ea80:	69bb      	ldr	r3, [r7, #24]
   2ea82:	2150      	movs	r1, #80	; 0x50
   2ea84:	5a5b      	ldrh	r3, [r3, r1]
   2ea86:	0a1b      	lsrs	r3, r3, #8
   2ea88:	b29b      	uxth	r3, r3
   2ea8a:	b21b      	sxth	r3, r3
   2ea8c:	4313      	orrs	r3, r2
   2ea8e:	b21b      	sxth	r3, r3
   2ea90:	b29a      	uxth	r2, r3
   2ea92:	2308      	movs	r3, #8
   2ea94:	18fb      	adds	r3, r7, r3
   2ea96:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2ea98:	2308      	movs	r3, #8
   2ea9a:	18fb      	adds	r3, r7, r3
   2ea9c:	683a      	ldr	r2, [r7, #0]
   2ea9e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2eaa0:	69bb      	ldr	r3, [r7, #24]
   2eaa2:	781b      	ldrb	r3, [r3, #0]
   2eaa4:	b25b      	sxtb	r3, r3
   2eaa6:	2208      	movs	r2, #8
   2eaa8:	18b9      	adds	r1, r7, r2
   2eaaa:	2210      	movs	r2, #16
   2eaac:	0018      	movs	r0, r3
   2eaae:	4b09      	ldr	r3, [pc, #36]	; (2ead4 <http_client_socket_resolve_handler+0xbc>)
   2eab0:	4798      	blx	r3
				return;
   2eab2:	e005      	b.n	2eac0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2eab4:	69fb      	ldr	r3, [r7, #28]
   2eab6:	3301      	adds	r3, #1
   2eab8:	61fb      	str	r3, [r7, #28]
   2eaba:	69fb      	ldr	r3, [r7, #28]
   2eabc:	2b06      	cmp	r3, #6
   2eabe:	ddb3      	ble.n	2ea28 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   2eac0:	46bd      	mov	sp, r7
   2eac2:	b008      	add	sp, #32
   2eac4:	bd80      	pop	{r7, pc}
   2eac6:	46c0      	nop			; (mov r8, r8)
   2eac8:	2000414c 	.word	0x2000414c
   2eacc:	0003255b 	.word	0x0003255b
   2ead0:	0002eeb1 	.word	0x0002eeb1
   2ead4:	000233d5 	.word	0x000233d5

0002ead8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2ead8:	b580      	push	{r7, lr}
   2eada:	b086      	sub	sp, #24
   2eadc:	af00      	add	r7, sp, #0
   2eade:	60f8      	str	r0, [r7, #12]
   2eae0:	60b9      	str	r1, [r7, #8]
   2eae2:	607a      	str	r2, [r7, #4]
   2eae4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2eae6:	687b      	ldr	r3, [r7, #4]
   2eae8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2eaea:	697b      	ldr	r3, [r7, #20]
   2eaec:	2b00      	cmp	r3, #0
   2eaee:	d007      	beq.n	2eb00 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   2eaf0:	233e      	movs	r3, #62	; 0x3e
   2eaf2:	425a      	negs	r2, r3
   2eaf4:	697b      	ldr	r3, [r7, #20]
   2eaf6:	0011      	movs	r1, r2
   2eaf8:	0018      	movs	r0, r3
   2eafa:	4b03      	ldr	r3, [pc, #12]	; (2eb08 <http_client_timer_callback+0x30>)
   2eafc:	4798      	blx	r3
   2eafe:	e000      	b.n	2eb02 <http_client_timer_callback+0x2a>
		return;
   2eb00:	46c0      	nop			; (mov r8, r8)
}
   2eb02:	46bd      	mov	sp, r7
   2eb04:	b006      	add	sp, #24
   2eb06:	bd80      	pop	{r7, pc}
   2eb08:	0002eeb1 	.word	0x0002eeb1

0002eb0c <_is_ip>:

static int _is_ip(const char *host)
{
   2eb0c:	b580      	push	{r7, lr}
   2eb0e:	b084      	sub	sp, #16
   2eb10:	af00      	add	r7, sp, #0
   2eb12:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   2eb14:	2300      	movs	r3, #0
   2eb16:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   2eb18:	e03a      	b.n	2eb90 <_is_ip+0x84>
		ch = *host++;
   2eb1a:	687b      	ldr	r3, [r7, #4]
   2eb1c:	1c5a      	adds	r2, r3, #1
   2eb1e:	607a      	str	r2, [r7, #4]
   2eb20:	220b      	movs	r2, #11
   2eb22:	18ba      	adds	r2, r7, r2
   2eb24:	781b      	ldrb	r3, [r3, #0]
   2eb26:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2eb28:	230b      	movs	r3, #11
   2eb2a:	18fb      	adds	r3, r7, r3
   2eb2c:	781b      	ldrb	r3, [r3, #0]
   2eb2e:	2b60      	cmp	r3, #96	; 0x60
   2eb30:	d904      	bls.n	2eb3c <_is_ip+0x30>
   2eb32:	230b      	movs	r3, #11
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	781b      	ldrb	r3, [r3, #0]
   2eb38:	2b66      	cmp	r3, #102	; 0x66
   2eb3a:	d913      	bls.n	2eb64 <_is_ip+0x58>
   2eb3c:	230b      	movs	r3, #11
   2eb3e:	18fb      	adds	r3, r7, r3
   2eb40:	781b      	ldrb	r3, [r3, #0]
   2eb42:	2b40      	cmp	r3, #64	; 0x40
   2eb44:	d904      	bls.n	2eb50 <_is_ip+0x44>
   2eb46:	230b      	movs	r3, #11
   2eb48:	18fb      	adds	r3, r7, r3
   2eb4a:	781b      	ldrb	r3, [r3, #0]
   2eb4c:	2b46      	cmp	r3, #70	; 0x46
   2eb4e:	d909      	bls.n	2eb64 <_is_ip+0x58>
   2eb50:	230b      	movs	r3, #11
   2eb52:	18fb      	adds	r3, r7, r3
   2eb54:	781b      	ldrb	r3, [r3, #0]
   2eb56:	2b3a      	cmp	r3, #58	; 0x3a
   2eb58:	d004      	beq.n	2eb64 <_is_ip+0x58>
   2eb5a:	230b      	movs	r3, #11
   2eb5c:	18fb      	adds	r3, r7, r3
   2eb5e:	781b      	ldrb	r3, [r3, #0]
   2eb60:	2b2f      	cmp	r3, #47	; 0x2f
   2eb62:	d102      	bne.n	2eb6a <_is_ip+0x5e>
			isv6 = 1;
   2eb64:	2301      	movs	r3, #1
   2eb66:	60fb      	str	r3, [r7, #12]
   2eb68:	e012      	b.n	2eb90 <_is_ip+0x84>
		} else if (ch == '.') {
   2eb6a:	230b      	movs	r3, #11
   2eb6c:	18fb      	adds	r3, r7, r3
   2eb6e:	781b      	ldrb	r3, [r3, #0]
   2eb70:	2b2e      	cmp	r3, #46	; 0x2e
   2eb72:	d104      	bne.n	2eb7e <_is_ip+0x72>
			if (isv6) {
   2eb74:	68fb      	ldr	r3, [r7, #12]
   2eb76:	2b00      	cmp	r3, #0
   2eb78:	d00a      	beq.n	2eb90 <_is_ip+0x84>
				return 0;
   2eb7a:	2300      	movs	r3, #0
   2eb7c:	e00d      	b.n	2eb9a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   2eb7e:	230b      	movs	r3, #11
   2eb80:	18fb      	adds	r3, r7, r3
   2eb82:	781b      	ldrb	r3, [r3, #0]
   2eb84:	2230      	movs	r2, #48	; 0x30
   2eb86:	4013      	ands	r3, r2
   2eb88:	2b30      	cmp	r3, #48	; 0x30
   2eb8a:	d001      	beq.n	2eb90 <_is_ip+0x84>
			return 0;
   2eb8c:	2300      	movs	r3, #0
   2eb8e:	e004      	b.n	2eb9a <_is_ip+0x8e>
	while (*host != '\0') {
   2eb90:	687b      	ldr	r3, [r7, #4]
   2eb92:	781b      	ldrb	r3, [r3, #0]
   2eb94:	2b00      	cmp	r3, #0
   2eb96:	d1c0      	bne.n	2eb1a <_is_ip+0xe>
		}
	}
	return 1;
   2eb98:	2301      	movs	r3, #1
}
   2eb9a:	0018      	movs	r0, r3
   2eb9c:	46bd      	mov	sp, r7
   2eb9e:	b004      	add	sp, #16
   2eba0:	bd80      	pop	{r7, pc}
	...

0002eba4 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   2eba4:	b5b0      	push	{r4, r5, r7, lr}
   2eba6:	b08e      	sub	sp, #56	; 0x38
   2eba8:	af00      	add	r7, sp, #0
   2ebaa:	60f8      	str	r0, [r7, #12]
   2ebac:	60b9      	str	r1, [r7, #8]
   2ebae:	603b      	str	r3, [r7, #0]
   2ebb0:	1dfb      	adds	r3, r7, #7
   2ebb2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   2ebb4:	2337      	movs	r3, #55	; 0x37
   2ebb6:	18fb      	adds	r3, r7, r3
   2ebb8:	2200      	movs	r2, #0
   2ebba:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   2ebbc:	2300      	movs	r3, #0
   2ebbe:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   2ebc0:	2300      	movs	r3, #0
   2ebc2:	633b      	str	r3, [r7, #48]	; 0x30
   2ebc4:	2300      	movs	r3, #0
   2ebc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   2ebc8:	2300      	movs	r3, #0
   2ebca:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   2ebcc:	68fb      	ldr	r3, [r7, #12]
   2ebce:	2b00      	cmp	r3, #0
   2ebd0:	d102      	bne.n	2ebd8 <http_client_send_request+0x34>
		return -EINVAL;
   2ebd2:	2316      	movs	r3, #22
   2ebd4:	425b      	negs	r3, r3
   2ebd6:	e145      	b.n	2ee64 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2ebd8:	68fb      	ldr	r3, [r7, #12]
   2ebda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ebdc:	2b02      	cmp	r3, #2
   2ebde:	d902      	bls.n	2ebe6 <http_client_send_request+0x42>
		return -EBUSY;
   2ebe0:	2310      	movs	r3, #16
   2ebe2:	425b      	negs	r3, r3
   2ebe4:	e13e      	b.n	2ee64 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2ebe6:	49a1      	ldr	r1, [pc, #644]	; (2ee6c <http_client_send_request+0x2c8>)
   2ebe8:	68bb      	ldr	r3, [r7, #8]
   2ebea:	2207      	movs	r2, #7
   2ebec:	0018      	movs	r0, r3
   2ebee:	4ba0      	ldr	r3, [pc, #640]	; (2ee70 <http_client_send_request+0x2cc>)
   2ebf0:	4798      	blx	r3
   2ebf2:	1e03      	subs	r3, r0, #0
   2ebf4:	d102      	bne.n	2ebfc <http_client_send_request+0x58>
		i = 7;
   2ebf6:	2307      	movs	r3, #7
   2ebf8:	633b      	str	r3, [r7, #48]	; 0x30
   2ebfa:	e009      	b.n	2ec10 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   2ebfc:	499d      	ldr	r1, [pc, #628]	; (2ee74 <http_client_send_request+0x2d0>)
   2ebfe:	68bb      	ldr	r3, [r7, #8]
   2ec00:	2208      	movs	r2, #8
   2ec02:	0018      	movs	r0, r3
   2ec04:	4b9a      	ldr	r3, [pc, #616]	; (2ee70 <http_client_send_request+0x2cc>)
   2ec06:	4798      	blx	r3
   2ec08:	1e03      	subs	r3, r0, #0
   2ec0a:	d101      	bne.n	2ec10 <http_client_send_request+0x6c>
		i = 8;
   2ec0c:	2308      	movs	r3, #8
   2ec0e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2ec10:	68fb      	ldr	r3, [r7, #12]
   2ec12:	1c5c      	adds	r4, r3, #1
   2ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec16:	68ba      	ldr	r2, [r7, #8]
   2ec18:	18d5      	adds	r5, r2, r3
   2ec1a:	68fb      	ldr	r3, [r7, #12]
   2ec1c:	3301      	adds	r3, #1
   2ec1e:	0018      	movs	r0, r3
   2ec20:	4b95      	ldr	r3, [pc, #596]	; (2ee78 <http_client_send_request+0x2d4>)
   2ec22:	4798      	blx	r3
   2ec24:	0003      	movs	r3, r0
   2ec26:	001a      	movs	r2, r3
   2ec28:	0029      	movs	r1, r5
   2ec2a:	0020      	movs	r0, r4
   2ec2c:	4b90      	ldr	r3, [pc, #576]	; (2ee70 <http_client_send_request+0x2cc>)
   2ec2e:	4798      	blx	r3
   2ec30:	0003      	movs	r3, r0
   2ec32:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2ec34:	e00d      	b.n	2ec52 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   2ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ec38:	1c5a      	adds	r2, r3, #1
   2ec3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   2ec3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2ec3e:	68b9      	ldr	r1, [r7, #8]
   2ec40:	188a      	adds	r2, r1, r2
   2ec42:	7811      	ldrb	r1, [r2, #0]
   2ec44:	68fa      	ldr	r2, [r7, #12]
   2ec46:	18d3      	adds	r3, r2, r3
   2ec48:	1c0a      	adds	r2, r1, #0
   2ec4a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec4e:	3301      	adds	r3, #1
   2ec50:	633b      	str	r3, [r7, #48]	; 0x30
   2ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec54:	68ba      	ldr	r2, [r7, #8]
   2ec56:	18d3      	adds	r3, r2, r3
   2ec58:	781b      	ldrb	r3, [r3, #0]
   2ec5a:	2b00      	cmp	r3, #0
   2ec5c:	d005      	beq.n	2ec6a <http_client_send_request+0xc6>
   2ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec60:	68ba      	ldr	r2, [r7, #8]
   2ec62:	18d3      	adds	r3, r2, r3
   2ec64:	781b      	ldrb	r3, [r3, #0]
   2ec66:	2b2f      	cmp	r3, #47	; 0x2f
   2ec68:	d1e5      	bne.n	2ec36 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2ec6a:	68fa      	ldr	r2, [r7, #12]
   2ec6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ec6e:	18d3      	adds	r3, r2, r3
   2ec70:	3301      	adds	r3, #1
   2ec72:	2200      	movs	r2, #0
   2ec74:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2ec76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec78:	68ba      	ldr	r2, [r7, #8]
   2ec7a:	18d3      	adds	r3, r2, r3
   2ec7c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   2ec7e:	68fb      	ldr	r3, [r7, #12]
   2ec80:	3301      	adds	r3, #1
   2ec82:	781b      	ldrb	r3, [r3, #0]
   2ec84:	2b00      	cmp	r3, #0
   2ec86:	d102      	bne.n	2ec8e <http_client_send_request+0xea>
		return -EINVAL;
   2ec88:	2316      	movs	r3, #22
   2ec8a:	425b      	negs	r3, r3
   2ec8c:	e0ea      	b.n	2ee64 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ec90:	0018      	movs	r0, r3
   2ec92:	4b79      	ldr	r3, [pc, #484]	; (2ee78 <http_client_send_request+0x2d4>)
   2ec94:	4798      	blx	r3
   2ec96:	0003      	movs	r3, r0
   2ec98:	2b3f      	cmp	r3, #63	; 0x3f
   2ec9a:	d902      	bls.n	2eca2 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   2ec9c:	235b      	movs	r3, #91	; 0x5b
   2ec9e:	425b      	negs	r3, r3
   2eca0:	e0e0      	b.n	2ee64 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   2eca2:	68fb      	ldr	r3, [r7, #12]
   2eca4:	22d4      	movs	r2, #212	; 0xd4
   2eca6:	589b      	ldr	r3, [r3, r2]
   2eca8:	2b00      	cmp	r3, #0
   2ecaa:	d005      	beq.n	2ecb8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   2ecac:	68fb      	ldr	r3, [r7, #12]
   2ecae:	22d4      	movs	r2, #212	; 0xd4
   2ecb0:	589b      	ldr	r3, [r3, r2]
   2ecb2:	0018      	movs	r0, r3
   2ecb4:	4b71      	ldr	r3, [pc, #452]	; (2ee7c <http_client_send_request+0x2d8>)
   2ecb6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2ecb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ecba:	2b00      	cmp	r3, #0
   2ecbc:	d010      	beq.n	2ece0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   2ecbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ecc0:	0018      	movs	r0, r3
   2ecc2:	4b6f      	ldr	r3, [pc, #444]	; (2ee80 <http_client_send_request+0x2dc>)
   2ecc4:	4798      	blx	r3
   2ecc6:	0003      	movs	r3, r0
   2ecc8:	0019      	movs	r1, r3
   2ecca:	68fb      	ldr	r3, [r7, #12]
   2eccc:	22d4      	movs	r2, #212	; 0xd4
   2ecce:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   2ecd0:	68fb      	ldr	r3, [r7, #12]
   2ecd2:	22d4      	movs	r2, #212	; 0xd4
   2ecd4:	589b      	ldr	r3, [r3, r2]
   2ecd6:	2b00      	cmp	r3, #0
   2ecd8:	d106      	bne.n	2ece8 <http_client_send_request+0x144>
			return -ENOMEM;
   2ecda:	230c      	movs	r3, #12
   2ecdc:	425b      	negs	r3, r3
   2ecde:	e0c1      	b.n	2ee64 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   2ece0:	68fb      	ldr	r3, [r7, #12]
   2ece2:	22d4      	movs	r2, #212	; 0xd4
   2ece4:	2100      	movs	r1, #0
   2ece6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2ece8:	68fb      	ldr	r3, [r7, #12]
   2ecea:	2241      	movs	r2, #65	; 0x41
   2ecec:	5c99      	ldrb	r1, [r3, r2]
   2ecee:	2001      	movs	r0, #1
   2ecf0:	4381      	bics	r1, r0
   2ecf2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   2ecf4:	68fb      	ldr	r3, [r7, #12]
   2ecf6:	2200      	movs	r2, #0
   2ecf8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   2ecfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ecfc:	781b      	ldrb	r3, [r3, #0]
   2ecfe:	2b2f      	cmp	r3, #47	; 0x2f
   2ed00:	d107      	bne.n	2ed12 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   2ed02:	68fb      	ldr	r3, [r7, #12]
   2ed04:	3370      	adds	r3, #112	; 0x70
   2ed06:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ed08:	0011      	movs	r1, r2
   2ed0a:	0018      	movs	r0, r3
   2ed0c:	4b5d      	ldr	r3, [pc, #372]	; (2ee84 <http_client_send_request+0x2e0>)
   2ed0e:	4798      	blx	r3
   2ed10:	e00f      	b.n	2ed32 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   2ed12:	68fb      	ldr	r3, [r7, #12]
   2ed14:	2270      	movs	r2, #112	; 0x70
   2ed16:	212f      	movs	r1, #47	; 0x2f
   2ed18:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   2ed1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ed1c:	781b      	ldrb	r3, [r3, #0]
   2ed1e:	2b00      	cmp	r3, #0
   2ed20:	d007      	beq.n	2ed32 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   2ed22:	68fb      	ldr	r3, [r7, #12]
   2ed24:	3370      	adds	r3, #112	; 0x70
   2ed26:	3301      	adds	r3, #1
   2ed28:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ed2a:	0011      	movs	r1, r2
   2ed2c:	0018      	movs	r0, r3
   2ed2e:	4b55      	ldr	r3, [pc, #340]	; (2ee84 <http_client_send_request+0x2e0>)
   2ed30:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   2ed32:	683b      	ldr	r3, [r7, #0]
   2ed34:	2b00      	cmp	r3, #0
   2ed36:	d007      	beq.n	2ed48 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2ed38:	68fb      	ldr	r3, [r7, #12]
   2ed3a:	33b0      	adds	r3, #176	; 0xb0
   2ed3c:	6839      	ldr	r1, [r7, #0]
   2ed3e:	2218      	movs	r2, #24
   2ed40:	0018      	movs	r0, r3
   2ed42:	4b51      	ldr	r3, [pc, #324]	; (2ee88 <http_client_send_request+0x2e4>)
   2ed44:	4798      	blx	r3
   2ed46:	e006      	b.n	2ed56 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2ed48:	68fb      	ldr	r3, [r7, #12]
   2ed4a:	33b0      	adds	r3, #176	; 0xb0
   2ed4c:	2218      	movs	r2, #24
   2ed4e:	2100      	movs	r1, #0
   2ed50:	0018      	movs	r0, r3
   2ed52:	4b4e      	ldr	r3, [pc, #312]	; (2ee8c <http_client_send_request+0x2e8>)
   2ed54:	4798      	blx	r3
	}

	module->req.method = method;
   2ed56:	68fb      	ldr	r3, [r7, #12]
   2ed58:	1dfa      	adds	r2, r7, #7
   2ed5a:	21c8      	movs	r1, #200	; 0xc8
   2ed5c:	7812      	ldrb	r2, [r2, #0]
   2ed5e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   2ed60:	68fb      	ldr	r3, [r7, #12]
   2ed62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ed64:	2b01      	cmp	r3, #1
   2ed66:	d003      	beq.n	2ed70 <http_client_send_request+0x1cc>
   2ed68:	d316      	bcc.n	2ed98 <http_client_send_request+0x1f4>
   2ed6a:	2b02      	cmp	r3, #2
   2ed6c:	d004      	beq.n	2ed78 <http_client_send_request+0x1d4>
   2ed6e:	e074      	b.n	2ee5a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   2ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed72:	2b00      	cmp	r3, #0
   2ed74:	d100      	bne.n	2ed78 <http_client_send_request+0x1d4>
   2ed76:	e073      	b.n	2ee60 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed7a:	2b00      	cmp	r3, #0
   2ed7c:	d107      	bne.n	2ed8e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   2ed7e:	68fb      	ldr	r3, [r7, #12]
   2ed80:	2203      	movs	r2, #3
   2ed82:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   2ed84:	68fb      	ldr	r3, [r7, #12]
   2ed86:	0018      	movs	r0, r3
   2ed88:	4b41      	ldr	r3, [pc, #260]	; (2ee90 <http_client_send_request+0x2ec>)
   2ed8a:	4798      	blx	r3
			break;
   2ed8c:	e069      	b.n	2ee62 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   2ed8e:	68fb      	ldr	r3, [r7, #12]
   2ed90:	2100      	movs	r1, #0
   2ed92:	0018      	movs	r0, r3
   2ed94:	4b3f      	ldr	r3, [pc, #252]	; (2ee94 <http_client_send_request+0x2f0>)
   2ed96:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2ed98:	68fb      	ldr	r3, [r7, #12]
   2ed9a:	2252      	movs	r2, #82	; 0x52
   2ed9c:	5c9b      	ldrb	r3, [r3, r2]
   2ed9e:	2b00      	cmp	r3, #0
   2eda0:	d007      	beq.n	2edb2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   2eda2:	2337      	movs	r3, #55	; 0x37
   2eda4:	18fb      	adds	r3, r7, r3
   2eda6:	2237      	movs	r2, #55	; 0x37
   2eda8:	18ba      	adds	r2, r7, r2
   2edaa:	7812      	ldrb	r2, [r2, #0]
   2edac:	2101      	movs	r1, #1
   2edae:	430a      	orrs	r2, r1
   2edb0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2edb2:	2337      	movs	r3, #55	; 0x37
   2edb4:	18fb      	adds	r3, r7, r3
   2edb6:	781b      	ldrb	r3, [r3, #0]
   2edb8:	001a      	movs	r2, r3
   2edba:	2101      	movs	r1, #1
   2edbc:	2002      	movs	r0, #2
   2edbe:	4b36      	ldr	r3, [pc, #216]	; (2ee98 <http_client_send_request+0x2f4>)
   2edc0:	4798      	blx	r3
   2edc2:	0003      	movs	r3, r0
   2edc4:	001a      	movs	r2, r3
   2edc6:	68fb      	ldr	r3, [r7, #12]
   2edc8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2edca:	68fb      	ldr	r3, [r7, #12]
   2edcc:	781b      	ldrb	r3, [r3, #0]
   2edce:	b25b      	sxtb	r3, r3
   2edd0:	2b00      	cmp	r3, #0
   2edd2:	db3f      	blt.n	2ee54 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   2edd4:	68fb      	ldr	r3, [r7, #12]
   2edd6:	781b      	ldrb	r3, [r3, #0]
   2edd8:	b25b      	sxtb	r3, r3
   2edda:	001a      	movs	r2, r3
   2eddc:	4b2f      	ldr	r3, [pc, #188]	; (2ee9c <http_client_send_request+0x2f8>)
   2edde:	0092      	lsls	r2, r2, #2
   2ede0:	68f9      	ldr	r1, [r7, #12]
   2ede2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   2ede4:	68fb      	ldr	r3, [r7, #12]
   2ede6:	3301      	adds	r3, #1
   2ede8:	0018      	movs	r0, r3
   2edea:	4b2d      	ldr	r3, [pc, #180]	; (2eea0 <http_client_send_request+0x2fc>)
   2edec:	4798      	blx	r3
   2edee:	1e03      	subs	r3, r0, #0
   2edf0:	d027      	beq.n	2ee42 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   2edf2:	2314      	movs	r3, #20
   2edf4:	18fb      	adds	r3, r7, r3
   2edf6:	2202      	movs	r2, #2
   2edf8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2edfa:	68fb      	ldr	r3, [r7, #12]
   2edfc:	2250      	movs	r2, #80	; 0x50
   2edfe:	5a9b      	ldrh	r3, [r3, r2]
   2ee00:	021b      	lsls	r3, r3, #8
   2ee02:	b21a      	sxth	r2, r3
   2ee04:	68fb      	ldr	r3, [r7, #12]
   2ee06:	2150      	movs	r1, #80	; 0x50
   2ee08:	5a5b      	ldrh	r3, [r3, r1]
   2ee0a:	0a1b      	lsrs	r3, r3, #8
   2ee0c:	b29b      	uxth	r3, r3
   2ee0e:	b21b      	sxth	r3, r3
   2ee10:	4313      	orrs	r3, r2
   2ee12:	b21b      	sxth	r3, r3
   2ee14:	b29a      	uxth	r2, r3
   2ee16:	2314      	movs	r3, #20
   2ee18:	18fb      	adds	r3, r7, r3
   2ee1a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   2ee1c:	68fb      	ldr	r3, [r7, #12]
   2ee1e:	3301      	adds	r3, #1
   2ee20:	0018      	movs	r0, r3
   2ee22:	4b20      	ldr	r3, [pc, #128]	; (2eea4 <http_client_send_request+0x300>)
   2ee24:	4798      	blx	r3
   2ee26:	0002      	movs	r2, r0
   2ee28:	2314      	movs	r3, #20
   2ee2a:	18fb      	adds	r3, r7, r3
   2ee2c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2ee2e:	68fb      	ldr	r3, [r7, #12]
   2ee30:	781b      	ldrb	r3, [r3, #0]
   2ee32:	b25b      	sxtb	r3, r3
   2ee34:	2214      	movs	r2, #20
   2ee36:	18b9      	adds	r1, r7, r2
   2ee38:	2210      	movs	r2, #16
   2ee3a:	0018      	movs	r0, r3
   2ee3c:	4b1a      	ldr	r3, [pc, #104]	; (2eea8 <http_client_send_request+0x304>)
   2ee3e:	4798      	blx	r3
   2ee40:	e004      	b.n	2ee4c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   2ee42:	68fb      	ldr	r3, [r7, #12]
   2ee44:	3301      	adds	r3, #1
   2ee46:	0018      	movs	r0, r3
   2ee48:	4b18      	ldr	r3, [pc, #96]	; (2eeac <http_client_send_request+0x308>)
   2ee4a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2ee4c:	68fb      	ldr	r3, [r7, #12]
   2ee4e:	2201      	movs	r2, #1
   2ee50:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   2ee52:	e006      	b.n	2ee62 <http_client_send_request+0x2be>
			return -ENOSPC;
   2ee54:	231c      	movs	r3, #28
   2ee56:	425b      	negs	r3, r3
   2ee58:	e004      	b.n	2ee64 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2ee5a:	230b      	movs	r3, #11
   2ee5c:	425b      	negs	r3, r3
   2ee5e:	e001      	b.n	2ee64 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   2ee60:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   2ee62:	2300      	movs	r3, #0
}
   2ee64:	0018      	movs	r0, r3
   2ee66:	46bd      	mov	sp, r7
   2ee68:	b00e      	add	sp, #56	; 0x38
   2ee6a:	bdb0      	pop	{r4, r5, r7, pc}
   2ee6c:	00037120 	.word	0x00037120
   2ee70:	000325c9 	.word	0x000325c9
   2ee74:	00037128 	.word	0x00037128
   2ee78:	000325bb 	.word	0x000325bb
   2ee7c:	000321b9 	.word	0x000321b9
   2ee80:	00032581 	.word	0x00032581
   2ee84:	0003256f 	.word	0x0003256f
   2ee88:	000321cd 	.word	0x000321cd
   2ee8c:	00032203 	.word	0x00032203
   2ee90:	0002f005 	.word	0x0002f005
   2ee94:	0002eeb1 	.word	0x0002eeb1
   2ee98:	000231c1 	.word	0x000231c1
   2ee9c:	2000414c 	.word	0x2000414c
   2eea0:	0002eb0d 	.word	0x0002eb0d
   2eea4:	0002390d 	.word	0x0002390d
   2eea8:	000233d5 	.word	0x000233d5
   2eeac:	00023a15 	.word	0x00023a15

0002eeb0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   2eeb0:	b580      	push	{r7, lr}
   2eeb2:	b086      	sub	sp, #24
   2eeb4:	af00      	add	r7, sp, #0
   2eeb6:	6078      	str	r0, [r7, #4]
   2eeb8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2eeba:	687b      	ldr	r3, [r7, #4]
   2eebc:	22c0      	movs	r2, #192	; 0xc0
   2eebe:	589b      	ldr	r3, [r3, r2]
   2eec0:	2b00      	cmp	r3, #0
   2eec2:	d007      	beq.n	2eed4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   2eec4:	687b      	ldr	r3, [r7, #4]
   2eec6:	22c0      	movs	r2, #192	; 0xc0
   2eec8:	589b      	ldr	r3, [r3, r2]
   2eeca:	687a      	ldr	r2, [r7, #4]
   2eecc:	21c4      	movs	r1, #196	; 0xc4
   2eece:	5852      	ldr	r2, [r2, r1]
   2eed0:	0010      	movs	r0, r2
   2eed2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   2eed4:	687b      	ldr	r3, [r7, #4]
   2eed6:	33b0      	adds	r3, #176	; 0xb0
   2eed8:	2218      	movs	r2, #24
   2eeda:	2100      	movs	r1, #0
   2eedc:	0018      	movs	r0, r3
   2eede:	4b24      	ldr	r3, [pc, #144]	; (2ef70 <_http_client_clear_conn+0xc0>)
   2eee0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   2eee2:	687b      	ldr	r3, [r7, #4]
   2eee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2eee6:	2b00      	cmp	r3, #0
   2eee8:	d005      	beq.n	2eef6 <_http_client_clear_conn+0x46>
		close(module->sock);
   2eeea:	687b      	ldr	r3, [r7, #4]
   2eeec:	781b      	ldrb	r3, [r3, #0]
   2eeee:	b25b      	sxtb	r3, r3
   2eef0:	0018      	movs	r0, r3
   2eef2:	4b20      	ldr	r3, [pc, #128]	; (2ef74 <_http_client_clear_conn+0xc4>)
   2eef4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   2eef6:	687b      	ldr	r3, [r7, #4]
   2eef8:	781b      	ldrb	r3, [r3, #0]
   2eefa:	b25b      	sxtb	r3, r3
   2eefc:	001a      	movs	r2, r3
   2eefe:	4b1e      	ldr	r3, [pc, #120]	; (2ef78 <_http_client_clear_conn+0xc8>)
   2ef00:	0092      	lsls	r2, r2, #2
   2ef02:	2100      	movs	r1, #0
   2ef04:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   2ef06:	687b      	ldr	r3, [r7, #4]
   2ef08:	336c      	adds	r3, #108	; 0x6c
   2ef0a:	226c      	movs	r2, #108	; 0x6c
   2ef0c:	2100      	movs	r1, #0
   2ef0e:	0018      	movs	r0, r3
   2ef10:	4b17      	ldr	r3, [pc, #92]	; (2ef70 <_http_client_clear_conn+0xc0>)
   2ef12:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   2ef14:	687b      	ldr	r3, [r7, #4]
   2ef16:	33d8      	adds	r3, #216	; 0xd8
   2ef18:	2210      	movs	r2, #16
   2ef1a:	2100      	movs	r1, #0
   2ef1c:	0018      	movs	r0, r3
   2ef1e:	4b14      	ldr	r3, [pc, #80]	; (2ef70 <_http_client_clear_conn+0xc0>)
   2ef20:	4798      	blx	r3
	module->req.state = STATE_INIT;
   2ef22:	687b      	ldr	r3, [r7, #4]
   2ef24:	2200      	movs	r2, #0
   2ef26:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2ef28:	687b      	ldr	r3, [r7, #4]
   2ef2a:	22d8      	movs	r2, #216	; 0xd8
   2ef2c:	2100      	movs	r1, #0
   2ef2e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   2ef30:	687b      	ldr	r3, [r7, #4]
   2ef32:	2241      	movs	r2, #65	; 0x41
   2ef34:	5c99      	ldrb	r1, [r3, r2]
   2ef36:	2001      	movs	r0, #1
   2ef38:	4381      	bics	r1, r0
   2ef3a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   2ef3c:	687b      	ldr	r3, [r7, #4]
   2ef3e:	2241      	movs	r2, #65	; 0x41
   2ef40:	5c99      	ldrb	r1, [r3, r2]
   2ef42:	2002      	movs	r0, #2
   2ef44:	4381      	bics	r1, r0
   2ef46:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   2ef48:	230c      	movs	r3, #12
   2ef4a:	18fb      	adds	r3, r7, r3
   2ef4c:	683a      	ldr	r2, [r7, #0]
   2ef4e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   2ef50:	687b      	ldr	r3, [r7, #4]
   2ef52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef54:	2b00      	cmp	r3, #0
   2ef56:	d006      	beq.n	2ef66 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2ef58:	687b      	ldr	r3, [r7, #4]
   2ef5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef5c:	220c      	movs	r2, #12
   2ef5e:	18ba      	adds	r2, r7, r2
   2ef60:	6878      	ldr	r0, [r7, #4]
   2ef62:	2104      	movs	r1, #4
   2ef64:	4798      	blx	r3
	}
}
   2ef66:	46c0      	nop			; (mov r8, r8)
   2ef68:	46bd      	mov	sp, r7
   2ef6a:	b006      	add	sp, #24
   2ef6c:	bd80      	pop	{r7, pc}
   2ef6e:	46c0      	nop			; (mov r8, r8)
   2ef70:	00032203 	.word	0x00032203
   2ef74:	000237cd 	.word	0x000237cd
   2ef78:	2000414c 	.word	0x2000414c

0002ef7c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   2ef7c:	b590      	push	{r4, r7, lr}
   2ef7e:	b087      	sub	sp, #28
   2ef80:	af00      	add	r7, sp, #0
   2ef82:	60f8      	str	r0, [r7, #12]
   2ef84:	60b9      	str	r1, [r7, #8]
   2ef86:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2ef88:	68fb      	ldr	r3, [r7, #12]
   2ef8a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   2ef8c:	697b      	ldr	r3, [r7, #20]
   2ef8e:	2241      	movs	r2, #65	; 0x41
   2ef90:	5c99      	ldrb	r1, [r3, r2]
   2ef92:	2001      	movs	r0, #1
   2ef94:	4301      	orrs	r1, r0
   2ef96:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2ef98:	697b      	ldr	r3, [r7, #20]
   2ef9a:	2000      	movs	r0, #0
   2ef9c:	5618      	ldrsb	r0, [r3, r0]
   2ef9e:	687b      	ldr	r3, [r7, #4]
   2efa0:	b29a      	uxth	r2, r3
   2efa2:	68b9      	ldr	r1, [r7, #8]
   2efa4:	2300      	movs	r3, #0
   2efa6:	4c14      	ldr	r4, [pc, #80]	; (2eff8 <_http_client_send_wait+0x7c>)
   2efa8:	47a0      	blx	r4
   2efaa:	0003      	movs	r3, r0
   2efac:	613b      	str	r3, [r7, #16]
   2efae:	693b      	ldr	r3, [r7, #16]
   2efb0:	2b00      	cmp	r3, #0
   2efb2:	da0f      	bge.n	2efd4 <_http_client_send_wait+0x58>
		module->sending = 0;
   2efb4:	697b      	ldr	r3, [r7, #20]
   2efb6:	2241      	movs	r2, #65	; 0x41
   2efb8:	5c99      	ldrb	r1, [r3, r2]
   2efba:	2001      	movs	r0, #1
   2efbc:	4381      	bics	r1, r0
   2efbe:	5499      	strb	r1, [r3, r2]
		return result;
   2efc0:	693b      	ldr	r3, [r7, #16]
   2efc2:	e014      	b.n	2efee <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   2efc4:	2000      	movs	r0, #0
   2efc6:	4b0d      	ldr	r3, [pc, #52]	; (2effc <_http_client_send_wait+0x80>)
   2efc8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2efca:	697b      	ldr	r3, [r7, #20]
   2efcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2efce:	0018      	movs	r0, r3
   2efd0:	4b0b      	ldr	r3, [pc, #44]	; (2f000 <_http_client_send_wait+0x84>)
   2efd2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   2efd4:	697b      	ldr	r3, [r7, #20]
   2efd6:	2241      	movs	r2, #65	; 0x41
   2efd8:	5c9b      	ldrb	r3, [r3, r2]
   2efda:	2201      	movs	r2, #1
   2efdc:	4013      	ands	r3, r2
   2efde:	b2db      	uxtb	r3, r3
   2efe0:	2b00      	cmp	r3, #0
   2efe2:	d003      	beq.n	2efec <_http_client_send_wait+0x70>
   2efe4:	697b      	ldr	r3, [r7, #20]
   2efe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2efe8:	2b02      	cmp	r3, #2
   2efea:	d8eb      	bhi.n	2efc4 <_http_client_send_wait+0x48>
	}

	return 0;
   2efec:	2300      	movs	r3, #0
}
   2efee:	0018      	movs	r0, r3
   2eff0:	46bd      	mov	sp, r7
   2eff2:	b007      	add	sp, #28
   2eff4:	bd90      	pop	{r4, r7, pc}
   2eff6:	46c0      	nop			; (mov r8, r8)
   2eff8:	000234e9 	.word	0x000234e9
   2effc:	0001fb95 	.word	0x0001fb95
   2f000:	00030289 	.word	0x00030289

0002f004 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   2f004:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f006:	46c6      	mov	lr, r8
   2f008:	b500      	push	{lr}
   2f00a:	b0a0      	sub	sp, #128	; 0x80
   2f00c:	af02      	add	r7, sp, #8
   2f00e:	61f8      	str	r0, [r7, #28]
   2f010:	4668      	mov	r0, sp
   2f012:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   2f014:	2318      	movs	r3, #24
   2f016:	2218      	movs	r2, #24
   2f018:	18ba      	adds	r2, r7, r2
   2f01a:	18d0      	adds	r0, r2, r3
   2f01c:	4bbd      	ldr	r3, [pc, #756]	; (2f314 <_http_client_request+0x310>)
   2f01e:	469c      	mov	ip, r3
   2f020:	4663      	mov	r3, ip
   2f022:	cb16      	ldmia	r3!, {r1, r2, r4}
   2f024:	c016      	stmia	r0!, {r1, r2, r4}
   2f026:	469c      	mov	ip, r3
   2f028:	4663      	mov	r3, ip
   2f02a:	681b      	ldr	r3, [r3, #0]
   2f02c:	469c      	mov	ip, r3
   2f02e:	4663      	mov	r3, ip
   2f030:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   2f032:	69f8      	ldr	r0, [r7, #28]
   2f034:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2f036:	4684      	mov	ip, r0
   2f038:	2301      	movs	r3, #1
   2f03a:	425b      	negs	r3, r3
   2f03c:	4698      	mov	r8, r3
   2f03e:	44c4      	add	ip, r8
   2f040:	4663      	mov	r3, ip
   2f042:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f044:	6038      	str	r0, [r7, #0]
   2f046:	2300      	movs	r3, #0
   2f048:	607b      	str	r3, [r7, #4]
   2f04a:	6839      	ldr	r1, [r7, #0]
   2f04c:	687a      	ldr	r2, [r7, #4]
   2f04e:	000b      	movs	r3, r1
   2f050:	0f5b      	lsrs	r3, r3, #29
   2f052:	469c      	mov	ip, r3
   2f054:	0013      	movs	r3, r2
   2f056:	00db      	lsls	r3, r3, #3
   2f058:	617b      	str	r3, [r7, #20]
   2f05a:	4663      	mov	r3, ip
   2f05c:	697c      	ldr	r4, [r7, #20]
   2f05e:	431c      	orrs	r4, r3
   2f060:	617c      	str	r4, [r7, #20]
   2f062:	000b      	movs	r3, r1
   2f064:	00db      	lsls	r3, r3, #3
   2f066:	613b      	str	r3, [r7, #16]
   2f068:	0005      	movs	r5, r0
   2f06a:	2200      	movs	r2, #0
   2f06c:	0016      	movs	r6, r2
   2f06e:	0f6a      	lsrs	r2, r5, #29
   2f070:	00f3      	lsls	r3, r6, #3
   2f072:	60fb      	str	r3, [r7, #12]
   2f074:	68fb      	ldr	r3, [r7, #12]
   2f076:	4313      	orrs	r3, r2
   2f078:	60fb      	str	r3, [r7, #12]
   2f07a:	00eb      	lsls	r3, r5, #3
   2f07c:	60bb      	str	r3, [r7, #8]
   2f07e:	1dc3      	adds	r3, r0, #7
   2f080:	08db      	lsrs	r3, r3, #3
   2f082:	00db      	lsls	r3, r3, #3
   2f084:	466a      	mov	r2, sp
   2f086:	1ad3      	subs	r3, r2, r3
   2f088:	469d      	mov	sp, r3
   2f08a:	ab02      	add	r3, sp, #8
   2f08c:	3300      	adds	r3, #0
   2f08e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   2f090:	69fb      	ldr	r3, [r7, #28]
   2f092:	2b00      	cmp	r3, #0
   2f094:	d100      	bne.n	2f098 <_http_client_request+0x94>
   2f096:	e346      	b.n	2f726 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2f098:	69fb      	ldr	r3, [r7, #28]
   2f09a:	2241      	movs	r2, #65	; 0x41
   2f09c:	5c9b      	ldrb	r3, [r3, r2]
   2f09e:	2201      	movs	r2, #1
   2f0a0:	4013      	ands	r3, r2
   2f0a2:	b2db      	uxtb	r3, r3
   2f0a4:	2b00      	cmp	r3, #0
   2f0a6:	d000      	beq.n	2f0aa <_http_client_request+0xa6>
   2f0a8:	e33f      	b.n	2f72a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2f0aa:	69fb      	ldr	r3, [r7, #28]
   2f0ac:	33b0      	adds	r3, #176	; 0xb0
   2f0ae:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   2f0b0:	69fb      	ldr	r3, [r7, #28]
   2f0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f0b4:	2b03      	cmp	r3, #3
   2f0b6:	d003      	beq.n	2f0c0 <_http_client_request+0xbc>
   2f0b8:	2b04      	cmp	r3, #4
   2f0ba:	d100      	bne.n	2f0be <_http_client_request+0xba>
   2f0bc:	e1b3      	b.n	2f426 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   2f0be:	e32f      	b.n	2f720 <_http_client_request+0x71c>
		module->req.content_length = 0;
   2f0c0:	69fb      	ldr	r3, [r7, #28]
   2f0c2:	22cc      	movs	r2, #204	; 0xcc
   2f0c4:	2100      	movs	r1, #0
   2f0c6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2f0c8:	69fb      	ldr	r3, [r7, #28]
   2f0ca:	22d0      	movs	r2, #208	; 0xd0
   2f0cc:	2100      	movs	r1, #0
   2f0ce:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   2f0d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f0d2:	69fb      	ldr	r3, [r7, #28]
   2f0d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2f0d6:	4c90      	ldr	r4, [pc, #576]	; (2f318 <_http_client_request+0x314>)
   2f0d8:	2334      	movs	r3, #52	; 0x34
   2f0da:	2018      	movs	r0, #24
   2f0dc:	1838      	adds	r0, r7, r0
   2f0de:	18c0      	adds	r0, r0, r3
   2f0e0:	69fb      	ldr	r3, [r7, #28]
   2f0e2:	9300      	str	r3, [sp, #0]
   2f0e4:	0023      	movs	r3, r4
   2f0e6:	4c8d      	ldr	r4, [pc, #564]	; (2f31c <_http_client_request+0x318>)
   2f0e8:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2f0ea:	69fb      	ldr	r3, [r7, #28]
   2f0ec:	22c8      	movs	r2, #200	; 0xc8
   2f0ee:	5c9b      	ldrb	r3, [r3, r2]
   2f0f0:	2b01      	cmp	r3, #1
   2f0f2:	d10a      	bne.n	2f10a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2f0f4:	498a      	ldr	r1, [pc, #552]	; (2f320 <_http_client_request+0x31c>)
   2f0f6:	2334      	movs	r3, #52	; 0x34
   2f0f8:	2218      	movs	r2, #24
   2f0fa:	4694      	mov	ip, r2
   2f0fc:	44bc      	add	ip, r7
   2f0fe:	4463      	add	r3, ip
   2f100:	2204      	movs	r2, #4
   2f102:	0018      	movs	r0, r3
   2f104:	4b87      	ldr	r3, [pc, #540]	; (2f324 <_http_client_request+0x320>)
   2f106:	4798      	blx	r3
   2f108:	e04e      	b.n	2f1a8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   2f10a:	69fb      	ldr	r3, [r7, #28]
   2f10c:	22c8      	movs	r2, #200	; 0xc8
   2f10e:	5c9b      	ldrb	r3, [r3, r2]
   2f110:	2b02      	cmp	r3, #2
   2f112:	d10a      	bne.n	2f12a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   2f114:	4984      	ldr	r1, [pc, #528]	; (2f328 <_http_client_request+0x324>)
   2f116:	2334      	movs	r3, #52	; 0x34
   2f118:	2218      	movs	r2, #24
   2f11a:	4694      	mov	ip, r2
   2f11c:	44bc      	add	ip, r7
   2f11e:	4463      	add	r3, ip
   2f120:	2205      	movs	r2, #5
   2f122:	0018      	movs	r0, r3
   2f124:	4b7f      	ldr	r3, [pc, #508]	; (2f324 <_http_client_request+0x320>)
   2f126:	4798      	blx	r3
   2f128:	e03e      	b.n	2f1a8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   2f12a:	69fb      	ldr	r3, [r7, #28]
   2f12c:	22c8      	movs	r2, #200	; 0xc8
   2f12e:	5c9b      	ldrb	r3, [r3, r2]
   2f130:	2b03      	cmp	r3, #3
   2f132:	d10a      	bne.n	2f14a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   2f134:	497d      	ldr	r1, [pc, #500]	; (2f32c <_http_client_request+0x328>)
   2f136:	2334      	movs	r3, #52	; 0x34
   2f138:	2218      	movs	r2, #24
   2f13a:	4694      	mov	ip, r2
   2f13c:	44bc      	add	ip, r7
   2f13e:	4463      	add	r3, ip
   2f140:	2207      	movs	r2, #7
   2f142:	0018      	movs	r0, r3
   2f144:	4b77      	ldr	r3, [pc, #476]	; (2f324 <_http_client_request+0x320>)
   2f146:	4798      	blx	r3
   2f148:	e02e      	b.n	2f1a8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   2f14a:	69fb      	ldr	r3, [r7, #28]
   2f14c:	22c8      	movs	r2, #200	; 0xc8
   2f14e:	5c9b      	ldrb	r3, [r3, r2]
   2f150:	2b04      	cmp	r3, #4
   2f152:	d10a      	bne.n	2f16a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   2f154:	4976      	ldr	r1, [pc, #472]	; (2f330 <_http_client_request+0x32c>)
   2f156:	2334      	movs	r3, #52	; 0x34
   2f158:	2218      	movs	r2, #24
   2f15a:	4694      	mov	ip, r2
   2f15c:	44bc      	add	ip, r7
   2f15e:	4463      	add	r3, ip
   2f160:	2204      	movs	r2, #4
   2f162:	0018      	movs	r0, r3
   2f164:	4b6f      	ldr	r3, [pc, #444]	; (2f324 <_http_client_request+0x320>)
   2f166:	4798      	blx	r3
   2f168:	e01e      	b.n	2f1a8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2f16a:	69fb      	ldr	r3, [r7, #28]
   2f16c:	22c8      	movs	r2, #200	; 0xc8
   2f16e:	5c9b      	ldrb	r3, [r3, r2]
   2f170:	2b05      	cmp	r3, #5
   2f172:	d10a      	bne.n	2f18a <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   2f174:	496f      	ldr	r1, [pc, #444]	; (2f334 <_http_client_request+0x330>)
   2f176:	2334      	movs	r3, #52	; 0x34
   2f178:	2218      	movs	r2, #24
   2f17a:	4694      	mov	ip, r2
   2f17c:	44bc      	add	ip, r7
   2f17e:	4463      	add	r3, ip
   2f180:	2208      	movs	r2, #8
   2f182:	0018      	movs	r0, r3
   2f184:	4b67      	ldr	r3, [pc, #412]	; (2f324 <_http_client_request+0x320>)
   2f186:	4798      	blx	r3
   2f188:	e00e      	b.n	2f1a8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2f18a:	69fb      	ldr	r3, [r7, #28]
   2f18c:	22c8      	movs	r2, #200	; 0xc8
   2f18e:	5c9b      	ldrb	r3, [r3, r2]
   2f190:	2b06      	cmp	r3, #6
   2f192:	d109      	bne.n	2f1a8 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2f194:	4968      	ldr	r1, [pc, #416]	; (2f338 <_http_client_request+0x334>)
   2f196:	2334      	movs	r3, #52	; 0x34
   2f198:	2218      	movs	r2, #24
   2f19a:	4694      	mov	ip, r2
   2f19c:	44bc      	add	ip, r7
   2f19e:	4463      	add	r3, ip
   2f1a0:	2205      	movs	r2, #5
   2f1a2:	0018      	movs	r0, r3
   2f1a4:	4b5f      	ldr	r3, [pc, #380]	; (2f324 <_http_client_request+0x320>)
   2f1a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2f1a8:	69fb      	ldr	r3, [r7, #28]
   2f1aa:	3370      	adds	r3, #112	; 0x70
   2f1ac:	001c      	movs	r4, r3
   2f1ae:	69fb      	ldr	r3, [r7, #28]
   2f1b0:	3370      	adds	r3, #112	; 0x70
   2f1b2:	0018      	movs	r0, r3
   2f1b4:	4b61      	ldr	r3, [pc, #388]	; (2f33c <_http_client_request+0x338>)
   2f1b6:	4798      	blx	r3
   2f1b8:	0002      	movs	r2, r0
   2f1ba:	2334      	movs	r3, #52	; 0x34
   2f1bc:	2118      	movs	r1, #24
   2f1be:	468c      	mov	ip, r1
   2f1c0:	44bc      	add	ip, r7
   2f1c2:	4463      	add	r3, ip
   2f1c4:	0021      	movs	r1, r4
   2f1c6:	0018      	movs	r0, r3
   2f1c8:	4b56      	ldr	r3, [pc, #344]	; (2f324 <_http_client_request+0x320>)
   2f1ca:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   2f1cc:	495c      	ldr	r1, [pc, #368]	; (2f340 <_http_client_request+0x33c>)
   2f1ce:	2334      	movs	r3, #52	; 0x34
   2f1d0:	2218      	movs	r2, #24
   2f1d2:	4694      	mov	ip, r2
   2f1d4:	44bc      	add	ip, r7
   2f1d6:	4463      	add	r3, ip
   2f1d8:	220b      	movs	r2, #11
   2f1da:	0018      	movs	r0, r3
   2f1dc:	4b51      	ldr	r3, [pc, #324]	; (2f324 <_http_client_request+0x320>)
   2f1de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   2f1e0:	4958      	ldr	r1, [pc, #352]	; (2f344 <_http_client_request+0x340>)
   2f1e2:	2334      	movs	r3, #52	; 0x34
   2f1e4:	2218      	movs	r2, #24
   2f1e6:	4694      	mov	ip, r2
   2f1e8:	44bc      	add	ip, r7
   2f1ea:	4463      	add	r3, ip
   2f1ec:	220c      	movs	r2, #12
   2f1ee:	0018      	movs	r0, r3
   2f1f0:	4b4c      	ldr	r3, [pc, #304]	; (2f324 <_http_client_request+0x320>)
   2f1f2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   2f1f4:	69fb      	ldr	r3, [r7, #28]
   2f1f6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2f1f8:	69fb      	ldr	r3, [r7, #28]
   2f1fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2f1fc:	0018      	movs	r0, r3
   2f1fe:	4b4f      	ldr	r3, [pc, #316]	; (2f33c <_http_client_request+0x338>)
   2f200:	4798      	blx	r3
   2f202:	0002      	movs	r2, r0
   2f204:	2334      	movs	r3, #52	; 0x34
   2f206:	2118      	movs	r1, #24
   2f208:	468c      	mov	ip, r1
   2f20a:	44bc      	add	ip, r7
   2f20c:	4463      	add	r3, ip
   2f20e:	0021      	movs	r1, r4
   2f210:	0018      	movs	r0, r3
   2f212:	4b44      	ldr	r3, [pc, #272]	; (2f324 <_http_client_request+0x320>)
   2f214:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f216:	494c      	ldr	r1, [pc, #304]	; (2f348 <_http_client_request+0x344>)
   2f218:	2334      	movs	r3, #52	; 0x34
   2f21a:	2218      	movs	r2, #24
   2f21c:	4694      	mov	ip, r2
   2f21e:	44bc      	add	ip, r7
   2f220:	4463      	add	r3, ip
   2f222:	2202      	movs	r2, #2
   2f224:	0018      	movs	r0, r3
   2f226:	4b3f      	ldr	r3, [pc, #252]	; (2f324 <_http_client_request+0x320>)
   2f228:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   2f22a:	4948      	ldr	r1, [pc, #288]	; (2f34c <_http_client_request+0x348>)
   2f22c:	2334      	movs	r3, #52	; 0x34
   2f22e:	2218      	movs	r2, #24
   2f230:	4694      	mov	ip, r2
   2f232:	44bc      	add	ip, r7
   2f234:	4463      	add	r3, ip
   2f236:	2206      	movs	r2, #6
   2f238:	0018      	movs	r0, r3
   2f23a:	4b3a      	ldr	r3, [pc, #232]	; (2f324 <_http_client_request+0x320>)
   2f23c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   2f23e:	69fb      	ldr	r3, [r7, #28]
   2f240:	1c5c      	adds	r4, r3, #1
   2f242:	69fb      	ldr	r3, [r7, #28]
   2f244:	3301      	adds	r3, #1
   2f246:	0018      	movs	r0, r3
   2f248:	4b3c      	ldr	r3, [pc, #240]	; (2f33c <_http_client_request+0x338>)
   2f24a:	4798      	blx	r3
   2f24c:	0002      	movs	r2, r0
   2f24e:	2334      	movs	r3, #52	; 0x34
   2f250:	2118      	movs	r1, #24
   2f252:	468c      	mov	ip, r1
   2f254:	44bc      	add	ip, r7
   2f256:	4463      	add	r3, ip
   2f258:	0021      	movs	r1, r4
   2f25a:	0018      	movs	r0, r3
   2f25c:	4b31      	ldr	r3, [pc, #196]	; (2f324 <_http_client_request+0x320>)
   2f25e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f260:	4939      	ldr	r1, [pc, #228]	; (2f348 <_http_client_request+0x344>)
   2f262:	2334      	movs	r3, #52	; 0x34
   2f264:	2218      	movs	r2, #24
   2f266:	4694      	mov	ip, r2
   2f268:	44bc      	add	ip, r7
   2f26a:	4463      	add	r3, ip
   2f26c:	2202      	movs	r2, #2
   2f26e:	0018      	movs	r0, r3
   2f270:	4b2c      	ldr	r3, [pc, #176]	; (2f324 <_http_client_request+0x320>)
   2f272:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2f274:	4936      	ldr	r1, [pc, #216]	; (2f350 <_http_client_request+0x34c>)
   2f276:	2334      	movs	r3, #52	; 0x34
   2f278:	2218      	movs	r2, #24
   2f27a:	4694      	mov	ip, r2
   2f27c:	44bc      	add	ip, r7
   2f27e:	4463      	add	r3, ip
   2f280:	2218      	movs	r2, #24
   2f282:	0018      	movs	r0, r3
   2f284:	4b27      	ldr	r3, [pc, #156]	; (2f324 <_http_client_request+0x320>)
   2f286:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2f288:	4932      	ldr	r1, [pc, #200]	; (2f354 <_http_client_request+0x350>)
   2f28a:	2334      	movs	r3, #52	; 0x34
   2f28c:	2218      	movs	r2, #24
   2f28e:	4694      	mov	ip, r2
   2f290:	44bc      	add	ip, r7
   2f292:	4463      	add	r3, ip
   2f294:	2213      	movs	r2, #19
   2f296:	0018      	movs	r0, r3
   2f298:	4b22      	ldr	r3, [pc, #136]	; (2f324 <_http_client_request+0x320>)
   2f29a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   2f29c:	492e      	ldr	r1, [pc, #184]	; (2f358 <_http_client_request+0x354>)
   2f29e:	2334      	movs	r3, #52	; 0x34
   2f2a0:	2218      	movs	r2, #24
   2f2a2:	4694      	mov	ip, r2
   2f2a4:	44bc      	add	ip, r7
   2f2a6:	4463      	add	r3, ip
   2f2a8:	2217      	movs	r2, #23
   2f2aa:	0018      	movs	r0, r3
   2f2ac:	4b1d      	ldr	r3, [pc, #116]	; (2f324 <_http_client_request+0x320>)
   2f2ae:	4798      	blx	r3
		if (entity->read != NULL) {
   2f2b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2b2:	68db      	ldr	r3, [r3, #12]
   2f2b4:	2b00      	cmp	r3, #0
   2f2b6:	d100      	bne.n	2f2ba <_http_client_request+0x2b6>
   2f2b8:	e088      	b.n	2f3cc <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2f2ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2bc:	781b      	ldrb	r3, [r3, #0]
   2f2be:	2b00      	cmp	r3, #0
   2f2c0:	d00f      	beq.n	2f2e2 <_http_client_request+0x2de>
				module->req.content_length = -1;
   2f2c2:	69fb      	ldr	r3, [r7, #28]
   2f2c4:	21cc      	movs	r1, #204	; 0xcc
   2f2c6:	2201      	movs	r2, #1
   2f2c8:	4252      	negs	r2, r2
   2f2ca:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   2f2cc:	4923      	ldr	r1, [pc, #140]	; (2f35c <_http_client_request+0x358>)
   2f2ce:	2334      	movs	r3, #52	; 0x34
   2f2d0:	2218      	movs	r2, #24
   2f2d2:	4694      	mov	ip, r2
   2f2d4:	44bc      	add	ip, r7
   2f2d6:	4463      	add	r3, ip
   2f2d8:	221c      	movs	r2, #28
   2f2da:	0018      	movs	r0, r3
   2f2dc:	4b11      	ldr	r3, [pc, #68]	; (2f324 <_http_client_request+0x320>)
   2f2de:	4798      	blx	r3
   2f2e0:	e074      	b.n	2f3cc <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   2f2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2e4:	689b      	ldr	r3, [r3, #8]
   2f2e6:	2b00      	cmp	r3, #0
   2f2e8:	d070      	beq.n	2f3cc <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   2f2ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2ec:	689a      	ldr	r2, [r3, #8]
   2f2ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2f0:	695b      	ldr	r3, [r3, #20]
   2f2f2:	0018      	movs	r0, r3
   2f2f4:	4790      	blx	r2
   2f2f6:	0001      	movs	r1, r0
   2f2f8:	69fb      	ldr	r3, [r7, #28]
   2f2fa:	22cc      	movs	r2, #204	; 0xcc
   2f2fc:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   2f2fe:	69fb      	ldr	r3, [r7, #28]
   2f300:	22cc      	movs	r2, #204	; 0xcc
   2f302:	589b      	ldr	r3, [r3, r2]
   2f304:	2b00      	cmp	r3, #0
   2f306:	da2b      	bge.n	2f360 <_http_client_request+0x35c>
					module->req.content_length = 0;
   2f308:	69fb      	ldr	r3, [r7, #28]
   2f30a:	22cc      	movs	r2, #204	; 0xcc
   2f30c:	2100      	movs	r1, #0
   2f30e:	5099      	str	r1, [r3, r2]
   2f310:	e05c      	b.n	2f3cc <_http_client_request+0x3c8>
   2f312:	46c0      	nop			; (mov r8, r8)
   2f314:	00037210 	.word	0x00037210
   2f318:	0002ef7d 	.word	0x0002ef7d
   2f31c:	0002fee5 	.word	0x0002fee5
   2f320:	00037134 	.word	0x00037134
   2f324:	0002ff65 	.word	0x0002ff65
   2f328:	0003713c 	.word	0x0003713c
   2f32c:	00037144 	.word	0x00037144
   2f330:	0003714c 	.word	0x0003714c
   2f334:	00037154 	.word	0x00037154
   2f338:	00037160 	.word	0x00037160
   2f33c:	000325bb 	.word	0x000325bb
   2f340:	00037168 	.word	0x00037168
   2f344:	00037174 	.word	0x00037174
   2f348:	00037184 	.word	0x00037184
   2f34c:	00037188 	.word	0x00037188
   2f350:	00037190 	.word	0x00037190
   2f354:	000371ac 	.word	0x000371ac
   2f358:	000371c0 	.word	0x000371c0
   2f35c:	000371d8 	.word	0x000371d8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   2f360:	69fb      	ldr	r3, [r7, #28]
   2f362:	22cc      	movs	r2, #204	; 0xcc
   2f364:	589b      	ldr	r3, [r3, r2]
   2f366:	001a      	movs	r2, r3
   2f368:	49e0      	ldr	r1, [pc, #896]	; (2f6ec <_http_client_request+0x6e8>)
   2f36a:	2328      	movs	r3, #40	; 0x28
   2f36c:	2018      	movs	r0, #24
   2f36e:	4684      	mov	ip, r0
   2f370:	44bc      	add	ip, r7
   2f372:	4463      	add	r3, ip
   2f374:	0018      	movs	r0, r3
   2f376:	4bde      	ldr	r3, [pc, #888]	; (2f6f0 <_http_client_request+0x6ec>)
   2f378:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   2f37a:	49de      	ldr	r1, [pc, #888]	; (2f6f4 <_http_client_request+0x6f0>)
   2f37c:	2334      	movs	r3, #52	; 0x34
   2f37e:	2218      	movs	r2, #24
   2f380:	4694      	mov	ip, r2
   2f382:	44bc      	add	ip, r7
   2f384:	4463      	add	r3, ip
   2f386:	2210      	movs	r2, #16
   2f388:	0018      	movs	r0, r3
   2f38a:	4bdb      	ldr	r3, [pc, #876]	; (2f6f8 <_http_client_request+0x6f4>)
   2f38c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   2f38e:	2328      	movs	r3, #40	; 0x28
   2f390:	2218      	movs	r2, #24
   2f392:	4694      	mov	ip, r2
   2f394:	44bc      	add	ip, r7
   2f396:	4463      	add	r3, ip
   2f398:	0018      	movs	r0, r3
   2f39a:	4bd8      	ldr	r3, [pc, #864]	; (2f6fc <_http_client_request+0x6f8>)
   2f39c:	4798      	blx	r3
   2f39e:	0002      	movs	r2, r0
   2f3a0:	2328      	movs	r3, #40	; 0x28
   2f3a2:	2118      	movs	r1, #24
   2f3a4:	1879      	adds	r1, r7, r1
   2f3a6:	18c9      	adds	r1, r1, r3
   2f3a8:	2334      	movs	r3, #52	; 0x34
   2f3aa:	2018      	movs	r0, #24
   2f3ac:	4684      	mov	ip, r0
   2f3ae:	44bc      	add	ip, r7
   2f3b0:	4463      	add	r3, ip
   2f3b2:	0018      	movs	r0, r3
   2f3b4:	4bd0      	ldr	r3, [pc, #832]	; (2f6f8 <_http_client_request+0x6f4>)
   2f3b6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f3b8:	49d1      	ldr	r1, [pc, #836]	; (2f700 <_http_client_request+0x6fc>)
   2f3ba:	2334      	movs	r3, #52	; 0x34
   2f3bc:	2218      	movs	r2, #24
   2f3be:	4694      	mov	ip, r2
   2f3c0:	44bc      	add	ip, r7
   2f3c2:	4463      	add	r3, ip
   2f3c4:	2202      	movs	r2, #2
   2f3c6:	0018      	movs	r0, r3
   2f3c8:	4bcb      	ldr	r3, [pc, #812]	; (2f6f8 <_http_client_request+0x6f4>)
   2f3ca:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   2f3cc:	69fb      	ldr	r3, [r7, #28]
   2f3ce:	22d4      	movs	r2, #212	; 0xd4
   2f3d0:	589b      	ldr	r3, [r3, r2]
   2f3d2:	2b00      	cmp	r3, #0
   2f3d4:	d012      	beq.n	2f3fc <_http_client_request+0x3f8>
				module->req.ext_header,
   2f3d6:	69fb      	ldr	r3, [r7, #28]
   2f3d8:	22d4      	movs	r2, #212	; 0xd4
   2f3da:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   2f3dc:	69fb      	ldr	r3, [r7, #28]
   2f3de:	22d4      	movs	r2, #212	; 0xd4
   2f3e0:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   2f3e2:	0018      	movs	r0, r3
   2f3e4:	4bc5      	ldr	r3, [pc, #788]	; (2f6fc <_http_client_request+0x6f8>)
   2f3e6:	4798      	blx	r3
   2f3e8:	0002      	movs	r2, r0
   2f3ea:	2334      	movs	r3, #52	; 0x34
   2f3ec:	2118      	movs	r1, #24
   2f3ee:	468c      	mov	ip, r1
   2f3f0:	44bc      	add	ip, r7
   2f3f2:	4463      	add	r3, ip
   2f3f4:	0021      	movs	r1, r4
   2f3f6:	0018      	movs	r0, r3
   2f3f8:	4bbf      	ldr	r3, [pc, #764]	; (2f6f8 <_http_client_request+0x6f4>)
   2f3fa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f3fc:	49c0      	ldr	r1, [pc, #768]	; (2f700 <_http_client_request+0x6fc>)
   2f3fe:	2334      	movs	r3, #52	; 0x34
   2f400:	2218      	movs	r2, #24
   2f402:	4694      	mov	ip, r2
   2f404:	44bc      	add	ip, r7
   2f406:	4463      	add	r3, ip
   2f408:	2202      	movs	r2, #2
   2f40a:	0018      	movs	r0, r3
   2f40c:	4bba      	ldr	r3, [pc, #744]	; (2f6f8 <_http_client_request+0x6f4>)
   2f40e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   2f410:	2334      	movs	r3, #52	; 0x34
   2f412:	2218      	movs	r2, #24
   2f414:	4694      	mov	ip, r2
   2f416:	44bc      	add	ip, r7
   2f418:	4463      	add	r3, ip
   2f41a:	0018      	movs	r0, r3
   2f41c:	4bb9      	ldr	r3, [pc, #740]	; (2f704 <_http_client_request+0x700>)
   2f41e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   2f420:	69fb      	ldr	r3, [r7, #28]
   2f422:	2204      	movs	r2, #4
   2f424:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   2f426:	69fb      	ldr	r3, [r7, #28]
   2f428:	22cc      	movs	r2, #204	; 0xcc
   2f42a:	589b      	ldr	r3, [r3, r2]
   2f42c:	2b00      	cmp	r3, #0
   2f42e:	db00      	blt.n	2f432 <_http_client_request+0x42e>
   2f430:	e0c6      	b.n	2f5c0 <_http_client_request+0x5bc>
   2f432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f434:	68db      	ldr	r3, [r3, #12]
   2f436:	2b00      	cmp	r3, #0
   2f438:	d100      	bne.n	2f43c <_http_client_request+0x438>
   2f43a:	e0c1      	b.n	2f5c0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f43e:	68dc      	ldr	r4, [r3, #12]
   2f440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f442:	6958      	ldr	r0, [r3, #20]
   2f444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f446:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2f448:	69fb      	ldr	r3, [r7, #28]
   2f44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f44c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2f44e:	69fb      	ldr	r3, [r7, #28]
   2f450:	22d0      	movs	r2, #208	; 0xd0
   2f452:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f454:	002a      	movs	r2, r5
   2f456:	47a0      	blx	r4
   2f458:	0003      	movs	r3, r0
   2f45a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2f45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f45e:	2b00      	cmp	r3, #0
   2f460:	da01      	bge.n	2f466 <_http_client_request+0x462>
				size = 0;
   2f462:	2300      	movs	r3, #0
   2f464:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   2f466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f468:	220a      	movs	r2, #10
   2f46a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   2f46c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f46e:	220d      	movs	r2, #13
   2f470:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   2f472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f474:	3305      	adds	r3, #5
   2f476:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2f478:	210d      	movs	r1, #13
   2f47a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   2f47c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f47e:	3306      	adds	r3, #6
   2f480:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2f482:	210a      	movs	r1, #10
   2f484:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   2f486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f488:	2b00      	cmp	r3, #0
   2f48a:	db14      	blt.n	2f4b6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   2f48c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f48e:	3302      	adds	r3, #2
   2f490:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   2f492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f494:	4a9c      	ldr	r2, [pc, #624]	; (2f708 <_http_client_request+0x704>)
   2f496:	4013      	ands	r3, r2
   2f498:	d504      	bpl.n	2f4a4 <_http_client_request+0x4a0>
   2f49a:	3b01      	subs	r3, #1
   2f49c:	2210      	movs	r2, #16
   2f49e:	4252      	negs	r2, r2
   2f4a0:	4313      	orrs	r3, r2
   2f4a2:	3301      	adds	r3, #1
   2f4a4:	001a      	movs	r2, r3
   2f4a6:	2318      	movs	r3, #24
   2f4a8:	2118      	movs	r1, #24
   2f4aa:	468c      	mov	ip, r1
   2f4ac:	44bc      	add	ip, r7
   2f4ae:	4463      	add	r3, ip
   2f4b0:	5c9a      	ldrb	r2, [r3, r2]
   2f4b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f4b4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   2f4b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4b8:	2b0f      	cmp	r3, #15
   2f4ba:	dd19      	ble.n	2f4f0 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   2f4bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f4be:	3301      	adds	r3, #1
   2f4c0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   2f4c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4c4:	2b00      	cmp	r3, #0
   2f4c6:	da00      	bge.n	2f4ca <_http_client_request+0x4c6>
   2f4c8:	330f      	adds	r3, #15
   2f4ca:	111b      	asrs	r3, r3, #4
   2f4cc:	001a      	movs	r2, r3
   2f4ce:	4b8e      	ldr	r3, [pc, #568]	; (2f708 <_http_client_request+0x704>)
   2f4d0:	4013      	ands	r3, r2
   2f4d2:	d504      	bpl.n	2f4de <_http_client_request+0x4da>
   2f4d4:	3b01      	subs	r3, #1
   2f4d6:	2210      	movs	r2, #16
   2f4d8:	4252      	negs	r2, r2
   2f4da:	4313      	orrs	r3, r2
   2f4dc:	3301      	adds	r3, #1
   2f4de:	001a      	movs	r2, r3
   2f4e0:	2318      	movs	r3, #24
   2f4e2:	2118      	movs	r1, #24
   2f4e4:	468c      	mov	ip, r1
   2f4e6:	44bc      	add	ip, r7
   2f4e8:	4463      	add	r3, ip
   2f4ea:	5c9a      	ldrb	r2, [r3, r2]
   2f4ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f4ee:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   2f4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4f2:	2bff      	cmp	r3, #255	; 0xff
   2f4f4:	dd18      	ble.n	2f528 <_http_client_request+0x524>
				ptr = buffer;
   2f4f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f4f8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   2f4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4fc:	2b00      	cmp	r3, #0
   2f4fe:	da00      	bge.n	2f502 <_http_client_request+0x4fe>
   2f500:	33ff      	adds	r3, #255	; 0xff
   2f502:	121b      	asrs	r3, r3, #8
   2f504:	001a      	movs	r2, r3
   2f506:	4b80      	ldr	r3, [pc, #512]	; (2f708 <_http_client_request+0x704>)
   2f508:	4013      	ands	r3, r2
   2f50a:	d504      	bpl.n	2f516 <_http_client_request+0x512>
   2f50c:	3b01      	subs	r3, #1
   2f50e:	2210      	movs	r2, #16
   2f510:	4252      	negs	r2, r2
   2f512:	4313      	orrs	r3, r2
   2f514:	3301      	adds	r3, #1
   2f516:	001a      	movs	r2, r3
   2f518:	2318      	movs	r3, #24
   2f51a:	2118      	movs	r1, #24
   2f51c:	468c      	mov	ip, r1
   2f51e:	44bc      	add	ip, r7
   2f520:	4463      	add	r3, ip
   2f522:	5c9a      	ldrb	r2, [r3, r2]
   2f524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f526:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   2f528:	69fb      	ldr	r3, [r7, #28]
   2f52a:	2000      	movs	r0, #0
   2f52c:	5618      	ldrsb	r0, [r3, r0]
   2f52e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f530:	3303      	adds	r3, #3
   2f532:	001a      	movs	r2, r3
   2f534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f536:	1ad3      	subs	r3, r2, r3
   2f538:	b29a      	uxth	r2, r3
   2f53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f53c:	b29b      	uxth	r3, r3
   2f53e:	18d3      	adds	r3, r2, r3
   2f540:	b29b      	uxth	r3, r3
   2f542:	3304      	adds	r3, #4
   2f544:	b29a      	uxth	r2, r3
   2f546:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f548:	2300      	movs	r3, #0
   2f54a:	4c70      	ldr	r4, [pc, #448]	; (2f70c <_http_client_request+0x708>)
   2f54c:	47a0      	blx	r4
   2f54e:	0003      	movs	r3, r0
   2f550:	663b      	str	r3, [r7, #96]	; 0x60
   2f552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2f554:	2b00      	cmp	r3, #0
   2f556:	da07      	bge.n	2f568 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   2f558:	2305      	movs	r3, #5
   2f55a:	425a      	negs	r2, r3
   2f55c:	69fb      	ldr	r3, [r7, #28]
   2f55e:	0011      	movs	r1, r2
   2f560:	0018      	movs	r0, r3
   2f562:	4b6b      	ldr	r3, [pc, #428]	; (2f710 <_http_client_request+0x70c>)
   2f564:	4798      	blx	r3
				return;
   2f566:	e0e1      	b.n	2f72c <_http_client_request+0x728>
			module->req.sent_length += size;
   2f568:	69fb      	ldr	r3, [r7, #28]
   2f56a:	22d0      	movs	r2, #208	; 0xd0
   2f56c:	589a      	ldr	r2, [r3, r2]
   2f56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f570:	18d2      	adds	r2, r2, r3
   2f572:	69fb      	ldr	r3, [r7, #28]
   2f574:	21d0      	movs	r1, #208	; 0xd0
   2f576:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   2f578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f57a:	2b00      	cmp	r3, #0
   2f57c:	d000      	beq.n	2f580 <_http_client_request+0x57c>
   2f57e:	e0c9      	b.n	2f714 <_http_client_request+0x710>
				if (module->req.entity.close) {
   2f580:	69fb      	ldr	r3, [r7, #28]
   2f582:	22c0      	movs	r2, #192	; 0xc0
   2f584:	589b      	ldr	r3, [r3, r2]
   2f586:	2b00      	cmp	r3, #0
   2f588:	d007      	beq.n	2f59a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   2f58a:	69fb      	ldr	r3, [r7, #28]
   2f58c:	22c0      	movs	r2, #192	; 0xc0
   2f58e:	589b      	ldr	r3, [r3, r2]
   2f590:	69fa      	ldr	r2, [r7, #28]
   2f592:	21c4      	movs	r1, #196	; 0xc4
   2f594:	5852      	ldr	r2, [r2, r1]
   2f596:	0010      	movs	r0, r2
   2f598:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2f59a:	69fb      	ldr	r3, [r7, #28]
   2f59c:	2202      	movs	r2, #2
   2f59e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2f5a0:	69fb      	ldr	r3, [r7, #28]
   2f5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5a4:	2b00      	cmp	r3, #0
   2f5a6:	d100      	bne.n	2f5aa <_http_client_request+0x5a6>
   2f5a8:	e0b5      	b.n	2f716 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f5aa:	69fb      	ldr	r3, [r7, #28]
   2f5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5ae:	220c      	movs	r2, #12
   2f5b0:	2118      	movs	r1, #24
   2f5b2:	468c      	mov	ip, r1
   2f5b4:	44bc      	add	ip, r7
   2f5b6:	4462      	add	r2, ip
   2f5b8:	69f8      	ldr	r0, [r7, #28]
   2f5ba:	2101      	movs	r1, #1
   2f5bc:	4798      	blx	r3
				break;
   2f5be:	e0aa      	b.n	2f716 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   2f5c0:	69fb      	ldr	r3, [r7, #28]
   2f5c2:	22cc      	movs	r2, #204	; 0xcc
   2f5c4:	589b      	ldr	r3, [r3, r2]
   2f5c6:	2b00      	cmp	r3, #0
   2f5c8:	dc00      	bgt.n	2f5cc <_http_client_request+0x5c8>
   2f5ca:	e07c      	b.n	2f6c6 <_http_client_request+0x6c2>
   2f5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f5ce:	68db      	ldr	r3, [r3, #12]
   2f5d0:	2b00      	cmp	r3, #0
   2f5d2:	d100      	bne.n	2f5d6 <_http_client_request+0x5d2>
   2f5d4:	e077      	b.n	2f6c6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   2f5d6:	69fb      	ldr	r3, [r7, #28]
   2f5d8:	22d0      	movs	r2, #208	; 0xd0
   2f5da:	589a      	ldr	r2, [r3, r2]
   2f5dc:	69fb      	ldr	r3, [r7, #28]
   2f5de:	21cc      	movs	r1, #204	; 0xcc
   2f5e0:	585b      	ldr	r3, [r3, r1]
   2f5e2:	429a      	cmp	r2, r3
   2f5e4:	db1f      	blt.n	2f626 <_http_client_request+0x622>
				if (module->req.entity.close) {
   2f5e6:	69fb      	ldr	r3, [r7, #28]
   2f5e8:	22c0      	movs	r2, #192	; 0xc0
   2f5ea:	589b      	ldr	r3, [r3, r2]
   2f5ec:	2b00      	cmp	r3, #0
   2f5ee:	d007      	beq.n	2f600 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   2f5f0:	69fb      	ldr	r3, [r7, #28]
   2f5f2:	22c0      	movs	r2, #192	; 0xc0
   2f5f4:	589b      	ldr	r3, [r3, r2]
   2f5f6:	69fa      	ldr	r2, [r7, #28]
   2f5f8:	21c4      	movs	r1, #196	; 0xc4
   2f5fa:	5852      	ldr	r2, [r2, r1]
   2f5fc:	0010      	movs	r0, r2
   2f5fe:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2f600:	69fb      	ldr	r3, [r7, #28]
   2f602:	2202      	movs	r2, #2
   2f604:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2f606:	69fb      	ldr	r3, [r7, #28]
   2f608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f60a:	2b00      	cmp	r3, #0
   2f60c:	d100      	bne.n	2f610 <_http_client_request+0x60c>
   2f60e:	e084      	b.n	2f71a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f610:	69fb      	ldr	r3, [r7, #28]
   2f612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f614:	220c      	movs	r2, #12
   2f616:	2118      	movs	r1, #24
   2f618:	468c      	mov	ip, r1
   2f61a:	44bc      	add	ip, r7
   2f61c:	4462      	add	r2, ip
   2f61e:	69f8      	ldr	r0, [r7, #28]
   2f620:	2101      	movs	r1, #1
   2f622:	4798      	blx	r3
				break;
   2f624:	e079      	b.n	2f71a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   2f626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f628:	68dc      	ldr	r4, [r3, #12]
   2f62a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f62c:	6958      	ldr	r0, [r3, #20]
   2f62e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f630:	69fb      	ldr	r3, [r7, #28]
   2f632:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   2f634:	69fb      	ldr	r3, [r7, #28]
   2f636:	22d0      	movs	r2, #208	; 0xd0
   2f638:	589b      	ldr	r3, [r3, r2]
   2f63a:	002a      	movs	r2, r5
   2f63c:	47a0      	blx	r4
   2f63e:	0003      	movs	r3, r0
   2f640:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2f642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f644:	2b00      	cmp	r3, #0
   2f646:	da0d      	bge.n	2f664 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   2f648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f64a:	2b00      	cmp	r3, #0
   2f64c:	d102      	bne.n	2f654 <_http_client_request+0x650>
   2f64e:	234d      	movs	r3, #77	; 0x4d
   2f650:	425b      	negs	r3, r3
   2f652:	e001      	b.n	2f658 <_http_client_request+0x654>
   2f654:	2305      	movs	r3, #5
   2f656:	425b      	negs	r3, r3
   2f658:	69fa      	ldr	r2, [r7, #28]
   2f65a:	0019      	movs	r1, r3
   2f65c:	0010      	movs	r0, r2
   2f65e:	4b2c      	ldr	r3, [pc, #176]	; (2f710 <_http_client_request+0x70c>)
   2f660:	4798      	blx	r3
			if (size < 0) {
   2f662:	e057      	b.n	2f714 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   2f664:	69fb      	ldr	r3, [r7, #28]
   2f666:	22cc      	movs	r2, #204	; 0xcc
   2f668:	589a      	ldr	r2, [r3, r2]
   2f66a:	69fb      	ldr	r3, [r7, #28]
   2f66c:	21d0      	movs	r1, #208	; 0xd0
   2f66e:	585b      	ldr	r3, [r3, r1]
   2f670:	1ad2      	subs	r2, r2, r3
   2f672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f674:	429a      	cmp	r2, r3
   2f676:	da07      	bge.n	2f688 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   2f678:	69fb      	ldr	r3, [r7, #28]
   2f67a:	22cc      	movs	r2, #204	; 0xcc
   2f67c:	589a      	ldr	r2, [r3, r2]
   2f67e:	69fb      	ldr	r3, [r7, #28]
   2f680:	21d0      	movs	r1, #208	; 0xd0
   2f682:	585b      	ldr	r3, [r3, r1]
   2f684:	1ad3      	subs	r3, r2, r3
   2f686:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   2f688:	69fb      	ldr	r3, [r7, #28]
   2f68a:	2000      	movs	r0, #0
   2f68c:	5618      	ldrsb	r0, [r3, r0]
   2f68e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f692:	b29a      	uxth	r2, r3
   2f694:	2300      	movs	r3, #0
   2f696:	4c1d      	ldr	r4, [pc, #116]	; (2f70c <_http_client_request+0x708>)
   2f698:	47a0      	blx	r4
   2f69a:	0003      	movs	r3, r0
   2f69c:	663b      	str	r3, [r7, #96]	; 0x60
   2f69e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2f6a0:	2b00      	cmp	r3, #0
   2f6a2:	da07      	bge.n	2f6b4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   2f6a4:	2305      	movs	r3, #5
   2f6a6:	425a      	negs	r2, r3
   2f6a8:	69fb      	ldr	r3, [r7, #28]
   2f6aa:	0011      	movs	r1, r2
   2f6ac:	0018      	movs	r0, r3
   2f6ae:	4b18      	ldr	r3, [pc, #96]	; (2f710 <_http_client_request+0x70c>)
   2f6b0:	4798      	blx	r3
					return;
   2f6b2:	e03b      	b.n	2f72c <_http_client_request+0x728>
				module->req.sent_length += size;
   2f6b4:	69fb      	ldr	r3, [r7, #28]
   2f6b6:	22d0      	movs	r2, #208	; 0xd0
   2f6b8:	589a      	ldr	r2, [r3, r2]
   2f6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f6bc:	18d2      	adds	r2, r2, r3
   2f6be:	69fb      	ldr	r3, [r7, #28]
   2f6c0:	21d0      	movs	r1, #208	; 0xd0
   2f6c2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   2f6c4:	e026      	b.n	2f714 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   2f6c6:	69fb      	ldr	r3, [r7, #28]
   2f6c8:	2202      	movs	r2, #2
   2f6ca:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   2f6cc:	69fb      	ldr	r3, [r7, #28]
   2f6ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f6d0:	2b00      	cmp	r3, #0
   2f6d2:	d024      	beq.n	2f71e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f6d4:	69fb      	ldr	r3, [r7, #28]
   2f6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f6d8:	220c      	movs	r2, #12
   2f6da:	2118      	movs	r1, #24
   2f6dc:	468c      	mov	ip, r1
   2f6de:	44bc      	add	ip, r7
   2f6e0:	4462      	add	r2, ip
   2f6e2:	69f8      	ldr	r0, [r7, #28]
   2f6e4:	2101      	movs	r1, #1
   2f6e6:	4798      	blx	r3
			break;
   2f6e8:	e019      	b.n	2f71e <_http_client_request+0x71a>
   2f6ea:	46c0      	nop			; (mov r8, r8)
   2f6ec:	000371f8 	.word	0x000371f8
   2f6f0:	000324c1 	.word	0x000324c1
   2f6f4:	000371fc 	.word	0x000371fc
   2f6f8:	0002ff65 	.word	0x0002ff65
   2f6fc:	000325bb 	.word	0x000325bb
   2f700:	00037184 	.word	0x00037184
   2f704:	0002ffa1 	.word	0x0002ffa1
   2f708:	8000000f 	.word	0x8000000f
   2f70c:	000234e9 	.word	0x000234e9
   2f710:	0002eeb1 	.word	0x0002eeb1
		break;
   2f714:	e004      	b.n	2f720 <_http_client_request+0x71c>
				break;
   2f716:	46c0      	nop			; (mov r8, r8)
   2f718:	e002      	b.n	2f720 <_http_client_request+0x71c>
				break;
   2f71a:	46c0      	nop			; (mov r8, r8)
   2f71c:	e000      	b.n	2f720 <_http_client_request+0x71c>
			break;
   2f71e:	46c0      	nop			; (mov r8, r8)
   2f720:	69bb      	ldr	r3, [r7, #24]
   2f722:	469d      	mov	sp, r3
   2f724:	e004      	b.n	2f730 <_http_client_request+0x72c>
		return;
   2f726:	46c0      	nop			; (mov r8, r8)
   2f728:	e000      	b.n	2f72c <_http_client_request+0x728>
		return;
   2f72a:	46c0      	nop			; (mov r8, r8)
   2f72c:	69bb      	ldr	r3, [r7, #24]
   2f72e:	469d      	mov	sp, r3
	}
}
   2f730:	46bd      	mov	sp, r7
   2f732:	b01e      	add	sp, #120	; 0x78
   2f734:	bc04      	pop	{r2}
   2f736:	4690      	mov	r8, r2
   2f738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f73a:	46c0      	nop			; (mov r8, r8)

0002f73c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   2f73c:	b590      	push	{r4, r7, lr}
   2f73e:	b083      	sub	sp, #12
   2f740:	af00      	add	r7, sp, #0
   2f742:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   2f744:	687b      	ldr	r3, [r7, #4]
   2f746:	2b00      	cmp	r3, #0
   2f748:	d021      	beq.n	2f78e <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   2f74a:	687b      	ldr	r3, [r7, #4]
   2f74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f74e:	687b      	ldr	r3, [r7, #4]
   2f750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f752:	429a      	cmp	r2, r3
   2f754:	d307      	bcc.n	2f766 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   2f756:	238b      	movs	r3, #139	; 0x8b
   2f758:	425a      	negs	r2, r3
   2f75a:	687b      	ldr	r3, [r7, #4]
   2f75c:	0011      	movs	r1, r2
   2f75e:	0018      	movs	r0, r3
   2f760:	4b0d      	ldr	r3, [pc, #52]	; (2f798 <_http_client_recv_packet+0x5c>)
   2f762:	4798      	blx	r3
		return;
   2f764:	e014      	b.n	2f790 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   2f766:	687b      	ldr	r3, [r7, #4]
   2f768:	2000      	movs	r0, #0
   2f76a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   2f76c:	687b      	ldr	r3, [r7, #4]
   2f76e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2f770:	687b      	ldr	r3, [r7, #4]
   2f772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f774:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2f776:	687b      	ldr	r3, [r7, #4]
   2f778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   2f77a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2f77c:	687b      	ldr	r3, [r7, #4]
   2f77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   2f780:	b29b      	uxth	r3, r3
   2f782:	1ad3      	subs	r3, r2, r3
   2f784:	b29a      	uxth	r2, r3
   2f786:	2300      	movs	r3, #0
   2f788:	4c04      	ldr	r4, [pc, #16]	; (2f79c <_http_client_recv_packet+0x60>)
   2f78a:	47a0      	blx	r4
   2f78c:	e000      	b.n	2f790 <_http_client_recv_packet+0x54>
		return;
   2f78e:	46c0      	nop			; (mov r8, r8)
}
   2f790:	46bd      	mov	sp, r7
   2f792:	b003      	add	sp, #12
   2f794:	bd90      	pop	{r4, r7, pc}
   2f796:	46c0      	nop			; (mov r8, r8)
   2f798:	0002eeb1 	.word	0x0002eeb1
   2f79c:	0002364d 	.word	0x0002364d

0002f7a0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   2f7a0:	b580      	push	{r7, lr}
   2f7a2:	b082      	sub	sp, #8
   2f7a4:	af00      	add	r7, sp, #0
   2f7a6:	6078      	str	r0, [r7, #4]
   2f7a8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   2f7aa:	687b      	ldr	r3, [r7, #4]
   2f7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f7ae:	683b      	ldr	r3, [r7, #0]
   2f7b0:	18d2      	adds	r2, r2, r3
   2f7b2:	687b      	ldr	r3, [r7, #4]
   2f7b4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   2f7b6:	687b      	ldr	r3, [r7, #4]
   2f7b8:	2258      	movs	r2, #88	; 0x58
   2f7ba:	5a9b      	ldrh	r3, [r3, r2]
   2f7bc:	2b00      	cmp	r3, #0
   2f7be:	d007      	beq.n	2f7d0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   2f7c0:	687b      	ldr	r3, [r7, #4]
   2f7c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f7c4:	687b      	ldr	r3, [r7, #4]
   2f7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f7c8:	0019      	movs	r1, r3
   2f7ca:	0010      	movs	r0, r2
   2f7cc:	4b06      	ldr	r3, [pc, #24]	; (2f7e8 <_http_client_recved_packet+0x48>)
   2f7ce:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   2f7d0:	46c0      	nop			; (mov r8, r8)
   2f7d2:	687b      	ldr	r3, [r7, #4]
   2f7d4:	0018      	movs	r0, r3
   2f7d6:	4b05      	ldr	r3, [pc, #20]	; (2f7ec <_http_client_recved_packet+0x4c>)
   2f7d8:	4798      	blx	r3
   2f7da:	1e03      	subs	r3, r0, #0
   2f7dc:	d1f9      	bne.n	2f7d2 <_http_client_recved_packet+0x32>
}
   2f7de:	46c0      	nop			; (mov r8, r8)
   2f7e0:	46bd      	mov	sp, r7
   2f7e2:	b002      	add	sp, #8
   2f7e4:	bd80      	pop	{r7, pc}
   2f7e6:	46c0      	nop			; (mov r8, r8)
   2f7e8:	0003025d 	.word	0x0003025d
   2f7ec:	0002f7f1 	.word	0x0002f7f1

0002f7f0 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   2f7f0:	b580      	push	{r7, lr}
   2f7f2:	b082      	sub	sp, #8
   2f7f4:	af00      	add	r7, sp, #0
   2f7f6:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   2f7f8:	687b      	ldr	r3, [r7, #4]
   2f7fa:	22d8      	movs	r2, #216	; 0xd8
   2f7fc:	589b      	ldr	r3, [r3, r2]
   2f7fe:	2b00      	cmp	r3, #0
   2f800:	d002      	beq.n	2f808 <_http_client_handle_response+0x18>
   2f802:	2b01      	cmp	r3, #1
   2f804:	d006      	beq.n	2f814 <_http_client_handle_response+0x24>
   2f806:	e00b      	b.n	2f820 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   2f808:	687b      	ldr	r3, [r7, #4]
   2f80a:	0018      	movs	r0, r3
   2f80c:	4b07      	ldr	r3, [pc, #28]	; (2f82c <_http_client_handle_response+0x3c>)
   2f80e:	4798      	blx	r3
   2f810:	0003      	movs	r3, r0
   2f812:	e006      	b.n	2f822 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   2f814:	687b      	ldr	r3, [r7, #4]
   2f816:	0018      	movs	r0, r3
   2f818:	4b05      	ldr	r3, [pc, #20]	; (2f830 <_http_client_handle_response+0x40>)
   2f81a:	4798      	blx	r3
   2f81c:	0003      	movs	r3, r0
   2f81e:	e000      	b.n	2f822 <_http_client_handle_response+0x32>
	}
	return 0;
   2f820:	2300      	movs	r3, #0
}
   2f822:	0018      	movs	r0, r3
   2f824:	46bd      	mov	sp, r7
   2f826:	b002      	add	sp, #8
   2f828:	bd80      	pop	{r7, pc}
   2f82a:	46c0      	nop			; (mov r8, r8)
   2f82c:	0002f835 	.word	0x0002f835
   2f830:	0002fced 	.word	0x0002fced

0002f834 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   2f834:	b590      	push	{r4, r7, lr}
   2f836:	b08b      	sub	sp, #44	; 0x2c
   2f838:	af00      	add	r7, sp, #0
   2f83a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   2f83c:	687b      	ldr	r3, [r7, #4]
   2f83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f840:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2f842:	4b9a      	ldr	r3, [pc, #616]	; (2faac <_http_client_handle_header+0x278>)
   2f844:	681a      	ldr	r2, [r3, #0]
   2f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f848:	0011      	movs	r1, r2
   2f84a:	0018      	movs	r0, r3
   2f84c:	4b98      	ldr	r3, [pc, #608]	; (2fab0 <_http_client_handle_header+0x27c>)
   2f84e:	4798      	blx	r3
   2f850:	0003      	movs	r3, r0
   2f852:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   2f854:	69bb      	ldr	r3, [r7, #24]
   2f856:	2b00      	cmp	r3, #0
   2f858:	d007      	beq.n	2f86a <_http_client_handle_header+0x36>
   2f85a:	687b      	ldr	r3, [r7, #4]
   2f85c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2f85e:	687b      	ldr	r3, [r7, #4]
   2f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f862:	18d2      	adds	r2, r2, r3
   2f864:	69bb      	ldr	r3, [r7, #24]
   2f866:	429a      	cmp	r2, r3
   2f868:	d807      	bhi.n	2f87a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   2f86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f86c:	687b      	ldr	r3, [r7, #4]
   2f86e:	0011      	movs	r1, r2
   2f870:	0018      	movs	r0, r3
   2f872:	4b90      	ldr	r3, [pc, #576]	; (2fab4 <_http_client_handle_header+0x280>)
   2f874:	4798      	blx	r3
			return 0;
   2f876:	2300      	movs	r3, #0
   2f878:	e114      	b.n	2faa4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   2f87a:	4b8c      	ldr	r3, [pc, #560]	; (2faac <_http_client_handle_header+0x278>)
   2f87c:	681c      	ldr	r4, [r3, #0]
   2f87e:	4b8b      	ldr	r3, [pc, #556]	; (2faac <_http_client_handle_header+0x278>)
   2f880:	681b      	ldr	r3, [r3, #0]
   2f882:	0018      	movs	r0, r3
   2f884:	4b8c      	ldr	r3, [pc, #560]	; (2fab8 <_http_client_handle_header+0x284>)
   2f886:	4798      	blx	r3
   2f888:	0002      	movs	r2, r0
   2f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f88c:	0021      	movs	r1, r4
   2f88e:	0018      	movs	r0, r3
   2f890:	4b8a      	ldr	r3, [pc, #552]	; (2fabc <_http_client_handle_header+0x288>)
   2f892:	4798      	blx	r3
   2f894:	1e03      	subs	r3, r0, #0
   2f896:	d15d      	bne.n	2f954 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2f898:	4b84      	ldr	r3, [pc, #528]	; (2faac <_http_client_handle_header+0x278>)
   2f89a:	681b      	ldr	r3, [r3, #0]
   2f89c:	0018      	movs	r0, r3
   2f89e:	4b86      	ldr	r3, [pc, #536]	; (2fab8 <_http_client_handle_header+0x284>)
   2f8a0:	4798      	blx	r3
   2f8a2:	0002      	movs	r2, r0
   2f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f8a6:	189a      	adds	r2, r3, r2
   2f8a8:	687b      	ldr	r3, [r7, #4]
   2f8aa:	0011      	movs	r1, r2
   2f8ac:	0018      	movs	r0, r3
   2f8ae:	4b81      	ldr	r3, [pc, #516]	; (2fab4 <_http_client_handle_header+0x280>)
   2f8b0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   2f8b2:	687b      	ldr	r3, [r7, #4]
   2f8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f8b6:	2b00      	cmp	r3, #0
   2f8b8:	d046      	beq.n	2f948 <_http_client_handle_header+0x114>
   2f8ba:	687b      	ldr	r3, [r7, #4]
   2f8bc:	22e4      	movs	r2, #228	; 0xe4
   2f8be:	5a9b      	ldrh	r3, [r3, r2]
   2f8c0:	2b00      	cmp	r3, #0
   2f8c2:	d041      	beq.n	2f948 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   2f8c4:	687b      	ldr	r3, [r7, #4]
   2f8c6:	22dc      	movs	r2, #220	; 0xdc
   2f8c8:	589b      	ldr	r3, [r3, r2]
   2f8ca:	2b00      	cmp	r3, #0
   2f8cc:	da19      	bge.n	2f902 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   2f8ce:	687b      	ldr	r3, [r7, #4]
   2f8d0:	22e4      	movs	r2, #228	; 0xe4
   2f8d2:	5a9a      	ldrh	r2, [r3, r2]
   2f8d4:	230c      	movs	r3, #12
   2f8d6:	18fb      	adds	r3, r7, r3
   2f8d8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   2f8da:	230c      	movs	r3, #12
   2f8dc:	18fb      	adds	r3, r7, r3
   2f8de:	2201      	movs	r2, #1
   2f8e0:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   2f8e2:	687b      	ldr	r3, [r7, #4]
   2f8e4:	22e0      	movs	r2, #224	; 0xe0
   2f8e6:	2100      	movs	r1, #0
   2f8e8:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   2f8ea:	230c      	movs	r3, #12
   2f8ec:	18fb      	adds	r3, r7, r3
   2f8ee:	2200      	movs	r2, #0
   2f8f0:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f8f2:	687b      	ldr	r3, [r7, #4]
   2f8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f8f6:	220c      	movs	r2, #12
   2f8f8:	18ba      	adds	r2, r7, r2
   2f8fa:	6878      	ldr	r0, [r7, #4]
   2f8fc:	2102      	movs	r1, #2
   2f8fe:	4798      	blx	r3
   2f900:	e022      	b.n	2f948 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2f902:	687b      	ldr	r3, [r7, #4]
   2f904:	22dc      	movs	r2, #220	; 0xdc
   2f906:	589a      	ldr	r2, [r3, r2]
   2f908:	687b      	ldr	r3, [r7, #4]
   2f90a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f90c:	429a      	cmp	r2, r3
   2f90e:	dd1b      	ble.n	2f948 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   2f910:	687b      	ldr	r3, [r7, #4]
   2f912:	22e4      	movs	r2, #228	; 0xe4
   2f914:	5a9a      	ldrh	r2, [r3, r2]
   2f916:	230c      	movs	r3, #12
   2f918:	18fb      	adds	r3, r7, r3
   2f91a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   2f91c:	687b      	ldr	r3, [r7, #4]
   2f91e:	22dc      	movs	r2, #220	; 0xdc
   2f920:	589b      	ldr	r3, [r3, r2]
   2f922:	001a      	movs	r2, r3
   2f924:	230c      	movs	r3, #12
   2f926:	18fb      	adds	r3, r7, r3
   2f928:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   2f92a:	230c      	movs	r3, #12
   2f92c:	18fb      	adds	r3, r7, r3
   2f92e:	2200      	movs	r2, #0
   2f930:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   2f932:	687b      	ldr	r3, [r7, #4]
   2f934:	22e0      	movs	r2, #224	; 0xe0
   2f936:	2100      	movs	r1, #0
   2f938:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f93a:	687b      	ldr	r3, [r7, #4]
   2f93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f93e:	220c      	movs	r2, #12
   2f940:	18ba      	adds	r2, r7, r2
   2f942:	6878      	ldr	r0, [r7, #4]
   2f944:	2102      	movs	r1, #2
   2f946:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   2f948:	687b      	ldr	r3, [r7, #4]
   2f94a:	22d8      	movs	r2, #216	; 0xd8
   2f94c:	2101      	movs	r1, #1
   2f94e:	5099      	str	r1, [r3, r2]
			return 1;
   2f950:	2301      	movs	r3, #1
   2f952:	e0a7      	b.n	2faa4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   2f954:	495a      	ldr	r1, [pc, #360]	; (2fac0 <_http_client_handle_header+0x28c>)
   2f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f958:	2210      	movs	r2, #16
   2f95a:	0018      	movs	r0, r3
   2f95c:	4b57      	ldr	r3, [pc, #348]	; (2fabc <_http_client_handle_header+0x288>)
   2f95e:	4798      	blx	r3
   2f960:	1e03      	subs	r3, r0, #0
   2f962:	d109      	bne.n	2f978 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   2f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f966:	3310      	adds	r3, #16
   2f968:	0018      	movs	r0, r3
   2f96a:	4b56      	ldr	r3, [pc, #344]	; (2fac4 <_http_client_handle_header+0x290>)
   2f96c:	4798      	blx	r3
   2f96e:	0001      	movs	r1, r0
   2f970:	687b      	ldr	r3, [r7, #4]
   2f972:	22dc      	movs	r2, #220	; 0xdc
   2f974:	5099      	str	r1, [r3, r2]
   2f976:	e08b      	b.n	2fa90 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   2f978:	4953      	ldr	r1, [pc, #332]	; (2fac8 <_http_client_handle_header+0x294>)
   2f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f97c:	2213      	movs	r2, #19
   2f97e:	0018      	movs	r0, r3
   2f980:	4b4e      	ldr	r3, [pc, #312]	; (2fabc <_http_client_handle_header+0x288>)
   2f982:	4798      	blx	r3
   2f984:	1e03      	subs	r3, r0, #0
   2f986:	d127      	bne.n	2f9d8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f98a:	3313      	adds	r3, #19
   2f98c:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f98e:	e01e      	b.n	2f9ce <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   2f990:	6a3b      	ldr	r3, [r7, #32]
   2f992:	781b      	ldrb	r3, [r3, #0]
   2f994:	2b20      	cmp	r3, #32
   2f996:	d103      	bne.n	2f9a0 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f998:	6a3b      	ldr	r3, [r7, #32]
   2f99a:	3301      	adds	r3, #1
   2f99c:	623b      	str	r3, [r7, #32]
   2f99e:	e016      	b.n	2f9ce <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   2f9a0:	6a3b      	ldr	r3, [r7, #32]
   2f9a2:	781b      	ldrb	r3, [r3, #0]
   2f9a4:	2b43      	cmp	r3, #67	; 0x43
   2f9a6:	d003      	beq.n	2f9b0 <_http_client_handle_header+0x17c>
   2f9a8:	6a3b      	ldr	r3, [r7, #32]
   2f9aa:	781b      	ldrb	r3, [r3, #0]
   2f9ac:	2b63      	cmp	r3, #99	; 0x63
   2f9ae:	d105      	bne.n	2f9bc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   2f9b0:	687b      	ldr	r3, [r7, #4]
   2f9b2:	21cc      	movs	r1, #204	; 0xcc
   2f9b4:	2201      	movs	r2, #1
   2f9b6:	4252      	negs	r2, r2
   2f9b8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   2f9ba:	e069      	b.n	2fa90 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   2f9bc:	2386      	movs	r3, #134	; 0x86
   2f9be:	425a      	negs	r2, r3
   2f9c0:	687b      	ldr	r3, [r7, #4]
   2f9c2:	0011      	movs	r1, r2
   2f9c4:	0018      	movs	r0, r3
   2f9c6:	4b41      	ldr	r3, [pc, #260]	; (2facc <_http_client_handle_header+0x298>)
   2f9c8:	4798      	blx	r3
					return 0;
   2f9ca:	2300      	movs	r3, #0
   2f9cc:	e06a      	b.n	2faa4 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9ce:	69ba      	ldr	r2, [r7, #24]
   2f9d0:	6a3b      	ldr	r3, [r7, #32]
   2f9d2:	429a      	cmp	r2, r3
   2f9d4:	d8dc      	bhi.n	2f990 <_http_client_handle_header+0x15c>
   2f9d6:	e05b      	b.n	2fa90 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   2f9d8:	493d      	ldr	r1, [pc, #244]	; (2fad0 <_http_client_handle_header+0x29c>)
   2f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9dc:	220c      	movs	r2, #12
   2f9de:	0018      	movs	r0, r3
   2f9e0:	4b36      	ldr	r3, [pc, #216]	; (2fabc <_http_client_handle_header+0x288>)
   2f9e2:	4798      	blx	r3
   2f9e4:	1e03      	subs	r3, r0, #0
   2f9e6:	d126      	bne.n	2fa36 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   2f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9ea:	330c      	adds	r3, #12
   2f9ec:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9ee:	e01d      	b.n	2fa2c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   2f9f0:	69fb      	ldr	r3, [r7, #28]
   2f9f2:	781b      	ldrb	r3, [r3, #0]
   2f9f4:	2b20      	cmp	r3, #32
   2f9f6:	d103      	bne.n	2fa00 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9f8:	69fb      	ldr	r3, [r7, #28]
   2f9fa:	3301      	adds	r3, #1
   2f9fc:	61fb      	str	r3, [r7, #28]
   2f9fe:	e015      	b.n	2fa2c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2fa00:	69fb      	ldr	r3, [r7, #28]
   2fa02:	781b      	ldrb	r3, [r3, #0]
   2fa04:	2b4b      	cmp	r3, #75	; 0x4b
   2fa06:	d003      	beq.n	2fa10 <_http_client_handle_header+0x1dc>
   2fa08:	69fb      	ldr	r3, [r7, #28]
   2fa0a:	781b      	ldrb	r3, [r3, #0]
   2fa0c:	2b6b      	cmp	r3, #107	; 0x6b
   2fa0e:	d106      	bne.n	2fa1e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   2fa10:	687b      	ldr	r3, [r7, #4]
   2fa12:	2241      	movs	r2, #65	; 0x41
   2fa14:	5c99      	ldrb	r1, [r3, r2]
   2fa16:	2002      	movs	r0, #2
   2fa18:	4301      	orrs	r1, r0
   2fa1a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   2fa1c:	e038      	b.n	2fa90 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   2fa1e:	687b      	ldr	r3, [r7, #4]
   2fa20:	2241      	movs	r2, #65	; 0x41
   2fa22:	5c99      	ldrb	r1, [r3, r2]
   2fa24:	2002      	movs	r0, #2
   2fa26:	4381      	bics	r1, r0
   2fa28:	5499      	strb	r1, [r3, r2]
				break;
   2fa2a:	e031      	b.n	2fa90 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2fa2c:	69ba      	ldr	r2, [r7, #24]
   2fa2e:	69fb      	ldr	r3, [r7, #28]
   2fa30:	429a      	cmp	r2, r3
   2fa32:	d8dd      	bhi.n	2f9f0 <_http_client_handle_header+0x1bc>
   2fa34:	e02c      	b.n	2fa90 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2fa36:	4927      	ldr	r1, [pc, #156]	; (2fad4 <_http_client_handle_header+0x2a0>)
   2fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa3a:	2205      	movs	r2, #5
   2fa3c:	0018      	movs	r0, r3
   2fa3e:	4b1f      	ldr	r3, [pc, #124]	; (2fabc <_http_client_handle_header+0x288>)
   2fa40:	4798      	blx	r3
   2fa42:	1e03      	subs	r3, r0, #0
   2fa44:	d124      	bne.n	2fa90 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   2fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa48:	3309      	adds	r3, #9
   2fa4a:	0018      	movs	r0, r3
   2fa4c:	4b1d      	ldr	r3, [pc, #116]	; (2fac4 <_http_client_handle_header+0x290>)
   2fa4e:	4798      	blx	r3
   2fa50:	0003      	movs	r3, r0
   2fa52:	b299      	uxth	r1, r3
   2fa54:	687b      	ldr	r3, [r7, #4]
   2fa56:	22e4      	movs	r2, #228	; 0xe4
   2fa58:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   2fa5a:	687b      	ldr	r3, [r7, #4]
   2fa5c:	22dc      	movs	r2, #220	; 0xdc
   2fa5e:	2100      	movs	r1, #0
   2fa60:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   2fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa64:	3305      	adds	r3, #5
   2fa66:	781b      	ldrb	r3, [r3, #0]
   2fa68:	2b31      	cmp	r3, #49	; 0x31
   2fa6a:	d804      	bhi.n	2fa76 <_http_client_handle_header+0x242>
   2fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa6e:	3307      	adds	r3, #7
   2fa70:	781b      	ldrb	r3, [r3, #0]
   2fa72:	2b30      	cmp	r3, #48	; 0x30
   2fa74:	d906      	bls.n	2fa84 <_http_client_handle_header+0x250>
				module->permanent = 1;
   2fa76:	687b      	ldr	r3, [r7, #4]
   2fa78:	2241      	movs	r2, #65	; 0x41
   2fa7a:	5c99      	ldrb	r1, [r3, r2]
   2fa7c:	2002      	movs	r0, #2
   2fa7e:	4301      	orrs	r1, r0
   2fa80:	5499      	strb	r1, [r3, r2]
   2fa82:	e005      	b.n	2fa90 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   2fa84:	687b      	ldr	r3, [r7, #4]
   2fa86:	2241      	movs	r2, #65	; 0x41
   2fa88:	5c99      	ldrb	r1, [r3, r2]
   2fa8a:	2002      	movs	r0, #2
   2fa8c:	4381      	bics	r1, r0
   2fa8e:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   2fa90:	4b06      	ldr	r3, [pc, #24]	; (2faac <_http_client_handle_header+0x278>)
   2fa92:	681b      	ldr	r3, [r3, #0]
   2fa94:	0018      	movs	r0, r3
   2fa96:	4b08      	ldr	r3, [pc, #32]	; (2fab8 <_http_client_handle_header+0x284>)
   2fa98:	4798      	blx	r3
   2fa9a:	0002      	movs	r2, r0
   2fa9c:	69bb      	ldr	r3, [r7, #24]
   2fa9e:	189b      	adds	r3, r3, r2
   2faa0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2faa2:	e6ce      	b.n	2f842 <_http_client_handle_header+0xe>
	}
}
   2faa4:	0018      	movs	r0, r3
   2faa6:	46bd      	mov	sp, r7
   2faa8:	b00b      	add	sp, #44	; 0x2c
   2faaa:	bd90      	pop	{r4, r7, pc}
   2faac:	2000010c 	.word	0x2000010c
   2fab0:	00032639 	.word	0x00032639
   2fab4:	0002fe99 	.word	0x0002fe99
   2fab8:	000325bb 	.word	0x000325bb
   2fabc:	000325c9 	.word	0x000325c9
   2fac0:	000371fc 	.word	0x000371fc
   2fac4:	00032151 	.word	0x00032151
   2fac8:	00037220 	.word	0x00037220
   2facc:	0002eeb1 	.word	0x0002eeb1
   2fad0:	00037234 	.word	0x00037234
   2fad4:	00037244 	.word	0x00037244

0002fad8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   2fad8:	b580      	push	{r7, lr}
   2fada:	b088      	sub	sp, #32
   2fadc:	af00      	add	r7, sp, #0
   2fade:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   2fae0:	687b      	ldr	r3, [r7, #4]
   2fae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fae4:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   2fae6:	2300      	movs	r3, #0
   2fae8:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   2faea:	687b      	ldr	r3, [r7, #4]
   2faec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2faee:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   2faf0:	687b      	ldr	r3, [r7, #4]
   2faf2:	22e0      	movs	r2, #224	; 0xe0
   2faf4:	589b      	ldr	r3, [r3, r2]
   2faf6:	2b00      	cmp	r3, #0
   2faf8:	db71      	blt.n	2fbde <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   2fafa:	687b      	ldr	r3, [r7, #4]
   2fafc:	22e0      	movs	r2, #224	; 0xe0
   2fafe:	589b      	ldr	r3, [r3, r2]
   2fb00:	2b00      	cmp	r3, #0
   2fb02:	d134      	bne.n	2fb6e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2fb04:	687b      	ldr	r3, [r7, #4]
   2fb06:	22d8      	movs	r2, #216	; 0xd8
   2fb08:	2100      	movs	r1, #0
   2fb0a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2fb0c:	687b      	ldr	r3, [r7, #4]
   2fb0e:	22e4      	movs	r2, #228	; 0xe4
   2fb10:	2100      	movs	r1, #0
   2fb12:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2fb14:	2308      	movs	r3, #8
   2fb16:	18fb      	adds	r3, r7, r3
   2fb18:	2201      	movs	r2, #1
   2fb1a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   2fb1c:	2308      	movs	r3, #8
   2fb1e:	18fb      	adds	r3, r7, r3
   2fb20:	2200      	movs	r2, #0
   2fb22:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   2fb24:	2308      	movs	r3, #8
   2fb26:	18fb      	adds	r3, r7, r3
   2fb28:	2200      	movs	r2, #0
   2fb2a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   2fb2c:	687b      	ldr	r3, [r7, #4]
   2fb2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb30:	2b00      	cmp	r3, #0
   2fb32:	d006      	beq.n	2fb42 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fb34:	687b      	ldr	r3, [r7, #4]
   2fb36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb38:	2208      	movs	r2, #8
   2fb3a:	18ba      	adds	r2, r7, r2
   2fb3c:	6878      	ldr	r0, [r7, #4]
   2fb3e:	2103      	movs	r1, #3
   2fb40:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   2fb42:	687b      	ldr	r3, [r7, #4]
   2fb44:	2241      	movs	r2, #65	; 0x41
   2fb46:	5c9b      	ldrb	r3, [r3, r2]
   2fb48:	2202      	movs	r2, #2
   2fb4a:	4013      	ands	r3, r2
   2fb4c:	b2db      	uxtb	r3, r3
   2fb4e:	2b00      	cmp	r3, #0
   2fb50:	d105      	bne.n	2fb5e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   2fb52:	687b      	ldr	r3, [r7, #4]
   2fb54:	2100      	movs	r1, #0
   2fb56:	0018      	movs	r0, r3
   2fb58:	4b62      	ldr	r3, [pc, #392]	; (2fce4 <_http_client_read_chuked_entity+0x20c>)
   2fb5a:	4798      	blx	r3
					return;
   2fb5c:	e0bf      	b.n	2fcde <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   2fb5e:	697b      	ldr	r3, [r7, #20]
   2fb60:	1c9a      	adds	r2, r3, #2
   2fb62:	687b      	ldr	r3, [r7, #4]
   2fb64:	0011      	movs	r1, r2
   2fb66:	0018      	movs	r0, r3
   2fb68:	4b5f      	ldr	r3, [pc, #380]	; (2fce8 <_http_client_read_chuked_entity+0x210>)
   2fb6a:	4798      	blx	r3
   2fb6c:	e0b2      	b.n	2fcd4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   2fb6e:	687b      	ldr	r3, [r7, #4]
   2fb70:	22e0      	movs	r2, #224	; 0xe0
   2fb72:	589a      	ldr	r2, [r3, r2]
   2fb74:	69fb      	ldr	r3, [r7, #28]
   2fb76:	429a      	cmp	r2, r3
   2fb78:	dd00      	ble.n	2fb7c <_http_client_read_chuked_entity+0xa4>
   2fb7a:	e0ab      	b.n	2fcd4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   2fb7c:	687b      	ldr	r3, [r7, #4]
   2fb7e:	22e0      	movs	r2, #224	; 0xe0
   2fb80:	589b      	ldr	r3, [r3, r2]
   2fb82:	001a      	movs	r2, r3
   2fb84:	2308      	movs	r3, #8
   2fb86:	18fb      	adds	r3, r7, r3
   2fb88:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   2fb8a:	2308      	movs	r3, #8
   2fb8c:	18fb      	adds	r3, r7, r3
   2fb8e:	697a      	ldr	r2, [r7, #20]
   2fb90:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   2fb92:	2308      	movs	r3, #8
   2fb94:	18fb      	adds	r3, r7, r3
   2fb96:	2200      	movs	r2, #0
   2fb98:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   2fb9a:	687b      	ldr	r3, [r7, #4]
   2fb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb9e:	2b00      	cmp	r3, #0
   2fba0:	d006      	beq.n	2fbb0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fba2:	687b      	ldr	r3, [r7, #4]
   2fba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fba6:	2208      	movs	r2, #8
   2fba8:	18ba      	adds	r2, r7, r2
   2fbaa:	6878      	ldr	r0, [r7, #4]
   2fbac:	2103      	movs	r1, #3
   2fbae:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   2fbb0:	687b      	ldr	r3, [r7, #4]
   2fbb2:	22e0      	movs	r2, #224	; 0xe0
   2fbb4:	589b      	ldr	r3, [r3, r2]
   2fbb6:	3302      	adds	r3, #2
   2fbb8:	697a      	ldr	r2, [r7, #20]
   2fbba:	18d2      	adds	r2, r2, r3
   2fbbc:	687b      	ldr	r3, [r7, #4]
   2fbbe:	0011      	movs	r1, r2
   2fbc0:	0018      	movs	r0, r3
   2fbc2:	4b49      	ldr	r3, [pc, #292]	; (2fce8 <_http_client_read_chuked_entity+0x210>)
   2fbc4:	4798      	blx	r3
				length = (int)module->recved_size;
   2fbc6:	687b      	ldr	r3, [r7, #4]
   2fbc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fbca:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   2fbcc:	687b      	ldr	r3, [r7, #4]
   2fbce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fbd0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   2fbd2:	687b      	ldr	r3, [r7, #4]
   2fbd4:	21e0      	movs	r1, #224	; 0xe0
   2fbd6:	2201      	movs	r2, #1
   2fbd8:	4252      	negs	r2, r2
   2fbda:	505a      	str	r2, [r3, r1]
   2fbdc:	e07a      	b.n	2fcd4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   2fbde:	687b      	ldr	r3, [r7, #4]
   2fbe0:	22e0      	movs	r2, #224	; 0xe0
   2fbe2:	2100      	movs	r1, #0
   2fbe4:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   2fbe6:	e05a      	b.n	2fc9e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   2fbe8:	697b      	ldr	r3, [r7, #20]
   2fbea:	781b      	ldrb	r3, [r3, #0]
   2fbec:	2b0a      	cmp	r3, #10
   2fbee:	d106      	bne.n	2fbfe <_http_client_read_chuked_entity+0x126>
					buffer++;
   2fbf0:	697b      	ldr	r3, [r7, #20]
   2fbf2:	3301      	adds	r3, #1
   2fbf4:	617b      	str	r3, [r7, #20]
					length--;
   2fbf6:	69fb      	ldr	r3, [r7, #28]
   2fbf8:	3b01      	subs	r3, #1
   2fbfa:	61fb      	str	r3, [r7, #28]
					break;
   2fbfc:	e052      	b.n	2fca4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   2fbfe:	69bb      	ldr	r3, [r7, #24]
   2fc00:	2b00      	cmp	r3, #0
   2fc02:	d145      	bne.n	2fc90 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   2fc04:	697b      	ldr	r3, [r7, #20]
   2fc06:	781b      	ldrb	r3, [r3, #0]
   2fc08:	2b2f      	cmp	r3, #47	; 0x2f
   2fc0a:	d910      	bls.n	2fc2e <_http_client_read_chuked_entity+0x156>
   2fc0c:	697b      	ldr	r3, [r7, #20]
   2fc0e:	781b      	ldrb	r3, [r3, #0]
   2fc10:	2b39      	cmp	r3, #57	; 0x39
   2fc12:	d80c      	bhi.n	2fc2e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   2fc14:	687b      	ldr	r3, [r7, #4]
   2fc16:	22e0      	movs	r2, #224	; 0xe0
   2fc18:	589b      	ldr	r3, [r3, r2]
   2fc1a:	011b      	lsls	r3, r3, #4
   2fc1c:	697a      	ldr	r2, [r7, #20]
   2fc1e:	7812      	ldrb	r2, [r2, #0]
   2fc20:	189b      	adds	r3, r3, r2
   2fc22:	3b30      	subs	r3, #48	; 0x30
   2fc24:	001a      	movs	r2, r3
   2fc26:	687b      	ldr	r3, [r7, #4]
   2fc28:	21e0      	movs	r1, #224	; 0xe0
   2fc2a:	505a      	str	r2, [r3, r1]
   2fc2c:	e031      	b.n	2fc92 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   2fc2e:	697b      	ldr	r3, [r7, #20]
   2fc30:	781b      	ldrb	r3, [r3, #0]
   2fc32:	2b60      	cmp	r3, #96	; 0x60
   2fc34:	d910      	bls.n	2fc58 <_http_client_read_chuked_entity+0x180>
   2fc36:	697b      	ldr	r3, [r7, #20]
   2fc38:	781b      	ldrb	r3, [r3, #0]
   2fc3a:	2b66      	cmp	r3, #102	; 0x66
   2fc3c:	d80c      	bhi.n	2fc58 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   2fc3e:	687b      	ldr	r3, [r7, #4]
   2fc40:	22e0      	movs	r2, #224	; 0xe0
   2fc42:	589b      	ldr	r3, [r3, r2]
   2fc44:	011b      	lsls	r3, r3, #4
   2fc46:	697a      	ldr	r2, [r7, #20]
   2fc48:	7812      	ldrb	r2, [r2, #0]
   2fc4a:	189b      	adds	r3, r3, r2
   2fc4c:	3b61      	subs	r3, #97	; 0x61
   2fc4e:	001a      	movs	r2, r3
   2fc50:	687b      	ldr	r3, [r7, #4]
   2fc52:	21e0      	movs	r1, #224	; 0xe0
   2fc54:	505a      	str	r2, [r3, r1]
   2fc56:	e01c      	b.n	2fc92 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   2fc58:	697b      	ldr	r3, [r7, #20]
   2fc5a:	781b      	ldrb	r3, [r3, #0]
   2fc5c:	2b40      	cmp	r3, #64	; 0x40
   2fc5e:	d910      	bls.n	2fc82 <_http_client_read_chuked_entity+0x1aa>
   2fc60:	697b      	ldr	r3, [r7, #20]
   2fc62:	781b      	ldrb	r3, [r3, #0]
   2fc64:	2b46      	cmp	r3, #70	; 0x46
   2fc66:	d80c      	bhi.n	2fc82 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   2fc68:	687b      	ldr	r3, [r7, #4]
   2fc6a:	22e0      	movs	r2, #224	; 0xe0
   2fc6c:	589b      	ldr	r3, [r3, r2]
   2fc6e:	011b      	lsls	r3, r3, #4
   2fc70:	697a      	ldr	r2, [r7, #20]
   2fc72:	7812      	ldrb	r2, [r2, #0]
   2fc74:	189b      	adds	r3, r3, r2
   2fc76:	3b41      	subs	r3, #65	; 0x41
   2fc78:	001a      	movs	r2, r3
   2fc7a:	687b      	ldr	r3, [r7, #4]
   2fc7c:	21e0      	movs	r1, #224	; 0xe0
   2fc7e:	505a      	str	r2, [r3, r1]
   2fc80:	e007      	b.n	2fc92 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   2fc82:	697b      	ldr	r3, [r7, #20]
   2fc84:	781b      	ldrb	r3, [r3, #0]
   2fc86:	2b3b      	cmp	r3, #59	; 0x3b
   2fc88:	d103      	bne.n	2fc92 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   2fc8a:	2301      	movs	r3, #1
   2fc8c:	61bb      	str	r3, [r7, #24]
   2fc8e:	e000      	b.n	2fc92 <_http_client_read_chuked_entity+0x1ba>
					continue;
   2fc90:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   2fc92:	697b      	ldr	r3, [r7, #20]
   2fc94:	3301      	adds	r3, #1
   2fc96:	617b      	str	r3, [r7, #20]
   2fc98:	69fb      	ldr	r3, [r7, #28]
   2fc9a:	3b01      	subs	r3, #1
   2fc9c:	61fb      	str	r3, [r7, #28]
   2fc9e:	69fb      	ldr	r3, [r7, #28]
   2fca0:	2b00      	cmp	r3, #0
   2fca2:	dca1      	bgt.n	2fbe8 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2fca4:	687b      	ldr	r3, [r7, #4]
   2fca6:	22e0      	movs	r2, #224	; 0xe0
   2fca8:	589a      	ldr	r2, [r3, r2]
   2fcaa:	687b      	ldr	r3, [r7, #4]
   2fcac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2fcae:	429a      	cmp	r2, r3
   2fcb0:	dd07      	ble.n	2fcc2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   2fcb2:	238b      	movs	r3, #139	; 0x8b
   2fcb4:	425a      	negs	r2, r3
   2fcb6:	687b      	ldr	r3, [r7, #4]
   2fcb8:	0011      	movs	r1, r2
   2fcba:	0018      	movs	r0, r3
   2fcbc:	4b09      	ldr	r3, [pc, #36]	; (2fce4 <_http_client_read_chuked_entity+0x20c>)
   2fcbe:	4798      	blx	r3
				return;
   2fcc0:	e00d      	b.n	2fcde <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   2fcc2:	69fb      	ldr	r3, [r7, #28]
   2fcc4:	2b00      	cmp	r3, #0
   2fcc6:	d105      	bne.n	2fcd4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   2fcc8:	687b      	ldr	r3, [r7, #4]
   2fcca:	21e0      	movs	r1, #224	; 0xe0
   2fccc:	2201      	movs	r2, #1
   2fcce:	4252      	negs	r2, r2
   2fcd0:	505a      	str	r2, [r3, r1]
				return;
   2fcd2:	e004      	b.n	2fcde <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   2fcd4:	687b      	ldr	r3, [r7, #4]
   2fcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fcd8:	2b00      	cmp	r3, #0
   2fcda:	d000      	beq.n	2fcde <_http_client_read_chuked_entity+0x206>
   2fcdc:	e708      	b.n	2faf0 <_http_client_read_chuked_entity+0x18>
}
   2fcde:	46bd      	mov	sp, r7
   2fce0:	b008      	add	sp, #32
   2fce2:	bd80      	pop	{r7, pc}
   2fce4:	0002eeb1 	.word	0x0002eeb1
   2fce8:	0002fe99 	.word	0x0002fe99

0002fcec <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   2fcec:	b580      	push	{r7, lr}
   2fcee:	b086      	sub	sp, #24
   2fcf0:	af00      	add	r7, sp, #0
   2fcf2:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   2fcf4:	687b      	ldr	r3, [r7, #4]
   2fcf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fcf8:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   2fcfa:	687b      	ldr	r3, [r7, #4]
   2fcfc:	22dc      	movs	r2, #220	; 0xdc
   2fcfe:	589b      	ldr	r3, [r3, r2]
   2fd00:	2b00      	cmp	r3, #0
   2fd02:	db58      	blt.n	2fdb6 <_http_client_handle_entity+0xca>
   2fd04:	687b      	ldr	r3, [r7, #4]
   2fd06:	22dc      	movs	r2, #220	; 0xdc
   2fd08:	589a      	ldr	r2, [r3, r2]
   2fd0a:	687b      	ldr	r3, [r7, #4]
   2fd0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2fd0e:	429a      	cmp	r2, r3
   2fd10:	dc51      	bgt.n	2fdb6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   2fd12:	687b      	ldr	r3, [r7, #4]
   2fd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fd16:	0019      	movs	r1, r3
   2fd18:	687b      	ldr	r3, [r7, #4]
   2fd1a:	22dc      	movs	r2, #220	; 0xdc
   2fd1c:	589b      	ldr	r3, [r3, r2]
   2fd1e:	4299      	cmp	r1, r3
   2fd20:	da00      	bge.n	2fd24 <_http_client_handle_entity+0x38>
   2fd22:	e0a9      	b.n	2fe78 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   2fd24:	687b      	ldr	r3, [r7, #4]
   2fd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd28:	2b00      	cmp	r3, #0
   2fd2a:	d020      	beq.n	2fd6e <_http_client_handle_entity+0x82>
   2fd2c:	687b      	ldr	r3, [r7, #4]
   2fd2e:	22e4      	movs	r2, #228	; 0xe4
   2fd30:	5a9b      	ldrh	r3, [r3, r2]
   2fd32:	2b00      	cmp	r3, #0
   2fd34:	d01b      	beq.n	2fd6e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   2fd36:	687b      	ldr	r3, [r7, #4]
   2fd38:	22e4      	movs	r2, #228	; 0xe4
   2fd3a:	5a9a      	ldrh	r2, [r3, r2]
   2fd3c:	2308      	movs	r3, #8
   2fd3e:	18fb      	adds	r3, r7, r3
   2fd40:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   2fd42:	2308      	movs	r3, #8
   2fd44:	18fb      	adds	r3, r7, r3
   2fd46:	2200      	movs	r2, #0
   2fd48:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   2fd4a:	687b      	ldr	r3, [r7, #4]
   2fd4c:	22dc      	movs	r2, #220	; 0xdc
   2fd4e:	589b      	ldr	r3, [r3, r2]
   2fd50:	001a      	movs	r2, r3
   2fd52:	2308      	movs	r3, #8
   2fd54:	18fb      	adds	r3, r7, r3
   2fd56:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   2fd58:	2308      	movs	r3, #8
   2fd5a:	18fb      	adds	r3, r7, r3
   2fd5c:	697a      	ldr	r2, [r7, #20]
   2fd5e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2fd60:	687b      	ldr	r3, [r7, #4]
   2fd62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd64:	2208      	movs	r2, #8
   2fd66:	18ba      	adds	r2, r7, r2
   2fd68:	6878      	ldr	r0, [r7, #4]
   2fd6a:	2102      	movs	r1, #2
   2fd6c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   2fd6e:	687b      	ldr	r3, [r7, #4]
   2fd70:	22d8      	movs	r2, #216	; 0xd8
   2fd72:	2100      	movs	r1, #0
   2fd74:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   2fd76:	687b      	ldr	r3, [r7, #4]
   2fd78:	22e4      	movs	r2, #228	; 0xe4
   2fd7a:	2100      	movs	r1, #0
   2fd7c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   2fd7e:	687b      	ldr	r3, [r7, #4]
   2fd80:	2241      	movs	r2, #65	; 0x41
   2fd82:	5c9b      	ldrb	r3, [r3, r2]
   2fd84:	2202      	movs	r2, #2
   2fd86:	4013      	ands	r3, r2
   2fd88:	b2db      	uxtb	r3, r3
   2fd8a:	2b00      	cmp	r3, #0
   2fd8c:	d105      	bne.n	2fd9a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   2fd8e:	687b      	ldr	r3, [r7, #4]
   2fd90:	2100      	movs	r1, #0
   2fd92:	0018      	movs	r0, r3
   2fd94:	4b3b      	ldr	r3, [pc, #236]	; (2fe84 <_http_client_handle_entity+0x198>)
   2fd96:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   2fd98:	e06e      	b.n	2fe78 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2fd9a:	687b      	ldr	r3, [r7, #4]
   2fd9c:	22dc      	movs	r2, #220	; 0xdc
   2fd9e:	589b      	ldr	r3, [r3, r2]
   2fda0:	001a      	movs	r2, r3
   2fda2:	697b      	ldr	r3, [r7, #20]
   2fda4:	189a      	adds	r2, r3, r2
   2fda6:	687b      	ldr	r3, [r7, #4]
   2fda8:	0011      	movs	r1, r2
   2fdaa:	0018      	movs	r0, r3
   2fdac:	4b36      	ldr	r3, [pc, #216]	; (2fe88 <_http_client_handle_entity+0x19c>)
   2fdae:	4798      	blx	r3
				return module->recved_size;
   2fdb0:	687b      	ldr	r3, [r7, #4]
   2fdb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fdb4:	e061      	b.n	2fe7a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   2fdb6:	687b      	ldr	r3, [r7, #4]
   2fdb8:	22dc      	movs	r2, #220	; 0xdc
   2fdba:	589b      	ldr	r3, [r3, r2]
   2fdbc:	2b00      	cmp	r3, #0
   2fdbe:	db57      	blt.n	2fe70 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   2fdc0:	687b      	ldr	r3, [r7, #4]
   2fdc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fdc4:	2308      	movs	r3, #8
   2fdc6:	18fb      	adds	r3, r7, r3
   2fdc8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   2fdca:	2308      	movs	r3, #8
   2fdcc:	18fb      	adds	r3, r7, r3
   2fdce:	697a      	ldr	r2, [r7, #20]
   2fdd0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   2fdd2:	687b      	ldr	r3, [r7, #4]
   2fdd4:	22e0      	movs	r2, #224	; 0xe0
   2fdd6:	589a      	ldr	r2, [r3, r2]
   2fdd8:	687b      	ldr	r3, [r7, #4]
   2fdda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fddc:	18d2      	adds	r2, r2, r3
   2fdde:	687b      	ldr	r3, [r7, #4]
   2fde0:	21e0      	movs	r1, #224	; 0xe0
   2fde2:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2fde4:	687b      	ldr	r3, [r7, #4]
   2fde6:	22dc      	movs	r2, #220	; 0xdc
   2fde8:	589a      	ldr	r2, [r3, r2]
   2fdea:	687b      	ldr	r3, [r7, #4]
   2fdec:	21e0      	movs	r1, #224	; 0xe0
   2fdee:	585b      	ldr	r3, [r3, r1]
   2fdf0:	429a      	cmp	r2, r3
   2fdf2:	dc0c      	bgt.n	2fe0e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2fdf4:	687b      	ldr	r3, [r7, #4]
   2fdf6:	22d8      	movs	r2, #216	; 0xd8
   2fdf8:	2100      	movs	r1, #0
   2fdfa:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2fdfc:	687b      	ldr	r3, [r7, #4]
   2fdfe:	22e4      	movs	r2, #228	; 0xe4
   2fe00:	2100      	movs	r1, #0
   2fe02:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2fe04:	2308      	movs	r3, #8
   2fe06:	18fb      	adds	r3, r7, r3
   2fe08:	2201      	movs	r2, #1
   2fe0a:	721a      	strb	r2, [r3, #8]
   2fe0c:	e003      	b.n	2fe16 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   2fe0e:	2308      	movs	r3, #8
   2fe10:	18fb      	adds	r3, r7, r3
   2fe12:	2200      	movs	r2, #0
   2fe14:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   2fe16:	687b      	ldr	r3, [r7, #4]
   2fe18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fe1a:	2b00      	cmp	r3, #0
   2fe1c:	d006      	beq.n	2fe2c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fe1e:	687b      	ldr	r3, [r7, #4]
   2fe20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fe22:	2208      	movs	r2, #8
   2fe24:	18ba      	adds	r2, r7, r2
   2fe26:	6878      	ldr	r0, [r7, #4]
   2fe28:	2103      	movs	r1, #3
   2fe2a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   2fe2c:	2308      	movs	r3, #8
   2fe2e:	18fb      	adds	r3, r7, r3
   2fe30:	7a1b      	ldrb	r3, [r3, #8]
   2fe32:	2b01      	cmp	r3, #1
   2fe34:	d112      	bne.n	2fe5c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   2fe36:	687b      	ldr	r3, [r7, #4]
   2fe38:	2241      	movs	r2, #65	; 0x41
   2fe3a:	5c9b      	ldrb	r3, [r3, r2]
   2fe3c:	2202      	movs	r2, #2
   2fe3e:	4013      	ands	r3, r2
   2fe40:	b2db      	uxtb	r3, r3
   2fe42:	2b00      	cmp	r3, #0
   2fe44:	d10a      	bne.n	2fe5c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   2fe46:	4b11      	ldr	r3, [pc, #68]	; (2fe8c <_http_client_handle_entity+0x1a0>)
   2fe48:	0018      	movs	r0, r3
   2fe4a:	4b11      	ldr	r3, [pc, #68]	; (2fe90 <_http_client_handle_entity+0x1a4>)
   2fe4c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   2fe4e:	687b      	ldr	r3, [r7, #4]
   2fe50:	2100      	movs	r1, #0
   2fe52:	0018      	movs	r0, r3
   2fe54:	4b0b      	ldr	r3, [pc, #44]	; (2fe84 <_http_client_handle_entity+0x198>)
   2fe56:	4798      	blx	r3
					return 0;
   2fe58:	2300      	movs	r3, #0
   2fe5a:	e00e      	b.n	2fe7a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   2fe5c:	687b      	ldr	r3, [r7, #4]
   2fe5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fe60:	697a      	ldr	r2, [r7, #20]
   2fe62:	18d2      	adds	r2, r2, r3
   2fe64:	687b      	ldr	r3, [r7, #4]
   2fe66:	0011      	movs	r1, r2
   2fe68:	0018      	movs	r0, r3
   2fe6a:	4b07      	ldr	r3, [pc, #28]	; (2fe88 <_http_client_handle_entity+0x19c>)
   2fe6c:	4798      	blx	r3
   2fe6e:	e003      	b.n	2fe78 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   2fe70:	687b      	ldr	r3, [r7, #4]
   2fe72:	0018      	movs	r0, r3
   2fe74:	4b07      	ldr	r3, [pc, #28]	; (2fe94 <_http_client_handle_entity+0x1a8>)
   2fe76:	4798      	blx	r3
		}
	}

	return 0;
   2fe78:	2300      	movs	r3, #0
}
   2fe7a:	0018      	movs	r0, r3
   2fe7c:	46bd      	mov	sp, r7
   2fe7e:	b006      	add	sp, #24
   2fe80:	bd80      	pop	{r7, pc}
   2fe82:	46c0      	nop			; (mov r8, r8)
   2fe84:	0002eeb1 	.word	0x0002eeb1
   2fe88:	0002fe99 	.word	0x0002fe99
   2fe8c:	0003724c 	.word	0x0003724c
   2fe90:	00032425 	.word	0x00032425
   2fe94:	0002fad9 	.word	0x0002fad9

0002fe98 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   2fe98:	b580      	push	{r7, lr}
   2fe9a:	b084      	sub	sp, #16
   2fe9c:	af00      	add	r7, sp, #0
   2fe9e:	6078      	str	r0, [r7, #4]
   2fea0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   2fea2:	687b      	ldr	r3, [r7, #4]
   2fea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fea6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2fea8:	687b      	ldr	r3, [r7, #4]
   2feaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2feac:	001a      	movs	r2, r3
   2feae:	683b      	ldr	r3, [r7, #0]
   2feb0:	1ad2      	subs	r2, r2, r3
   2feb2:	68fb      	ldr	r3, [r7, #12]
   2feb4:	18d3      	adds	r3, r2, r3
   2feb6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   2feb8:	68bb      	ldr	r3, [r7, #8]
   2feba:	2b00      	cmp	r3, #0
   2febc:	dd09      	ble.n	2fed2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   2febe:	68ba      	ldr	r2, [r7, #8]
   2fec0:	6839      	ldr	r1, [r7, #0]
   2fec2:	68fb      	ldr	r3, [r7, #12]
   2fec4:	0018      	movs	r0, r3
   2fec6:	4b06      	ldr	r3, [pc, #24]	; (2fee0 <_http_client_move_buffer+0x48>)
   2fec8:	4798      	blx	r3
		module->recved_size = remain;
   2feca:	68ba      	ldr	r2, [r7, #8]
   2fecc:	687b      	ldr	r3, [r7, #4]
   2fece:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   2fed0:	e002      	b.n	2fed8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   2fed2:	687b      	ldr	r3, [r7, #4]
   2fed4:	2200      	movs	r2, #0
   2fed6:	645a      	str	r2, [r3, #68]	; 0x44
}
   2fed8:	46c0      	nop			; (mov r8, r8)
   2feda:	46bd      	mov	sp, r7
   2fedc:	b004      	add	sp, #16
   2fede:	bd80      	pop	{r7, pc}
   2fee0:	000321df 	.word	0x000321df

0002fee4 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   2fee4:	b580      	push	{r7, lr}
   2fee6:	b084      	sub	sp, #16
   2fee8:	af00      	add	r7, sp, #0
   2feea:	60f8      	str	r0, [r7, #12]
   2feec:	60b9      	str	r1, [r7, #8]
   2feee:	607a      	str	r2, [r7, #4]
   2fef0:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   2fef2:	68fb      	ldr	r3, [r7, #12]
   2fef4:	687a      	ldr	r2, [r7, #4]
   2fef6:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   2fef8:	68fb      	ldr	r3, [r7, #12]
   2fefa:	68ba      	ldr	r2, [r7, #8]
   2fefc:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   2fefe:	68fb      	ldr	r3, [r7, #12]
   2ff00:	2200      	movs	r2, #0
   2ff02:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   2ff04:	68fb      	ldr	r3, [r7, #12]
   2ff06:	683a      	ldr	r2, [r7, #0]
   2ff08:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   2ff0a:	68fb      	ldr	r3, [r7, #12]
   2ff0c:	69ba      	ldr	r2, [r7, #24]
   2ff0e:	60da      	str	r2, [r3, #12]
}
   2ff10:	46c0      	nop			; (mov r8, r8)
   2ff12:	46bd      	mov	sp, r7
   2ff14:	b004      	add	sp, #16
   2ff16:	bd80      	pop	{r7, pc}

0002ff18 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   2ff18:	b580      	push	{r7, lr}
   2ff1a:	b084      	sub	sp, #16
   2ff1c:	af00      	add	r7, sp, #0
   2ff1e:	6078      	str	r0, [r7, #4]
   2ff20:	000a      	movs	r2, r1
   2ff22:	1cfb      	adds	r3, r7, #3
   2ff24:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   2ff26:	687b      	ldr	r3, [r7, #4]
   2ff28:	681a      	ldr	r2, [r3, #0]
   2ff2a:	687b      	ldr	r3, [r7, #4]
   2ff2c:	685b      	ldr	r3, [r3, #4]
   2ff2e:	1ad3      	subs	r3, r2, r3
   2ff30:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   2ff32:	68fb      	ldr	r3, [r7, #12]
   2ff34:	2b00      	cmp	r3, #0
   2ff36:	dc03      	bgt.n	2ff40 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   2ff38:	687b      	ldr	r3, [r7, #4]
   2ff3a:	0018      	movs	r0, r3
   2ff3c:	4b08      	ldr	r3, [pc, #32]	; (2ff60 <stream_writer_send_8+0x48>)
   2ff3e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   2ff40:	687b      	ldr	r3, [r7, #4]
   2ff42:	6919      	ldr	r1, [r3, #16]
   2ff44:	687b      	ldr	r3, [r7, #4]
   2ff46:	685b      	ldr	r3, [r3, #4]
   2ff48:	1c58      	adds	r0, r3, #1
   2ff4a:	687a      	ldr	r2, [r7, #4]
   2ff4c:	6050      	str	r0, [r2, #4]
   2ff4e:	18cb      	adds	r3, r1, r3
   2ff50:	1cfa      	adds	r2, r7, #3
   2ff52:	7812      	ldrb	r2, [r2, #0]
   2ff54:	701a      	strb	r2, [r3, #0]
}
   2ff56:	46c0      	nop			; (mov r8, r8)
   2ff58:	46bd      	mov	sp, r7
   2ff5a:	b004      	add	sp, #16
   2ff5c:	bd80      	pop	{r7, pc}
   2ff5e:	46c0      	nop			; (mov r8, r8)
   2ff60:	0002ffa1 	.word	0x0002ffa1

0002ff64 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   2ff64:	b580      	push	{r7, lr}
   2ff66:	b084      	sub	sp, #16
   2ff68:	af00      	add	r7, sp, #0
   2ff6a:	60f8      	str	r0, [r7, #12]
   2ff6c:	60b9      	str	r1, [r7, #8]
   2ff6e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   2ff70:	e00d      	b.n	2ff8e <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   2ff72:	68bb      	ldr	r3, [r7, #8]
   2ff74:	781b      	ldrb	r3, [r3, #0]
   2ff76:	b25a      	sxtb	r2, r3
   2ff78:	68fb      	ldr	r3, [r7, #12]
   2ff7a:	0011      	movs	r1, r2
   2ff7c:	0018      	movs	r0, r3
   2ff7e:	4b07      	ldr	r3, [pc, #28]	; (2ff9c <stream_writer_send_buffer+0x38>)
   2ff80:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   2ff82:	687b      	ldr	r3, [r7, #4]
   2ff84:	3b01      	subs	r3, #1
   2ff86:	607b      	str	r3, [r7, #4]
   2ff88:	68bb      	ldr	r3, [r7, #8]
   2ff8a:	3301      	adds	r3, #1
   2ff8c:	60bb      	str	r3, [r7, #8]
   2ff8e:	687b      	ldr	r3, [r7, #4]
   2ff90:	2b00      	cmp	r3, #0
   2ff92:	d1ee      	bne.n	2ff72 <stream_writer_send_buffer+0xe>
	}
}
   2ff94:	46c0      	nop			; (mov r8, r8)
   2ff96:	46bd      	mov	sp, r7
   2ff98:	b004      	add	sp, #16
   2ff9a:	bd80      	pop	{r7, pc}
   2ff9c:	0002ff19 	.word	0x0002ff19

0002ffa0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   2ffa0:	b590      	push	{r4, r7, lr}
   2ffa2:	b083      	sub	sp, #12
   2ffa4:	af00      	add	r7, sp, #0
   2ffa6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   2ffa8:	687b      	ldr	r3, [r7, #4]
   2ffaa:	685b      	ldr	r3, [r3, #4]
   2ffac:	2b00      	cmp	r3, #0
   2ffae:	d00c      	beq.n	2ffca <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   2ffb0:	687b      	ldr	r3, [r7, #4]
   2ffb2:	689c      	ldr	r4, [r3, #8]
   2ffb4:	687b      	ldr	r3, [r7, #4]
   2ffb6:	68d8      	ldr	r0, [r3, #12]
   2ffb8:	687b      	ldr	r3, [r7, #4]
   2ffba:	6919      	ldr	r1, [r3, #16]
   2ffbc:	687b      	ldr	r3, [r7, #4]
   2ffbe:	685b      	ldr	r3, [r3, #4]
   2ffc0:	001a      	movs	r2, r3
   2ffc2:	47a0      	blx	r4
		writer->written = 0;
   2ffc4:	687b      	ldr	r3, [r7, #4]
   2ffc6:	2200      	movs	r2, #0
   2ffc8:	605a      	str	r2, [r3, #4]
	}
}
   2ffca:	46c0      	nop			; (mov r8, r8)
   2ffcc:	46bd      	mov	sp, r7
   2ffce:	b003      	add	sp, #12
   2ffd0:	bd90      	pop	{r4, r7, pc}
	...

0002ffd4 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   2ffd4:	b580      	push	{r7, lr}
   2ffd6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   2ffd8:	2000      	movs	r0, #0
   2ffda:	4b05      	ldr	r3, [pc, #20]	; (2fff0 <system_cpu_clock_get_hz+0x1c>)
   2ffdc:	4798      	blx	r3
   2ffde:	0002      	movs	r2, r0
   2ffe0:	4b04      	ldr	r3, [pc, #16]	; (2fff4 <system_cpu_clock_get_hz+0x20>)
   2ffe2:	7a1b      	ldrb	r3, [r3, #8]
   2ffe4:	b2db      	uxtb	r3, r3
   2ffe6:	40da      	lsrs	r2, r3
   2ffe8:	0013      	movs	r3, r2
}
   2ffea:	0018      	movs	r0, r3
   2ffec:	46bd      	mov	sp, r7
   2ffee:	bd80      	pop	{r7, pc}
   2fff0:	000279b5 	.word	0x000279b5
   2fff4:	40000400 	.word	0x40000400

0002fff8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   2fff8:	b580      	push	{r7, lr}
   2fffa:	b084      	sub	sp, #16
   2fffc:	af00      	add	r7, sp, #0
   2fffe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   30000:	687b      	ldr	r3, [r7, #4]
   30002:	681b      	ldr	r3, [r3, #0]
   30004:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   30006:	46c0      	nop			; (mov r8, r8)
   30008:	68fb      	ldr	r3, [r7, #12]
   3000a:	689b      	ldr	r3, [r3, #8]
   3000c:	2202      	movs	r2, #2
   3000e:	4013      	ands	r3, r2
   30010:	d1fa      	bne.n	30008 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   30012:	68fb      	ldr	r3, [r7, #12]
   30014:	681b      	ldr	r3, [r3, #0]
   30016:	2202      	movs	r2, #2
   30018:	431a      	orrs	r2, r3
   3001a:	68fb      	ldr	r3, [r7, #12]
   3001c:	601a      	str	r2, [r3, #0]
}
   3001e:	46c0      	nop			; (mov r8, r8)
   30020:	46bd      	mov	sp, r7
   30022:	b004      	add	sp, #16
   30024:	bd80      	pop	{r7, pc}
	...

00030028 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   30028:	b580      	push	{r7, lr}
   3002a:	b082      	sub	sp, #8
   3002c:	af00      	add	r7, sp, #0
   3002e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   30030:	4b04      	ldr	r3, [pc, #16]	; (30044 <sw_timer_tcc_callback+0x1c>)
   30032:	681b      	ldr	r3, [r3, #0]
   30034:	1c5a      	adds	r2, r3, #1
   30036:	4b03      	ldr	r3, [pc, #12]	; (30044 <sw_timer_tcc_callback+0x1c>)
   30038:	601a      	str	r2, [r3, #0]
}
   3003a:	46c0      	nop			; (mov r8, r8)
   3003c:	46bd      	mov	sp, r7
   3003e:	b002      	add	sp, #8
   30040:	bd80      	pop	{r7, pc}
   30042:	46c0      	nop			; (mov r8, r8)
   30044:	20004168 	.word	0x20004168

00030048 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   30048:	b580      	push	{r7, lr}
   3004a:	b082      	sub	sp, #8
   3004c:	af00      	add	r7, sp, #0
   3004e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   30050:	687b      	ldr	r3, [r7, #4]
   30052:	2264      	movs	r2, #100	; 0x64
   30054:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   30056:	687b      	ldr	r3, [r7, #4]
   30058:	2200      	movs	r2, #0
   3005a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   3005c:	687b      	ldr	r3, [r7, #4]
   3005e:	2200      	movs	r2, #0
   30060:	705a      	strb	r2, [r3, #1]
}
   30062:	46c0      	nop			; (mov r8, r8)
   30064:	46bd      	mov	sp, r7
   30066:	b002      	add	sp, #8
   30068:	bd80      	pop	{r7, pc}
	...

0003006c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   3006c:	b590      	push	{r4, r7, lr}
   3006e:	b0b1      	sub	sp, #196	; 0xc4
   30070:	af00      	add	r7, sp, #0
   30072:	6078      	str	r0, [r7, #4]
   30074:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   30076:	230c      	movs	r3, #12
   30078:	18fb      	adds	r3, r7, r3
   3007a:	4a2e      	ldr	r2, [pc, #184]	; (30134 <sw_timer_init+0xc8>)
   3007c:	ca13      	ldmia	r2!, {r0, r1, r4}
   3007e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   30080:	683b      	ldr	r3, [r7, #0]
   30082:	885b      	ldrh	r3, [r3, #2]
   30084:	001a      	movs	r2, r3
   30086:	687b      	ldr	r3, [r7, #4]
   30088:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3008a:	687b      	ldr	r3, [r7, #4]
   3008c:	3314      	adds	r3, #20
   3008e:	22bc      	movs	r2, #188	; 0xbc
   30090:	18ba      	adds	r2, r7, r2
   30092:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   30094:	683b      	ldr	r3, [r7, #0]
   30096:	781b      	ldrb	r3, [r3, #0]
   30098:	001a      	movs	r2, r3
   3009a:	230c      	movs	r3, #12
   3009c:	18fb      	adds	r3, r7, r3
   3009e:	0092      	lsls	r2, r2, #2
   300a0:	58d2      	ldr	r2, [r2, r3]
   300a2:	2318      	movs	r3, #24
   300a4:	18fb      	adds	r3, r7, r3
   300a6:	0011      	movs	r1, r2
   300a8:	0018      	movs	r0, r3
   300aa:	4b23      	ldr	r3, [pc, #140]	; (30138 <sw_timer_init+0xcc>)
   300ac:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   300ae:	4b23      	ldr	r3, [pc, #140]	; (3013c <sw_timer_init+0xd0>)
   300b0:	4798      	blx	r3
   300b2:	0004      	movs	r4, r0
   300b4:	683b      	ldr	r3, [r7, #0]
   300b6:	885b      	ldrh	r3, [r3, #2]
   300b8:	001a      	movs	r2, r3
   300ba:	4b21      	ldr	r3, [pc, #132]	; (30140 <sw_timer_init+0xd4>)
   300bc:	0011      	movs	r1, r2
   300be:	22fa      	movs	r2, #250	; 0xfa
   300c0:	0210      	lsls	r0, r2, #8
   300c2:	4798      	blx	r3
   300c4:	0003      	movs	r3, r0
   300c6:	001a      	movs	r2, r3
   300c8:	4b1e      	ldr	r3, [pc, #120]	; (30144 <sw_timer_init+0xd8>)
   300ca:	0011      	movs	r1, r2
   300cc:	0020      	movs	r0, r4
   300ce:	4798      	blx	r3
   300d0:	0003      	movs	r3, r0
   300d2:	001a      	movs	r2, r3
   300d4:	2318      	movs	r3, #24
   300d6:	18fb      	adds	r3, r7, r3
   300d8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   300da:	2318      	movs	r3, #24
   300dc:	18fb      	adds	r3, r7, r3
   300de:	2205      	movs	r2, #5
   300e0:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   300e2:	683b      	ldr	r3, [r7, #0]
   300e4:	781b      	ldrb	r3, [r3, #0]
   300e6:	001a      	movs	r2, r3
   300e8:	230c      	movs	r3, #12
   300ea:	18fb      	adds	r3, r7, r3
   300ec:	0092      	lsls	r2, r2, #2
   300ee:	58d1      	ldr	r1, [r2, r3]
   300f0:	2318      	movs	r3, #24
   300f2:	18fa      	adds	r2, r7, r3
   300f4:	23bc      	movs	r3, #188	; 0xbc
   300f6:	18fb      	adds	r3, r7, r3
   300f8:	681b      	ldr	r3, [r3, #0]
   300fa:	0018      	movs	r0, r3
   300fc:	4b12      	ldr	r3, [pc, #72]	; (30148 <sw_timer_init+0xdc>)
   300fe:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30100:	683b      	ldr	r3, [r7, #0]
   30102:	785b      	ldrb	r3, [r3, #1]
   30104:	3308      	adds	r3, #8
   30106:	b2da      	uxtb	r2, r3
   30108:	4910      	ldr	r1, [pc, #64]	; (3014c <sw_timer_init+0xe0>)
   3010a:	23bc      	movs	r3, #188	; 0xbc
   3010c:	18fb      	adds	r3, r7, r3
   3010e:	681b      	ldr	r3, [r3, #0]
   30110:	0018      	movs	r0, r3
   30112:	4b0f      	ldr	r3, [pc, #60]	; (30150 <sw_timer_init+0xe4>)
   30114:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30116:	683b      	ldr	r3, [r7, #0]
   30118:	785b      	ldrb	r3, [r3, #1]
   3011a:	3308      	adds	r3, #8
   3011c:	b2da      	uxtb	r2, r3
   3011e:	23bc      	movs	r3, #188	; 0xbc
   30120:	18fb      	adds	r3, r7, r3
   30122:	681b      	ldr	r3, [r3, #0]
   30124:	0011      	movs	r1, r2
   30126:	0018      	movs	r0, r3
   30128:	4b0a      	ldr	r3, [pc, #40]	; (30154 <sw_timer_init+0xe8>)
   3012a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   3012c:	46c0      	nop			; (mov r8, r8)
   3012e:	46bd      	mov	sp, r7
   30130:	b031      	add	sp, #196	; 0xc4
   30132:	bd90      	pop	{r4, r7, pc}
   30134:	0003728c 	.word	0x0003728c
   30138:	00027f4d 	.word	0x00027f4d
   3013c:	0002ffd5 	.word	0x0002ffd5
   30140:	0003065d 	.word	0x0003065d
   30144:	00030549 	.word	0x00030549
   30148:	000285a9 	.word	0x000285a9
   3014c:	00030029 	.word	0x00030029
   30150:	000289c1 	.word	0x000289c1
   30154:	00028a01 	.word	0x00028a01

00030158 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   30158:	b580      	push	{r7, lr}
   3015a:	b084      	sub	sp, #16
   3015c:	af00      	add	r7, sp, #0
   3015e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   30160:	687b      	ldr	r3, [r7, #4]
   30162:	3314      	adds	r3, #20
   30164:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   30166:	68fb      	ldr	r3, [r7, #12]
   30168:	0018      	movs	r0, r3
   3016a:	4b03      	ldr	r3, [pc, #12]	; (30178 <sw_timer_enable+0x20>)
   3016c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3016e:	46c0      	nop			; (mov r8, r8)
   30170:	46bd      	mov	sp, r7
   30172:	b004      	add	sp, #16
   30174:	bd80      	pop	{r7, pc}
   30176:	46c0      	nop			; (mov r8, r8)
   30178:	0002fff9 	.word	0x0002fff9

0003017c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   3017c:	b580      	push	{r7, lr}
   3017e:	b086      	sub	sp, #24
   30180:	af00      	add	r7, sp, #0
   30182:	60f8      	str	r0, [r7, #12]
   30184:	60b9      	str	r1, [r7, #8]
   30186:	607a      	str	r2, [r7, #4]
   30188:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3018a:	2300      	movs	r3, #0
   3018c:	617b      	str	r3, [r7, #20]
   3018e:	e032      	b.n	301f6 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   30190:	68f9      	ldr	r1, [r7, #12]
   30192:	697a      	ldr	r2, [r7, #20]
   30194:	0013      	movs	r3, r2
   30196:	009b      	lsls	r3, r3, #2
   30198:	189b      	adds	r3, r3, r2
   3019a:	009b      	lsls	r3, r3, #2
   3019c:	5c5b      	ldrb	r3, [r3, r1]
   3019e:	07db      	lsls	r3, r3, #31
   301a0:	0fdb      	lsrs	r3, r3, #31
   301a2:	b2db      	uxtb	r3, r3
   301a4:	2b00      	cmp	r3, #0
   301a6:	d123      	bne.n	301f0 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   301a8:	697a      	ldr	r2, [r7, #20]
   301aa:	0013      	movs	r3, r2
   301ac:	009b      	lsls	r3, r3, #2
   301ae:	189b      	adds	r3, r3, r2
   301b0:	009b      	lsls	r3, r3, #2
   301b2:	68fa      	ldr	r2, [r7, #12]
   301b4:	18d3      	adds	r3, r2, r3
   301b6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   301b8:	693b      	ldr	r3, [r7, #16]
   301ba:	68ba      	ldr	r2, [r7, #8]
   301bc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   301be:	693b      	ldr	r3, [r7, #16]
   301c0:	781a      	ldrb	r2, [r3, #0]
   301c2:	2102      	movs	r1, #2
   301c4:	438a      	bics	r2, r1
   301c6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   301c8:	693b      	ldr	r3, [r7, #16]
   301ca:	687a      	ldr	r2, [r7, #4]
   301cc:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   301ce:	68fb      	ldr	r3, [r7, #12]
   301d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   301d2:	4b0d      	ldr	r3, [pc, #52]	; (30208 <sw_timer_register_callback+0x8c>)
   301d4:	0011      	movs	r1, r2
   301d6:	6838      	ldr	r0, [r7, #0]
   301d8:	4798      	blx	r3
   301da:	0003      	movs	r3, r0
   301dc:	001a      	movs	r2, r3
   301de:	693b      	ldr	r3, [r7, #16]
   301e0:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   301e2:	693b      	ldr	r3, [r7, #16]
   301e4:	781a      	ldrb	r2, [r3, #0]
   301e6:	2101      	movs	r1, #1
   301e8:	430a      	orrs	r2, r1
   301ea:	701a      	strb	r2, [r3, #0]
			return index;
   301ec:	697b      	ldr	r3, [r7, #20]
   301ee:	e007      	b.n	30200 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   301f0:	697b      	ldr	r3, [r7, #20]
   301f2:	3301      	adds	r3, #1
   301f4:	617b      	str	r3, [r7, #20]
   301f6:	697b      	ldr	r3, [r7, #20]
   301f8:	2b00      	cmp	r3, #0
   301fa:	ddc9      	ble.n	30190 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   301fc:	2301      	movs	r3, #1
   301fe:	425b      	negs	r3, r3
}
   30200:	0018      	movs	r0, r3
   30202:	46bd      	mov	sp, r7
   30204:	b006      	add	sp, #24
   30206:	bd80      	pop	{r7, pc}
   30208:	00030549 	.word	0x00030549

0003020c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   3020c:	b580      	push	{r7, lr}
   3020e:	b086      	sub	sp, #24
   30210:	af00      	add	r7, sp, #0
   30212:	60f8      	str	r0, [r7, #12]
   30214:	60b9      	str	r1, [r7, #8]
   30216:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30218:	68ba      	ldr	r2, [r7, #8]
   3021a:	0013      	movs	r3, r2
   3021c:	009b      	lsls	r3, r3, #2
   3021e:	189b      	adds	r3, r3, r2
   30220:	009b      	lsls	r3, r3, #2
   30222:	68fa      	ldr	r2, [r7, #12]
   30224:	18d3      	adds	r3, r2, r3
   30226:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   30228:	697b      	ldr	r3, [r7, #20]
   3022a:	781a      	ldrb	r2, [r3, #0]
   3022c:	2102      	movs	r1, #2
   3022e:	430a      	orrs	r2, r1
   30230:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   30232:	68fb      	ldr	r3, [r7, #12]
   30234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30236:	4b07      	ldr	r3, [pc, #28]	; (30254 <sw_timer_enable_callback+0x48>)
   30238:	0011      	movs	r1, r2
   3023a:	6878      	ldr	r0, [r7, #4]
   3023c:	4798      	blx	r3
   3023e:	0003      	movs	r3, r0
   30240:	001a      	movs	r2, r3
   30242:	4b05      	ldr	r3, [pc, #20]	; (30258 <sw_timer_enable_callback+0x4c>)
   30244:	681b      	ldr	r3, [r3, #0]
   30246:	18d2      	adds	r2, r2, r3
   30248:	697b      	ldr	r3, [r7, #20]
   3024a:	611a      	str	r2, [r3, #16]
}
   3024c:	46c0      	nop			; (mov r8, r8)
   3024e:	46bd      	mov	sp, r7
   30250:	b006      	add	sp, #24
   30252:	bd80      	pop	{r7, pc}
   30254:	00030549 	.word	0x00030549
   30258:	20004168 	.word	0x20004168

0003025c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   3025c:	b580      	push	{r7, lr}
   3025e:	b084      	sub	sp, #16
   30260:	af00      	add	r7, sp, #0
   30262:	6078      	str	r0, [r7, #4]
   30264:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30266:	683a      	ldr	r2, [r7, #0]
   30268:	0013      	movs	r3, r2
   3026a:	009b      	lsls	r3, r3, #2
   3026c:	189b      	adds	r3, r3, r2
   3026e:	009b      	lsls	r3, r3, #2
   30270:	687a      	ldr	r2, [r7, #4]
   30272:	18d3      	adds	r3, r2, r3
   30274:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   30276:	68fb      	ldr	r3, [r7, #12]
   30278:	781a      	ldrb	r2, [r3, #0]
   3027a:	2102      	movs	r1, #2
   3027c:	438a      	bics	r2, r1
   3027e:	701a      	strb	r2, [r3, #0]
}
   30280:	46c0      	nop			; (mov r8, r8)
   30282:	46bd      	mov	sp, r7
   30284:	b004      	add	sp, #16
   30286:	bd80      	pop	{r7, pc}

00030288 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   30288:	b590      	push	{r4, r7, lr}
   3028a:	b085      	sub	sp, #20
   3028c:	af00      	add	r7, sp, #0
   3028e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30290:	2300      	movs	r3, #0
   30292:	60fb      	str	r3, [r7, #12]
   30294:	e053      	b.n	3033e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   30296:	6879      	ldr	r1, [r7, #4]
   30298:	68fa      	ldr	r2, [r7, #12]
   3029a:	0013      	movs	r3, r2
   3029c:	009b      	lsls	r3, r3, #2
   3029e:	189b      	adds	r3, r3, r2
   302a0:	009b      	lsls	r3, r3, #2
   302a2:	5c5b      	ldrb	r3, [r3, r1]
   302a4:	07db      	lsls	r3, r3, #31
   302a6:	0fdb      	lsrs	r3, r3, #31
   302a8:	b2db      	uxtb	r3, r3
   302aa:	2b00      	cmp	r3, #0
   302ac:	d044      	beq.n	30338 <sw_timer_task+0xb0>
   302ae:	6879      	ldr	r1, [r7, #4]
   302b0:	68fa      	ldr	r2, [r7, #12]
   302b2:	0013      	movs	r3, r2
   302b4:	009b      	lsls	r3, r3, #2
   302b6:	189b      	adds	r3, r3, r2
   302b8:	009b      	lsls	r3, r3, #2
   302ba:	5c5b      	ldrb	r3, [r3, r1]
   302bc:	079b      	lsls	r3, r3, #30
   302be:	0fdb      	lsrs	r3, r3, #31
   302c0:	b2db      	uxtb	r3, r3
   302c2:	2b00      	cmp	r3, #0
   302c4:	d038      	beq.n	30338 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   302c6:	68fa      	ldr	r2, [r7, #12]
   302c8:	0013      	movs	r3, r2
   302ca:	009b      	lsls	r3, r3, #2
   302cc:	189b      	adds	r3, r3, r2
   302ce:	009b      	lsls	r3, r3, #2
   302d0:	687a      	ldr	r2, [r7, #4]
   302d2:	18d3      	adds	r3, r2, r3
   302d4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   302d6:	68bb      	ldr	r3, [r7, #8]
   302d8:	691a      	ldr	r2, [r3, #16]
   302da:	4b1c      	ldr	r3, [pc, #112]	; (3034c <sw_timer_task+0xc4>)
   302dc:	681b      	ldr	r3, [r3, #0]
   302de:	1ad3      	subs	r3, r2, r3
   302e0:	d52a      	bpl.n	30338 <sw_timer_task+0xb0>
   302e2:	68bb      	ldr	r3, [r7, #8]
   302e4:	781b      	ldrb	r3, [r3, #0]
   302e6:	2204      	movs	r2, #4
   302e8:	4013      	ands	r3, r2
   302ea:	b2db      	uxtb	r3, r3
   302ec:	2b00      	cmp	r3, #0
   302ee:	d123      	bne.n	30338 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   302f0:	68bb      	ldr	r3, [r7, #8]
   302f2:	781a      	ldrb	r2, [r3, #0]
   302f4:	2104      	movs	r1, #4
   302f6:	430a      	orrs	r2, r1
   302f8:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   302fa:	68bb      	ldr	r3, [r7, #8]
   302fc:	68db      	ldr	r3, [r3, #12]
   302fe:	2b00      	cmp	r3, #0
   30300:	d007      	beq.n	30312 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   30302:	68bb      	ldr	r3, [r7, #8]
   30304:	68da      	ldr	r2, [r3, #12]
   30306:	4b11      	ldr	r3, [pc, #68]	; (3034c <sw_timer_task+0xc4>)
   30308:	681b      	ldr	r3, [r3, #0]
   3030a:	18d2      	adds	r2, r2, r3
   3030c:	68bb      	ldr	r3, [r7, #8]
   3030e:	611a      	str	r2, [r3, #16]
   30310:	e004      	b.n	3031c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   30312:	68bb      	ldr	r3, [r7, #8]
   30314:	781a      	ldrb	r2, [r3, #0]
   30316:	2102      	movs	r1, #2
   30318:	438a      	bics	r2, r1
   3031a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   3031c:	68bb      	ldr	r3, [r7, #8]
   3031e:	685c      	ldr	r4, [r3, #4]
   30320:	68bb      	ldr	r3, [r7, #8]
   30322:	689a      	ldr	r2, [r3, #8]
   30324:	68bb      	ldr	r3, [r7, #8]
   30326:	68db      	ldr	r3, [r3, #12]
   30328:	68f9      	ldr	r1, [r7, #12]
   3032a:	6878      	ldr	r0, [r7, #4]
   3032c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3032e:	68bb      	ldr	r3, [r7, #8]
   30330:	781a      	ldrb	r2, [r3, #0]
   30332:	2104      	movs	r1, #4
   30334:	438a      	bics	r2, r1
   30336:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30338:	68fb      	ldr	r3, [r7, #12]
   3033a:	3301      	adds	r3, #1
   3033c:	60fb      	str	r3, [r7, #12]
   3033e:	68fb      	ldr	r3, [r7, #12]
   30340:	2b00      	cmp	r3, #0
   30342:	dda8      	ble.n	30296 <sw_timer_task+0xe>
			}
		}
	}
}
   30344:	46c0      	nop			; (mov r8, r8)
   30346:	46bd      	mov	sp, r7
   30348:	b005      	add	sp, #20
   3034a:	bd90      	pop	{r4, r7, pc}
   3034c:	20004168 	.word	0x20004168

00030350 <main>:
/**
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void) {
   30350:	b580      	push	{r7, lr}
   30352:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   30354:	4b06      	ldr	r3, [pc, #24]	; (30370 <main+0x20>)
   30356:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   30358:	4b06      	ldr	r3, [pc, #24]	; (30374 <main+0x24>)
   3035a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   3035c:	2001      	movs	r0, #1
   3035e:	4b06      	ldr	r3, [pc, #24]	; (30378 <main+0x28>)
   30360:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   30362:	4b06      	ldr	r3, [pc, #24]	; (3037c <main+0x2c>)
   30364:	4798      	blx	r3

    return 0;   // Will not get here
   30366:	2300      	movs	r3, #0
}
   30368:	0018      	movs	r0, r3
   3036a:	46bd      	mov	sp, r7
   3036c:	bd80      	pop	{r7, pc}
   3036e:	46c0      	nop			; (mov r8, r8)
   30370:	00027e41 	.word	0x00027e41
   30374:	0001b949 	.word	0x0001b949
   30378:	00016019 	.word	0x00016019
   3037c:	00019fa1 	.word	0x00019fa1

00030380 <vApplicationDaemonTaskStartupHook>:
 * @details			This function is called from the FreeRToS timer task. Any code
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void) {
   30380:	b580      	push	{r7, lr}
   30382:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   30384:	4b0f      	ldr	r3, [pc, #60]	; (303c4 <vApplicationDaemonTaskStartupHook+0x44>)
   30386:	0018      	movs	r0, r3
   30388:	4b0f      	ldr	r3, [pc, #60]	; (303c8 <vApplicationDaemonTaskStartupHook+0x48>)
   3038a:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3038c:	4b0f      	ldr	r3, [pc, #60]	; (303cc <vApplicationDaemonTaskStartupHook+0x4c>)
   3038e:	0018      	movs	r0, r3
   30390:	4b0d      	ldr	r3, [pc, #52]	; (303c8 <vApplicationDaemonTaskStartupHook+0x48>)
   30392:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   30394:	4b0e      	ldr	r3, [pc, #56]	; (303d0 <vApplicationDaemonTaskStartupHook+0x50>)
   30396:	4798      	blx	r3
   30398:	1e03      	subs	r3, r0, #0
   3039a:	d004      	beq.n	303a6 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3039c:	4b0d      	ldr	r3, [pc, #52]	; (303d4 <vApplicationDaemonTaskStartupHook+0x54>)
   3039e:	0018      	movs	r0, r3
   303a0:	4b09      	ldr	r3, [pc, #36]	; (303c8 <vApplicationDaemonTaskStartupHook+0x48>)
   303a2:	4798      	blx	r3
   303a4:	e003      	b.n	303ae <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   303a6:	4b0c      	ldr	r3, [pc, #48]	; (303d8 <vApplicationDaemonTaskStartupHook+0x58>)
   303a8:	0018      	movs	r0, r3
   303aa:	4b07      	ldr	r3, [pc, #28]	; (303c8 <vApplicationDaemonTaskStartupHook+0x48>)
   303ac:	4798      	blx	r3
    }

    StartTasks();
   303ae:	4b0b      	ldr	r3, [pc, #44]	; (303dc <vApplicationDaemonTaskStartupHook+0x5c>)
   303b0:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   303b2:	4b0b      	ldr	r3, [pc, #44]	; (303e0 <vApplicationDaemonTaskStartupHook+0x60>)
   303b4:	681b      	ldr	r3, [r3, #0]
   303b6:	0018      	movs	r0, r3
   303b8:	4b0a      	ldr	r3, [pc, #40]	; (303e4 <vApplicationDaemonTaskStartupHook+0x64>)
   303ba:	4798      	blx	r3
}
   303bc:	46c0      	nop			; (mov r8, r8)
   303be:	46bd      	mov	sp, r7
   303c0:	bd80      	pop	{r7, pc}
   303c2:	46c0      	nop			; (mov r8, r8)
   303c4:	00037298 	.word	0x00037298
   303c8:	0001b9b9 	.word	0x0001b9b9
   303cc:	000372bc 	.word	0x000372bc
   303d0:	00013675 	.word	0x00013675
   303d4:	000372d4 	.word	0x000372d4
   303d8:	000372f8 	.word	0x000372f8
   303dc:	000303e9 	.word	0x000303e9
   303e0:	20004170 	.word	0x20004170
   303e4:	00019e45 	.word	0x00019e45

000303e8 <StartTasks>:
 * @brief            Initialize application tasks
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void) {
   303e8:	b590      	push	{r4, r7, lr}
   303ea:	b083      	sub	sp, #12
   303ec:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   303ee:	4b35      	ldr	r3, [pc, #212]	; (304c4 <StartTasks+0xdc>)
   303f0:	4798      	blx	r3
   303f2:	0003      	movs	r3, r0
   303f4:	4a34      	ldr	r2, [pc, #208]	; (304c8 <StartTasks+0xe0>)
   303f6:	4835      	ldr	r0, [pc, #212]	; (304cc <StartTasks+0xe4>)
   303f8:	2140      	movs	r1, #64	; 0x40
   303fa:	4c35      	ldr	r4, [pc, #212]	; (304d0 <StartTasks+0xe8>)
   303fc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   303fe:	4b33      	ldr	r3, [pc, #204]	; (304cc <StartTasks+0xe4>)
   30400:	0018      	movs	r0, r3
   30402:	4b34      	ldr	r3, [pc, #208]	; (304d4 <StartTasks+0xec>)
   30404:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   30406:	23c8      	movs	r3, #200	; 0xc8
   30408:	005a      	lsls	r2, r3, #1
   3040a:	4933      	ldr	r1, [pc, #204]	; (304d8 <StartTasks+0xf0>)
   3040c:	4833      	ldr	r0, [pc, #204]	; (304dc <StartTasks+0xf4>)
   3040e:	4b34      	ldr	r3, [pc, #208]	; (304e0 <StartTasks+0xf8>)
   30410:	9301      	str	r3, [sp, #4]
   30412:	2304      	movs	r3, #4
   30414:	9300      	str	r3, [sp, #0]
   30416:	2300      	movs	r3, #0
   30418:	4c32      	ldr	r4, [pc, #200]	; (304e4 <StartTasks+0xfc>)
   3041a:	47a0      	blx	r4
   3041c:	0003      	movs	r3, r0
   3041e:	2b01      	cmp	r3, #1
   30420:	d003      	beq.n	3042a <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   30422:	4b31      	ldr	r3, [pc, #196]	; (304e8 <StartTasks+0x100>)
   30424:	0018      	movs	r0, r3
   30426:	4b2b      	ldr	r3, [pc, #172]	; (304d4 <StartTasks+0xec>)
   30428:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3042a:	4b26      	ldr	r3, [pc, #152]	; (304c4 <StartTasks+0xdc>)
   3042c:	4798      	blx	r3
   3042e:	0003      	movs	r3, r0
   30430:	4a2e      	ldr	r2, [pc, #184]	; (304ec <StartTasks+0x104>)
   30432:	4826      	ldr	r0, [pc, #152]	; (304cc <StartTasks+0xe4>)
   30434:	2140      	movs	r1, #64	; 0x40
   30436:	4c26      	ldr	r4, [pc, #152]	; (304d0 <StartTasks+0xe8>)
   30438:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3043a:	4b24      	ldr	r3, [pc, #144]	; (304cc <StartTasks+0xe4>)
   3043c:	0018      	movs	r0, r3
   3043e:	4b25      	ldr	r3, [pc, #148]	; (304d4 <StartTasks+0xec>)
   30440:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
	SerialConsoleWriteString(bufferPrint);*/

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   30442:	2396      	movs	r3, #150	; 0x96
   30444:	009a      	lsls	r2, r3, #2
   30446:	492a      	ldr	r1, [pc, #168]	; (304f0 <StartTasks+0x108>)
   30448:	482a      	ldr	r0, [pc, #168]	; (304f4 <StartTasks+0x10c>)
   3044a:	4b2b      	ldr	r3, [pc, #172]	; (304f8 <StartTasks+0x110>)
   3044c:	9301      	str	r3, [sp, #4]
   3044e:	2303      	movs	r3, #3
   30450:	9300      	str	r3, [sp, #0]
   30452:	2300      	movs	r3, #0
   30454:	4c23      	ldr	r4, [pc, #140]	; (304e4 <StartTasks+0xfc>)
   30456:	47a0      	blx	r4
   30458:	0003      	movs	r3, r0
   3045a:	2b01      	cmp	r3, #1
   3045c:	d003      	beq.n	30466 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3045e:	4b27      	ldr	r3, [pc, #156]	; (304fc <StartTasks+0x114>)
   30460:	0018      	movs	r0, r3
   30462:	4b1c      	ldr	r3, [pc, #112]	; (304d4 <StartTasks+0xec>)
   30464:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   30466:	4b17      	ldr	r3, [pc, #92]	; (304c4 <StartTasks+0xdc>)
   30468:	4798      	blx	r3
   3046a:	0003      	movs	r3, r0
   3046c:	4a24      	ldr	r2, [pc, #144]	; (30500 <StartTasks+0x118>)
   3046e:	4817      	ldr	r0, [pc, #92]	; (304cc <StartTasks+0xe4>)
   30470:	2140      	movs	r1, #64	; 0x40
   30472:	4c17      	ldr	r4, [pc, #92]	; (304d0 <StartTasks+0xe8>)
   30474:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   30476:	4b15      	ldr	r3, [pc, #84]	; (304cc <StartTasks+0xe4>)
   30478:	0018      	movs	r0, r3
   3047a:	4b16      	ldr	r3, [pc, #88]	; (304d4 <StartTasks+0xec>)
   3047c:	4798      	blx	r3
	
	if (xTaskCreate(vAdcSpiTask, "ADC_SPI_TASK", ADC_SPI_TASK_SIZE, NULL, ADC_SPI_PRIORITY, &adcSpiTaskHandle) != pdPASS) {
   3047e:	23fa      	movs	r3, #250	; 0xfa
   30480:	005a      	lsls	r2, r3, #1
   30482:	4920      	ldr	r1, [pc, #128]	; (30504 <StartTasks+0x11c>)
   30484:	4820      	ldr	r0, [pc, #128]	; (30508 <StartTasks+0x120>)
   30486:	4b21      	ldr	r3, [pc, #132]	; (3050c <StartTasks+0x124>)
   30488:	9301      	str	r3, [sp, #4]
   3048a:	2303      	movs	r3, #3
   3048c:	9300      	str	r3, [sp, #0]
   3048e:	2300      	movs	r3, #0
   30490:	4c14      	ldr	r4, [pc, #80]	; (304e4 <StartTasks+0xfc>)
   30492:	47a0      	blx	r4
   30494:	0003      	movs	r3, r0
   30496:	2b01      	cmp	r3, #1
   30498:	d003      	beq.n	304a2 <StartTasks+0xba>
		SerialConsoleWriteString("ERR: ADC SPI task could not be initialized!\r\n");
   3049a:	4b1d      	ldr	r3, [pc, #116]	; (30510 <StartTasks+0x128>)
   3049c:	0018      	movs	r0, r3
   3049e:	4b0d      	ldr	r3, [pc, #52]	; (304d4 <StartTasks+0xec>)
   304a0:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting SPI: %d\r\n", xPortGetFreeHeapSize());
   304a2:	4b08      	ldr	r3, [pc, #32]	; (304c4 <StartTasks+0xdc>)
   304a4:	4798      	blx	r3
   304a6:	0003      	movs	r3, r0
   304a8:	4a1a      	ldr	r2, [pc, #104]	; (30514 <StartTasks+0x12c>)
   304aa:	4808      	ldr	r0, [pc, #32]	; (304cc <StartTasks+0xe4>)
   304ac:	2140      	movs	r1, #64	; 0x40
   304ae:	4c08      	ldr	r4, [pc, #32]	; (304d0 <StartTasks+0xe8>)
   304b0:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   304b2:	4b06      	ldr	r3, [pc, #24]	; (304cc <StartTasks+0xe4>)
   304b4:	0018      	movs	r0, r3
   304b6:	4b07      	ldr	r3, [pc, #28]	; (304d4 <StartTasks+0xec>)
   304b8:	4798      	blx	r3
	
}
   304ba:	46c0      	nop			; (mov r8, r8)
   304bc:	46bd      	mov	sp, r7
   304be:	b001      	add	sp, #4
   304c0:	bd90      	pop	{r4, r7, pc}
   304c2:	46c0      	nop			; (mov r8, r8)
   304c4:	00017f81 	.word	0x00017f81
   304c8:	00037314 	.word	0x00037314
   304cc:	200055c0 	.word	0x200055c0
   304d0:	0003245d 	.word	0x0003245d
   304d4:	0001b9b9 	.word	0x0001b9b9
   304d8:	00037338 	.word	0x00037338
   304dc:	00012ce9 	.word	0x00012ce9
   304e0:	2000416c 	.word	0x2000416c
   304e4:	000199c9 	.word	0x000199c9
   304e8:	00037344 	.word	0x00037344
   304ec:	00037370 	.word	0x00037370
   304f0:	00037390 	.word	0x00037390
   304f4:	00014ebd 	.word	0x00014ebd
   304f8:	20004174 	.word	0x20004174
   304fc:	0003739c 	.word	0x0003739c
   30500:	000373c8 	.word	0x000373c8
   30504:	000373e8 	.word	0x000373e8
   30508:	00012115 	.word	0x00012115
   3050c:	20004178 	.word	0x20004178
   30510:	000373f8 	.word	0x000373f8
   30514:	00037428 	.word	0x00037428

00030518 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void) {
   30518:	b580      	push	{r7, lr}
   3051a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3051c:	4b02      	ldr	r3, [pc, #8]	; (30528 <vApplicationMallocFailedHook+0x10>)
   3051e:	0018      	movs	r0, r3
   30520:	4b02      	ldr	r3, [pc, #8]	; (3052c <vApplicationMallocFailedHook+0x14>)
   30522:	4798      	blx	r3
    while (1)
   30524:	e7fe      	b.n	30524 <vApplicationMallocFailedHook+0xc>
   30526:	46c0      	nop			; (mov r8, r8)
   30528:	00037448 	.word	0x00037448
   3052c:	0001b9b9 	.word	0x0001b9b9

00030530 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void) {
   30530:	b580      	push	{r7, lr}
   30532:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   30534:	4b02      	ldr	r3, [pc, #8]	; (30540 <vApplicationStackOverflowHook+0x10>)
   30536:	0018      	movs	r0, r3
   30538:	4b02      	ldr	r3, [pc, #8]	; (30544 <vApplicationStackOverflowHook+0x14>)
   3053a:	4798      	blx	r3
    while (1)
   3053c:	e7fe      	b.n	3053c <vApplicationStackOverflowHook+0xc>
   3053e:	46c0      	nop			; (mov r8, r8)
   30540:	00037474 	.word	0x00037474
   30544:	0001b9b9 	.word	0x0001b9b9

00030548 <__udivsi3>:
   30548:	2200      	movs	r2, #0
   3054a:	0843      	lsrs	r3, r0, #1
   3054c:	428b      	cmp	r3, r1
   3054e:	d374      	bcc.n	3063a <__udivsi3+0xf2>
   30550:	0903      	lsrs	r3, r0, #4
   30552:	428b      	cmp	r3, r1
   30554:	d35f      	bcc.n	30616 <__udivsi3+0xce>
   30556:	0a03      	lsrs	r3, r0, #8
   30558:	428b      	cmp	r3, r1
   3055a:	d344      	bcc.n	305e6 <__udivsi3+0x9e>
   3055c:	0b03      	lsrs	r3, r0, #12
   3055e:	428b      	cmp	r3, r1
   30560:	d328      	bcc.n	305b4 <__udivsi3+0x6c>
   30562:	0c03      	lsrs	r3, r0, #16
   30564:	428b      	cmp	r3, r1
   30566:	d30d      	bcc.n	30584 <__udivsi3+0x3c>
   30568:	22ff      	movs	r2, #255	; 0xff
   3056a:	0209      	lsls	r1, r1, #8
   3056c:	ba12      	rev	r2, r2
   3056e:	0c03      	lsrs	r3, r0, #16
   30570:	428b      	cmp	r3, r1
   30572:	d302      	bcc.n	3057a <__udivsi3+0x32>
   30574:	1212      	asrs	r2, r2, #8
   30576:	0209      	lsls	r1, r1, #8
   30578:	d065      	beq.n	30646 <__udivsi3+0xfe>
   3057a:	0b03      	lsrs	r3, r0, #12
   3057c:	428b      	cmp	r3, r1
   3057e:	d319      	bcc.n	305b4 <__udivsi3+0x6c>
   30580:	e000      	b.n	30584 <__udivsi3+0x3c>
   30582:	0a09      	lsrs	r1, r1, #8
   30584:	0bc3      	lsrs	r3, r0, #15
   30586:	428b      	cmp	r3, r1
   30588:	d301      	bcc.n	3058e <__udivsi3+0x46>
   3058a:	03cb      	lsls	r3, r1, #15
   3058c:	1ac0      	subs	r0, r0, r3
   3058e:	4152      	adcs	r2, r2
   30590:	0b83      	lsrs	r3, r0, #14
   30592:	428b      	cmp	r3, r1
   30594:	d301      	bcc.n	3059a <__udivsi3+0x52>
   30596:	038b      	lsls	r3, r1, #14
   30598:	1ac0      	subs	r0, r0, r3
   3059a:	4152      	adcs	r2, r2
   3059c:	0b43      	lsrs	r3, r0, #13
   3059e:	428b      	cmp	r3, r1
   305a0:	d301      	bcc.n	305a6 <__udivsi3+0x5e>
   305a2:	034b      	lsls	r3, r1, #13
   305a4:	1ac0      	subs	r0, r0, r3
   305a6:	4152      	adcs	r2, r2
   305a8:	0b03      	lsrs	r3, r0, #12
   305aa:	428b      	cmp	r3, r1
   305ac:	d301      	bcc.n	305b2 <__udivsi3+0x6a>
   305ae:	030b      	lsls	r3, r1, #12
   305b0:	1ac0      	subs	r0, r0, r3
   305b2:	4152      	adcs	r2, r2
   305b4:	0ac3      	lsrs	r3, r0, #11
   305b6:	428b      	cmp	r3, r1
   305b8:	d301      	bcc.n	305be <__udivsi3+0x76>
   305ba:	02cb      	lsls	r3, r1, #11
   305bc:	1ac0      	subs	r0, r0, r3
   305be:	4152      	adcs	r2, r2
   305c0:	0a83      	lsrs	r3, r0, #10
   305c2:	428b      	cmp	r3, r1
   305c4:	d301      	bcc.n	305ca <__udivsi3+0x82>
   305c6:	028b      	lsls	r3, r1, #10
   305c8:	1ac0      	subs	r0, r0, r3
   305ca:	4152      	adcs	r2, r2
   305cc:	0a43      	lsrs	r3, r0, #9
   305ce:	428b      	cmp	r3, r1
   305d0:	d301      	bcc.n	305d6 <__udivsi3+0x8e>
   305d2:	024b      	lsls	r3, r1, #9
   305d4:	1ac0      	subs	r0, r0, r3
   305d6:	4152      	adcs	r2, r2
   305d8:	0a03      	lsrs	r3, r0, #8
   305da:	428b      	cmp	r3, r1
   305dc:	d301      	bcc.n	305e2 <__udivsi3+0x9a>
   305de:	020b      	lsls	r3, r1, #8
   305e0:	1ac0      	subs	r0, r0, r3
   305e2:	4152      	adcs	r2, r2
   305e4:	d2cd      	bcs.n	30582 <__udivsi3+0x3a>
   305e6:	09c3      	lsrs	r3, r0, #7
   305e8:	428b      	cmp	r3, r1
   305ea:	d301      	bcc.n	305f0 <__udivsi3+0xa8>
   305ec:	01cb      	lsls	r3, r1, #7
   305ee:	1ac0      	subs	r0, r0, r3
   305f0:	4152      	adcs	r2, r2
   305f2:	0983      	lsrs	r3, r0, #6
   305f4:	428b      	cmp	r3, r1
   305f6:	d301      	bcc.n	305fc <__udivsi3+0xb4>
   305f8:	018b      	lsls	r3, r1, #6
   305fa:	1ac0      	subs	r0, r0, r3
   305fc:	4152      	adcs	r2, r2
   305fe:	0943      	lsrs	r3, r0, #5
   30600:	428b      	cmp	r3, r1
   30602:	d301      	bcc.n	30608 <__udivsi3+0xc0>
   30604:	014b      	lsls	r3, r1, #5
   30606:	1ac0      	subs	r0, r0, r3
   30608:	4152      	adcs	r2, r2
   3060a:	0903      	lsrs	r3, r0, #4
   3060c:	428b      	cmp	r3, r1
   3060e:	d301      	bcc.n	30614 <__udivsi3+0xcc>
   30610:	010b      	lsls	r3, r1, #4
   30612:	1ac0      	subs	r0, r0, r3
   30614:	4152      	adcs	r2, r2
   30616:	08c3      	lsrs	r3, r0, #3
   30618:	428b      	cmp	r3, r1
   3061a:	d301      	bcc.n	30620 <__udivsi3+0xd8>
   3061c:	00cb      	lsls	r3, r1, #3
   3061e:	1ac0      	subs	r0, r0, r3
   30620:	4152      	adcs	r2, r2
   30622:	0883      	lsrs	r3, r0, #2
   30624:	428b      	cmp	r3, r1
   30626:	d301      	bcc.n	3062c <__udivsi3+0xe4>
   30628:	008b      	lsls	r3, r1, #2
   3062a:	1ac0      	subs	r0, r0, r3
   3062c:	4152      	adcs	r2, r2
   3062e:	0843      	lsrs	r3, r0, #1
   30630:	428b      	cmp	r3, r1
   30632:	d301      	bcc.n	30638 <__udivsi3+0xf0>
   30634:	004b      	lsls	r3, r1, #1
   30636:	1ac0      	subs	r0, r0, r3
   30638:	4152      	adcs	r2, r2
   3063a:	1a41      	subs	r1, r0, r1
   3063c:	d200      	bcs.n	30640 <__udivsi3+0xf8>
   3063e:	4601      	mov	r1, r0
   30640:	4152      	adcs	r2, r2
   30642:	4610      	mov	r0, r2
   30644:	4770      	bx	lr
   30646:	e7ff      	b.n	30648 <__udivsi3+0x100>
   30648:	b501      	push	{r0, lr}
   3064a:	2000      	movs	r0, #0
   3064c:	f000 f8f0 	bl	30830 <__aeabi_idiv0>
   30650:	bd02      	pop	{r1, pc}
   30652:	46c0      	nop			; (mov r8, r8)

00030654 <__aeabi_uidivmod>:
   30654:	2900      	cmp	r1, #0
   30656:	d0f7      	beq.n	30648 <__udivsi3+0x100>
   30658:	e776      	b.n	30548 <__udivsi3>
   3065a:	4770      	bx	lr

0003065c <__divsi3>:
   3065c:	4603      	mov	r3, r0
   3065e:	430b      	orrs	r3, r1
   30660:	d47f      	bmi.n	30762 <__divsi3+0x106>
   30662:	2200      	movs	r2, #0
   30664:	0843      	lsrs	r3, r0, #1
   30666:	428b      	cmp	r3, r1
   30668:	d374      	bcc.n	30754 <__divsi3+0xf8>
   3066a:	0903      	lsrs	r3, r0, #4
   3066c:	428b      	cmp	r3, r1
   3066e:	d35f      	bcc.n	30730 <__divsi3+0xd4>
   30670:	0a03      	lsrs	r3, r0, #8
   30672:	428b      	cmp	r3, r1
   30674:	d344      	bcc.n	30700 <__divsi3+0xa4>
   30676:	0b03      	lsrs	r3, r0, #12
   30678:	428b      	cmp	r3, r1
   3067a:	d328      	bcc.n	306ce <__divsi3+0x72>
   3067c:	0c03      	lsrs	r3, r0, #16
   3067e:	428b      	cmp	r3, r1
   30680:	d30d      	bcc.n	3069e <__divsi3+0x42>
   30682:	22ff      	movs	r2, #255	; 0xff
   30684:	0209      	lsls	r1, r1, #8
   30686:	ba12      	rev	r2, r2
   30688:	0c03      	lsrs	r3, r0, #16
   3068a:	428b      	cmp	r3, r1
   3068c:	d302      	bcc.n	30694 <__divsi3+0x38>
   3068e:	1212      	asrs	r2, r2, #8
   30690:	0209      	lsls	r1, r1, #8
   30692:	d065      	beq.n	30760 <__divsi3+0x104>
   30694:	0b03      	lsrs	r3, r0, #12
   30696:	428b      	cmp	r3, r1
   30698:	d319      	bcc.n	306ce <__divsi3+0x72>
   3069a:	e000      	b.n	3069e <__divsi3+0x42>
   3069c:	0a09      	lsrs	r1, r1, #8
   3069e:	0bc3      	lsrs	r3, r0, #15
   306a0:	428b      	cmp	r3, r1
   306a2:	d301      	bcc.n	306a8 <__divsi3+0x4c>
   306a4:	03cb      	lsls	r3, r1, #15
   306a6:	1ac0      	subs	r0, r0, r3
   306a8:	4152      	adcs	r2, r2
   306aa:	0b83      	lsrs	r3, r0, #14
   306ac:	428b      	cmp	r3, r1
   306ae:	d301      	bcc.n	306b4 <__divsi3+0x58>
   306b0:	038b      	lsls	r3, r1, #14
   306b2:	1ac0      	subs	r0, r0, r3
   306b4:	4152      	adcs	r2, r2
   306b6:	0b43      	lsrs	r3, r0, #13
   306b8:	428b      	cmp	r3, r1
   306ba:	d301      	bcc.n	306c0 <__divsi3+0x64>
   306bc:	034b      	lsls	r3, r1, #13
   306be:	1ac0      	subs	r0, r0, r3
   306c0:	4152      	adcs	r2, r2
   306c2:	0b03      	lsrs	r3, r0, #12
   306c4:	428b      	cmp	r3, r1
   306c6:	d301      	bcc.n	306cc <__divsi3+0x70>
   306c8:	030b      	lsls	r3, r1, #12
   306ca:	1ac0      	subs	r0, r0, r3
   306cc:	4152      	adcs	r2, r2
   306ce:	0ac3      	lsrs	r3, r0, #11
   306d0:	428b      	cmp	r3, r1
   306d2:	d301      	bcc.n	306d8 <__divsi3+0x7c>
   306d4:	02cb      	lsls	r3, r1, #11
   306d6:	1ac0      	subs	r0, r0, r3
   306d8:	4152      	adcs	r2, r2
   306da:	0a83      	lsrs	r3, r0, #10
   306dc:	428b      	cmp	r3, r1
   306de:	d301      	bcc.n	306e4 <__divsi3+0x88>
   306e0:	028b      	lsls	r3, r1, #10
   306e2:	1ac0      	subs	r0, r0, r3
   306e4:	4152      	adcs	r2, r2
   306e6:	0a43      	lsrs	r3, r0, #9
   306e8:	428b      	cmp	r3, r1
   306ea:	d301      	bcc.n	306f0 <__divsi3+0x94>
   306ec:	024b      	lsls	r3, r1, #9
   306ee:	1ac0      	subs	r0, r0, r3
   306f0:	4152      	adcs	r2, r2
   306f2:	0a03      	lsrs	r3, r0, #8
   306f4:	428b      	cmp	r3, r1
   306f6:	d301      	bcc.n	306fc <__divsi3+0xa0>
   306f8:	020b      	lsls	r3, r1, #8
   306fa:	1ac0      	subs	r0, r0, r3
   306fc:	4152      	adcs	r2, r2
   306fe:	d2cd      	bcs.n	3069c <__divsi3+0x40>
   30700:	09c3      	lsrs	r3, r0, #7
   30702:	428b      	cmp	r3, r1
   30704:	d301      	bcc.n	3070a <__divsi3+0xae>
   30706:	01cb      	lsls	r3, r1, #7
   30708:	1ac0      	subs	r0, r0, r3
   3070a:	4152      	adcs	r2, r2
   3070c:	0983      	lsrs	r3, r0, #6
   3070e:	428b      	cmp	r3, r1
   30710:	d301      	bcc.n	30716 <__divsi3+0xba>
   30712:	018b      	lsls	r3, r1, #6
   30714:	1ac0      	subs	r0, r0, r3
   30716:	4152      	adcs	r2, r2
   30718:	0943      	lsrs	r3, r0, #5
   3071a:	428b      	cmp	r3, r1
   3071c:	d301      	bcc.n	30722 <__divsi3+0xc6>
   3071e:	014b      	lsls	r3, r1, #5
   30720:	1ac0      	subs	r0, r0, r3
   30722:	4152      	adcs	r2, r2
   30724:	0903      	lsrs	r3, r0, #4
   30726:	428b      	cmp	r3, r1
   30728:	d301      	bcc.n	3072e <__divsi3+0xd2>
   3072a:	010b      	lsls	r3, r1, #4
   3072c:	1ac0      	subs	r0, r0, r3
   3072e:	4152      	adcs	r2, r2
   30730:	08c3      	lsrs	r3, r0, #3
   30732:	428b      	cmp	r3, r1
   30734:	d301      	bcc.n	3073a <__divsi3+0xde>
   30736:	00cb      	lsls	r3, r1, #3
   30738:	1ac0      	subs	r0, r0, r3
   3073a:	4152      	adcs	r2, r2
   3073c:	0883      	lsrs	r3, r0, #2
   3073e:	428b      	cmp	r3, r1
   30740:	d301      	bcc.n	30746 <__divsi3+0xea>
   30742:	008b      	lsls	r3, r1, #2
   30744:	1ac0      	subs	r0, r0, r3
   30746:	4152      	adcs	r2, r2
   30748:	0843      	lsrs	r3, r0, #1
   3074a:	428b      	cmp	r3, r1
   3074c:	d301      	bcc.n	30752 <__divsi3+0xf6>
   3074e:	004b      	lsls	r3, r1, #1
   30750:	1ac0      	subs	r0, r0, r3
   30752:	4152      	adcs	r2, r2
   30754:	1a41      	subs	r1, r0, r1
   30756:	d200      	bcs.n	3075a <__divsi3+0xfe>
   30758:	4601      	mov	r1, r0
   3075a:	4152      	adcs	r2, r2
   3075c:	4610      	mov	r0, r2
   3075e:	4770      	bx	lr
   30760:	e05d      	b.n	3081e <__divsi3+0x1c2>
   30762:	0fca      	lsrs	r2, r1, #31
   30764:	d000      	beq.n	30768 <__divsi3+0x10c>
   30766:	4249      	negs	r1, r1
   30768:	1003      	asrs	r3, r0, #32
   3076a:	d300      	bcc.n	3076e <__divsi3+0x112>
   3076c:	4240      	negs	r0, r0
   3076e:	4053      	eors	r3, r2
   30770:	2200      	movs	r2, #0
   30772:	469c      	mov	ip, r3
   30774:	0903      	lsrs	r3, r0, #4
   30776:	428b      	cmp	r3, r1
   30778:	d32d      	bcc.n	307d6 <__divsi3+0x17a>
   3077a:	0a03      	lsrs	r3, r0, #8
   3077c:	428b      	cmp	r3, r1
   3077e:	d312      	bcc.n	307a6 <__divsi3+0x14a>
   30780:	22fc      	movs	r2, #252	; 0xfc
   30782:	0189      	lsls	r1, r1, #6
   30784:	ba12      	rev	r2, r2
   30786:	0a03      	lsrs	r3, r0, #8
   30788:	428b      	cmp	r3, r1
   3078a:	d30c      	bcc.n	307a6 <__divsi3+0x14a>
   3078c:	0189      	lsls	r1, r1, #6
   3078e:	1192      	asrs	r2, r2, #6
   30790:	428b      	cmp	r3, r1
   30792:	d308      	bcc.n	307a6 <__divsi3+0x14a>
   30794:	0189      	lsls	r1, r1, #6
   30796:	1192      	asrs	r2, r2, #6
   30798:	428b      	cmp	r3, r1
   3079a:	d304      	bcc.n	307a6 <__divsi3+0x14a>
   3079c:	0189      	lsls	r1, r1, #6
   3079e:	d03a      	beq.n	30816 <__divsi3+0x1ba>
   307a0:	1192      	asrs	r2, r2, #6
   307a2:	e000      	b.n	307a6 <__divsi3+0x14a>
   307a4:	0989      	lsrs	r1, r1, #6
   307a6:	09c3      	lsrs	r3, r0, #7
   307a8:	428b      	cmp	r3, r1
   307aa:	d301      	bcc.n	307b0 <__divsi3+0x154>
   307ac:	01cb      	lsls	r3, r1, #7
   307ae:	1ac0      	subs	r0, r0, r3
   307b0:	4152      	adcs	r2, r2
   307b2:	0983      	lsrs	r3, r0, #6
   307b4:	428b      	cmp	r3, r1
   307b6:	d301      	bcc.n	307bc <__divsi3+0x160>
   307b8:	018b      	lsls	r3, r1, #6
   307ba:	1ac0      	subs	r0, r0, r3
   307bc:	4152      	adcs	r2, r2
   307be:	0943      	lsrs	r3, r0, #5
   307c0:	428b      	cmp	r3, r1
   307c2:	d301      	bcc.n	307c8 <__divsi3+0x16c>
   307c4:	014b      	lsls	r3, r1, #5
   307c6:	1ac0      	subs	r0, r0, r3
   307c8:	4152      	adcs	r2, r2
   307ca:	0903      	lsrs	r3, r0, #4
   307cc:	428b      	cmp	r3, r1
   307ce:	d301      	bcc.n	307d4 <__divsi3+0x178>
   307d0:	010b      	lsls	r3, r1, #4
   307d2:	1ac0      	subs	r0, r0, r3
   307d4:	4152      	adcs	r2, r2
   307d6:	08c3      	lsrs	r3, r0, #3
   307d8:	428b      	cmp	r3, r1
   307da:	d301      	bcc.n	307e0 <__divsi3+0x184>
   307dc:	00cb      	lsls	r3, r1, #3
   307de:	1ac0      	subs	r0, r0, r3
   307e0:	4152      	adcs	r2, r2
   307e2:	0883      	lsrs	r3, r0, #2
   307e4:	428b      	cmp	r3, r1
   307e6:	d301      	bcc.n	307ec <__divsi3+0x190>
   307e8:	008b      	lsls	r3, r1, #2
   307ea:	1ac0      	subs	r0, r0, r3
   307ec:	4152      	adcs	r2, r2
   307ee:	d2d9      	bcs.n	307a4 <__divsi3+0x148>
   307f0:	0843      	lsrs	r3, r0, #1
   307f2:	428b      	cmp	r3, r1
   307f4:	d301      	bcc.n	307fa <__divsi3+0x19e>
   307f6:	004b      	lsls	r3, r1, #1
   307f8:	1ac0      	subs	r0, r0, r3
   307fa:	4152      	adcs	r2, r2
   307fc:	1a41      	subs	r1, r0, r1
   307fe:	d200      	bcs.n	30802 <__divsi3+0x1a6>
   30800:	4601      	mov	r1, r0
   30802:	4663      	mov	r3, ip
   30804:	4152      	adcs	r2, r2
   30806:	105b      	asrs	r3, r3, #1
   30808:	4610      	mov	r0, r2
   3080a:	d301      	bcc.n	30810 <__divsi3+0x1b4>
   3080c:	4240      	negs	r0, r0
   3080e:	2b00      	cmp	r3, #0
   30810:	d500      	bpl.n	30814 <__divsi3+0x1b8>
   30812:	4249      	negs	r1, r1
   30814:	4770      	bx	lr
   30816:	4663      	mov	r3, ip
   30818:	105b      	asrs	r3, r3, #1
   3081a:	d300      	bcc.n	3081e <__divsi3+0x1c2>
   3081c:	4240      	negs	r0, r0
   3081e:	b501      	push	{r0, lr}
   30820:	2000      	movs	r0, #0
   30822:	f000 f805 	bl	30830 <__aeabi_idiv0>
   30826:	bd02      	pop	{r1, pc}

00030828 <__aeabi_idivmod>:
   30828:	2900      	cmp	r1, #0
   3082a:	d0f8      	beq.n	3081e <__divsi3+0x1c2>
   3082c:	e716      	b.n	3065c <__divsi3>
   3082e:	4770      	bx	lr

00030830 <__aeabi_idiv0>:
   30830:	4770      	bx	lr
   30832:	46c0      	nop			; (mov r8, r8)

00030834 <__aeabi_lmul>:
   30834:	b5f0      	push	{r4, r5, r6, r7, lr}
   30836:	46ce      	mov	lr, r9
   30838:	4647      	mov	r7, r8
   3083a:	0415      	lsls	r5, r2, #16
   3083c:	0c2d      	lsrs	r5, r5, #16
   3083e:	002e      	movs	r6, r5
   30840:	b580      	push	{r7, lr}
   30842:	0407      	lsls	r7, r0, #16
   30844:	0c14      	lsrs	r4, r2, #16
   30846:	0c3f      	lsrs	r7, r7, #16
   30848:	4699      	mov	r9, r3
   3084a:	0c03      	lsrs	r3, r0, #16
   3084c:	437e      	muls	r6, r7
   3084e:	435d      	muls	r5, r3
   30850:	4367      	muls	r7, r4
   30852:	4363      	muls	r3, r4
   30854:	197f      	adds	r7, r7, r5
   30856:	0c34      	lsrs	r4, r6, #16
   30858:	19e4      	adds	r4, r4, r7
   3085a:	469c      	mov	ip, r3
   3085c:	42a5      	cmp	r5, r4
   3085e:	d903      	bls.n	30868 <__aeabi_lmul+0x34>
   30860:	2380      	movs	r3, #128	; 0x80
   30862:	025b      	lsls	r3, r3, #9
   30864:	4698      	mov	r8, r3
   30866:	44c4      	add	ip, r8
   30868:	464b      	mov	r3, r9
   3086a:	4351      	muls	r1, r2
   3086c:	4343      	muls	r3, r0
   3086e:	0436      	lsls	r6, r6, #16
   30870:	0c36      	lsrs	r6, r6, #16
   30872:	0c25      	lsrs	r5, r4, #16
   30874:	0424      	lsls	r4, r4, #16
   30876:	4465      	add	r5, ip
   30878:	19a4      	adds	r4, r4, r6
   3087a:	1859      	adds	r1, r3, r1
   3087c:	1949      	adds	r1, r1, r5
   3087e:	0020      	movs	r0, r4
   30880:	bc0c      	pop	{r2, r3}
   30882:	4690      	mov	r8, r2
   30884:	4699      	mov	r9, r3
   30886:	bdf0      	pop	{r4, r5, r6, r7, pc}

00030888 <__aeabi_dadd>:
   30888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3088a:	4645      	mov	r5, r8
   3088c:	46de      	mov	lr, fp
   3088e:	4657      	mov	r7, sl
   30890:	464e      	mov	r6, r9
   30892:	030c      	lsls	r4, r1, #12
   30894:	b5e0      	push	{r5, r6, r7, lr}
   30896:	004e      	lsls	r6, r1, #1
   30898:	0fc9      	lsrs	r1, r1, #31
   3089a:	4688      	mov	r8, r1
   3089c:	000d      	movs	r5, r1
   3089e:	0a61      	lsrs	r1, r4, #9
   308a0:	0f44      	lsrs	r4, r0, #29
   308a2:	430c      	orrs	r4, r1
   308a4:	00c7      	lsls	r7, r0, #3
   308a6:	0319      	lsls	r1, r3, #12
   308a8:	0058      	lsls	r0, r3, #1
   308aa:	0fdb      	lsrs	r3, r3, #31
   308ac:	469b      	mov	fp, r3
   308ae:	0a4b      	lsrs	r3, r1, #9
   308b0:	0f51      	lsrs	r1, r2, #29
   308b2:	430b      	orrs	r3, r1
   308b4:	0d76      	lsrs	r6, r6, #21
   308b6:	0d40      	lsrs	r0, r0, #21
   308b8:	0019      	movs	r1, r3
   308ba:	00d2      	lsls	r2, r2, #3
   308bc:	45d8      	cmp	r8, fp
   308be:	d100      	bne.n	308c2 <__aeabi_dadd+0x3a>
   308c0:	e0ae      	b.n	30a20 <__aeabi_dadd+0x198>
   308c2:	1a35      	subs	r5, r6, r0
   308c4:	2d00      	cmp	r5, #0
   308c6:	dc00      	bgt.n	308ca <__aeabi_dadd+0x42>
   308c8:	e0f6      	b.n	30ab8 <__aeabi_dadd+0x230>
   308ca:	2800      	cmp	r0, #0
   308cc:	d10f      	bne.n	308ee <__aeabi_dadd+0x66>
   308ce:	4313      	orrs	r3, r2
   308d0:	d100      	bne.n	308d4 <__aeabi_dadd+0x4c>
   308d2:	e0db      	b.n	30a8c <__aeabi_dadd+0x204>
   308d4:	1e6b      	subs	r3, r5, #1
   308d6:	2b00      	cmp	r3, #0
   308d8:	d000      	beq.n	308dc <__aeabi_dadd+0x54>
   308da:	e137      	b.n	30b4c <__aeabi_dadd+0x2c4>
   308dc:	1aba      	subs	r2, r7, r2
   308de:	4297      	cmp	r7, r2
   308e0:	41bf      	sbcs	r7, r7
   308e2:	1a64      	subs	r4, r4, r1
   308e4:	427f      	negs	r7, r7
   308e6:	1be4      	subs	r4, r4, r7
   308e8:	2601      	movs	r6, #1
   308ea:	0017      	movs	r7, r2
   308ec:	e024      	b.n	30938 <__aeabi_dadd+0xb0>
   308ee:	4bc6      	ldr	r3, [pc, #792]	; (30c08 <__aeabi_dadd+0x380>)
   308f0:	429e      	cmp	r6, r3
   308f2:	d04d      	beq.n	30990 <__aeabi_dadd+0x108>
   308f4:	2380      	movs	r3, #128	; 0x80
   308f6:	041b      	lsls	r3, r3, #16
   308f8:	4319      	orrs	r1, r3
   308fa:	2d38      	cmp	r5, #56	; 0x38
   308fc:	dd00      	ble.n	30900 <__aeabi_dadd+0x78>
   308fe:	e107      	b.n	30b10 <__aeabi_dadd+0x288>
   30900:	2d1f      	cmp	r5, #31
   30902:	dd00      	ble.n	30906 <__aeabi_dadd+0x7e>
   30904:	e138      	b.n	30b78 <__aeabi_dadd+0x2f0>
   30906:	2020      	movs	r0, #32
   30908:	1b43      	subs	r3, r0, r5
   3090a:	469a      	mov	sl, r3
   3090c:	000b      	movs	r3, r1
   3090e:	4650      	mov	r0, sl
   30910:	4083      	lsls	r3, r0
   30912:	4699      	mov	r9, r3
   30914:	0013      	movs	r3, r2
   30916:	4648      	mov	r0, r9
   30918:	40eb      	lsrs	r3, r5
   3091a:	4318      	orrs	r0, r3
   3091c:	0003      	movs	r3, r0
   3091e:	4650      	mov	r0, sl
   30920:	4082      	lsls	r2, r0
   30922:	1e50      	subs	r0, r2, #1
   30924:	4182      	sbcs	r2, r0
   30926:	40e9      	lsrs	r1, r5
   30928:	431a      	orrs	r2, r3
   3092a:	1aba      	subs	r2, r7, r2
   3092c:	1a61      	subs	r1, r4, r1
   3092e:	4297      	cmp	r7, r2
   30930:	41a4      	sbcs	r4, r4
   30932:	0017      	movs	r7, r2
   30934:	4264      	negs	r4, r4
   30936:	1b0c      	subs	r4, r1, r4
   30938:	0223      	lsls	r3, r4, #8
   3093a:	d562      	bpl.n	30a02 <__aeabi_dadd+0x17a>
   3093c:	0264      	lsls	r4, r4, #9
   3093e:	0a65      	lsrs	r5, r4, #9
   30940:	2d00      	cmp	r5, #0
   30942:	d100      	bne.n	30946 <__aeabi_dadd+0xbe>
   30944:	e0df      	b.n	30b06 <__aeabi_dadd+0x27e>
   30946:	0028      	movs	r0, r5
   30948:	f001 fbe4 	bl	32114 <__clzsi2>
   3094c:	0003      	movs	r3, r0
   3094e:	3b08      	subs	r3, #8
   30950:	2b1f      	cmp	r3, #31
   30952:	dd00      	ble.n	30956 <__aeabi_dadd+0xce>
   30954:	e0d2      	b.n	30afc <__aeabi_dadd+0x274>
   30956:	2220      	movs	r2, #32
   30958:	003c      	movs	r4, r7
   3095a:	1ad2      	subs	r2, r2, r3
   3095c:	409d      	lsls	r5, r3
   3095e:	40d4      	lsrs	r4, r2
   30960:	409f      	lsls	r7, r3
   30962:	4325      	orrs	r5, r4
   30964:	429e      	cmp	r6, r3
   30966:	dd00      	ble.n	3096a <__aeabi_dadd+0xe2>
   30968:	e0c4      	b.n	30af4 <__aeabi_dadd+0x26c>
   3096a:	1b9e      	subs	r6, r3, r6
   3096c:	1c73      	adds	r3, r6, #1
   3096e:	2b1f      	cmp	r3, #31
   30970:	dd00      	ble.n	30974 <__aeabi_dadd+0xec>
   30972:	e0f1      	b.n	30b58 <__aeabi_dadd+0x2d0>
   30974:	2220      	movs	r2, #32
   30976:	0038      	movs	r0, r7
   30978:	0029      	movs	r1, r5
   3097a:	1ad2      	subs	r2, r2, r3
   3097c:	40d8      	lsrs	r0, r3
   3097e:	4091      	lsls	r1, r2
   30980:	4097      	lsls	r7, r2
   30982:	002c      	movs	r4, r5
   30984:	4301      	orrs	r1, r0
   30986:	1e78      	subs	r0, r7, #1
   30988:	4187      	sbcs	r7, r0
   3098a:	40dc      	lsrs	r4, r3
   3098c:	2600      	movs	r6, #0
   3098e:	430f      	orrs	r7, r1
   30990:	077b      	lsls	r3, r7, #29
   30992:	d009      	beq.n	309a8 <__aeabi_dadd+0x120>
   30994:	230f      	movs	r3, #15
   30996:	403b      	ands	r3, r7
   30998:	2b04      	cmp	r3, #4
   3099a:	d005      	beq.n	309a8 <__aeabi_dadd+0x120>
   3099c:	1d3b      	adds	r3, r7, #4
   3099e:	42bb      	cmp	r3, r7
   309a0:	41bf      	sbcs	r7, r7
   309a2:	427f      	negs	r7, r7
   309a4:	19e4      	adds	r4, r4, r7
   309a6:	001f      	movs	r7, r3
   309a8:	0223      	lsls	r3, r4, #8
   309aa:	d52c      	bpl.n	30a06 <__aeabi_dadd+0x17e>
   309ac:	4b96      	ldr	r3, [pc, #600]	; (30c08 <__aeabi_dadd+0x380>)
   309ae:	3601      	adds	r6, #1
   309b0:	429e      	cmp	r6, r3
   309b2:	d100      	bne.n	309b6 <__aeabi_dadd+0x12e>
   309b4:	e09a      	b.n	30aec <__aeabi_dadd+0x264>
   309b6:	4645      	mov	r5, r8
   309b8:	4b94      	ldr	r3, [pc, #592]	; (30c0c <__aeabi_dadd+0x384>)
   309ba:	08ff      	lsrs	r7, r7, #3
   309bc:	401c      	ands	r4, r3
   309be:	0760      	lsls	r0, r4, #29
   309c0:	0576      	lsls	r6, r6, #21
   309c2:	0264      	lsls	r4, r4, #9
   309c4:	4307      	orrs	r7, r0
   309c6:	0b24      	lsrs	r4, r4, #12
   309c8:	0d76      	lsrs	r6, r6, #21
   309ca:	2100      	movs	r1, #0
   309cc:	0324      	lsls	r4, r4, #12
   309ce:	0b23      	lsrs	r3, r4, #12
   309d0:	0d0c      	lsrs	r4, r1, #20
   309d2:	4a8f      	ldr	r2, [pc, #572]	; (30c10 <__aeabi_dadd+0x388>)
   309d4:	0524      	lsls	r4, r4, #20
   309d6:	431c      	orrs	r4, r3
   309d8:	4014      	ands	r4, r2
   309da:	0533      	lsls	r3, r6, #20
   309dc:	4323      	orrs	r3, r4
   309de:	005b      	lsls	r3, r3, #1
   309e0:	07ed      	lsls	r5, r5, #31
   309e2:	085b      	lsrs	r3, r3, #1
   309e4:	432b      	orrs	r3, r5
   309e6:	0038      	movs	r0, r7
   309e8:	0019      	movs	r1, r3
   309ea:	bc3c      	pop	{r2, r3, r4, r5}
   309ec:	4690      	mov	r8, r2
   309ee:	4699      	mov	r9, r3
   309f0:	46a2      	mov	sl, r4
   309f2:	46ab      	mov	fp, r5
   309f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   309f6:	4664      	mov	r4, ip
   309f8:	4304      	orrs	r4, r0
   309fa:	d100      	bne.n	309fe <__aeabi_dadd+0x176>
   309fc:	e211      	b.n	30e22 <__aeabi_dadd+0x59a>
   309fe:	0004      	movs	r4, r0
   30a00:	4667      	mov	r7, ip
   30a02:	077b      	lsls	r3, r7, #29
   30a04:	d1c6      	bne.n	30994 <__aeabi_dadd+0x10c>
   30a06:	4645      	mov	r5, r8
   30a08:	0760      	lsls	r0, r4, #29
   30a0a:	08ff      	lsrs	r7, r7, #3
   30a0c:	4307      	orrs	r7, r0
   30a0e:	08e4      	lsrs	r4, r4, #3
   30a10:	4b7d      	ldr	r3, [pc, #500]	; (30c08 <__aeabi_dadd+0x380>)
   30a12:	429e      	cmp	r6, r3
   30a14:	d030      	beq.n	30a78 <__aeabi_dadd+0x1f0>
   30a16:	0324      	lsls	r4, r4, #12
   30a18:	0576      	lsls	r6, r6, #21
   30a1a:	0b24      	lsrs	r4, r4, #12
   30a1c:	0d76      	lsrs	r6, r6, #21
   30a1e:	e7d4      	b.n	309ca <__aeabi_dadd+0x142>
   30a20:	1a33      	subs	r3, r6, r0
   30a22:	469a      	mov	sl, r3
   30a24:	2b00      	cmp	r3, #0
   30a26:	dd78      	ble.n	30b1a <__aeabi_dadd+0x292>
   30a28:	2800      	cmp	r0, #0
   30a2a:	d031      	beq.n	30a90 <__aeabi_dadd+0x208>
   30a2c:	4876      	ldr	r0, [pc, #472]	; (30c08 <__aeabi_dadd+0x380>)
   30a2e:	4286      	cmp	r6, r0
   30a30:	d0ae      	beq.n	30990 <__aeabi_dadd+0x108>
   30a32:	2080      	movs	r0, #128	; 0x80
   30a34:	0400      	lsls	r0, r0, #16
   30a36:	4301      	orrs	r1, r0
   30a38:	4653      	mov	r3, sl
   30a3a:	2b38      	cmp	r3, #56	; 0x38
   30a3c:	dc00      	bgt.n	30a40 <__aeabi_dadd+0x1b8>
   30a3e:	e0e9      	b.n	30c14 <__aeabi_dadd+0x38c>
   30a40:	430a      	orrs	r2, r1
   30a42:	1e51      	subs	r1, r2, #1
   30a44:	418a      	sbcs	r2, r1
   30a46:	2100      	movs	r1, #0
   30a48:	19d2      	adds	r2, r2, r7
   30a4a:	42ba      	cmp	r2, r7
   30a4c:	41bf      	sbcs	r7, r7
   30a4e:	1909      	adds	r1, r1, r4
   30a50:	427c      	negs	r4, r7
   30a52:	0017      	movs	r7, r2
   30a54:	190c      	adds	r4, r1, r4
   30a56:	0223      	lsls	r3, r4, #8
   30a58:	d5d3      	bpl.n	30a02 <__aeabi_dadd+0x17a>
   30a5a:	4b6b      	ldr	r3, [pc, #428]	; (30c08 <__aeabi_dadd+0x380>)
   30a5c:	3601      	adds	r6, #1
   30a5e:	429e      	cmp	r6, r3
   30a60:	d100      	bne.n	30a64 <__aeabi_dadd+0x1dc>
   30a62:	e13a      	b.n	30cda <__aeabi_dadd+0x452>
   30a64:	2001      	movs	r0, #1
   30a66:	4b69      	ldr	r3, [pc, #420]	; (30c0c <__aeabi_dadd+0x384>)
   30a68:	401c      	ands	r4, r3
   30a6a:	087b      	lsrs	r3, r7, #1
   30a6c:	4007      	ands	r7, r0
   30a6e:	431f      	orrs	r7, r3
   30a70:	07e0      	lsls	r0, r4, #31
   30a72:	4307      	orrs	r7, r0
   30a74:	0864      	lsrs	r4, r4, #1
   30a76:	e78b      	b.n	30990 <__aeabi_dadd+0x108>
   30a78:	0023      	movs	r3, r4
   30a7a:	433b      	orrs	r3, r7
   30a7c:	d100      	bne.n	30a80 <__aeabi_dadd+0x1f8>
   30a7e:	e1cb      	b.n	30e18 <__aeabi_dadd+0x590>
   30a80:	2280      	movs	r2, #128	; 0x80
   30a82:	0312      	lsls	r2, r2, #12
   30a84:	4314      	orrs	r4, r2
   30a86:	0324      	lsls	r4, r4, #12
   30a88:	0b24      	lsrs	r4, r4, #12
   30a8a:	e79e      	b.n	309ca <__aeabi_dadd+0x142>
   30a8c:	002e      	movs	r6, r5
   30a8e:	e77f      	b.n	30990 <__aeabi_dadd+0x108>
   30a90:	0008      	movs	r0, r1
   30a92:	4310      	orrs	r0, r2
   30a94:	d100      	bne.n	30a98 <__aeabi_dadd+0x210>
   30a96:	e0b4      	b.n	30c02 <__aeabi_dadd+0x37a>
   30a98:	1e58      	subs	r0, r3, #1
   30a9a:	2800      	cmp	r0, #0
   30a9c:	d000      	beq.n	30aa0 <__aeabi_dadd+0x218>
   30a9e:	e0de      	b.n	30c5e <__aeabi_dadd+0x3d6>
   30aa0:	18ba      	adds	r2, r7, r2
   30aa2:	42ba      	cmp	r2, r7
   30aa4:	419b      	sbcs	r3, r3
   30aa6:	1864      	adds	r4, r4, r1
   30aa8:	425b      	negs	r3, r3
   30aaa:	18e4      	adds	r4, r4, r3
   30aac:	0017      	movs	r7, r2
   30aae:	2601      	movs	r6, #1
   30ab0:	0223      	lsls	r3, r4, #8
   30ab2:	d5a6      	bpl.n	30a02 <__aeabi_dadd+0x17a>
   30ab4:	2602      	movs	r6, #2
   30ab6:	e7d5      	b.n	30a64 <__aeabi_dadd+0x1dc>
   30ab8:	2d00      	cmp	r5, #0
   30aba:	d16e      	bne.n	30b9a <__aeabi_dadd+0x312>
   30abc:	1c70      	adds	r0, r6, #1
   30abe:	0540      	lsls	r0, r0, #21
   30ac0:	0d40      	lsrs	r0, r0, #21
   30ac2:	2801      	cmp	r0, #1
   30ac4:	dc00      	bgt.n	30ac8 <__aeabi_dadd+0x240>
   30ac6:	e0f9      	b.n	30cbc <__aeabi_dadd+0x434>
   30ac8:	1ab8      	subs	r0, r7, r2
   30aca:	4684      	mov	ip, r0
   30acc:	4287      	cmp	r7, r0
   30ace:	4180      	sbcs	r0, r0
   30ad0:	1ae5      	subs	r5, r4, r3
   30ad2:	4240      	negs	r0, r0
   30ad4:	1a2d      	subs	r5, r5, r0
   30ad6:	0228      	lsls	r0, r5, #8
   30ad8:	d400      	bmi.n	30adc <__aeabi_dadd+0x254>
   30ada:	e089      	b.n	30bf0 <__aeabi_dadd+0x368>
   30adc:	1bd7      	subs	r7, r2, r7
   30ade:	42ba      	cmp	r2, r7
   30ae0:	4192      	sbcs	r2, r2
   30ae2:	1b1c      	subs	r4, r3, r4
   30ae4:	4252      	negs	r2, r2
   30ae6:	1aa5      	subs	r5, r4, r2
   30ae8:	46d8      	mov	r8, fp
   30aea:	e729      	b.n	30940 <__aeabi_dadd+0xb8>
   30aec:	4645      	mov	r5, r8
   30aee:	2400      	movs	r4, #0
   30af0:	2700      	movs	r7, #0
   30af2:	e76a      	b.n	309ca <__aeabi_dadd+0x142>
   30af4:	4c45      	ldr	r4, [pc, #276]	; (30c0c <__aeabi_dadd+0x384>)
   30af6:	1af6      	subs	r6, r6, r3
   30af8:	402c      	ands	r4, r5
   30afa:	e749      	b.n	30990 <__aeabi_dadd+0x108>
   30afc:	003d      	movs	r5, r7
   30afe:	3828      	subs	r0, #40	; 0x28
   30b00:	4085      	lsls	r5, r0
   30b02:	2700      	movs	r7, #0
   30b04:	e72e      	b.n	30964 <__aeabi_dadd+0xdc>
   30b06:	0038      	movs	r0, r7
   30b08:	f001 fb04 	bl	32114 <__clzsi2>
   30b0c:	3020      	adds	r0, #32
   30b0e:	e71d      	b.n	3094c <__aeabi_dadd+0xc4>
   30b10:	430a      	orrs	r2, r1
   30b12:	1e51      	subs	r1, r2, #1
   30b14:	418a      	sbcs	r2, r1
   30b16:	2100      	movs	r1, #0
   30b18:	e707      	b.n	3092a <__aeabi_dadd+0xa2>
   30b1a:	2b00      	cmp	r3, #0
   30b1c:	d000      	beq.n	30b20 <__aeabi_dadd+0x298>
   30b1e:	e0f3      	b.n	30d08 <__aeabi_dadd+0x480>
   30b20:	1c70      	adds	r0, r6, #1
   30b22:	0543      	lsls	r3, r0, #21
   30b24:	0d5b      	lsrs	r3, r3, #21
   30b26:	2b01      	cmp	r3, #1
   30b28:	dc00      	bgt.n	30b2c <__aeabi_dadd+0x2a4>
   30b2a:	e0ad      	b.n	30c88 <__aeabi_dadd+0x400>
   30b2c:	4b36      	ldr	r3, [pc, #216]	; (30c08 <__aeabi_dadd+0x380>)
   30b2e:	4298      	cmp	r0, r3
   30b30:	d100      	bne.n	30b34 <__aeabi_dadd+0x2ac>
   30b32:	e0d1      	b.n	30cd8 <__aeabi_dadd+0x450>
   30b34:	18ba      	adds	r2, r7, r2
   30b36:	42ba      	cmp	r2, r7
   30b38:	41bf      	sbcs	r7, r7
   30b3a:	1864      	adds	r4, r4, r1
   30b3c:	427f      	negs	r7, r7
   30b3e:	19e4      	adds	r4, r4, r7
   30b40:	07e7      	lsls	r7, r4, #31
   30b42:	0852      	lsrs	r2, r2, #1
   30b44:	4317      	orrs	r7, r2
   30b46:	0864      	lsrs	r4, r4, #1
   30b48:	0006      	movs	r6, r0
   30b4a:	e721      	b.n	30990 <__aeabi_dadd+0x108>
   30b4c:	482e      	ldr	r0, [pc, #184]	; (30c08 <__aeabi_dadd+0x380>)
   30b4e:	4285      	cmp	r5, r0
   30b50:	d100      	bne.n	30b54 <__aeabi_dadd+0x2cc>
   30b52:	e093      	b.n	30c7c <__aeabi_dadd+0x3f4>
   30b54:	001d      	movs	r5, r3
   30b56:	e6d0      	b.n	308fa <__aeabi_dadd+0x72>
   30b58:	0029      	movs	r1, r5
   30b5a:	3e1f      	subs	r6, #31
   30b5c:	40f1      	lsrs	r1, r6
   30b5e:	2b20      	cmp	r3, #32
   30b60:	d100      	bne.n	30b64 <__aeabi_dadd+0x2dc>
   30b62:	e08d      	b.n	30c80 <__aeabi_dadd+0x3f8>
   30b64:	2240      	movs	r2, #64	; 0x40
   30b66:	1ad3      	subs	r3, r2, r3
   30b68:	409d      	lsls	r5, r3
   30b6a:	432f      	orrs	r7, r5
   30b6c:	1e7d      	subs	r5, r7, #1
   30b6e:	41af      	sbcs	r7, r5
   30b70:	2400      	movs	r4, #0
   30b72:	430f      	orrs	r7, r1
   30b74:	2600      	movs	r6, #0
   30b76:	e744      	b.n	30a02 <__aeabi_dadd+0x17a>
   30b78:	002b      	movs	r3, r5
   30b7a:	0008      	movs	r0, r1
   30b7c:	3b20      	subs	r3, #32
   30b7e:	40d8      	lsrs	r0, r3
   30b80:	0003      	movs	r3, r0
   30b82:	2d20      	cmp	r5, #32
   30b84:	d100      	bne.n	30b88 <__aeabi_dadd+0x300>
   30b86:	e07d      	b.n	30c84 <__aeabi_dadd+0x3fc>
   30b88:	2040      	movs	r0, #64	; 0x40
   30b8a:	1b45      	subs	r5, r0, r5
   30b8c:	40a9      	lsls	r1, r5
   30b8e:	430a      	orrs	r2, r1
   30b90:	1e51      	subs	r1, r2, #1
   30b92:	418a      	sbcs	r2, r1
   30b94:	2100      	movs	r1, #0
   30b96:	431a      	orrs	r2, r3
   30b98:	e6c7      	b.n	3092a <__aeabi_dadd+0xa2>
   30b9a:	2e00      	cmp	r6, #0
   30b9c:	d050      	beq.n	30c40 <__aeabi_dadd+0x3b8>
   30b9e:	4e1a      	ldr	r6, [pc, #104]	; (30c08 <__aeabi_dadd+0x380>)
   30ba0:	42b0      	cmp	r0, r6
   30ba2:	d057      	beq.n	30c54 <__aeabi_dadd+0x3cc>
   30ba4:	2680      	movs	r6, #128	; 0x80
   30ba6:	426b      	negs	r3, r5
   30ba8:	4699      	mov	r9, r3
   30baa:	0436      	lsls	r6, r6, #16
   30bac:	4334      	orrs	r4, r6
   30bae:	464b      	mov	r3, r9
   30bb0:	2b38      	cmp	r3, #56	; 0x38
   30bb2:	dd00      	ble.n	30bb6 <__aeabi_dadd+0x32e>
   30bb4:	e0d6      	b.n	30d64 <__aeabi_dadd+0x4dc>
   30bb6:	2b1f      	cmp	r3, #31
   30bb8:	dd00      	ble.n	30bbc <__aeabi_dadd+0x334>
   30bba:	e135      	b.n	30e28 <__aeabi_dadd+0x5a0>
   30bbc:	2620      	movs	r6, #32
   30bbe:	1af5      	subs	r5, r6, r3
   30bc0:	0026      	movs	r6, r4
   30bc2:	40ae      	lsls	r6, r5
   30bc4:	46b2      	mov	sl, r6
   30bc6:	003e      	movs	r6, r7
   30bc8:	40de      	lsrs	r6, r3
   30bca:	46ac      	mov	ip, r5
   30bcc:	0035      	movs	r5, r6
   30bce:	4656      	mov	r6, sl
   30bd0:	432e      	orrs	r6, r5
   30bd2:	4665      	mov	r5, ip
   30bd4:	40af      	lsls	r7, r5
   30bd6:	1e7d      	subs	r5, r7, #1
   30bd8:	41af      	sbcs	r7, r5
   30bda:	40dc      	lsrs	r4, r3
   30bdc:	4337      	orrs	r7, r6
   30bde:	1bd7      	subs	r7, r2, r7
   30be0:	42ba      	cmp	r2, r7
   30be2:	4192      	sbcs	r2, r2
   30be4:	1b0c      	subs	r4, r1, r4
   30be6:	4252      	negs	r2, r2
   30be8:	1aa4      	subs	r4, r4, r2
   30bea:	0006      	movs	r6, r0
   30bec:	46d8      	mov	r8, fp
   30bee:	e6a3      	b.n	30938 <__aeabi_dadd+0xb0>
   30bf0:	4664      	mov	r4, ip
   30bf2:	4667      	mov	r7, ip
   30bf4:	432c      	orrs	r4, r5
   30bf6:	d000      	beq.n	30bfa <__aeabi_dadd+0x372>
   30bf8:	e6a2      	b.n	30940 <__aeabi_dadd+0xb8>
   30bfa:	2500      	movs	r5, #0
   30bfc:	2600      	movs	r6, #0
   30bfe:	2700      	movs	r7, #0
   30c00:	e706      	b.n	30a10 <__aeabi_dadd+0x188>
   30c02:	001e      	movs	r6, r3
   30c04:	e6c4      	b.n	30990 <__aeabi_dadd+0x108>
   30c06:	46c0      	nop			; (mov r8, r8)
   30c08:	000007ff 	.word	0x000007ff
   30c0c:	ff7fffff 	.word	0xff7fffff
   30c10:	800fffff 	.word	0x800fffff
   30c14:	2b1f      	cmp	r3, #31
   30c16:	dc63      	bgt.n	30ce0 <__aeabi_dadd+0x458>
   30c18:	2020      	movs	r0, #32
   30c1a:	1ac3      	subs	r3, r0, r3
   30c1c:	0008      	movs	r0, r1
   30c1e:	4098      	lsls	r0, r3
   30c20:	469c      	mov	ip, r3
   30c22:	4683      	mov	fp, r0
   30c24:	4653      	mov	r3, sl
   30c26:	0010      	movs	r0, r2
   30c28:	40d8      	lsrs	r0, r3
   30c2a:	0003      	movs	r3, r0
   30c2c:	4658      	mov	r0, fp
   30c2e:	4318      	orrs	r0, r3
   30c30:	4663      	mov	r3, ip
   30c32:	409a      	lsls	r2, r3
   30c34:	1e53      	subs	r3, r2, #1
   30c36:	419a      	sbcs	r2, r3
   30c38:	4653      	mov	r3, sl
   30c3a:	4302      	orrs	r2, r0
   30c3c:	40d9      	lsrs	r1, r3
   30c3e:	e703      	b.n	30a48 <__aeabi_dadd+0x1c0>
   30c40:	0026      	movs	r6, r4
   30c42:	433e      	orrs	r6, r7
   30c44:	d006      	beq.n	30c54 <__aeabi_dadd+0x3cc>
   30c46:	43eb      	mvns	r3, r5
   30c48:	4699      	mov	r9, r3
   30c4a:	2b00      	cmp	r3, #0
   30c4c:	d0c7      	beq.n	30bde <__aeabi_dadd+0x356>
   30c4e:	4e94      	ldr	r6, [pc, #592]	; (30ea0 <__aeabi_dadd+0x618>)
   30c50:	42b0      	cmp	r0, r6
   30c52:	d1ac      	bne.n	30bae <__aeabi_dadd+0x326>
   30c54:	000c      	movs	r4, r1
   30c56:	0017      	movs	r7, r2
   30c58:	0006      	movs	r6, r0
   30c5a:	46d8      	mov	r8, fp
   30c5c:	e698      	b.n	30990 <__aeabi_dadd+0x108>
   30c5e:	4b90      	ldr	r3, [pc, #576]	; (30ea0 <__aeabi_dadd+0x618>)
   30c60:	459a      	cmp	sl, r3
   30c62:	d00b      	beq.n	30c7c <__aeabi_dadd+0x3f4>
   30c64:	4682      	mov	sl, r0
   30c66:	e6e7      	b.n	30a38 <__aeabi_dadd+0x1b0>
   30c68:	2800      	cmp	r0, #0
   30c6a:	d000      	beq.n	30c6e <__aeabi_dadd+0x3e6>
   30c6c:	e09e      	b.n	30dac <__aeabi_dadd+0x524>
   30c6e:	0018      	movs	r0, r3
   30c70:	4310      	orrs	r0, r2
   30c72:	d100      	bne.n	30c76 <__aeabi_dadd+0x3ee>
   30c74:	e0e9      	b.n	30e4a <__aeabi_dadd+0x5c2>
   30c76:	001c      	movs	r4, r3
   30c78:	0017      	movs	r7, r2
   30c7a:	46d8      	mov	r8, fp
   30c7c:	4e88      	ldr	r6, [pc, #544]	; (30ea0 <__aeabi_dadd+0x618>)
   30c7e:	e687      	b.n	30990 <__aeabi_dadd+0x108>
   30c80:	2500      	movs	r5, #0
   30c82:	e772      	b.n	30b6a <__aeabi_dadd+0x2e2>
   30c84:	2100      	movs	r1, #0
   30c86:	e782      	b.n	30b8e <__aeabi_dadd+0x306>
   30c88:	0023      	movs	r3, r4
   30c8a:	433b      	orrs	r3, r7
   30c8c:	2e00      	cmp	r6, #0
   30c8e:	d000      	beq.n	30c92 <__aeabi_dadd+0x40a>
   30c90:	e0ab      	b.n	30dea <__aeabi_dadd+0x562>
   30c92:	2b00      	cmp	r3, #0
   30c94:	d100      	bne.n	30c98 <__aeabi_dadd+0x410>
   30c96:	e0e7      	b.n	30e68 <__aeabi_dadd+0x5e0>
   30c98:	000b      	movs	r3, r1
   30c9a:	4313      	orrs	r3, r2
   30c9c:	d100      	bne.n	30ca0 <__aeabi_dadd+0x418>
   30c9e:	e677      	b.n	30990 <__aeabi_dadd+0x108>
   30ca0:	18ba      	adds	r2, r7, r2
   30ca2:	42ba      	cmp	r2, r7
   30ca4:	41bf      	sbcs	r7, r7
   30ca6:	1864      	adds	r4, r4, r1
   30ca8:	427f      	negs	r7, r7
   30caa:	19e4      	adds	r4, r4, r7
   30cac:	0223      	lsls	r3, r4, #8
   30cae:	d400      	bmi.n	30cb2 <__aeabi_dadd+0x42a>
   30cb0:	e0f2      	b.n	30e98 <__aeabi_dadd+0x610>
   30cb2:	4b7c      	ldr	r3, [pc, #496]	; (30ea4 <__aeabi_dadd+0x61c>)
   30cb4:	0017      	movs	r7, r2
   30cb6:	401c      	ands	r4, r3
   30cb8:	0006      	movs	r6, r0
   30cba:	e669      	b.n	30990 <__aeabi_dadd+0x108>
   30cbc:	0020      	movs	r0, r4
   30cbe:	4338      	orrs	r0, r7
   30cc0:	2e00      	cmp	r6, #0
   30cc2:	d1d1      	bne.n	30c68 <__aeabi_dadd+0x3e0>
   30cc4:	2800      	cmp	r0, #0
   30cc6:	d15b      	bne.n	30d80 <__aeabi_dadd+0x4f8>
   30cc8:	001c      	movs	r4, r3
   30cca:	4314      	orrs	r4, r2
   30ccc:	d100      	bne.n	30cd0 <__aeabi_dadd+0x448>
   30cce:	e0a8      	b.n	30e22 <__aeabi_dadd+0x59a>
   30cd0:	001c      	movs	r4, r3
   30cd2:	0017      	movs	r7, r2
   30cd4:	46d8      	mov	r8, fp
   30cd6:	e65b      	b.n	30990 <__aeabi_dadd+0x108>
   30cd8:	0006      	movs	r6, r0
   30cda:	2400      	movs	r4, #0
   30cdc:	2700      	movs	r7, #0
   30cde:	e697      	b.n	30a10 <__aeabi_dadd+0x188>
   30ce0:	4650      	mov	r0, sl
   30ce2:	000b      	movs	r3, r1
   30ce4:	3820      	subs	r0, #32
   30ce6:	40c3      	lsrs	r3, r0
   30ce8:	4699      	mov	r9, r3
   30cea:	4653      	mov	r3, sl
   30cec:	2b20      	cmp	r3, #32
   30cee:	d100      	bne.n	30cf2 <__aeabi_dadd+0x46a>
   30cf0:	e095      	b.n	30e1e <__aeabi_dadd+0x596>
   30cf2:	2340      	movs	r3, #64	; 0x40
   30cf4:	4650      	mov	r0, sl
   30cf6:	1a1b      	subs	r3, r3, r0
   30cf8:	4099      	lsls	r1, r3
   30cfa:	430a      	orrs	r2, r1
   30cfc:	1e51      	subs	r1, r2, #1
   30cfe:	418a      	sbcs	r2, r1
   30d00:	464b      	mov	r3, r9
   30d02:	2100      	movs	r1, #0
   30d04:	431a      	orrs	r2, r3
   30d06:	e69f      	b.n	30a48 <__aeabi_dadd+0x1c0>
   30d08:	2e00      	cmp	r6, #0
   30d0a:	d130      	bne.n	30d6e <__aeabi_dadd+0x4e6>
   30d0c:	0026      	movs	r6, r4
   30d0e:	433e      	orrs	r6, r7
   30d10:	d067      	beq.n	30de2 <__aeabi_dadd+0x55a>
   30d12:	43db      	mvns	r3, r3
   30d14:	469a      	mov	sl, r3
   30d16:	2b00      	cmp	r3, #0
   30d18:	d01c      	beq.n	30d54 <__aeabi_dadd+0x4cc>
   30d1a:	4e61      	ldr	r6, [pc, #388]	; (30ea0 <__aeabi_dadd+0x618>)
   30d1c:	42b0      	cmp	r0, r6
   30d1e:	d060      	beq.n	30de2 <__aeabi_dadd+0x55a>
   30d20:	4653      	mov	r3, sl
   30d22:	2b38      	cmp	r3, #56	; 0x38
   30d24:	dd00      	ble.n	30d28 <__aeabi_dadd+0x4a0>
   30d26:	e096      	b.n	30e56 <__aeabi_dadd+0x5ce>
   30d28:	2b1f      	cmp	r3, #31
   30d2a:	dd00      	ble.n	30d2e <__aeabi_dadd+0x4a6>
   30d2c:	e09f      	b.n	30e6e <__aeabi_dadd+0x5e6>
   30d2e:	2620      	movs	r6, #32
   30d30:	1af3      	subs	r3, r6, r3
   30d32:	0026      	movs	r6, r4
   30d34:	409e      	lsls	r6, r3
   30d36:	469c      	mov	ip, r3
   30d38:	46b3      	mov	fp, r6
   30d3a:	4653      	mov	r3, sl
   30d3c:	003e      	movs	r6, r7
   30d3e:	40de      	lsrs	r6, r3
   30d40:	0033      	movs	r3, r6
   30d42:	465e      	mov	r6, fp
   30d44:	431e      	orrs	r6, r3
   30d46:	4663      	mov	r3, ip
   30d48:	409f      	lsls	r7, r3
   30d4a:	1e7b      	subs	r3, r7, #1
   30d4c:	419f      	sbcs	r7, r3
   30d4e:	4653      	mov	r3, sl
   30d50:	40dc      	lsrs	r4, r3
   30d52:	4337      	orrs	r7, r6
   30d54:	18bf      	adds	r7, r7, r2
   30d56:	4297      	cmp	r7, r2
   30d58:	4192      	sbcs	r2, r2
   30d5a:	1864      	adds	r4, r4, r1
   30d5c:	4252      	negs	r2, r2
   30d5e:	18a4      	adds	r4, r4, r2
   30d60:	0006      	movs	r6, r0
   30d62:	e678      	b.n	30a56 <__aeabi_dadd+0x1ce>
   30d64:	4327      	orrs	r7, r4
   30d66:	1e7c      	subs	r4, r7, #1
   30d68:	41a7      	sbcs	r7, r4
   30d6a:	2400      	movs	r4, #0
   30d6c:	e737      	b.n	30bde <__aeabi_dadd+0x356>
   30d6e:	4e4c      	ldr	r6, [pc, #304]	; (30ea0 <__aeabi_dadd+0x618>)
   30d70:	42b0      	cmp	r0, r6
   30d72:	d036      	beq.n	30de2 <__aeabi_dadd+0x55a>
   30d74:	2680      	movs	r6, #128	; 0x80
   30d76:	425b      	negs	r3, r3
   30d78:	0436      	lsls	r6, r6, #16
   30d7a:	469a      	mov	sl, r3
   30d7c:	4334      	orrs	r4, r6
   30d7e:	e7cf      	b.n	30d20 <__aeabi_dadd+0x498>
   30d80:	0018      	movs	r0, r3
   30d82:	4310      	orrs	r0, r2
   30d84:	d100      	bne.n	30d88 <__aeabi_dadd+0x500>
   30d86:	e603      	b.n	30990 <__aeabi_dadd+0x108>
   30d88:	1ab8      	subs	r0, r7, r2
   30d8a:	4684      	mov	ip, r0
   30d8c:	4567      	cmp	r7, ip
   30d8e:	41ad      	sbcs	r5, r5
   30d90:	1ae0      	subs	r0, r4, r3
   30d92:	426d      	negs	r5, r5
   30d94:	1b40      	subs	r0, r0, r5
   30d96:	0205      	lsls	r5, r0, #8
   30d98:	d400      	bmi.n	30d9c <__aeabi_dadd+0x514>
   30d9a:	e62c      	b.n	309f6 <__aeabi_dadd+0x16e>
   30d9c:	1bd7      	subs	r7, r2, r7
   30d9e:	42ba      	cmp	r2, r7
   30da0:	4192      	sbcs	r2, r2
   30da2:	1b1c      	subs	r4, r3, r4
   30da4:	4252      	negs	r2, r2
   30da6:	1aa4      	subs	r4, r4, r2
   30da8:	46d8      	mov	r8, fp
   30daa:	e5f1      	b.n	30990 <__aeabi_dadd+0x108>
   30dac:	0018      	movs	r0, r3
   30dae:	4310      	orrs	r0, r2
   30db0:	d100      	bne.n	30db4 <__aeabi_dadd+0x52c>
   30db2:	e763      	b.n	30c7c <__aeabi_dadd+0x3f4>
   30db4:	08f8      	lsrs	r0, r7, #3
   30db6:	0767      	lsls	r7, r4, #29
   30db8:	4307      	orrs	r7, r0
   30dba:	2080      	movs	r0, #128	; 0x80
   30dbc:	08e4      	lsrs	r4, r4, #3
   30dbe:	0300      	lsls	r0, r0, #12
   30dc0:	4204      	tst	r4, r0
   30dc2:	d008      	beq.n	30dd6 <__aeabi_dadd+0x54e>
   30dc4:	08dd      	lsrs	r5, r3, #3
   30dc6:	4205      	tst	r5, r0
   30dc8:	d105      	bne.n	30dd6 <__aeabi_dadd+0x54e>
   30dca:	08d2      	lsrs	r2, r2, #3
   30dcc:	0759      	lsls	r1, r3, #29
   30dce:	4311      	orrs	r1, r2
   30dd0:	000f      	movs	r7, r1
   30dd2:	002c      	movs	r4, r5
   30dd4:	46d8      	mov	r8, fp
   30dd6:	0f7b      	lsrs	r3, r7, #29
   30dd8:	00e4      	lsls	r4, r4, #3
   30dda:	431c      	orrs	r4, r3
   30ddc:	00ff      	lsls	r7, r7, #3
   30dde:	4e30      	ldr	r6, [pc, #192]	; (30ea0 <__aeabi_dadd+0x618>)
   30de0:	e5d6      	b.n	30990 <__aeabi_dadd+0x108>
   30de2:	000c      	movs	r4, r1
   30de4:	0017      	movs	r7, r2
   30de6:	0006      	movs	r6, r0
   30de8:	e5d2      	b.n	30990 <__aeabi_dadd+0x108>
   30dea:	2b00      	cmp	r3, #0
   30dec:	d038      	beq.n	30e60 <__aeabi_dadd+0x5d8>
   30dee:	000b      	movs	r3, r1
   30df0:	4313      	orrs	r3, r2
   30df2:	d100      	bne.n	30df6 <__aeabi_dadd+0x56e>
   30df4:	e742      	b.n	30c7c <__aeabi_dadd+0x3f4>
   30df6:	08f8      	lsrs	r0, r7, #3
   30df8:	0767      	lsls	r7, r4, #29
   30dfa:	4307      	orrs	r7, r0
   30dfc:	2080      	movs	r0, #128	; 0x80
   30dfe:	08e4      	lsrs	r4, r4, #3
   30e00:	0300      	lsls	r0, r0, #12
   30e02:	4204      	tst	r4, r0
   30e04:	d0e7      	beq.n	30dd6 <__aeabi_dadd+0x54e>
   30e06:	08cb      	lsrs	r3, r1, #3
   30e08:	4203      	tst	r3, r0
   30e0a:	d1e4      	bne.n	30dd6 <__aeabi_dadd+0x54e>
   30e0c:	08d2      	lsrs	r2, r2, #3
   30e0e:	0749      	lsls	r1, r1, #29
   30e10:	4311      	orrs	r1, r2
   30e12:	000f      	movs	r7, r1
   30e14:	001c      	movs	r4, r3
   30e16:	e7de      	b.n	30dd6 <__aeabi_dadd+0x54e>
   30e18:	2700      	movs	r7, #0
   30e1a:	2400      	movs	r4, #0
   30e1c:	e5d5      	b.n	309ca <__aeabi_dadd+0x142>
   30e1e:	2100      	movs	r1, #0
   30e20:	e76b      	b.n	30cfa <__aeabi_dadd+0x472>
   30e22:	2500      	movs	r5, #0
   30e24:	2700      	movs	r7, #0
   30e26:	e5f3      	b.n	30a10 <__aeabi_dadd+0x188>
   30e28:	464e      	mov	r6, r9
   30e2a:	0025      	movs	r5, r4
   30e2c:	3e20      	subs	r6, #32
   30e2e:	40f5      	lsrs	r5, r6
   30e30:	464b      	mov	r3, r9
   30e32:	002e      	movs	r6, r5
   30e34:	2b20      	cmp	r3, #32
   30e36:	d02d      	beq.n	30e94 <__aeabi_dadd+0x60c>
   30e38:	2540      	movs	r5, #64	; 0x40
   30e3a:	1aed      	subs	r5, r5, r3
   30e3c:	40ac      	lsls	r4, r5
   30e3e:	4327      	orrs	r7, r4
   30e40:	1e7c      	subs	r4, r7, #1
   30e42:	41a7      	sbcs	r7, r4
   30e44:	2400      	movs	r4, #0
   30e46:	4337      	orrs	r7, r6
   30e48:	e6c9      	b.n	30bde <__aeabi_dadd+0x356>
   30e4a:	2480      	movs	r4, #128	; 0x80
   30e4c:	2500      	movs	r5, #0
   30e4e:	0324      	lsls	r4, r4, #12
   30e50:	4e13      	ldr	r6, [pc, #76]	; (30ea0 <__aeabi_dadd+0x618>)
   30e52:	2700      	movs	r7, #0
   30e54:	e5dc      	b.n	30a10 <__aeabi_dadd+0x188>
   30e56:	4327      	orrs	r7, r4
   30e58:	1e7c      	subs	r4, r7, #1
   30e5a:	41a7      	sbcs	r7, r4
   30e5c:	2400      	movs	r4, #0
   30e5e:	e779      	b.n	30d54 <__aeabi_dadd+0x4cc>
   30e60:	000c      	movs	r4, r1
   30e62:	0017      	movs	r7, r2
   30e64:	4e0e      	ldr	r6, [pc, #56]	; (30ea0 <__aeabi_dadd+0x618>)
   30e66:	e593      	b.n	30990 <__aeabi_dadd+0x108>
   30e68:	000c      	movs	r4, r1
   30e6a:	0017      	movs	r7, r2
   30e6c:	e590      	b.n	30990 <__aeabi_dadd+0x108>
   30e6e:	4656      	mov	r6, sl
   30e70:	0023      	movs	r3, r4
   30e72:	3e20      	subs	r6, #32
   30e74:	40f3      	lsrs	r3, r6
   30e76:	4699      	mov	r9, r3
   30e78:	4653      	mov	r3, sl
   30e7a:	2b20      	cmp	r3, #32
   30e7c:	d00e      	beq.n	30e9c <__aeabi_dadd+0x614>
   30e7e:	2340      	movs	r3, #64	; 0x40
   30e80:	4656      	mov	r6, sl
   30e82:	1b9b      	subs	r3, r3, r6
   30e84:	409c      	lsls	r4, r3
   30e86:	4327      	orrs	r7, r4
   30e88:	1e7c      	subs	r4, r7, #1
   30e8a:	41a7      	sbcs	r7, r4
   30e8c:	464b      	mov	r3, r9
   30e8e:	2400      	movs	r4, #0
   30e90:	431f      	orrs	r7, r3
   30e92:	e75f      	b.n	30d54 <__aeabi_dadd+0x4cc>
   30e94:	2400      	movs	r4, #0
   30e96:	e7d2      	b.n	30e3e <__aeabi_dadd+0x5b6>
   30e98:	0017      	movs	r7, r2
   30e9a:	e5b2      	b.n	30a02 <__aeabi_dadd+0x17a>
   30e9c:	2400      	movs	r4, #0
   30e9e:	e7f2      	b.n	30e86 <__aeabi_dadd+0x5fe>
   30ea0:	000007ff 	.word	0x000007ff
   30ea4:	ff7fffff 	.word	0xff7fffff

00030ea8 <__aeabi_ddiv>:
   30ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   30eaa:	4657      	mov	r7, sl
   30eac:	4645      	mov	r5, r8
   30eae:	46de      	mov	lr, fp
   30eb0:	464e      	mov	r6, r9
   30eb2:	b5e0      	push	{r5, r6, r7, lr}
   30eb4:	004c      	lsls	r4, r1, #1
   30eb6:	030e      	lsls	r6, r1, #12
   30eb8:	b087      	sub	sp, #28
   30eba:	4683      	mov	fp, r0
   30ebc:	4692      	mov	sl, r2
   30ebe:	001d      	movs	r5, r3
   30ec0:	4680      	mov	r8, r0
   30ec2:	0b36      	lsrs	r6, r6, #12
   30ec4:	0d64      	lsrs	r4, r4, #21
   30ec6:	0fcf      	lsrs	r7, r1, #31
   30ec8:	2c00      	cmp	r4, #0
   30eca:	d04f      	beq.n	30f6c <__aeabi_ddiv+0xc4>
   30ecc:	4b6f      	ldr	r3, [pc, #444]	; (3108c <__aeabi_ddiv+0x1e4>)
   30ece:	429c      	cmp	r4, r3
   30ed0:	d035      	beq.n	30f3e <__aeabi_ddiv+0x96>
   30ed2:	2380      	movs	r3, #128	; 0x80
   30ed4:	0f42      	lsrs	r2, r0, #29
   30ed6:	041b      	lsls	r3, r3, #16
   30ed8:	00f6      	lsls	r6, r6, #3
   30eda:	4313      	orrs	r3, r2
   30edc:	4333      	orrs	r3, r6
   30ede:	4699      	mov	r9, r3
   30ee0:	00c3      	lsls	r3, r0, #3
   30ee2:	4698      	mov	r8, r3
   30ee4:	4b6a      	ldr	r3, [pc, #424]	; (31090 <__aeabi_ddiv+0x1e8>)
   30ee6:	2600      	movs	r6, #0
   30ee8:	469c      	mov	ip, r3
   30eea:	2300      	movs	r3, #0
   30eec:	4464      	add	r4, ip
   30eee:	9303      	str	r3, [sp, #12]
   30ef0:	032b      	lsls	r3, r5, #12
   30ef2:	0b1b      	lsrs	r3, r3, #12
   30ef4:	469b      	mov	fp, r3
   30ef6:	006b      	lsls	r3, r5, #1
   30ef8:	0fed      	lsrs	r5, r5, #31
   30efa:	4650      	mov	r0, sl
   30efc:	0d5b      	lsrs	r3, r3, #21
   30efe:	9501      	str	r5, [sp, #4]
   30f00:	d05e      	beq.n	30fc0 <__aeabi_ddiv+0x118>
   30f02:	4a62      	ldr	r2, [pc, #392]	; (3108c <__aeabi_ddiv+0x1e4>)
   30f04:	4293      	cmp	r3, r2
   30f06:	d053      	beq.n	30fb0 <__aeabi_ddiv+0x108>
   30f08:	465a      	mov	r2, fp
   30f0a:	00d1      	lsls	r1, r2, #3
   30f0c:	2280      	movs	r2, #128	; 0x80
   30f0e:	0f40      	lsrs	r0, r0, #29
   30f10:	0412      	lsls	r2, r2, #16
   30f12:	4302      	orrs	r2, r0
   30f14:	430a      	orrs	r2, r1
   30f16:	4693      	mov	fp, r2
   30f18:	4652      	mov	r2, sl
   30f1a:	00d1      	lsls	r1, r2, #3
   30f1c:	4a5c      	ldr	r2, [pc, #368]	; (31090 <__aeabi_ddiv+0x1e8>)
   30f1e:	4694      	mov	ip, r2
   30f20:	2200      	movs	r2, #0
   30f22:	4463      	add	r3, ip
   30f24:	0038      	movs	r0, r7
   30f26:	4068      	eors	r0, r5
   30f28:	4684      	mov	ip, r0
   30f2a:	9002      	str	r0, [sp, #8]
   30f2c:	1ae4      	subs	r4, r4, r3
   30f2e:	4316      	orrs	r6, r2
   30f30:	2e0f      	cmp	r6, #15
   30f32:	d900      	bls.n	30f36 <__aeabi_ddiv+0x8e>
   30f34:	e0b4      	b.n	310a0 <__aeabi_ddiv+0x1f8>
   30f36:	4b57      	ldr	r3, [pc, #348]	; (31094 <__aeabi_ddiv+0x1ec>)
   30f38:	00b6      	lsls	r6, r6, #2
   30f3a:	599b      	ldr	r3, [r3, r6]
   30f3c:	469f      	mov	pc, r3
   30f3e:	0003      	movs	r3, r0
   30f40:	4333      	orrs	r3, r6
   30f42:	4699      	mov	r9, r3
   30f44:	d16c      	bne.n	31020 <__aeabi_ddiv+0x178>
   30f46:	2300      	movs	r3, #0
   30f48:	4698      	mov	r8, r3
   30f4a:	3302      	adds	r3, #2
   30f4c:	2608      	movs	r6, #8
   30f4e:	9303      	str	r3, [sp, #12]
   30f50:	e7ce      	b.n	30ef0 <__aeabi_ddiv+0x48>
   30f52:	46cb      	mov	fp, r9
   30f54:	4641      	mov	r1, r8
   30f56:	9a03      	ldr	r2, [sp, #12]
   30f58:	9701      	str	r7, [sp, #4]
   30f5a:	2a02      	cmp	r2, #2
   30f5c:	d165      	bne.n	3102a <__aeabi_ddiv+0x182>
   30f5e:	9b01      	ldr	r3, [sp, #4]
   30f60:	4c4a      	ldr	r4, [pc, #296]	; (3108c <__aeabi_ddiv+0x1e4>)
   30f62:	469c      	mov	ip, r3
   30f64:	2300      	movs	r3, #0
   30f66:	2200      	movs	r2, #0
   30f68:	4698      	mov	r8, r3
   30f6a:	e06b      	b.n	31044 <__aeabi_ddiv+0x19c>
   30f6c:	0003      	movs	r3, r0
   30f6e:	4333      	orrs	r3, r6
   30f70:	4699      	mov	r9, r3
   30f72:	d04e      	beq.n	31012 <__aeabi_ddiv+0x16a>
   30f74:	2e00      	cmp	r6, #0
   30f76:	d100      	bne.n	30f7a <__aeabi_ddiv+0xd2>
   30f78:	e1bc      	b.n	312f4 <__aeabi_ddiv+0x44c>
   30f7a:	0030      	movs	r0, r6
   30f7c:	f001 f8ca 	bl	32114 <__clzsi2>
   30f80:	0003      	movs	r3, r0
   30f82:	3b0b      	subs	r3, #11
   30f84:	2b1c      	cmp	r3, #28
   30f86:	dd00      	ble.n	30f8a <__aeabi_ddiv+0xe2>
   30f88:	e1ac      	b.n	312e4 <__aeabi_ddiv+0x43c>
   30f8a:	221d      	movs	r2, #29
   30f8c:	1ad3      	subs	r3, r2, r3
   30f8e:	465a      	mov	r2, fp
   30f90:	0001      	movs	r1, r0
   30f92:	40da      	lsrs	r2, r3
   30f94:	3908      	subs	r1, #8
   30f96:	408e      	lsls	r6, r1
   30f98:	0013      	movs	r3, r2
   30f9a:	4333      	orrs	r3, r6
   30f9c:	4699      	mov	r9, r3
   30f9e:	465b      	mov	r3, fp
   30fa0:	408b      	lsls	r3, r1
   30fa2:	4698      	mov	r8, r3
   30fa4:	2300      	movs	r3, #0
   30fa6:	4c3c      	ldr	r4, [pc, #240]	; (31098 <__aeabi_ddiv+0x1f0>)
   30fa8:	2600      	movs	r6, #0
   30faa:	1a24      	subs	r4, r4, r0
   30fac:	9303      	str	r3, [sp, #12]
   30fae:	e79f      	b.n	30ef0 <__aeabi_ddiv+0x48>
   30fb0:	4651      	mov	r1, sl
   30fb2:	465a      	mov	r2, fp
   30fb4:	4311      	orrs	r1, r2
   30fb6:	d129      	bne.n	3100c <__aeabi_ddiv+0x164>
   30fb8:	2200      	movs	r2, #0
   30fba:	4693      	mov	fp, r2
   30fbc:	3202      	adds	r2, #2
   30fbe:	e7b1      	b.n	30f24 <__aeabi_ddiv+0x7c>
   30fc0:	4659      	mov	r1, fp
   30fc2:	4301      	orrs	r1, r0
   30fc4:	d01e      	beq.n	31004 <__aeabi_ddiv+0x15c>
   30fc6:	465b      	mov	r3, fp
   30fc8:	2b00      	cmp	r3, #0
   30fca:	d100      	bne.n	30fce <__aeabi_ddiv+0x126>
   30fcc:	e19e      	b.n	3130c <__aeabi_ddiv+0x464>
   30fce:	4658      	mov	r0, fp
   30fd0:	f001 f8a0 	bl	32114 <__clzsi2>
   30fd4:	0003      	movs	r3, r0
   30fd6:	3b0b      	subs	r3, #11
   30fd8:	2b1c      	cmp	r3, #28
   30fda:	dd00      	ble.n	30fde <__aeabi_ddiv+0x136>
   30fdc:	e18f      	b.n	312fe <__aeabi_ddiv+0x456>
   30fde:	0002      	movs	r2, r0
   30fe0:	4659      	mov	r1, fp
   30fe2:	3a08      	subs	r2, #8
   30fe4:	4091      	lsls	r1, r2
   30fe6:	468b      	mov	fp, r1
   30fe8:	211d      	movs	r1, #29
   30fea:	1acb      	subs	r3, r1, r3
   30fec:	4651      	mov	r1, sl
   30fee:	40d9      	lsrs	r1, r3
   30ff0:	000b      	movs	r3, r1
   30ff2:	4659      	mov	r1, fp
   30ff4:	430b      	orrs	r3, r1
   30ff6:	4651      	mov	r1, sl
   30ff8:	469b      	mov	fp, r3
   30ffa:	4091      	lsls	r1, r2
   30ffc:	4b26      	ldr	r3, [pc, #152]	; (31098 <__aeabi_ddiv+0x1f0>)
   30ffe:	2200      	movs	r2, #0
   31000:	1a1b      	subs	r3, r3, r0
   31002:	e78f      	b.n	30f24 <__aeabi_ddiv+0x7c>
   31004:	2300      	movs	r3, #0
   31006:	2201      	movs	r2, #1
   31008:	469b      	mov	fp, r3
   3100a:	e78b      	b.n	30f24 <__aeabi_ddiv+0x7c>
   3100c:	4651      	mov	r1, sl
   3100e:	2203      	movs	r2, #3
   31010:	e788      	b.n	30f24 <__aeabi_ddiv+0x7c>
   31012:	2300      	movs	r3, #0
   31014:	4698      	mov	r8, r3
   31016:	3301      	adds	r3, #1
   31018:	2604      	movs	r6, #4
   3101a:	2400      	movs	r4, #0
   3101c:	9303      	str	r3, [sp, #12]
   3101e:	e767      	b.n	30ef0 <__aeabi_ddiv+0x48>
   31020:	2303      	movs	r3, #3
   31022:	46b1      	mov	r9, r6
   31024:	9303      	str	r3, [sp, #12]
   31026:	260c      	movs	r6, #12
   31028:	e762      	b.n	30ef0 <__aeabi_ddiv+0x48>
   3102a:	2a03      	cmp	r2, #3
   3102c:	d100      	bne.n	31030 <__aeabi_ddiv+0x188>
   3102e:	e25c      	b.n	314ea <__aeabi_ddiv+0x642>
   31030:	9b01      	ldr	r3, [sp, #4]
   31032:	2a01      	cmp	r2, #1
   31034:	d000      	beq.n	31038 <__aeabi_ddiv+0x190>
   31036:	e1e4      	b.n	31402 <__aeabi_ddiv+0x55a>
   31038:	4013      	ands	r3, r2
   3103a:	469c      	mov	ip, r3
   3103c:	2300      	movs	r3, #0
   3103e:	2400      	movs	r4, #0
   31040:	2200      	movs	r2, #0
   31042:	4698      	mov	r8, r3
   31044:	2100      	movs	r1, #0
   31046:	0312      	lsls	r2, r2, #12
   31048:	0b13      	lsrs	r3, r2, #12
   3104a:	0d0a      	lsrs	r2, r1, #20
   3104c:	0512      	lsls	r2, r2, #20
   3104e:	431a      	orrs	r2, r3
   31050:	0523      	lsls	r3, r4, #20
   31052:	4c12      	ldr	r4, [pc, #72]	; (3109c <__aeabi_ddiv+0x1f4>)
   31054:	4640      	mov	r0, r8
   31056:	4022      	ands	r2, r4
   31058:	4313      	orrs	r3, r2
   3105a:	4662      	mov	r2, ip
   3105c:	005b      	lsls	r3, r3, #1
   3105e:	07d2      	lsls	r2, r2, #31
   31060:	085b      	lsrs	r3, r3, #1
   31062:	4313      	orrs	r3, r2
   31064:	0019      	movs	r1, r3
   31066:	b007      	add	sp, #28
   31068:	bc3c      	pop	{r2, r3, r4, r5}
   3106a:	4690      	mov	r8, r2
   3106c:	4699      	mov	r9, r3
   3106e:	46a2      	mov	sl, r4
   31070:	46ab      	mov	fp, r5
   31072:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31074:	2300      	movs	r3, #0
   31076:	2280      	movs	r2, #128	; 0x80
   31078:	469c      	mov	ip, r3
   3107a:	0312      	lsls	r2, r2, #12
   3107c:	4698      	mov	r8, r3
   3107e:	4c03      	ldr	r4, [pc, #12]	; (3108c <__aeabi_ddiv+0x1e4>)
   31080:	e7e0      	b.n	31044 <__aeabi_ddiv+0x19c>
   31082:	2300      	movs	r3, #0
   31084:	4c01      	ldr	r4, [pc, #4]	; (3108c <__aeabi_ddiv+0x1e4>)
   31086:	2200      	movs	r2, #0
   31088:	4698      	mov	r8, r3
   3108a:	e7db      	b.n	31044 <__aeabi_ddiv+0x19c>
   3108c:	000007ff 	.word	0x000007ff
   31090:	fffffc01 	.word	0xfffffc01
   31094:	0003749c 	.word	0x0003749c
   31098:	fffffc0d 	.word	0xfffffc0d
   3109c:	800fffff 	.word	0x800fffff
   310a0:	45d9      	cmp	r9, fp
   310a2:	d900      	bls.n	310a6 <__aeabi_ddiv+0x1fe>
   310a4:	e139      	b.n	3131a <__aeabi_ddiv+0x472>
   310a6:	d100      	bne.n	310aa <__aeabi_ddiv+0x202>
   310a8:	e134      	b.n	31314 <__aeabi_ddiv+0x46c>
   310aa:	2300      	movs	r3, #0
   310ac:	4646      	mov	r6, r8
   310ae:	464d      	mov	r5, r9
   310b0:	469a      	mov	sl, r3
   310b2:	3c01      	subs	r4, #1
   310b4:	465b      	mov	r3, fp
   310b6:	0e0a      	lsrs	r2, r1, #24
   310b8:	021b      	lsls	r3, r3, #8
   310ba:	431a      	orrs	r2, r3
   310bc:	020b      	lsls	r3, r1, #8
   310be:	0c17      	lsrs	r7, r2, #16
   310c0:	9303      	str	r3, [sp, #12]
   310c2:	0413      	lsls	r3, r2, #16
   310c4:	0c1b      	lsrs	r3, r3, #16
   310c6:	0039      	movs	r1, r7
   310c8:	0028      	movs	r0, r5
   310ca:	4690      	mov	r8, r2
   310cc:	9301      	str	r3, [sp, #4]
   310ce:	f7ff fa3b 	bl	30548 <__udivsi3>
   310d2:	0002      	movs	r2, r0
   310d4:	9b01      	ldr	r3, [sp, #4]
   310d6:	4683      	mov	fp, r0
   310d8:	435a      	muls	r2, r3
   310da:	0028      	movs	r0, r5
   310dc:	0039      	movs	r1, r7
   310de:	4691      	mov	r9, r2
   310e0:	f7ff fab8 	bl	30654 <__aeabi_uidivmod>
   310e4:	0c35      	lsrs	r5, r6, #16
   310e6:	0409      	lsls	r1, r1, #16
   310e8:	430d      	orrs	r5, r1
   310ea:	45a9      	cmp	r9, r5
   310ec:	d90d      	bls.n	3110a <__aeabi_ddiv+0x262>
   310ee:	465b      	mov	r3, fp
   310f0:	4445      	add	r5, r8
   310f2:	3b01      	subs	r3, #1
   310f4:	45a8      	cmp	r8, r5
   310f6:	d900      	bls.n	310fa <__aeabi_ddiv+0x252>
   310f8:	e13a      	b.n	31370 <__aeabi_ddiv+0x4c8>
   310fa:	45a9      	cmp	r9, r5
   310fc:	d800      	bhi.n	31100 <__aeabi_ddiv+0x258>
   310fe:	e137      	b.n	31370 <__aeabi_ddiv+0x4c8>
   31100:	2302      	movs	r3, #2
   31102:	425b      	negs	r3, r3
   31104:	469c      	mov	ip, r3
   31106:	4445      	add	r5, r8
   31108:	44e3      	add	fp, ip
   3110a:	464b      	mov	r3, r9
   3110c:	1aeb      	subs	r3, r5, r3
   3110e:	0039      	movs	r1, r7
   31110:	0018      	movs	r0, r3
   31112:	9304      	str	r3, [sp, #16]
   31114:	f7ff fa18 	bl	30548 <__udivsi3>
   31118:	9b01      	ldr	r3, [sp, #4]
   3111a:	0005      	movs	r5, r0
   3111c:	4343      	muls	r3, r0
   3111e:	0039      	movs	r1, r7
   31120:	9804      	ldr	r0, [sp, #16]
   31122:	4699      	mov	r9, r3
   31124:	f7ff fa96 	bl	30654 <__aeabi_uidivmod>
   31128:	0433      	lsls	r3, r6, #16
   3112a:	0409      	lsls	r1, r1, #16
   3112c:	0c1b      	lsrs	r3, r3, #16
   3112e:	430b      	orrs	r3, r1
   31130:	4599      	cmp	r9, r3
   31132:	d909      	bls.n	31148 <__aeabi_ddiv+0x2a0>
   31134:	4443      	add	r3, r8
   31136:	1e6a      	subs	r2, r5, #1
   31138:	4598      	cmp	r8, r3
   3113a:	d900      	bls.n	3113e <__aeabi_ddiv+0x296>
   3113c:	e11a      	b.n	31374 <__aeabi_ddiv+0x4cc>
   3113e:	4599      	cmp	r9, r3
   31140:	d800      	bhi.n	31144 <__aeabi_ddiv+0x29c>
   31142:	e117      	b.n	31374 <__aeabi_ddiv+0x4cc>
   31144:	3d02      	subs	r5, #2
   31146:	4443      	add	r3, r8
   31148:	464a      	mov	r2, r9
   3114a:	1a9b      	subs	r3, r3, r2
   3114c:	465a      	mov	r2, fp
   3114e:	0412      	lsls	r2, r2, #16
   31150:	432a      	orrs	r2, r5
   31152:	9903      	ldr	r1, [sp, #12]
   31154:	4693      	mov	fp, r2
   31156:	0c10      	lsrs	r0, r2, #16
   31158:	0c0a      	lsrs	r2, r1, #16
   3115a:	4691      	mov	r9, r2
   3115c:	0409      	lsls	r1, r1, #16
   3115e:	465a      	mov	r2, fp
   31160:	0c09      	lsrs	r1, r1, #16
   31162:	464e      	mov	r6, r9
   31164:	000d      	movs	r5, r1
   31166:	0412      	lsls	r2, r2, #16
   31168:	0c12      	lsrs	r2, r2, #16
   3116a:	4345      	muls	r5, r0
   3116c:	9105      	str	r1, [sp, #20]
   3116e:	4351      	muls	r1, r2
   31170:	4372      	muls	r2, r6
   31172:	4370      	muls	r0, r6
   31174:	1952      	adds	r2, r2, r5
   31176:	0c0e      	lsrs	r6, r1, #16
   31178:	18b2      	adds	r2, r6, r2
   3117a:	4295      	cmp	r5, r2
   3117c:	d903      	bls.n	31186 <__aeabi_ddiv+0x2de>
   3117e:	2580      	movs	r5, #128	; 0x80
   31180:	026d      	lsls	r5, r5, #9
   31182:	46ac      	mov	ip, r5
   31184:	4460      	add	r0, ip
   31186:	0c15      	lsrs	r5, r2, #16
   31188:	0409      	lsls	r1, r1, #16
   3118a:	0412      	lsls	r2, r2, #16
   3118c:	0c09      	lsrs	r1, r1, #16
   3118e:	1828      	adds	r0, r5, r0
   31190:	1852      	adds	r2, r2, r1
   31192:	4283      	cmp	r3, r0
   31194:	d200      	bcs.n	31198 <__aeabi_ddiv+0x2f0>
   31196:	e0ce      	b.n	31336 <__aeabi_ddiv+0x48e>
   31198:	d100      	bne.n	3119c <__aeabi_ddiv+0x2f4>
   3119a:	e0c8      	b.n	3132e <__aeabi_ddiv+0x486>
   3119c:	1a1d      	subs	r5, r3, r0
   3119e:	4653      	mov	r3, sl
   311a0:	1a9e      	subs	r6, r3, r2
   311a2:	45b2      	cmp	sl, r6
   311a4:	4192      	sbcs	r2, r2
   311a6:	4252      	negs	r2, r2
   311a8:	1aab      	subs	r3, r5, r2
   311aa:	469a      	mov	sl, r3
   311ac:	4598      	cmp	r8, r3
   311ae:	d100      	bne.n	311b2 <__aeabi_ddiv+0x30a>
   311b0:	e117      	b.n	313e2 <__aeabi_ddiv+0x53a>
   311b2:	0039      	movs	r1, r7
   311b4:	0018      	movs	r0, r3
   311b6:	f7ff f9c7 	bl	30548 <__udivsi3>
   311ba:	9b01      	ldr	r3, [sp, #4]
   311bc:	0005      	movs	r5, r0
   311be:	4343      	muls	r3, r0
   311c0:	0039      	movs	r1, r7
   311c2:	4650      	mov	r0, sl
   311c4:	9304      	str	r3, [sp, #16]
   311c6:	f7ff fa45 	bl	30654 <__aeabi_uidivmod>
   311ca:	9804      	ldr	r0, [sp, #16]
   311cc:	040b      	lsls	r3, r1, #16
   311ce:	0c31      	lsrs	r1, r6, #16
   311d0:	4319      	orrs	r1, r3
   311d2:	4288      	cmp	r0, r1
   311d4:	d909      	bls.n	311ea <__aeabi_ddiv+0x342>
   311d6:	4441      	add	r1, r8
   311d8:	1e6b      	subs	r3, r5, #1
   311da:	4588      	cmp	r8, r1
   311dc:	d900      	bls.n	311e0 <__aeabi_ddiv+0x338>
   311de:	e107      	b.n	313f0 <__aeabi_ddiv+0x548>
   311e0:	4288      	cmp	r0, r1
   311e2:	d800      	bhi.n	311e6 <__aeabi_ddiv+0x33e>
   311e4:	e104      	b.n	313f0 <__aeabi_ddiv+0x548>
   311e6:	3d02      	subs	r5, #2
   311e8:	4441      	add	r1, r8
   311ea:	9b04      	ldr	r3, [sp, #16]
   311ec:	1acb      	subs	r3, r1, r3
   311ee:	0018      	movs	r0, r3
   311f0:	0039      	movs	r1, r7
   311f2:	9304      	str	r3, [sp, #16]
   311f4:	f7ff f9a8 	bl	30548 <__udivsi3>
   311f8:	9b01      	ldr	r3, [sp, #4]
   311fa:	4682      	mov	sl, r0
   311fc:	4343      	muls	r3, r0
   311fe:	0039      	movs	r1, r7
   31200:	9804      	ldr	r0, [sp, #16]
   31202:	9301      	str	r3, [sp, #4]
   31204:	f7ff fa26 	bl	30654 <__aeabi_uidivmod>
   31208:	9801      	ldr	r0, [sp, #4]
   3120a:	040b      	lsls	r3, r1, #16
   3120c:	0431      	lsls	r1, r6, #16
   3120e:	0c09      	lsrs	r1, r1, #16
   31210:	4319      	orrs	r1, r3
   31212:	4288      	cmp	r0, r1
   31214:	d90d      	bls.n	31232 <__aeabi_ddiv+0x38a>
   31216:	4653      	mov	r3, sl
   31218:	4441      	add	r1, r8
   3121a:	3b01      	subs	r3, #1
   3121c:	4588      	cmp	r8, r1
   3121e:	d900      	bls.n	31222 <__aeabi_ddiv+0x37a>
   31220:	e0e8      	b.n	313f4 <__aeabi_ddiv+0x54c>
   31222:	4288      	cmp	r0, r1
   31224:	d800      	bhi.n	31228 <__aeabi_ddiv+0x380>
   31226:	e0e5      	b.n	313f4 <__aeabi_ddiv+0x54c>
   31228:	2302      	movs	r3, #2
   3122a:	425b      	negs	r3, r3
   3122c:	469c      	mov	ip, r3
   3122e:	4441      	add	r1, r8
   31230:	44e2      	add	sl, ip
   31232:	9b01      	ldr	r3, [sp, #4]
   31234:	042d      	lsls	r5, r5, #16
   31236:	1ace      	subs	r6, r1, r3
   31238:	4651      	mov	r1, sl
   3123a:	4329      	orrs	r1, r5
   3123c:	9d05      	ldr	r5, [sp, #20]
   3123e:	464f      	mov	r7, r9
   31240:	002a      	movs	r2, r5
   31242:	040b      	lsls	r3, r1, #16
   31244:	0c08      	lsrs	r0, r1, #16
   31246:	0c1b      	lsrs	r3, r3, #16
   31248:	435a      	muls	r2, r3
   3124a:	4345      	muls	r5, r0
   3124c:	437b      	muls	r3, r7
   3124e:	4378      	muls	r0, r7
   31250:	195b      	adds	r3, r3, r5
   31252:	0c17      	lsrs	r7, r2, #16
   31254:	18fb      	adds	r3, r7, r3
   31256:	429d      	cmp	r5, r3
   31258:	d903      	bls.n	31262 <__aeabi_ddiv+0x3ba>
   3125a:	2580      	movs	r5, #128	; 0x80
   3125c:	026d      	lsls	r5, r5, #9
   3125e:	46ac      	mov	ip, r5
   31260:	4460      	add	r0, ip
   31262:	0c1d      	lsrs	r5, r3, #16
   31264:	0412      	lsls	r2, r2, #16
   31266:	041b      	lsls	r3, r3, #16
   31268:	0c12      	lsrs	r2, r2, #16
   3126a:	1828      	adds	r0, r5, r0
   3126c:	189b      	adds	r3, r3, r2
   3126e:	4286      	cmp	r6, r0
   31270:	d200      	bcs.n	31274 <__aeabi_ddiv+0x3cc>
   31272:	e093      	b.n	3139c <__aeabi_ddiv+0x4f4>
   31274:	d100      	bne.n	31278 <__aeabi_ddiv+0x3d0>
   31276:	e08e      	b.n	31396 <__aeabi_ddiv+0x4ee>
   31278:	2301      	movs	r3, #1
   3127a:	4319      	orrs	r1, r3
   3127c:	4ba0      	ldr	r3, [pc, #640]	; (31500 <__aeabi_ddiv+0x658>)
   3127e:	18e3      	adds	r3, r4, r3
   31280:	2b00      	cmp	r3, #0
   31282:	dc00      	bgt.n	31286 <__aeabi_ddiv+0x3de>
   31284:	e099      	b.n	313ba <__aeabi_ddiv+0x512>
   31286:	074a      	lsls	r2, r1, #29
   31288:	d000      	beq.n	3128c <__aeabi_ddiv+0x3e4>
   3128a:	e09e      	b.n	313ca <__aeabi_ddiv+0x522>
   3128c:	465a      	mov	r2, fp
   3128e:	01d2      	lsls	r2, r2, #7
   31290:	d506      	bpl.n	312a0 <__aeabi_ddiv+0x3f8>
   31292:	465a      	mov	r2, fp
   31294:	4b9b      	ldr	r3, [pc, #620]	; (31504 <__aeabi_ddiv+0x65c>)
   31296:	401a      	ands	r2, r3
   31298:	2380      	movs	r3, #128	; 0x80
   3129a:	4693      	mov	fp, r2
   3129c:	00db      	lsls	r3, r3, #3
   3129e:	18e3      	adds	r3, r4, r3
   312a0:	4a99      	ldr	r2, [pc, #612]	; (31508 <__aeabi_ddiv+0x660>)
   312a2:	4293      	cmp	r3, r2
   312a4:	dd68      	ble.n	31378 <__aeabi_ddiv+0x4d0>
   312a6:	2301      	movs	r3, #1
   312a8:	9a02      	ldr	r2, [sp, #8]
   312aa:	4c98      	ldr	r4, [pc, #608]	; (3150c <__aeabi_ddiv+0x664>)
   312ac:	401a      	ands	r2, r3
   312ae:	2300      	movs	r3, #0
   312b0:	4694      	mov	ip, r2
   312b2:	4698      	mov	r8, r3
   312b4:	2200      	movs	r2, #0
   312b6:	e6c5      	b.n	31044 <__aeabi_ddiv+0x19c>
   312b8:	2280      	movs	r2, #128	; 0x80
   312ba:	464b      	mov	r3, r9
   312bc:	0312      	lsls	r2, r2, #12
   312be:	4213      	tst	r3, r2
   312c0:	d00a      	beq.n	312d8 <__aeabi_ddiv+0x430>
   312c2:	465b      	mov	r3, fp
   312c4:	4213      	tst	r3, r2
   312c6:	d106      	bne.n	312d6 <__aeabi_ddiv+0x42e>
   312c8:	431a      	orrs	r2, r3
   312ca:	0312      	lsls	r2, r2, #12
   312cc:	0b12      	lsrs	r2, r2, #12
   312ce:	46ac      	mov	ip, r5
   312d0:	4688      	mov	r8, r1
   312d2:	4c8e      	ldr	r4, [pc, #568]	; (3150c <__aeabi_ddiv+0x664>)
   312d4:	e6b6      	b.n	31044 <__aeabi_ddiv+0x19c>
   312d6:	464b      	mov	r3, r9
   312d8:	431a      	orrs	r2, r3
   312da:	0312      	lsls	r2, r2, #12
   312dc:	0b12      	lsrs	r2, r2, #12
   312de:	46bc      	mov	ip, r7
   312e0:	4c8a      	ldr	r4, [pc, #552]	; (3150c <__aeabi_ddiv+0x664>)
   312e2:	e6af      	b.n	31044 <__aeabi_ddiv+0x19c>
   312e4:	0003      	movs	r3, r0
   312e6:	465a      	mov	r2, fp
   312e8:	3b28      	subs	r3, #40	; 0x28
   312ea:	409a      	lsls	r2, r3
   312ec:	2300      	movs	r3, #0
   312ee:	4691      	mov	r9, r2
   312f0:	4698      	mov	r8, r3
   312f2:	e657      	b.n	30fa4 <__aeabi_ddiv+0xfc>
   312f4:	4658      	mov	r0, fp
   312f6:	f000 ff0d 	bl	32114 <__clzsi2>
   312fa:	3020      	adds	r0, #32
   312fc:	e640      	b.n	30f80 <__aeabi_ddiv+0xd8>
   312fe:	0003      	movs	r3, r0
   31300:	4652      	mov	r2, sl
   31302:	3b28      	subs	r3, #40	; 0x28
   31304:	409a      	lsls	r2, r3
   31306:	2100      	movs	r1, #0
   31308:	4693      	mov	fp, r2
   3130a:	e677      	b.n	30ffc <__aeabi_ddiv+0x154>
   3130c:	f000 ff02 	bl	32114 <__clzsi2>
   31310:	3020      	adds	r0, #32
   31312:	e65f      	b.n	30fd4 <__aeabi_ddiv+0x12c>
   31314:	4588      	cmp	r8, r1
   31316:	d200      	bcs.n	3131a <__aeabi_ddiv+0x472>
   31318:	e6c7      	b.n	310aa <__aeabi_ddiv+0x202>
   3131a:	464b      	mov	r3, r9
   3131c:	07de      	lsls	r6, r3, #31
   3131e:	085d      	lsrs	r5, r3, #1
   31320:	4643      	mov	r3, r8
   31322:	085b      	lsrs	r3, r3, #1
   31324:	431e      	orrs	r6, r3
   31326:	4643      	mov	r3, r8
   31328:	07db      	lsls	r3, r3, #31
   3132a:	469a      	mov	sl, r3
   3132c:	e6c2      	b.n	310b4 <__aeabi_ddiv+0x20c>
   3132e:	2500      	movs	r5, #0
   31330:	4592      	cmp	sl, r2
   31332:	d300      	bcc.n	31336 <__aeabi_ddiv+0x48e>
   31334:	e733      	b.n	3119e <__aeabi_ddiv+0x2f6>
   31336:	9e03      	ldr	r6, [sp, #12]
   31338:	4659      	mov	r1, fp
   3133a:	46b4      	mov	ip, r6
   3133c:	44e2      	add	sl, ip
   3133e:	45b2      	cmp	sl, r6
   31340:	41ad      	sbcs	r5, r5
   31342:	426d      	negs	r5, r5
   31344:	4445      	add	r5, r8
   31346:	18eb      	adds	r3, r5, r3
   31348:	3901      	subs	r1, #1
   3134a:	4598      	cmp	r8, r3
   3134c:	d207      	bcs.n	3135e <__aeabi_ddiv+0x4b6>
   3134e:	4298      	cmp	r0, r3
   31350:	d900      	bls.n	31354 <__aeabi_ddiv+0x4ac>
   31352:	e07f      	b.n	31454 <__aeabi_ddiv+0x5ac>
   31354:	d100      	bne.n	31358 <__aeabi_ddiv+0x4b0>
   31356:	e0bc      	b.n	314d2 <__aeabi_ddiv+0x62a>
   31358:	1a1d      	subs	r5, r3, r0
   3135a:	468b      	mov	fp, r1
   3135c:	e71f      	b.n	3119e <__aeabi_ddiv+0x2f6>
   3135e:	4598      	cmp	r8, r3
   31360:	d1fa      	bne.n	31358 <__aeabi_ddiv+0x4b0>
   31362:	9d03      	ldr	r5, [sp, #12]
   31364:	4555      	cmp	r5, sl
   31366:	d9f2      	bls.n	3134e <__aeabi_ddiv+0x4a6>
   31368:	4643      	mov	r3, r8
   3136a:	468b      	mov	fp, r1
   3136c:	1a1d      	subs	r5, r3, r0
   3136e:	e716      	b.n	3119e <__aeabi_ddiv+0x2f6>
   31370:	469b      	mov	fp, r3
   31372:	e6ca      	b.n	3110a <__aeabi_ddiv+0x262>
   31374:	0015      	movs	r5, r2
   31376:	e6e7      	b.n	31148 <__aeabi_ddiv+0x2a0>
   31378:	465a      	mov	r2, fp
   3137a:	08c9      	lsrs	r1, r1, #3
   3137c:	0752      	lsls	r2, r2, #29
   3137e:	430a      	orrs	r2, r1
   31380:	055b      	lsls	r3, r3, #21
   31382:	4690      	mov	r8, r2
   31384:	0d5c      	lsrs	r4, r3, #21
   31386:	465a      	mov	r2, fp
   31388:	2301      	movs	r3, #1
   3138a:	9902      	ldr	r1, [sp, #8]
   3138c:	0252      	lsls	r2, r2, #9
   3138e:	4019      	ands	r1, r3
   31390:	0b12      	lsrs	r2, r2, #12
   31392:	468c      	mov	ip, r1
   31394:	e656      	b.n	31044 <__aeabi_ddiv+0x19c>
   31396:	2b00      	cmp	r3, #0
   31398:	d100      	bne.n	3139c <__aeabi_ddiv+0x4f4>
   3139a:	e76f      	b.n	3127c <__aeabi_ddiv+0x3d4>
   3139c:	4446      	add	r6, r8
   3139e:	1e4a      	subs	r2, r1, #1
   313a0:	45b0      	cmp	r8, r6
   313a2:	d929      	bls.n	313f8 <__aeabi_ddiv+0x550>
   313a4:	0011      	movs	r1, r2
   313a6:	4286      	cmp	r6, r0
   313a8:	d000      	beq.n	313ac <__aeabi_ddiv+0x504>
   313aa:	e765      	b.n	31278 <__aeabi_ddiv+0x3d0>
   313ac:	9a03      	ldr	r2, [sp, #12]
   313ae:	4293      	cmp	r3, r2
   313b0:	d000      	beq.n	313b4 <__aeabi_ddiv+0x50c>
   313b2:	e761      	b.n	31278 <__aeabi_ddiv+0x3d0>
   313b4:	e762      	b.n	3127c <__aeabi_ddiv+0x3d4>
   313b6:	2101      	movs	r1, #1
   313b8:	4249      	negs	r1, r1
   313ba:	2001      	movs	r0, #1
   313bc:	1ac2      	subs	r2, r0, r3
   313be:	2a38      	cmp	r2, #56	; 0x38
   313c0:	dd21      	ble.n	31406 <__aeabi_ddiv+0x55e>
   313c2:	9b02      	ldr	r3, [sp, #8]
   313c4:	4003      	ands	r3, r0
   313c6:	469c      	mov	ip, r3
   313c8:	e638      	b.n	3103c <__aeabi_ddiv+0x194>
   313ca:	220f      	movs	r2, #15
   313cc:	400a      	ands	r2, r1
   313ce:	2a04      	cmp	r2, #4
   313d0:	d100      	bne.n	313d4 <__aeabi_ddiv+0x52c>
   313d2:	e75b      	b.n	3128c <__aeabi_ddiv+0x3e4>
   313d4:	000a      	movs	r2, r1
   313d6:	1d11      	adds	r1, r2, #4
   313d8:	4291      	cmp	r1, r2
   313da:	4192      	sbcs	r2, r2
   313dc:	4252      	negs	r2, r2
   313de:	4493      	add	fp, r2
   313e0:	e754      	b.n	3128c <__aeabi_ddiv+0x3e4>
   313e2:	4b47      	ldr	r3, [pc, #284]	; (31500 <__aeabi_ddiv+0x658>)
   313e4:	18e3      	adds	r3, r4, r3
   313e6:	2b00      	cmp	r3, #0
   313e8:	dde5      	ble.n	313b6 <__aeabi_ddiv+0x50e>
   313ea:	2201      	movs	r2, #1
   313ec:	4252      	negs	r2, r2
   313ee:	e7f2      	b.n	313d6 <__aeabi_ddiv+0x52e>
   313f0:	001d      	movs	r5, r3
   313f2:	e6fa      	b.n	311ea <__aeabi_ddiv+0x342>
   313f4:	469a      	mov	sl, r3
   313f6:	e71c      	b.n	31232 <__aeabi_ddiv+0x38a>
   313f8:	42b0      	cmp	r0, r6
   313fa:	d839      	bhi.n	31470 <__aeabi_ddiv+0x5c8>
   313fc:	d06e      	beq.n	314dc <__aeabi_ddiv+0x634>
   313fe:	0011      	movs	r1, r2
   31400:	e73a      	b.n	31278 <__aeabi_ddiv+0x3d0>
   31402:	9302      	str	r3, [sp, #8]
   31404:	e73a      	b.n	3127c <__aeabi_ddiv+0x3d4>
   31406:	2a1f      	cmp	r2, #31
   31408:	dc3c      	bgt.n	31484 <__aeabi_ddiv+0x5dc>
   3140a:	2320      	movs	r3, #32
   3140c:	1a9b      	subs	r3, r3, r2
   3140e:	000c      	movs	r4, r1
   31410:	4658      	mov	r0, fp
   31412:	4099      	lsls	r1, r3
   31414:	4098      	lsls	r0, r3
   31416:	1e4b      	subs	r3, r1, #1
   31418:	4199      	sbcs	r1, r3
   3141a:	465b      	mov	r3, fp
   3141c:	40d4      	lsrs	r4, r2
   3141e:	40d3      	lsrs	r3, r2
   31420:	4320      	orrs	r0, r4
   31422:	4308      	orrs	r0, r1
   31424:	001a      	movs	r2, r3
   31426:	0743      	lsls	r3, r0, #29
   31428:	d009      	beq.n	3143e <__aeabi_ddiv+0x596>
   3142a:	230f      	movs	r3, #15
   3142c:	4003      	ands	r3, r0
   3142e:	2b04      	cmp	r3, #4
   31430:	d005      	beq.n	3143e <__aeabi_ddiv+0x596>
   31432:	0001      	movs	r1, r0
   31434:	1d08      	adds	r0, r1, #4
   31436:	4288      	cmp	r0, r1
   31438:	419b      	sbcs	r3, r3
   3143a:	425b      	negs	r3, r3
   3143c:	18d2      	adds	r2, r2, r3
   3143e:	0213      	lsls	r3, r2, #8
   31440:	d53a      	bpl.n	314b8 <__aeabi_ddiv+0x610>
   31442:	2301      	movs	r3, #1
   31444:	9a02      	ldr	r2, [sp, #8]
   31446:	2401      	movs	r4, #1
   31448:	401a      	ands	r2, r3
   3144a:	2300      	movs	r3, #0
   3144c:	4694      	mov	ip, r2
   3144e:	4698      	mov	r8, r3
   31450:	2200      	movs	r2, #0
   31452:	e5f7      	b.n	31044 <__aeabi_ddiv+0x19c>
   31454:	2102      	movs	r1, #2
   31456:	4249      	negs	r1, r1
   31458:	468c      	mov	ip, r1
   3145a:	9d03      	ldr	r5, [sp, #12]
   3145c:	44e3      	add	fp, ip
   3145e:	46ac      	mov	ip, r5
   31460:	44e2      	add	sl, ip
   31462:	45aa      	cmp	sl, r5
   31464:	41ad      	sbcs	r5, r5
   31466:	426d      	negs	r5, r5
   31468:	4445      	add	r5, r8
   3146a:	18ed      	adds	r5, r5, r3
   3146c:	1a2d      	subs	r5, r5, r0
   3146e:	e696      	b.n	3119e <__aeabi_ddiv+0x2f6>
   31470:	1e8a      	subs	r2, r1, #2
   31472:	9903      	ldr	r1, [sp, #12]
   31474:	004d      	lsls	r5, r1, #1
   31476:	428d      	cmp	r5, r1
   31478:	4189      	sbcs	r1, r1
   3147a:	4249      	negs	r1, r1
   3147c:	4441      	add	r1, r8
   3147e:	1876      	adds	r6, r6, r1
   31480:	9503      	str	r5, [sp, #12]
   31482:	e78f      	b.n	313a4 <__aeabi_ddiv+0x4fc>
   31484:	201f      	movs	r0, #31
   31486:	4240      	negs	r0, r0
   31488:	1ac3      	subs	r3, r0, r3
   3148a:	4658      	mov	r0, fp
   3148c:	40d8      	lsrs	r0, r3
   3148e:	0003      	movs	r3, r0
   31490:	2a20      	cmp	r2, #32
   31492:	d028      	beq.n	314e6 <__aeabi_ddiv+0x63e>
   31494:	2040      	movs	r0, #64	; 0x40
   31496:	465d      	mov	r5, fp
   31498:	1a82      	subs	r2, r0, r2
   3149a:	4095      	lsls	r5, r2
   3149c:	4329      	orrs	r1, r5
   3149e:	1e4a      	subs	r2, r1, #1
   314a0:	4191      	sbcs	r1, r2
   314a2:	4319      	orrs	r1, r3
   314a4:	2307      	movs	r3, #7
   314a6:	2200      	movs	r2, #0
   314a8:	400b      	ands	r3, r1
   314aa:	d009      	beq.n	314c0 <__aeabi_ddiv+0x618>
   314ac:	230f      	movs	r3, #15
   314ae:	2200      	movs	r2, #0
   314b0:	400b      	ands	r3, r1
   314b2:	0008      	movs	r0, r1
   314b4:	2b04      	cmp	r3, #4
   314b6:	d1bd      	bne.n	31434 <__aeabi_ddiv+0x58c>
   314b8:	0001      	movs	r1, r0
   314ba:	0753      	lsls	r3, r2, #29
   314bc:	0252      	lsls	r2, r2, #9
   314be:	0b12      	lsrs	r2, r2, #12
   314c0:	08c9      	lsrs	r1, r1, #3
   314c2:	4319      	orrs	r1, r3
   314c4:	2301      	movs	r3, #1
   314c6:	4688      	mov	r8, r1
   314c8:	9902      	ldr	r1, [sp, #8]
   314ca:	2400      	movs	r4, #0
   314cc:	4019      	ands	r1, r3
   314ce:	468c      	mov	ip, r1
   314d0:	e5b8      	b.n	31044 <__aeabi_ddiv+0x19c>
   314d2:	4552      	cmp	r2, sl
   314d4:	d8be      	bhi.n	31454 <__aeabi_ddiv+0x5ac>
   314d6:	468b      	mov	fp, r1
   314d8:	2500      	movs	r5, #0
   314da:	e660      	b.n	3119e <__aeabi_ddiv+0x2f6>
   314dc:	9d03      	ldr	r5, [sp, #12]
   314de:	429d      	cmp	r5, r3
   314e0:	d3c6      	bcc.n	31470 <__aeabi_ddiv+0x5c8>
   314e2:	0011      	movs	r1, r2
   314e4:	e762      	b.n	313ac <__aeabi_ddiv+0x504>
   314e6:	2500      	movs	r5, #0
   314e8:	e7d8      	b.n	3149c <__aeabi_ddiv+0x5f4>
   314ea:	2280      	movs	r2, #128	; 0x80
   314ec:	465b      	mov	r3, fp
   314ee:	0312      	lsls	r2, r2, #12
   314f0:	431a      	orrs	r2, r3
   314f2:	9b01      	ldr	r3, [sp, #4]
   314f4:	0312      	lsls	r2, r2, #12
   314f6:	0b12      	lsrs	r2, r2, #12
   314f8:	469c      	mov	ip, r3
   314fa:	4688      	mov	r8, r1
   314fc:	4c03      	ldr	r4, [pc, #12]	; (3150c <__aeabi_ddiv+0x664>)
   314fe:	e5a1      	b.n	31044 <__aeabi_ddiv+0x19c>
   31500:	000003ff 	.word	0x000003ff
   31504:	feffffff 	.word	0xfeffffff
   31508:	000007fe 	.word	0x000007fe
   3150c:	000007ff 	.word	0x000007ff

00031510 <__aeabi_dmul>:
   31510:	b5f0      	push	{r4, r5, r6, r7, lr}
   31512:	4657      	mov	r7, sl
   31514:	4645      	mov	r5, r8
   31516:	46de      	mov	lr, fp
   31518:	464e      	mov	r6, r9
   3151a:	b5e0      	push	{r5, r6, r7, lr}
   3151c:	030c      	lsls	r4, r1, #12
   3151e:	4698      	mov	r8, r3
   31520:	004e      	lsls	r6, r1, #1
   31522:	0b23      	lsrs	r3, r4, #12
   31524:	b087      	sub	sp, #28
   31526:	0007      	movs	r7, r0
   31528:	4692      	mov	sl, r2
   3152a:	469b      	mov	fp, r3
   3152c:	0d76      	lsrs	r6, r6, #21
   3152e:	0fcd      	lsrs	r5, r1, #31
   31530:	2e00      	cmp	r6, #0
   31532:	d06b      	beq.n	3160c <__aeabi_dmul+0xfc>
   31534:	4b6d      	ldr	r3, [pc, #436]	; (316ec <__aeabi_dmul+0x1dc>)
   31536:	429e      	cmp	r6, r3
   31538:	d035      	beq.n	315a6 <__aeabi_dmul+0x96>
   3153a:	2480      	movs	r4, #128	; 0x80
   3153c:	465b      	mov	r3, fp
   3153e:	0f42      	lsrs	r2, r0, #29
   31540:	0424      	lsls	r4, r4, #16
   31542:	00db      	lsls	r3, r3, #3
   31544:	4314      	orrs	r4, r2
   31546:	431c      	orrs	r4, r3
   31548:	00c3      	lsls	r3, r0, #3
   3154a:	4699      	mov	r9, r3
   3154c:	4b68      	ldr	r3, [pc, #416]	; (316f0 <__aeabi_dmul+0x1e0>)
   3154e:	46a3      	mov	fp, r4
   31550:	469c      	mov	ip, r3
   31552:	2300      	movs	r3, #0
   31554:	2700      	movs	r7, #0
   31556:	4466      	add	r6, ip
   31558:	9302      	str	r3, [sp, #8]
   3155a:	4643      	mov	r3, r8
   3155c:	031c      	lsls	r4, r3, #12
   3155e:	005a      	lsls	r2, r3, #1
   31560:	0fdb      	lsrs	r3, r3, #31
   31562:	4650      	mov	r0, sl
   31564:	0b24      	lsrs	r4, r4, #12
   31566:	0d52      	lsrs	r2, r2, #21
   31568:	4698      	mov	r8, r3
   3156a:	d100      	bne.n	3156e <__aeabi_dmul+0x5e>
   3156c:	e076      	b.n	3165c <__aeabi_dmul+0x14c>
   3156e:	4b5f      	ldr	r3, [pc, #380]	; (316ec <__aeabi_dmul+0x1dc>)
   31570:	429a      	cmp	r2, r3
   31572:	d06d      	beq.n	31650 <__aeabi_dmul+0x140>
   31574:	2380      	movs	r3, #128	; 0x80
   31576:	0f41      	lsrs	r1, r0, #29
   31578:	041b      	lsls	r3, r3, #16
   3157a:	430b      	orrs	r3, r1
   3157c:	495c      	ldr	r1, [pc, #368]	; (316f0 <__aeabi_dmul+0x1e0>)
   3157e:	00e4      	lsls	r4, r4, #3
   31580:	468c      	mov	ip, r1
   31582:	431c      	orrs	r4, r3
   31584:	00c3      	lsls	r3, r0, #3
   31586:	2000      	movs	r0, #0
   31588:	4462      	add	r2, ip
   3158a:	4641      	mov	r1, r8
   3158c:	18b6      	adds	r6, r6, r2
   3158e:	4069      	eors	r1, r5
   31590:	1c72      	adds	r2, r6, #1
   31592:	9101      	str	r1, [sp, #4]
   31594:	4694      	mov	ip, r2
   31596:	4307      	orrs	r7, r0
   31598:	2f0f      	cmp	r7, #15
   3159a:	d900      	bls.n	3159e <__aeabi_dmul+0x8e>
   3159c:	e0b0      	b.n	31700 <__aeabi_dmul+0x1f0>
   3159e:	4a55      	ldr	r2, [pc, #340]	; (316f4 <__aeabi_dmul+0x1e4>)
   315a0:	00bf      	lsls	r7, r7, #2
   315a2:	59d2      	ldr	r2, [r2, r7]
   315a4:	4697      	mov	pc, r2
   315a6:	465b      	mov	r3, fp
   315a8:	4303      	orrs	r3, r0
   315aa:	4699      	mov	r9, r3
   315ac:	d000      	beq.n	315b0 <__aeabi_dmul+0xa0>
   315ae:	e087      	b.n	316c0 <__aeabi_dmul+0x1b0>
   315b0:	2300      	movs	r3, #0
   315b2:	469b      	mov	fp, r3
   315b4:	3302      	adds	r3, #2
   315b6:	2708      	movs	r7, #8
   315b8:	9302      	str	r3, [sp, #8]
   315ba:	e7ce      	b.n	3155a <__aeabi_dmul+0x4a>
   315bc:	4642      	mov	r2, r8
   315be:	9201      	str	r2, [sp, #4]
   315c0:	2802      	cmp	r0, #2
   315c2:	d067      	beq.n	31694 <__aeabi_dmul+0x184>
   315c4:	2803      	cmp	r0, #3
   315c6:	d100      	bne.n	315ca <__aeabi_dmul+0xba>
   315c8:	e20e      	b.n	319e8 <__aeabi_dmul+0x4d8>
   315ca:	2801      	cmp	r0, #1
   315cc:	d000      	beq.n	315d0 <__aeabi_dmul+0xc0>
   315ce:	e162      	b.n	31896 <__aeabi_dmul+0x386>
   315d0:	2300      	movs	r3, #0
   315d2:	2400      	movs	r4, #0
   315d4:	2200      	movs	r2, #0
   315d6:	4699      	mov	r9, r3
   315d8:	9901      	ldr	r1, [sp, #4]
   315da:	4001      	ands	r1, r0
   315dc:	b2cd      	uxtb	r5, r1
   315de:	2100      	movs	r1, #0
   315e0:	0312      	lsls	r2, r2, #12
   315e2:	0d0b      	lsrs	r3, r1, #20
   315e4:	0b12      	lsrs	r2, r2, #12
   315e6:	051b      	lsls	r3, r3, #20
   315e8:	4313      	orrs	r3, r2
   315ea:	4a43      	ldr	r2, [pc, #268]	; (316f8 <__aeabi_dmul+0x1e8>)
   315ec:	0524      	lsls	r4, r4, #20
   315ee:	4013      	ands	r3, r2
   315f0:	431c      	orrs	r4, r3
   315f2:	0064      	lsls	r4, r4, #1
   315f4:	07ed      	lsls	r5, r5, #31
   315f6:	0864      	lsrs	r4, r4, #1
   315f8:	432c      	orrs	r4, r5
   315fa:	4648      	mov	r0, r9
   315fc:	0021      	movs	r1, r4
   315fe:	b007      	add	sp, #28
   31600:	bc3c      	pop	{r2, r3, r4, r5}
   31602:	4690      	mov	r8, r2
   31604:	4699      	mov	r9, r3
   31606:	46a2      	mov	sl, r4
   31608:	46ab      	mov	fp, r5
   3160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3160c:	4303      	orrs	r3, r0
   3160e:	4699      	mov	r9, r3
   31610:	d04f      	beq.n	316b2 <__aeabi_dmul+0x1a2>
   31612:	465b      	mov	r3, fp
   31614:	2b00      	cmp	r3, #0
   31616:	d100      	bne.n	3161a <__aeabi_dmul+0x10a>
   31618:	e189      	b.n	3192e <__aeabi_dmul+0x41e>
   3161a:	4658      	mov	r0, fp
   3161c:	f000 fd7a 	bl	32114 <__clzsi2>
   31620:	0003      	movs	r3, r0
   31622:	3b0b      	subs	r3, #11
   31624:	2b1c      	cmp	r3, #28
   31626:	dd00      	ble.n	3162a <__aeabi_dmul+0x11a>
   31628:	e17a      	b.n	31920 <__aeabi_dmul+0x410>
   3162a:	221d      	movs	r2, #29
   3162c:	1ad3      	subs	r3, r2, r3
   3162e:	003a      	movs	r2, r7
   31630:	0001      	movs	r1, r0
   31632:	465c      	mov	r4, fp
   31634:	40da      	lsrs	r2, r3
   31636:	3908      	subs	r1, #8
   31638:	408c      	lsls	r4, r1
   3163a:	0013      	movs	r3, r2
   3163c:	408f      	lsls	r7, r1
   3163e:	4323      	orrs	r3, r4
   31640:	469b      	mov	fp, r3
   31642:	46b9      	mov	r9, r7
   31644:	2300      	movs	r3, #0
   31646:	4e2d      	ldr	r6, [pc, #180]	; (316fc <__aeabi_dmul+0x1ec>)
   31648:	2700      	movs	r7, #0
   3164a:	1a36      	subs	r6, r6, r0
   3164c:	9302      	str	r3, [sp, #8]
   3164e:	e784      	b.n	3155a <__aeabi_dmul+0x4a>
   31650:	4653      	mov	r3, sl
   31652:	4323      	orrs	r3, r4
   31654:	d12a      	bne.n	316ac <__aeabi_dmul+0x19c>
   31656:	2400      	movs	r4, #0
   31658:	2002      	movs	r0, #2
   3165a:	e796      	b.n	3158a <__aeabi_dmul+0x7a>
   3165c:	4653      	mov	r3, sl
   3165e:	4323      	orrs	r3, r4
   31660:	d020      	beq.n	316a4 <__aeabi_dmul+0x194>
   31662:	2c00      	cmp	r4, #0
   31664:	d100      	bne.n	31668 <__aeabi_dmul+0x158>
   31666:	e157      	b.n	31918 <__aeabi_dmul+0x408>
   31668:	0020      	movs	r0, r4
   3166a:	f000 fd53 	bl	32114 <__clzsi2>
   3166e:	0003      	movs	r3, r0
   31670:	3b0b      	subs	r3, #11
   31672:	2b1c      	cmp	r3, #28
   31674:	dd00      	ble.n	31678 <__aeabi_dmul+0x168>
   31676:	e149      	b.n	3190c <__aeabi_dmul+0x3fc>
   31678:	211d      	movs	r1, #29
   3167a:	1acb      	subs	r3, r1, r3
   3167c:	4651      	mov	r1, sl
   3167e:	0002      	movs	r2, r0
   31680:	40d9      	lsrs	r1, r3
   31682:	4653      	mov	r3, sl
   31684:	3a08      	subs	r2, #8
   31686:	4094      	lsls	r4, r2
   31688:	4093      	lsls	r3, r2
   3168a:	430c      	orrs	r4, r1
   3168c:	4a1b      	ldr	r2, [pc, #108]	; (316fc <__aeabi_dmul+0x1ec>)
   3168e:	1a12      	subs	r2, r2, r0
   31690:	2000      	movs	r0, #0
   31692:	e77a      	b.n	3158a <__aeabi_dmul+0x7a>
   31694:	2501      	movs	r5, #1
   31696:	9b01      	ldr	r3, [sp, #4]
   31698:	4c14      	ldr	r4, [pc, #80]	; (316ec <__aeabi_dmul+0x1dc>)
   3169a:	401d      	ands	r5, r3
   3169c:	2300      	movs	r3, #0
   3169e:	2200      	movs	r2, #0
   316a0:	4699      	mov	r9, r3
   316a2:	e79c      	b.n	315de <__aeabi_dmul+0xce>
   316a4:	2400      	movs	r4, #0
   316a6:	2200      	movs	r2, #0
   316a8:	2001      	movs	r0, #1
   316aa:	e76e      	b.n	3158a <__aeabi_dmul+0x7a>
   316ac:	4653      	mov	r3, sl
   316ae:	2003      	movs	r0, #3
   316b0:	e76b      	b.n	3158a <__aeabi_dmul+0x7a>
   316b2:	2300      	movs	r3, #0
   316b4:	469b      	mov	fp, r3
   316b6:	3301      	adds	r3, #1
   316b8:	2704      	movs	r7, #4
   316ba:	2600      	movs	r6, #0
   316bc:	9302      	str	r3, [sp, #8]
   316be:	e74c      	b.n	3155a <__aeabi_dmul+0x4a>
   316c0:	2303      	movs	r3, #3
   316c2:	4681      	mov	r9, r0
   316c4:	270c      	movs	r7, #12
   316c6:	9302      	str	r3, [sp, #8]
   316c8:	e747      	b.n	3155a <__aeabi_dmul+0x4a>
   316ca:	2280      	movs	r2, #128	; 0x80
   316cc:	2300      	movs	r3, #0
   316ce:	2500      	movs	r5, #0
   316d0:	0312      	lsls	r2, r2, #12
   316d2:	4699      	mov	r9, r3
   316d4:	4c05      	ldr	r4, [pc, #20]	; (316ec <__aeabi_dmul+0x1dc>)
   316d6:	e782      	b.n	315de <__aeabi_dmul+0xce>
   316d8:	465c      	mov	r4, fp
   316da:	464b      	mov	r3, r9
   316dc:	9802      	ldr	r0, [sp, #8]
   316de:	e76f      	b.n	315c0 <__aeabi_dmul+0xb0>
   316e0:	465c      	mov	r4, fp
   316e2:	464b      	mov	r3, r9
   316e4:	9501      	str	r5, [sp, #4]
   316e6:	9802      	ldr	r0, [sp, #8]
   316e8:	e76a      	b.n	315c0 <__aeabi_dmul+0xb0>
   316ea:	46c0      	nop			; (mov r8, r8)
   316ec:	000007ff 	.word	0x000007ff
   316f0:	fffffc01 	.word	0xfffffc01
   316f4:	000374dc 	.word	0x000374dc
   316f8:	800fffff 	.word	0x800fffff
   316fc:	fffffc0d 	.word	0xfffffc0d
   31700:	464a      	mov	r2, r9
   31702:	4649      	mov	r1, r9
   31704:	0c17      	lsrs	r7, r2, #16
   31706:	0c1a      	lsrs	r2, r3, #16
   31708:	041b      	lsls	r3, r3, #16
   3170a:	0c1b      	lsrs	r3, r3, #16
   3170c:	0408      	lsls	r0, r1, #16
   3170e:	0019      	movs	r1, r3
   31710:	0c00      	lsrs	r0, r0, #16
   31712:	4341      	muls	r1, r0
   31714:	0015      	movs	r5, r2
   31716:	4688      	mov	r8, r1
   31718:	0019      	movs	r1, r3
   3171a:	437d      	muls	r5, r7
   3171c:	4379      	muls	r1, r7
   3171e:	9503      	str	r5, [sp, #12]
   31720:	4689      	mov	r9, r1
   31722:	0029      	movs	r1, r5
   31724:	0015      	movs	r5, r2
   31726:	4345      	muls	r5, r0
   31728:	444d      	add	r5, r9
   3172a:	9502      	str	r5, [sp, #8]
   3172c:	4645      	mov	r5, r8
   3172e:	0c2d      	lsrs	r5, r5, #16
   31730:	46aa      	mov	sl, r5
   31732:	9d02      	ldr	r5, [sp, #8]
   31734:	4455      	add	r5, sl
   31736:	45a9      	cmp	r9, r5
   31738:	d906      	bls.n	31748 <__aeabi_dmul+0x238>
   3173a:	468a      	mov	sl, r1
   3173c:	2180      	movs	r1, #128	; 0x80
   3173e:	0249      	lsls	r1, r1, #9
   31740:	4689      	mov	r9, r1
   31742:	44ca      	add	sl, r9
   31744:	4651      	mov	r1, sl
   31746:	9103      	str	r1, [sp, #12]
   31748:	0c29      	lsrs	r1, r5, #16
   3174a:	9104      	str	r1, [sp, #16]
   3174c:	4641      	mov	r1, r8
   3174e:	0409      	lsls	r1, r1, #16
   31750:	042d      	lsls	r5, r5, #16
   31752:	0c09      	lsrs	r1, r1, #16
   31754:	4688      	mov	r8, r1
   31756:	0029      	movs	r1, r5
   31758:	0c25      	lsrs	r5, r4, #16
   3175a:	0424      	lsls	r4, r4, #16
   3175c:	4441      	add	r1, r8
   3175e:	0c24      	lsrs	r4, r4, #16
   31760:	9105      	str	r1, [sp, #20]
   31762:	0021      	movs	r1, r4
   31764:	4341      	muls	r1, r0
   31766:	4688      	mov	r8, r1
   31768:	0021      	movs	r1, r4
   3176a:	4379      	muls	r1, r7
   3176c:	468a      	mov	sl, r1
   3176e:	4368      	muls	r0, r5
   31770:	4641      	mov	r1, r8
   31772:	4450      	add	r0, sl
   31774:	4681      	mov	r9, r0
   31776:	0c08      	lsrs	r0, r1, #16
   31778:	4448      	add	r0, r9
   3177a:	436f      	muls	r7, r5
   3177c:	4582      	cmp	sl, r0
   3177e:	d903      	bls.n	31788 <__aeabi_dmul+0x278>
   31780:	2180      	movs	r1, #128	; 0x80
   31782:	0249      	lsls	r1, r1, #9
   31784:	4689      	mov	r9, r1
   31786:	444f      	add	r7, r9
   31788:	0c01      	lsrs	r1, r0, #16
   3178a:	4689      	mov	r9, r1
   3178c:	0039      	movs	r1, r7
   3178e:	4449      	add	r1, r9
   31790:	9102      	str	r1, [sp, #8]
   31792:	4641      	mov	r1, r8
   31794:	040f      	lsls	r7, r1, #16
   31796:	9904      	ldr	r1, [sp, #16]
   31798:	0c3f      	lsrs	r7, r7, #16
   3179a:	4688      	mov	r8, r1
   3179c:	0400      	lsls	r0, r0, #16
   3179e:	19c0      	adds	r0, r0, r7
   317a0:	4480      	add	r8, r0
   317a2:	4641      	mov	r1, r8
   317a4:	9104      	str	r1, [sp, #16]
   317a6:	4659      	mov	r1, fp
   317a8:	0c0f      	lsrs	r7, r1, #16
   317aa:	0409      	lsls	r1, r1, #16
   317ac:	0c09      	lsrs	r1, r1, #16
   317ae:	4688      	mov	r8, r1
   317b0:	4359      	muls	r1, r3
   317b2:	468a      	mov	sl, r1
   317b4:	0039      	movs	r1, r7
   317b6:	4351      	muls	r1, r2
   317b8:	4689      	mov	r9, r1
   317ba:	4641      	mov	r1, r8
   317bc:	434a      	muls	r2, r1
   317be:	4651      	mov	r1, sl
   317c0:	0c09      	lsrs	r1, r1, #16
   317c2:	468b      	mov	fp, r1
   317c4:	437b      	muls	r3, r7
   317c6:	18d2      	adds	r2, r2, r3
   317c8:	445a      	add	r2, fp
   317ca:	4293      	cmp	r3, r2
   317cc:	d903      	bls.n	317d6 <__aeabi_dmul+0x2c6>
   317ce:	2380      	movs	r3, #128	; 0x80
   317d0:	025b      	lsls	r3, r3, #9
   317d2:	469b      	mov	fp, r3
   317d4:	44d9      	add	r9, fp
   317d6:	4651      	mov	r1, sl
   317d8:	0409      	lsls	r1, r1, #16
   317da:	0c09      	lsrs	r1, r1, #16
   317dc:	468a      	mov	sl, r1
   317de:	4641      	mov	r1, r8
   317e0:	4361      	muls	r1, r4
   317e2:	437c      	muls	r4, r7
   317e4:	0c13      	lsrs	r3, r2, #16
   317e6:	0412      	lsls	r2, r2, #16
   317e8:	444b      	add	r3, r9
   317ea:	4452      	add	r2, sl
   317ec:	46a1      	mov	r9, r4
   317ee:	468a      	mov	sl, r1
   317f0:	003c      	movs	r4, r7
   317f2:	4641      	mov	r1, r8
   317f4:	436c      	muls	r4, r5
   317f6:	434d      	muls	r5, r1
   317f8:	4651      	mov	r1, sl
   317fa:	444d      	add	r5, r9
   317fc:	0c0f      	lsrs	r7, r1, #16
   317fe:	197d      	adds	r5, r7, r5
   31800:	45a9      	cmp	r9, r5
   31802:	d903      	bls.n	3180c <__aeabi_dmul+0x2fc>
   31804:	2180      	movs	r1, #128	; 0x80
   31806:	0249      	lsls	r1, r1, #9
   31808:	4688      	mov	r8, r1
   3180a:	4444      	add	r4, r8
   3180c:	9f04      	ldr	r7, [sp, #16]
   3180e:	9903      	ldr	r1, [sp, #12]
   31810:	46b8      	mov	r8, r7
   31812:	4441      	add	r1, r8
   31814:	468b      	mov	fp, r1
   31816:	4583      	cmp	fp, r0
   31818:	4180      	sbcs	r0, r0
   3181a:	4241      	negs	r1, r0
   3181c:	4688      	mov	r8, r1
   3181e:	4651      	mov	r1, sl
   31820:	0408      	lsls	r0, r1, #16
   31822:	042f      	lsls	r7, r5, #16
   31824:	0c00      	lsrs	r0, r0, #16
   31826:	183f      	adds	r7, r7, r0
   31828:	4658      	mov	r0, fp
   3182a:	9902      	ldr	r1, [sp, #8]
   3182c:	1810      	adds	r0, r2, r0
   3182e:	4689      	mov	r9, r1
   31830:	4290      	cmp	r0, r2
   31832:	4192      	sbcs	r2, r2
   31834:	444f      	add	r7, r9
   31836:	46ba      	mov	sl, r7
   31838:	4252      	negs	r2, r2
   3183a:	4699      	mov	r9, r3
   3183c:	4693      	mov	fp, r2
   3183e:	44c2      	add	sl, r8
   31840:	44d1      	add	r9, sl
   31842:	44cb      	add	fp, r9
   31844:	428f      	cmp	r7, r1
   31846:	41bf      	sbcs	r7, r7
   31848:	45c2      	cmp	sl, r8
   3184a:	4189      	sbcs	r1, r1
   3184c:	4599      	cmp	r9, r3
   3184e:	419b      	sbcs	r3, r3
   31850:	4593      	cmp	fp, r2
   31852:	4192      	sbcs	r2, r2
   31854:	427f      	negs	r7, r7
   31856:	4249      	negs	r1, r1
   31858:	0c2d      	lsrs	r5, r5, #16
   3185a:	4252      	negs	r2, r2
   3185c:	430f      	orrs	r7, r1
   3185e:	425b      	negs	r3, r3
   31860:	4313      	orrs	r3, r2
   31862:	197f      	adds	r7, r7, r5
   31864:	18ff      	adds	r7, r7, r3
   31866:	465b      	mov	r3, fp
   31868:	193c      	adds	r4, r7, r4
   3186a:	0ddb      	lsrs	r3, r3, #23
   3186c:	9a05      	ldr	r2, [sp, #20]
   3186e:	0264      	lsls	r4, r4, #9
   31870:	431c      	orrs	r4, r3
   31872:	0243      	lsls	r3, r0, #9
   31874:	4313      	orrs	r3, r2
   31876:	1e5d      	subs	r5, r3, #1
   31878:	41ab      	sbcs	r3, r5
   3187a:	465a      	mov	r2, fp
   3187c:	0dc0      	lsrs	r0, r0, #23
   3187e:	4303      	orrs	r3, r0
   31880:	0252      	lsls	r2, r2, #9
   31882:	4313      	orrs	r3, r2
   31884:	01e2      	lsls	r2, r4, #7
   31886:	d556      	bpl.n	31936 <__aeabi_dmul+0x426>
   31888:	2001      	movs	r0, #1
   3188a:	085a      	lsrs	r2, r3, #1
   3188c:	4003      	ands	r3, r0
   3188e:	4313      	orrs	r3, r2
   31890:	07e2      	lsls	r2, r4, #31
   31892:	4313      	orrs	r3, r2
   31894:	0864      	lsrs	r4, r4, #1
   31896:	485a      	ldr	r0, [pc, #360]	; (31a00 <__aeabi_dmul+0x4f0>)
   31898:	4460      	add	r0, ip
   3189a:	2800      	cmp	r0, #0
   3189c:	dd4d      	ble.n	3193a <__aeabi_dmul+0x42a>
   3189e:	075a      	lsls	r2, r3, #29
   318a0:	d009      	beq.n	318b6 <__aeabi_dmul+0x3a6>
   318a2:	220f      	movs	r2, #15
   318a4:	401a      	ands	r2, r3
   318a6:	2a04      	cmp	r2, #4
   318a8:	d005      	beq.n	318b6 <__aeabi_dmul+0x3a6>
   318aa:	1d1a      	adds	r2, r3, #4
   318ac:	429a      	cmp	r2, r3
   318ae:	419b      	sbcs	r3, r3
   318b0:	425b      	negs	r3, r3
   318b2:	18e4      	adds	r4, r4, r3
   318b4:	0013      	movs	r3, r2
   318b6:	01e2      	lsls	r2, r4, #7
   318b8:	d504      	bpl.n	318c4 <__aeabi_dmul+0x3b4>
   318ba:	2080      	movs	r0, #128	; 0x80
   318bc:	4a51      	ldr	r2, [pc, #324]	; (31a04 <__aeabi_dmul+0x4f4>)
   318be:	00c0      	lsls	r0, r0, #3
   318c0:	4014      	ands	r4, r2
   318c2:	4460      	add	r0, ip
   318c4:	4a50      	ldr	r2, [pc, #320]	; (31a08 <__aeabi_dmul+0x4f8>)
   318c6:	4290      	cmp	r0, r2
   318c8:	dd00      	ble.n	318cc <__aeabi_dmul+0x3bc>
   318ca:	e6e3      	b.n	31694 <__aeabi_dmul+0x184>
   318cc:	2501      	movs	r5, #1
   318ce:	08db      	lsrs	r3, r3, #3
   318d0:	0762      	lsls	r2, r4, #29
   318d2:	431a      	orrs	r2, r3
   318d4:	0264      	lsls	r4, r4, #9
   318d6:	9b01      	ldr	r3, [sp, #4]
   318d8:	4691      	mov	r9, r2
   318da:	0b22      	lsrs	r2, r4, #12
   318dc:	0544      	lsls	r4, r0, #21
   318de:	0d64      	lsrs	r4, r4, #21
   318e0:	401d      	ands	r5, r3
   318e2:	e67c      	b.n	315de <__aeabi_dmul+0xce>
   318e4:	2280      	movs	r2, #128	; 0x80
   318e6:	4659      	mov	r1, fp
   318e8:	0312      	lsls	r2, r2, #12
   318ea:	4211      	tst	r1, r2
   318ec:	d008      	beq.n	31900 <__aeabi_dmul+0x3f0>
   318ee:	4214      	tst	r4, r2
   318f0:	d106      	bne.n	31900 <__aeabi_dmul+0x3f0>
   318f2:	4322      	orrs	r2, r4
   318f4:	0312      	lsls	r2, r2, #12
   318f6:	0b12      	lsrs	r2, r2, #12
   318f8:	4645      	mov	r5, r8
   318fa:	4699      	mov	r9, r3
   318fc:	4c43      	ldr	r4, [pc, #268]	; (31a0c <__aeabi_dmul+0x4fc>)
   318fe:	e66e      	b.n	315de <__aeabi_dmul+0xce>
   31900:	465b      	mov	r3, fp
   31902:	431a      	orrs	r2, r3
   31904:	0312      	lsls	r2, r2, #12
   31906:	0b12      	lsrs	r2, r2, #12
   31908:	4c40      	ldr	r4, [pc, #256]	; (31a0c <__aeabi_dmul+0x4fc>)
   3190a:	e668      	b.n	315de <__aeabi_dmul+0xce>
   3190c:	0003      	movs	r3, r0
   3190e:	4654      	mov	r4, sl
   31910:	3b28      	subs	r3, #40	; 0x28
   31912:	409c      	lsls	r4, r3
   31914:	2300      	movs	r3, #0
   31916:	e6b9      	b.n	3168c <__aeabi_dmul+0x17c>
   31918:	f000 fbfc 	bl	32114 <__clzsi2>
   3191c:	3020      	adds	r0, #32
   3191e:	e6a6      	b.n	3166e <__aeabi_dmul+0x15e>
   31920:	0003      	movs	r3, r0
   31922:	3b28      	subs	r3, #40	; 0x28
   31924:	409f      	lsls	r7, r3
   31926:	2300      	movs	r3, #0
   31928:	46bb      	mov	fp, r7
   3192a:	4699      	mov	r9, r3
   3192c:	e68a      	b.n	31644 <__aeabi_dmul+0x134>
   3192e:	f000 fbf1 	bl	32114 <__clzsi2>
   31932:	3020      	adds	r0, #32
   31934:	e674      	b.n	31620 <__aeabi_dmul+0x110>
   31936:	46b4      	mov	ip, r6
   31938:	e7ad      	b.n	31896 <__aeabi_dmul+0x386>
   3193a:	2501      	movs	r5, #1
   3193c:	1a2a      	subs	r2, r5, r0
   3193e:	2a38      	cmp	r2, #56	; 0x38
   31940:	dd06      	ble.n	31950 <__aeabi_dmul+0x440>
   31942:	9b01      	ldr	r3, [sp, #4]
   31944:	2400      	movs	r4, #0
   31946:	401d      	ands	r5, r3
   31948:	2300      	movs	r3, #0
   3194a:	2200      	movs	r2, #0
   3194c:	4699      	mov	r9, r3
   3194e:	e646      	b.n	315de <__aeabi_dmul+0xce>
   31950:	2a1f      	cmp	r2, #31
   31952:	dc21      	bgt.n	31998 <__aeabi_dmul+0x488>
   31954:	2520      	movs	r5, #32
   31956:	0020      	movs	r0, r4
   31958:	1aad      	subs	r5, r5, r2
   3195a:	001e      	movs	r6, r3
   3195c:	40ab      	lsls	r3, r5
   3195e:	40a8      	lsls	r0, r5
   31960:	40d6      	lsrs	r6, r2
   31962:	1e5d      	subs	r5, r3, #1
   31964:	41ab      	sbcs	r3, r5
   31966:	4330      	orrs	r0, r6
   31968:	4318      	orrs	r0, r3
   3196a:	40d4      	lsrs	r4, r2
   3196c:	0743      	lsls	r3, r0, #29
   3196e:	d009      	beq.n	31984 <__aeabi_dmul+0x474>
   31970:	230f      	movs	r3, #15
   31972:	4003      	ands	r3, r0
   31974:	2b04      	cmp	r3, #4
   31976:	d005      	beq.n	31984 <__aeabi_dmul+0x474>
   31978:	0003      	movs	r3, r0
   3197a:	1d18      	adds	r0, r3, #4
   3197c:	4298      	cmp	r0, r3
   3197e:	419b      	sbcs	r3, r3
   31980:	425b      	negs	r3, r3
   31982:	18e4      	adds	r4, r4, r3
   31984:	0223      	lsls	r3, r4, #8
   31986:	d521      	bpl.n	319cc <__aeabi_dmul+0x4bc>
   31988:	2501      	movs	r5, #1
   3198a:	9b01      	ldr	r3, [sp, #4]
   3198c:	2401      	movs	r4, #1
   3198e:	401d      	ands	r5, r3
   31990:	2300      	movs	r3, #0
   31992:	2200      	movs	r2, #0
   31994:	4699      	mov	r9, r3
   31996:	e622      	b.n	315de <__aeabi_dmul+0xce>
   31998:	251f      	movs	r5, #31
   3199a:	0021      	movs	r1, r4
   3199c:	426d      	negs	r5, r5
   3199e:	1a28      	subs	r0, r5, r0
   319a0:	40c1      	lsrs	r1, r0
   319a2:	0008      	movs	r0, r1
   319a4:	2a20      	cmp	r2, #32
   319a6:	d01d      	beq.n	319e4 <__aeabi_dmul+0x4d4>
   319a8:	355f      	adds	r5, #95	; 0x5f
   319aa:	1aaa      	subs	r2, r5, r2
   319ac:	4094      	lsls	r4, r2
   319ae:	4323      	orrs	r3, r4
   319b0:	1e5c      	subs	r4, r3, #1
   319b2:	41a3      	sbcs	r3, r4
   319b4:	2507      	movs	r5, #7
   319b6:	4303      	orrs	r3, r0
   319b8:	401d      	ands	r5, r3
   319ba:	2200      	movs	r2, #0
   319bc:	2d00      	cmp	r5, #0
   319be:	d009      	beq.n	319d4 <__aeabi_dmul+0x4c4>
   319c0:	220f      	movs	r2, #15
   319c2:	2400      	movs	r4, #0
   319c4:	401a      	ands	r2, r3
   319c6:	0018      	movs	r0, r3
   319c8:	2a04      	cmp	r2, #4
   319ca:	d1d6      	bne.n	3197a <__aeabi_dmul+0x46a>
   319cc:	0003      	movs	r3, r0
   319ce:	0765      	lsls	r5, r4, #29
   319d0:	0264      	lsls	r4, r4, #9
   319d2:	0b22      	lsrs	r2, r4, #12
   319d4:	08db      	lsrs	r3, r3, #3
   319d6:	432b      	orrs	r3, r5
   319d8:	2501      	movs	r5, #1
   319da:	4699      	mov	r9, r3
   319dc:	9b01      	ldr	r3, [sp, #4]
   319de:	2400      	movs	r4, #0
   319e0:	401d      	ands	r5, r3
   319e2:	e5fc      	b.n	315de <__aeabi_dmul+0xce>
   319e4:	2400      	movs	r4, #0
   319e6:	e7e2      	b.n	319ae <__aeabi_dmul+0x49e>
   319e8:	2280      	movs	r2, #128	; 0x80
   319ea:	2501      	movs	r5, #1
   319ec:	0312      	lsls	r2, r2, #12
   319ee:	4322      	orrs	r2, r4
   319f0:	9901      	ldr	r1, [sp, #4]
   319f2:	0312      	lsls	r2, r2, #12
   319f4:	0b12      	lsrs	r2, r2, #12
   319f6:	400d      	ands	r5, r1
   319f8:	4699      	mov	r9, r3
   319fa:	4c04      	ldr	r4, [pc, #16]	; (31a0c <__aeabi_dmul+0x4fc>)
   319fc:	e5ef      	b.n	315de <__aeabi_dmul+0xce>
   319fe:	46c0      	nop			; (mov r8, r8)
   31a00:	000003ff 	.word	0x000003ff
   31a04:	feffffff 	.word	0xfeffffff
   31a08:	000007fe 	.word	0x000007fe
   31a0c:	000007ff 	.word	0x000007ff

00031a10 <__aeabi_dsub>:
   31a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a12:	4646      	mov	r6, r8
   31a14:	46d6      	mov	lr, sl
   31a16:	464f      	mov	r7, r9
   31a18:	030c      	lsls	r4, r1, #12
   31a1a:	b5c0      	push	{r6, r7, lr}
   31a1c:	0fcd      	lsrs	r5, r1, #31
   31a1e:	004e      	lsls	r6, r1, #1
   31a20:	0a61      	lsrs	r1, r4, #9
   31a22:	0f44      	lsrs	r4, r0, #29
   31a24:	430c      	orrs	r4, r1
   31a26:	00c1      	lsls	r1, r0, #3
   31a28:	0058      	lsls	r0, r3, #1
   31a2a:	0d40      	lsrs	r0, r0, #21
   31a2c:	4684      	mov	ip, r0
   31a2e:	468a      	mov	sl, r1
   31a30:	000f      	movs	r7, r1
   31a32:	0319      	lsls	r1, r3, #12
   31a34:	0f50      	lsrs	r0, r2, #29
   31a36:	0a49      	lsrs	r1, r1, #9
   31a38:	4301      	orrs	r1, r0
   31a3a:	48c6      	ldr	r0, [pc, #792]	; (31d54 <__aeabi_dsub+0x344>)
   31a3c:	0d76      	lsrs	r6, r6, #21
   31a3e:	46a8      	mov	r8, r5
   31a40:	0fdb      	lsrs	r3, r3, #31
   31a42:	00d2      	lsls	r2, r2, #3
   31a44:	4584      	cmp	ip, r0
   31a46:	d100      	bne.n	31a4a <__aeabi_dsub+0x3a>
   31a48:	e0d8      	b.n	31bfc <__aeabi_dsub+0x1ec>
   31a4a:	2001      	movs	r0, #1
   31a4c:	4043      	eors	r3, r0
   31a4e:	42ab      	cmp	r3, r5
   31a50:	d100      	bne.n	31a54 <__aeabi_dsub+0x44>
   31a52:	e0a6      	b.n	31ba2 <__aeabi_dsub+0x192>
   31a54:	4660      	mov	r0, ip
   31a56:	1a35      	subs	r5, r6, r0
   31a58:	2d00      	cmp	r5, #0
   31a5a:	dc00      	bgt.n	31a5e <__aeabi_dsub+0x4e>
   31a5c:	e105      	b.n	31c6a <__aeabi_dsub+0x25a>
   31a5e:	2800      	cmp	r0, #0
   31a60:	d110      	bne.n	31a84 <__aeabi_dsub+0x74>
   31a62:	000b      	movs	r3, r1
   31a64:	4313      	orrs	r3, r2
   31a66:	d100      	bne.n	31a6a <__aeabi_dsub+0x5a>
   31a68:	e0d7      	b.n	31c1a <__aeabi_dsub+0x20a>
   31a6a:	1e6b      	subs	r3, r5, #1
   31a6c:	2b00      	cmp	r3, #0
   31a6e:	d000      	beq.n	31a72 <__aeabi_dsub+0x62>
   31a70:	e14b      	b.n	31d0a <__aeabi_dsub+0x2fa>
   31a72:	4653      	mov	r3, sl
   31a74:	1a9f      	subs	r7, r3, r2
   31a76:	45ba      	cmp	sl, r7
   31a78:	4180      	sbcs	r0, r0
   31a7a:	1a64      	subs	r4, r4, r1
   31a7c:	4240      	negs	r0, r0
   31a7e:	1a24      	subs	r4, r4, r0
   31a80:	2601      	movs	r6, #1
   31a82:	e01e      	b.n	31ac2 <__aeabi_dsub+0xb2>
   31a84:	4bb3      	ldr	r3, [pc, #716]	; (31d54 <__aeabi_dsub+0x344>)
   31a86:	429e      	cmp	r6, r3
   31a88:	d048      	beq.n	31b1c <__aeabi_dsub+0x10c>
   31a8a:	2380      	movs	r3, #128	; 0x80
   31a8c:	041b      	lsls	r3, r3, #16
   31a8e:	4319      	orrs	r1, r3
   31a90:	2d38      	cmp	r5, #56	; 0x38
   31a92:	dd00      	ble.n	31a96 <__aeabi_dsub+0x86>
   31a94:	e119      	b.n	31cca <__aeabi_dsub+0x2ba>
   31a96:	2d1f      	cmp	r5, #31
   31a98:	dd00      	ble.n	31a9c <__aeabi_dsub+0x8c>
   31a9a:	e14c      	b.n	31d36 <__aeabi_dsub+0x326>
   31a9c:	2320      	movs	r3, #32
   31a9e:	000f      	movs	r7, r1
   31aa0:	1b5b      	subs	r3, r3, r5
   31aa2:	0010      	movs	r0, r2
   31aa4:	409a      	lsls	r2, r3
   31aa6:	409f      	lsls	r7, r3
   31aa8:	40e8      	lsrs	r0, r5
   31aaa:	1e53      	subs	r3, r2, #1
   31aac:	419a      	sbcs	r2, r3
   31aae:	40e9      	lsrs	r1, r5
   31ab0:	4307      	orrs	r7, r0
   31ab2:	4317      	orrs	r7, r2
   31ab4:	4653      	mov	r3, sl
   31ab6:	1bdf      	subs	r7, r3, r7
   31ab8:	1a61      	subs	r1, r4, r1
   31aba:	45ba      	cmp	sl, r7
   31abc:	41a4      	sbcs	r4, r4
   31abe:	4264      	negs	r4, r4
   31ac0:	1b0c      	subs	r4, r1, r4
   31ac2:	0223      	lsls	r3, r4, #8
   31ac4:	d400      	bmi.n	31ac8 <__aeabi_dsub+0xb8>
   31ac6:	e0c5      	b.n	31c54 <__aeabi_dsub+0x244>
   31ac8:	0264      	lsls	r4, r4, #9
   31aca:	0a65      	lsrs	r5, r4, #9
   31acc:	2d00      	cmp	r5, #0
   31ace:	d100      	bne.n	31ad2 <__aeabi_dsub+0xc2>
   31ad0:	e0f6      	b.n	31cc0 <__aeabi_dsub+0x2b0>
   31ad2:	0028      	movs	r0, r5
   31ad4:	f000 fb1e 	bl	32114 <__clzsi2>
   31ad8:	0003      	movs	r3, r0
   31ada:	3b08      	subs	r3, #8
   31adc:	2b1f      	cmp	r3, #31
   31ade:	dd00      	ble.n	31ae2 <__aeabi_dsub+0xd2>
   31ae0:	e0e9      	b.n	31cb6 <__aeabi_dsub+0x2a6>
   31ae2:	2220      	movs	r2, #32
   31ae4:	003c      	movs	r4, r7
   31ae6:	1ad2      	subs	r2, r2, r3
   31ae8:	409d      	lsls	r5, r3
   31aea:	40d4      	lsrs	r4, r2
   31aec:	409f      	lsls	r7, r3
   31aee:	4325      	orrs	r5, r4
   31af0:	429e      	cmp	r6, r3
   31af2:	dd00      	ble.n	31af6 <__aeabi_dsub+0xe6>
   31af4:	e0db      	b.n	31cae <__aeabi_dsub+0x29e>
   31af6:	1b9e      	subs	r6, r3, r6
   31af8:	1c73      	adds	r3, r6, #1
   31afa:	2b1f      	cmp	r3, #31
   31afc:	dd00      	ble.n	31b00 <__aeabi_dsub+0xf0>
   31afe:	e10a      	b.n	31d16 <__aeabi_dsub+0x306>
   31b00:	2220      	movs	r2, #32
   31b02:	0038      	movs	r0, r7
   31b04:	1ad2      	subs	r2, r2, r3
   31b06:	0029      	movs	r1, r5
   31b08:	4097      	lsls	r7, r2
   31b0a:	002c      	movs	r4, r5
   31b0c:	4091      	lsls	r1, r2
   31b0e:	40d8      	lsrs	r0, r3
   31b10:	1e7a      	subs	r2, r7, #1
   31b12:	4197      	sbcs	r7, r2
   31b14:	40dc      	lsrs	r4, r3
   31b16:	2600      	movs	r6, #0
   31b18:	4301      	orrs	r1, r0
   31b1a:	430f      	orrs	r7, r1
   31b1c:	077b      	lsls	r3, r7, #29
   31b1e:	d009      	beq.n	31b34 <__aeabi_dsub+0x124>
   31b20:	230f      	movs	r3, #15
   31b22:	403b      	ands	r3, r7
   31b24:	2b04      	cmp	r3, #4
   31b26:	d005      	beq.n	31b34 <__aeabi_dsub+0x124>
   31b28:	1d3b      	adds	r3, r7, #4
   31b2a:	42bb      	cmp	r3, r7
   31b2c:	41bf      	sbcs	r7, r7
   31b2e:	427f      	negs	r7, r7
   31b30:	19e4      	adds	r4, r4, r7
   31b32:	001f      	movs	r7, r3
   31b34:	0223      	lsls	r3, r4, #8
   31b36:	d525      	bpl.n	31b84 <__aeabi_dsub+0x174>
   31b38:	4b86      	ldr	r3, [pc, #536]	; (31d54 <__aeabi_dsub+0x344>)
   31b3a:	3601      	adds	r6, #1
   31b3c:	429e      	cmp	r6, r3
   31b3e:	d100      	bne.n	31b42 <__aeabi_dsub+0x132>
   31b40:	e0af      	b.n	31ca2 <__aeabi_dsub+0x292>
   31b42:	4b85      	ldr	r3, [pc, #532]	; (31d58 <__aeabi_dsub+0x348>)
   31b44:	2501      	movs	r5, #1
   31b46:	401c      	ands	r4, r3
   31b48:	4643      	mov	r3, r8
   31b4a:	0762      	lsls	r2, r4, #29
   31b4c:	08ff      	lsrs	r7, r7, #3
   31b4e:	0264      	lsls	r4, r4, #9
   31b50:	0576      	lsls	r6, r6, #21
   31b52:	4317      	orrs	r7, r2
   31b54:	0b24      	lsrs	r4, r4, #12
   31b56:	0d76      	lsrs	r6, r6, #21
   31b58:	401d      	ands	r5, r3
   31b5a:	2100      	movs	r1, #0
   31b5c:	0324      	lsls	r4, r4, #12
   31b5e:	0b23      	lsrs	r3, r4, #12
   31b60:	0d0c      	lsrs	r4, r1, #20
   31b62:	4a7e      	ldr	r2, [pc, #504]	; (31d5c <__aeabi_dsub+0x34c>)
   31b64:	0524      	lsls	r4, r4, #20
   31b66:	431c      	orrs	r4, r3
   31b68:	4014      	ands	r4, r2
   31b6a:	0533      	lsls	r3, r6, #20
   31b6c:	4323      	orrs	r3, r4
   31b6e:	005b      	lsls	r3, r3, #1
   31b70:	07ed      	lsls	r5, r5, #31
   31b72:	085b      	lsrs	r3, r3, #1
   31b74:	432b      	orrs	r3, r5
   31b76:	0038      	movs	r0, r7
   31b78:	0019      	movs	r1, r3
   31b7a:	bc1c      	pop	{r2, r3, r4}
   31b7c:	4690      	mov	r8, r2
   31b7e:	4699      	mov	r9, r3
   31b80:	46a2      	mov	sl, r4
   31b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b84:	2501      	movs	r5, #1
   31b86:	4643      	mov	r3, r8
   31b88:	0762      	lsls	r2, r4, #29
   31b8a:	08ff      	lsrs	r7, r7, #3
   31b8c:	4317      	orrs	r7, r2
   31b8e:	08e4      	lsrs	r4, r4, #3
   31b90:	401d      	ands	r5, r3
   31b92:	4b70      	ldr	r3, [pc, #448]	; (31d54 <__aeabi_dsub+0x344>)
   31b94:	429e      	cmp	r6, r3
   31b96:	d036      	beq.n	31c06 <__aeabi_dsub+0x1f6>
   31b98:	0324      	lsls	r4, r4, #12
   31b9a:	0576      	lsls	r6, r6, #21
   31b9c:	0b24      	lsrs	r4, r4, #12
   31b9e:	0d76      	lsrs	r6, r6, #21
   31ba0:	e7db      	b.n	31b5a <__aeabi_dsub+0x14a>
   31ba2:	4663      	mov	r3, ip
   31ba4:	1af3      	subs	r3, r6, r3
   31ba6:	2b00      	cmp	r3, #0
   31ba8:	dc00      	bgt.n	31bac <__aeabi_dsub+0x19c>
   31baa:	e094      	b.n	31cd6 <__aeabi_dsub+0x2c6>
   31bac:	4660      	mov	r0, ip
   31bae:	2800      	cmp	r0, #0
   31bb0:	d035      	beq.n	31c1e <__aeabi_dsub+0x20e>
   31bb2:	4868      	ldr	r0, [pc, #416]	; (31d54 <__aeabi_dsub+0x344>)
   31bb4:	4286      	cmp	r6, r0
   31bb6:	d0b1      	beq.n	31b1c <__aeabi_dsub+0x10c>
   31bb8:	2780      	movs	r7, #128	; 0x80
   31bba:	043f      	lsls	r7, r7, #16
   31bbc:	4339      	orrs	r1, r7
   31bbe:	2b38      	cmp	r3, #56	; 0x38
   31bc0:	dc00      	bgt.n	31bc4 <__aeabi_dsub+0x1b4>
   31bc2:	e0fd      	b.n	31dc0 <__aeabi_dsub+0x3b0>
   31bc4:	430a      	orrs	r2, r1
   31bc6:	0017      	movs	r7, r2
   31bc8:	2100      	movs	r1, #0
   31bca:	1e7a      	subs	r2, r7, #1
   31bcc:	4197      	sbcs	r7, r2
   31bce:	4457      	add	r7, sl
   31bd0:	4557      	cmp	r7, sl
   31bd2:	4180      	sbcs	r0, r0
   31bd4:	1909      	adds	r1, r1, r4
   31bd6:	4244      	negs	r4, r0
   31bd8:	190c      	adds	r4, r1, r4
   31bda:	0223      	lsls	r3, r4, #8
   31bdc:	d53a      	bpl.n	31c54 <__aeabi_dsub+0x244>
   31bde:	4b5d      	ldr	r3, [pc, #372]	; (31d54 <__aeabi_dsub+0x344>)
   31be0:	3601      	adds	r6, #1
   31be2:	429e      	cmp	r6, r3
   31be4:	d100      	bne.n	31be8 <__aeabi_dsub+0x1d8>
   31be6:	e14b      	b.n	31e80 <__aeabi_dsub+0x470>
   31be8:	2201      	movs	r2, #1
   31bea:	4b5b      	ldr	r3, [pc, #364]	; (31d58 <__aeabi_dsub+0x348>)
   31bec:	401c      	ands	r4, r3
   31bee:	087b      	lsrs	r3, r7, #1
   31bf0:	4017      	ands	r7, r2
   31bf2:	431f      	orrs	r7, r3
   31bf4:	07e2      	lsls	r2, r4, #31
   31bf6:	4317      	orrs	r7, r2
   31bf8:	0864      	lsrs	r4, r4, #1
   31bfa:	e78f      	b.n	31b1c <__aeabi_dsub+0x10c>
   31bfc:	0008      	movs	r0, r1
   31bfe:	4310      	orrs	r0, r2
   31c00:	d000      	beq.n	31c04 <__aeabi_dsub+0x1f4>
   31c02:	e724      	b.n	31a4e <__aeabi_dsub+0x3e>
   31c04:	e721      	b.n	31a4a <__aeabi_dsub+0x3a>
   31c06:	0023      	movs	r3, r4
   31c08:	433b      	orrs	r3, r7
   31c0a:	d100      	bne.n	31c0e <__aeabi_dsub+0x1fe>
   31c0c:	e1b9      	b.n	31f82 <__aeabi_dsub+0x572>
   31c0e:	2280      	movs	r2, #128	; 0x80
   31c10:	0312      	lsls	r2, r2, #12
   31c12:	4314      	orrs	r4, r2
   31c14:	0324      	lsls	r4, r4, #12
   31c16:	0b24      	lsrs	r4, r4, #12
   31c18:	e79f      	b.n	31b5a <__aeabi_dsub+0x14a>
   31c1a:	002e      	movs	r6, r5
   31c1c:	e77e      	b.n	31b1c <__aeabi_dsub+0x10c>
   31c1e:	0008      	movs	r0, r1
   31c20:	4310      	orrs	r0, r2
   31c22:	d100      	bne.n	31c26 <__aeabi_dsub+0x216>
   31c24:	e0ca      	b.n	31dbc <__aeabi_dsub+0x3ac>
   31c26:	1e58      	subs	r0, r3, #1
   31c28:	4684      	mov	ip, r0
   31c2a:	2800      	cmp	r0, #0
   31c2c:	d000      	beq.n	31c30 <__aeabi_dsub+0x220>
   31c2e:	e0e7      	b.n	31e00 <__aeabi_dsub+0x3f0>
   31c30:	4452      	add	r2, sl
   31c32:	4552      	cmp	r2, sl
   31c34:	4180      	sbcs	r0, r0
   31c36:	1864      	adds	r4, r4, r1
   31c38:	4240      	negs	r0, r0
   31c3a:	1824      	adds	r4, r4, r0
   31c3c:	0017      	movs	r7, r2
   31c3e:	2601      	movs	r6, #1
   31c40:	0223      	lsls	r3, r4, #8
   31c42:	d507      	bpl.n	31c54 <__aeabi_dsub+0x244>
   31c44:	2602      	movs	r6, #2
   31c46:	e7cf      	b.n	31be8 <__aeabi_dsub+0x1d8>
   31c48:	4664      	mov	r4, ip
   31c4a:	432c      	orrs	r4, r5
   31c4c:	d100      	bne.n	31c50 <__aeabi_dsub+0x240>
   31c4e:	e1b3      	b.n	31fb8 <__aeabi_dsub+0x5a8>
   31c50:	002c      	movs	r4, r5
   31c52:	4667      	mov	r7, ip
   31c54:	077b      	lsls	r3, r7, #29
   31c56:	d000      	beq.n	31c5a <__aeabi_dsub+0x24a>
   31c58:	e762      	b.n	31b20 <__aeabi_dsub+0x110>
   31c5a:	0763      	lsls	r3, r4, #29
   31c5c:	08ff      	lsrs	r7, r7, #3
   31c5e:	431f      	orrs	r7, r3
   31c60:	2501      	movs	r5, #1
   31c62:	4643      	mov	r3, r8
   31c64:	08e4      	lsrs	r4, r4, #3
   31c66:	401d      	ands	r5, r3
   31c68:	e793      	b.n	31b92 <__aeabi_dsub+0x182>
   31c6a:	2d00      	cmp	r5, #0
   31c6c:	d178      	bne.n	31d60 <__aeabi_dsub+0x350>
   31c6e:	1c75      	adds	r5, r6, #1
   31c70:	056d      	lsls	r5, r5, #21
   31c72:	0d6d      	lsrs	r5, r5, #21
   31c74:	2d01      	cmp	r5, #1
   31c76:	dc00      	bgt.n	31c7a <__aeabi_dsub+0x26a>
   31c78:	e0f2      	b.n	31e60 <__aeabi_dsub+0x450>
   31c7a:	4650      	mov	r0, sl
   31c7c:	1a80      	subs	r0, r0, r2
   31c7e:	4582      	cmp	sl, r0
   31c80:	41bf      	sbcs	r7, r7
   31c82:	1a65      	subs	r5, r4, r1
   31c84:	427f      	negs	r7, r7
   31c86:	1bed      	subs	r5, r5, r7
   31c88:	4684      	mov	ip, r0
   31c8a:	0228      	lsls	r0, r5, #8
   31c8c:	d400      	bmi.n	31c90 <__aeabi_dsub+0x280>
   31c8e:	e08c      	b.n	31daa <__aeabi_dsub+0x39a>
   31c90:	4650      	mov	r0, sl
   31c92:	1a17      	subs	r7, r2, r0
   31c94:	42ba      	cmp	r2, r7
   31c96:	4192      	sbcs	r2, r2
   31c98:	1b0c      	subs	r4, r1, r4
   31c9a:	4255      	negs	r5, r2
   31c9c:	1b65      	subs	r5, r4, r5
   31c9e:	4698      	mov	r8, r3
   31ca0:	e714      	b.n	31acc <__aeabi_dsub+0xbc>
   31ca2:	2501      	movs	r5, #1
   31ca4:	4643      	mov	r3, r8
   31ca6:	2400      	movs	r4, #0
   31ca8:	401d      	ands	r5, r3
   31caa:	2700      	movs	r7, #0
   31cac:	e755      	b.n	31b5a <__aeabi_dsub+0x14a>
   31cae:	4c2a      	ldr	r4, [pc, #168]	; (31d58 <__aeabi_dsub+0x348>)
   31cb0:	1af6      	subs	r6, r6, r3
   31cb2:	402c      	ands	r4, r5
   31cb4:	e732      	b.n	31b1c <__aeabi_dsub+0x10c>
   31cb6:	003d      	movs	r5, r7
   31cb8:	3828      	subs	r0, #40	; 0x28
   31cba:	4085      	lsls	r5, r0
   31cbc:	2700      	movs	r7, #0
   31cbe:	e717      	b.n	31af0 <__aeabi_dsub+0xe0>
   31cc0:	0038      	movs	r0, r7
   31cc2:	f000 fa27 	bl	32114 <__clzsi2>
   31cc6:	3020      	adds	r0, #32
   31cc8:	e706      	b.n	31ad8 <__aeabi_dsub+0xc8>
   31cca:	430a      	orrs	r2, r1
   31ccc:	0017      	movs	r7, r2
   31cce:	2100      	movs	r1, #0
   31cd0:	1e7a      	subs	r2, r7, #1
   31cd2:	4197      	sbcs	r7, r2
   31cd4:	e6ee      	b.n	31ab4 <__aeabi_dsub+0xa4>
   31cd6:	2b00      	cmp	r3, #0
   31cd8:	d000      	beq.n	31cdc <__aeabi_dsub+0x2cc>
   31cda:	e0e5      	b.n	31ea8 <__aeabi_dsub+0x498>
   31cdc:	1c73      	adds	r3, r6, #1
   31cde:	469c      	mov	ip, r3
   31ce0:	055b      	lsls	r3, r3, #21
   31ce2:	0d5b      	lsrs	r3, r3, #21
   31ce4:	2b01      	cmp	r3, #1
   31ce6:	dc00      	bgt.n	31cea <__aeabi_dsub+0x2da>
   31ce8:	e09f      	b.n	31e2a <__aeabi_dsub+0x41a>
   31cea:	4b1a      	ldr	r3, [pc, #104]	; (31d54 <__aeabi_dsub+0x344>)
   31cec:	459c      	cmp	ip, r3
   31cee:	d100      	bne.n	31cf2 <__aeabi_dsub+0x2e2>
   31cf0:	e0c5      	b.n	31e7e <__aeabi_dsub+0x46e>
   31cf2:	4452      	add	r2, sl
   31cf4:	4552      	cmp	r2, sl
   31cf6:	4180      	sbcs	r0, r0
   31cf8:	1864      	adds	r4, r4, r1
   31cfa:	4240      	negs	r0, r0
   31cfc:	1824      	adds	r4, r4, r0
   31cfe:	07e7      	lsls	r7, r4, #31
   31d00:	0852      	lsrs	r2, r2, #1
   31d02:	4317      	orrs	r7, r2
   31d04:	0864      	lsrs	r4, r4, #1
   31d06:	4666      	mov	r6, ip
   31d08:	e708      	b.n	31b1c <__aeabi_dsub+0x10c>
   31d0a:	4812      	ldr	r0, [pc, #72]	; (31d54 <__aeabi_dsub+0x344>)
   31d0c:	4285      	cmp	r5, r0
   31d0e:	d100      	bne.n	31d12 <__aeabi_dsub+0x302>
   31d10:	e085      	b.n	31e1e <__aeabi_dsub+0x40e>
   31d12:	001d      	movs	r5, r3
   31d14:	e6bc      	b.n	31a90 <__aeabi_dsub+0x80>
   31d16:	0029      	movs	r1, r5
   31d18:	3e1f      	subs	r6, #31
   31d1a:	40f1      	lsrs	r1, r6
   31d1c:	2b20      	cmp	r3, #32
   31d1e:	d100      	bne.n	31d22 <__aeabi_dsub+0x312>
   31d20:	e07f      	b.n	31e22 <__aeabi_dsub+0x412>
   31d22:	2240      	movs	r2, #64	; 0x40
   31d24:	1ad3      	subs	r3, r2, r3
   31d26:	409d      	lsls	r5, r3
   31d28:	432f      	orrs	r7, r5
   31d2a:	1e7d      	subs	r5, r7, #1
   31d2c:	41af      	sbcs	r7, r5
   31d2e:	2400      	movs	r4, #0
   31d30:	430f      	orrs	r7, r1
   31d32:	2600      	movs	r6, #0
   31d34:	e78e      	b.n	31c54 <__aeabi_dsub+0x244>
   31d36:	002b      	movs	r3, r5
   31d38:	000f      	movs	r7, r1
   31d3a:	3b20      	subs	r3, #32
   31d3c:	40df      	lsrs	r7, r3
   31d3e:	2d20      	cmp	r5, #32
   31d40:	d071      	beq.n	31e26 <__aeabi_dsub+0x416>
   31d42:	2340      	movs	r3, #64	; 0x40
   31d44:	1b5d      	subs	r5, r3, r5
   31d46:	40a9      	lsls	r1, r5
   31d48:	430a      	orrs	r2, r1
   31d4a:	1e51      	subs	r1, r2, #1
   31d4c:	418a      	sbcs	r2, r1
   31d4e:	2100      	movs	r1, #0
   31d50:	4317      	orrs	r7, r2
   31d52:	e6af      	b.n	31ab4 <__aeabi_dsub+0xa4>
   31d54:	000007ff 	.word	0x000007ff
   31d58:	ff7fffff 	.word	0xff7fffff
   31d5c:	800fffff 	.word	0x800fffff
   31d60:	2e00      	cmp	r6, #0
   31d62:	d03e      	beq.n	31de2 <__aeabi_dsub+0x3d2>
   31d64:	4eb3      	ldr	r6, [pc, #716]	; (32034 <__aeabi_dsub+0x624>)
   31d66:	45b4      	cmp	ip, r6
   31d68:	d045      	beq.n	31df6 <__aeabi_dsub+0x3e6>
   31d6a:	2680      	movs	r6, #128	; 0x80
   31d6c:	0436      	lsls	r6, r6, #16
   31d6e:	426d      	negs	r5, r5
   31d70:	4334      	orrs	r4, r6
   31d72:	2d38      	cmp	r5, #56	; 0x38
   31d74:	dd00      	ble.n	31d78 <__aeabi_dsub+0x368>
   31d76:	e0a8      	b.n	31eca <__aeabi_dsub+0x4ba>
   31d78:	2d1f      	cmp	r5, #31
   31d7a:	dd00      	ble.n	31d7e <__aeabi_dsub+0x36e>
   31d7c:	e11f      	b.n	31fbe <__aeabi_dsub+0x5ae>
   31d7e:	2620      	movs	r6, #32
   31d80:	0027      	movs	r7, r4
   31d82:	4650      	mov	r0, sl
   31d84:	1b76      	subs	r6, r6, r5
   31d86:	40b7      	lsls	r7, r6
   31d88:	40e8      	lsrs	r0, r5
   31d8a:	4307      	orrs	r7, r0
   31d8c:	4650      	mov	r0, sl
   31d8e:	40b0      	lsls	r0, r6
   31d90:	1e46      	subs	r6, r0, #1
   31d92:	41b0      	sbcs	r0, r6
   31d94:	40ec      	lsrs	r4, r5
   31d96:	4338      	orrs	r0, r7
   31d98:	1a17      	subs	r7, r2, r0
   31d9a:	42ba      	cmp	r2, r7
   31d9c:	4192      	sbcs	r2, r2
   31d9e:	1b0c      	subs	r4, r1, r4
   31da0:	4252      	negs	r2, r2
   31da2:	1aa4      	subs	r4, r4, r2
   31da4:	4666      	mov	r6, ip
   31da6:	4698      	mov	r8, r3
   31da8:	e68b      	b.n	31ac2 <__aeabi_dsub+0xb2>
   31daa:	4664      	mov	r4, ip
   31dac:	4667      	mov	r7, ip
   31dae:	432c      	orrs	r4, r5
   31db0:	d000      	beq.n	31db4 <__aeabi_dsub+0x3a4>
   31db2:	e68b      	b.n	31acc <__aeabi_dsub+0xbc>
   31db4:	2500      	movs	r5, #0
   31db6:	2600      	movs	r6, #0
   31db8:	2700      	movs	r7, #0
   31dba:	e6ea      	b.n	31b92 <__aeabi_dsub+0x182>
   31dbc:	001e      	movs	r6, r3
   31dbe:	e6ad      	b.n	31b1c <__aeabi_dsub+0x10c>
   31dc0:	2b1f      	cmp	r3, #31
   31dc2:	dc60      	bgt.n	31e86 <__aeabi_dsub+0x476>
   31dc4:	2720      	movs	r7, #32
   31dc6:	1af8      	subs	r0, r7, r3
   31dc8:	000f      	movs	r7, r1
   31dca:	4684      	mov	ip, r0
   31dcc:	4087      	lsls	r7, r0
   31dce:	0010      	movs	r0, r2
   31dd0:	40d8      	lsrs	r0, r3
   31dd2:	4307      	orrs	r7, r0
   31dd4:	4660      	mov	r0, ip
   31dd6:	4082      	lsls	r2, r0
   31dd8:	1e50      	subs	r0, r2, #1
   31dda:	4182      	sbcs	r2, r0
   31ddc:	40d9      	lsrs	r1, r3
   31dde:	4317      	orrs	r7, r2
   31de0:	e6f5      	b.n	31bce <__aeabi_dsub+0x1be>
   31de2:	0026      	movs	r6, r4
   31de4:	4650      	mov	r0, sl
   31de6:	4306      	orrs	r6, r0
   31de8:	d005      	beq.n	31df6 <__aeabi_dsub+0x3e6>
   31dea:	43ed      	mvns	r5, r5
   31dec:	2d00      	cmp	r5, #0
   31dee:	d0d3      	beq.n	31d98 <__aeabi_dsub+0x388>
   31df0:	4e90      	ldr	r6, [pc, #576]	; (32034 <__aeabi_dsub+0x624>)
   31df2:	45b4      	cmp	ip, r6
   31df4:	d1bd      	bne.n	31d72 <__aeabi_dsub+0x362>
   31df6:	000c      	movs	r4, r1
   31df8:	0017      	movs	r7, r2
   31dfa:	4666      	mov	r6, ip
   31dfc:	4698      	mov	r8, r3
   31dfe:	e68d      	b.n	31b1c <__aeabi_dsub+0x10c>
   31e00:	488c      	ldr	r0, [pc, #560]	; (32034 <__aeabi_dsub+0x624>)
   31e02:	4283      	cmp	r3, r0
   31e04:	d00b      	beq.n	31e1e <__aeabi_dsub+0x40e>
   31e06:	4663      	mov	r3, ip
   31e08:	e6d9      	b.n	31bbe <__aeabi_dsub+0x1ae>
   31e0a:	2d00      	cmp	r5, #0
   31e0c:	d000      	beq.n	31e10 <__aeabi_dsub+0x400>
   31e0e:	e096      	b.n	31f3e <__aeabi_dsub+0x52e>
   31e10:	0008      	movs	r0, r1
   31e12:	4310      	orrs	r0, r2
   31e14:	d100      	bne.n	31e18 <__aeabi_dsub+0x408>
   31e16:	e0e2      	b.n	31fde <__aeabi_dsub+0x5ce>
   31e18:	000c      	movs	r4, r1
   31e1a:	0017      	movs	r7, r2
   31e1c:	4698      	mov	r8, r3
   31e1e:	4e85      	ldr	r6, [pc, #532]	; (32034 <__aeabi_dsub+0x624>)
   31e20:	e67c      	b.n	31b1c <__aeabi_dsub+0x10c>
   31e22:	2500      	movs	r5, #0
   31e24:	e780      	b.n	31d28 <__aeabi_dsub+0x318>
   31e26:	2100      	movs	r1, #0
   31e28:	e78e      	b.n	31d48 <__aeabi_dsub+0x338>
   31e2a:	0023      	movs	r3, r4
   31e2c:	4650      	mov	r0, sl
   31e2e:	4303      	orrs	r3, r0
   31e30:	2e00      	cmp	r6, #0
   31e32:	d000      	beq.n	31e36 <__aeabi_dsub+0x426>
   31e34:	e0a8      	b.n	31f88 <__aeabi_dsub+0x578>
   31e36:	2b00      	cmp	r3, #0
   31e38:	d100      	bne.n	31e3c <__aeabi_dsub+0x42c>
   31e3a:	e0de      	b.n	31ffa <__aeabi_dsub+0x5ea>
   31e3c:	000b      	movs	r3, r1
   31e3e:	4313      	orrs	r3, r2
   31e40:	d100      	bne.n	31e44 <__aeabi_dsub+0x434>
   31e42:	e66b      	b.n	31b1c <__aeabi_dsub+0x10c>
   31e44:	4452      	add	r2, sl
   31e46:	4552      	cmp	r2, sl
   31e48:	4180      	sbcs	r0, r0
   31e4a:	1864      	adds	r4, r4, r1
   31e4c:	4240      	negs	r0, r0
   31e4e:	1824      	adds	r4, r4, r0
   31e50:	0017      	movs	r7, r2
   31e52:	0223      	lsls	r3, r4, #8
   31e54:	d400      	bmi.n	31e58 <__aeabi_dsub+0x448>
   31e56:	e6fd      	b.n	31c54 <__aeabi_dsub+0x244>
   31e58:	4b77      	ldr	r3, [pc, #476]	; (32038 <__aeabi_dsub+0x628>)
   31e5a:	4666      	mov	r6, ip
   31e5c:	401c      	ands	r4, r3
   31e5e:	e65d      	b.n	31b1c <__aeabi_dsub+0x10c>
   31e60:	0025      	movs	r5, r4
   31e62:	4650      	mov	r0, sl
   31e64:	4305      	orrs	r5, r0
   31e66:	2e00      	cmp	r6, #0
   31e68:	d1cf      	bne.n	31e0a <__aeabi_dsub+0x3fa>
   31e6a:	2d00      	cmp	r5, #0
   31e6c:	d14f      	bne.n	31f0e <__aeabi_dsub+0x4fe>
   31e6e:	000c      	movs	r4, r1
   31e70:	4314      	orrs	r4, r2
   31e72:	d100      	bne.n	31e76 <__aeabi_dsub+0x466>
   31e74:	e0a0      	b.n	31fb8 <__aeabi_dsub+0x5a8>
   31e76:	000c      	movs	r4, r1
   31e78:	0017      	movs	r7, r2
   31e7a:	4698      	mov	r8, r3
   31e7c:	e64e      	b.n	31b1c <__aeabi_dsub+0x10c>
   31e7e:	4666      	mov	r6, ip
   31e80:	2400      	movs	r4, #0
   31e82:	2700      	movs	r7, #0
   31e84:	e685      	b.n	31b92 <__aeabi_dsub+0x182>
   31e86:	001f      	movs	r7, r3
   31e88:	0008      	movs	r0, r1
   31e8a:	3f20      	subs	r7, #32
   31e8c:	40f8      	lsrs	r0, r7
   31e8e:	0007      	movs	r7, r0
   31e90:	2b20      	cmp	r3, #32
   31e92:	d100      	bne.n	31e96 <__aeabi_dsub+0x486>
   31e94:	e08e      	b.n	31fb4 <__aeabi_dsub+0x5a4>
   31e96:	2040      	movs	r0, #64	; 0x40
   31e98:	1ac3      	subs	r3, r0, r3
   31e9a:	4099      	lsls	r1, r3
   31e9c:	430a      	orrs	r2, r1
   31e9e:	1e51      	subs	r1, r2, #1
   31ea0:	418a      	sbcs	r2, r1
   31ea2:	2100      	movs	r1, #0
   31ea4:	4317      	orrs	r7, r2
   31ea6:	e692      	b.n	31bce <__aeabi_dsub+0x1be>
   31ea8:	2e00      	cmp	r6, #0
   31eaa:	d114      	bne.n	31ed6 <__aeabi_dsub+0x4c6>
   31eac:	0026      	movs	r6, r4
   31eae:	4650      	mov	r0, sl
   31eb0:	4306      	orrs	r6, r0
   31eb2:	d062      	beq.n	31f7a <__aeabi_dsub+0x56a>
   31eb4:	43db      	mvns	r3, r3
   31eb6:	2b00      	cmp	r3, #0
   31eb8:	d15c      	bne.n	31f74 <__aeabi_dsub+0x564>
   31eba:	1887      	adds	r7, r0, r2
   31ebc:	4297      	cmp	r7, r2
   31ebe:	4192      	sbcs	r2, r2
   31ec0:	1864      	adds	r4, r4, r1
   31ec2:	4252      	negs	r2, r2
   31ec4:	18a4      	adds	r4, r4, r2
   31ec6:	4666      	mov	r6, ip
   31ec8:	e687      	b.n	31bda <__aeabi_dsub+0x1ca>
   31eca:	4650      	mov	r0, sl
   31ecc:	4320      	orrs	r0, r4
   31ece:	1e44      	subs	r4, r0, #1
   31ed0:	41a0      	sbcs	r0, r4
   31ed2:	2400      	movs	r4, #0
   31ed4:	e760      	b.n	31d98 <__aeabi_dsub+0x388>
   31ed6:	4e57      	ldr	r6, [pc, #348]	; (32034 <__aeabi_dsub+0x624>)
   31ed8:	45b4      	cmp	ip, r6
   31eda:	d04e      	beq.n	31f7a <__aeabi_dsub+0x56a>
   31edc:	2680      	movs	r6, #128	; 0x80
   31ede:	0436      	lsls	r6, r6, #16
   31ee0:	425b      	negs	r3, r3
   31ee2:	4334      	orrs	r4, r6
   31ee4:	2b38      	cmp	r3, #56	; 0x38
   31ee6:	dd00      	ble.n	31eea <__aeabi_dsub+0x4da>
   31ee8:	e07f      	b.n	31fea <__aeabi_dsub+0x5da>
   31eea:	2b1f      	cmp	r3, #31
   31eec:	dd00      	ble.n	31ef0 <__aeabi_dsub+0x4e0>
   31eee:	e08b      	b.n	32008 <__aeabi_dsub+0x5f8>
   31ef0:	2620      	movs	r6, #32
   31ef2:	0027      	movs	r7, r4
   31ef4:	4650      	mov	r0, sl
   31ef6:	1af6      	subs	r6, r6, r3
   31ef8:	40b7      	lsls	r7, r6
   31efa:	40d8      	lsrs	r0, r3
   31efc:	4307      	orrs	r7, r0
   31efe:	4650      	mov	r0, sl
   31f00:	40b0      	lsls	r0, r6
   31f02:	1e46      	subs	r6, r0, #1
   31f04:	41b0      	sbcs	r0, r6
   31f06:	4307      	orrs	r7, r0
   31f08:	40dc      	lsrs	r4, r3
   31f0a:	18bf      	adds	r7, r7, r2
   31f0c:	e7d6      	b.n	31ebc <__aeabi_dsub+0x4ac>
   31f0e:	000d      	movs	r5, r1
   31f10:	4315      	orrs	r5, r2
   31f12:	d100      	bne.n	31f16 <__aeabi_dsub+0x506>
   31f14:	e602      	b.n	31b1c <__aeabi_dsub+0x10c>
   31f16:	4650      	mov	r0, sl
   31f18:	1a80      	subs	r0, r0, r2
   31f1a:	4582      	cmp	sl, r0
   31f1c:	41bf      	sbcs	r7, r7
   31f1e:	1a65      	subs	r5, r4, r1
   31f20:	427f      	negs	r7, r7
   31f22:	1bed      	subs	r5, r5, r7
   31f24:	4684      	mov	ip, r0
   31f26:	0228      	lsls	r0, r5, #8
   31f28:	d400      	bmi.n	31f2c <__aeabi_dsub+0x51c>
   31f2a:	e68d      	b.n	31c48 <__aeabi_dsub+0x238>
   31f2c:	4650      	mov	r0, sl
   31f2e:	1a17      	subs	r7, r2, r0
   31f30:	42ba      	cmp	r2, r7
   31f32:	4192      	sbcs	r2, r2
   31f34:	1b0c      	subs	r4, r1, r4
   31f36:	4252      	negs	r2, r2
   31f38:	1aa4      	subs	r4, r4, r2
   31f3a:	4698      	mov	r8, r3
   31f3c:	e5ee      	b.n	31b1c <__aeabi_dsub+0x10c>
   31f3e:	000d      	movs	r5, r1
   31f40:	4315      	orrs	r5, r2
   31f42:	d100      	bne.n	31f46 <__aeabi_dsub+0x536>
   31f44:	e76b      	b.n	31e1e <__aeabi_dsub+0x40e>
   31f46:	4650      	mov	r0, sl
   31f48:	0767      	lsls	r7, r4, #29
   31f4a:	08c0      	lsrs	r0, r0, #3
   31f4c:	4307      	orrs	r7, r0
   31f4e:	2080      	movs	r0, #128	; 0x80
   31f50:	08e4      	lsrs	r4, r4, #3
   31f52:	0300      	lsls	r0, r0, #12
   31f54:	4204      	tst	r4, r0
   31f56:	d007      	beq.n	31f68 <__aeabi_dsub+0x558>
   31f58:	08cd      	lsrs	r5, r1, #3
   31f5a:	4205      	tst	r5, r0
   31f5c:	d104      	bne.n	31f68 <__aeabi_dsub+0x558>
   31f5e:	002c      	movs	r4, r5
   31f60:	4698      	mov	r8, r3
   31f62:	08d7      	lsrs	r7, r2, #3
   31f64:	0749      	lsls	r1, r1, #29
   31f66:	430f      	orrs	r7, r1
   31f68:	0f7b      	lsrs	r3, r7, #29
   31f6a:	00e4      	lsls	r4, r4, #3
   31f6c:	431c      	orrs	r4, r3
   31f6e:	00ff      	lsls	r7, r7, #3
   31f70:	4e30      	ldr	r6, [pc, #192]	; (32034 <__aeabi_dsub+0x624>)
   31f72:	e5d3      	b.n	31b1c <__aeabi_dsub+0x10c>
   31f74:	4e2f      	ldr	r6, [pc, #188]	; (32034 <__aeabi_dsub+0x624>)
   31f76:	45b4      	cmp	ip, r6
   31f78:	d1b4      	bne.n	31ee4 <__aeabi_dsub+0x4d4>
   31f7a:	000c      	movs	r4, r1
   31f7c:	0017      	movs	r7, r2
   31f7e:	4666      	mov	r6, ip
   31f80:	e5cc      	b.n	31b1c <__aeabi_dsub+0x10c>
   31f82:	2700      	movs	r7, #0
   31f84:	2400      	movs	r4, #0
   31f86:	e5e8      	b.n	31b5a <__aeabi_dsub+0x14a>
   31f88:	2b00      	cmp	r3, #0
   31f8a:	d039      	beq.n	32000 <__aeabi_dsub+0x5f0>
   31f8c:	000b      	movs	r3, r1
   31f8e:	4313      	orrs	r3, r2
   31f90:	d100      	bne.n	31f94 <__aeabi_dsub+0x584>
   31f92:	e744      	b.n	31e1e <__aeabi_dsub+0x40e>
   31f94:	08c0      	lsrs	r0, r0, #3
   31f96:	0767      	lsls	r7, r4, #29
   31f98:	4307      	orrs	r7, r0
   31f9a:	2080      	movs	r0, #128	; 0x80
   31f9c:	08e4      	lsrs	r4, r4, #3
   31f9e:	0300      	lsls	r0, r0, #12
   31fa0:	4204      	tst	r4, r0
   31fa2:	d0e1      	beq.n	31f68 <__aeabi_dsub+0x558>
   31fa4:	08cb      	lsrs	r3, r1, #3
   31fa6:	4203      	tst	r3, r0
   31fa8:	d1de      	bne.n	31f68 <__aeabi_dsub+0x558>
   31faa:	08d7      	lsrs	r7, r2, #3
   31fac:	0749      	lsls	r1, r1, #29
   31fae:	430f      	orrs	r7, r1
   31fb0:	001c      	movs	r4, r3
   31fb2:	e7d9      	b.n	31f68 <__aeabi_dsub+0x558>
   31fb4:	2100      	movs	r1, #0
   31fb6:	e771      	b.n	31e9c <__aeabi_dsub+0x48c>
   31fb8:	2500      	movs	r5, #0
   31fba:	2700      	movs	r7, #0
   31fbc:	e5e9      	b.n	31b92 <__aeabi_dsub+0x182>
   31fbe:	002e      	movs	r6, r5
   31fc0:	0027      	movs	r7, r4
   31fc2:	3e20      	subs	r6, #32
   31fc4:	40f7      	lsrs	r7, r6
   31fc6:	2d20      	cmp	r5, #32
   31fc8:	d02f      	beq.n	3202a <__aeabi_dsub+0x61a>
   31fca:	2640      	movs	r6, #64	; 0x40
   31fcc:	1b75      	subs	r5, r6, r5
   31fce:	40ac      	lsls	r4, r5
   31fd0:	4650      	mov	r0, sl
   31fd2:	4320      	orrs	r0, r4
   31fd4:	1e44      	subs	r4, r0, #1
   31fd6:	41a0      	sbcs	r0, r4
   31fd8:	2400      	movs	r4, #0
   31fda:	4338      	orrs	r0, r7
   31fdc:	e6dc      	b.n	31d98 <__aeabi_dsub+0x388>
   31fde:	2480      	movs	r4, #128	; 0x80
   31fe0:	2500      	movs	r5, #0
   31fe2:	0324      	lsls	r4, r4, #12
   31fe4:	4e13      	ldr	r6, [pc, #76]	; (32034 <__aeabi_dsub+0x624>)
   31fe6:	2700      	movs	r7, #0
   31fe8:	e5d3      	b.n	31b92 <__aeabi_dsub+0x182>
   31fea:	4650      	mov	r0, sl
   31fec:	4320      	orrs	r0, r4
   31fee:	0007      	movs	r7, r0
   31ff0:	1e78      	subs	r0, r7, #1
   31ff2:	4187      	sbcs	r7, r0
   31ff4:	2400      	movs	r4, #0
   31ff6:	18bf      	adds	r7, r7, r2
   31ff8:	e760      	b.n	31ebc <__aeabi_dsub+0x4ac>
   31ffa:	000c      	movs	r4, r1
   31ffc:	0017      	movs	r7, r2
   31ffe:	e58d      	b.n	31b1c <__aeabi_dsub+0x10c>
   32000:	000c      	movs	r4, r1
   32002:	0017      	movs	r7, r2
   32004:	4e0b      	ldr	r6, [pc, #44]	; (32034 <__aeabi_dsub+0x624>)
   32006:	e589      	b.n	31b1c <__aeabi_dsub+0x10c>
   32008:	001e      	movs	r6, r3
   3200a:	0027      	movs	r7, r4
   3200c:	3e20      	subs	r6, #32
   3200e:	40f7      	lsrs	r7, r6
   32010:	2b20      	cmp	r3, #32
   32012:	d00c      	beq.n	3202e <__aeabi_dsub+0x61e>
   32014:	2640      	movs	r6, #64	; 0x40
   32016:	1af3      	subs	r3, r6, r3
   32018:	409c      	lsls	r4, r3
   3201a:	4650      	mov	r0, sl
   3201c:	4320      	orrs	r0, r4
   3201e:	1e44      	subs	r4, r0, #1
   32020:	41a0      	sbcs	r0, r4
   32022:	4307      	orrs	r7, r0
   32024:	2400      	movs	r4, #0
   32026:	18bf      	adds	r7, r7, r2
   32028:	e748      	b.n	31ebc <__aeabi_dsub+0x4ac>
   3202a:	2400      	movs	r4, #0
   3202c:	e7d0      	b.n	31fd0 <__aeabi_dsub+0x5c0>
   3202e:	2400      	movs	r4, #0
   32030:	e7f3      	b.n	3201a <__aeabi_dsub+0x60a>
   32032:	46c0      	nop			; (mov r8, r8)
   32034:	000007ff 	.word	0x000007ff
   32038:	ff7fffff 	.word	0xff7fffff

0003203c <__aeabi_d2iz>:
   3203c:	b530      	push	{r4, r5, lr}
   3203e:	4d13      	ldr	r5, [pc, #76]	; (3208c <__aeabi_d2iz+0x50>)
   32040:	030a      	lsls	r2, r1, #12
   32042:	004b      	lsls	r3, r1, #1
   32044:	0b12      	lsrs	r2, r2, #12
   32046:	0d5b      	lsrs	r3, r3, #21
   32048:	0fc9      	lsrs	r1, r1, #31
   3204a:	2400      	movs	r4, #0
   3204c:	42ab      	cmp	r3, r5
   3204e:	dd10      	ble.n	32072 <__aeabi_d2iz+0x36>
   32050:	4c0f      	ldr	r4, [pc, #60]	; (32090 <__aeabi_d2iz+0x54>)
   32052:	42a3      	cmp	r3, r4
   32054:	dc0f      	bgt.n	32076 <__aeabi_d2iz+0x3a>
   32056:	2480      	movs	r4, #128	; 0x80
   32058:	4d0e      	ldr	r5, [pc, #56]	; (32094 <__aeabi_d2iz+0x58>)
   3205a:	0364      	lsls	r4, r4, #13
   3205c:	4322      	orrs	r2, r4
   3205e:	1aed      	subs	r5, r5, r3
   32060:	2d1f      	cmp	r5, #31
   32062:	dd0b      	ble.n	3207c <__aeabi_d2iz+0x40>
   32064:	480c      	ldr	r0, [pc, #48]	; (32098 <__aeabi_d2iz+0x5c>)
   32066:	1ac3      	subs	r3, r0, r3
   32068:	40da      	lsrs	r2, r3
   3206a:	4254      	negs	r4, r2
   3206c:	2900      	cmp	r1, #0
   3206e:	d100      	bne.n	32072 <__aeabi_d2iz+0x36>
   32070:	0014      	movs	r4, r2
   32072:	0020      	movs	r0, r4
   32074:	bd30      	pop	{r4, r5, pc}
   32076:	4b09      	ldr	r3, [pc, #36]	; (3209c <__aeabi_d2iz+0x60>)
   32078:	18cc      	adds	r4, r1, r3
   3207a:	e7fa      	b.n	32072 <__aeabi_d2iz+0x36>
   3207c:	4c08      	ldr	r4, [pc, #32]	; (320a0 <__aeabi_d2iz+0x64>)
   3207e:	40e8      	lsrs	r0, r5
   32080:	46a4      	mov	ip, r4
   32082:	4463      	add	r3, ip
   32084:	409a      	lsls	r2, r3
   32086:	4302      	orrs	r2, r0
   32088:	e7ef      	b.n	3206a <__aeabi_d2iz+0x2e>
   3208a:	46c0      	nop			; (mov r8, r8)
   3208c:	000003fe 	.word	0x000003fe
   32090:	0000041d 	.word	0x0000041d
   32094:	00000433 	.word	0x00000433
   32098:	00000413 	.word	0x00000413
   3209c:	7fffffff 	.word	0x7fffffff
   320a0:	fffffbed 	.word	0xfffffbed

000320a4 <__aeabi_ui2d>:
   320a4:	b510      	push	{r4, lr}
   320a6:	1e04      	subs	r4, r0, #0
   320a8:	d028      	beq.n	320fc <__aeabi_ui2d+0x58>
   320aa:	f000 f833 	bl	32114 <__clzsi2>
   320ae:	4b15      	ldr	r3, [pc, #84]	; (32104 <__aeabi_ui2d+0x60>)
   320b0:	4a15      	ldr	r2, [pc, #84]	; (32108 <__aeabi_ui2d+0x64>)
   320b2:	1a1b      	subs	r3, r3, r0
   320b4:	1ad2      	subs	r2, r2, r3
   320b6:	2a1f      	cmp	r2, #31
   320b8:	dd15      	ble.n	320e6 <__aeabi_ui2d+0x42>
   320ba:	4a14      	ldr	r2, [pc, #80]	; (3210c <__aeabi_ui2d+0x68>)
   320bc:	1ad2      	subs	r2, r2, r3
   320be:	4094      	lsls	r4, r2
   320c0:	2200      	movs	r2, #0
   320c2:	0324      	lsls	r4, r4, #12
   320c4:	055b      	lsls	r3, r3, #21
   320c6:	0b24      	lsrs	r4, r4, #12
   320c8:	0d5b      	lsrs	r3, r3, #21
   320ca:	2100      	movs	r1, #0
   320cc:	0010      	movs	r0, r2
   320ce:	0324      	lsls	r4, r4, #12
   320d0:	0d0a      	lsrs	r2, r1, #20
   320d2:	0b24      	lsrs	r4, r4, #12
   320d4:	0512      	lsls	r2, r2, #20
   320d6:	4322      	orrs	r2, r4
   320d8:	4c0d      	ldr	r4, [pc, #52]	; (32110 <__aeabi_ui2d+0x6c>)
   320da:	051b      	lsls	r3, r3, #20
   320dc:	4022      	ands	r2, r4
   320de:	4313      	orrs	r3, r2
   320e0:	005b      	lsls	r3, r3, #1
   320e2:	0859      	lsrs	r1, r3, #1
   320e4:	bd10      	pop	{r4, pc}
   320e6:	0021      	movs	r1, r4
   320e8:	4091      	lsls	r1, r2
   320ea:	000a      	movs	r2, r1
   320ec:	210b      	movs	r1, #11
   320ee:	1a08      	subs	r0, r1, r0
   320f0:	40c4      	lsrs	r4, r0
   320f2:	055b      	lsls	r3, r3, #21
   320f4:	0324      	lsls	r4, r4, #12
   320f6:	0b24      	lsrs	r4, r4, #12
   320f8:	0d5b      	lsrs	r3, r3, #21
   320fa:	e7e6      	b.n	320ca <__aeabi_ui2d+0x26>
   320fc:	2300      	movs	r3, #0
   320fe:	2400      	movs	r4, #0
   32100:	2200      	movs	r2, #0
   32102:	e7e2      	b.n	320ca <__aeabi_ui2d+0x26>
   32104:	0000041e 	.word	0x0000041e
   32108:	00000433 	.word	0x00000433
   3210c:	00000413 	.word	0x00000413
   32110:	800fffff 	.word	0x800fffff

00032114 <__clzsi2>:
   32114:	211c      	movs	r1, #28
   32116:	2301      	movs	r3, #1
   32118:	041b      	lsls	r3, r3, #16
   3211a:	4298      	cmp	r0, r3
   3211c:	d301      	bcc.n	32122 <__clzsi2+0xe>
   3211e:	0c00      	lsrs	r0, r0, #16
   32120:	3910      	subs	r1, #16
   32122:	0a1b      	lsrs	r3, r3, #8
   32124:	4298      	cmp	r0, r3
   32126:	d301      	bcc.n	3212c <__clzsi2+0x18>
   32128:	0a00      	lsrs	r0, r0, #8
   3212a:	3908      	subs	r1, #8
   3212c:	091b      	lsrs	r3, r3, #4
   3212e:	4298      	cmp	r0, r3
   32130:	d301      	bcc.n	32136 <__clzsi2+0x22>
   32132:	0900      	lsrs	r0, r0, #4
   32134:	3904      	subs	r1, #4
   32136:	a202      	add	r2, pc, #8	; (adr r2, 32140 <__clzsi2+0x2c>)
   32138:	5c10      	ldrb	r0, [r2, r0]
   3213a:	1840      	adds	r0, r0, r1
   3213c:	4770      	bx	lr
   3213e:	46c0      	nop			; (mov r8, r8)
   32140:	02020304 	.word	0x02020304
   32144:	01010101 	.word	0x01010101
	...

00032150 <atoi>:
   32150:	b510      	push	{r4, lr}
   32152:	220a      	movs	r2, #10
   32154:	2100      	movs	r1, #0
   32156:	f000 fb0d 	bl	32774 <strtol>
   3215a:	bd10      	pop	{r4, pc}

0003215c <__libc_init_array>:
   3215c:	b570      	push	{r4, r5, r6, lr}
   3215e:	2600      	movs	r6, #0
   32160:	4d0c      	ldr	r5, [pc, #48]	; (32194 <__libc_init_array+0x38>)
   32162:	4c0d      	ldr	r4, [pc, #52]	; (32198 <__libc_init_array+0x3c>)
   32164:	1b64      	subs	r4, r4, r5
   32166:	10a4      	asrs	r4, r4, #2
   32168:	42a6      	cmp	r6, r4
   3216a:	d109      	bne.n	32180 <__libc_init_array+0x24>
   3216c:	2600      	movs	r6, #0
   3216e:	f005 faa7 	bl	376c0 <_init>
   32172:	4d0a      	ldr	r5, [pc, #40]	; (3219c <__libc_init_array+0x40>)
   32174:	4c0a      	ldr	r4, [pc, #40]	; (321a0 <__libc_init_array+0x44>)
   32176:	1b64      	subs	r4, r4, r5
   32178:	10a4      	asrs	r4, r4, #2
   3217a:	42a6      	cmp	r6, r4
   3217c:	d105      	bne.n	3218a <__libc_init_array+0x2e>
   3217e:	bd70      	pop	{r4, r5, r6, pc}
   32180:	00b3      	lsls	r3, r6, #2
   32182:	58eb      	ldr	r3, [r5, r3]
   32184:	4798      	blx	r3
   32186:	3601      	adds	r6, #1
   32188:	e7ee      	b.n	32168 <__libc_init_array+0xc>
   3218a:	00b3      	lsls	r3, r6, #2
   3218c:	58eb      	ldr	r3, [r5, r3]
   3218e:	4798      	blx	r3
   32190:	3601      	adds	r6, #1
   32192:	e7f2      	b.n	3217a <__libc_init_array+0x1e>
   32194:	000376cc 	.word	0x000376cc
   32198:	000376cc 	.word	0x000376cc
   3219c:	000376cc 	.word	0x000376cc
   321a0:	000376d0 	.word	0x000376d0

000321a4 <malloc>:
   321a4:	b510      	push	{r4, lr}
   321a6:	4b03      	ldr	r3, [pc, #12]	; (321b4 <malloc+0x10>)
   321a8:	0001      	movs	r1, r0
   321aa:	6818      	ldr	r0, [r3, #0]
   321ac:	f000 f87c 	bl	322a8 <_malloc_r>
   321b0:	bd10      	pop	{r4, pc}
   321b2:	46c0      	nop			; (mov r8, r8)
   321b4:	20000110 	.word	0x20000110

000321b8 <free>:
   321b8:	b510      	push	{r4, lr}
   321ba:	4b03      	ldr	r3, [pc, #12]	; (321c8 <free+0x10>)
   321bc:	0001      	movs	r1, r0
   321be:	6818      	ldr	r0, [r3, #0]
   321c0:	f000 f828 	bl	32214 <_free_r>
   321c4:	bd10      	pop	{r4, pc}
   321c6:	46c0      	nop			; (mov r8, r8)
   321c8:	20000110 	.word	0x20000110

000321cc <memcpy>:
   321cc:	2300      	movs	r3, #0
   321ce:	b510      	push	{r4, lr}
   321d0:	429a      	cmp	r2, r3
   321d2:	d100      	bne.n	321d6 <memcpy+0xa>
   321d4:	bd10      	pop	{r4, pc}
   321d6:	5ccc      	ldrb	r4, [r1, r3]
   321d8:	54c4      	strb	r4, [r0, r3]
   321da:	3301      	adds	r3, #1
   321dc:	e7f8      	b.n	321d0 <memcpy+0x4>

000321de <memmove>:
   321de:	b510      	push	{r4, lr}
   321e0:	4288      	cmp	r0, r1
   321e2:	d902      	bls.n	321ea <memmove+0xc>
   321e4:	188b      	adds	r3, r1, r2
   321e6:	4298      	cmp	r0, r3
   321e8:	d308      	bcc.n	321fc <memmove+0x1e>
   321ea:	2300      	movs	r3, #0
   321ec:	429a      	cmp	r2, r3
   321ee:	d007      	beq.n	32200 <memmove+0x22>
   321f0:	5ccc      	ldrb	r4, [r1, r3]
   321f2:	54c4      	strb	r4, [r0, r3]
   321f4:	3301      	adds	r3, #1
   321f6:	e7f9      	b.n	321ec <memmove+0xe>
   321f8:	5c8b      	ldrb	r3, [r1, r2]
   321fa:	5483      	strb	r3, [r0, r2]
   321fc:	3a01      	subs	r2, #1
   321fe:	d2fb      	bcs.n	321f8 <memmove+0x1a>
   32200:	bd10      	pop	{r4, pc}

00032202 <memset>:
   32202:	0003      	movs	r3, r0
   32204:	1882      	adds	r2, r0, r2
   32206:	4293      	cmp	r3, r2
   32208:	d100      	bne.n	3220c <memset+0xa>
   3220a:	4770      	bx	lr
   3220c:	7019      	strb	r1, [r3, #0]
   3220e:	3301      	adds	r3, #1
   32210:	e7f9      	b.n	32206 <memset+0x4>
	...

00032214 <_free_r>:
   32214:	b570      	push	{r4, r5, r6, lr}
   32216:	0005      	movs	r5, r0
   32218:	2900      	cmp	r1, #0
   3221a:	d010      	beq.n	3223e <_free_r+0x2a>
   3221c:	1f0c      	subs	r4, r1, #4
   3221e:	6823      	ldr	r3, [r4, #0]
   32220:	2b00      	cmp	r3, #0
   32222:	da00      	bge.n	32226 <_free_r+0x12>
   32224:	18e4      	adds	r4, r4, r3
   32226:	0028      	movs	r0, r5
   32228:	f000 fdd8 	bl	32ddc <__malloc_lock>
   3222c:	4a1d      	ldr	r2, [pc, #116]	; (322a4 <_free_r+0x90>)
   3222e:	6813      	ldr	r3, [r2, #0]
   32230:	2b00      	cmp	r3, #0
   32232:	d105      	bne.n	32240 <_free_r+0x2c>
   32234:	6063      	str	r3, [r4, #4]
   32236:	6014      	str	r4, [r2, #0]
   32238:	0028      	movs	r0, r5
   3223a:	f000 fdd0 	bl	32dde <__malloc_unlock>
   3223e:	bd70      	pop	{r4, r5, r6, pc}
   32240:	42a3      	cmp	r3, r4
   32242:	d909      	bls.n	32258 <_free_r+0x44>
   32244:	6821      	ldr	r1, [r4, #0]
   32246:	1860      	adds	r0, r4, r1
   32248:	4283      	cmp	r3, r0
   3224a:	d1f3      	bne.n	32234 <_free_r+0x20>
   3224c:	6818      	ldr	r0, [r3, #0]
   3224e:	685b      	ldr	r3, [r3, #4]
   32250:	1841      	adds	r1, r0, r1
   32252:	6021      	str	r1, [r4, #0]
   32254:	e7ee      	b.n	32234 <_free_r+0x20>
   32256:	0013      	movs	r3, r2
   32258:	685a      	ldr	r2, [r3, #4]
   3225a:	2a00      	cmp	r2, #0
   3225c:	d001      	beq.n	32262 <_free_r+0x4e>
   3225e:	42a2      	cmp	r2, r4
   32260:	d9f9      	bls.n	32256 <_free_r+0x42>
   32262:	6819      	ldr	r1, [r3, #0]
   32264:	1858      	adds	r0, r3, r1
   32266:	42a0      	cmp	r0, r4
   32268:	d10b      	bne.n	32282 <_free_r+0x6e>
   3226a:	6820      	ldr	r0, [r4, #0]
   3226c:	1809      	adds	r1, r1, r0
   3226e:	1858      	adds	r0, r3, r1
   32270:	6019      	str	r1, [r3, #0]
   32272:	4282      	cmp	r2, r0
   32274:	d1e0      	bne.n	32238 <_free_r+0x24>
   32276:	6810      	ldr	r0, [r2, #0]
   32278:	6852      	ldr	r2, [r2, #4]
   3227a:	1841      	adds	r1, r0, r1
   3227c:	6019      	str	r1, [r3, #0]
   3227e:	605a      	str	r2, [r3, #4]
   32280:	e7da      	b.n	32238 <_free_r+0x24>
   32282:	42a0      	cmp	r0, r4
   32284:	d902      	bls.n	3228c <_free_r+0x78>
   32286:	230c      	movs	r3, #12
   32288:	602b      	str	r3, [r5, #0]
   3228a:	e7d5      	b.n	32238 <_free_r+0x24>
   3228c:	6821      	ldr	r1, [r4, #0]
   3228e:	1860      	adds	r0, r4, r1
   32290:	4282      	cmp	r2, r0
   32292:	d103      	bne.n	3229c <_free_r+0x88>
   32294:	6810      	ldr	r0, [r2, #0]
   32296:	6852      	ldr	r2, [r2, #4]
   32298:	1841      	adds	r1, r0, r1
   3229a:	6021      	str	r1, [r4, #0]
   3229c:	6062      	str	r2, [r4, #4]
   3229e:	605c      	str	r4, [r3, #4]
   322a0:	e7ca      	b.n	32238 <_free_r+0x24>
   322a2:	46c0      	nop			; (mov r8, r8)
   322a4:	2000417c 	.word	0x2000417c

000322a8 <_malloc_r>:
   322a8:	2303      	movs	r3, #3
   322aa:	b570      	push	{r4, r5, r6, lr}
   322ac:	1ccd      	adds	r5, r1, #3
   322ae:	439d      	bics	r5, r3
   322b0:	3508      	adds	r5, #8
   322b2:	0006      	movs	r6, r0
   322b4:	2d0c      	cmp	r5, #12
   322b6:	d21e      	bcs.n	322f6 <_malloc_r+0x4e>
   322b8:	250c      	movs	r5, #12
   322ba:	42a9      	cmp	r1, r5
   322bc:	d81d      	bhi.n	322fa <_malloc_r+0x52>
   322be:	0030      	movs	r0, r6
   322c0:	f000 fd8c 	bl	32ddc <__malloc_lock>
   322c4:	4a25      	ldr	r2, [pc, #148]	; (3235c <_malloc_r+0xb4>)
   322c6:	6814      	ldr	r4, [r2, #0]
   322c8:	0021      	movs	r1, r4
   322ca:	2900      	cmp	r1, #0
   322cc:	d119      	bne.n	32302 <_malloc_r+0x5a>
   322ce:	4c24      	ldr	r4, [pc, #144]	; (32360 <_malloc_r+0xb8>)
   322d0:	6823      	ldr	r3, [r4, #0]
   322d2:	2b00      	cmp	r3, #0
   322d4:	d103      	bne.n	322de <_malloc_r+0x36>
   322d6:	0030      	movs	r0, r6
   322d8:	f000 f8ae 	bl	32438 <_sbrk_r>
   322dc:	6020      	str	r0, [r4, #0]
   322de:	0029      	movs	r1, r5
   322e0:	0030      	movs	r0, r6
   322e2:	f000 f8a9 	bl	32438 <_sbrk_r>
   322e6:	1c43      	adds	r3, r0, #1
   322e8:	d12c      	bne.n	32344 <_malloc_r+0x9c>
   322ea:	230c      	movs	r3, #12
   322ec:	0030      	movs	r0, r6
   322ee:	6033      	str	r3, [r6, #0]
   322f0:	f000 fd75 	bl	32dde <__malloc_unlock>
   322f4:	e003      	b.n	322fe <_malloc_r+0x56>
   322f6:	2d00      	cmp	r5, #0
   322f8:	dadf      	bge.n	322ba <_malloc_r+0x12>
   322fa:	230c      	movs	r3, #12
   322fc:	6033      	str	r3, [r6, #0]
   322fe:	2000      	movs	r0, #0
   32300:	bd70      	pop	{r4, r5, r6, pc}
   32302:	680b      	ldr	r3, [r1, #0]
   32304:	1b5b      	subs	r3, r3, r5
   32306:	d41a      	bmi.n	3233e <_malloc_r+0x96>
   32308:	2b0b      	cmp	r3, #11
   3230a:	d903      	bls.n	32314 <_malloc_r+0x6c>
   3230c:	600b      	str	r3, [r1, #0]
   3230e:	18cc      	adds	r4, r1, r3
   32310:	6025      	str	r5, [r4, #0]
   32312:	e003      	b.n	3231c <_malloc_r+0x74>
   32314:	428c      	cmp	r4, r1
   32316:	d10e      	bne.n	32336 <_malloc_r+0x8e>
   32318:	6863      	ldr	r3, [r4, #4]
   3231a:	6013      	str	r3, [r2, #0]
   3231c:	0030      	movs	r0, r6
   3231e:	f000 fd5e 	bl	32dde <__malloc_unlock>
   32322:	0020      	movs	r0, r4
   32324:	2207      	movs	r2, #7
   32326:	300b      	adds	r0, #11
   32328:	1d23      	adds	r3, r4, #4
   3232a:	4390      	bics	r0, r2
   3232c:	1ac3      	subs	r3, r0, r3
   3232e:	d0e7      	beq.n	32300 <_malloc_r+0x58>
   32330:	425a      	negs	r2, r3
   32332:	50e2      	str	r2, [r4, r3]
   32334:	e7e4      	b.n	32300 <_malloc_r+0x58>
   32336:	684b      	ldr	r3, [r1, #4]
   32338:	6063      	str	r3, [r4, #4]
   3233a:	000c      	movs	r4, r1
   3233c:	e7ee      	b.n	3231c <_malloc_r+0x74>
   3233e:	000c      	movs	r4, r1
   32340:	6849      	ldr	r1, [r1, #4]
   32342:	e7c2      	b.n	322ca <_malloc_r+0x22>
   32344:	2303      	movs	r3, #3
   32346:	1cc4      	adds	r4, r0, #3
   32348:	439c      	bics	r4, r3
   3234a:	42a0      	cmp	r0, r4
   3234c:	d0e0      	beq.n	32310 <_malloc_r+0x68>
   3234e:	1a21      	subs	r1, r4, r0
   32350:	0030      	movs	r0, r6
   32352:	f000 f871 	bl	32438 <_sbrk_r>
   32356:	1c43      	adds	r3, r0, #1
   32358:	d1da      	bne.n	32310 <_malloc_r+0x68>
   3235a:	e7c6      	b.n	322ea <_malloc_r+0x42>
   3235c:	2000417c 	.word	0x2000417c
   32360:	20004180 	.word	0x20004180

00032364 <_puts_r>:
   32364:	b570      	push	{r4, r5, r6, lr}
   32366:	0005      	movs	r5, r0
   32368:	000e      	movs	r6, r1
   3236a:	2800      	cmp	r0, #0
   3236c:	d004      	beq.n	32378 <_puts_r+0x14>
   3236e:	6983      	ldr	r3, [r0, #24]
   32370:	2b00      	cmp	r3, #0
   32372:	d101      	bne.n	32378 <_puts_r+0x14>
   32374:	f000 fc0e 	bl	32b94 <__sinit>
   32378:	69ab      	ldr	r3, [r5, #24]
   3237a:	68ac      	ldr	r4, [r5, #8]
   3237c:	2b00      	cmp	r3, #0
   3237e:	d102      	bne.n	32386 <_puts_r+0x22>
   32380:	0028      	movs	r0, r5
   32382:	f000 fc07 	bl	32b94 <__sinit>
   32386:	4b24      	ldr	r3, [pc, #144]	; (32418 <_puts_r+0xb4>)
   32388:	429c      	cmp	r4, r3
   3238a:	d10f      	bne.n	323ac <_puts_r+0x48>
   3238c:	686c      	ldr	r4, [r5, #4]
   3238e:	89a3      	ldrh	r3, [r4, #12]
   32390:	071b      	lsls	r3, r3, #28
   32392:	d502      	bpl.n	3239a <_puts_r+0x36>
   32394:	6923      	ldr	r3, [r4, #16]
   32396:	2b00      	cmp	r3, #0
   32398:	d120      	bne.n	323dc <_puts_r+0x78>
   3239a:	0021      	movs	r1, r4
   3239c:	0028      	movs	r0, r5
   3239e:	f000 fa8b 	bl	328b8 <__swsetup_r>
   323a2:	2800      	cmp	r0, #0
   323a4:	d01a      	beq.n	323dc <_puts_r+0x78>
   323a6:	2001      	movs	r0, #1
   323a8:	4240      	negs	r0, r0
   323aa:	bd70      	pop	{r4, r5, r6, pc}
   323ac:	4b1b      	ldr	r3, [pc, #108]	; (3241c <_puts_r+0xb8>)
   323ae:	429c      	cmp	r4, r3
   323b0:	d101      	bne.n	323b6 <_puts_r+0x52>
   323b2:	68ac      	ldr	r4, [r5, #8]
   323b4:	e7eb      	b.n	3238e <_puts_r+0x2a>
   323b6:	4b1a      	ldr	r3, [pc, #104]	; (32420 <_puts_r+0xbc>)
   323b8:	429c      	cmp	r4, r3
   323ba:	d1e8      	bne.n	3238e <_puts_r+0x2a>
   323bc:	68ec      	ldr	r4, [r5, #12]
   323be:	e7e6      	b.n	3238e <_puts_r+0x2a>
   323c0:	3b01      	subs	r3, #1
   323c2:	3601      	adds	r6, #1
   323c4:	60a3      	str	r3, [r4, #8]
   323c6:	2b00      	cmp	r3, #0
   323c8:	da04      	bge.n	323d4 <_puts_r+0x70>
   323ca:	69a2      	ldr	r2, [r4, #24]
   323cc:	4293      	cmp	r3, r2
   323ce:	db16      	blt.n	323fe <_puts_r+0x9a>
   323d0:	290a      	cmp	r1, #10
   323d2:	d014      	beq.n	323fe <_puts_r+0x9a>
   323d4:	6823      	ldr	r3, [r4, #0]
   323d6:	1c5a      	adds	r2, r3, #1
   323d8:	6022      	str	r2, [r4, #0]
   323da:	7019      	strb	r1, [r3, #0]
   323dc:	7831      	ldrb	r1, [r6, #0]
   323de:	68a3      	ldr	r3, [r4, #8]
   323e0:	2900      	cmp	r1, #0
   323e2:	d1ed      	bne.n	323c0 <_puts_r+0x5c>
   323e4:	3b01      	subs	r3, #1
   323e6:	60a3      	str	r3, [r4, #8]
   323e8:	2b00      	cmp	r3, #0
   323ea:	da0f      	bge.n	3240c <_puts_r+0xa8>
   323ec:	0022      	movs	r2, r4
   323ee:	310a      	adds	r1, #10
   323f0:	0028      	movs	r0, r5
   323f2:	f000 fa0b 	bl	3280c <__swbuf_r>
   323f6:	1c43      	adds	r3, r0, #1
   323f8:	d0d5      	beq.n	323a6 <_puts_r+0x42>
   323fa:	200a      	movs	r0, #10
   323fc:	e7d5      	b.n	323aa <_puts_r+0x46>
   323fe:	0022      	movs	r2, r4
   32400:	0028      	movs	r0, r5
   32402:	f000 fa03 	bl	3280c <__swbuf_r>
   32406:	1c43      	adds	r3, r0, #1
   32408:	d1e8      	bne.n	323dc <_puts_r+0x78>
   3240a:	e7cc      	b.n	323a6 <_puts_r+0x42>
   3240c:	200a      	movs	r0, #10
   3240e:	6823      	ldr	r3, [r4, #0]
   32410:	1c5a      	adds	r2, r3, #1
   32412:	6022      	str	r2, [r4, #0]
   32414:	7018      	strb	r0, [r3, #0]
   32416:	e7c8      	b.n	323aa <_puts_r+0x46>
   32418:	00037540 	.word	0x00037540
   3241c:	00037560 	.word	0x00037560
   32420:	00037520 	.word	0x00037520

00032424 <puts>:
   32424:	b510      	push	{r4, lr}
   32426:	4b03      	ldr	r3, [pc, #12]	; (32434 <puts+0x10>)
   32428:	0001      	movs	r1, r0
   3242a:	6818      	ldr	r0, [r3, #0]
   3242c:	f7ff ff9a 	bl	32364 <_puts_r>
   32430:	bd10      	pop	{r4, pc}
   32432:	46c0      	nop			; (mov r8, r8)
   32434:	20000110 	.word	0x20000110

00032438 <_sbrk_r>:
   32438:	2300      	movs	r3, #0
   3243a:	b570      	push	{r4, r5, r6, lr}
   3243c:	4c06      	ldr	r4, [pc, #24]	; (32458 <_sbrk_r+0x20>)
   3243e:	0005      	movs	r5, r0
   32440:	0008      	movs	r0, r1
   32442:	6023      	str	r3, [r4, #0]
   32444:	f7f6 fc98 	bl	28d78 <_sbrk>
   32448:	1c43      	adds	r3, r0, #1
   3244a:	d103      	bne.n	32454 <_sbrk_r+0x1c>
   3244c:	6823      	ldr	r3, [r4, #0]
   3244e:	2b00      	cmp	r3, #0
   32450:	d000      	beq.n	32454 <_sbrk_r+0x1c>
   32452:	602b      	str	r3, [r5, #0]
   32454:	bd70      	pop	{r4, r5, r6, pc}
   32456:	46c0      	nop			; (mov r8, r8)
   32458:	20005600 	.word	0x20005600

0003245c <sniprintf>:
   3245c:	b40c      	push	{r2, r3}
   3245e:	b530      	push	{r4, r5, lr}
   32460:	4b16      	ldr	r3, [pc, #88]	; (324bc <sniprintf+0x60>)
   32462:	b09d      	sub	sp, #116	; 0x74
   32464:	1e0c      	subs	r4, r1, #0
   32466:	681d      	ldr	r5, [r3, #0]
   32468:	da08      	bge.n	3247c <sniprintf+0x20>
   3246a:	238b      	movs	r3, #139	; 0x8b
   3246c:	2001      	movs	r0, #1
   3246e:	602b      	str	r3, [r5, #0]
   32470:	4240      	negs	r0, r0
   32472:	b01d      	add	sp, #116	; 0x74
   32474:	bc30      	pop	{r4, r5}
   32476:	bc08      	pop	{r3}
   32478:	b002      	add	sp, #8
   3247a:	4718      	bx	r3
   3247c:	2382      	movs	r3, #130	; 0x82
   3247e:	a902      	add	r1, sp, #8
   32480:	009b      	lsls	r3, r3, #2
   32482:	818b      	strh	r3, [r1, #12]
   32484:	2300      	movs	r3, #0
   32486:	9002      	str	r0, [sp, #8]
   32488:	6108      	str	r0, [r1, #16]
   3248a:	429c      	cmp	r4, r3
   3248c:	d000      	beq.n	32490 <sniprintf+0x34>
   3248e:	1e63      	subs	r3, r4, #1
   32490:	608b      	str	r3, [r1, #8]
   32492:	614b      	str	r3, [r1, #20]
   32494:	2301      	movs	r3, #1
   32496:	425b      	negs	r3, r3
   32498:	81cb      	strh	r3, [r1, #14]
   3249a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3249c:	ab21      	add	r3, sp, #132	; 0x84
   3249e:	0028      	movs	r0, r5
   324a0:	9301      	str	r3, [sp, #4]
   324a2:	f000 fcff 	bl	32ea4 <_svfiprintf_r>
   324a6:	1c43      	adds	r3, r0, #1
   324a8:	da01      	bge.n	324ae <sniprintf+0x52>
   324aa:	238b      	movs	r3, #139	; 0x8b
   324ac:	602b      	str	r3, [r5, #0]
   324ae:	2c00      	cmp	r4, #0
   324b0:	d0df      	beq.n	32472 <sniprintf+0x16>
   324b2:	2300      	movs	r3, #0
   324b4:	9a02      	ldr	r2, [sp, #8]
   324b6:	7013      	strb	r3, [r2, #0]
   324b8:	e7db      	b.n	32472 <sniprintf+0x16>
   324ba:	46c0      	nop			; (mov r8, r8)
   324bc:	20000110 	.word	0x20000110

000324c0 <siprintf>:
   324c0:	b40e      	push	{r1, r2, r3}
   324c2:	b510      	push	{r4, lr}
   324c4:	b09d      	sub	sp, #116	; 0x74
   324c6:	a902      	add	r1, sp, #8
   324c8:	9002      	str	r0, [sp, #8]
   324ca:	6108      	str	r0, [r1, #16]
   324cc:	480b      	ldr	r0, [pc, #44]	; (324fc <siprintf+0x3c>)
   324ce:	2482      	movs	r4, #130	; 0x82
   324d0:	6088      	str	r0, [r1, #8]
   324d2:	6148      	str	r0, [r1, #20]
   324d4:	2001      	movs	r0, #1
   324d6:	4240      	negs	r0, r0
   324d8:	ab1f      	add	r3, sp, #124	; 0x7c
   324da:	81c8      	strh	r0, [r1, #14]
   324dc:	4808      	ldr	r0, [pc, #32]	; (32500 <siprintf+0x40>)
   324de:	cb04      	ldmia	r3!, {r2}
   324e0:	00a4      	lsls	r4, r4, #2
   324e2:	6800      	ldr	r0, [r0, #0]
   324e4:	9301      	str	r3, [sp, #4]
   324e6:	818c      	strh	r4, [r1, #12]
   324e8:	f000 fcdc 	bl	32ea4 <_svfiprintf_r>
   324ec:	2300      	movs	r3, #0
   324ee:	9a02      	ldr	r2, [sp, #8]
   324f0:	7013      	strb	r3, [r2, #0]
   324f2:	b01d      	add	sp, #116	; 0x74
   324f4:	bc10      	pop	{r4}
   324f6:	bc08      	pop	{r3}
   324f8:	b003      	add	sp, #12
   324fa:	4718      	bx	r3
   324fc:	7fffffff 	.word	0x7fffffff
   32500:	20000110 	.word	0x20000110

00032504 <strcasecmp>:
   32504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32506:	0007      	movs	r7, r0
   32508:	000e      	movs	r6, r1
   3250a:	783c      	ldrb	r4, [r7, #0]
   3250c:	f000 fbda 	bl	32cc4 <__locale_ctype_ptr>
   32510:	2203      	movs	r2, #3
   32512:	1900      	adds	r0, r0, r4
   32514:	7843      	ldrb	r3, [r0, #1]
   32516:	4013      	ands	r3, r2
   32518:	2b01      	cmp	r3, #1
   3251a:	d100      	bne.n	3251e <strcasecmp+0x1a>
   3251c:	3420      	adds	r4, #32
   3251e:	7835      	ldrb	r5, [r6, #0]
   32520:	f000 fbd0 	bl	32cc4 <__locale_ctype_ptr>
   32524:	2203      	movs	r2, #3
   32526:	1940      	adds	r0, r0, r5
   32528:	7843      	ldrb	r3, [r0, #1]
   3252a:	4013      	ands	r3, r2
   3252c:	2b01      	cmp	r3, #1
   3252e:	d100      	bne.n	32532 <strcasecmp+0x2e>
   32530:	3520      	adds	r5, #32
   32532:	1b60      	subs	r0, r4, r5
   32534:	d103      	bne.n	3253e <strcasecmp+0x3a>
   32536:	3701      	adds	r7, #1
   32538:	3601      	adds	r6, #1
   3253a:	2d00      	cmp	r5, #0
   3253c:	d1e5      	bne.n	3250a <strcasecmp+0x6>
   3253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00032540 <strcat>:
   32540:	0002      	movs	r2, r0
   32542:	b510      	push	{r4, lr}
   32544:	7813      	ldrb	r3, [r2, #0]
   32546:	2b00      	cmp	r3, #0
   32548:	d105      	bne.n	32556 <strcat+0x16>
   3254a:	5ccc      	ldrb	r4, [r1, r3]
   3254c:	54d4      	strb	r4, [r2, r3]
   3254e:	3301      	adds	r3, #1
   32550:	2c00      	cmp	r4, #0
   32552:	d1fa      	bne.n	3254a <strcat+0xa>
   32554:	bd10      	pop	{r4, pc}
   32556:	3201      	adds	r2, #1
   32558:	e7f4      	b.n	32544 <strcat+0x4>

0003255a <strcmp>:
   3255a:	7802      	ldrb	r2, [r0, #0]
   3255c:	780b      	ldrb	r3, [r1, #0]
   3255e:	2a00      	cmp	r2, #0
   32560:	d003      	beq.n	3256a <strcmp+0x10>
   32562:	3001      	adds	r0, #1
   32564:	3101      	adds	r1, #1
   32566:	429a      	cmp	r2, r3
   32568:	d0f7      	beq.n	3255a <strcmp>
   3256a:	1ad0      	subs	r0, r2, r3
   3256c:	4770      	bx	lr

0003256e <strcpy>:
   3256e:	1c03      	adds	r3, r0, #0
   32570:	780a      	ldrb	r2, [r1, #0]
   32572:	3101      	adds	r1, #1
   32574:	701a      	strb	r2, [r3, #0]
   32576:	3301      	adds	r3, #1
   32578:	2a00      	cmp	r2, #0
   3257a:	d1f9      	bne.n	32570 <strcpy+0x2>
   3257c:	4770      	bx	lr
	...

00032580 <strdup>:
   32580:	b510      	push	{r4, lr}
   32582:	4b03      	ldr	r3, [pc, #12]	; (32590 <strdup+0x10>)
   32584:	0001      	movs	r1, r0
   32586:	6818      	ldr	r0, [r3, #0]
   32588:	f000 f804 	bl	32594 <_strdup_r>
   3258c:	bd10      	pop	{r4, pc}
   3258e:	46c0      	nop			; (mov r8, r8)
   32590:	20000110 	.word	0x20000110

00032594 <_strdup_r>:
   32594:	b570      	push	{r4, r5, r6, lr}
   32596:	0005      	movs	r5, r0
   32598:	0008      	movs	r0, r1
   3259a:	000e      	movs	r6, r1
   3259c:	f000 f80d 	bl	325ba <strlen>
   325a0:	1c44      	adds	r4, r0, #1
   325a2:	0021      	movs	r1, r4
   325a4:	0028      	movs	r0, r5
   325a6:	f7ff fe7f 	bl	322a8 <_malloc_r>
   325aa:	1e05      	subs	r5, r0, #0
   325ac:	d003      	beq.n	325b6 <_strdup_r+0x22>
   325ae:	0022      	movs	r2, r4
   325b0:	0031      	movs	r1, r6
   325b2:	f7ff fe0b 	bl	321cc <memcpy>
   325b6:	0028      	movs	r0, r5
   325b8:	bd70      	pop	{r4, r5, r6, pc}

000325ba <strlen>:
   325ba:	2300      	movs	r3, #0
   325bc:	5cc2      	ldrb	r2, [r0, r3]
   325be:	3301      	adds	r3, #1
   325c0:	2a00      	cmp	r2, #0
   325c2:	d1fb      	bne.n	325bc <strlen+0x2>
   325c4:	1e58      	subs	r0, r3, #1
   325c6:	4770      	bx	lr

000325c8 <strncmp>:
   325c8:	2300      	movs	r3, #0
   325ca:	b530      	push	{r4, r5, lr}
   325cc:	429a      	cmp	r2, r3
   325ce:	d00a      	beq.n	325e6 <strncmp+0x1e>
   325d0:	3a01      	subs	r2, #1
   325d2:	5cc4      	ldrb	r4, [r0, r3]
   325d4:	5ccd      	ldrb	r5, [r1, r3]
   325d6:	42ac      	cmp	r4, r5
   325d8:	d104      	bne.n	325e4 <strncmp+0x1c>
   325da:	429a      	cmp	r2, r3
   325dc:	d002      	beq.n	325e4 <strncmp+0x1c>
   325de:	3301      	adds	r3, #1
   325e0:	2c00      	cmp	r4, #0
   325e2:	d1f6      	bne.n	325d2 <strncmp+0xa>
   325e4:	1b63      	subs	r3, r4, r5
   325e6:	0018      	movs	r0, r3
   325e8:	bd30      	pop	{r4, r5, pc}

000325ea <strncpy>:
   325ea:	b570      	push	{r4, r5, r6, lr}
   325ec:	0004      	movs	r4, r0
   325ee:	2a00      	cmp	r2, #0
   325f0:	d100      	bne.n	325f4 <strncpy+0xa>
   325f2:	bd70      	pop	{r4, r5, r6, pc}
   325f4:	780d      	ldrb	r5, [r1, #0]
   325f6:	1e56      	subs	r6, r2, #1
   325f8:	1c63      	adds	r3, r4, #1
   325fa:	7025      	strb	r5, [r4, #0]
   325fc:	3101      	adds	r1, #1
   325fe:	2d00      	cmp	r5, #0
   32600:	d105      	bne.n	3260e <strncpy+0x24>
   32602:	18a4      	adds	r4, r4, r2
   32604:	429c      	cmp	r4, r3
   32606:	d0f4      	beq.n	325f2 <strncpy+0x8>
   32608:	701d      	strb	r5, [r3, #0]
   3260a:	3301      	adds	r3, #1
   3260c:	e7fa      	b.n	32604 <strncpy+0x1a>
   3260e:	001c      	movs	r4, r3
   32610:	0032      	movs	r2, r6
   32612:	e7ec      	b.n	325ee <strncpy+0x4>

00032614 <strrchr>:
   32614:	b570      	push	{r4, r5, r6, lr}
   32616:	000d      	movs	r5, r1
   32618:	2400      	movs	r4, #0
   3261a:	2900      	cmp	r1, #0
   3261c:	d105      	bne.n	3262a <strrchr+0x16>
   3261e:	f000 ff19 	bl	33454 <strchr>
   32622:	0004      	movs	r4, r0
   32624:	e006      	b.n	32634 <strrchr+0x20>
   32626:	001c      	movs	r4, r3
   32628:	1c58      	adds	r0, r3, #1
   3262a:	0029      	movs	r1, r5
   3262c:	f000 ff12 	bl	33454 <strchr>
   32630:	1e03      	subs	r3, r0, #0
   32632:	d1f8      	bne.n	32626 <strrchr+0x12>
   32634:	0020      	movs	r0, r4
   32636:	bd70      	pop	{r4, r5, r6, pc}

00032638 <strstr>:
   32638:	b510      	push	{r4, lr}
   3263a:	0002      	movs	r2, r0
   3263c:	7800      	ldrb	r0, [r0, #0]
   3263e:	2800      	cmp	r0, #0
   32640:	d104      	bne.n	3264c <strstr+0x14>
   32642:	7809      	ldrb	r1, [r1, #0]
   32644:	2900      	cmp	r1, #0
   32646:	d00d      	beq.n	32664 <strstr+0x2c>
   32648:	bd10      	pop	{r4, pc}
   3264a:	3201      	adds	r2, #1
   3264c:	7810      	ldrb	r0, [r2, #0]
   3264e:	2800      	cmp	r0, #0
   32650:	d0fa      	beq.n	32648 <strstr+0x10>
   32652:	2300      	movs	r3, #0
   32654:	5cc8      	ldrb	r0, [r1, r3]
   32656:	2800      	cmp	r0, #0
   32658:	d004      	beq.n	32664 <strstr+0x2c>
   3265a:	5cd4      	ldrb	r4, [r2, r3]
   3265c:	4284      	cmp	r4, r0
   3265e:	d1f4      	bne.n	3264a <strstr+0x12>
   32660:	3301      	adds	r3, #1
   32662:	e7f7      	b.n	32654 <strstr+0x1c>
   32664:	0010      	movs	r0, r2
   32666:	e7ef      	b.n	32648 <strstr+0x10>

00032668 <_strtol_l.isra.0>:
   32668:	b5f0      	push	{r4, r5, r6, r7, lr}
   3266a:	001f      	movs	r7, r3
   3266c:	000e      	movs	r6, r1
   3266e:	b087      	sub	sp, #28
   32670:	9005      	str	r0, [sp, #20]
   32672:	9103      	str	r1, [sp, #12]
   32674:	9202      	str	r2, [sp, #8]
   32676:	980c      	ldr	r0, [sp, #48]	; 0x30
   32678:	7834      	ldrb	r4, [r6, #0]
   3267a:	f000 fb20 	bl	32cbe <__locale_ctype_ptr_l>
   3267e:	2208      	movs	r2, #8
   32680:	1900      	adds	r0, r0, r4
   32682:	7843      	ldrb	r3, [r0, #1]
   32684:	1c75      	adds	r5, r6, #1
   32686:	4013      	ands	r3, r2
   32688:	d10c      	bne.n	326a4 <_strtol_l.isra.0+0x3c>
   3268a:	2c2d      	cmp	r4, #45	; 0x2d
   3268c:	d10c      	bne.n	326a8 <_strtol_l.isra.0+0x40>
   3268e:	3301      	adds	r3, #1
   32690:	782c      	ldrb	r4, [r5, #0]
   32692:	9301      	str	r3, [sp, #4]
   32694:	1cb5      	adds	r5, r6, #2
   32696:	2f00      	cmp	r7, #0
   32698:	d00c      	beq.n	326b4 <_strtol_l.isra.0+0x4c>
   3269a:	2f10      	cmp	r7, #16
   3269c:	d114      	bne.n	326c8 <_strtol_l.isra.0+0x60>
   3269e:	2c30      	cmp	r4, #48	; 0x30
   326a0:	d00a      	beq.n	326b8 <_strtol_l.isra.0+0x50>
   326a2:	e011      	b.n	326c8 <_strtol_l.isra.0+0x60>
   326a4:	002e      	movs	r6, r5
   326a6:	e7e6      	b.n	32676 <_strtol_l.isra.0+0xe>
   326a8:	9301      	str	r3, [sp, #4]
   326aa:	2c2b      	cmp	r4, #43	; 0x2b
   326ac:	d1f3      	bne.n	32696 <_strtol_l.isra.0+0x2e>
   326ae:	782c      	ldrb	r4, [r5, #0]
   326b0:	1cb5      	adds	r5, r6, #2
   326b2:	e7f0      	b.n	32696 <_strtol_l.isra.0+0x2e>
   326b4:	2c30      	cmp	r4, #48	; 0x30
   326b6:	d12f      	bne.n	32718 <_strtol_l.isra.0+0xb0>
   326b8:	2220      	movs	r2, #32
   326ba:	782b      	ldrb	r3, [r5, #0]
   326bc:	4393      	bics	r3, r2
   326be:	2b58      	cmp	r3, #88	; 0x58
   326c0:	d151      	bne.n	32766 <_strtol_l.isra.0+0xfe>
   326c2:	2710      	movs	r7, #16
   326c4:	786c      	ldrb	r4, [r5, #1]
   326c6:	3502      	adds	r5, #2
   326c8:	9b01      	ldr	r3, [sp, #4]
   326ca:	4a29      	ldr	r2, [pc, #164]	; (32770 <_strtol_l.isra.0+0x108>)
   326cc:	0039      	movs	r1, r7
   326ce:	189e      	adds	r6, r3, r2
   326d0:	0030      	movs	r0, r6
   326d2:	f7fd ffbf 	bl	30654 <__aeabi_uidivmod>
   326d6:	0030      	movs	r0, r6
   326d8:	9104      	str	r1, [sp, #16]
   326da:	0039      	movs	r1, r7
   326dc:	f7fd ff34 	bl	30548 <__udivsi3>
   326e0:	2101      	movs	r1, #1
   326e2:	2300      	movs	r3, #0
   326e4:	4249      	negs	r1, r1
   326e6:	0002      	movs	r2, r0
   326e8:	468c      	mov	ip, r1
   326ea:	0018      	movs	r0, r3
   326ec:	0021      	movs	r1, r4
   326ee:	3930      	subs	r1, #48	; 0x30
   326f0:	2909      	cmp	r1, #9
   326f2:	d813      	bhi.n	3271c <_strtol_l.isra.0+0xb4>
   326f4:	000c      	movs	r4, r1
   326f6:	42a7      	cmp	r7, r4
   326f8:	dd1c      	ble.n	32734 <_strtol_l.isra.0+0xcc>
   326fa:	1c59      	adds	r1, r3, #1
   326fc:	d009      	beq.n	32712 <_strtol_l.isra.0+0xaa>
   326fe:	4663      	mov	r3, ip
   32700:	4282      	cmp	r2, r0
   32702:	d306      	bcc.n	32712 <_strtol_l.isra.0+0xaa>
   32704:	d102      	bne.n	3270c <_strtol_l.isra.0+0xa4>
   32706:	9904      	ldr	r1, [sp, #16]
   32708:	42a1      	cmp	r1, r4
   3270a:	db02      	blt.n	32712 <_strtol_l.isra.0+0xaa>
   3270c:	2301      	movs	r3, #1
   3270e:	4378      	muls	r0, r7
   32710:	1820      	adds	r0, r4, r0
   32712:	782c      	ldrb	r4, [r5, #0]
   32714:	3501      	adds	r5, #1
   32716:	e7e9      	b.n	326ec <_strtol_l.isra.0+0x84>
   32718:	270a      	movs	r7, #10
   3271a:	e7d5      	b.n	326c8 <_strtol_l.isra.0+0x60>
   3271c:	0021      	movs	r1, r4
   3271e:	3941      	subs	r1, #65	; 0x41
   32720:	2919      	cmp	r1, #25
   32722:	d801      	bhi.n	32728 <_strtol_l.isra.0+0xc0>
   32724:	3c37      	subs	r4, #55	; 0x37
   32726:	e7e6      	b.n	326f6 <_strtol_l.isra.0+0x8e>
   32728:	0021      	movs	r1, r4
   3272a:	3961      	subs	r1, #97	; 0x61
   3272c:	2919      	cmp	r1, #25
   3272e:	d801      	bhi.n	32734 <_strtol_l.isra.0+0xcc>
   32730:	3c57      	subs	r4, #87	; 0x57
   32732:	e7e0      	b.n	326f6 <_strtol_l.isra.0+0x8e>
   32734:	1c5a      	adds	r2, r3, #1
   32736:	d108      	bne.n	3274a <_strtol_l.isra.0+0xe2>
   32738:	9a05      	ldr	r2, [sp, #20]
   3273a:	3323      	adds	r3, #35	; 0x23
   3273c:	6013      	str	r3, [r2, #0]
   3273e:	9b02      	ldr	r3, [sp, #8]
   32740:	0030      	movs	r0, r6
   32742:	2b00      	cmp	r3, #0
   32744:	d10b      	bne.n	3275e <_strtol_l.isra.0+0xf6>
   32746:	b007      	add	sp, #28
   32748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3274a:	9a01      	ldr	r2, [sp, #4]
   3274c:	2a00      	cmp	r2, #0
   3274e:	d000      	beq.n	32752 <_strtol_l.isra.0+0xea>
   32750:	4240      	negs	r0, r0
   32752:	9a02      	ldr	r2, [sp, #8]
   32754:	2a00      	cmp	r2, #0
   32756:	d0f6      	beq.n	32746 <_strtol_l.isra.0+0xde>
   32758:	9a03      	ldr	r2, [sp, #12]
   3275a:	2b00      	cmp	r3, #0
   3275c:	d000      	beq.n	32760 <_strtol_l.isra.0+0xf8>
   3275e:	1e6a      	subs	r2, r5, #1
   32760:	9b02      	ldr	r3, [sp, #8]
   32762:	601a      	str	r2, [r3, #0]
   32764:	e7ef      	b.n	32746 <_strtol_l.isra.0+0xde>
   32766:	2430      	movs	r4, #48	; 0x30
   32768:	2f00      	cmp	r7, #0
   3276a:	d1ad      	bne.n	326c8 <_strtol_l.isra.0+0x60>
   3276c:	3708      	adds	r7, #8
   3276e:	e7ab      	b.n	326c8 <_strtol_l.isra.0+0x60>
   32770:	7fffffff 	.word	0x7fffffff

00032774 <strtol>:
   32774:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32776:	0013      	movs	r3, r2
   32778:	4a06      	ldr	r2, [pc, #24]	; (32794 <strtol+0x20>)
   3277a:	0005      	movs	r5, r0
   3277c:	6810      	ldr	r0, [r2, #0]
   3277e:	6a04      	ldr	r4, [r0, #32]
   32780:	2c00      	cmp	r4, #0
   32782:	d100      	bne.n	32786 <strtol+0x12>
   32784:	4c04      	ldr	r4, [pc, #16]	; (32798 <strtol+0x24>)
   32786:	000a      	movs	r2, r1
   32788:	9400      	str	r4, [sp, #0]
   3278a:	0029      	movs	r1, r5
   3278c:	f7ff ff6c 	bl	32668 <_strtol_l.isra.0>
   32790:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   32792:	46c0      	nop			; (mov r8, r8)
   32794:	20000110 	.word	0x20000110
   32798:	20000174 	.word	0x20000174

0003279c <_vsniprintf_r>:
   3279c:	b530      	push	{r4, r5, lr}
   3279e:	0014      	movs	r4, r2
   327a0:	b09b      	sub	sp, #108	; 0x6c
   327a2:	0005      	movs	r5, r0
   327a4:	001a      	movs	r2, r3
   327a6:	2c00      	cmp	r4, #0
   327a8:	da05      	bge.n	327b6 <_vsniprintf_r+0x1a>
   327aa:	238b      	movs	r3, #139	; 0x8b
   327ac:	6003      	str	r3, [r0, #0]
   327ae:	2001      	movs	r0, #1
   327b0:	4240      	negs	r0, r0
   327b2:	b01b      	add	sp, #108	; 0x6c
   327b4:	bd30      	pop	{r4, r5, pc}
   327b6:	2382      	movs	r3, #130	; 0x82
   327b8:	4668      	mov	r0, sp
   327ba:	009b      	lsls	r3, r3, #2
   327bc:	8183      	strh	r3, [r0, #12]
   327be:	2300      	movs	r3, #0
   327c0:	9100      	str	r1, [sp, #0]
   327c2:	9104      	str	r1, [sp, #16]
   327c4:	429c      	cmp	r4, r3
   327c6:	d000      	beq.n	327ca <_vsniprintf_r+0x2e>
   327c8:	1e63      	subs	r3, r4, #1
   327ca:	9302      	str	r3, [sp, #8]
   327cc:	9305      	str	r3, [sp, #20]
   327ce:	2301      	movs	r3, #1
   327d0:	4669      	mov	r1, sp
   327d2:	425b      	negs	r3, r3
   327d4:	81cb      	strh	r3, [r1, #14]
   327d6:	0028      	movs	r0, r5
   327d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   327da:	f000 fb63 	bl	32ea4 <_svfiprintf_r>
   327de:	1c43      	adds	r3, r0, #1
   327e0:	da01      	bge.n	327e6 <_vsniprintf_r+0x4a>
   327e2:	238b      	movs	r3, #139	; 0x8b
   327e4:	602b      	str	r3, [r5, #0]
   327e6:	2c00      	cmp	r4, #0
   327e8:	d0e3      	beq.n	327b2 <_vsniprintf_r+0x16>
   327ea:	2300      	movs	r3, #0
   327ec:	9a00      	ldr	r2, [sp, #0]
   327ee:	7013      	strb	r3, [r2, #0]
   327f0:	e7df      	b.n	327b2 <_vsniprintf_r+0x16>
	...

000327f4 <vsniprintf>:
   327f4:	b507      	push	{r0, r1, r2, lr}
   327f6:	9300      	str	r3, [sp, #0]
   327f8:	0013      	movs	r3, r2
   327fa:	000a      	movs	r2, r1
   327fc:	0001      	movs	r1, r0
   327fe:	4802      	ldr	r0, [pc, #8]	; (32808 <vsniprintf+0x14>)
   32800:	6800      	ldr	r0, [r0, #0]
   32802:	f7ff ffcb 	bl	3279c <_vsniprintf_r>
   32806:	bd0e      	pop	{r1, r2, r3, pc}
   32808:	20000110 	.word	0x20000110

0003280c <__swbuf_r>:
   3280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3280e:	0005      	movs	r5, r0
   32810:	000e      	movs	r6, r1
   32812:	0014      	movs	r4, r2
   32814:	2800      	cmp	r0, #0
   32816:	d004      	beq.n	32822 <__swbuf_r+0x16>
   32818:	6983      	ldr	r3, [r0, #24]
   3281a:	2b00      	cmp	r3, #0
   3281c:	d101      	bne.n	32822 <__swbuf_r+0x16>
   3281e:	f000 f9b9 	bl	32b94 <__sinit>
   32822:	4b22      	ldr	r3, [pc, #136]	; (328ac <__swbuf_r+0xa0>)
   32824:	429c      	cmp	r4, r3
   32826:	d12d      	bne.n	32884 <__swbuf_r+0x78>
   32828:	686c      	ldr	r4, [r5, #4]
   3282a:	69a3      	ldr	r3, [r4, #24]
   3282c:	60a3      	str	r3, [r4, #8]
   3282e:	89a3      	ldrh	r3, [r4, #12]
   32830:	071b      	lsls	r3, r3, #28
   32832:	d531      	bpl.n	32898 <__swbuf_r+0x8c>
   32834:	6923      	ldr	r3, [r4, #16]
   32836:	2b00      	cmp	r3, #0
   32838:	d02e      	beq.n	32898 <__swbuf_r+0x8c>
   3283a:	6823      	ldr	r3, [r4, #0]
   3283c:	6922      	ldr	r2, [r4, #16]
   3283e:	b2f7      	uxtb	r7, r6
   32840:	1a98      	subs	r0, r3, r2
   32842:	6963      	ldr	r3, [r4, #20]
   32844:	b2f6      	uxtb	r6, r6
   32846:	4298      	cmp	r0, r3
   32848:	db05      	blt.n	32856 <__swbuf_r+0x4a>
   3284a:	0021      	movs	r1, r4
   3284c:	0028      	movs	r0, r5
   3284e:	f000 f933 	bl	32ab8 <_fflush_r>
   32852:	2800      	cmp	r0, #0
   32854:	d126      	bne.n	328a4 <__swbuf_r+0x98>
   32856:	68a3      	ldr	r3, [r4, #8]
   32858:	3001      	adds	r0, #1
   3285a:	3b01      	subs	r3, #1
   3285c:	60a3      	str	r3, [r4, #8]
   3285e:	6823      	ldr	r3, [r4, #0]
   32860:	1c5a      	adds	r2, r3, #1
   32862:	6022      	str	r2, [r4, #0]
   32864:	701f      	strb	r7, [r3, #0]
   32866:	6963      	ldr	r3, [r4, #20]
   32868:	4298      	cmp	r0, r3
   3286a:	d004      	beq.n	32876 <__swbuf_r+0x6a>
   3286c:	89a3      	ldrh	r3, [r4, #12]
   3286e:	07db      	lsls	r3, r3, #31
   32870:	d51a      	bpl.n	328a8 <__swbuf_r+0x9c>
   32872:	2e0a      	cmp	r6, #10
   32874:	d118      	bne.n	328a8 <__swbuf_r+0x9c>
   32876:	0021      	movs	r1, r4
   32878:	0028      	movs	r0, r5
   3287a:	f000 f91d 	bl	32ab8 <_fflush_r>
   3287e:	2800      	cmp	r0, #0
   32880:	d012      	beq.n	328a8 <__swbuf_r+0x9c>
   32882:	e00f      	b.n	328a4 <__swbuf_r+0x98>
   32884:	4b0a      	ldr	r3, [pc, #40]	; (328b0 <__swbuf_r+0xa4>)
   32886:	429c      	cmp	r4, r3
   32888:	d101      	bne.n	3288e <__swbuf_r+0x82>
   3288a:	68ac      	ldr	r4, [r5, #8]
   3288c:	e7cd      	b.n	3282a <__swbuf_r+0x1e>
   3288e:	4b09      	ldr	r3, [pc, #36]	; (328b4 <__swbuf_r+0xa8>)
   32890:	429c      	cmp	r4, r3
   32892:	d1ca      	bne.n	3282a <__swbuf_r+0x1e>
   32894:	68ec      	ldr	r4, [r5, #12]
   32896:	e7c8      	b.n	3282a <__swbuf_r+0x1e>
   32898:	0021      	movs	r1, r4
   3289a:	0028      	movs	r0, r5
   3289c:	f000 f80c 	bl	328b8 <__swsetup_r>
   328a0:	2800      	cmp	r0, #0
   328a2:	d0ca      	beq.n	3283a <__swbuf_r+0x2e>
   328a4:	2601      	movs	r6, #1
   328a6:	4276      	negs	r6, r6
   328a8:	0030      	movs	r0, r6
   328aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   328ac:	00037540 	.word	0x00037540
   328b0:	00037560 	.word	0x00037560
   328b4:	00037520 	.word	0x00037520

000328b8 <__swsetup_r>:
   328b8:	4b36      	ldr	r3, [pc, #216]	; (32994 <__swsetup_r+0xdc>)
   328ba:	b570      	push	{r4, r5, r6, lr}
   328bc:	681d      	ldr	r5, [r3, #0]
   328be:	0006      	movs	r6, r0
   328c0:	000c      	movs	r4, r1
   328c2:	2d00      	cmp	r5, #0
   328c4:	d005      	beq.n	328d2 <__swsetup_r+0x1a>
   328c6:	69ab      	ldr	r3, [r5, #24]
   328c8:	2b00      	cmp	r3, #0
   328ca:	d102      	bne.n	328d2 <__swsetup_r+0x1a>
   328cc:	0028      	movs	r0, r5
   328ce:	f000 f961 	bl	32b94 <__sinit>
   328d2:	4b31      	ldr	r3, [pc, #196]	; (32998 <__swsetup_r+0xe0>)
   328d4:	429c      	cmp	r4, r3
   328d6:	d10f      	bne.n	328f8 <__swsetup_r+0x40>
   328d8:	686c      	ldr	r4, [r5, #4]
   328da:	230c      	movs	r3, #12
   328dc:	5ee2      	ldrsh	r2, [r4, r3]
   328de:	b293      	uxth	r3, r2
   328e0:	0719      	lsls	r1, r3, #28
   328e2:	d42d      	bmi.n	32940 <__swsetup_r+0x88>
   328e4:	06d9      	lsls	r1, r3, #27
   328e6:	d411      	bmi.n	3290c <__swsetup_r+0x54>
   328e8:	2309      	movs	r3, #9
   328ea:	2001      	movs	r0, #1
   328ec:	6033      	str	r3, [r6, #0]
   328ee:	3337      	adds	r3, #55	; 0x37
   328f0:	4313      	orrs	r3, r2
   328f2:	81a3      	strh	r3, [r4, #12]
   328f4:	4240      	negs	r0, r0
   328f6:	bd70      	pop	{r4, r5, r6, pc}
   328f8:	4b28      	ldr	r3, [pc, #160]	; (3299c <__swsetup_r+0xe4>)
   328fa:	429c      	cmp	r4, r3
   328fc:	d101      	bne.n	32902 <__swsetup_r+0x4a>
   328fe:	68ac      	ldr	r4, [r5, #8]
   32900:	e7eb      	b.n	328da <__swsetup_r+0x22>
   32902:	4b27      	ldr	r3, [pc, #156]	; (329a0 <__swsetup_r+0xe8>)
   32904:	429c      	cmp	r4, r3
   32906:	d1e8      	bne.n	328da <__swsetup_r+0x22>
   32908:	68ec      	ldr	r4, [r5, #12]
   3290a:	e7e6      	b.n	328da <__swsetup_r+0x22>
   3290c:	075b      	lsls	r3, r3, #29
   3290e:	d513      	bpl.n	32938 <__swsetup_r+0x80>
   32910:	6b61      	ldr	r1, [r4, #52]	; 0x34
   32912:	2900      	cmp	r1, #0
   32914:	d008      	beq.n	32928 <__swsetup_r+0x70>
   32916:	0023      	movs	r3, r4
   32918:	3344      	adds	r3, #68	; 0x44
   3291a:	4299      	cmp	r1, r3
   3291c:	d002      	beq.n	32924 <__swsetup_r+0x6c>
   3291e:	0030      	movs	r0, r6
   32920:	f7ff fc78 	bl	32214 <_free_r>
   32924:	2300      	movs	r3, #0
   32926:	6363      	str	r3, [r4, #52]	; 0x34
   32928:	2224      	movs	r2, #36	; 0x24
   3292a:	89a3      	ldrh	r3, [r4, #12]
   3292c:	4393      	bics	r3, r2
   3292e:	81a3      	strh	r3, [r4, #12]
   32930:	2300      	movs	r3, #0
   32932:	6063      	str	r3, [r4, #4]
   32934:	6923      	ldr	r3, [r4, #16]
   32936:	6023      	str	r3, [r4, #0]
   32938:	2308      	movs	r3, #8
   3293a:	89a2      	ldrh	r2, [r4, #12]
   3293c:	4313      	orrs	r3, r2
   3293e:	81a3      	strh	r3, [r4, #12]
   32940:	6923      	ldr	r3, [r4, #16]
   32942:	2b00      	cmp	r3, #0
   32944:	d10b      	bne.n	3295e <__swsetup_r+0xa6>
   32946:	21a0      	movs	r1, #160	; 0xa0
   32948:	2280      	movs	r2, #128	; 0x80
   3294a:	89a3      	ldrh	r3, [r4, #12]
   3294c:	0089      	lsls	r1, r1, #2
   3294e:	0092      	lsls	r2, r2, #2
   32950:	400b      	ands	r3, r1
   32952:	4293      	cmp	r3, r2
   32954:	d003      	beq.n	3295e <__swsetup_r+0xa6>
   32956:	0021      	movs	r1, r4
   32958:	0030      	movs	r0, r6
   3295a:	f000 f9e9 	bl	32d30 <__smakebuf_r>
   3295e:	2301      	movs	r3, #1
   32960:	89a2      	ldrh	r2, [r4, #12]
   32962:	4013      	ands	r3, r2
   32964:	d011      	beq.n	3298a <__swsetup_r+0xd2>
   32966:	2300      	movs	r3, #0
   32968:	60a3      	str	r3, [r4, #8]
   3296a:	6963      	ldr	r3, [r4, #20]
   3296c:	425b      	negs	r3, r3
   3296e:	61a3      	str	r3, [r4, #24]
   32970:	2000      	movs	r0, #0
   32972:	6923      	ldr	r3, [r4, #16]
   32974:	4283      	cmp	r3, r0
   32976:	d1be      	bne.n	328f6 <__swsetup_r+0x3e>
   32978:	230c      	movs	r3, #12
   3297a:	5ee2      	ldrsh	r2, [r4, r3]
   3297c:	0613      	lsls	r3, r2, #24
   3297e:	d5ba      	bpl.n	328f6 <__swsetup_r+0x3e>
   32980:	2340      	movs	r3, #64	; 0x40
   32982:	4313      	orrs	r3, r2
   32984:	81a3      	strh	r3, [r4, #12]
   32986:	3801      	subs	r0, #1
   32988:	e7b5      	b.n	328f6 <__swsetup_r+0x3e>
   3298a:	0792      	lsls	r2, r2, #30
   3298c:	d400      	bmi.n	32990 <__swsetup_r+0xd8>
   3298e:	6963      	ldr	r3, [r4, #20]
   32990:	60a3      	str	r3, [r4, #8]
   32992:	e7ed      	b.n	32970 <__swsetup_r+0xb8>
   32994:	20000110 	.word	0x20000110
   32998:	00037540 	.word	0x00037540
   3299c:	00037560 	.word	0x00037560
   329a0:	00037520 	.word	0x00037520

000329a4 <__sflush_r>:
   329a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   329a6:	898a      	ldrh	r2, [r1, #12]
   329a8:	0005      	movs	r5, r0
   329aa:	000c      	movs	r4, r1
   329ac:	0713      	lsls	r3, r2, #28
   329ae:	d460      	bmi.n	32a72 <__sflush_r+0xce>
   329b0:	684b      	ldr	r3, [r1, #4]
   329b2:	2b00      	cmp	r3, #0
   329b4:	dc04      	bgt.n	329c0 <__sflush_r+0x1c>
   329b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   329b8:	2b00      	cmp	r3, #0
   329ba:	dc01      	bgt.n	329c0 <__sflush_r+0x1c>
   329bc:	2000      	movs	r0, #0
   329be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   329c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   329c2:	2f00      	cmp	r7, #0
   329c4:	d0fa      	beq.n	329bc <__sflush_r+0x18>
   329c6:	2300      	movs	r3, #0
   329c8:	682e      	ldr	r6, [r5, #0]
   329ca:	602b      	str	r3, [r5, #0]
   329cc:	2380      	movs	r3, #128	; 0x80
   329ce:	015b      	lsls	r3, r3, #5
   329d0:	401a      	ands	r2, r3
   329d2:	d034      	beq.n	32a3e <__sflush_r+0x9a>
   329d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   329d6:	89a3      	ldrh	r3, [r4, #12]
   329d8:	075b      	lsls	r3, r3, #29
   329da:	d506      	bpl.n	329ea <__sflush_r+0x46>
   329dc:	6863      	ldr	r3, [r4, #4]
   329de:	1ac0      	subs	r0, r0, r3
   329e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   329e2:	2b00      	cmp	r3, #0
   329e4:	d001      	beq.n	329ea <__sflush_r+0x46>
   329e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   329e8:	1ac0      	subs	r0, r0, r3
   329ea:	0002      	movs	r2, r0
   329ec:	6a21      	ldr	r1, [r4, #32]
   329ee:	2300      	movs	r3, #0
   329f0:	0028      	movs	r0, r5
   329f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   329f4:	47b8      	blx	r7
   329f6:	89a1      	ldrh	r1, [r4, #12]
   329f8:	1c43      	adds	r3, r0, #1
   329fa:	d106      	bne.n	32a0a <__sflush_r+0x66>
   329fc:	682b      	ldr	r3, [r5, #0]
   329fe:	2b1d      	cmp	r3, #29
   32a00:	d831      	bhi.n	32a66 <__sflush_r+0xc2>
   32a02:	4a2c      	ldr	r2, [pc, #176]	; (32ab4 <__sflush_r+0x110>)
   32a04:	40da      	lsrs	r2, r3
   32a06:	07d3      	lsls	r3, r2, #31
   32a08:	d52d      	bpl.n	32a66 <__sflush_r+0xc2>
   32a0a:	2300      	movs	r3, #0
   32a0c:	6063      	str	r3, [r4, #4]
   32a0e:	6923      	ldr	r3, [r4, #16]
   32a10:	6023      	str	r3, [r4, #0]
   32a12:	04cb      	lsls	r3, r1, #19
   32a14:	d505      	bpl.n	32a22 <__sflush_r+0x7e>
   32a16:	1c43      	adds	r3, r0, #1
   32a18:	d102      	bne.n	32a20 <__sflush_r+0x7c>
   32a1a:	682b      	ldr	r3, [r5, #0]
   32a1c:	2b00      	cmp	r3, #0
   32a1e:	d100      	bne.n	32a22 <__sflush_r+0x7e>
   32a20:	6560      	str	r0, [r4, #84]	; 0x54
   32a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
   32a24:	602e      	str	r6, [r5, #0]
   32a26:	2900      	cmp	r1, #0
   32a28:	d0c8      	beq.n	329bc <__sflush_r+0x18>
   32a2a:	0023      	movs	r3, r4
   32a2c:	3344      	adds	r3, #68	; 0x44
   32a2e:	4299      	cmp	r1, r3
   32a30:	d002      	beq.n	32a38 <__sflush_r+0x94>
   32a32:	0028      	movs	r0, r5
   32a34:	f7ff fbee 	bl	32214 <_free_r>
   32a38:	2000      	movs	r0, #0
   32a3a:	6360      	str	r0, [r4, #52]	; 0x34
   32a3c:	e7bf      	b.n	329be <__sflush_r+0x1a>
   32a3e:	2301      	movs	r3, #1
   32a40:	6a21      	ldr	r1, [r4, #32]
   32a42:	0028      	movs	r0, r5
   32a44:	47b8      	blx	r7
   32a46:	1c43      	adds	r3, r0, #1
   32a48:	d1c5      	bne.n	329d6 <__sflush_r+0x32>
   32a4a:	682b      	ldr	r3, [r5, #0]
   32a4c:	2b00      	cmp	r3, #0
   32a4e:	d0c2      	beq.n	329d6 <__sflush_r+0x32>
   32a50:	2b1d      	cmp	r3, #29
   32a52:	d001      	beq.n	32a58 <__sflush_r+0xb4>
   32a54:	2b16      	cmp	r3, #22
   32a56:	d101      	bne.n	32a5c <__sflush_r+0xb8>
   32a58:	602e      	str	r6, [r5, #0]
   32a5a:	e7af      	b.n	329bc <__sflush_r+0x18>
   32a5c:	2340      	movs	r3, #64	; 0x40
   32a5e:	89a2      	ldrh	r2, [r4, #12]
   32a60:	4313      	orrs	r3, r2
   32a62:	81a3      	strh	r3, [r4, #12]
   32a64:	e7ab      	b.n	329be <__sflush_r+0x1a>
   32a66:	2340      	movs	r3, #64	; 0x40
   32a68:	430b      	orrs	r3, r1
   32a6a:	2001      	movs	r0, #1
   32a6c:	81a3      	strh	r3, [r4, #12]
   32a6e:	4240      	negs	r0, r0
   32a70:	e7a5      	b.n	329be <__sflush_r+0x1a>
   32a72:	690f      	ldr	r7, [r1, #16]
   32a74:	2f00      	cmp	r7, #0
   32a76:	d0a1      	beq.n	329bc <__sflush_r+0x18>
   32a78:	680b      	ldr	r3, [r1, #0]
   32a7a:	600f      	str	r7, [r1, #0]
   32a7c:	1bdb      	subs	r3, r3, r7
   32a7e:	9301      	str	r3, [sp, #4]
   32a80:	2300      	movs	r3, #0
   32a82:	0792      	lsls	r2, r2, #30
   32a84:	d100      	bne.n	32a88 <__sflush_r+0xe4>
   32a86:	694b      	ldr	r3, [r1, #20]
   32a88:	60a3      	str	r3, [r4, #8]
   32a8a:	9b01      	ldr	r3, [sp, #4]
   32a8c:	2b00      	cmp	r3, #0
   32a8e:	dc00      	bgt.n	32a92 <__sflush_r+0xee>
   32a90:	e794      	b.n	329bc <__sflush_r+0x18>
   32a92:	9b01      	ldr	r3, [sp, #4]
   32a94:	003a      	movs	r2, r7
   32a96:	6a21      	ldr	r1, [r4, #32]
   32a98:	0028      	movs	r0, r5
   32a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   32a9c:	47b0      	blx	r6
   32a9e:	2800      	cmp	r0, #0
   32aa0:	dc03      	bgt.n	32aaa <__sflush_r+0x106>
   32aa2:	2340      	movs	r3, #64	; 0x40
   32aa4:	89a2      	ldrh	r2, [r4, #12]
   32aa6:	4313      	orrs	r3, r2
   32aa8:	e7df      	b.n	32a6a <__sflush_r+0xc6>
   32aaa:	9b01      	ldr	r3, [sp, #4]
   32aac:	183f      	adds	r7, r7, r0
   32aae:	1a1b      	subs	r3, r3, r0
   32ab0:	9301      	str	r3, [sp, #4]
   32ab2:	e7ea      	b.n	32a8a <__sflush_r+0xe6>
   32ab4:	20400001 	.word	0x20400001

00032ab8 <_fflush_r>:
   32ab8:	690b      	ldr	r3, [r1, #16]
   32aba:	b570      	push	{r4, r5, r6, lr}
   32abc:	0005      	movs	r5, r0
   32abe:	000c      	movs	r4, r1
   32ac0:	2b00      	cmp	r3, #0
   32ac2:	d101      	bne.n	32ac8 <_fflush_r+0x10>
   32ac4:	2000      	movs	r0, #0
   32ac6:	bd70      	pop	{r4, r5, r6, pc}
   32ac8:	2800      	cmp	r0, #0
   32aca:	d004      	beq.n	32ad6 <_fflush_r+0x1e>
   32acc:	6983      	ldr	r3, [r0, #24]
   32ace:	2b00      	cmp	r3, #0
   32ad0:	d101      	bne.n	32ad6 <_fflush_r+0x1e>
   32ad2:	f000 f85f 	bl	32b94 <__sinit>
   32ad6:	4b0b      	ldr	r3, [pc, #44]	; (32b04 <_fflush_r+0x4c>)
   32ad8:	429c      	cmp	r4, r3
   32ada:	d109      	bne.n	32af0 <_fflush_r+0x38>
   32adc:	686c      	ldr	r4, [r5, #4]
   32ade:	220c      	movs	r2, #12
   32ae0:	5ea3      	ldrsh	r3, [r4, r2]
   32ae2:	2b00      	cmp	r3, #0
   32ae4:	d0ee      	beq.n	32ac4 <_fflush_r+0xc>
   32ae6:	0021      	movs	r1, r4
   32ae8:	0028      	movs	r0, r5
   32aea:	f7ff ff5b 	bl	329a4 <__sflush_r>
   32aee:	e7ea      	b.n	32ac6 <_fflush_r+0xe>
   32af0:	4b05      	ldr	r3, [pc, #20]	; (32b08 <_fflush_r+0x50>)
   32af2:	429c      	cmp	r4, r3
   32af4:	d101      	bne.n	32afa <_fflush_r+0x42>
   32af6:	68ac      	ldr	r4, [r5, #8]
   32af8:	e7f1      	b.n	32ade <_fflush_r+0x26>
   32afa:	4b04      	ldr	r3, [pc, #16]	; (32b0c <_fflush_r+0x54>)
   32afc:	429c      	cmp	r4, r3
   32afe:	d1ee      	bne.n	32ade <_fflush_r+0x26>
   32b00:	68ec      	ldr	r4, [r5, #12]
   32b02:	e7ec      	b.n	32ade <_fflush_r+0x26>
   32b04:	00037540 	.word	0x00037540
   32b08:	00037560 	.word	0x00037560
   32b0c:	00037520 	.word	0x00037520

00032b10 <_cleanup_r>:
   32b10:	b510      	push	{r4, lr}
   32b12:	4902      	ldr	r1, [pc, #8]	; (32b1c <_cleanup_r+0xc>)
   32b14:	f000 f8b2 	bl	32c7c <_fwalk_reent>
   32b18:	bd10      	pop	{r4, pc}
   32b1a:	46c0      	nop			; (mov r8, r8)
   32b1c:	00032ab9 	.word	0x00032ab9

00032b20 <std.isra.0>:
   32b20:	2300      	movs	r3, #0
   32b22:	b510      	push	{r4, lr}
   32b24:	0004      	movs	r4, r0
   32b26:	6003      	str	r3, [r0, #0]
   32b28:	6043      	str	r3, [r0, #4]
   32b2a:	6083      	str	r3, [r0, #8]
   32b2c:	8181      	strh	r1, [r0, #12]
   32b2e:	6643      	str	r3, [r0, #100]	; 0x64
   32b30:	81c2      	strh	r2, [r0, #14]
   32b32:	6103      	str	r3, [r0, #16]
   32b34:	6143      	str	r3, [r0, #20]
   32b36:	6183      	str	r3, [r0, #24]
   32b38:	0019      	movs	r1, r3
   32b3a:	2208      	movs	r2, #8
   32b3c:	305c      	adds	r0, #92	; 0x5c
   32b3e:	f7ff fb60 	bl	32202 <memset>
   32b42:	4b05      	ldr	r3, [pc, #20]	; (32b58 <std.isra.0+0x38>)
   32b44:	6224      	str	r4, [r4, #32]
   32b46:	6263      	str	r3, [r4, #36]	; 0x24
   32b48:	4b04      	ldr	r3, [pc, #16]	; (32b5c <std.isra.0+0x3c>)
   32b4a:	62a3      	str	r3, [r4, #40]	; 0x28
   32b4c:	4b04      	ldr	r3, [pc, #16]	; (32b60 <std.isra.0+0x40>)
   32b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
   32b50:	4b04      	ldr	r3, [pc, #16]	; (32b64 <std.isra.0+0x44>)
   32b52:	6323      	str	r3, [r4, #48]	; 0x30
   32b54:	bd10      	pop	{r4, pc}
   32b56:	46c0      	nop			; (mov r8, r8)
   32b58:	000333bd 	.word	0x000333bd
   32b5c:	000333e5 	.word	0x000333e5
   32b60:	0003341d 	.word	0x0003341d
   32b64:	00033449 	.word	0x00033449

00032b68 <__sfmoreglue>:
   32b68:	b570      	push	{r4, r5, r6, lr}
   32b6a:	2568      	movs	r5, #104	; 0x68
   32b6c:	1e4a      	subs	r2, r1, #1
   32b6e:	4355      	muls	r5, r2
   32b70:	000e      	movs	r6, r1
   32b72:	0029      	movs	r1, r5
   32b74:	3174      	adds	r1, #116	; 0x74
   32b76:	f7ff fb97 	bl	322a8 <_malloc_r>
   32b7a:	1e04      	subs	r4, r0, #0
   32b7c:	d008      	beq.n	32b90 <__sfmoreglue+0x28>
   32b7e:	2100      	movs	r1, #0
   32b80:	002a      	movs	r2, r5
   32b82:	6001      	str	r1, [r0, #0]
   32b84:	6046      	str	r6, [r0, #4]
   32b86:	300c      	adds	r0, #12
   32b88:	60a0      	str	r0, [r4, #8]
   32b8a:	3268      	adds	r2, #104	; 0x68
   32b8c:	f7ff fb39 	bl	32202 <memset>
   32b90:	0020      	movs	r0, r4
   32b92:	bd70      	pop	{r4, r5, r6, pc}

00032b94 <__sinit>:
   32b94:	6983      	ldr	r3, [r0, #24]
   32b96:	b513      	push	{r0, r1, r4, lr}
   32b98:	0004      	movs	r4, r0
   32b9a:	2b00      	cmp	r3, #0
   32b9c:	d128      	bne.n	32bf0 <__sinit+0x5c>
   32b9e:	6483      	str	r3, [r0, #72]	; 0x48
   32ba0:	64c3      	str	r3, [r0, #76]	; 0x4c
   32ba2:	6503      	str	r3, [r0, #80]	; 0x50
   32ba4:	4b13      	ldr	r3, [pc, #76]	; (32bf4 <__sinit+0x60>)
   32ba6:	4a14      	ldr	r2, [pc, #80]	; (32bf8 <__sinit+0x64>)
   32ba8:	681b      	ldr	r3, [r3, #0]
   32baa:	6282      	str	r2, [r0, #40]	; 0x28
   32bac:	9301      	str	r3, [sp, #4]
   32bae:	4298      	cmp	r0, r3
   32bb0:	d101      	bne.n	32bb6 <__sinit+0x22>
   32bb2:	2301      	movs	r3, #1
   32bb4:	6183      	str	r3, [r0, #24]
   32bb6:	0020      	movs	r0, r4
   32bb8:	f000 f820 	bl	32bfc <__sfp>
   32bbc:	6060      	str	r0, [r4, #4]
   32bbe:	0020      	movs	r0, r4
   32bc0:	f000 f81c 	bl	32bfc <__sfp>
   32bc4:	60a0      	str	r0, [r4, #8]
   32bc6:	0020      	movs	r0, r4
   32bc8:	f000 f818 	bl	32bfc <__sfp>
   32bcc:	2200      	movs	r2, #0
   32bce:	60e0      	str	r0, [r4, #12]
   32bd0:	2104      	movs	r1, #4
   32bd2:	6860      	ldr	r0, [r4, #4]
   32bd4:	f7ff ffa4 	bl	32b20 <std.isra.0>
   32bd8:	2201      	movs	r2, #1
   32bda:	2109      	movs	r1, #9
   32bdc:	68a0      	ldr	r0, [r4, #8]
   32bde:	f7ff ff9f 	bl	32b20 <std.isra.0>
   32be2:	2202      	movs	r2, #2
   32be4:	2112      	movs	r1, #18
   32be6:	68e0      	ldr	r0, [r4, #12]
   32be8:	f7ff ff9a 	bl	32b20 <std.isra.0>
   32bec:	2301      	movs	r3, #1
   32bee:	61a3      	str	r3, [r4, #24]
   32bf0:	bd13      	pop	{r0, r1, r4, pc}
   32bf2:	46c0      	nop			; (mov r8, r8)
   32bf4:	0003751c 	.word	0x0003751c
   32bf8:	00032b11 	.word	0x00032b11

00032bfc <__sfp>:
   32bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32bfe:	4b1e      	ldr	r3, [pc, #120]	; (32c78 <__sfp+0x7c>)
   32c00:	0007      	movs	r7, r0
   32c02:	681e      	ldr	r6, [r3, #0]
   32c04:	69b3      	ldr	r3, [r6, #24]
   32c06:	2b00      	cmp	r3, #0
   32c08:	d102      	bne.n	32c10 <__sfp+0x14>
   32c0a:	0030      	movs	r0, r6
   32c0c:	f7ff ffc2 	bl	32b94 <__sinit>
   32c10:	3648      	adds	r6, #72	; 0x48
   32c12:	68b4      	ldr	r4, [r6, #8]
   32c14:	6873      	ldr	r3, [r6, #4]
   32c16:	3b01      	subs	r3, #1
   32c18:	d504      	bpl.n	32c24 <__sfp+0x28>
   32c1a:	6833      	ldr	r3, [r6, #0]
   32c1c:	2b00      	cmp	r3, #0
   32c1e:	d007      	beq.n	32c30 <__sfp+0x34>
   32c20:	6836      	ldr	r6, [r6, #0]
   32c22:	e7f6      	b.n	32c12 <__sfp+0x16>
   32c24:	220c      	movs	r2, #12
   32c26:	5ea5      	ldrsh	r5, [r4, r2]
   32c28:	2d00      	cmp	r5, #0
   32c2a:	d00d      	beq.n	32c48 <__sfp+0x4c>
   32c2c:	3468      	adds	r4, #104	; 0x68
   32c2e:	e7f2      	b.n	32c16 <__sfp+0x1a>
   32c30:	2104      	movs	r1, #4
   32c32:	0038      	movs	r0, r7
   32c34:	f7ff ff98 	bl	32b68 <__sfmoreglue>
   32c38:	6030      	str	r0, [r6, #0]
   32c3a:	2800      	cmp	r0, #0
   32c3c:	d1f0      	bne.n	32c20 <__sfp+0x24>
   32c3e:	230c      	movs	r3, #12
   32c40:	0004      	movs	r4, r0
   32c42:	603b      	str	r3, [r7, #0]
   32c44:	0020      	movs	r0, r4
   32c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32c48:	2301      	movs	r3, #1
   32c4a:	0020      	movs	r0, r4
   32c4c:	425b      	negs	r3, r3
   32c4e:	81e3      	strh	r3, [r4, #14]
   32c50:	3302      	adds	r3, #2
   32c52:	81a3      	strh	r3, [r4, #12]
   32c54:	6665      	str	r5, [r4, #100]	; 0x64
   32c56:	6025      	str	r5, [r4, #0]
   32c58:	60a5      	str	r5, [r4, #8]
   32c5a:	6065      	str	r5, [r4, #4]
   32c5c:	6125      	str	r5, [r4, #16]
   32c5e:	6165      	str	r5, [r4, #20]
   32c60:	61a5      	str	r5, [r4, #24]
   32c62:	2208      	movs	r2, #8
   32c64:	0029      	movs	r1, r5
   32c66:	305c      	adds	r0, #92	; 0x5c
   32c68:	f7ff facb 	bl	32202 <memset>
   32c6c:	6365      	str	r5, [r4, #52]	; 0x34
   32c6e:	63a5      	str	r5, [r4, #56]	; 0x38
   32c70:	64a5      	str	r5, [r4, #72]	; 0x48
   32c72:	64e5      	str	r5, [r4, #76]	; 0x4c
   32c74:	e7e6      	b.n	32c44 <__sfp+0x48>
   32c76:	46c0      	nop			; (mov r8, r8)
   32c78:	0003751c 	.word	0x0003751c

00032c7c <_fwalk_reent>:
   32c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32c7e:	0004      	movs	r4, r0
   32c80:	0007      	movs	r7, r0
   32c82:	2600      	movs	r6, #0
   32c84:	9101      	str	r1, [sp, #4]
   32c86:	3448      	adds	r4, #72	; 0x48
   32c88:	2c00      	cmp	r4, #0
   32c8a:	d101      	bne.n	32c90 <_fwalk_reent+0x14>
   32c8c:	0030      	movs	r0, r6
   32c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   32c90:	6863      	ldr	r3, [r4, #4]
   32c92:	68a5      	ldr	r5, [r4, #8]
   32c94:	9300      	str	r3, [sp, #0]
   32c96:	9b00      	ldr	r3, [sp, #0]
   32c98:	3b01      	subs	r3, #1
   32c9a:	9300      	str	r3, [sp, #0]
   32c9c:	d501      	bpl.n	32ca2 <_fwalk_reent+0x26>
   32c9e:	6824      	ldr	r4, [r4, #0]
   32ca0:	e7f2      	b.n	32c88 <_fwalk_reent+0xc>
   32ca2:	89ab      	ldrh	r3, [r5, #12]
   32ca4:	2b01      	cmp	r3, #1
   32ca6:	d908      	bls.n	32cba <_fwalk_reent+0x3e>
   32ca8:	220e      	movs	r2, #14
   32caa:	5eab      	ldrsh	r3, [r5, r2]
   32cac:	3301      	adds	r3, #1
   32cae:	d004      	beq.n	32cba <_fwalk_reent+0x3e>
   32cb0:	0029      	movs	r1, r5
   32cb2:	0038      	movs	r0, r7
   32cb4:	9b01      	ldr	r3, [sp, #4]
   32cb6:	4798      	blx	r3
   32cb8:	4306      	orrs	r6, r0
   32cba:	3568      	adds	r5, #104	; 0x68
   32cbc:	e7eb      	b.n	32c96 <_fwalk_reent+0x1a>

00032cbe <__locale_ctype_ptr_l>:
   32cbe:	30ec      	adds	r0, #236	; 0xec
   32cc0:	6800      	ldr	r0, [r0, #0]
   32cc2:	4770      	bx	lr

00032cc4 <__locale_ctype_ptr>:
   32cc4:	4b04      	ldr	r3, [pc, #16]	; (32cd8 <__locale_ctype_ptr+0x14>)
   32cc6:	681b      	ldr	r3, [r3, #0]
   32cc8:	6a1b      	ldr	r3, [r3, #32]
   32cca:	2b00      	cmp	r3, #0
   32ccc:	d100      	bne.n	32cd0 <__locale_ctype_ptr+0xc>
   32cce:	4b03      	ldr	r3, [pc, #12]	; (32cdc <__locale_ctype_ptr+0x18>)
   32cd0:	33ec      	adds	r3, #236	; 0xec
   32cd2:	6818      	ldr	r0, [r3, #0]
   32cd4:	4770      	bx	lr
   32cd6:	46c0      	nop			; (mov r8, r8)
   32cd8:	20000110 	.word	0x20000110
   32cdc:	20000174 	.word	0x20000174

00032ce0 <__swhatbuf_r>:
   32ce0:	b570      	push	{r4, r5, r6, lr}
   32ce2:	000e      	movs	r6, r1
   32ce4:	001d      	movs	r5, r3
   32ce6:	230e      	movs	r3, #14
   32ce8:	5ec9      	ldrsh	r1, [r1, r3]
   32cea:	b090      	sub	sp, #64	; 0x40
   32cec:	0014      	movs	r4, r2
   32cee:	2900      	cmp	r1, #0
   32cf0:	da07      	bge.n	32d02 <__swhatbuf_r+0x22>
   32cf2:	2300      	movs	r3, #0
   32cf4:	602b      	str	r3, [r5, #0]
   32cf6:	89b3      	ldrh	r3, [r6, #12]
   32cf8:	061b      	lsls	r3, r3, #24
   32cfa:	d411      	bmi.n	32d20 <__swhatbuf_r+0x40>
   32cfc:	2380      	movs	r3, #128	; 0x80
   32cfe:	00db      	lsls	r3, r3, #3
   32d00:	e00f      	b.n	32d22 <__swhatbuf_r+0x42>
   32d02:	aa01      	add	r2, sp, #4
   32d04:	f000 fbe6 	bl	334d4 <_fstat_r>
   32d08:	2800      	cmp	r0, #0
   32d0a:	dbf2      	blt.n	32cf2 <__swhatbuf_r+0x12>
   32d0c:	22f0      	movs	r2, #240	; 0xf0
   32d0e:	9b02      	ldr	r3, [sp, #8]
   32d10:	0212      	lsls	r2, r2, #8
   32d12:	4013      	ands	r3, r2
   32d14:	4a05      	ldr	r2, [pc, #20]	; (32d2c <__swhatbuf_r+0x4c>)
   32d16:	189b      	adds	r3, r3, r2
   32d18:	425a      	negs	r2, r3
   32d1a:	4153      	adcs	r3, r2
   32d1c:	602b      	str	r3, [r5, #0]
   32d1e:	e7ed      	b.n	32cfc <__swhatbuf_r+0x1c>
   32d20:	2340      	movs	r3, #64	; 0x40
   32d22:	2000      	movs	r0, #0
   32d24:	6023      	str	r3, [r4, #0]
   32d26:	b010      	add	sp, #64	; 0x40
   32d28:	bd70      	pop	{r4, r5, r6, pc}
   32d2a:	46c0      	nop			; (mov r8, r8)
   32d2c:	ffffe000 	.word	0xffffe000

00032d30 <__smakebuf_r>:
   32d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32d32:	2602      	movs	r6, #2
   32d34:	898b      	ldrh	r3, [r1, #12]
   32d36:	0005      	movs	r5, r0
   32d38:	000c      	movs	r4, r1
   32d3a:	4233      	tst	r3, r6
   32d3c:	d006      	beq.n	32d4c <__smakebuf_r+0x1c>
   32d3e:	0023      	movs	r3, r4
   32d40:	3347      	adds	r3, #71	; 0x47
   32d42:	6023      	str	r3, [r4, #0]
   32d44:	6123      	str	r3, [r4, #16]
   32d46:	2301      	movs	r3, #1
   32d48:	6163      	str	r3, [r4, #20]
   32d4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   32d4c:	ab01      	add	r3, sp, #4
   32d4e:	466a      	mov	r2, sp
   32d50:	f7ff ffc6 	bl	32ce0 <__swhatbuf_r>
   32d54:	9900      	ldr	r1, [sp, #0]
   32d56:	0007      	movs	r7, r0
   32d58:	0028      	movs	r0, r5
   32d5a:	f7ff faa5 	bl	322a8 <_malloc_r>
   32d5e:	2800      	cmp	r0, #0
   32d60:	d108      	bne.n	32d74 <__smakebuf_r+0x44>
   32d62:	220c      	movs	r2, #12
   32d64:	5ea3      	ldrsh	r3, [r4, r2]
   32d66:	059a      	lsls	r2, r3, #22
   32d68:	d4ef      	bmi.n	32d4a <__smakebuf_r+0x1a>
   32d6a:	2203      	movs	r2, #3
   32d6c:	4393      	bics	r3, r2
   32d6e:	431e      	orrs	r6, r3
   32d70:	81a6      	strh	r6, [r4, #12]
   32d72:	e7e4      	b.n	32d3e <__smakebuf_r+0xe>
   32d74:	4b0f      	ldr	r3, [pc, #60]	; (32db4 <__smakebuf_r+0x84>)
   32d76:	62ab      	str	r3, [r5, #40]	; 0x28
   32d78:	2380      	movs	r3, #128	; 0x80
   32d7a:	89a2      	ldrh	r2, [r4, #12]
   32d7c:	6020      	str	r0, [r4, #0]
   32d7e:	4313      	orrs	r3, r2
   32d80:	81a3      	strh	r3, [r4, #12]
   32d82:	9b00      	ldr	r3, [sp, #0]
   32d84:	6120      	str	r0, [r4, #16]
   32d86:	6163      	str	r3, [r4, #20]
   32d88:	9b01      	ldr	r3, [sp, #4]
   32d8a:	2b00      	cmp	r3, #0
   32d8c:	d00d      	beq.n	32daa <__smakebuf_r+0x7a>
   32d8e:	230e      	movs	r3, #14
   32d90:	5ee1      	ldrsh	r1, [r4, r3]
   32d92:	0028      	movs	r0, r5
   32d94:	f000 fbb0 	bl	334f8 <_isatty_r>
   32d98:	2800      	cmp	r0, #0
   32d9a:	d006      	beq.n	32daa <__smakebuf_r+0x7a>
   32d9c:	2203      	movs	r2, #3
   32d9e:	89a3      	ldrh	r3, [r4, #12]
   32da0:	4393      	bics	r3, r2
   32da2:	001a      	movs	r2, r3
   32da4:	2301      	movs	r3, #1
   32da6:	4313      	orrs	r3, r2
   32da8:	81a3      	strh	r3, [r4, #12]
   32daa:	89a0      	ldrh	r0, [r4, #12]
   32dac:	4338      	orrs	r0, r7
   32dae:	81a0      	strh	r0, [r4, #12]
   32db0:	e7cb      	b.n	32d4a <__smakebuf_r+0x1a>
   32db2:	46c0      	nop			; (mov r8, r8)
   32db4:	00032b11 	.word	0x00032b11

00032db8 <__ascii_mbtowc>:
   32db8:	b082      	sub	sp, #8
   32dba:	2900      	cmp	r1, #0
   32dbc:	d100      	bne.n	32dc0 <__ascii_mbtowc+0x8>
   32dbe:	a901      	add	r1, sp, #4
   32dc0:	1e10      	subs	r0, r2, #0
   32dc2:	d006      	beq.n	32dd2 <__ascii_mbtowc+0x1a>
   32dc4:	2b00      	cmp	r3, #0
   32dc6:	d006      	beq.n	32dd6 <__ascii_mbtowc+0x1e>
   32dc8:	7813      	ldrb	r3, [r2, #0]
   32dca:	600b      	str	r3, [r1, #0]
   32dcc:	7810      	ldrb	r0, [r2, #0]
   32dce:	1e43      	subs	r3, r0, #1
   32dd0:	4198      	sbcs	r0, r3
   32dd2:	b002      	add	sp, #8
   32dd4:	4770      	bx	lr
   32dd6:	2002      	movs	r0, #2
   32dd8:	4240      	negs	r0, r0
   32dda:	e7fa      	b.n	32dd2 <__ascii_mbtowc+0x1a>

00032ddc <__malloc_lock>:
   32ddc:	4770      	bx	lr

00032dde <__malloc_unlock>:
   32dde:	4770      	bx	lr

00032de0 <__ssputs_r>:
   32de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32de2:	688e      	ldr	r6, [r1, #8]
   32de4:	b085      	sub	sp, #20
   32de6:	0007      	movs	r7, r0
   32de8:	000c      	movs	r4, r1
   32dea:	9203      	str	r2, [sp, #12]
   32dec:	9301      	str	r3, [sp, #4]
   32dee:	429e      	cmp	r6, r3
   32df0:	d839      	bhi.n	32e66 <__ssputs_r+0x86>
   32df2:	2390      	movs	r3, #144	; 0x90
   32df4:	898a      	ldrh	r2, [r1, #12]
   32df6:	00db      	lsls	r3, r3, #3
   32df8:	421a      	tst	r2, r3
   32dfa:	d034      	beq.n	32e66 <__ssputs_r+0x86>
   32dfc:	2503      	movs	r5, #3
   32dfe:	6909      	ldr	r1, [r1, #16]
   32e00:	6823      	ldr	r3, [r4, #0]
   32e02:	1a5b      	subs	r3, r3, r1
   32e04:	9302      	str	r3, [sp, #8]
   32e06:	6963      	ldr	r3, [r4, #20]
   32e08:	9802      	ldr	r0, [sp, #8]
   32e0a:	435d      	muls	r5, r3
   32e0c:	0feb      	lsrs	r3, r5, #31
   32e0e:	195d      	adds	r5, r3, r5
   32e10:	9b01      	ldr	r3, [sp, #4]
   32e12:	106d      	asrs	r5, r5, #1
   32e14:	3301      	adds	r3, #1
   32e16:	181b      	adds	r3, r3, r0
   32e18:	42ab      	cmp	r3, r5
   32e1a:	d900      	bls.n	32e1e <__ssputs_r+0x3e>
   32e1c:	001d      	movs	r5, r3
   32e1e:	0553      	lsls	r3, r2, #21
   32e20:	d532      	bpl.n	32e88 <__ssputs_r+0xa8>
   32e22:	0029      	movs	r1, r5
   32e24:	0038      	movs	r0, r7
   32e26:	f7ff fa3f 	bl	322a8 <_malloc_r>
   32e2a:	1e06      	subs	r6, r0, #0
   32e2c:	d109      	bne.n	32e42 <__ssputs_r+0x62>
   32e2e:	230c      	movs	r3, #12
   32e30:	603b      	str	r3, [r7, #0]
   32e32:	2340      	movs	r3, #64	; 0x40
   32e34:	2001      	movs	r0, #1
   32e36:	89a2      	ldrh	r2, [r4, #12]
   32e38:	4240      	negs	r0, r0
   32e3a:	4313      	orrs	r3, r2
   32e3c:	81a3      	strh	r3, [r4, #12]
   32e3e:	b005      	add	sp, #20
   32e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e42:	9a02      	ldr	r2, [sp, #8]
   32e44:	6921      	ldr	r1, [r4, #16]
   32e46:	f7ff f9c1 	bl	321cc <memcpy>
   32e4a:	89a3      	ldrh	r3, [r4, #12]
   32e4c:	4a14      	ldr	r2, [pc, #80]	; (32ea0 <__ssputs_r+0xc0>)
   32e4e:	401a      	ands	r2, r3
   32e50:	2380      	movs	r3, #128	; 0x80
   32e52:	4313      	orrs	r3, r2
   32e54:	81a3      	strh	r3, [r4, #12]
   32e56:	9b02      	ldr	r3, [sp, #8]
   32e58:	6126      	str	r6, [r4, #16]
   32e5a:	18f6      	adds	r6, r6, r3
   32e5c:	6026      	str	r6, [r4, #0]
   32e5e:	6165      	str	r5, [r4, #20]
   32e60:	9e01      	ldr	r6, [sp, #4]
   32e62:	1aed      	subs	r5, r5, r3
   32e64:	60a5      	str	r5, [r4, #8]
   32e66:	9b01      	ldr	r3, [sp, #4]
   32e68:	42b3      	cmp	r3, r6
   32e6a:	d200      	bcs.n	32e6e <__ssputs_r+0x8e>
   32e6c:	001e      	movs	r6, r3
   32e6e:	0032      	movs	r2, r6
   32e70:	9903      	ldr	r1, [sp, #12]
   32e72:	6820      	ldr	r0, [r4, #0]
   32e74:	f7ff f9b3 	bl	321de <memmove>
   32e78:	68a3      	ldr	r3, [r4, #8]
   32e7a:	2000      	movs	r0, #0
   32e7c:	1b9b      	subs	r3, r3, r6
   32e7e:	60a3      	str	r3, [r4, #8]
   32e80:	6823      	ldr	r3, [r4, #0]
   32e82:	199e      	adds	r6, r3, r6
   32e84:	6026      	str	r6, [r4, #0]
   32e86:	e7da      	b.n	32e3e <__ssputs_r+0x5e>
   32e88:	002a      	movs	r2, r5
   32e8a:	0038      	movs	r0, r7
   32e8c:	f000 fb65 	bl	3355a <_realloc_r>
   32e90:	1e06      	subs	r6, r0, #0
   32e92:	d1e0      	bne.n	32e56 <__ssputs_r+0x76>
   32e94:	6921      	ldr	r1, [r4, #16]
   32e96:	0038      	movs	r0, r7
   32e98:	f7ff f9bc 	bl	32214 <_free_r>
   32e9c:	e7c7      	b.n	32e2e <__ssputs_r+0x4e>
   32e9e:	46c0      	nop			; (mov r8, r8)
   32ea0:	fffffb7f 	.word	0xfffffb7f

00032ea4 <_svfiprintf_r>:
   32ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   32ea6:	b09f      	sub	sp, #124	; 0x7c
   32ea8:	9002      	str	r0, [sp, #8]
   32eaa:	9305      	str	r3, [sp, #20]
   32eac:	898b      	ldrh	r3, [r1, #12]
   32eae:	000f      	movs	r7, r1
   32eb0:	0016      	movs	r6, r2
   32eb2:	061b      	lsls	r3, r3, #24
   32eb4:	d511      	bpl.n	32eda <_svfiprintf_r+0x36>
   32eb6:	690b      	ldr	r3, [r1, #16]
   32eb8:	2b00      	cmp	r3, #0
   32eba:	d10e      	bne.n	32eda <_svfiprintf_r+0x36>
   32ebc:	2140      	movs	r1, #64	; 0x40
   32ebe:	f7ff f9f3 	bl	322a8 <_malloc_r>
   32ec2:	6038      	str	r0, [r7, #0]
   32ec4:	6138      	str	r0, [r7, #16]
   32ec6:	2800      	cmp	r0, #0
   32ec8:	d105      	bne.n	32ed6 <_svfiprintf_r+0x32>
   32eca:	230c      	movs	r3, #12
   32ecc:	9a02      	ldr	r2, [sp, #8]
   32ece:	3801      	subs	r0, #1
   32ed0:	6013      	str	r3, [r2, #0]
   32ed2:	b01f      	add	sp, #124	; 0x7c
   32ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32ed6:	2340      	movs	r3, #64	; 0x40
   32ed8:	617b      	str	r3, [r7, #20]
   32eda:	2300      	movs	r3, #0
   32edc:	ad06      	add	r5, sp, #24
   32ede:	616b      	str	r3, [r5, #20]
   32ee0:	3320      	adds	r3, #32
   32ee2:	766b      	strb	r3, [r5, #25]
   32ee4:	3310      	adds	r3, #16
   32ee6:	76ab      	strb	r3, [r5, #26]
   32ee8:	0034      	movs	r4, r6
   32eea:	7823      	ldrb	r3, [r4, #0]
   32eec:	2b00      	cmp	r3, #0
   32eee:	d147      	bne.n	32f80 <_svfiprintf_r+0xdc>
   32ef0:	1ba3      	subs	r3, r4, r6
   32ef2:	9304      	str	r3, [sp, #16]
   32ef4:	d00d      	beq.n	32f12 <_svfiprintf_r+0x6e>
   32ef6:	1ba3      	subs	r3, r4, r6
   32ef8:	0032      	movs	r2, r6
   32efa:	0039      	movs	r1, r7
   32efc:	9802      	ldr	r0, [sp, #8]
   32efe:	f7ff ff6f 	bl	32de0 <__ssputs_r>
   32f02:	1c43      	adds	r3, r0, #1
   32f04:	d100      	bne.n	32f08 <_svfiprintf_r+0x64>
   32f06:	e0b5      	b.n	33074 <_svfiprintf_r+0x1d0>
   32f08:	696a      	ldr	r2, [r5, #20]
   32f0a:	9b04      	ldr	r3, [sp, #16]
   32f0c:	4694      	mov	ip, r2
   32f0e:	4463      	add	r3, ip
   32f10:	616b      	str	r3, [r5, #20]
   32f12:	7823      	ldrb	r3, [r4, #0]
   32f14:	2b00      	cmp	r3, #0
   32f16:	d100      	bne.n	32f1a <_svfiprintf_r+0x76>
   32f18:	e0ac      	b.n	33074 <_svfiprintf_r+0x1d0>
   32f1a:	2201      	movs	r2, #1
   32f1c:	2300      	movs	r3, #0
   32f1e:	4252      	negs	r2, r2
   32f20:	606a      	str	r2, [r5, #4]
   32f22:	a902      	add	r1, sp, #8
   32f24:	3254      	adds	r2, #84	; 0x54
   32f26:	1852      	adds	r2, r2, r1
   32f28:	3401      	adds	r4, #1
   32f2a:	602b      	str	r3, [r5, #0]
   32f2c:	60eb      	str	r3, [r5, #12]
   32f2e:	60ab      	str	r3, [r5, #8]
   32f30:	7013      	strb	r3, [r2, #0]
   32f32:	65ab      	str	r3, [r5, #88]	; 0x58
   32f34:	4e58      	ldr	r6, [pc, #352]	; (33098 <_svfiprintf_r+0x1f4>)
   32f36:	2205      	movs	r2, #5
   32f38:	7821      	ldrb	r1, [r4, #0]
   32f3a:	0030      	movs	r0, r6
   32f3c:	f000 fb02 	bl	33544 <memchr>
   32f40:	1c62      	adds	r2, r4, #1
   32f42:	2800      	cmp	r0, #0
   32f44:	d120      	bne.n	32f88 <_svfiprintf_r+0xe4>
   32f46:	6829      	ldr	r1, [r5, #0]
   32f48:	06cb      	lsls	r3, r1, #27
   32f4a:	d504      	bpl.n	32f56 <_svfiprintf_r+0xb2>
   32f4c:	2353      	movs	r3, #83	; 0x53
   32f4e:	ae02      	add	r6, sp, #8
   32f50:	3020      	adds	r0, #32
   32f52:	199b      	adds	r3, r3, r6
   32f54:	7018      	strb	r0, [r3, #0]
   32f56:	070b      	lsls	r3, r1, #28
   32f58:	d504      	bpl.n	32f64 <_svfiprintf_r+0xc0>
   32f5a:	2353      	movs	r3, #83	; 0x53
   32f5c:	202b      	movs	r0, #43	; 0x2b
   32f5e:	ae02      	add	r6, sp, #8
   32f60:	199b      	adds	r3, r3, r6
   32f62:	7018      	strb	r0, [r3, #0]
   32f64:	7823      	ldrb	r3, [r4, #0]
   32f66:	2b2a      	cmp	r3, #42	; 0x2a
   32f68:	d016      	beq.n	32f98 <_svfiprintf_r+0xf4>
   32f6a:	2000      	movs	r0, #0
   32f6c:	210a      	movs	r1, #10
   32f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   32f70:	7822      	ldrb	r2, [r4, #0]
   32f72:	3a30      	subs	r2, #48	; 0x30
   32f74:	2a09      	cmp	r2, #9
   32f76:	d955      	bls.n	33024 <_svfiprintf_r+0x180>
   32f78:	2800      	cmp	r0, #0
   32f7a:	d015      	beq.n	32fa8 <_svfiprintf_r+0x104>
   32f7c:	9309      	str	r3, [sp, #36]	; 0x24
   32f7e:	e013      	b.n	32fa8 <_svfiprintf_r+0x104>
   32f80:	2b25      	cmp	r3, #37	; 0x25
   32f82:	d0b5      	beq.n	32ef0 <_svfiprintf_r+0x4c>
   32f84:	3401      	adds	r4, #1
   32f86:	e7b0      	b.n	32eea <_svfiprintf_r+0x46>
   32f88:	2301      	movs	r3, #1
   32f8a:	1b80      	subs	r0, r0, r6
   32f8c:	4083      	lsls	r3, r0
   32f8e:	6829      	ldr	r1, [r5, #0]
   32f90:	0014      	movs	r4, r2
   32f92:	430b      	orrs	r3, r1
   32f94:	602b      	str	r3, [r5, #0]
   32f96:	e7cd      	b.n	32f34 <_svfiprintf_r+0x90>
   32f98:	9b05      	ldr	r3, [sp, #20]
   32f9a:	1d18      	adds	r0, r3, #4
   32f9c:	681b      	ldr	r3, [r3, #0]
   32f9e:	9005      	str	r0, [sp, #20]
   32fa0:	2b00      	cmp	r3, #0
   32fa2:	db39      	blt.n	33018 <_svfiprintf_r+0x174>
   32fa4:	9309      	str	r3, [sp, #36]	; 0x24
   32fa6:	0014      	movs	r4, r2
   32fa8:	7823      	ldrb	r3, [r4, #0]
   32faa:	2b2e      	cmp	r3, #46	; 0x2e
   32fac:	d10b      	bne.n	32fc6 <_svfiprintf_r+0x122>
   32fae:	7863      	ldrb	r3, [r4, #1]
   32fb0:	1c62      	adds	r2, r4, #1
   32fb2:	2b2a      	cmp	r3, #42	; 0x2a
   32fb4:	d13e      	bne.n	33034 <_svfiprintf_r+0x190>
   32fb6:	9b05      	ldr	r3, [sp, #20]
   32fb8:	3402      	adds	r4, #2
   32fba:	1d1a      	adds	r2, r3, #4
   32fbc:	681b      	ldr	r3, [r3, #0]
   32fbe:	9205      	str	r2, [sp, #20]
   32fc0:	2b00      	cmp	r3, #0
   32fc2:	db34      	blt.n	3302e <_svfiprintf_r+0x18a>
   32fc4:	9307      	str	r3, [sp, #28]
   32fc6:	4e35      	ldr	r6, [pc, #212]	; (3309c <_svfiprintf_r+0x1f8>)
   32fc8:	7821      	ldrb	r1, [r4, #0]
   32fca:	2203      	movs	r2, #3
   32fcc:	0030      	movs	r0, r6
   32fce:	f000 fab9 	bl	33544 <memchr>
   32fd2:	2800      	cmp	r0, #0
   32fd4:	d006      	beq.n	32fe4 <_svfiprintf_r+0x140>
   32fd6:	2340      	movs	r3, #64	; 0x40
   32fd8:	1b80      	subs	r0, r0, r6
   32fda:	4083      	lsls	r3, r0
   32fdc:	682a      	ldr	r2, [r5, #0]
   32fde:	3401      	adds	r4, #1
   32fe0:	4313      	orrs	r3, r2
   32fe2:	602b      	str	r3, [r5, #0]
   32fe4:	7821      	ldrb	r1, [r4, #0]
   32fe6:	2206      	movs	r2, #6
   32fe8:	482d      	ldr	r0, [pc, #180]	; (330a0 <_svfiprintf_r+0x1fc>)
   32fea:	1c66      	adds	r6, r4, #1
   32fec:	7629      	strb	r1, [r5, #24]
   32fee:	f000 faa9 	bl	33544 <memchr>
   32ff2:	2800      	cmp	r0, #0
   32ff4:	d046      	beq.n	33084 <_svfiprintf_r+0x1e0>
   32ff6:	4b2b      	ldr	r3, [pc, #172]	; (330a4 <_svfiprintf_r+0x200>)
   32ff8:	2b00      	cmp	r3, #0
   32ffa:	d12f      	bne.n	3305c <_svfiprintf_r+0x1b8>
   32ffc:	6829      	ldr	r1, [r5, #0]
   32ffe:	9b05      	ldr	r3, [sp, #20]
   33000:	2207      	movs	r2, #7
   33002:	05c9      	lsls	r1, r1, #23
   33004:	d528      	bpl.n	33058 <_svfiprintf_r+0x1b4>
   33006:	189b      	adds	r3, r3, r2
   33008:	4393      	bics	r3, r2
   3300a:	3308      	adds	r3, #8
   3300c:	9305      	str	r3, [sp, #20]
   3300e:	696b      	ldr	r3, [r5, #20]
   33010:	9a03      	ldr	r2, [sp, #12]
   33012:	189b      	adds	r3, r3, r2
   33014:	616b      	str	r3, [r5, #20]
   33016:	e767      	b.n	32ee8 <_svfiprintf_r+0x44>
   33018:	425b      	negs	r3, r3
   3301a:	60eb      	str	r3, [r5, #12]
   3301c:	2302      	movs	r3, #2
   3301e:	430b      	orrs	r3, r1
   33020:	602b      	str	r3, [r5, #0]
   33022:	e7c0      	b.n	32fa6 <_svfiprintf_r+0x102>
   33024:	434b      	muls	r3, r1
   33026:	3401      	adds	r4, #1
   33028:	189b      	adds	r3, r3, r2
   3302a:	2001      	movs	r0, #1
   3302c:	e7a0      	b.n	32f70 <_svfiprintf_r+0xcc>
   3302e:	2301      	movs	r3, #1
   33030:	425b      	negs	r3, r3
   33032:	e7c7      	b.n	32fc4 <_svfiprintf_r+0x120>
   33034:	2300      	movs	r3, #0
   33036:	0014      	movs	r4, r2
   33038:	200a      	movs	r0, #10
   3303a:	001a      	movs	r2, r3
   3303c:	606b      	str	r3, [r5, #4]
   3303e:	7821      	ldrb	r1, [r4, #0]
   33040:	3930      	subs	r1, #48	; 0x30
   33042:	2909      	cmp	r1, #9
   33044:	d903      	bls.n	3304e <_svfiprintf_r+0x1aa>
   33046:	2b00      	cmp	r3, #0
   33048:	d0bd      	beq.n	32fc6 <_svfiprintf_r+0x122>
   3304a:	9207      	str	r2, [sp, #28]
   3304c:	e7bb      	b.n	32fc6 <_svfiprintf_r+0x122>
   3304e:	4342      	muls	r2, r0
   33050:	3401      	adds	r4, #1
   33052:	1852      	adds	r2, r2, r1
   33054:	2301      	movs	r3, #1
   33056:	e7f2      	b.n	3303e <_svfiprintf_r+0x19a>
   33058:	3307      	adds	r3, #7
   3305a:	e7d5      	b.n	33008 <_svfiprintf_r+0x164>
   3305c:	ab05      	add	r3, sp, #20
   3305e:	9300      	str	r3, [sp, #0]
   33060:	003a      	movs	r2, r7
   33062:	4b11      	ldr	r3, [pc, #68]	; (330a8 <_svfiprintf_r+0x204>)
   33064:	0029      	movs	r1, r5
   33066:	9802      	ldr	r0, [sp, #8]
   33068:	e000      	b.n	3306c <_svfiprintf_r+0x1c8>
   3306a:	bf00      	nop
   3306c:	9003      	str	r0, [sp, #12]
   3306e:	9b03      	ldr	r3, [sp, #12]
   33070:	3301      	adds	r3, #1
   33072:	d1cc      	bne.n	3300e <_svfiprintf_r+0x16a>
   33074:	89bb      	ldrh	r3, [r7, #12]
   33076:	980b      	ldr	r0, [sp, #44]	; 0x2c
   33078:	065b      	lsls	r3, r3, #25
   3307a:	d400      	bmi.n	3307e <_svfiprintf_r+0x1da>
   3307c:	e729      	b.n	32ed2 <_svfiprintf_r+0x2e>
   3307e:	2001      	movs	r0, #1
   33080:	4240      	negs	r0, r0
   33082:	e726      	b.n	32ed2 <_svfiprintf_r+0x2e>
   33084:	ab05      	add	r3, sp, #20
   33086:	9300      	str	r3, [sp, #0]
   33088:	003a      	movs	r2, r7
   3308a:	4b07      	ldr	r3, [pc, #28]	; (330a8 <_svfiprintf_r+0x204>)
   3308c:	0029      	movs	r1, r5
   3308e:	9802      	ldr	r0, [sp, #8]
   33090:	f000 f87a 	bl	33188 <_printf_i>
   33094:	e7ea      	b.n	3306c <_svfiprintf_r+0x1c8>
   33096:	46c0      	nop			; (mov r8, r8)
   33098:	0003758a 	.word	0x0003758a
   3309c:	00037590 	.word	0x00037590
   330a0:	00037594 	.word	0x00037594
   330a4:	00000000 	.word	0x00000000
   330a8:	00032de1 	.word	0x00032de1

000330ac <_printf_common>:
   330ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   330ae:	0015      	movs	r5, r2
   330b0:	9301      	str	r3, [sp, #4]
   330b2:	688a      	ldr	r2, [r1, #8]
   330b4:	690b      	ldr	r3, [r1, #16]
   330b6:	9000      	str	r0, [sp, #0]
   330b8:	000c      	movs	r4, r1
   330ba:	4293      	cmp	r3, r2
   330bc:	da00      	bge.n	330c0 <_printf_common+0x14>
   330be:	0013      	movs	r3, r2
   330c0:	0022      	movs	r2, r4
   330c2:	602b      	str	r3, [r5, #0]
   330c4:	3243      	adds	r2, #67	; 0x43
   330c6:	7812      	ldrb	r2, [r2, #0]
   330c8:	2a00      	cmp	r2, #0
   330ca:	d001      	beq.n	330d0 <_printf_common+0x24>
   330cc:	3301      	adds	r3, #1
   330ce:	602b      	str	r3, [r5, #0]
   330d0:	6823      	ldr	r3, [r4, #0]
   330d2:	069b      	lsls	r3, r3, #26
   330d4:	d502      	bpl.n	330dc <_printf_common+0x30>
   330d6:	682b      	ldr	r3, [r5, #0]
   330d8:	3302      	adds	r3, #2
   330da:	602b      	str	r3, [r5, #0]
   330dc:	2706      	movs	r7, #6
   330de:	6823      	ldr	r3, [r4, #0]
   330e0:	401f      	ands	r7, r3
   330e2:	d027      	beq.n	33134 <_printf_common+0x88>
   330e4:	0023      	movs	r3, r4
   330e6:	3343      	adds	r3, #67	; 0x43
   330e8:	781b      	ldrb	r3, [r3, #0]
   330ea:	1e5a      	subs	r2, r3, #1
   330ec:	4193      	sbcs	r3, r2
   330ee:	6822      	ldr	r2, [r4, #0]
   330f0:	0692      	lsls	r2, r2, #26
   330f2:	d430      	bmi.n	33156 <_printf_common+0xaa>
   330f4:	0022      	movs	r2, r4
   330f6:	9901      	ldr	r1, [sp, #4]
   330f8:	3243      	adds	r2, #67	; 0x43
   330fa:	9800      	ldr	r0, [sp, #0]
   330fc:	9e08      	ldr	r6, [sp, #32]
   330fe:	47b0      	blx	r6
   33100:	1c43      	adds	r3, r0, #1
   33102:	d025      	beq.n	33150 <_printf_common+0xa4>
   33104:	2306      	movs	r3, #6
   33106:	6820      	ldr	r0, [r4, #0]
   33108:	682a      	ldr	r2, [r5, #0]
   3310a:	68e1      	ldr	r1, [r4, #12]
   3310c:	4003      	ands	r3, r0
   3310e:	2500      	movs	r5, #0
   33110:	2b04      	cmp	r3, #4
   33112:	d103      	bne.n	3311c <_printf_common+0x70>
   33114:	1a8d      	subs	r5, r1, r2
   33116:	43eb      	mvns	r3, r5
   33118:	17db      	asrs	r3, r3, #31
   3311a:	401d      	ands	r5, r3
   3311c:	68a3      	ldr	r3, [r4, #8]
   3311e:	6922      	ldr	r2, [r4, #16]
   33120:	4293      	cmp	r3, r2
   33122:	dd01      	ble.n	33128 <_printf_common+0x7c>
   33124:	1a9b      	subs	r3, r3, r2
   33126:	18ed      	adds	r5, r5, r3
   33128:	2700      	movs	r7, #0
   3312a:	42bd      	cmp	r5, r7
   3312c:	d120      	bne.n	33170 <_printf_common+0xc4>
   3312e:	2000      	movs	r0, #0
   33130:	e010      	b.n	33154 <_printf_common+0xa8>
   33132:	3701      	adds	r7, #1
   33134:	68e3      	ldr	r3, [r4, #12]
   33136:	682a      	ldr	r2, [r5, #0]
   33138:	1a9b      	subs	r3, r3, r2
   3313a:	429f      	cmp	r7, r3
   3313c:	dad2      	bge.n	330e4 <_printf_common+0x38>
   3313e:	0022      	movs	r2, r4
   33140:	2301      	movs	r3, #1
   33142:	3219      	adds	r2, #25
   33144:	9901      	ldr	r1, [sp, #4]
   33146:	9800      	ldr	r0, [sp, #0]
   33148:	9e08      	ldr	r6, [sp, #32]
   3314a:	47b0      	blx	r6
   3314c:	1c43      	adds	r3, r0, #1
   3314e:	d1f0      	bne.n	33132 <_printf_common+0x86>
   33150:	2001      	movs	r0, #1
   33152:	4240      	negs	r0, r0
   33154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   33156:	2030      	movs	r0, #48	; 0x30
   33158:	18e1      	adds	r1, r4, r3
   3315a:	3143      	adds	r1, #67	; 0x43
   3315c:	7008      	strb	r0, [r1, #0]
   3315e:	0021      	movs	r1, r4
   33160:	1c5a      	adds	r2, r3, #1
   33162:	3145      	adds	r1, #69	; 0x45
   33164:	7809      	ldrb	r1, [r1, #0]
   33166:	18a2      	adds	r2, r4, r2
   33168:	3243      	adds	r2, #67	; 0x43
   3316a:	3302      	adds	r3, #2
   3316c:	7011      	strb	r1, [r2, #0]
   3316e:	e7c1      	b.n	330f4 <_printf_common+0x48>
   33170:	0022      	movs	r2, r4
   33172:	2301      	movs	r3, #1
   33174:	321a      	adds	r2, #26
   33176:	9901      	ldr	r1, [sp, #4]
   33178:	9800      	ldr	r0, [sp, #0]
   3317a:	9e08      	ldr	r6, [sp, #32]
   3317c:	47b0      	blx	r6
   3317e:	1c43      	adds	r3, r0, #1
   33180:	d0e6      	beq.n	33150 <_printf_common+0xa4>
   33182:	3701      	adds	r7, #1
   33184:	e7d1      	b.n	3312a <_printf_common+0x7e>
	...

00033188 <_printf_i>:
   33188:	b5f0      	push	{r4, r5, r6, r7, lr}
   3318a:	b08b      	sub	sp, #44	; 0x2c
   3318c:	9206      	str	r2, [sp, #24]
   3318e:	000a      	movs	r2, r1
   33190:	3243      	adds	r2, #67	; 0x43
   33192:	9307      	str	r3, [sp, #28]
   33194:	9005      	str	r0, [sp, #20]
   33196:	9204      	str	r2, [sp, #16]
   33198:	7e0a      	ldrb	r2, [r1, #24]
   3319a:	000c      	movs	r4, r1
   3319c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3319e:	2a6e      	cmp	r2, #110	; 0x6e
   331a0:	d100      	bne.n	331a4 <_printf_i+0x1c>
   331a2:	e08f      	b.n	332c4 <_printf_i+0x13c>
   331a4:	d817      	bhi.n	331d6 <_printf_i+0x4e>
   331a6:	2a63      	cmp	r2, #99	; 0x63
   331a8:	d02c      	beq.n	33204 <_printf_i+0x7c>
   331aa:	d808      	bhi.n	331be <_printf_i+0x36>
   331ac:	2a00      	cmp	r2, #0
   331ae:	d100      	bne.n	331b2 <_printf_i+0x2a>
   331b0:	e099      	b.n	332e6 <_printf_i+0x15e>
   331b2:	2a58      	cmp	r2, #88	; 0x58
   331b4:	d054      	beq.n	33260 <_printf_i+0xd8>
   331b6:	0026      	movs	r6, r4
   331b8:	3642      	adds	r6, #66	; 0x42
   331ba:	7032      	strb	r2, [r6, #0]
   331bc:	e029      	b.n	33212 <_printf_i+0x8a>
   331be:	2a64      	cmp	r2, #100	; 0x64
   331c0:	d001      	beq.n	331c6 <_printf_i+0x3e>
   331c2:	2a69      	cmp	r2, #105	; 0x69
   331c4:	d1f7      	bne.n	331b6 <_printf_i+0x2e>
   331c6:	6821      	ldr	r1, [r4, #0]
   331c8:	681a      	ldr	r2, [r3, #0]
   331ca:	0608      	lsls	r0, r1, #24
   331cc:	d523      	bpl.n	33216 <_printf_i+0x8e>
   331ce:	1d11      	adds	r1, r2, #4
   331d0:	6019      	str	r1, [r3, #0]
   331d2:	6815      	ldr	r5, [r2, #0]
   331d4:	e025      	b.n	33222 <_printf_i+0x9a>
   331d6:	2a73      	cmp	r2, #115	; 0x73
   331d8:	d100      	bne.n	331dc <_printf_i+0x54>
   331da:	e088      	b.n	332ee <_printf_i+0x166>
   331dc:	d808      	bhi.n	331f0 <_printf_i+0x68>
   331de:	2a6f      	cmp	r2, #111	; 0x6f
   331e0:	d029      	beq.n	33236 <_printf_i+0xae>
   331e2:	2a70      	cmp	r2, #112	; 0x70
   331e4:	d1e7      	bne.n	331b6 <_printf_i+0x2e>
   331e6:	2220      	movs	r2, #32
   331e8:	6809      	ldr	r1, [r1, #0]
   331ea:	430a      	orrs	r2, r1
   331ec:	6022      	str	r2, [r4, #0]
   331ee:	e003      	b.n	331f8 <_printf_i+0x70>
   331f0:	2a75      	cmp	r2, #117	; 0x75
   331f2:	d020      	beq.n	33236 <_printf_i+0xae>
   331f4:	2a78      	cmp	r2, #120	; 0x78
   331f6:	d1de      	bne.n	331b6 <_printf_i+0x2e>
   331f8:	0022      	movs	r2, r4
   331fa:	2178      	movs	r1, #120	; 0x78
   331fc:	3245      	adds	r2, #69	; 0x45
   331fe:	7011      	strb	r1, [r2, #0]
   33200:	4a6c      	ldr	r2, [pc, #432]	; (333b4 <_printf_i+0x22c>)
   33202:	e030      	b.n	33266 <_printf_i+0xde>
   33204:	000e      	movs	r6, r1
   33206:	681a      	ldr	r2, [r3, #0]
   33208:	3642      	adds	r6, #66	; 0x42
   3320a:	1d11      	adds	r1, r2, #4
   3320c:	6019      	str	r1, [r3, #0]
   3320e:	6813      	ldr	r3, [r2, #0]
   33210:	7033      	strb	r3, [r6, #0]
   33212:	2301      	movs	r3, #1
   33214:	e079      	b.n	3330a <_printf_i+0x182>
   33216:	0649      	lsls	r1, r1, #25
   33218:	d5d9      	bpl.n	331ce <_printf_i+0x46>
   3321a:	1d11      	adds	r1, r2, #4
   3321c:	6019      	str	r1, [r3, #0]
   3321e:	2300      	movs	r3, #0
   33220:	5ed5      	ldrsh	r5, [r2, r3]
   33222:	2d00      	cmp	r5, #0
   33224:	da03      	bge.n	3322e <_printf_i+0xa6>
   33226:	232d      	movs	r3, #45	; 0x2d
   33228:	9a04      	ldr	r2, [sp, #16]
   3322a:	426d      	negs	r5, r5
   3322c:	7013      	strb	r3, [r2, #0]
   3322e:	4b62      	ldr	r3, [pc, #392]	; (333b8 <_printf_i+0x230>)
   33230:	270a      	movs	r7, #10
   33232:	9303      	str	r3, [sp, #12]
   33234:	e02f      	b.n	33296 <_printf_i+0x10e>
   33236:	6820      	ldr	r0, [r4, #0]
   33238:	6819      	ldr	r1, [r3, #0]
   3323a:	0605      	lsls	r5, r0, #24
   3323c:	d503      	bpl.n	33246 <_printf_i+0xbe>
   3323e:	1d08      	adds	r0, r1, #4
   33240:	6018      	str	r0, [r3, #0]
   33242:	680d      	ldr	r5, [r1, #0]
   33244:	e005      	b.n	33252 <_printf_i+0xca>
   33246:	0640      	lsls	r0, r0, #25
   33248:	d5f9      	bpl.n	3323e <_printf_i+0xb6>
   3324a:	680d      	ldr	r5, [r1, #0]
   3324c:	1d08      	adds	r0, r1, #4
   3324e:	6018      	str	r0, [r3, #0]
   33250:	b2ad      	uxth	r5, r5
   33252:	4b59      	ldr	r3, [pc, #356]	; (333b8 <_printf_i+0x230>)
   33254:	2708      	movs	r7, #8
   33256:	9303      	str	r3, [sp, #12]
   33258:	2a6f      	cmp	r2, #111	; 0x6f
   3325a:	d018      	beq.n	3328e <_printf_i+0x106>
   3325c:	270a      	movs	r7, #10
   3325e:	e016      	b.n	3328e <_printf_i+0x106>
   33260:	3145      	adds	r1, #69	; 0x45
   33262:	700a      	strb	r2, [r1, #0]
   33264:	4a54      	ldr	r2, [pc, #336]	; (333b8 <_printf_i+0x230>)
   33266:	9203      	str	r2, [sp, #12]
   33268:	681a      	ldr	r2, [r3, #0]
   3326a:	6821      	ldr	r1, [r4, #0]
   3326c:	1d10      	adds	r0, r2, #4
   3326e:	6018      	str	r0, [r3, #0]
   33270:	6815      	ldr	r5, [r2, #0]
   33272:	0608      	lsls	r0, r1, #24
   33274:	d522      	bpl.n	332bc <_printf_i+0x134>
   33276:	07cb      	lsls	r3, r1, #31
   33278:	d502      	bpl.n	33280 <_printf_i+0xf8>
   3327a:	2320      	movs	r3, #32
   3327c:	4319      	orrs	r1, r3
   3327e:	6021      	str	r1, [r4, #0]
   33280:	2710      	movs	r7, #16
   33282:	2d00      	cmp	r5, #0
   33284:	d103      	bne.n	3328e <_printf_i+0x106>
   33286:	2320      	movs	r3, #32
   33288:	6822      	ldr	r2, [r4, #0]
   3328a:	439a      	bics	r2, r3
   3328c:	6022      	str	r2, [r4, #0]
   3328e:	0023      	movs	r3, r4
   33290:	2200      	movs	r2, #0
   33292:	3343      	adds	r3, #67	; 0x43
   33294:	701a      	strb	r2, [r3, #0]
   33296:	6863      	ldr	r3, [r4, #4]
   33298:	60a3      	str	r3, [r4, #8]
   3329a:	2b00      	cmp	r3, #0
   3329c:	db5c      	blt.n	33358 <_printf_i+0x1d0>
   3329e:	2204      	movs	r2, #4
   332a0:	6821      	ldr	r1, [r4, #0]
   332a2:	4391      	bics	r1, r2
   332a4:	6021      	str	r1, [r4, #0]
   332a6:	2d00      	cmp	r5, #0
   332a8:	d158      	bne.n	3335c <_printf_i+0x1d4>
   332aa:	9e04      	ldr	r6, [sp, #16]
   332ac:	2b00      	cmp	r3, #0
   332ae:	d064      	beq.n	3337a <_printf_i+0x1f2>
   332b0:	0026      	movs	r6, r4
   332b2:	9b03      	ldr	r3, [sp, #12]
   332b4:	3642      	adds	r6, #66	; 0x42
   332b6:	781b      	ldrb	r3, [r3, #0]
   332b8:	7033      	strb	r3, [r6, #0]
   332ba:	e05e      	b.n	3337a <_printf_i+0x1f2>
   332bc:	0648      	lsls	r0, r1, #25
   332be:	d5da      	bpl.n	33276 <_printf_i+0xee>
   332c0:	b2ad      	uxth	r5, r5
   332c2:	e7d8      	b.n	33276 <_printf_i+0xee>
   332c4:	6809      	ldr	r1, [r1, #0]
   332c6:	681a      	ldr	r2, [r3, #0]
   332c8:	0608      	lsls	r0, r1, #24
   332ca:	d505      	bpl.n	332d8 <_printf_i+0x150>
   332cc:	1d11      	adds	r1, r2, #4
   332ce:	6019      	str	r1, [r3, #0]
   332d0:	6813      	ldr	r3, [r2, #0]
   332d2:	6962      	ldr	r2, [r4, #20]
   332d4:	601a      	str	r2, [r3, #0]
   332d6:	e006      	b.n	332e6 <_printf_i+0x15e>
   332d8:	0649      	lsls	r1, r1, #25
   332da:	d5f7      	bpl.n	332cc <_printf_i+0x144>
   332dc:	1d11      	adds	r1, r2, #4
   332de:	6019      	str	r1, [r3, #0]
   332e0:	6813      	ldr	r3, [r2, #0]
   332e2:	8aa2      	ldrh	r2, [r4, #20]
   332e4:	801a      	strh	r2, [r3, #0]
   332e6:	2300      	movs	r3, #0
   332e8:	9e04      	ldr	r6, [sp, #16]
   332ea:	6123      	str	r3, [r4, #16]
   332ec:	e054      	b.n	33398 <_printf_i+0x210>
   332ee:	681a      	ldr	r2, [r3, #0]
   332f0:	1d11      	adds	r1, r2, #4
   332f2:	6019      	str	r1, [r3, #0]
   332f4:	6816      	ldr	r6, [r2, #0]
   332f6:	2100      	movs	r1, #0
   332f8:	6862      	ldr	r2, [r4, #4]
   332fa:	0030      	movs	r0, r6
   332fc:	f000 f922 	bl	33544 <memchr>
   33300:	2800      	cmp	r0, #0
   33302:	d001      	beq.n	33308 <_printf_i+0x180>
   33304:	1b80      	subs	r0, r0, r6
   33306:	6060      	str	r0, [r4, #4]
   33308:	6863      	ldr	r3, [r4, #4]
   3330a:	6123      	str	r3, [r4, #16]
   3330c:	2300      	movs	r3, #0
   3330e:	9a04      	ldr	r2, [sp, #16]
   33310:	7013      	strb	r3, [r2, #0]
   33312:	e041      	b.n	33398 <_printf_i+0x210>
   33314:	6923      	ldr	r3, [r4, #16]
   33316:	0032      	movs	r2, r6
   33318:	9906      	ldr	r1, [sp, #24]
   3331a:	9805      	ldr	r0, [sp, #20]
   3331c:	9d07      	ldr	r5, [sp, #28]
   3331e:	47a8      	blx	r5
   33320:	1c43      	adds	r3, r0, #1
   33322:	d043      	beq.n	333ac <_printf_i+0x224>
   33324:	6823      	ldr	r3, [r4, #0]
   33326:	2500      	movs	r5, #0
   33328:	079b      	lsls	r3, r3, #30
   3332a:	d40f      	bmi.n	3334c <_printf_i+0x1c4>
   3332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3332e:	68e0      	ldr	r0, [r4, #12]
   33330:	4298      	cmp	r0, r3
   33332:	da3d      	bge.n	333b0 <_printf_i+0x228>
   33334:	0018      	movs	r0, r3
   33336:	e03b      	b.n	333b0 <_printf_i+0x228>
   33338:	0022      	movs	r2, r4
   3333a:	2301      	movs	r3, #1
   3333c:	3219      	adds	r2, #25
   3333e:	9906      	ldr	r1, [sp, #24]
   33340:	9805      	ldr	r0, [sp, #20]
   33342:	9e07      	ldr	r6, [sp, #28]
   33344:	47b0      	blx	r6
   33346:	1c43      	adds	r3, r0, #1
   33348:	d030      	beq.n	333ac <_printf_i+0x224>
   3334a:	3501      	adds	r5, #1
   3334c:	68e3      	ldr	r3, [r4, #12]
   3334e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33350:	1a9b      	subs	r3, r3, r2
   33352:	429d      	cmp	r5, r3
   33354:	dbf0      	blt.n	33338 <_printf_i+0x1b0>
   33356:	e7e9      	b.n	3332c <_printf_i+0x1a4>
   33358:	2d00      	cmp	r5, #0
   3335a:	d0a9      	beq.n	332b0 <_printf_i+0x128>
   3335c:	9e04      	ldr	r6, [sp, #16]
   3335e:	0028      	movs	r0, r5
   33360:	0039      	movs	r1, r7
   33362:	f7fd f977 	bl	30654 <__aeabi_uidivmod>
   33366:	9b03      	ldr	r3, [sp, #12]
   33368:	3e01      	subs	r6, #1
   3336a:	5c5b      	ldrb	r3, [r3, r1]
   3336c:	0028      	movs	r0, r5
   3336e:	7033      	strb	r3, [r6, #0]
   33370:	0039      	movs	r1, r7
   33372:	f7fd f8e9 	bl	30548 <__udivsi3>
   33376:	1e05      	subs	r5, r0, #0
   33378:	d1f1      	bne.n	3335e <_printf_i+0x1d6>
   3337a:	2f08      	cmp	r7, #8
   3337c:	d109      	bne.n	33392 <_printf_i+0x20a>
   3337e:	6823      	ldr	r3, [r4, #0]
   33380:	07db      	lsls	r3, r3, #31
   33382:	d506      	bpl.n	33392 <_printf_i+0x20a>
   33384:	6863      	ldr	r3, [r4, #4]
   33386:	6922      	ldr	r2, [r4, #16]
   33388:	4293      	cmp	r3, r2
   3338a:	dc02      	bgt.n	33392 <_printf_i+0x20a>
   3338c:	2330      	movs	r3, #48	; 0x30
   3338e:	3e01      	subs	r6, #1
   33390:	7033      	strb	r3, [r6, #0]
   33392:	9b04      	ldr	r3, [sp, #16]
   33394:	1b9b      	subs	r3, r3, r6
   33396:	6123      	str	r3, [r4, #16]
   33398:	9b07      	ldr	r3, [sp, #28]
   3339a:	aa09      	add	r2, sp, #36	; 0x24
   3339c:	9300      	str	r3, [sp, #0]
   3339e:	0021      	movs	r1, r4
   333a0:	9b06      	ldr	r3, [sp, #24]
   333a2:	9805      	ldr	r0, [sp, #20]
   333a4:	f7ff fe82 	bl	330ac <_printf_common>
   333a8:	1c43      	adds	r3, r0, #1
   333aa:	d1b3      	bne.n	33314 <_printf_i+0x18c>
   333ac:	2001      	movs	r0, #1
   333ae:	4240      	negs	r0, r0
   333b0:	b00b      	add	sp, #44	; 0x2c
   333b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   333b4:	000375ac 	.word	0x000375ac
   333b8:	0003759b 	.word	0x0003759b

000333bc <__sread>:
   333bc:	b570      	push	{r4, r5, r6, lr}
   333be:	000c      	movs	r4, r1
   333c0:	250e      	movs	r5, #14
   333c2:	5f49      	ldrsh	r1, [r1, r5]
   333c4:	f000 f8f0 	bl	335a8 <_read_r>
   333c8:	2800      	cmp	r0, #0
   333ca:	db03      	blt.n	333d4 <__sread+0x18>
   333cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   333ce:	181b      	adds	r3, r3, r0
   333d0:	6563      	str	r3, [r4, #84]	; 0x54
   333d2:	bd70      	pop	{r4, r5, r6, pc}
   333d4:	89a3      	ldrh	r3, [r4, #12]
   333d6:	4a02      	ldr	r2, [pc, #8]	; (333e0 <__sread+0x24>)
   333d8:	4013      	ands	r3, r2
   333da:	81a3      	strh	r3, [r4, #12]
   333dc:	e7f9      	b.n	333d2 <__sread+0x16>
   333de:	46c0      	nop			; (mov r8, r8)
   333e0:	ffffefff 	.word	0xffffefff

000333e4 <__swrite>:
   333e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   333e6:	001f      	movs	r7, r3
   333e8:	898b      	ldrh	r3, [r1, #12]
   333ea:	0005      	movs	r5, r0
   333ec:	000c      	movs	r4, r1
   333ee:	0016      	movs	r6, r2
   333f0:	05db      	lsls	r3, r3, #23
   333f2:	d505      	bpl.n	33400 <__swrite+0x1c>
   333f4:	230e      	movs	r3, #14
   333f6:	5ec9      	ldrsh	r1, [r1, r3]
   333f8:	2200      	movs	r2, #0
   333fa:	2302      	movs	r3, #2
   333fc:	f000 f88e 	bl	3351c <_lseek_r>
   33400:	89a3      	ldrh	r3, [r4, #12]
   33402:	4a05      	ldr	r2, [pc, #20]	; (33418 <__swrite+0x34>)
   33404:	0028      	movs	r0, r5
   33406:	4013      	ands	r3, r2
   33408:	81a3      	strh	r3, [r4, #12]
   3340a:	0032      	movs	r2, r6
   3340c:	230e      	movs	r3, #14
   3340e:	5ee1      	ldrsh	r1, [r4, r3]
   33410:	003b      	movs	r3, r7
   33412:	f000 f839 	bl	33488 <_write_r>
   33416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33418:	ffffefff 	.word	0xffffefff

0003341c <__sseek>:
   3341c:	b570      	push	{r4, r5, r6, lr}
   3341e:	000c      	movs	r4, r1
   33420:	250e      	movs	r5, #14
   33422:	5f49      	ldrsh	r1, [r1, r5]
   33424:	f000 f87a 	bl	3351c <_lseek_r>
   33428:	89a3      	ldrh	r3, [r4, #12]
   3342a:	1c42      	adds	r2, r0, #1
   3342c:	d103      	bne.n	33436 <__sseek+0x1a>
   3342e:	4a05      	ldr	r2, [pc, #20]	; (33444 <__sseek+0x28>)
   33430:	4013      	ands	r3, r2
   33432:	81a3      	strh	r3, [r4, #12]
   33434:	bd70      	pop	{r4, r5, r6, pc}
   33436:	2280      	movs	r2, #128	; 0x80
   33438:	0152      	lsls	r2, r2, #5
   3343a:	4313      	orrs	r3, r2
   3343c:	81a3      	strh	r3, [r4, #12]
   3343e:	6560      	str	r0, [r4, #84]	; 0x54
   33440:	e7f8      	b.n	33434 <__sseek+0x18>
   33442:	46c0      	nop			; (mov r8, r8)
   33444:	ffffefff 	.word	0xffffefff

00033448 <__sclose>:
   33448:	b510      	push	{r4, lr}
   3344a:	230e      	movs	r3, #14
   3344c:	5ec9      	ldrsh	r1, [r1, r3]
   3344e:	f000 f82f 	bl	334b0 <_close_r>
   33452:	bd10      	pop	{r4, pc}

00033454 <strchr>:
   33454:	b2c9      	uxtb	r1, r1
   33456:	7803      	ldrb	r3, [r0, #0]
   33458:	2b00      	cmp	r3, #0
   3345a:	d004      	beq.n	33466 <strchr+0x12>
   3345c:	4299      	cmp	r1, r3
   3345e:	d100      	bne.n	33462 <strchr+0xe>
   33460:	4770      	bx	lr
   33462:	3001      	adds	r0, #1
   33464:	e7f7      	b.n	33456 <strchr+0x2>
   33466:	424b      	negs	r3, r1
   33468:	4159      	adcs	r1, r3
   3346a:	4249      	negs	r1, r1
   3346c:	4008      	ands	r0, r1
   3346e:	e7f7      	b.n	33460 <strchr+0xc>

00033470 <__ascii_wctomb>:
   33470:	1e0b      	subs	r3, r1, #0
   33472:	d004      	beq.n	3347e <__ascii_wctomb+0xe>
   33474:	2aff      	cmp	r2, #255	; 0xff
   33476:	d904      	bls.n	33482 <__ascii_wctomb+0x12>
   33478:	238a      	movs	r3, #138	; 0x8a
   3347a:	6003      	str	r3, [r0, #0]
   3347c:	3b8b      	subs	r3, #139	; 0x8b
   3347e:	0018      	movs	r0, r3
   33480:	4770      	bx	lr
   33482:	700a      	strb	r2, [r1, #0]
   33484:	2301      	movs	r3, #1
   33486:	e7fa      	b.n	3347e <__ascii_wctomb+0xe>

00033488 <_write_r>:
   33488:	b570      	push	{r4, r5, r6, lr}
   3348a:	0005      	movs	r5, r0
   3348c:	0008      	movs	r0, r1
   3348e:	0011      	movs	r1, r2
   33490:	2200      	movs	r2, #0
   33492:	4c06      	ldr	r4, [pc, #24]	; (334ac <_write_r+0x24>)
   33494:	6022      	str	r2, [r4, #0]
   33496:	001a      	movs	r2, r3
   33498:	f7f5 fc38 	bl	28d0c <_write>
   3349c:	1c43      	adds	r3, r0, #1
   3349e:	d103      	bne.n	334a8 <_write_r+0x20>
   334a0:	6823      	ldr	r3, [r4, #0]
   334a2:	2b00      	cmp	r3, #0
   334a4:	d000      	beq.n	334a8 <_write_r+0x20>
   334a6:	602b      	str	r3, [r5, #0]
   334a8:	bd70      	pop	{r4, r5, r6, pc}
   334aa:	46c0      	nop			; (mov r8, r8)
   334ac:	20005600 	.word	0x20005600

000334b0 <_close_r>:
   334b0:	2300      	movs	r3, #0
   334b2:	b570      	push	{r4, r5, r6, lr}
   334b4:	4c06      	ldr	r4, [pc, #24]	; (334d0 <_close_r+0x20>)
   334b6:	0005      	movs	r5, r0
   334b8:	0008      	movs	r0, r1
   334ba:	6023      	str	r3, [r4, #0]
   334bc:	f7f5 fc7a 	bl	28db4 <_close>
   334c0:	1c43      	adds	r3, r0, #1
   334c2:	d103      	bne.n	334cc <_close_r+0x1c>
   334c4:	6823      	ldr	r3, [r4, #0]
   334c6:	2b00      	cmp	r3, #0
   334c8:	d000      	beq.n	334cc <_close_r+0x1c>
   334ca:	602b      	str	r3, [r5, #0]
   334cc:	bd70      	pop	{r4, r5, r6, pc}
   334ce:	46c0      	nop			; (mov r8, r8)
   334d0:	20005600 	.word	0x20005600

000334d4 <_fstat_r>:
   334d4:	2300      	movs	r3, #0
   334d6:	b570      	push	{r4, r5, r6, lr}
   334d8:	4c06      	ldr	r4, [pc, #24]	; (334f4 <_fstat_r+0x20>)
   334da:	0005      	movs	r5, r0
   334dc:	0008      	movs	r0, r1
   334de:	0011      	movs	r1, r2
   334e0:	6023      	str	r3, [r4, #0]
   334e2:	f7f5 fc71 	bl	28dc8 <_fstat>
   334e6:	1c43      	adds	r3, r0, #1
   334e8:	d103      	bne.n	334f2 <_fstat_r+0x1e>
   334ea:	6823      	ldr	r3, [r4, #0]
   334ec:	2b00      	cmp	r3, #0
   334ee:	d000      	beq.n	334f2 <_fstat_r+0x1e>
   334f0:	602b      	str	r3, [r5, #0]
   334f2:	bd70      	pop	{r4, r5, r6, pc}
   334f4:	20005600 	.word	0x20005600

000334f8 <_isatty_r>:
   334f8:	2300      	movs	r3, #0
   334fa:	b570      	push	{r4, r5, r6, lr}
   334fc:	4c06      	ldr	r4, [pc, #24]	; (33518 <_isatty_r+0x20>)
   334fe:	0005      	movs	r5, r0
   33500:	0008      	movs	r0, r1
   33502:	6023      	str	r3, [r4, #0]
   33504:	f7f5 fc6e 	bl	28de4 <_isatty>
   33508:	1c43      	adds	r3, r0, #1
   3350a:	d103      	bne.n	33514 <_isatty_r+0x1c>
   3350c:	6823      	ldr	r3, [r4, #0]
   3350e:	2b00      	cmp	r3, #0
   33510:	d000      	beq.n	33514 <_isatty_r+0x1c>
   33512:	602b      	str	r3, [r5, #0]
   33514:	bd70      	pop	{r4, r5, r6, pc}
   33516:	46c0      	nop			; (mov r8, r8)
   33518:	20005600 	.word	0x20005600

0003351c <_lseek_r>:
   3351c:	b570      	push	{r4, r5, r6, lr}
   3351e:	0005      	movs	r5, r0
   33520:	0008      	movs	r0, r1
   33522:	0011      	movs	r1, r2
   33524:	2200      	movs	r2, #0
   33526:	4c06      	ldr	r4, [pc, #24]	; (33540 <_lseek_r+0x24>)
   33528:	6022      	str	r2, [r4, #0]
   3352a:	001a      	movs	r2, r3
   3352c:	f7f5 fc63 	bl	28df6 <_lseek>
   33530:	1c43      	adds	r3, r0, #1
   33532:	d103      	bne.n	3353c <_lseek_r+0x20>
   33534:	6823      	ldr	r3, [r4, #0]
   33536:	2b00      	cmp	r3, #0
   33538:	d000      	beq.n	3353c <_lseek_r+0x20>
   3353a:	602b      	str	r3, [r5, #0]
   3353c:	bd70      	pop	{r4, r5, r6, pc}
   3353e:	46c0      	nop			; (mov r8, r8)
   33540:	20005600 	.word	0x20005600

00033544 <memchr>:
   33544:	b2c9      	uxtb	r1, r1
   33546:	1882      	adds	r2, r0, r2
   33548:	4290      	cmp	r0, r2
   3354a:	d101      	bne.n	33550 <memchr+0xc>
   3354c:	2000      	movs	r0, #0
   3354e:	4770      	bx	lr
   33550:	7803      	ldrb	r3, [r0, #0]
   33552:	428b      	cmp	r3, r1
   33554:	d0fb      	beq.n	3354e <memchr+0xa>
   33556:	3001      	adds	r0, #1
   33558:	e7f6      	b.n	33548 <memchr+0x4>

0003355a <_realloc_r>:
   3355a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3355c:	0007      	movs	r7, r0
   3355e:	000d      	movs	r5, r1
   33560:	0016      	movs	r6, r2
   33562:	2900      	cmp	r1, #0
   33564:	d105      	bne.n	33572 <_realloc_r+0x18>
   33566:	0011      	movs	r1, r2
   33568:	f7fe fe9e 	bl	322a8 <_malloc_r>
   3356c:	0004      	movs	r4, r0
   3356e:	0020      	movs	r0, r4
   33570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33572:	2a00      	cmp	r2, #0
   33574:	d103      	bne.n	3357e <_realloc_r+0x24>
   33576:	f7fe fe4d 	bl	32214 <_free_r>
   3357a:	0034      	movs	r4, r6
   3357c:	e7f7      	b.n	3356e <_realloc_r+0x14>
   3357e:	f000 f827 	bl	335d0 <_malloc_usable_size_r>
   33582:	002c      	movs	r4, r5
   33584:	4286      	cmp	r6, r0
   33586:	d9f2      	bls.n	3356e <_realloc_r+0x14>
   33588:	0031      	movs	r1, r6
   3358a:	0038      	movs	r0, r7
   3358c:	f7fe fe8c 	bl	322a8 <_malloc_r>
   33590:	1e04      	subs	r4, r0, #0
   33592:	d0ec      	beq.n	3356e <_realloc_r+0x14>
   33594:	0029      	movs	r1, r5
   33596:	0032      	movs	r2, r6
   33598:	f7fe fe18 	bl	321cc <memcpy>
   3359c:	0029      	movs	r1, r5
   3359e:	0038      	movs	r0, r7
   335a0:	f7fe fe38 	bl	32214 <_free_r>
   335a4:	e7e3      	b.n	3356e <_realloc_r+0x14>
	...

000335a8 <_read_r>:
   335a8:	b570      	push	{r4, r5, r6, lr}
   335aa:	0005      	movs	r5, r0
   335ac:	0008      	movs	r0, r1
   335ae:	0011      	movs	r1, r2
   335b0:	2200      	movs	r2, #0
   335b2:	4c06      	ldr	r4, [pc, #24]	; (335cc <_read_r+0x24>)
   335b4:	6022      	str	r2, [r4, #0]
   335b6:	001a      	movs	r2, r3
   335b8:	f7f5 fb7e 	bl	28cb8 <_read>
   335bc:	1c43      	adds	r3, r0, #1
   335be:	d103      	bne.n	335c8 <_read_r+0x20>
   335c0:	6823      	ldr	r3, [r4, #0]
   335c2:	2b00      	cmp	r3, #0
   335c4:	d000      	beq.n	335c8 <_read_r+0x20>
   335c6:	602b      	str	r3, [r5, #0]
   335c8:	bd70      	pop	{r4, r5, r6, pc}
   335ca:	46c0      	nop			; (mov r8, r8)
   335cc:	20005600 	.word	0x20005600

000335d0 <_malloc_usable_size_r>:
   335d0:	1f0b      	subs	r3, r1, #4
   335d2:	681b      	ldr	r3, [r3, #0]
   335d4:	1f18      	subs	r0, r3, #4
   335d6:	2b00      	cmp	r3, #0
   335d8:	da01      	bge.n	335de <_malloc_usable_size_r+0xe>
   335da:	580b      	ldr	r3, [r1, r0]
   335dc:	18c0      	adds	r0, r0, r3
   335de:	4770      	bx	lr

000335e0 <pcWelcomeMessage>:
   335e0:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   335f0:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   33600:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   33610:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   33620:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   33630:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   33640:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   33650:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   33660:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   33670:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   33680:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   33690:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   336a0:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   336b0:	2061 6966 6d72 6177 6572 7620 7265 6973     a firmware versi
   336c0:	6e6f 0a0d 0000 0000 6974 6b63 0073 0000     on......ticks...
   336d0:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   336e0:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   336f0:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   33700:	7564 656c 2072 6177 2073 7473 7261 6574     duler was starte
   33710:	0d64 000a 6c63 0073 6c63 3a73 4320 656c     d...cls.cls: Cle
   33720:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   33730:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   33740:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   33750:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   33760:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   33770:	6325 325b 004a 0000 0a0d 6556 7372 6f69     %c[2J.....Versio
   33780:	206e 754e 626d 7265 203a 0000 2e30 2e35     n Number: ..0.5.
   33790:	2e31 2e36 0030 0000 0a0d 0a0d 0000 0000     1.6.0...........
   337a0:	0a0d 6954 6b63 2073 6973 636e 2065 7473     ..Ticks since st
   337b0:	7261 2074 666f 7320 6863 6465 6c75 7265     art of scheduler
   337c0:	203a 0000 6c25 0d75 000a 0000 2030 3120     : ..%lu.....0  1
   337d0:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   337e0:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   337f0:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   33800:	3025 7832 203a 0000 2058 0000               %02x: ..X ..

0003380c <xOTAUCommand>:
   3380c:	3624 0003 3628 0003 3095 0001 0000 0000     $6..(6...0......

0003381c <xResetCommand>:
   3381c:	3658 0003 3660 0003 30cd 0001 0000 0000     X6..`6...0......

0003382c <xI2cScan>:
   3382c:	367c 0003 3680 0003 3181 0001 0000 0000     |6...6...1......

0003383c <xVersion>:
   3383c:	3698 0003 36a0 0003 30ed 0001 0000 0000     .6...6...0......

0003384c <xTicks>:
   3384c:	36c8 0003 36d0 0003 312d 0001 0000 0000     .6...6..-1......

0003385c <xClearScreen>:
   3385c:	3714 0003 3718 0003 304d 0001 0000 0000     .7...7..M0......

0003386c <main_mqtt_broker>:
   3386c:	3331 392e 2e30 3331 2e36 3631 0032 0000     13.90.136.162...
   3387c:	3025 6433 0000 0000 7473 7261 5f74 6f64     %03d....start_do
   3388c:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   3389c:	6761 2065 6f6e 2074 6572 6461 2e79 0a0d     age not ready...
   338ac:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   338bc:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   338cc:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   338dc:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   338ec:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   338fc:	6c61 6572 6461 2e79 0a0d 0000 7473 7261     already.....star
   3390c:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   3391c:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   3392c:	6165 7964 0d2e 000a 7473 7261 5f74 6f64     eady....start_do
   3393c:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   3394c:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   3395c:	000a 0000 7468 7074 2f3a 312f 2e33 3039     ....http://13.90
   3396c:	312e 3633 312e 3236 542f 7365 4174 622e     .136.162/TestA.b
   3397c:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   3398c:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   3399c:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   339ac:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   339bc:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   339cc:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   339dc:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   339ec:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   339fc:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   33a0c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   33a1c:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   33a2c:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   33a3c:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   33a4c:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   33a5c:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   33a6c:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   33a7c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   33a8c:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   33a9c:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   33aac:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   33abc:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   33acc:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   33adc:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   33aec:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   33afc:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   33b0c:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   33b1c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   33b2c:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   33b3c:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   33b4c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   33b5c:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   33b6c:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   33b7c:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   33b8c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   33b9c:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   33bac:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   33bbc:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   33bcc:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   33bdc:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   33bec:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   33bfc:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   33c0c:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   33c1c:	454e 5443 4445 0a0d 0000 0000 6570 6e6e     NECTED......penn
   33c2c:	3731 3034 6977 6966 0000 0000 6941 5072     1740wifi....AirP
   33c3c:	6e65 4e6e 7465 442d 7665 6369 0065 0000     ennNet-Device...
   33c4c:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   33c5c:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   33c6c:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   33c7c:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   33c8c:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   33c9c:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   33cac:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   33cbc:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   33ccc:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33cdc:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   33cec:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   33cfc:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   33d0c:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   33d1c:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   33d2c:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   33d3c:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   33d4c:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33d5c:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   33d6c:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   33d7c:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33d8c:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   33d9c:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   33dac:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   33dbc:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   33dcc:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   33ddc:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   33dec:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   33dfc:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   33e0c:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   33e1c:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   33e2c:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   33e3c:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   33e4c:	616d 646e 203a 0000 6425 002c 0a0d 6147     mand: ..%d,...Ga
   33e5c:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   33e6c:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   33e7c:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   33e8c:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   33e9c:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   33eac:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   33ebc:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   33ecc:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   33edc:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   33eec:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   33efc:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   33f0c:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   33f1c:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   33f2c:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   33f3c:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   33f4c:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   33f5c:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   33f6c:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   33f7c:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   33f8c:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   33f9c:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   33fac:	3631 545f 0030 0000 3150 495f 554d 455f     16_T0...P1_IMU_E
   33fbc:	4553 3135 5f36 3054 0000 0000 4544 5542     SE516_T0....DEBU
   33fcc:	5f47 3154 0000 0000 514d 5454 4320 6e6f     G_T1....MQTT Con
   33fdc:	656e 7463 6465 0a0d 0000 0000 514d 5454     nected......MQTT
   33fec:	6220 6f72 656b 2072 6564 6c63 6e69 2065      broker decline 
   33ffc:	6f79 7275 6120 6363 7365 2173 6520 7272     your access! err
   3400c:	726f 6320 646f 2065 6425 0a0d 0000 0000     or code %d......
   3401c:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
   3402c:	0d64 000a 514d 5454 6920 696e 6974 6c61     d...MQTT initial
   3403c:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   3404c:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   3405c:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   3406c:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   3407c:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   3408c:	2065 7369 2820 6425 0d29 000a 227b 2264     e is (%d)...{"d"
   3409c:	7b3a 7422 6d65 2270 253a 7d64 007d 0000     :{"temp":%d}}...
   340ac:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
   340bc:	6c46 6761 2e41 7874 2074 6461 6564 2164     FlagA.txt added!
   340cc:	0a0d 0000 3a30 6c46 6761 2e41 7874 0074     ....0:FlagA.txt.
   340dc:	6f43 6e6e 6365 6574 2064 6f74 4d20 5451     Connected to MQT
   340ec:	2054 7242 6b6f 7265 0d21 000a 227b 6d69     T Broker!...{"im
   340fc:	7875 3a22 6425 202c 6922 756d 2279 203a     ux":%d, "imuy": 
   3410c:	6425 202c 6922 756d 227a 203a 6425 007d     %d, "imuz": %d}.
   3411c:	6425 0000 7d5d 0000 0a0d 0000 3250 475f     %d..]}......P2_G
   3412c:	4d41 5f45 5345 3545 3631 545f 0030 0000     AME_ESE516_T0...
   3413c:	4544 5542 5f47 3054 0000 0000 5245 4f52     DEBUG_T0....ERRO
   3414c:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   3415c:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   3416c:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   3417c:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   3418c:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   3419c:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   341ac:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   341bc:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   341cc:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   341dc:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   341ec:	4553 3135 5f36 3054 0000 0000 514d 5454     SE516_T0....MQTT
   341fc:	7320 6e65 2064 7325 0a0d 0000 40a4 0001      send %s.....@..
   3420c:	40b0 0001 40c2 0001 4118 0001 4138 0001     .@...@...A..8A..
   3421c:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   3422c:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   3423c:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   3424c:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   3425c:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   3426c:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   3427c:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   3428c:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   3429c:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   342ac:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   342bc:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   342cc:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   342dc:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   342ec:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

000342fc <xHelpCommand>:
   342fc:	421c 0003 4224 0003 5c2d 0001 0000 0000     .B..$B..-\......
   3430c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   3431c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   3432c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   3433c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   3434c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   3435c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   3436c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   3437c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   3438c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   3439c:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   343ac:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   343bc:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   343cc:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   343dc:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   343ec:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   343fc:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   3440c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3441c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   3442c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3443c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   3444c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   3445c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   3446c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   3447c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3448c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   3449c:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   344ac:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   344bc:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   344cc:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   344dc:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   344ec:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   344fc:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3450c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   3451c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3452c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   3453c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   3454c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   3455c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   3456c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   3457c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   3458c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   3459c:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   345ac:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   345bc:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   345cc:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   345dc:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   345ec:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   345fc:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3460c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   3461c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3462c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   3463c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   3464c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   3465c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   3466c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   3467c:	6365 6374 616c 7373 0021 0000 6352 0001     ectclass!...Rc..
   3468c:	634a 0001 634e 0001 6342 0001 6346 0001     Jc..Nc..Bc..Fc..
   3469c:	6356 0001 635a 0001 635e 0001 6362 0001     Vc..Zc..^c..bc..
   346ac:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   346bc:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   346cc:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   346dc:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   346ec:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   346fc:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3470c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3471c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   3472c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   3473c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   3474c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3475c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   3476c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   3477c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   3478c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3479c:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   347ac:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   347bc:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   347cc:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   347dc:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   347ec:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   347fc:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3480c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3481c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   3482c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3483c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3484c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3485c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   3486c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   3487c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   3488c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   3489c:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   348ac:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   348bc:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   348cc:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   348dc:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   348ec:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   348fc:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3490c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   3491c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   3492c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   3493c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   3494c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   3495c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   3496c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   3497c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   3498c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   3499c:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   349ac:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   349bc:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   349cc:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   349dc:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   349ec:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   349fc:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   34a0c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   34a1c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   34a2c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   34a3c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   34a4c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   34a5c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34a6c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   34a7c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   34a8c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   34a9c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   34aac:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   34abc:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   34acc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34adc:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   34aec:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   34afc:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   34b0c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34b1c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34b2c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   34b3c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34b4c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   34b5c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   34b6c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   34b7c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   34b8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34b9c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34bac:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   34bbc:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   34bcc:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   34bdc:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   34bec:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   34bfc:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   34c0c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34c1c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34c2c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   34c3c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   34c4c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34c5c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34c6c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   34c7c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   34c8c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   34c9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34cac:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34cbc:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   34ccc:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   34cdc:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   34cec:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   34cfc:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   34d0c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   34d1c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34d2c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   34d3c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   34d4c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   34d5c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34d6c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   34d7c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   34d8c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   34d9c:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   34dac:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   34dbc:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   34dcc:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   34ddc:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   34dec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34dfc:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   34e0c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   34e1c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   34e2c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   34e3c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   34e4c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   34e5c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   34e6c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   34e7c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   34e8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34e9c:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   34eac:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   34ebc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   34ecc:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   34edc:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   34eec:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   34efc:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   34f0c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   34f1c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   34f2c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34f3c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   34f4c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   34f5c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   34f6c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   34f7c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   34f8c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   34f9c:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   34fac:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   34fbc:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   34fcc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34fdc:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   34fec:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   34ffc:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   3500c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3501c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   3502c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   3503c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   3504c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   3505c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3506c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   3507c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   3508c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   3509c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   350ac:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   350bc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   350cc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   350dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   350ec:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   350fc:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3510c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3511c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3512c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   3513c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3514c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3515c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3516c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   3517c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3518c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3519c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   351ac:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   351bc:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   351cc:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   351dc:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   351ec:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   351fc:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   3520c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   3521c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3522c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3523c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3524c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   3525c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3526c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3527c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3528c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   3529c:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   352ac:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   352bc:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   352cc:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   352dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   352ec:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   352fc:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   3530c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   3531c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   3532c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   3533c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   3534c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   3535c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   3536c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3537c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   3538c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   3539c:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   353ac:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   353bc:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   353cc:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   353dc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   353ec:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   353fc:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   3540c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   3541c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   3542c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   3543c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   3544c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   3545c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   3546c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   3547c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   3548c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   3549c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   354ac:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   354bc:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   354cc:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   354dc:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   354ec:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   354fc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3550c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   3551c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   3552c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   3553c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   3554c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   3555c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   3556c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   3557c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3558c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   3559c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   355ac:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   355bc:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   355cc:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   355dc:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   355ec:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   355fc:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3560c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   3561c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   3562c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3563c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   3564c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   3565c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3566c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3567c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3568c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3569c:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   356ac:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   356bc:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   356cc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   356dc:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   356ec:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   356fc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3570c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3571c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3572c:	0000 0000 6d54 2072 7653 0063 b3ec 0001     ....Tmr Svc.....
   3573c:	b3ec 0001 b3ec 0001 b47a 0001 b444 0001     ........z...D...
   3574c:	b46e 0001 b3ec 0001 b3ec 0001 b47a 0001     n...........z...
   3575c:	b444 0001                                   D...

00035760 <sd_mmc_trans_units>:
   35760:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003577c <sd_trans_multipliers>:
   3577c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3578c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   3579c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   357ac:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000357bc <mmc_trans_multipliers>:
   357bc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   357cc:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   357dc:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   357ec:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   357fc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3580c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3581c:	746c 6320 646d 000a 000d 0000               lt cmd......

00035828 <__FUNCTION__.16824>:
   35828:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   35838:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   35848:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   35858:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   35868:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   35878:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   35888:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   35898:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   358a8:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   358b8:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   358c8:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   358d8:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   358e8:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   358f8:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   35908:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   35918:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   35928:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   35938:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   35948:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   35958:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   35968:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   35978:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   35988:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   35998:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   359a8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   359b8:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   359c8:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   359d8:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   359e8:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   359f8:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   35a08:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   35a18:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   35a28:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   35a38:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   35a48:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   35a58:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   35a68:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   35a78:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   35a88:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   35a98:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   35aa8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   35ab8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   35ac8:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   35ad8:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   35ae8:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   35af8:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   35b08:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   35b18:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   35b28:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   35b38:	203f 6425 000a 0000 f58c 0001 f55c 0001     ? %d........\...
   35b48:	f554 0001 f56c 0001 f564 0001 f584 0001     T...l...d.......
   35b58:	f574 0001 f57c 0001                         t...|...

00035b60 <__FUNCTION__.17692>:
   35b60:	6968 5f66 6573 646e 0000 0000               hif_send....

00035b6c <__FUNCTION__.17702>:
   35b6c:	6968 5f66 7369 0072                         hif_isr.

00035b74 <__FUNCTION__.17711>:
   35b74:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00035b84 <__FUNCTION__.17723>:
   35b84:	6968 5f66 6572 6563 7669 0065               hif_receive.

00035b90 <__FUNCTION__.17739>:
   35b90:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   35ba0:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   35bb0:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   35bc0:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   35bd0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   35be0:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   35bf0:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   35c00:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   35c10:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   35c20:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   35c30:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   35c40:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   35c50:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   35c60:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   35c70:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   35c80:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   35c90:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   35ca0:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   35cb0:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   35cc0:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   35cd0:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   35ce0:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   35cf0:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   35d00:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   35d10:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   35d20:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   35d30:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   35d40:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   35d50:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   35d60:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   35d70:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   35d80:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   35d90:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   35da0:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   35db0:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   35dc0:	000a 0000 3830 353a 3a35 3735 0000 0000     ....08:55:57....
   35dd0:	7041 2072 3532 3220 3230 0034 7244 7669     Apr 25 2024.Driv
   35de0:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   35df0:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   35e00:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   35e10:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   35e20:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   35e30:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   35e40:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   35e50:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   35e60:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   35e70:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   35e80:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   35e90:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   35ea0:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   35eb0:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   35ec0:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   35ed0:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   35ee0:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   35ef0:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   35f00:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   35f10:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   35f20:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   35f30:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   35f40:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   35f50:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   35f60:	4220 6675 6566 0a72 0000 0000                Buffer.....

00035f6c <__FUNCTION__.17674>:
   35f6c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00035f78 <__FUNCTION__.17703>:
   35f78:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00035f88 <__FUNCTION__.17734>:
   35f88:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   35f98:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   35fa8:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   35fb8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   35fc8:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   35fd8:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   35fe8:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   35ff8:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   36008:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   36018:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00036028 <__FUNCTION__.17531>:
   36028:	6863 7069 775f 6b61 0065 0000               chip_wake...

00036034 <__FUNCTION__.17580>:
   36034:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   36044:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   36054:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   36064:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   36074:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   36084:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   36094:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   360a4:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   360b4:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   360c4:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   360d4:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   360e4:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   360f4:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   36104:	6920 696e 2074 7562 0a73 0000                init bus...

00036110 <__FUNCTION__.17578>:
   36110:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003611c <__FUNCTION__.17585>:
   3611c:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003612c <crc7_syndrome_table>:
   3612c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3613c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3614c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3615c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3616c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3617c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3618c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3619c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   361ac:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   361bc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   361cc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   361dc:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   361ec:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   361fc:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3620c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3621c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3622c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3623c:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3624c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3625c:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3626c:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3627c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3628c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3629c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   362ac:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   362bc:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   362cc:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   362dc:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   362ec:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   362fc:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3630c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3631c:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3632c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3633c:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3634c:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3635c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3636c:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3637c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3638c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3639c:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   363ac:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   363bc:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   363cc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   363dc:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   363ec:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   363fc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3640c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3641c:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3642c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3643c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3644c:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3645c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3646c:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3647c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3648c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3649c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   364ac:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   364bc:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   364cc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   364dc:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   364ec:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   364fc:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3650c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3651c:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3652c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3653c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3654c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3655c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3656c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3657c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3658c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3659c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   365ac:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   365bc:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   365cc:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   365dc:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   365ec:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   365fc:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3660c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3661c:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3662c:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3663c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3664c:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3665c:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3666c:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3667c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3668c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3669c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   366ac:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   366bc:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   366cc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   366dc:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   366ec:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   366fc:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3670c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3671c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3672c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3673c:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3674c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3675c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3676c:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3677c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3678c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3679c:	2e2e 0a2e 0000 0000 11b4 0002 11b4 0002     ................
   367ac:	1244 0002 1108 0002 114e 0002 1170 0002     D.......N...p...
   367bc:	11f6 0002 11f6 0002 12b0 0002 10dc 0002     ................
   367cc:	130a 0002 130a 0002 130a 0002 130a 0002     ................
   367dc:	1192 0002 1714 0002 1714 0002 179c 0002     ................
   367ec:	1678 0002 16ba 0002 16d8 0002 1752 0002     x...........R...
   367fc:	1752 0002 17fe 0002 1650 0002 184e 0002     R.......P...N...
   3680c:	184e 0002 184e 0002 184e 0002 16f6 0002     N...N...N.......

0003681c <__FUNCTION__.16853>:
   3681c:	7073 5f69 6d63 0064                         spi_cmd.

00036824 <__FUNCTION__.16860>:
   36824:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00036834 <__FUNCTION__.16869>:
   36834:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00036840 <__FUNCTION__.16902>:
   36840:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   36850:	0000 0000                                   ....

00036854 <__FUNCTION__.16948>:
   36854:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00036864 <__FUNCTION__.16960>:
   36864:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00036874 <__FUNCTION__.16971>:
   36874:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00036884 <__FUNCTION__.16983>:
   36884:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00036894 <__FUNCTION__.16994>:
   36894:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000368a0 <__FUNCTION__.17015>:
   368a0:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   368b0:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   368c0:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   368d0:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   368e0:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   368f0:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   36900:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   36910:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   36920:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   36930:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   36940:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   36950:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   36960:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   36970:	2074 2230 0000 0000                         t 0"....

00036978 <lun_desc>:
   36978:	ce11 0001 ce69 0001 ceb5 0001 cf01 0001     ....i...........
   36988:	cf31 0001 cfb5 0001 d045 0001 6960 0003     1.......E...`i..
   36998:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   369a8:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   369b8:	7132 0002 71ac 0002 71ac 0002 7150 0002     2q...q...q..Pq..
   369c8:	714a 0002 7156 0002 7138 0002 715c 0002     Jq..Vq..8q..\q..
   369d8:	7192 0002 7394 0002 73e4 0002 73e4 0002     .q...s...s...s..
   369e8:	73e0 0002 7386 0002 73a6 0002 7376 0002     .s...s...s..vs..
   369f8:	73b8 0002 73ca 0002 7432 0002 7460 0002     .s...s..2t..`t..
   36a08:	7460 0002 745c 0002 742c 0002 7438 0002     `t..\t..,t..8t..
   36a18:	7426 0002 743e 0002 7444 0002               &t..>t..Dt..

00036a24 <tcc_modules>:
   36a24:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00036a30 <_tcc_gclk_ids>:
   36a30:	1a1a 001b                                   ....

00036a34 <_tcc_apbcmasks>:
   36a34:	0100 0000 0200 0000 0400 0000               ............

00036a40 <_tcc_maxs>:
   36a40:	ffff 00ff ffff 00ff ffff 0000               ............

00036a4c <_tcc_cc_nums>:
   36a4c:	0204 0002                                   ....

00036a50 <_tcc_ow_nums>:
   36a50:	0408 0002                                   ....

00036a54 <_tcc_intflag>:
   36a54:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   36a64:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   36a74:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00036a84 <LfnOfs>:
   36a84:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   36a94:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   36aa4:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   36ab4:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   36ac4:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   36ad4:	5441 2020 2020 0020                         AT     .

00036adc <excvt.4558>:
   36adc:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   36aec:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   36afc:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   36b0c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   36b1c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   36b2c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   36b3c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   36b4c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00036b5c <Tbl>:
   36b5c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   36b6c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   36b7c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   36b8c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   36b9c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   36bac:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   36bbc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   36bcc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   36bdc:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   36bec:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   36bfc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   36c0c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   36c1c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   36c2c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   36c3c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   36c4c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00036c5c <tbl_lower.4308>:
   36c5c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   36c6c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   36c7c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   36c8c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   36c9c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   36cac:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   36cbc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   36ccc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   36cdc:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   36cec:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   36cfc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   36d0c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   36d1c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   36d2c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   36d3c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   36d4c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   36d5c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   36d6c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   36d7c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   36d8c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   36d9c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   36dac:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   36dbc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   36dcc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   36ddc:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   36dec:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   36dfc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   36e0c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   36e1c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   36e2c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00036e3c <tbl_upper.4309>:
   36e3c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   36e4c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   36e5c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   36e6c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   36e7c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   36e8c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   36e9c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   36eac:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   36ebc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   36ecc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   36edc:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   36eec:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   36efc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   36f0c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   36f1c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   36f2c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   36f3c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   36f4c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   36f5c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   36f6c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   36f7c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   36f8c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   36f9c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   36fac:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   36fbc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   36fcc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   36fdc:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   36fec:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   36ffc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3700c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3701c:	c79e 0002 c79e 0002 c79e 0002 c62c 0002     ............,...
   3702c:	c79e 0002 c716 0002 c79e 0002 c79e 0002     ................
   3703c:	c79e 0002 c79e 0002 c79e 0002 c79e 0002     ................
   3704c:	c79e 0002 c790 0002 514d 4354 0000 0000     ........MQTC....
   3705c:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3706c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   370ac:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   370c4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   37104:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   37114:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   37124:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   37134:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   37144:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   37154:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   37164:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   37174:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   37184:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   37194:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   371a4:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   371b4:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   371c4:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   371d4:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   371e4:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   371f4:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   37204:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   37214:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   37224:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   37234:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   37244:	5448 5054 002f 0000 0d31 0000 e892 0002     HTTP/...1.......
   37254:	e88c 0002 e886 0002 e880 0002 e898 0002     ................
   37264:	e87a 0002 e898 0002 e874 0002 e86e 0002     z.......t...n...
   37274:	e898 0002 e868 0002 e868 0002 e862 0002     ....h...h...b...
   37284:	e85c 0002 e856 0002 2000 4200 2400 4200     \...V.... .B.$.B
   37294:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   372a4:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   372b4:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   372c4:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   372d4:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   372e4:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   372f4:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   37304:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   37314:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   37324:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   37334:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   37344:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   37354:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   37364:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   37374:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   37384:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   37394:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   373a4:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   373b4:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   373c4:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   373d4:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   373e4:	0a0d 0000 4441 5f43 5053 5f49 4154 4b53     ....ADC_SPI_TASK
   373f4:	0000 0000 5245 3a52 4120 4344 5320 4950     ....ERR: ADC SPI
   37404:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   37414:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   37424:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   37434:	6174 7472 6e69 2067 5053 3a49 2520 0d64     tarting SPI: %d.
   37444:	000a 0000 7245 6f72 2072 6e6f 6d20 6d65     ....Error on mem
   37454:	726f 2079 6c61 6f6c 6163 6974 6e6f 6f20     ory allocation o
   37464:	206e 5246 4545 5452 534f 0d21 000a 0000     n FREERTOS!.....
   37474:	7245 6f72 2072 6e6f 7320 6174 6b63 6f20     Error on stack o
   37484:	6576 6672 6f6c 2077 6e6f 4620 4552 5245     verflow on FREER
   37494:	4f54 2153 0a0d 0000 10a0 0003 1082 0003     TOS!............
   374a4:	103c 0003 0f5a 0003 103c 0003 1074 0003     <...Z...<...t...
   374b4:	103c 0003 0f5a 0003 1082 0003 1082 0003     <...Z...........
   374c4:	1074 0003 0f5a 0003 0f52 0003 0f52 0003     t...Z...R...R...
   374d4:	0f52 0003 12b8 0003 1700 0003 15c0 0003     R...............
   374e4:	15c0 0003 15bc 0003 16d8 0003 16d8 0003     ................
   374f4:	16ca 0003 15bc 0003 16d8 0003 16ca 0003     ................
   37504:	16d8 0003 15bc 0003 16e0 0003 16e0 0003     ................
   37514:	16e0 0003 18e4 0003                         ........

0003751c <_global_impure_ptr>:
   3751c:	0114 2000                                   ... 

00037520 <__sf_fake_stderr>:
	...

00037540 <__sf_fake_stdin>:
	...

00037560 <__sf_fake_stdout>:
	...
   37580:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   37590:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   375a0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   375b0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000375bd <_ctype_>:
   375bd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   375cd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   375dd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   375ed:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   375fd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3760d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3761d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3762d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3763d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000376c0 <_init>:
   376c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   376c2:	46c0      	nop			; (mov r8, r8)
   376c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   376c6:	bc08      	pop	{r3}
   376c8:	469e      	mov	lr, r3
   376ca:	4770      	bx	lr

000376cc <__init_array_start>:
   376cc:	000120dd 	.word	0x000120dd

000376d0 <_fini>:
   376d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   376d2:	46c0      	nop			; (mov r8, r8)
   376d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   376d6:	bc08      	pop	{r3}
   376d8:	469e      	mov	lr, r3
   376da:	4770      	bx	lr

000376dc <__fini_array_start>:
   376dc:	000120b5 	.word	0x000120b5
